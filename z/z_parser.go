// Generated from ZParser.g4 by ANTLR 4.7.

package z // ZParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa


var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 158, 1101, 
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23, 
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4, 
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34, 
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9, 
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44, 
	4, 45, 9, 45, 4, 46, 9, 46, 3, 2, 3, 2, 3, 2, 7, 2, 96, 10, 2, 12, 2, 14, 
	2, 99, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 108, 10, 
	3, 3, 3, 3, 3, 7, 3, 112, 10, 3, 12, 3, 14, 3, 115, 11, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 7, 3, 122, 10, 3, 12, 3, 14, 3, 125, 11, 3, 5, 3, 127, 
	10, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 134, 10, 4, 3, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 145, 10, 4, 3, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 156, 10, 4, 3, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 168, 10, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 5, 4, 175, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 
	3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 199, 10, 4, 12, 4, 14, 4, 202, 11, 4, 3, 
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 223, 10, 4, 3, 5, 3, 5, 3, 
	5, 3, 5, 3, 5, 7, 5, 230, 10, 5, 12, 5, 14, 5, 233, 11, 5, 3, 6, 3, 6, 
	3, 6, 3, 6, 3, 6, 5, 6, 240, 10, 6, 3, 7, 3, 7, 3, 7, 7, 7, 245, 10, 7, 
	12, 7, 14, 7, 248, 11, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 276, 10, 8, 3, 8, 3, 8, 3, 
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 
	8, 3, 8, 3, 8, 3, 8, 7, 8, 296, 10, 8, 12, 8, 14, 8, 299, 11, 8, 3, 9, 
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 331, 10, 9, 12, 9, 14, 9, 334, 11, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 356, 10, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 5, 9, 362, 10, 9, 3, 9, 5, 9, 365, 10, 9, 3, 9, 3, 
	9, 3, 9, 5, 9, 370, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 376, 10, 9, 3, 
	9, 5, 9, 379, 10, 9, 3, 9, 3, 9, 3, 9, 7, 9, 384, 10, 9, 12, 9, 14, 9, 
	387, 11, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 393, 10, 9, 3, 9, 3, 9, 3, 9, 
	3, 9, 3, 9, 5, 9, 400, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 
	7, 9, 421, 10, 9, 12, 9, 14, 9, 424, 11, 9, 5, 9, 426, 10, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 6, 9, 433, 10, 9, 13, 9, 14, 9, 434, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 448, 10, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 481, 10, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 5, 9, 487, 10, 9, 3, 9, 5, 9, 490, 10, 9, 3, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 501, 10, 9, 12, 9, 14, 9, 504, 11, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 6, 9, 511, 10, 9, 13, 9, 14, 9, 512, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 520, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 
	9, 526, 10, 9, 3, 9, 5, 9, 529, 10, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 543, 10, 9, 12, 9, 14, 9, 
	546, 11, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 556, 
	10, 9, 12, 9, 14, 9, 559, 11, 9, 3, 10, 5, 10, 562, 10, 10, 3, 10, 5, 10, 
	565, 10, 10, 3, 10, 5, 10, 568, 10, 10, 3, 10, 3, 10, 5, 10, 572, 10, 10, 
	3, 10, 3, 10, 5, 10, 576, 10, 10, 5, 10, 578, 10, 10, 3, 10, 5, 10, 581, 
	10, 10, 3, 11, 3, 11, 3, 11, 7, 11, 586, 10, 11, 12, 11, 14, 11, 589, 11, 
	11, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 595, 10, 12, 3, 13, 3, 13, 3, 13, 
	7, 13, 600, 10, 13, 12, 13, 14, 13, 603, 11, 13, 3, 13, 3, 13, 3, 13, 3, 
	13, 3, 13, 5, 13, 610, 10, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 
	5, 14, 618, 10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 
	15, 627, 10, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 
	5, 18, 637, 10, 18, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 643, 10, 19, 3, 
	19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 22, 
	3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 5, 23, 661, 10, 23, 3, 24, 3, 24, 3, 
	24, 3, 24, 3, 24, 5, 24, 668, 10, 24, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 
	674, 10, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 
	26, 7, 26, 685, 10, 26, 12, 26, 14, 26, 688, 11, 26, 3, 26, 3, 26, 3, 26, 
	3, 26, 5, 26, 694, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 
	26, 702, 10, 26, 12, 26, 14, 26, 705, 11, 26, 3, 26, 3, 26, 3, 26, 3, 26, 
	5, 26, 711, 10, 26, 3, 26, 5, 26, 714, 10, 26, 3, 27, 3, 27, 3, 27, 3, 
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 726, 10, 27, 12, 27, 
	14, 27, 729, 11, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 735, 10, 27, 3, 
	27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 743, 10, 27, 12, 27, 14, 
	27, 746, 11, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 752, 10, 27, 5, 27, 
	754, 10, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 
	28, 3, 28, 3, 28, 3, 28, 7, 28, 768, 10, 28, 12, 28, 14, 28, 771, 11, 28, 
	3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 777, 10, 28, 3, 28, 3, 28, 3, 28, 3, 
	28, 3, 28, 3, 28, 3, 28, 7, 28, 786, 10, 28, 12, 28, 14, 28, 789, 11, 28, 
	3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 795, 10, 28, 3, 28, 5, 28, 798, 10, 
	28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 805, 10, 29, 12, 29, 14, 
	29, 808, 11, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 814, 10, 29, 3, 29, 
	3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 821, 10, 29, 12, 29, 14, 29, 824, 11, 
	29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 830, 10, 29, 5, 29, 832, 10, 29, 
	3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 838, 10, 30, 3, 31, 3, 31, 3, 31, 3, 
	31, 3, 31, 7, 31, 845, 10, 31, 12, 31, 14, 31, 848, 11, 31, 3, 31, 3, 31, 
	3, 31, 5, 31, 853, 10, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 7, 
	32, 861, 10, 32, 12, 32, 14, 32, 864, 11, 32, 3, 32, 3, 32, 5, 32, 868, 
	10, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 7, 33, 877, 10, 
	33, 12, 33, 14, 33, 880, 11, 33, 3, 33, 3, 33, 3, 33, 5, 33, 885, 10, 33, 
	3, 34, 3, 34, 3, 34, 7, 34, 890, 10, 34, 12, 34, 14, 34, 893, 11, 34, 3, 
	34, 3, 34, 3, 34, 3, 35, 3, 35, 3, 35, 3, 35, 5, 35, 902, 10, 35, 3, 36, 
	3, 36, 3, 36, 3, 36, 5, 36, 908, 10, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 
	36, 914, 10, 36, 3, 36, 5, 36, 917, 10, 36, 3, 36, 5, 36, 920, 10, 36, 
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 928, 10, 37, 3, 37, 3, 
	37, 3, 37, 3, 37, 5, 37, 934, 10, 37, 3, 37, 5, 37, 937, 10, 37, 5, 37, 
	939, 10, 37, 3, 38, 3, 38, 3, 38, 3, 38, 6, 38, 945, 10, 38, 13, 38, 14, 
	38, 946, 3, 38, 3, 38, 3, 38, 6, 38, 952, 10, 38, 13, 38, 14, 38, 953, 
	3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 960, 10, 38, 3, 38, 3, 38, 3, 38, 3, 
	38, 5, 38, 966, 10, 38, 3, 38, 5, 38, 969, 10, 38, 3, 38, 3, 38, 3, 38, 
	3, 38, 3, 38, 5, 38, 976, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 982, 
	10, 38, 3, 38, 5, 38, 985, 10, 38, 3, 38, 3, 38, 5, 38, 989, 10, 38, 3, 
	39, 3, 39, 5, 39, 993, 10, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 999, 
	10, 39, 3, 39, 5, 39, 1002, 10, 39, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 
	1008, 10, 40, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1014, 10, 41, 3, 41, 3, 
	41, 3, 41, 3, 41, 5, 41, 1020, 10, 41, 3, 41, 5, 41, 1023, 10, 41, 3, 41, 
	5, 41, 1026, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1034, 
	10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42, 1040, 10, 42, 3, 42, 5, 42, 
	1043, 10, 42, 5, 42, 1045, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 
	43, 3, 43, 5, 43, 1054, 10, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 1060, 
	10, 43, 3, 43, 5, 43, 1063, 10, 43, 3, 43, 3, 43, 5, 43, 1067, 10, 43, 
	3, 44, 3, 44, 5, 44, 1071, 10, 44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 1077, 
	10, 44, 3, 44, 5, 44, 1080, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 
	1086, 10, 45, 3, 45, 6, 45, 1089, 10, 45, 13, 45, 14, 45, 1090, 3, 46, 
	3, 46, 3, 46, 7, 46, 1096, 10, 46, 12, 46, 14, 46, 1099, 11, 46, 3, 46, 
	2, 4, 14, 16, 47, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 
	32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 
	68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 2, 8, 4, 2, 22, 22, 48, 
	48, 4, 2, 29, 29, 35, 35, 3, 2, 155, 156, 4, 2, 152, 152, 154, 154, 4, 
	2, 148, 148, 150, 150, 5, 2, 51, 51, 62, 62, 141, 141, 2, 1278, 2, 97, 
	3, 2, 2, 2, 4, 126, 3, 2, 2, 2, 6, 222, 3, 2, 2, 2, 8, 224, 3, 2, 2, 2, 
	10, 234, 3, 2, 2, 2, 12, 241, 3, 2, 2, 2, 14, 275, 3, 2, 2, 2, 16, 447, 
	3, 2, 2, 2, 18, 561, 3, 2, 2, 2, 20, 582, 3, 2, 2, 2, 22, 590, 3, 2, 2, 
	2, 24, 609, 3, 2, 2, 2, 26, 617, 3, 2, 2, 2, 28, 626, 3, 2, 2, 2, 30, 628, 
	3, 2, 2, 2, 32, 630, 3, 2, 2, 2, 34, 636, 3, 2, 2, 2, 36, 638, 3, 2, 2, 
	2, 38, 646, 3, 2, 2, 2, 40, 650, 3, 2, 2, 2, 42, 654, 3, 2, 2, 2, 44, 660, 
	3, 2, 2, 2, 46, 667, 3, 2, 2, 2, 48, 673, 3, 2, 2, 2, 50, 713, 3, 2, 2, 
	2, 52, 753, 3, 2, 2, 2, 54, 797, 3, 2, 2, 2, 56, 831, 3, 2, 2, 2, 58, 837, 
	3, 2, 2, 2, 60, 852, 3, 2, 2, 2, 62, 867, 3, 2, 2, 2, 64, 884, 3, 2, 2, 
	2, 66, 886, 3, 2, 2, 2, 68, 901, 3, 2, 2, 2, 70, 919, 3, 2, 2, 2, 72, 938, 
	3, 2, 2, 2, 74, 988, 3, 2, 2, 2, 76, 990, 3, 2, 2, 2, 78, 1007, 3, 2, 2, 
	2, 80, 1025, 3, 2, 2, 2, 82, 1044, 3, 2, 2, 2, 84, 1066, 3, 2, 2, 2, 86, 
	1068, 3, 2, 2, 2, 88, 1088, 3, 2, 2, 2, 90, 1092, 3, 2, 2, 2, 92, 96, 7, 
	6, 2, 2, 93, 96, 5, 4, 3, 2, 94, 96, 5, 6, 4, 2, 95, 92, 3, 2, 2, 2, 95, 
	93, 3, 2, 2, 2, 95, 94, 3, 2, 2, 2, 96, 99, 3, 2, 2, 2, 97, 95, 3, 2, 2, 
	2, 97, 98, 3, 2, 2, 2, 98, 100, 3, 2, 2, 2, 99, 97, 3, 2, 2, 2, 100, 101, 
	7, 2, 2, 3, 101, 3, 3, 2, 2, 2, 102, 103, 7, 3, 2, 2, 103, 104, 7, 36, 
	2, 2, 104, 105, 7, 70, 2, 2, 105, 107, 7, 32, 2, 2, 106, 108, 5, 12, 7, 
	2, 107, 106, 3, 2, 2, 2, 107, 108, 3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 
	113, 7, 20, 2, 2, 110, 112, 5, 6, 4, 2, 111, 110, 3, 2, 2, 2, 112, 115, 
	3, 2, 2, 2, 113, 111, 3, 2, 2, 2, 113, 114, 3, 2, 2, 2, 114, 127, 3, 2, 
	2, 2, 115, 113, 3, 2, 2, 2, 116, 117, 7, 3, 2, 2, 117, 118, 7, 36, 2, 2, 
	118, 119, 7, 70, 2, 2, 119, 123, 7, 20, 2, 2, 120, 122, 5, 6, 4, 2, 121, 
	120, 3, 2, 2, 2, 122, 125, 3, 2, 2, 2, 123, 121, 3, 2, 2, 2, 123, 124, 
	3, 2, 2, 2, 124, 127, 3, 2, 2, 2, 125, 123, 3, 2, 2, 2, 126, 102, 3, 2, 
	2, 2, 126, 116, 3, 2, 2, 2, 127, 5, 3, 2, 2, 2, 128, 129, 7, 3, 2, 2, 129, 
	130, 7, 11, 2, 2, 130, 131, 5, 12, 7, 2, 131, 133, 7, 12, 2, 2, 132, 134, 
	7, 22, 2, 2, 133, 132, 3, 2, 2, 2, 133, 134, 3, 2, 2, 2, 134, 135, 3, 2, 
	2, 2, 135, 136, 7, 20, 2, 2, 136, 223, 3, 2, 2, 2, 137, 138, 7, 5, 2, 2, 
	138, 139, 5, 18, 10, 2, 139, 140, 7, 20, 2, 2, 140, 223, 3, 2, 2, 2, 141, 
	142, 7, 4, 2, 2, 142, 144, 7, 70, 2, 2, 143, 145, 7, 22, 2, 2, 144, 143, 
	3, 2, 2, 2, 144, 145, 3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 146, 147, 5, 18, 
	10, 2, 147, 148, 7, 20, 2, 2, 148, 223, 3, 2, 2, 2, 149, 150, 7, 5, 2, 
	2, 150, 151, 7, 19, 2, 2, 151, 152, 7, 11, 2, 2, 152, 153, 5, 12, 7, 2, 
	153, 155, 7, 12, 2, 2, 154, 156, 7, 22, 2, 2, 155, 154, 3, 2, 2, 2, 155, 
	156, 3, 2, 2, 2, 156, 157, 3, 2, 2, 2, 157, 158, 5, 18, 10, 2, 158, 159, 
	7, 20, 2, 2, 159, 223, 3, 2, 2, 2, 160, 161, 7, 4, 2, 2, 161, 162, 7, 19, 
	2, 2, 162, 163, 7, 70, 2, 2, 163, 164, 7, 11, 2, 2, 164, 165, 5, 12, 7, 
	2, 165, 167, 7, 12, 2, 2, 166, 168, 7, 22, 2, 2, 167, 166, 3, 2, 2, 2, 
	167, 168, 3, 2, 2, 2, 168, 169, 3, 2, 2, 2, 169, 170, 5, 18, 10, 2, 170, 
	171, 7, 20, 2, 2, 171, 223, 3, 2, 2, 2, 172, 174, 7, 3, 2, 2, 173, 175, 
	7, 22, 2, 2, 174, 173, 3, 2, 2, 2, 174, 175, 3, 2, 2, 2, 175, 176, 3, 2, 
	2, 2, 176, 177, 5, 22, 12, 2, 177, 178, 7, 20, 2, 2, 178, 223, 3, 2, 2, 
	2, 179, 180, 7, 3, 2, 2, 180, 181, 5, 44, 23, 2, 181, 182, 7, 11, 2, 2, 
	182, 183, 5, 12, 7, 2, 183, 184, 7, 12, 2, 2, 184, 185, 7, 40, 2, 2, 185, 
	186, 5, 16, 9, 2, 186, 187, 7, 20, 2, 2, 187, 223, 3, 2, 2, 2, 188, 189, 
	7, 3, 2, 2, 189, 190, 5, 58, 30, 2, 190, 191, 7, 40, 2, 2, 191, 192, 5, 
	16, 9, 2, 192, 193, 7, 20, 2, 2, 193, 223, 3, 2, 2, 2, 194, 195, 7, 3, 
	2, 2, 195, 200, 5, 8, 5, 2, 196, 197, 7, 44, 2, 2, 197, 199, 5, 8, 5, 2, 
	198, 196, 3, 2, 2, 2, 199, 202, 3, 2, 2, 2, 200, 198, 3, 2, 2, 2, 200, 
	201, 3, 2, 2, 2, 201, 203, 3, 2, 2, 2, 202, 200, 3, 2, 2, 2, 203, 204, 
	7, 20, 2, 2, 204, 223, 3, 2, 2, 2, 205, 206, 7, 3, 2, 2, 206, 207, 7, 52, 
	2, 2, 207, 208, 5, 14, 8, 2, 208, 209, 7, 20, 2, 2, 209, 223, 3, 2, 2, 
	2, 210, 211, 7, 3, 2, 2, 211, 212, 7, 11, 2, 2, 212, 213, 5, 12, 7, 2, 
	213, 214, 7, 12, 2, 2, 214, 215, 7, 52, 2, 2, 215, 216, 5, 14, 8, 2, 216, 
	217, 7, 20, 2, 2, 217, 223, 3, 2, 2, 2, 218, 219, 7, 3, 2, 2, 219, 220, 
	5, 26, 14, 2, 220, 221, 7, 20, 2, 2, 221, 223, 3, 2, 2, 2, 222, 128, 3, 
	2, 2, 2, 222, 137, 3, 2, 2, 2, 222, 141, 3, 2, 2, 2, 222, 149, 3, 2, 2, 
	2, 222, 160, 3, 2, 2, 2, 222, 172, 3, 2, 2, 2, 222, 179, 3, 2, 2, 2, 222, 
	188, 3, 2, 2, 2, 222, 194, 3, 2, 2, 2, 222, 205, 3, 2, 2, 2, 222, 210, 
	3, 2, 2, 2, 222, 218, 3, 2, 2, 2, 223, 7, 3, 2, 2, 2, 224, 225, 7, 70, 
	2, 2, 225, 226, 7, 42, 2, 2, 226, 231, 5, 10, 6, 2, 227, 228, 7, 43, 2, 
	2, 228, 230, 5, 10, 6, 2, 229, 227, 3, 2, 2, 2, 230, 233, 3, 2, 2, 2, 231, 
	229, 3, 2, 2, 2, 231, 232, 3, 2, 2, 2, 232, 9, 3, 2, 2, 2, 233, 231, 3, 
	2, 2, 2, 234, 239, 5, 44, 23, 2, 235, 236, 7, 17, 2, 2, 236, 237, 5, 16, 
	9, 2, 237, 238, 7, 18, 2, 2, 238, 240, 3, 2, 2, 2, 239, 235, 3, 2, 2, 2, 
	239, 240, 3, 2, 2, 2, 240, 11, 3, 2, 2, 2, 241, 246, 7, 70, 2, 2, 242, 
	243, 7, 41, 2, 2, 243, 245, 7, 70, 2, 2, 244, 242, 3, 2, 2, 2, 245, 248, 
	3, 2, 2, 2, 246, 244, 3, 2, 2, 2, 246, 247, 3, 2, 2, 2, 247, 13, 3, 2, 
	2, 2, 248, 246, 3, 2, 2, 2, 249, 250, 8, 8, 1, 2, 250, 251, 7, 53, 2, 2, 
	251, 252, 5, 18, 10, 2, 252, 253, 7, 54, 2, 2, 253, 254, 5, 14, 8, 15, 
	254, 276, 3, 2, 2, 2, 255, 256, 7, 55, 2, 2, 256, 257, 5, 18, 10, 2, 257, 
	258, 7, 54, 2, 2, 258, 259, 5, 14, 8, 14, 259, 276, 3, 2, 2, 2, 260, 261, 
	7, 56, 2, 2, 261, 262, 5, 18, 10, 2, 262, 263, 7, 54, 2, 2, 263, 264, 5, 
	14, 8, 13, 264, 276, 3, 2, 2, 2, 265, 266, 7, 61, 2, 2, 266, 276, 5, 14, 
	8, 8, 267, 276, 5, 68, 35, 2, 268, 276, 5, 16, 9, 2, 269, 276, 7, 38, 2, 
	2, 270, 276, 7, 25, 2, 2, 271, 272, 7, 9, 2, 2, 272, 273, 5, 14, 8, 2, 
	273, 274, 7, 10, 2, 2, 274, 276, 3, 2, 2, 2, 275, 249, 3, 2, 2, 2, 275, 
	255, 3, 2, 2, 2, 275, 260, 3, 2, 2, 2, 275, 265, 3, 2, 2, 2, 275, 267, 
	3, 2, 2, 2, 275, 268, 3, 2, 2, 2, 275, 269, 3, 2, 2, 2, 275, 270, 3, 2, 
	2, 2, 275, 271, 3, 2, 2, 2, 276, 297, 3, 2, 2, 2, 277, 278, 12, 17, 2, 
	2, 278, 279, 7, 22, 2, 2, 279, 296, 5, 14, 8, 18, 280, 281, 12, 16, 2, 
	2, 281, 282, 7, 48, 2, 2, 282, 296, 5, 14, 8, 17, 283, 284, 12, 12, 2, 
	2, 284, 285, 7, 57, 2, 2, 285, 296, 5, 14, 8, 13, 286, 287, 12, 11, 2, 
	2, 287, 288, 7, 58, 2, 2, 288, 296, 5, 14, 8, 12, 289, 290, 12, 10, 2, 
	2, 290, 291, 7, 59, 2, 2, 291, 296, 5, 14, 8, 11, 292, 293, 12, 9, 2, 2, 
	293, 294, 7, 60, 2, 2, 294, 296, 5, 14, 8, 10, 295, 277, 3, 2, 2, 2, 295, 
	280, 3, 2, 2, 2, 295, 283, 3, 2, 2, 2, 295, 286, 3, 2, 2, 2, 295, 289, 
	3, 2, 2, 2, 295, 292, 3, 2, 2, 2, 296, 299, 3, 2, 2, 2, 297, 295, 3, 2, 
	2, 2, 297, 298, 3, 2, 2, 2, 298, 15, 3, 2, 2, 2, 299, 297, 3, 2, 2, 2, 
	300, 301, 8, 9, 1, 2, 301, 302, 7, 53, 2, 2, 302, 303, 5, 18, 10, 2, 303, 
	304, 7, 54, 2, 2, 304, 305, 5, 16, 9, 46, 305, 448, 3, 2, 2, 2, 306, 307, 
	7, 55, 2, 2, 307, 308, 5, 18, 10, 2, 308, 309, 7, 54, 2, 2, 309, 310, 5, 
	16, 9, 45, 310, 448, 3, 2, 2, 2, 311, 312, 7, 56, 2, 2, 312, 313, 5, 18, 
	10, 2, 313, 314, 7, 54, 2, 2, 314, 315, 5, 16, 9, 44, 315, 448, 3, 2, 2, 
	2, 316, 317, 7, 66, 2, 2, 317, 318, 5, 18, 10, 2, 318, 319, 7, 54, 2, 2, 
	319, 320, 5, 16, 9, 43, 320, 448, 3, 2, 2, 2, 321, 322, 7, 67, 2, 2, 322, 
	323, 5, 18, 10, 2, 323, 324, 7, 54, 2, 2, 324, 325, 5, 16, 9, 42, 325, 
	448, 3, 2, 2, 2, 326, 327, 7, 30, 2, 2, 327, 332, 5, 22, 12, 2, 328, 329, 
	7, 48, 2, 2, 329, 331, 5, 22, 12, 2, 330, 328, 3, 2, 2, 2, 331, 334, 3, 
	2, 2, 2, 332, 330, 3, 2, 2, 2, 332, 333, 3, 2, 2, 2, 333, 335, 3, 2, 2, 
	2, 334, 332, 3, 2, 2, 2, 335, 336, 7, 54, 2, 2, 336, 337, 5, 16, 9, 41, 
	337, 448, 3, 2, 2, 2, 338, 339, 7, 61, 2, 2, 339, 448, 5, 16, 9, 36, 340, 
	341, 7, 28, 2, 2, 341, 342, 5, 14, 8, 2, 342, 343, 7, 37, 2, 2, 343, 344, 
	5, 16, 9, 2, 344, 345, 7, 24, 2, 2, 345, 346, 5, 16, 9, 35, 346, 448, 3, 
	2, 2, 2, 347, 348, 7, 33, 2, 2, 348, 448, 5, 16, 9, 30, 349, 350, 7, 31, 
	2, 2, 350, 448, 5, 16, 9, 28, 351, 352, 7, 138, 2, 2, 352, 448, 5, 16, 
	9, 27, 353, 355, 7, 144, 2, 2, 354, 356, 5, 88, 45, 2, 355, 354, 3, 2, 
	2, 2, 355, 356, 3, 2, 2, 2, 356, 364, 3, 2, 2, 2, 357, 358, 5, 16, 9, 2, 
	358, 359, 7, 152, 2, 2, 359, 365, 3, 2, 2, 2, 360, 362, 5, 90, 46, 2, 361, 
	360, 3, 2, 2, 2, 361, 362, 3, 2, 2, 2, 362, 363, 3, 2, 2, 2, 363, 365, 
	7, 154, 2, 2, 364, 357, 3, 2, 2, 2, 364, 361, 3, 2, 2, 2, 365, 366, 3, 
	2, 2, 2, 366, 448, 5, 16, 9, 26, 367, 369, 7, 144, 2, 2, 368, 370, 5, 88, 
	45, 2, 369, 368, 3, 2, 2, 2, 369, 370, 3, 2, 2, 2, 370, 378, 3, 2, 2, 2, 
	371, 372, 5, 16, 9, 2, 372, 373, 7, 148, 2, 2, 373, 379, 3, 2, 2, 2, 374, 
	376, 5, 90, 46, 2, 375, 374, 3, 2, 2, 2, 375, 376, 3, 2, 2, 2, 376, 377, 
	3, 2, 2, 2, 377, 379, 7, 150, 2, 2, 378, 371, 3, 2, 2, 2, 378, 375, 3, 
	2, 2, 2, 379, 448, 3, 2, 2, 2, 380, 381, 7, 65, 2, 2, 381, 385, 5, 16, 
	9, 2, 382, 384, 7, 8, 2, 2, 383, 382, 3, 2, 2, 2, 384, 387, 3, 2, 2, 2, 
	385, 383, 3, 2, 2, 2, 385, 386, 3, 2, 2, 2, 386, 448, 3, 2, 2, 2, 387, 
	385, 3, 2, 2, 2, 388, 448, 5, 46, 24, 2, 389, 390, 5, 46, 24, 2, 390, 392, 
	7, 11, 2, 2, 391, 393, 5, 90, 46, 2, 392, 391, 3, 2, 2, 2, 392, 393, 3, 
	2, 2, 2, 393, 394, 3, 2, 2, 2, 394, 395, 7, 12, 2, 2, 395, 448, 3, 2, 2, 
	2, 396, 448, 7, 7, 2, 2, 397, 399, 7, 13, 2, 2, 398, 400, 5, 90, 46, 2, 
	399, 398, 3, 2, 2, 2, 399, 400, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 
	448, 7, 14, 2, 2, 402, 403, 7, 13, 2, 2, 403, 404, 5, 18, 10, 2, 404, 405, 
	7, 54, 2, 2, 405, 406, 5, 16, 9, 2, 406, 407, 7, 14, 2, 2, 407, 448, 3, 
	2, 2, 2, 408, 409, 7, 13, 2, 2, 409, 410, 5, 18, 10, 2, 410, 411, 7, 14, 
	2, 2, 411, 448, 3, 2, 2, 2, 412, 413, 7, 11, 2, 2, 413, 414, 5, 18, 10, 
	2, 414, 415, 7, 12, 2, 2, 415, 448, 3, 2, 2, 2, 416, 425, 7, 15, 2, 2, 
	417, 422, 5, 22, 12, 2, 418, 419, 7, 41, 2, 2, 419, 421, 5, 22, 12, 2, 
	420, 418, 3, 2, 2, 2, 421, 424, 3, 2, 2, 2, 422, 420, 3, 2, 2, 2, 422, 
	423, 3, 2, 2, 2, 423, 426, 3, 2, 2, 2, 424, 422, 3, 2, 2, 2, 425, 417, 
	3, 2, 2, 2, 425, 426, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 448, 7, 16, 
	2, 2, 428, 429, 7, 9, 2, 2, 429, 432, 5, 16, 9, 2, 430, 431, 7, 41, 2, 
	2, 431, 433, 5, 16, 9, 2, 432, 430, 3, 2, 2, 2, 433, 434, 3, 2, 2, 2, 434, 
	432, 3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435, 436, 3, 2, 2, 2, 436, 437, 
	7, 10, 2, 2, 437, 448, 3, 2, 2, 2, 438, 439, 7, 9, 2, 2, 439, 440, 7, 67, 
	2, 2, 440, 441, 5, 18, 10, 2, 441, 442, 7, 10, 2, 2, 442, 448, 3, 2, 2, 
	2, 443, 444, 7, 9, 2, 2, 444, 445, 5, 16, 9, 2, 445, 446, 7, 10, 2, 2, 
	446, 448, 3, 2, 2, 2, 447, 300, 3, 2, 2, 2, 447, 306, 3, 2, 2, 2, 447, 
	311, 3, 2, 2, 2, 447, 316, 3, 2, 2, 2, 447, 321, 3, 2, 2, 2, 447, 326, 
	3, 2, 2, 2, 447, 338, 3, 2, 2, 2, 447, 340, 3, 2, 2, 2, 447, 347, 3, 2, 
	2, 2, 447, 349, 3, 2, 2, 2, 447, 351, 3, 2, 2, 2, 447, 353, 3, 2, 2, 2, 
	447, 367, 3, 2, 2, 2, 447, 380, 3, 2, 2, 2, 447, 388, 3, 2, 2, 2, 447, 
	389, 3, 2, 2, 2, 447, 396, 3, 2, 2, 2, 447, 397, 3, 2, 2, 2, 447, 402, 
	3, 2, 2, 2, 447, 408, 3, 2, 2, 2, 447, 412, 3, 2, 2, 2, 447, 416, 3, 2, 
	2, 2, 447, 428, 3, 2, 2, 2, 447, 438, 3, 2, 2, 2, 447, 443, 3, 2, 2, 2, 
	448, 557, 3, 2, 2, 2, 449, 450, 12, 40, 2, 2, 450, 451, 7, 57, 2, 2, 451, 
	556, 5, 16, 9, 41, 452, 453, 12, 39, 2, 2, 453, 454, 7, 58, 2, 2, 454, 
	556, 5, 16, 9, 40, 455, 456, 12, 38, 2, 2, 456, 457, 7, 59, 2, 2, 457, 
	556, 5, 16, 9, 39, 458, 459, 12, 37, 2, 2, 459, 460, 7, 60, 2, 2, 460, 
	556, 5, 16, 9, 38, 461, 462, 12, 34, 2, 2, 462, 463, 7, 68, 2, 2, 463, 
	556, 5, 16, 9, 35, 464, 465, 12, 33, 2, 2, 465, 466, 7, 69, 2, 2, 466, 
	556, 5, 16, 9, 34, 467, 468, 12, 31, 2, 2, 468, 469, 7, 63, 2, 2, 469, 
	556, 5, 16, 9, 32, 470, 471, 12, 23, 2, 2, 471, 472, 6, 9, 16, 2, 472, 
	473, 7, 142, 2, 2, 473, 556, 5, 16, 9, 24, 474, 475, 12, 22, 2, 2, 475, 
	476, 7, 142, 2, 2, 476, 556, 5, 16, 9, 22, 477, 478, 12, 21, 2, 2, 478, 
	480, 7, 146, 2, 2, 479, 481, 5, 88, 45, 2, 480, 479, 3, 2, 2, 2, 480, 481, 
	3, 2, 2, 2, 481, 489, 3, 2, 2, 2, 482, 483, 5, 16, 9, 2, 483, 484, 7, 152, 
	2, 2, 484, 490, 3, 2, 2, 2, 485, 487, 5, 90, 46, 2, 486, 485, 3, 2, 2, 
	2, 486, 487, 3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488, 490, 7, 154, 2, 2, 
	489, 482, 3, 2, 2, 2, 489, 486, 3, 2, 2, 2, 490, 491, 3, 2, 2, 2, 491, 
	556, 5, 16, 9, 22, 492, 493, 12, 19, 2, 2, 493, 556, 5, 16, 9, 20, 494, 
	495, 12, 32, 2, 2, 495, 496, 7, 45, 2, 2, 496, 497, 7, 9, 2, 2, 497, 502, 
	5, 44, 23, 2, 498, 499, 7, 41, 2, 2, 499, 501, 5, 44, 23, 2, 500, 498, 
	3, 2, 2, 2, 501, 504, 3, 2, 2, 2, 502, 500, 3, 2, 2, 2, 502, 503, 3, 2, 
	2, 2, 503, 505, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 505, 506, 7, 10, 2, 2, 
	506, 556, 3, 2, 2, 2, 507, 510, 12, 29, 2, 2, 508, 509, 7, 64, 2, 2, 509, 
	511, 5, 16, 9, 2, 510, 508, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 512, 510, 
	3, 2, 2, 2, 512, 513, 3, 2, 2, 2, 513, 556, 3, 2, 2, 2, 514, 515, 12, 25, 
	2, 2, 515, 556, 7, 140, 2, 2, 516, 517, 12, 24, 2, 2, 517, 519, 7, 146, 
	2, 2, 518, 520, 5, 88, 45, 2, 519, 518, 3, 2, 2, 2, 519, 520, 3, 2, 2, 
	2, 520, 528, 3, 2, 2, 2, 521, 522, 5, 16, 9, 2, 522, 523, 7, 148, 2, 2, 
	523, 529, 3, 2, 2, 2, 524, 526, 5, 90, 46, 2, 525, 524, 3, 2, 2, 2, 525, 
	526, 3, 2, 2, 2, 526, 527, 3, 2, 2, 2, 527, 529, 7, 150, 2, 2, 528, 521, 
	3, 2, 2, 2, 528, 525, 3, 2, 2, 2, 529, 556, 3, 2, 2, 2, 530, 531, 12, 18, 
	2, 2, 531, 556, 7, 8, 2, 2, 532, 533, 12, 17, 2, 2, 533, 534, 7, 11, 2, 
	2, 534, 535, 5, 44, 23, 2, 535, 536, 7, 46, 2, 2, 536, 544, 5, 44, 23, 
	2, 537, 538, 7, 41, 2, 2, 538, 539, 5, 44, 23, 2, 539, 540, 7, 46, 2, 2, 
	540, 541, 5, 44, 23, 2, 541, 543, 3, 2, 2, 2, 542, 537, 3, 2, 2, 2, 543, 
	546, 3, 2, 2, 2, 544, 542, 3, 2, 2, 2, 544, 545, 3, 2, 2, 2, 545, 547, 
	3, 2, 2, 2, 546, 544, 3, 2, 2, 2, 547, 548, 7, 12, 2, 2, 548, 556, 3, 2, 
	2, 2, 549, 550, 12, 16, 2, 2, 550, 551, 7, 47, 2, 2, 551, 556, 5, 46, 24, 
	2, 552, 553, 12, 15, 2, 2, 553, 554, 7, 47, 2, 2, 554, 556, 7, 7, 2, 2, 
	555, 449, 3, 2, 2, 2, 555, 452, 3, 2, 2, 2, 555, 455, 3, 2, 2, 2, 555, 
	458, 3, 2, 2, 2, 555, 461, 3, 2, 2, 2, 555, 464, 3, 2, 2, 2, 555, 467, 
	3, 2, 2, 2, 555, 470, 3, 2, 2, 2, 555, 474, 3, 2, 2, 2, 555, 477, 3, 2, 
	2, 2, 555, 492, 3, 2, 2, 2, 555, 494, 3, 2, 2, 2, 555, 507, 3, 2, 2, 2, 
	555, 514, 3, 2, 2, 2, 555, 516, 3, 2, 2, 2, 555, 530, 3, 2, 2, 2, 555, 
	532, 3, 2, 2, 2, 555, 549, 3, 2, 2, 2, 555, 552, 3, 2, 2, 2, 556, 559, 
	3, 2, 2, 2, 557, 555, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 17, 3, 2, 
	2, 2, 559, 557, 3, 2, 2, 2, 560, 562, 7, 22, 2, 2, 561, 560, 3, 2, 2, 2, 
	561, 562, 3, 2, 2, 2, 562, 564, 3, 2, 2, 2, 563, 565, 5, 20, 11, 2, 564, 
	563, 3, 2, 2, 2, 564, 565, 3, 2, 2, 2, 565, 567, 3, 2, 2, 2, 566, 568, 
	7, 22, 2, 2, 567, 566, 3, 2, 2, 2, 567, 568, 3, 2, 2, 2, 568, 577, 3, 2, 
	2, 2, 569, 571, 7, 43, 2, 2, 570, 572, 7, 22, 2, 2, 571, 570, 3, 2, 2, 
	2, 571, 572, 3, 2, 2, 2, 572, 573, 3, 2, 2, 2, 573, 575, 5, 14, 8, 2, 574, 
	576, 7, 22, 2, 2, 575, 574, 3, 2, 2, 2, 575, 576, 3, 2, 2, 2, 576, 578, 
	3, 2, 2, 2, 577, 569, 3, 2, 2, 2, 577, 578, 3, 2, 2, 2, 578, 580, 3, 2, 
	2, 2, 579, 581, 7, 22, 2, 2, 580, 579, 3, 2, 2, 2, 580, 581, 3, 2, 2, 2, 
	581, 19, 3, 2, 2, 2, 582, 587, 5, 24, 13, 2, 583, 584, 9, 2, 2, 2, 584, 
	586, 5, 24, 13, 2, 585, 583, 3, 2, 2, 2, 586, 589, 3, 2, 2, 2, 587, 585, 
	3, 2, 2, 2, 587, 588, 3, 2, 2, 2, 588, 21, 3, 2, 2, 2, 589, 587, 3, 2, 
	2, 2, 590, 591, 5, 44, 23, 2, 591, 592, 7, 40, 2, 2, 592, 594, 5, 16, 9, 
	2, 593, 595, 7, 22, 2, 2, 594, 593, 3, 2, 2, 2, 594, 595, 3, 2, 2, 2, 595, 
	23, 3, 2, 2, 2, 596, 601, 5, 44, 23, 2, 597, 598, 7, 41, 2, 2, 598, 600, 
	5, 44, 23, 2, 599, 597, 3, 2, 2, 2, 600, 603, 3, 2, 2, 2, 601, 599, 3, 
	2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 604, 3, 2, 2, 2, 603, 601, 3, 2, 2, 
	2, 604, 605, 7, 39, 2, 2, 605, 606, 5, 16, 9, 2, 606, 610, 3, 2, 2, 2, 
	607, 610, 5, 22, 12, 2, 608, 610, 5, 16, 9, 2, 609, 596, 3, 2, 2, 2, 609, 
	607, 3, 2, 2, 2, 609, 608, 3, 2, 2, 2, 610, 25, 3, 2, 2, 2, 611, 612, 7, 
	34, 2, 2, 612, 618, 5, 34, 18, 2, 613, 614, 7, 26, 2, 2, 614, 618, 5, 28, 
	15, 2, 615, 616, 7, 27, 2, 2, 616, 618, 5, 28, 15, 2, 617, 611, 3, 2, 2, 
	2, 617, 613, 3, 2, 2, 2, 617, 615, 3, 2, 2, 2, 618, 27, 3, 2, 2, 2, 619, 
	627, 5, 36, 19, 2, 620, 627, 5, 38, 20, 2, 621, 622, 5, 30, 16, 2, 622, 
	623, 5, 32, 17, 2, 623, 624, 5, 40, 21, 2, 624, 627, 3, 2, 2, 2, 625, 627, 
	5, 42, 22, 2, 626, 619, 3, 2, 2, 2, 626, 620, 3, 2, 2, 2, 626, 621, 3, 
	2, 2, 2, 626, 625, 3, 2, 2, 2, 627, 29, 3, 2, 2, 2, 628, 629, 7, 7, 2, 
	2, 629, 31, 3, 2, 2, 2, 630, 631, 9, 3, 2, 2, 631, 33, 3, 2, 2, 2, 632, 
	637, 5, 36, 19, 2, 633, 637, 5, 38, 20, 2, 634, 637, 5, 40, 21, 2, 635, 
	637, 5, 42, 22, 2, 636, 632, 3, 2, 2, 2, 636, 633, 3, 2, 2, 2, 636, 634, 
	3, 2, 2, 2, 636, 635, 3, 2, 2, 2, 637, 35, 3, 2, 2, 2, 638, 642, 7, 9, 
	2, 2, 639, 643, 5, 50, 26, 2, 640, 641, 7, 31, 2, 2, 641, 643, 7, 49, 2, 
	2, 642, 639, 3, 2, 2, 2, 642, 640, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644, 
	645, 7, 10, 2, 2, 645, 37, 3, 2, 2, 2, 646, 647, 7, 9, 2, 2, 647, 648, 
	5, 52, 27, 2, 648, 649, 7, 10, 2, 2, 649, 39, 3, 2, 2, 2, 650, 651, 7, 
	9, 2, 2, 651, 652, 5, 54, 28, 2, 652, 653, 7, 10, 2, 2, 653, 41, 3, 2, 
	2, 2, 654, 655, 7, 9, 2, 2, 655, 656, 5, 56, 29, 2, 656, 657, 7, 10, 2, 
	2, 657, 43, 3, 2, 2, 2, 658, 661, 7, 70, 2, 2, 659, 661, 5, 48, 25, 2, 
	660, 658, 3, 2, 2, 2, 660, 659, 3, 2, 2, 2, 661, 45, 3, 2, 2, 2, 662, 668, 
	7, 70, 2, 2, 663, 664, 7, 9, 2, 2, 664, 665, 5, 48, 25, 2, 665, 666, 7, 
	10, 2, 2, 666, 668, 3, 2, 2, 2, 667, 662, 3, 2, 2, 2, 667, 663, 3, 2, 2, 
	2, 668, 47, 3, 2, 2, 2, 669, 674, 5, 50, 26, 2, 670, 674, 5, 52, 27, 2, 
	671, 674, 5, 54, 28, 2, 672, 674, 5, 56, 29, 2, 673, 669, 3, 2, 2, 2, 673, 
	670, 3, 2, 2, 2, 673, 671, 3, 2, 2, 2, 673, 672, 3, 2, 2, 2, 674, 49, 3, 
	2, 2, 2, 675, 676, 7, 138, 2, 2, 676, 714, 7, 49, 2, 2, 677, 678, 7, 137, 
	2, 2, 678, 714, 7, 49, 2, 2, 679, 686, 7, 144, 2, 2, 680, 681, 7, 49, 2, 
	2, 681, 685, 7, 155, 2, 2, 682, 683, 7, 50, 2, 2, 683, 685, 7, 156, 2, 
	2, 684, 680, 3, 2, 2, 2, 684, 682, 3, 2, 2, 2, 685, 688, 3, 2, 2, 2, 686, 
	684, 3, 2, 2, 2, 686, 687, 3, 2, 2, 2, 687, 693, 3, 2, 2, 2, 688, 686, 
	3, 2, 2, 2, 689, 690, 7, 49, 2, 2, 690, 694, 7, 152, 2, 2, 691, 692, 7, 
	50, 2, 2, 692, 694, 7, 154, 2, 2, 693, 689, 3, 2, 2, 2, 693, 691, 3, 2, 
	2, 2, 694, 695, 3, 2, 2, 2, 695, 714, 7, 49, 2, 2, 696, 703, 7, 143, 2, 
	2, 697, 698, 7, 49, 2, 2, 698, 702, 7, 155, 2, 2, 699, 700, 7, 50, 2, 2, 
	700, 702, 7, 156, 2, 2, 701, 697, 3, 2, 2, 2, 701, 699, 3, 2, 2, 2, 702, 
	705, 3, 2, 2, 2, 703, 701, 3, 2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 710, 
	3, 2, 2, 2, 705, 703, 3, 2, 2, 2, 706, 707, 7, 49, 2, 2, 707, 711, 7, 151, 
	2, 2, 708, 709, 7, 50, 2, 2, 709, 711, 7, 153, 2, 2, 710, 706, 3, 2, 2, 
	2, 710, 708, 3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 714, 7, 49, 2, 2, 713, 
	675, 3, 2, 2, 2, 713, 677, 3, 2, 2, 2, 713, 679, 3, 2, 2, 2, 713, 696, 
	3, 2, 2, 2, 714, 51, 3, 2, 2, 2, 715, 716, 7, 49, 2, 2, 716, 754, 7, 140, 
	2, 2, 717, 718, 7, 49, 2, 2, 718, 754, 7, 139, 2, 2, 719, 720, 7, 49, 2, 
	2, 720, 727, 7, 146, 2, 2, 721, 722, 7, 49, 2, 2, 722, 726, 7, 155, 2, 
	2, 723, 724, 7, 50, 2, 2, 724, 726, 7, 156, 2, 2, 725, 721, 3, 2, 2, 2, 
	725, 723, 3, 2, 2, 2, 726, 729, 3, 2, 2, 2, 727, 725, 3, 2, 2, 2, 727, 
	728, 3, 2, 2, 2, 728, 734, 3, 2, 2, 2, 729, 727, 3, 2, 2, 2, 730, 731, 
	7, 49, 2, 2, 731, 735, 7, 148, 2, 2, 732, 733, 7, 50, 2, 2, 733, 735, 7, 
	150, 2, 2, 734, 730, 3, 2, 2, 2, 734, 732, 3, 2, 2, 2, 735, 754, 3, 2, 
	2, 2, 736, 737, 7, 49, 2, 2, 737, 744, 7, 145, 2, 2, 738, 739, 7, 49, 2, 
	2, 739, 743, 7, 155, 2, 2, 740, 741, 7, 50, 2, 2, 741, 743, 7, 156, 2, 
	2, 742, 738, 3, 2, 2, 2, 742, 740, 3, 2, 2, 2, 743, 746, 3, 2, 2, 2, 744, 
	742, 3, 2, 2, 2, 744, 745, 3, 2, 2, 2, 745, 751, 3, 2, 2, 2, 746, 744, 
	3, 2, 2, 2, 747, 748, 7, 49, 2, 2, 748, 752, 7, 147, 2, 2, 749, 750, 7, 
	50, 2, 2, 750, 752, 7, 149, 2, 2, 751, 747, 3, 2, 2, 2, 751, 749, 3, 2, 
	2, 2, 752, 754, 3, 2, 2, 2, 753, 715, 3, 2, 2, 2, 753, 717, 3, 2, 2, 2, 
	753, 719, 3, 2, 2, 2, 753, 736, 3, 2, 2, 2, 754, 53, 3, 2, 2, 2, 755, 756, 
	7, 49, 2, 2, 756, 757, 7, 142, 2, 2, 757, 798, 7, 49, 2, 2, 758, 759, 7, 
	49, 2, 2, 759, 760, 7, 141, 2, 2, 760, 798, 7, 49, 2, 2, 761, 762, 7, 49, 
	2, 2, 762, 769, 7, 146, 2, 2, 763, 764, 7, 49, 2, 2, 764, 768, 7, 155, 
	2, 2, 765, 766, 7, 50, 2, 2, 766, 768, 7, 156, 2, 2, 767, 763, 3, 2, 2, 
	2, 767, 765, 3, 2, 2, 2, 768, 771, 3, 2, 2, 2, 769, 767, 3, 2, 2, 2, 769, 
	770, 3, 2, 2, 2, 770, 776, 3, 2, 2, 2, 771, 769, 3, 2, 2, 2, 772, 773, 
	7, 49, 2, 2, 773, 777, 7, 152, 2, 2, 774, 775, 7, 50, 2, 2, 775, 777, 7, 
	154, 2, 2, 776, 772, 3, 2, 2, 2, 776, 774, 3, 2, 2, 2, 777, 778, 3, 2, 
	2, 2, 778, 798, 7, 49, 2, 2, 779, 780, 7, 49, 2, 2, 780, 787, 7, 145, 2, 
	2, 781, 782, 7, 49, 2, 2, 782, 786, 7, 155, 2, 2, 783, 784, 7, 50, 2, 2, 
	784, 786, 7, 156, 2, 2, 785, 781, 3, 2, 2, 2, 785, 783, 3, 2, 2, 2, 786, 
	789, 3, 2, 2, 2, 787, 785, 3, 2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 794, 
	3, 2, 2, 2, 789, 787, 3, 2, 2, 2, 790, 791, 7, 49, 2, 2, 791, 795, 7, 151, 
	2, 2, 792, 793, 7, 50, 2, 2, 793, 795, 7, 153, 2, 2, 794, 790, 3, 2, 2, 
	2, 794, 792, 3, 2, 2, 2, 795, 796, 3, 2, 2, 2, 796, 798, 7, 49, 2, 2, 797, 
	755, 3, 2, 2, 2, 797, 758, 3, 2, 2, 2, 797, 761, 3, 2, 2, 2, 797, 779, 
	3, 2, 2, 2, 798, 55, 3, 2, 2, 2, 799, 806, 7, 144, 2, 2, 800, 801, 7, 49, 
	2, 2, 801, 805, 7, 155, 2, 2, 802, 803, 7, 50, 2, 2, 803, 805, 7, 156, 
	2, 2, 804, 800, 3, 2, 2, 2, 804, 802, 3, 2, 2, 2, 805, 808, 3, 2, 2, 2, 
	806, 804, 3, 2, 2, 2, 806, 807, 3, 2, 2, 2, 807, 813, 3, 2, 2, 2, 808, 
	806, 3, 2, 2, 2, 809, 810, 7, 49, 2, 2, 810, 814, 7, 148, 2, 2, 811, 812, 
	7, 50, 2, 2, 812, 814, 7, 150, 2, 2, 813, 809, 3, 2, 2, 2, 813, 811, 3, 
	2, 2, 2, 814, 832, 3, 2, 2, 2, 815, 822, 7, 143, 2, 2, 816, 817, 7, 49, 
	2, 2, 817, 821, 7, 155, 2, 2, 818, 819, 7, 50, 2, 2, 819, 821, 7, 156, 
	2, 2, 820, 816, 3, 2, 2, 2, 820, 818, 3, 2, 2, 2, 821, 824, 3, 2, 2, 2, 
	822, 820, 3, 2, 2, 2, 822, 823, 3, 2, 2, 2, 823, 829, 3, 2, 2, 2, 824, 
	822, 3, 2, 2, 2, 825, 826, 7, 49, 2, 2, 826, 830, 7, 147, 2, 2, 827, 828, 
	7, 50, 2, 2, 828, 830, 7, 149, 2, 2, 829, 825, 3, 2, 2, 2, 829, 827, 3, 
	2, 2, 2, 830, 832, 3, 2, 2, 2, 831, 799, 3, 2, 2, 2, 831, 815, 3, 2, 2, 
	2, 832, 57, 3, 2, 2, 2, 833, 838, 5, 60, 31, 2, 834, 838, 5, 62, 32, 2, 
	835, 838, 5, 64, 33, 2, 836, 838, 5, 66, 34, 2, 837, 833, 3, 2, 2, 2, 837, 
	834, 3, 2, 2, 2, 837, 835, 3, 2, 2, 2, 837, 836, 3, 2, 2, 2, 838, 59, 3, 
	2, 2, 2, 839, 840, 7, 138, 2, 2, 840, 853, 7, 70, 2, 2, 841, 846, 7, 144, 
	2, 2, 842, 843, 7, 70, 2, 2, 843, 845, 9, 4, 2, 2, 844, 842, 3, 2, 2, 2, 
	845, 848, 3, 2, 2, 2, 846, 844, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847, 
	849, 3, 2, 2, 2, 848, 846, 3, 2, 2, 2, 849, 850, 7, 70, 2, 2, 850, 851, 
	9, 5, 2, 2, 851, 853, 7, 70, 2, 2, 852, 839, 3, 2, 2, 2, 852, 841, 3, 2, 
	2, 2, 853, 61, 3, 2, 2, 2, 854, 855, 7, 70, 2, 2, 855, 868, 7, 140, 2, 
	2, 856, 857, 7, 70, 2, 2, 857, 862, 7, 146, 2, 2, 858, 859, 7, 70, 2, 2, 
	859, 861, 9, 4, 2, 2, 860, 858, 3, 2, 2, 2, 861, 864, 3, 2, 2, 2, 862, 
	860, 3, 2, 2, 2, 862, 863, 3, 2, 2, 2, 863, 865, 3, 2, 2, 2, 864, 862, 
	3, 2, 2, 2, 865, 866, 7, 70, 2, 2, 866, 868, 9, 6, 2, 2, 867, 854, 3, 2, 
	2, 2, 867, 856, 3, 2, 2, 2, 868, 63, 3, 2, 2, 2, 869, 870, 7, 70, 2, 2, 
	870, 871, 7, 142, 2, 2, 871, 885, 7, 70, 2, 2, 872, 873, 7, 70, 2, 2, 873, 
	878, 7, 146, 2, 2, 874, 875, 7, 70, 2, 2, 875, 877, 9, 4, 2, 2, 876, 874, 
	3, 2, 2, 2, 877, 880, 3, 2, 2, 2, 878, 876, 3, 2, 2, 2, 878, 879, 3, 2, 
	2, 2, 879, 881, 3, 2, 2, 2, 880, 878, 3, 2, 2, 2, 881, 882, 7, 70, 2, 2, 
	882, 883, 9, 5, 2, 2, 883, 885, 7, 70, 2, 2, 884, 869, 3, 2, 2, 2, 884, 
	872, 3, 2, 2, 2, 885, 65, 3, 2, 2, 2, 886, 891, 7, 144, 2, 2, 887, 888, 
	7, 70, 2, 2, 888, 890, 9, 4, 2, 2, 889, 887, 3, 2, 2, 2, 890, 893, 3, 2, 
	2, 2, 891, 889, 3, 2, 2, 2, 891, 892, 3, 2, 2, 2, 892, 894, 3, 2, 2, 2, 
	893, 891, 3, 2, 2, 2, 894, 895, 7, 70, 2, 2, 895, 896, 9, 6, 2, 2, 896, 
	67, 3, 2, 2, 2, 897, 902, 5, 70, 36, 2, 898, 902, 5, 72, 37, 2, 899, 902, 
	5, 74, 38, 2, 900, 902, 5, 76, 39, 2, 901, 897, 3, 2, 2, 2, 901, 898, 3, 
	2, 2, 2, 901, 899, 3, 2, 2, 2, 901, 900, 3, 2, 2, 2, 902, 69, 3, 2, 2, 
	2, 903, 904, 7, 137, 2, 2, 904, 920, 5, 16, 9, 2, 905, 907, 7, 143, 2, 
	2, 906, 908, 5, 88, 45, 2, 907, 906, 3, 2, 2, 2, 907, 908, 3, 2, 2, 2, 
	908, 916, 3, 2, 2, 2, 909, 910, 5, 16, 9, 2, 910, 911, 7, 151, 2, 2, 911, 
	917, 3, 2, 2, 2, 912, 914, 5, 90, 46, 2, 913, 912, 3, 2, 2, 2, 913, 914, 
	3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 917, 7, 153, 2, 2, 916, 909, 3, 
	2, 2, 2, 916, 913, 3, 2, 2, 2, 917, 918, 3, 2, 2, 2, 918, 920, 5, 16, 9, 
	2, 919, 903, 3, 2, 2, 2, 919, 905, 3, 2, 2, 2, 920, 71, 3, 2, 2, 2, 921, 
	922, 5, 16, 9, 2, 922, 923, 7, 139, 2, 2, 923, 939, 3, 2, 2, 2, 924, 925, 
	5, 16, 9, 2, 925, 927, 7, 145, 2, 2, 926, 928, 5, 88, 45, 2, 927, 926, 
	3, 2, 2, 2, 927, 928, 3, 2, 2, 2, 928, 936, 3, 2, 2, 2, 929, 930, 5, 16, 
	9, 2, 930, 931, 7, 147, 2, 2, 931, 937, 3, 2, 2, 2, 932, 934, 5, 90, 46, 
	2, 933, 932, 3, 2, 2, 2, 933, 934, 3, 2, 2, 2, 934, 935, 3, 2, 2, 2, 935, 
	937, 7, 149, 2, 2, 936, 929, 3, 2, 2, 2, 936, 933, 3, 2, 2, 2, 937, 939, 
	3, 2, 2, 2, 938, 921, 3, 2, 2, 2, 938, 924, 3, 2, 2, 2, 939, 73, 3, 2, 
	2, 2, 940, 941, 5, 16, 9, 2, 941, 944, 6, 38, 28, 2, 942, 943, 9, 7, 2, 
	2, 943, 945, 5, 16, 9, 2, 944, 942, 3, 2, 2, 2, 945, 946, 3, 2, 2, 2, 946, 
	944, 3, 2, 2, 2, 946, 947, 3, 2, 2, 2, 947, 989, 3, 2, 2, 2, 948, 951, 
	5, 16, 9, 2, 949, 950, 9, 7, 2, 2, 950, 952, 5, 16, 9, 2, 951, 949, 3, 
	2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 951, 3, 2, 2, 2, 953, 954, 3, 2, 2, 
	2, 954, 989, 3, 2, 2, 2, 955, 956, 5, 16, 9, 2, 956, 957, 6, 38, 29, 2, 
	957, 959, 7, 145, 2, 2, 958, 960, 5, 88, 45, 2, 959, 958, 3, 2, 2, 2, 959, 
	960, 3, 2, 2, 2, 960, 968, 3, 2, 2, 2, 961, 962, 5, 16, 9, 2, 962, 963, 
	7, 151, 2, 2, 963, 969, 3, 2, 2, 2, 964, 966, 5, 90, 46, 2, 965, 964, 3, 
	2, 2, 2, 965, 966, 3, 2, 2, 2, 966, 967, 3, 2, 2, 2, 967, 969, 7, 153, 
	2, 2, 968, 961, 3, 2, 2, 2, 968, 965, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 
	970, 971, 5, 16, 9, 2, 971, 989, 3, 2, 2, 2, 972, 973, 5, 16, 9, 2, 973, 
	975, 7, 145, 2, 2, 974, 976, 5, 88, 45, 2, 975, 974, 3, 2, 2, 2, 975, 976, 
	3, 2, 2, 2, 976, 984, 3, 2, 2, 2, 977, 978, 5, 16, 9, 2, 978, 979, 7, 151, 
	2, 2, 979, 985, 3, 2, 2, 2, 980, 982, 5, 90, 46, 2, 981, 980, 3, 2, 2, 
	2, 981, 982, 3, 2, 2, 2, 982, 983, 3, 2, 2, 2, 983, 985, 7, 153, 2, 2, 
	984, 977, 3, 2, 2, 2, 984, 981, 3, 2, 2, 2, 985, 986, 3, 2, 2, 2, 986, 
	987, 5, 16, 9, 2, 987, 989, 3, 2, 2, 2, 988, 940, 3, 2, 2, 2, 988, 948, 
	3, 2, 2, 2, 988, 955, 3, 2, 2, 2, 988, 972, 3, 2, 2, 2, 989, 75, 3, 2, 
	2, 2, 990, 992, 7, 143, 2, 2, 991, 993, 5, 88, 45, 2, 992, 991, 3, 2, 2, 
	2, 992, 993, 3, 2, 2, 2, 993, 1001, 3, 2, 2, 2, 994, 995, 5, 16, 9, 2, 
	995, 996, 7, 147, 2, 2, 996, 1002, 3, 2, 2, 2, 997, 999, 5, 90, 46, 2, 
	998, 997, 3, 2, 2, 2, 998, 999, 3, 2, 2, 2, 999, 1000, 3, 2, 2, 2, 1000, 
	1002, 7, 149, 2, 2, 1001, 994, 3, 2, 2, 2, 1001, 998, 3, 2, 2, 2, 1002, 
	77, 3, 2, 2, 2, 1003, 1008, 5, 80, 41, 2, 1004, 1008, 5, 82, 42, 2, 1005, 
	1008, 5, 84, 43, 2, 1006, 1008, 5, 86, 44, 2, 1007, 1003, 3, 2, 2, 2, 1007, 
	1004, 3, 2, 2, 2, 1007, 1005, 3, 2, 2, 2, 1007, 1006, 3, 2, 2, 2, 1008, 
	79, 3, 2, 2, 2, 1009, 1010, 7, 138, 2, 2, 1010, 1026, 5, 16, 9, 2, 1011, 
	1013, 7, 144, 2, 2, 1012, 1014, 5, 88, 45, 2, 1013, 1012, 3, 2, 2, 2, 1013, 
	1014, 3, 2, 2, 2, 1014, 1022, 3, 2, 2, 2, 1015, 1016, 5, 16, 9, 2, 1016, 
	1017, 7, 152, 2, 2, 1017, 1023, 3, 2, 2, 2, 1018, 1020, 5, 90, 46, 2, 1019, 
	1018, 3, 2, 2, 2, 1019, 1020, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021, 
	1023, 7, 154, 2, 2, 1022, 1015, 3, 2, 2, 2, 1022, 1019, 3, 2, 2, 2, 1023, 
	1024, 3, 2, 2, 2, 1024, 1026, 5, 16, 9, 2, 1025, 1009, 3, 2, 2, 2, 1025, 
	1011, 3, 2, 2, 2, 1026, 81, 3, 2, 2, 2, 1027, 1028, 5, 16, 9, 2, 1028, 
	1029, 7, 140, 2, 2, 1029, 1045, 3, 2, 2, 2, 1030, 1031, 5, 16, 9, 2, 1031, 
	1033, 7, 146, 2, 2, 1032, 1034, 5, 88, 45, 2, 1033, 1032, 3, 2, 2, 2, 1033, 
	1034, 3, 2, 2, 2, 1034, 1042, 3, 2, 2, 2, 1035, 1036, 5, 16, 9, 2, 1036, 
	1037, 7, 148, 2, 2, 1037, 1043, 3, 2, 2, 2, 1038, 1040, 5, 90, 46, 2, 1039, 
	1038, 3, 2, 2, 2, 1039, 1040, 3, 2, 2, 2, 1040, 1041, 3, 2, 2, 2, 1041, 
	1043, 7, 150, 2, 2, 1042, 1035, 3, 2, 2, 2, 1042, 1039, 3, 2, 2, 2, 1043, 
	1045, 3, 2, 2, 2, 1044, 1027, 3, 2, 2, 2, 1044, 1030, 3, 2, 2, 2, 1045, 
	83, 3, 2, 2, 2, 1046, 1047, 5, 16, 9, 2, 1047, 1048, 7, 142, 2, 2, 1048, 
	1049, 5, 16, 9, 2, 1049, 1067, 3, 2, 2, 2, 1050, 1051, 5, 16, 9, 2, 1051, 
	1053, 7, 146, 2, 2, 1052, 1054, 5, 88, 45, 2, 1053, 1052, 3, 2, 2, 2, 1053, 
	1054, 3, 2, 2, 2, 1054, 1062, 3, 2, 2, 2, 1055, 1056, 5, 16, 9, 2, 1056, 
	1057, 7, 152, 2, 2, 1057, 1063, 3, 2, 2, 2, 1058, 1060, 5, 90, 46, 2, 1059, 
	1058, 3, 2, 2, 2, 1059, 1060, 3, 2, 2, 2, 1060, 1061, 3, 2, 2, 2, 1061, 
	1063, 7, 154, 2, 2, 1062, 1055, 3, 2, 2, 2, 1062, 1059, 3, 2, 2, 2, 1063, 
	1064, 3, 2, 2, 2, 1064, 1065, 5, 16, 9, 2, 1065, 1067, 3, 2, 2, 2, 1066, 
	1046, 3, 2, 2, 2, 1066, 1050, 3, 2, 2, 2, 1067, 85, 3, 2, 2, 2, 1068, 1070, 
	7, 144, 2, 2, 1069, 1071, 5, 88, 45, 2, 1070, 1069, 3, 2, 2, 2, 1070, 1071, 
	3, 2, 2, 2, 1071, 1079, 3, 2, 2, 2, 1072, 1073, 5, 16, 9, 2, 1073, 1074, 
	7, 148, 2, 2, 1074, 1080, 3, 2, 2, 2, 1075, 1077, 5, 90, 46, 2, 1076, 1075, 
	3, 2, 2, 2, 1076, 1077, 3, 2, 2, 2, 1077, 1078, 3, 2, 2, 2, 1078, 1080, 
	7, 150, 2, 2, 1079, 1072, 3, 2, 2, 2, 1079, 1076, 3, 2, 2, 2, 1080, 87, 
	3, 2, 2, 2, 1081, 1082, 5, 16, 9, 2, 1082, 1083, 7, 155, 2, 2, 1083, 1089, 
	3, 2, 2, 2, 1084, 1086, 5, 90, 46, 2, 1085, 1084, 3, 2, 2, 2, 1085, 1086, 
	3, 2, 2, 2, 1086, 1087, 3, 2, 2, 2, 1087, 1089, 7, 156, 2, 2, 1088, 1081, 
	3, 2, 2, 2, 1088, 1085, 3, 2, 2, 2, 1089, 1090, 3, 2, 2, 2, 1090, 1088, 
	3, 2, 2, 2, 1090, 1091, 3, 2, 2, 2, 1091, 89, 3, 2, 2, 2, 1092, 1097, 5, 
	16, 9, 2, 1093, 1094, 7, 41, 2, 2, 1094, 1096, 5, 16, 9, 2, 1095, 1093, 
	3, 2, 2, 2, 1096, 1099, 3, 2, 2, 2, 1097, 1095, 3, 2, 2, 2, 1097, 1098, 
	3, 2, 2, 2, 1098, 91, 3, 2, 2, 2, 1099, 1097, 3, 2, 2, 2, 141, 95, 97, 
	107, 113, 123, 126, 133, 144, 155, 167, 174, 200, 222, 231, 239, 246, 275, 
	295, 297, 332, 355, 361, 364, 369, 375, 378, 385, 392, 399, 422, 425, 434, 
	447, 480, 486, 489, 502, 512, 519, 525, 528, 544, 555, 557, 561, 564, 567, 
	571, 575, 577, 580, 587, 594, 601, 609, 617, 626, 636, 642, 660, 667, 673, 
	684, 686, 693, 701, 703, 710, 713, 725, 727, 734, 742, 744, 751, 753, 767, 
	769, 776, 785, 787, 794, 797, 804, 806, 813, 820, 822, 829, 831, 837, 846, 
	852, 862, 867, 878, 884, 891, 901, 907, 913, 916, 919, 927, 933, 936, 938, 
	946, 953, 959, 965, 968, 975, 981, 984, 988, 992, 998, 1001, 1007, 1013, 
	1019, 1022, 1025, 1033, 1039, 1042, 1044, 1053, 1059, 1062, 1066, 1070, 
	1076, 1079, 1085, 1088, 1090, 1097,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'\u2500'", "'\u250C'", "'\u2577'", "", "", "", "'\u0028'", "'\u0029'", 
	"'\u005B'", "'\u005D'", "'\u007B'", "'\u007D'", "'\u2989'", "'\u298A'", 
	"'\u27EA'", "'\u27EB'", "'\u2550'", "'\u2514'", "", "", "", "'else'", "'false'", 
	"'function'", "'generic'", "'if'", "'leftassoc'", "'let'", "'\u2119'", 
	"'parents'", "'pre'", "'relation'", "'rightassoc'", "'section'", "'then'", 
	"'true'", "':'", "'=='", "','", "'::='", "'|'", "'\u0026'", "'\u005C'", 
	"'/'", "'.'", "';'", "'_'", "',,'", "'='", "", "'\u2200'", "'\u2981'", 
	"'\u2203'", "", "'\u21D4'", "'\u21D2'", "'\u2228'", "'\u2227'", "'\u00AC'", 
	"'\u2208'", "'\u2A21'", "'\u00D7'", "'\u03B8'", "'\u03BB'", "'\u03BC'", 
	"'\u2A1F'", "'\u2A20'", "", "", "'\u0394'", "'\u039E'", "'\uD835\uDD38'", 
	"'\u2115'", "'\u2032'", "'\u0021'", "'\u003F'", "'\u2197'", "'\u2199'", 
	"'\u2198'", "'\u2196'", "'\u22A2'", "'\u29F9'", "'\u002B'", "", "'\u2194'", 
	"'\u2192'", "'\u2260'", "'\u2209'", "'\u2205'", "'\u2286'", "'\u2282'", 
	"'\u222A'", "'\u2229'", "'\u2216'", "'\u2296'", "'\u22C3'", "'\u22C2'", 
	"'\uD835\uDD3D'", "'\u21A6'", "'\u2A3E'", "'\u2218'", "'\u25C1'", "'\u25B7'", 
	"'\u2A64'", "'\u2A65'", "'\u223C'", "'\u2987'", "'\u2988'", "'\u2295'", 
	"'\u21F8'", "'\u2914'", "'\u21A3'", "'\u2900'", "'\u21A0'", "'\u2916'", 
	"'\u21FB'", "'\u2915'", "'\u2124'", "'\u002D'", "'\u2212'", "'\u2264'", 
	"'\u003C'", "'\u2265'", "'\u003E'", "'\u002A'", "'\u0023'", "'\u2040'", 
	"'\u21BF'", "'\u21BE'", "'\u27E8'", "'\u27E9'", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"'\u2028'",
}
var symbolicNames = []string{
	"", "ZED", "SCH", "AX", "TEXT", "NUMERAL", "STROKE", "LEFT_PARENTHESIS", 
	"RIGHT_PARENTHESIS", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", "LEFT_CURLY_BRACKET", 
	"RIGHT_CURLY_BRACKET", "LEFT_BINDING_BRACKET", "RIGHT_BINDING_BRACKET", 
	"LEFT_DOUBLE_ANGLE_BRACKET", "RIGHT_DOUBLE_ANGLE_BRACKET", "GEN", "END", 
	"WS", "NL", "IGNORE_NL", "ELSE", "FALSE", "FUNCTION", "GENERIC", "IF", 
	"LEFTASSOC", "LET", "POWERSET", "PARENTS", "PRE_KEY", "RELATION", "RIGHTASSOC", 
	"SECTION", "THEN", "TRUE", "COLON", "DEFINE_EQUAL", "COMMA", "FREE_EQUALS", 
	"VERTICAL_LINE", "AMPERSAND", "REVERSE_SOLIDUS", "SOLIDUS", "FULL_STOP", 
	"SEMICOLON", "ARGUMENT", "LIST", "EQUALS_SIGN", "CONJECTURE", "FOR_ALL", 
	"SPOT", "THERE_EXISTS", "UNIQUE_EXISTS", "LEFT_RIGHT_DOUBLE_ARROW", "RIGHTWARDS_DOUBLE_ARROW", 
	"LOGICAL_OR", "LOGICAL_AND", "NOT_SIGN", "ELEMENT_OF", "SCHEMA_PROJECTION", 
	"MULTIPLICATION_SIGN", "GREEK_SMALL_LETTER_THETA", "GREEK_SMALL_LETTER_LAMBDA", 
	"GREEK_SMALL_LETTER_MU", "SCHEMA_COMPOSITION", "SCHEMA_PIPING", "NAME", 
	"WORDPART", "GREEK_CAPITAL_LETTER_DELTA", "GREEK_CAPITAL_LETTER_XI", "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A", 
	"DOUBLE_STRUCK_CAPITAL_N", "MODIFIER_LETTER_PRIME", "EXCLAMATION_MARK", 
	"QUESTION_MARK", "NORTH_EAST_ARROW", "SOUTH_WEST_ARROW", "SOUTH_EAST_ARROW", 
	"NORTH_WEST_ARROW", "RIGHT_TACK", "BIG_REVERSE_SOLIDUS", "PLUS_SIGN", "MATHEMATICAL_TOOLKIT_SYMBOLS", 
	"LEFT_RIGHT_ARROW", "RIGHTWARDS_ARROW", "NOT_EQUAL_TO", "NOT_AN_ELEMENT_OF", 
	"EMPTY_SET", "SUBSET_OF_OR_EQUAL_TO", "SUBSET_OF", "UNION", "INTERSECTION", 
	"SET_MINUS", "CIRCLED_MINUS", "N_ARY_UNION", "N_ARY_INTERSECTION", "MATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F", 
	"RIGHTWARDS_ARROW_FROM_BAR", "RELATIONAL_COMPOSITION", "RING_OPERATOR", 
	"WHITE_LEFT_POINTING_TRIANGLE", "WHITE_RIGHT_POINTING_TRIANGLE", "DOMAIN_ANTIRESTRICTION", 
	"RANGE_ANTIRESTRICTION", "TILDE_OPERATOR", "LEFT_IMAGE_BRACKET", "RIGHT_IMAGE_BRACKET", 
	"CIRCLED_PLUS", "RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE", "RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE", 
	"RIGHTWARDS_ARROW_WITH_TAIL", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE", 
	"RIGHTWARDS_TWO_HEADED_ARROW", "RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL", 
	"RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE", "RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE", 
	"DOUBLE_STRUCK_CAPITAL_Z", "HYPHEN_MINUS", "MINUS_SIGN", "LESS_THAN_OR_EQUAL_TO", 
	"LESS_THAN_SIGN", "GREATER_THAN_OR_EQUAL_TO", "GREATER_THAN_SIGN", "ASTERISK", 
	"NUMBER_SIGN", "CHARACTER_TIE", "UPWARDS_HARPOON_WITH_BARB_LEFTWARDS", 
	"UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS", "LEFT_ANGLE_BRACKET", "RIGHT_ANGLE_BRACKET", 
	"ID0", "ID1", "ID", "PREP", "PRE", "POSTP", "POST", "IP", "I", "LP", "L", 
	"ELP", "EL", "ERP", "ER", "SRP", "SR", "EREP", "ERE", "SREP", "SRE", "ES", 
	"SS", "UNKNOWN", "NLCHAR",
}

var ruleNames = []string{
	"specification", "section", "paragraph", "freetype", "branch", "formals", 
	"predicate", "expression", "schemaText", "declPart", "declNameExpression", 
	"declaration", "operatorTemplate", "categoryTemplate", "prec", "assoc", 
	"template", "prefixTemplate", "postfixTemplate", "infixTemplate", "nofixTemplate", 
	"declName", "refName", "opName", "prefixName", "postfixName", "infixName", 
	"nofixName", "genName", "prefixGenName", "postfixGenName", "infixGenName", 
	"nofixGenName", "relation", "prefixRel", "postfixRel", "infixRel", "nofixRel", 
	"application", "prefixApp", "postfixApp", "infixApp", "nofixApp", "expSep", 
	"expressionList",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type ZParser struct {
	*antlr.BaseParser
}

func NewZParser(input antlr.TokenStream) *ZParser {
	this := new(ZParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "ZParser.g4"

	return this
}

// ZParser tokens.
const (
	ZParserEOF = antlr.TokenEOF
	ZParserZED = 1
	ZParserSCH = 2
	ZParserAX = 3
	ZParserTEXT = 4
	ZParserNUMERAL = 5
	ZParserSTROKE = 6
	ZParserLEFT_PARENTHESIS = 7
	ZParserRIGHT_PARENTHESIS = 8
	ZParserLEFT_SQUARE_BRACKET = 9
	ZParserRIGHT_SQUARE_BRACKET = 10
	ZParserLEFT_CURLY_BRACKET = 11
	ZParserRIGHT_CURLY_BRACKET = 12
	ZParserLEFT_BINDING_BRACKET = 13
	ZParserRIGHT_BINDING_BRACKET = 14
	ZParserLEFT_DOUBLE_ANGLE_BRACKET = 15
	ZParserRIGHT_DOUBLE_ANGLE_BRACKET = 16
	ZParserGEN = 17
	ZParserEND = 18
	ZParserWS = 19
	ZParserNL = 20
	ZParserIGNORE_NL = 21
	ZParserELSE = 22
	ZParserFALSE = 23
	ZParserFUNCTION = 24
	ZParserGENERIC = 25
	ZParserIF = 26
	ZParserLEFTASSOC = 27
	ZParserLET = 28
	ZParserPOWERSET = 29
	ZParserPARENTS = 30
	ZParserPRE_KEY = 31
	ZParserRELATION = 32
	ZParserRIGHTASSOC = 33
	ZParserSECTION = 34
	ZParserTHEN = 35
	ZParserTRUE = 36
	ZParserCOLON = 37
	ZParserDEFINE_EQUAL = 38
	ZParserCOMMA = 39
	ZParserFREE_EQUALS = 40
	ZParserVERTICAL_LINE = 41
	ZParserAMPERSAND = 42
	ZParserREVERSE_SOLIDUS = 43
	ZParserSOLIDUS = 44
	ZParserFULL_STOP = 45
	ZParserSEMICOLON = 46
	ZParserARGUMENT = 47
	ZParserLIST = 48
	ZParserEQUALS_SIGN = 49
	ZParserCONJECTURE = 50
	ZParserFOR_ALL = 51
	ZParserSPOT = 52
	ZParserTHERE_EXISTS = 53
	ZParserUNIQUE_EXISTS = 54
	ZParserLEFT_RIGHT_DOUBLE_ARROW = 55
	ZParserRIGHTWARDS_DOUBLE_ARROW = 56
	ZParserLOGICAL_OR = 57
	ZParserLOGICAL_AND = 58
	ZParserNOT_SIGN = 59
	ZParserELEMENT_OF = 60
	ZParserSCHEMA_PROJECTION = 61
	ZParserMULTIPLICATION_SIGN = 62
	ZParserGREEK_SMALL_LETTER_THETA = 63
	ZParserGREEK_SMALL_LETTER_LAMBDA = 64
	ZParserGREEK_SMALL_LETTER_MU = 65
	ZParserSCHEMA_COMPOSITION = 66
	ZParserSCHEMA_PIPING = 67
	ZParserNAME = 68
	ZParserWORDPART = 69
	ZParserGREEK_CAPITAL_LETTER_DELTA = 70
	ZParserGREEK_CAPITAL_LETTER_XI = 71
	ZParserMATHEMATICAL_DOUBLE_STRUCK_CAPITAL_A = 72
	ZParserDOUBLE_STRUCK_CAPITAL_N = 73
	ZParserMODIFIER_LETTER_PRIME = 74
	ZParserEXCLAMATION_MARK = 75
	ZParserQUESTION_MARK = 76
	ZParserNORTH_EAST_ARROW = 77
	ZParserSOUTH_WEST_ARROW = 78
	ZParserSOUTH_EAST_ARROW = 79
	ZParserNORTH_WEST_ARROW = 80
	ZParserRIGHT_TACK = 81
	ZParserBIG_REVERSE_SOLIDUS = 82
	ZParserPLUS_SIGN = 83
	ZParserMATHEMATICAL_TOOLKIT_SYMBOLS = 84
	ZParserLEFT_RIGHT_ARROW = 85
	ZParserRIGHTWARDS_ARROW = 86
	ZParserNOT_EQUAL_TO = 87
	ZParserNOT_AN_ELEMENT_OF = 88
	ZParserEMPTY_SET = 89
	ZParserSUBSET_OF_OR_EQUAL_TO = 90
	ZParserSUBSET_OF = 91
	ZParserUNION = 92
	ZParserINTERSECTION = 93
	ZParserSET_MINUS = 94
	ZParserCIRCLED_MINUS = 95
	ZParserN_ARY_UNION = 96
	ZParserN_ARY_INTERSECTION = 97
	ZParserMATHEMATICAL_DOUBLE_STRUCK_CAPITAL_F = 98
	ZParserRIGHTWARDS_ARROW_FROM_BAR = 99
	ZParserRELATIONAL_COMPOSITION = 100
	ZParserRING_OPERATOR = 101
	ZParserWHITE_LEFT_POINTING_TRIANGLE = 102
	ZParserWHITE_RIGHT_POINTING_TRIANGLE = 103
	ZParserDOMAIN_ANTIRESTRICTION = 104
	ZParserRANGE_ANTIRESTRICTION = 105
	ZParserTILDE_OPERATOR = 106
	ZParserLEFT_IMAGE_BRACKET = 107
	ZParserRIGHT_IMAGE_BRACKET = 108
	ZParserCIRCLED_PLUS = 109
	ZParserRIGHTWARDS_ARROW_WITH_VERTICAL_STROKE = 110
	ZParserRIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE = 111
	ZParserRIGHTWARDS_ARROW_WITH_TAIL = 112
	ZParserRIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE = 113
	ZParserRIGHTWARDS_TWO_HEADED_ARROW = 114
	ZParserRIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL = 115
	ZParserRIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE = 116
	ZParserRIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE = 117
	ZParserDOUBLE_STRUCK_CAPITAL_Z = 118
	ZParserHYPHEN_MINUS = 119
	ZParserMINUS_SIGN = 120
	ZParserLESS_THAN_OR_EQUAL_TO = 121
	ZParserLESS_THAN_SIGN = 122
	ZParserGREATER_THAN_OR_EQUAL_TO = 123
	ZParserGREATER_THAN_SIGN = 124
	ZParserASTERISK = 125
	ZParserNUMBER_SIGN = 126
	ZParserCHARACTER_TIE = 127
	ZParserUPWARDS_HARPOON_WITH_BARB_LEFTWARDS = 128
	ZParserUPWARDS_HARPOON_WITH_BARB_RIGHTWARDS = 129
	ZParserLEFT_ANGLE_BRACKET = 130
	ZParserRIGHT_ANGLE_BRACKET = 131
	ZParserID0 = 132
	ZParserID1 = 133
	ZParserID = 134
	ZParserPREP = 135
	ZParserPRE = 136
	ZParserPOSTP = 137
	ZParserPOST = 138
	ZParserIP = 139
	ZParserI = 140
	ZParserLP = 141
	ZParserL = 142
	ZParserELP = 143
	ZParserEL = 144
	ZParserERP = 145
	ZParserER = 146
	ZParserSRP = 147
	ZParserSR = 148
	ZParserEREP = 149
	ZParserERE = 150
	ZParserSREP = 151
	ZParserSRE = 152
	ZParserES = 153
	ZParserSS = 154
	ZParserUNKNOWN = 155
	ZParserNLCHAR = 156
)

// ZParser rules.
const (
	ZParserRULE_specification = 0
	ZParserRULE_section = 1
	ZParserRULE_paragraph = 2
	ZParserRULE_freetype = 3
	ZParserRULE_branch = 4
	ZParserRULE_formals = 5
	ZParserRULE_predicate = 6
	ZParserRULE_expression = 7
	ZParserRULE_schemaText = 8
	ZParserRULE_declPart = 9
	ZParserRULE_declNameExpression = 10
	ZParserRULE_declaration = 11
	ZParserRULE_operatorTemplate = 12
	ZParserRULE_categoryTemplate = 13
	ZParserRULE_prec = 14
	ZParserRULE_assoc = 15
	ZParserRULE_template = 16
	ZParserRULE_prefixTemplate = 17
	ZParserRULE_postfixTemplate = 18
	ZParserRULE_infixTemplate = 19
	ZParserRULE_nofixTemplate = 20
	ZParserRULE_declName = 21
	ZParserRULE_refName = 22
	ZParserRULE_opName = 23
	ZParserRULE_prefixName = 24
	ZParserRULE_postfixName = 25
	ZParserRULE_infixName = 26
	ZParserRULE_nofixName = 27
	ZParserRULE_genName = 28
	ZParserRULE_prefixGenName = 29
	ZParserRULE_postfixGenName = 30
	ZParserRULE_infixGenName = 31
	ZParserRULE_nofixGenName = 32
	ZParserRULE_relation = 33
	ZParserRULE_prefixRel = 34
	ZParserRULE_postfixRel = 35
	ZParserRULE_infixRel = 36
	ZParserRULE_nofixRel = 37
	ZParserRULE_application = 38
	ZParserRULE_prefixApp = 39
	ZParserRULE_postfixApp = 40
	ZParserRULE_infixApp = 41
	ZParserRULE_nofixApp = 42
	ZParserRULE_expSep = 43
	ZParserRULE_expressionList = 44
)

// ISpecificationContext is an interface to support dynamic dispatch.
type ISpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecificationContext differentiates from other interfaces.
	IsSpecificationContext()
}

type SpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecificationContext() *SpecificationContext {
	var p = new(SpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_specification
	return p
}

func (*SpecificationContext) IsSpecificationContext() {}

func NewSpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecificationContext {
	var p = new(SpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_specification

	return p
}

func (s *SpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecificationContext) EOF() antlr.TerminalNode {
	return s.GetToken(ZParserEOF, 0)
}

func (s *SpecificationContext) AllTEXT() []antlr.TerminalNode {
	return s.GetTokens(ZParserTEXT)
}

func (s *SpecificationContext) TEXT(i int) antlr.TerminalNode {
	return s.GetToken(ZParserTEXT, i)
}

func (s *SpecificationContext) AllSection() []ISectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISectionContext)(nil)).Elem())
	var tst = make([]ISectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISectionContext)
		}
	}

	return tst
}

func (s *SpecificationContext) Section(i int) ISectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISectionContext)
}

func (s *SpecificationContext) AllParagraph() []IParagraphContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParagraphContext)(nil)).Elem())
	var tst = make([]IParagraphContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParagraphContext)
		}
	}

	return tst
}

func (s *SpecificationContext) Paragraph(i int) IParagraphContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParagraphContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParagraphContext)
}

func (s *SpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSpecification(s)
	}
}

func (s *SpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSpecification(s)
	}
}




func (p *ZParser) Specification() (localctx ISpecificationContext) {
	localctx = NewSpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, ZParserRULE_specification)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(95)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserZED) | (1 << ZParserSCH) | (1 << ZParserAX) | (1 << ZParserTEXT))) != 0) {
		p.SetState(93)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(90)
				p.Match(ZParserTEXT)
			}


		case 2:
			{
				p.SetState(91)
				p.Section()
			}


		case 3:
			{
				p.SetState(92)
				p.Paragraph()
			}

		}

		p.SetState(97)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(98)
		p.Match(ZParserEOF)
	}



	return localctx
}


// ISectionContext is an interface to support dynamic dispatch.
type ISectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSectionContext differentiates from other interfaces.
	IsSectionContext()
}

type SectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySectionContext() *SectionContext {
	var p = new(SectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_section
	return p
}

func (*SectionContext) IsSectionContext() {}

func NewSectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SectionContext {
	var p = new(SectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_section

	return p
}

func (s *SectionContext) GetParser() antlr.Parser { return s.parser }

func (s *SectionContext) CopyFrom(ctx *SectionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




type BaseSectionContext struct {
	*SectionContext
}

func NewBaseSectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BaseSectionContext {
	var p = new(BaseSectionContext)

	p.SectionContext = NewEmptySectionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SectionContext))

	return p
}

func (s *BaseSectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseSectionContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *BaseSectionContext) SECTION() antlr.TerminalNode {
	return s.GetToken(ZParserSECTION, 0)
}

func (s *BaseSectionContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *BaseSectionContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *BaseSectionContext) AllParagraph() []IParagraphContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParagraphContext)(nil)).Elem())
	var tst = make([]IParagraphContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParagraphContext)
		}
	}

	return tst
}

func (s *BaseSectionContext) Paragraph(i int) IParagraphContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParagraphContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParagraphContext)
}


func (s *BaseSectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterBaseSection(s)
	}
}

func (s *BaseSectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitBaseSection(s)
	}
}


type InheritingSectionContext struct {
	*SectionContext
}

func NewInheritingSectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InheritingSectionContext {
	var p = new(InheritingSectionContext)

	p.SectionContext = NewEmptySectionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SectionContext))

	return p
}

func (s *InheritingSectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritingSectionContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *InheritingSectionContext) SECTION() antlr.TerminalNode {
	return s.GetToken(ZParserSECTION, 0)
}

func (s *InheritingSectionContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *InheritingSectionContext) PARENTS() antlr.TerminalNode {
	return s.GetToken(ZParserPARENTS, 0)
}

func (s *InheritingSectionContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *InheritingSectionContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *InheritingSectionContext) AllParagraph() []IParagraphContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParagraphContext)(nil)).Elem())
	var tst = make([]IParagraphContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParagraphContext)
		}
	}

	return tst
}

func (s *InheritingSectionContext) Paragraph(i int) IParagraphContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParagraphContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParagraphContext)
}


func (s *InheritingSectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInheritingSection(s)
	}
}

func (s *InheritingSectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInheritingSection(s)
	}
}



func (p *ZParser) Section() (localctx ISectionContext) {
	localctx = NewSectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, ZParserRULE_section)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(124)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		localctx = NewInheritingSectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(100)
			p.Match(ZParserZED)
		}
		{
			p.SetState(101)
			p.Match(ZParserSECTION)
		}
		{
			p.SetState(102)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(103)
			p.Match(ZParserPARENTS)
		}
		p.SetState(105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ZParserNAME {
			{
				p.SetState(104)
				p.Formals()
			}

		}
		{
			p.SetState(107)
			p.Match(ZParserEND)
		}
		p.SetState(111)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(108)
					p.Paragraph()
				}


			}
			p.SetState(113)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
		}


	case 2:
		localctx = NewBaseSectionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(114)
			p.Match(ZParserZED)
		}
		{
			p.SetState(115)
			p.Match(ZParserSECTION)
		}
		{
			p.SetState(116)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(117)
			p.Match(ZParserEND)
		}
		p.SetState(121)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(118)
					p.Paragraph()
				}


			}
			p.SetState(123)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
		}

	}


	return localctx
}


// IParagraphContext is an interface to support dynamic dispatch.
type IParagraphContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParagraphContext differentiates from other interfaces.
	IsParagraphContext()
}

type ParagraphContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParagraphContext() *ParagraphContext {
	var p = new(ParagraphContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_paragraph
	return p
}

func (*ParagraphContext) IsParagraphContext() {}

func NewParagraphContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParagraphContext {
	var p = new(ParagraphContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_paragraph

	return p
}

func (s *ParagraphContext) GetParser() antlr.Parser { return s.parser }

func (s *ParagraphContext) CopyFrom(ctx *ParagraphContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParagraphContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




type ConjectureParagraphContext struct {
	*ParagraphContext
}

func NewConjectureParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConjectureParagraphContext {
	var p = new(ConjectureParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *ConjectureParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConjectureParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *ConjectureParagraphContext) CONJECTURE() antlr.TerminalNode {
	return s.GetToken(ZParserCONJECTURE, 0)
}

func (s *ConjectureParagraphContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *ConjectureParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *ConjectureParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterConjectureParagraph(s)
	}
}

func (s *ConjectureParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitConjectureParagraph(s)
	}
}


type GenericHorizontalDefinitionParagraphContext struct {
	*ParagraphContext
}

func NewGenericHorizontalDefinitionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericHorizontalDefinitionParagraphContext {
	var p = new(GenericHorizontalDefinitionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GenericHorizontalDefinitionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericHorizontalDefinitionParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *GenericHorizontalDefinitionParagraphContext) DeclName() IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *GenericHorizontalDefinitionParagraphContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GenericHorizontalDefinitionParagraphContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *GenericHorizontalDefinitionParagraphContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GenericHorizontalDefinitionParagraphContext) DEFINE_EQUAL() antlr.TerminalNode {
	return s.GetToken(ZParserDEFINE_EQUAL, 0)
}

func (s *GenericHorizontalDefinitionParagraphContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GenericHorizontalDefinitionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *GenericHorizontalDefinitionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericHorizontalDefinitionParagraph(s)
	}
}

func (s *GenericHorizontalDefinitionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericHorizontalDefinitionParagraph(s)
	}
}


type HorizontalDefinitionParagraphContext struct {
	*ParagraphContext
}

func NewHorizontalDefinitionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *HorizontalDefinitionParagraphContext {
	var p = new(HorizontalDefinitionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *HorizontalDefinitionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HorizontalDefinitionParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *HorizontalDefinitionParagraphContext) DeclNameExpression() IDeclNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclNameExpressionContext)
}

func (s *HorizontalDefinitionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *HorizontalDefinitionParagraphContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *HorizontalDefinitionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterHorizontalDefinitionParagraph(s)
	}
}

func (s *HorizontalDefinitionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitHorizontalDefinitionParagraph(s)
	}
}


type GenericSchemaDefinitionParagraphContext struct {
	*ParagraphContext
}

func NewGenericSchemaDefinitionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericSchemaDefinitionParagraphContext {
	var p = new(GenericSchemaDefinitionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GenericSchemaDefinitionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericSchemaDefinitionParagraphContext) SCH() antlr.TerminalNode {
	return s.GetToken(ZParserSCH, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) GEN() antlr.TerminalNode {
	return s.GetToken(ZParserGEN, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *GenericSchemaDefinitionParagraphContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *GenericSchemaDefinitionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *GenericSchemaDefinitionParagraphContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *GenericSchemaDefinitionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericSchemaDefinitionParagraph(s)
	}
}

func (s *GenericSchemaDefinitionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericSchemaDefinitionParagraph(s)
	}
}


type GenericOperatorDefinitionParagraphContext struct {
	*ParagraphContext
}

func NewGenericOperatorDefinitionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericOperatorDefinitionParagraphContext {
	var p = new(GenericOperatorDefinitionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GenericOperatorDefinitionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericOperatorDefinitionParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *GenericOperatorDefinitionParagraphContext) GenName() IGenNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenNameContext)
}

func (s *GenericOperatorDefinitionParagraphContext) DEFINE_EQUAL() antlr.TerminalNode {
	return s.GetToken(ZParserDEFINE_EQUAL, 0)
}

func (s *GenericOperatorDefinitionParagraphContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GenericOperatorDefinitionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *GenericOperatorDefinitionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericOperatorDefinitionParagraph(s)
	}
}

func (s *GenericOperatorDefinitionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericOperatorDefinitionParagraph(s)
	}
}


type GenericAxiomaticDescriptionParagraphContext struct {
	*ParagraphContext
}

func NewGenericAxiomaticDescriptionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericAxiomaticDescriptionParagraphContext {
	var p = new(GenericAxiomaticDescriptionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GenericAxiomaticDescriptionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericAxiomaticDescriptionParagraphContext) AX() antlr.TerminalNode {
	return s.GetToken(ZParserAX, 0)
}

func (s *GenericAxiomaticDescriptionParagraphContext) GEN() antlr.TerminalNode {
	return s.GetToken(ZParserGEN, 0)
}

func (s *GenericAxiomaticDescriptionParagraphContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GenericAxiomaticDescriptionParagraphContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *GenericAxiomaticDescriptionParagraphContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GenericAxiomaticDescriptionParagraphContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *GenericAxiomaticDescriptionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *GenericAxiomaticDescriptionParagraphContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *GenericAxiomaticDescriptionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericAxiomaticDescriptionParagraph(s)
	}
}

func (s *GenericAxiomaticDescriptionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericAxiomaticDescriptionParagraph(s)
	}
}


type OperatorTemplateParagraphContext struct {
	*ParagraphContext
}

func NewOperatorTemplateParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OperatorTemplateParagraphContext {
	var p = new(OperatorTemplateParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *OperatorTemplateParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorTemplateParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *OperatorTemplateParagraphContext) OperatorTemplate() IOperatorTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorTemplateContext)
}

func (s *OperatorTemplateParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *OperatorTemplateParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterOperatorTemplateParagraph(s)
	}
}

func (s *OperatorTemplateParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitOperatorTemplateParagraph(s)
	}
}


type GenericConjectureParagraphContext struct {
	*ParagraphContext
}

func NewGenericConjectureParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericConjectureParagraphContext {
	var p = new(GenericConjectureParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GenericConjectureParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericConjectureParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *GenericConjectureParagraphContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GenericConjectureParagraphContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *GenericConjectureParagraphContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GenericConjectureParagraphContext) CONJECTURE() antlr.TerminalNode {
	return s.GetToken(ZParserCONJECTURE, 0)
}

func (s *GenericConjectureParagraphContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *GenericConjectureParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *GenericConjectureParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericConjectureParagraph(s)
	}
}

func (s *GenericConjectureParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericConjectureParagraph(s)
	}
}


type GivenTypesParagraphContext struct {
	*ParagraphContext
}

func NewGivenTypesParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GivenTypesParagraphContext {
	var p = new(GivenTypesParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *GivenTypesParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GivenTypesParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *GivenTypesParagraphContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GivenTypesParagraphContext) Formals() IFormalsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFormalsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFormalsContext)
}

func (s *GivenTypesParagraphContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GivenTypesParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *GivenTypesParagraphContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *GivenTypesParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGivenTypesParagraph(s)
	}
}

func (s *GivenTypesParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGivenTypesParagraph(s)
	}
}


type SchemaDefinitionParagraphContext struct {
	*ParagraphContext
}

func NewSchemaDefinitionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaDefinitionParagraphContext {
	var p = new(SchemaDefinitionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *SchemaDefinitionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDefinitionParagraphContext) SCH() antlr.TerminalNode {
	return s.GetToken(ZParserSCH, 0)
}

func (s *SchemaDefinitionParagraphContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *SchemaDefinitionParagraphContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SchemaDefinitionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *SchemaDefinitionParagraphContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *SchemaDefinitionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaDefinitionParagraph(s)
	}
}

func (s *SchemaDefinitionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaDefinitionParagraph(s)
	}
}


type FreeTypesParagraphContext struct {
	*ParagraphContext
}

func NewFreeTypesParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FreeTypesParagraphContext {
	var p = new(FreeTypesParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *FreeTypesParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FreeTypesParagraphContext) ZED() antlr.TerminalNode {
	return s.GetToken(ZParserZED, 0)
}

func (s *FreeTypesParagraphContext) AllFreetype() []IFreetypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFreetypeContext)(nil)).Elem())
	var tst = make([]IFreetypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFreetypeContext)
		}
	}

	return tst
}

func (s *FreeTypesParagraphContext) Freetype(i int) IFreetypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFreetypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFreetypeContext)
}

func (s *FreeTypesParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}

func (s *FreeTypesParagraphContext) AllAMPERSAND() []antlr.TerminalNode {
	return s.GetTokens(ZParserAMPERSAND)
}

func (s *FreeTypesParagraphContext) AMPERSAND(i int) antlr.TerminalNode {
	return s.GetToken(ZParserAMPERSAND, i)
}


func (s *FreeTypesParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterFreeTypesParagraph(s)
	}
}

func (s *FreeTypesParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitFreeTypesParagraph(s)
	}
}


type AxiomaticDescriptionParagraphContext struct {
	*ParagraphContext
}

func NewAxiomaticDescriptionParagraphContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AxiomaticDescriptionParagraphContext {
	var p = new(AxiomaticDescriptionParagraphContext)

	p.ParagraphContext = NewEmptyParagraphContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ParagraphContext))

	return p
}

func (s *AxiomaticDescriptionParagraphContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AxiomaticDescriptionParagraphContext) AX() antlr.TerminalNode {
	return s.GetToken(ZParserAX, 0)
}

func (s *AxiomaticDescriptionParagraphContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *AxiomaticDescriptionParagraphContext) END() antlr.TerminalNode {
	return s.GetToken(ZParserEND, 0)
}


func (s *AxiomaticDescriptionParagraphContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterAxiomaticDescriptionParagraph(s)
	}
}

func (s *AxiomaticDescriptionParagraphContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitAxiomaticDescriptionParagraph(s)
	}
}



func (p *ZParser) Paragraph() (localctx IParagraphContext) {
	localctx = NewParagraphContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, ZParserRULE_paragraph)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(220)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		localctx = NewGivenTypesParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(126)
			p.Match(ZParserZED)
		}
		{
			p.SetState(127)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(128)
			p.Formals()
		}
		{
			p.SetState(129)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}
		p.SetState(131)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ZParserNL {
			{
				p.SetState(130)
				p.Match(ZParserNL)
			}

		}
		{
			p.SetState(133)
			p.Match(ZParserEND)
		}


	case 2:
		localctx = NewAxiomaticDescriptionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(135)
			p.Match(ZParserAX)
		}
		{
			p.SetState(136)
			p.SchemaText()
		}
		{
			p.SetState(137)
			p.Match(ZParserEND)
		}


	case 3:
		localctx = NewSchemaDefinitionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(139)
			p.Match(ZParserSCH)
		}
		{
			p.SetState(140)
			p.Match(ZParserNAME)
		}
		p.SetState(142)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(141)
				p.Match(ZParserNL)
			}


		}
		{
			p.SetState(144)
			p.SchemaText()
		}
		{
			p.SetState(145)
			p.Match(ZParserEND)
		}


	case 4:
		localctx = NewGenericAxiomaticDescriptionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(147)
			p.Match(ZParserAX)
		}
		{
			p.SetState(148)
			p.Match(ZParserGEN)
		}
		{
			p.SetState(149)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(150)
			p.Formals()
		}
		{
			p.SetState(151)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}
		p.SetState(153)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(152)
				p.Match(ZParserNL)
			}


		}
		{
			p.SetState(155)
			p.SchemaText()
		}
		{
			p.SetState(156)
			p.Match(ZParserEND)
		}


	case 5:
		localctx = NewGenericSchemaDefinitionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(158)
			p.Match(ZParserSCH)
		}
		{
			p.SetState(159)
			p.Match(ZParserGEN)
		}
		{
			p.SetState(160)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(161)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(162)
			p.Formals()
		}
		{
			p.SetState(163)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}
		p.SetState(165)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(164)
				p.Match(ZParserNL)
			}


		}
		{
			p.SetState(167)
			p.SchemaText()
		}
		{
			p.SetState(168)
			p.Match(ZParserEND)
		}


	case 6:
		localctx = NewHorizontalDefinitionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(170)
			p.Match(ZParserZED)
		}
		p.SetState(172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ZParserNL {
			{
				p.SetState(171)
				p.Match(ZParserNL)
			}

		}
		{
			p.SetState(174)
			p.DeclNameExpression()
		}
		{
			p.SetState(175)
			p.Match(ZParserEND)
		}


	case 7:
		localctx = NewGenericHorizontalDefinitionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(177)
			p.Match(ZParserZED)
		}
		{
			p.SetState(178)
			p.DeclName()
		}
		{
			p.SetState(179)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(180)
			p.Formals()
		}
		{
			p.SetState(181)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}
		{
			p.SetState(182)
			p.Match(ZParserDEFINE_EQUAL)
		}
		{
			p.SetState(183)
			p.expression(0)
		}
		{
			p.SetState(184)
			p.Match(ZParserEND)
		}


	case 8:
		localctx = NewGenericOperatorDefinitionParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(186)
			p.Match(ZParserZED)
		}
		{
			p.SetState(187)
			p.GenName()
		}
		{
			p.SetState(188)
			p.Match(ZParserDEFINE_EQUAL)
		}
		{
			p.SetState(189)
			p.expression(0)
		}
		{
			p.SetState(190)
			p.Match(ZParserEND)
		}


	case 9:
		localctx = NewFreeTypesParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(192)
			p.Match(ZParserZED)
		}
		{
			p.SetState(193)
			p.Freetype()
		}
		p.SetState(198)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == ZParserAMPERSAND {
			{
				p.SetState(194)
				p.Match(ZParserAMPERSAND)
			}
			{
				p.SetState(195)
				p.Freetype()
			}


			p.SetState(200)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(201)
			p.Match(ZParserEND)
		}


	case 10:
		localctx = NewConjectureParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(203)
			p.Match(ZParserZED)
		}
		{
			p.SetState(204)
			p.Match(ZParserCONJECTURE)
		}
		{
			p.SetState(205)
			p.predicate(0)
		}
		{
			p.SetState(206)
			p.Match(ZParserEND)
		}


	case 11:
		localctx = NewGenericConjectureParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(208)
			p.Match(ZParserZED)
		}
		{
			p.SetState(209)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(210)
			p.Formals()
		}
		{
			p.SetState(211)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}
		{
			p.SetState(212)
			p.Match(ZParserCONJECTURE)
		}
		{
			p.SetState(213)
			p.predicate(0)
		}
		{
			p.SetState(214)
			p.Match(ZParserEND)
		}


	case 12:
		localctx = NewOperatorTemplateParagraphContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(216)
			p.Match(ZParserZED)
		}
		{
			p.SetState(217)
			p.OperatorTemplate()
		}
		{
			p.SetState(218)
			p.Match(ZParserEND)
		}

	}


	return localctx
}


// IFreetypeContext is an interface to support dynamic dispatch.
type IFreetypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFreetypeContext differentiates from other interfaces.
	IsFreetypeContext()
}

type FreetypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFreetypeContext() *FreetypeContext {
	var p = new(FreetypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_freetype
	return p
}

func (*FreetypeContext) IsFreetypeContext() {}

func NewFreetypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FreetypeContext {
	var p = new(FreetypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_freetype

	return p
}

func (s *FreetypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FreetypeContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *FreetypeContext) FREE_EQUALS() antlr.TerminalNode {
	return s.GetToken(ZParserFREE_EQUALS, 0)
}

func (s *FreetypeContext) AllBranch() []IBranchContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBranchContext)(nil)).Elem())
	var tst = make([]IBranchContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBranchContext)
		}
	}

	return tst
}

func (s *FreetypeContext) Branch(i int) IBranchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBranchContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBranchContext)
}

func (s *FreetypeContext) AllVERTICAL_LINE() []antlr.TerminalNode {
	return s.GetTokens(ZParserVERTICAL_LINE)
}

func (s *FreetypeContext) VERTICAL_LINE(i int) antlr.TerminalNode {
	return s.GetToken(ZParserVERTICAL_LINE, i)
}

func (s *FreetypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FreetypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FreetypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterFreetype(s)
	}
}

func (s *FreetypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitFreetype(s)
	}
}




func (p *ZParser) Freetype() (localctx IFreetypeContext) {
	localctx = NewFreetypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, ZParserRULE_freetype)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(222)
		p.Match(ZParserNAME)
	}
	{
		p.SetState(223)
		p.Match(ZParserFREE_EQUALS)
	}
	{
		p.SetState(224)
		p.Branch()
	}
	p.SetState(229)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ZParserVERTICAL_LINE {
		{
			p.SetState(225)
			p.Match(ZParserVERTICAL_LINE)
		}
		{
			p.SetState(226)
			p.Branch()
		}


		p.SetState(231)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IBranchContext is an interface to support dynamic dispatch.
type IBranchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBranchContext differentiates from other interfaces.
	IsBranchContext()
}

type BranchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchContext() *BranchContext {
	var p = new(BranchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_branch
	return p
}

func (*BranchContext) IsBranchContext() {}

func NewBranchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchContext {
	var p = new(BranchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_branch

	return p
}

func (s *BranchContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchContext) DeclName() IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *BranchContext) LEFT_DOUBLE_ANGLE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_DOUBLE_ANGLE_BRACKET, 0)
}

func (s *BranchContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BranchContext) RIGHT_DOUBLE_ANGLE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_DOUBLE_ANGLE_BRACKET, 0)
}

func (s *BranchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *BranchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterBranch(s)
	}
}

func (s *BranchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitBranch(s)
	}
}




func (p *ZParser) Branch() (localctx IBranchContext) {
	localctx = NewBranchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, ZParserRULE_branch)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(232)
		p.DeclName()
	}
	p.SetState(237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ZParserLEFT_DOUBLE_ANGLE_BRACKET {
		{
			p.SetState(233)
			p.Match(ZParserLEFT_DOUBLE_ANGLE_BRACKET)
		}
		{
			p.SetState(234)
			p.expression(0)
		}
		{
			p.SetState(235)
			p.Match(ZParserRIGHT_DOUBLE_ANGLE_BRACKET)
		}

	}



	return localctx
}


// IFormalsContext is an interface to support dynamic dispatch.
type IFormalsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFormalsContext differentiates from other interfaces.
	IsFormalsContext()
}

type FormalsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFormalsContext() *FormalsContext {
	var p = new(FormalsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_formals
	return p
}

func (*FormalsContext) IsFormalsContext() {}

func NewFormalsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FormalsContext {
	var p = new(FormalsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_formals

	return p
}

func (s *FormalsContext) GetParser() antlr.Parser { return s.parser }

func (s *FormalsContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(ZParserNAME)
}

func (s *FormalsContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNAME, i)
}

func (s *FormalsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *FormalsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}

func (s *FormalsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FormalsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *FormalsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterFormals(s)
	}
}

func (s *FormalsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitFormals(s)
	}
}




func (p *ZParser) Formals() (localctx IFormalsContext) {
	localctx = NewFormalsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, ZParserRULE_formals)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(239)
		p.Match(ZParserNAME)
	}
	p.SetState(244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ZParserCOMMA {
		{
			p.SetState(240)
			p.Match(ZParserCOMMA)
		}
		{
			p.SetState(241)
			p.Match(ZParserNAME)
		}


		p.SetState(246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}





type ExistentialQuantificationPredicateContext struct {
	*PredicateContext
}

func NewExistentialQuantificationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistentialQuantificationPredicateContext {
	var p = new(ExistentialQuantificationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ExistentialQuantificationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistentialQuantificationPredicateContext) THERE_EXISTS() antlr.TerminalNode {
	return s.GetToken(ZParserTHERE_EXISTS, 0)
}

func (s *ExistentialQuantificationPredicateContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *ExistentialQuantificationPredicateContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *ExistentialQuantificationPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}


func (s *ExistentialQuantificationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterExistentialQuantificationPredicate(s)
	}
}

func (s *ExistentialQuantificationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitExistentialQuantificationPredicate(s)
	}
}


type ConjunctionPredicateContext struct {
	*PredicateContext
}

func NewConjunctionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConjunctionPredicateContext {
	var p = new(ConjunctionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ConjunctionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConjunctionPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *ConjunctionPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *ConjunctionPredicateContext) LOGICAL_AND() antlr.TerminalNode {
	return s.GetToken(ZParserLOGICAL_AND, 0)
}


func (s *ConjunctionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterConjunctionPredicate(s)
	}
}

func (s *ConjunctionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitConjunctionPredicate(s)
	}
}


type EquivalencePredicateContext struct {
	*PredicateContext
}

func NewEquivalencePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EquivalencePredicateContext {
	var p = new(EquivalencePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *EquivalencePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EquivalencePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *EquivalencePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *EquivalencePredicateContext) LEFT_RIGHT_DOUBLE_ARROW() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_RIGHT_DOUBLE_ARROW, 0)
}


func (s *EquivalencePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterEquivalencePredicate(s)
	}
}

func (s *EquivalencePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitEquivalencePredicate(s)
	}
}


type NewlineConjunctionPredicateContext struct {
	*PredicateContext
}

func NewNewlineConjunctionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NewlineConjunctionPredicateContext {
	var p = new(NewlineConjunctionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *NewlineConjunctionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NewlineConjunctionPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *NewlineConjunctionPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *NewlineConjunctionPredicateContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}


func (s *NewlineConjunctionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNewlineConjunctionPredicate(s)
	}
}

func (s *NewlineConjunctionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNewlineConjunctionPredicate(s)
	}
}


type ImplicationPredicateContext struct {
	*PredicateContext
}

func NewImplicationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ImplicationPredicateContext {
	var p = new(ImplicationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ImplicationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplicationPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *ImplicationPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *ImplicationPredicateContext) RIGHTWARDS_DOUBLE_ARROW() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHTWARDS_DOUBLE_ARROW, 0)
}


func (s *ImplicationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterImplicationPredicate(s)
	}
}

func (s *ImplicationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitImplicationPredicate(s)
	}
}


type RelationOperatorApplicationPredicateContext struct {
	*PredicateContext
}

func NewRelationOperatorApplicationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelationOperatorApplicationPredicateContext {
	var p = new(RelationOperatorApplicationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *RelationOperatorApplicationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationOperatorApplicationPredicateContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}


func (s *RelationOperatorApplicationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterRelationOperatorApplicationPredicate(s)
	}
}

func (s *RelationOperatorApplicationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitRelationOperatorApplicationPredicate(s)
	}
}


type UniversalQuantificationPredicateContext struct {
	*PredicateContext
}

func NewUniversalQuantificationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniversalQuantificationPredicateContext {
	var p = new(UniversalQuantificationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *UniversalQuantificationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniversalQuantificationPredicateContext) FOR_ALL() antlr.TerminalNode {
	return s.GetToken(ZParserFOR_ALL, 0)
}

func (s *UniversalQuantificationPredicateContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *UniversalQuantificationPredicateContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *UniversalQuantificationPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}


func (s *UniversalQuantificationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterUniversalQuantificationPredicate(s)
	}
}

func (s *UniversalQuantificationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitUniversalQuantificationPredicate(s)
	}
}


type TruthPredicateContext struct {
	*PredicateContext
}

func NewTruthPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TruthPredicateContext {
	var p = new(TruthPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *TruthPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TruthPredicateContext) TRUE() antlr.TerminalNode {
	return s.GetToken(ZParserTRUE, 0)
}


func (s *TruthPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterTruthPredicate(s)
	}
}

func (s *TruthPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitTruthPredicate(s)
	}
}


type FalsityPredicateContext struct {
	*PredicateContext
}

func NewFalsityPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FalsityPredicateContext {
	var p = new(FalsityPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *FalsityPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FalsityPredicateContext) FALSE() antlr.TerminalNode {
	return s.GetToken(ZParserFALSE, 0)
}


func (s *FalsityPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterFalsityPredicate(s)
	}
}

func (s *FalsityPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitFalsityPredicate(s)
	}
}


type ParenthesizedPredicateContext struct {
	*PredicateContext
}

func NewParenthesizedPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedPredicateContext {
	var p = new(ParenthesizedPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ParenthesizedPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedPredicateContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *ParenthesizedPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *ParenthesizedPredicateContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}


func (s *ParenthesizedPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterParenthesizedPredicate(s)
	}
}

func (s *ParenthesizedPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitParenthesizedPredicate(s)
	}
}


type DisjunctionPredicateContext struct {
	*PredicateContext
}

func NewDisjunctionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DisjunctionPredicateContext {
	var p = new(DisjunctionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *DisjunctionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DisjunctionPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *DisjunctionPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *DisjunctionPredicateContext) LOGICAL_OR() antlr.TerminalNode {
	return s.GetToken(ZParserLOGICAL_OR, 0)
}


func (s *DisjunctionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDisjunctionPredicate(s)
	}
}

func (s *DisjunctionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDisjunctionPredicate(s)
	}
}


type SemicolonConjunctionPredicateContext struct {
	*PredicateContext
}

func NewSemicolonConjunctionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SemicolonConjunctionPredicateContext {
	var p = new(SemicolonConjunctionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SemicolonConjunctionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SemicolonConjunctionPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *SemicolonConjunctionPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SemicolonConjunctionPredicateContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(ZParserSEMICOLON, 0)
}


func (s *SemicolonConjunctionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSemicolonConjunctionPredicate(s)
	}
}

func (s *SemicolonConjunctionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSemicolonConjunctionPredicate(s)
	}
}


type SchemaPredicatePredicateContext struct {
	*PredicateContext
}

func NewSchemaPredicatePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaPredicatePredicateContext {
	var p = new(SchemaPredicatePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SchemaPredicatePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaPredicatePredicateContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaPredicatePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaPredicatePredicate(s)
	}
}

func (s *SchemaPredicatePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaPredicatePredicate(s)
	}
}


type UniqueExistentialQuantificationPredicateContext struct {
	*PredicateContext
}

func NewUniqueExistentialQuantificationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UniqueExistentialQuantificationPredicateContext {
	var p = new(UniqueExistentialQuantificationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *UniqueExistentialQuantificationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UniqueExistentialQuantificationPredicateContext) UNIQUE_EXISTS() antlr.TerminalNode {
	return s.GetToken(ZParserUNIQUE_EXISTS, 0)
}

func (s *UniqueExistentialQuantificationPredicateContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *UniqueExistentialQuantificationPredicateContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *UniqueExistentialQuantificationPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}


func (s *UniqueExistentialQuantificationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterUniqueExistentialQuantificationPredicate(s)
	}
}

func (s *UniqueExistentialQuantificationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitUniqueExistentialQuantificationPredicate(s)
	}
}


type NegationPredicateContext struct {
	*PredicateContext
}

func NewNegationPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NegationPredicateContext {
	var p = new(NegationPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *NegationPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegationPredicateContext) NOT_SIGN() antlr.TerminalNode {
	return s.GetToken(ZParserNOT_SIGN, 0)
}

func (s *NegationPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}


func (s *NegationPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNegationPredicate(s)
	}
}

func (s *NegationPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNegationPredicate(s)
	}
}



func (p *ZParser) Predicate() (localctx IPredicateContext) {
	return p.predicate(0)
}

func (p *ZParser) predicate(_p int) (localctx IPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 12
	p.EnterRecursionRule(localctx, 12, ZParserRULE_predicate, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(273)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUniversalQuantificationPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(248)
			p.Match(ZParserFOR_ALL)
		}
		{
			p.SetState(249)
			p.SchemaText()
		}
		{
			p.SetState(250)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(251)
			p.predicate(13)
		}


	case 2:
		localctx = NewExistentialQuantificationPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(253)
			p.Match(ZParserTHERE_EXISTS)
		}
		{
			p.SetState(254)
			p.SchemaText()
		}
		{
			p.SetState(255)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(256)
			p.predicate(12)
		}


	case 3:
		localctx = NewUniqueExistentialQuantificationPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(258)
			p.Match(ZParserUNIQUE_EXISTS)
		}
		{
			p.SetState(259)
			p.SchemaText()
		}
		{
			p.SetState(260)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(261)
			p.predicate(11)
		}


	case 4:
		localctx = NewNegationPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(263)
			p.Match(ZParserNOT_SIGN)
		}
		{
			p.SetState(264)
			p.predicate(6)
		}


	case 5:
		localctx = NewRelationOperatorApplicationPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(265)
			p.Relation()
		}


	case 6:
		localctx = NewSchemaPredicatePredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(266)
			p.expression(0)
		}


	case 7:
		localctx = NewTruthPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(267)
			p.Match(ZParserTRUE)
		}


	case 8:
		localctx = NewFalsityPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(268)
			p.Match(ZParserFALSE)
		}


	case 9:
		localctx = NewParenthesizedPredicateContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(269)
			p.Match(ZParserLEFT_PARENTHESIS)
		}
		{
			p.SetState(270)
			p.predicate(0)
		}
		{
			p.SetState(271)
			p.Match(ZParserRIGHT_PARENTHESIS)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(295)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(293)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
			case 1:
				localctx = NewNewlineConjunctionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(275)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(276)
					p.Match(ZParserNL)
				}
				{
					p.SetState(277)
					p.predicate(16)
				}


			case 2:
				localctx = NewSemicolonConjunctionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(278)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(279)
					p.Match(ZParserSEMICOLON)
				}
				{
					p.SetState(280)
					p.predicate(15)
				}


			case 3:
				localctx = NewEquivalencePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(281)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(282)
					p.Match(ZParserLEFT_RIGHT_DOUBLE_ARROW)
				}
				{
					p.SetState(283)
					p.predicate(11)
				}


			case 4:
				localctx = NewImplicationPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(284)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(285)
					p.Match(ZParserRIGHTWARDS_DOUBLE_ARROW)
				}
				{
					p.SetState(286)
					p.predicate(10)
				}


			case 5:
				localctx = NewDisjunctionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(287)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(288)
					p.Match(ZParserLOGICAL_OR)
				}
				{
					p.SetState(289)
					p.predicate(9)
				}


			case 6:
				localctx = NewConjunctionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_predicate)
				p.SetState(290)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(291)
					p.Match(ZParserLOGICAL_AND)
				}
				{
					p.SetState(292)
					p.predicate(8)
				}

			}

		}
		p.SetState(297)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())
	}



	return localctx
}


// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}





type SetComprehensionExpressionContext struct {
	*ExpressionContext
}

func NewSetComprehensionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetComprehensionExpressionContext {
	var p = new(SetComprehensionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SetComprehensionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetComprehensionExpressionContext) LEFT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_CURLY_BRACKET, 0)
}

func (s *SetComprehensionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SetComprehensionExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *SetComprehensionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetComprehensionExpressionContext) RIGHT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_CURLY_BRACKET, 0)
}


func (s *SetComprehensionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSetComprehensionExpression(s)
	}
}

func (s *SetComprehensionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSetComprehensionExpression(s)
	}
}


type SchemaEquivalenceExpressionContext struct {
	*ExpressionContext
}

func NewSchemaEquivalenceExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaEquivalenceExpressionContext {
	var p = new(SchemaEquivalenceExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaEquivalenceExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaEquivalenceExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaEquivalenceExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaEquivalenceExpressionContext) LEFT_RIGHT_DOUBLE_ARROW() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_RIGHT_DOUBLE_ARROW, 0)
}


func (s *SchemaEquivalenceExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaEquivalenceExpression(s)
	}
}

func (s *SchemaEquivalenceExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaEquivalenceExpression(s)
	}
}


type NofixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewNofixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NofixApplicationExpressionContext {
	var p = new(NofixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NofixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixApplicationExpressionContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *NofixApplicationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NofixApplicationExpressionContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *NofixApplicationExpressionContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *NofixApplicationExpressionContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *NofixApplicationExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *NofixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixApplicationExpression(s)
	}
}

func (s *NofixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixApplicationExpression(s)
	}
}


type SchemaConstructionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaConstructionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaConstructionExpressionContext {
	var p = new(SchemaConstructionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaConstructionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaConstructionExpressionContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *SchemaConstructionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SchemaConstructionExpressionContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}


func (s *SchemaConstructionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaConstructionExpression(s)
	}
}

func (s *SchemaConstructionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaConstructionExpression(s)
	}
}


type GenericPostfixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewGenericPostfixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericPostfixApplicationExpressionContext {
	var p = new(GenericPostfixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *GenericPostfixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericPostfixApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GenericPostfixApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GenericPostfixApplicationExpressionContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *GenericPostfixApplicationExpressionContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *GenericPostfixApplicationExpressionContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *GenericPostfixApplicationExpressionContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *GenericPostfixApplicationExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *GenericPostfixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericPostfixApplicationExpression(s)
	}
}

func (s *GenericPostfixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericPostfixApplicationExpression(s)
	}
}


type GenericPrefixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewGenericPrefixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericPrefixApplicationExpressionContext {
	var p = new(GenericPrefixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *GenericPrefixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericPrefixApplicationExpressionContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *GenericPrefixApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GenericPrefixApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GenericPrefixApplicationExpressionContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *GenericPrefixApplicationExpressionContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *GenericPrefixApplicationExpressionContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *GenericPrefixApplicationExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *GenericPrefixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericPrefixApplicationExpression(s)
	}
}

func (s *GenericPrefixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericPrefixApplicationExpression(s)
	}
}


type CharacteristicDefiniteDescriptionExpressionContext struct {
	*ExpressionContext
}

func NewCharacteristicDefiniteDescriptionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharacteristicDefiniteDescriptionExpressionContext {
	var p = new(CharacteristicDefiniteDescriptionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) GREEK_SMALL_LETTER_MU() antlr.TerminalNode {
	return s.GetToken(ZParserGREEK_SMALL_LETTER_MU, 0)
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}


func (s *CharacteristicDefiniteDescriptionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterCharacteristicDefiniteDescriptionExpression(s)
	}
}

func (s *CharacteristicDefiniteDescriptionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitCharacteristicDefiniteDescriptionExpression(s)
	}
}


type SchemaUniversalQuantificationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaUniversalQuantificationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaUniversalQuantificationExpressionContext {
	var p = new(SchemaUniversalQuantificationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaUniversalQuantificationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaUniversalQuantificationExpressionContext) FOR_ALL() antlr.TerminalNode {
	return s.GetToken(ZParserFOR_ALL, 0)
}

func (s *SchemaUniversalQuantificationExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SchemaUniversalQuantificationExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *SchemaUniversalQuantificationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaUniversalQuantificationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaUniversalQuantificationExpression(s)
	}
}

func (s *SchemaUniversalQuantificationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaUniversalQuantificationExpression(s)
	}
}


type SetExtensionExpressionContext struct {
	*ExpressionContext
}

func NewSetExtensionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetExtensionExpressionContext {
	var p = new(SetExtensionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SetExtensionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetExtensionExpressionContext) LEFT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_CURLY_BRACKET, 0)
}

func (s *SetExtensionExpressionContext) RIGHT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_CURLY_BRACKET, 0)
}

func (s *SetExtensionExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *SetExtensionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSetExtensionExpression(s)
	}
}

func (s *SetExtensionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSetExtensionExpression(s)
	}
}


type FunctionConstructionExpressionContext struct {
	*ExpressionContext
}

func NewFunctionConstructionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionConstructionExpressionContext {
	var p = new(FunctionConstructionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *FunctionConstructionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionConstructionExpressionContext) GREEK_SMALL_LETTER_LAMBDA() antlr.TerminalNode {
	return s.GetToken(ZParserGREEK_SMALL_LETTER_LAMBDA, 0)
}

func (s *FunctionConstructionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *FunctionConstructionExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *FunctionConstructionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *FunctionConstructionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterFunctionConstructionExpression(s)
	}
}

func (s *FunctionConstructionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitFunctionConstructionExpression(s)
	}
}


type SchemaNegationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaNegationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaNegationExpressionContext {
	var p = new(SchemaNegationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaNegationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaNegationExpressionContext) NOT_SIGN() antlr.TerminalNode {
	return s.GetToken(ZParserNOT_SIGN, 0)
}

func (s *SchemaNegationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaNegationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaNegationExpression(s)
	}
}

func (s *SchemaNegationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaNegationExpression(s)
	}
}


type TupleExtensionExpressionContext struct {
	*ExpressionContext
}

func NewTupleExtensionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TupleExtensionExpressionContext {
	var p = new(TupleExtensionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *TupleExtensionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExtensionExpressionContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *TupleExtensionExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExtensionExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExtensionExpressionContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *TupleExtensionExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *TupleExtensionExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}


func (s *TupleExtensionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterTupleExtensionExpression(s)
	}
}

func (s *TupleExtensionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitTupleExtensionExpression(s)
	}
}


type SchemaCompositionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaCompositionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaCompositionExpressionContext {
	var p = new(SchemaCompositionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaCompositionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaCompositionExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaCompositionExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaCompositionExpressionContext) SCHEMA_COMPOSITION() antlr.TerminalNode {
	return s.GetToken(ZParserSCHEMA_COMPOSITION, 0)
}


func (s *SchemaCompositionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaCompositionExpression(s)
	}
}

func (s *SchemaCompositionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaCompositionExpression(s)
	}
}


type PowersetExpressionContext struct {
	*ExpressionContext
}

func NewPowersetExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PowersetExpressionContext {
	var p = new(PowersetExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PowersetExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PowersetExpressionContext) POWERSET() antlr.TerminalNode {
	return s.GetToken(ZParserPOWERSET, 0)
}

func (s *PowersetExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *PowersetExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPowersetExpression(s)
	}
}

func (s *PowersetExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPowersetExpression(s)
	}
}


type SchemaDisjunctionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaDisjunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaDisjunctionExpressionContext {
	var p = new(SchemaDisjunctionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaDisjunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDisjunctionExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaDisjunctionExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaDisjunctionExpressionContext) LOGICAL_OR() antlr.TerminalNode {
	return s.GetToken(ZParserLOGICAL_OR, 0)
}


func (s *SchemaDisjunctionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaDisjunctionExpression(s)
	}
}

func (s *SchemaDisjunctionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaDisjunctionExpression(s)
	}
}


type SubstitutionExpressionExpressionContext struct {
	*ExpressionContext
}

func NewSubstitutionExpressionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstitutionExpressionExpressionContext {
	var p = new(SubstitutionExpressionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SubstitutionExpressionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstitutionExpressionExpressionContext) LET() antlr.TerminalNode {
	return s.GetToken(ZParserLET, 0)
}

func (s *SubstitutionExpressionExpressionContext) AllDeclNameExpression() []IDeclNameExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem())
	var tst = make([]IDeclNameExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclNameExpressionContext)
		}
	}

	return tst
}

func (s *SubstitutionExpressionExpressionContext) DeclNameExpression(i int) IDeclNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclNameExpressionContext)
}

func (s *SubstitutionExpressionExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *SubstitutionExpressionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubstitutionExpressionExpressionContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(ZParserSEMICOLON)
}

func (s *SubstitutionExpressionExpressionContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSEMICOLON, i)
}


func (s *SubstitutionExpressionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSubstitutionExpressionExpression(s)
	}
}

func (s *SubstitutionExpressionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSubstitutionExpressionExpression(s)
	}
}


type SchemaHidingExpressionContext struct {
	*ExpressionContext
}

func NewSchemaHidingExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaHidingExpressionContext {
	var p = new(SchemaHidingExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaHidingExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaHidingExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaHidingExpressionContext) REVERSE_SOLIDUS() antlr.TerminalNode {
	return s.GetToken(ZParserREVERSE_SOLIDUS, 0)
}

func (s *SchemaHidingExpressionContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *SchemaHidingExpressionContext) AllDeclName() []IDeclNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclNameContext)(nil)).Elem())
	var tst = make([]IDeclNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclNameContext)
		}
	}

	return tst
}

func (s *SchemaHidingExpressionContext) DeclName(i int) IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *SchemaHidingExpressionContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *SchemaHidingExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *SchemaHidingExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}


func (s *SchemaHidingExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaHidingExpression(s)
	}
}

func (s *SchemaHidingExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaHidingExpression(s)
	}
}


type PostfixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewPostfixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PostfixApplicationExpressionContext {
	var p = new(PostfixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PostfixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixApplicationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixApplicationExpressionContext) POST() antlr.TerminalNode {
	return s.GetToken(ZParserPOST, 0)
}


func (s *PostfixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixApplicationExpression(s)
	}
}

func (s *PostfixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixApplicationExpression(s)
	}
}


type CartesianProductExpressionContext struct {
	*ExpressionContext
}

func NewCartesianProductExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CartesianProductExpressionContext {
	var p = new(CartesianProductExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CartesianProductExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CartesianProductExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CartesianProductExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CartesianProductExpressionContext) AllMULTIPLICATION_SIGN() []antlr.TerminalNode {
	return s.GetTokens(ZParserMULTIPLICATION_SIGN)
}

func (s *CartesianProductExpressionContext) MULTIPLICATION_SIGN(i int) antlr.TerminalNode {
	return s.GetToken(ZParserMULTIPLICATION_SIGN, i)
}


func (s *CartesianProductExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterCartesianProductExpression(s)
	}
}

func (s *CartesianProductExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitCartesianProductExpression(s)
	}
}


type BindingSelectionExpressionContext struct {
	*ExpressionContext
}

func NewBindingSelectionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BindingSelectionExpressionContext {
	var p = new(BindingSelectionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BindingSelectionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingSelectionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BindingSelectionExpressionContext) FULL_STOP() antlr.TerminalNode {
	return s.GetToken(ZParserFULL_STOP, 0)
}

func (s *BindingSelectionExpressionContext) RefName() IRefNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefNameContext)
}


func (s *BindingSelectionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterBindingSelectionExpression(s)
	}
}

func (s *BindingSelectionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitBindingSelectionExpression(s)
	}
}


type GenericInstantiationExpressionContext struct {
	*ExpressionContext
}

func NewGenericInstantiationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericInstantiationExpressionContext {
	var p = new(GenericInstantiationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *GenericInstantiationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericInstantiationExpressionContext) RefName() IRefNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefNameContext)
}

func (s *GenericInstantiationExpressionContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *GenericInstantiationExpressionContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *GenericInstantiationExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *GenericInstantiationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericInstantiationExpression(s)
	}
}

func (s *GenericInstantiationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericInstantiationExpression(s)
	}
}


type SchemaExistentialQuantificationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaExistentialQuantificationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaExistentialQuantificationExpressionContext {
	var p = new(SchemaExistentialQuantificationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaExistentialQuantificationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaExistentialQuantificationExpressionContext) THERE_EXISTS() antlr.TerminalNode {
	return s.GetToken(ZParserTHERE_EXISTS, 0)
}

func (s *SchemaExistentialQuantificationExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SchemaExistentialQuantificationExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *SchemaExistentialQuantificationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaExistentialQuantificationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaExistentialQuantificationExpression(s)
	}
}

func (s *SchemaExistentialQuantificationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaExistentialQuantificationExpression(s)
	}
}


type NumberLiteralExpressionContext struct {
	*ExpressionContext
}

func NewNumberLiteralExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NumberLiteralExpressionContext {
	var p = new(NumberLiteralExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NumberLiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralExpressionContext) NUMERAL() antlr.TerminalNode {
	return s.GetToken(ZParserNUMERAL, 0)
}


func (s *NumberLiteralExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNumberLiteralExpression(s)
	}
}

func (s *NumberLiteralExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNumberLiteralExpression(s)
	}
}


type ParenthesizedExpressionContext struct {
	*ExpressionContext
}

func NewParenthesizedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}


func (s *ParenthesizedExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterParenthesizedExpression(s)
	}
}

func (s *ParenthesizedExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitParenthesizedExpression(s)
	}
}


type InfixLeftApplicationExpressionContext struct {
	*ExpressionContext
}

func NewInfixLeftApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InfixLeftApplicationExpressionContext {
	var p = new(InfixLeftApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *InfixLeftApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixLeftApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InfixLeftApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InfixLeftApplicationExpressionContext) I() antlr.TerminalNode {
	return s.GetToken(ZParserI, 0)
}


func (s *InfixLeftApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixLeftApplicationExpression(s)
	}
}

func (s *InfixLeftApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixLeftApplicationExpression(s)
	}
}


type ApplicationExpressionContext struct {
	*ExpressionContext
}

func NewApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ApplicationExpressionContext {
	var p = new(ApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *ApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterApplicationExpression(s)
	}
}

func (s *ApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitApplicationExpression(s)
	}
}


type SchemaRenamingExpressionContext struct {
	*ExpressionContext
}

func NewSchemaRenamingExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaRenamingExpressionContext {
	var p = new(SchemaRenamingExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaRenamingExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaRenamingExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaRenamingExpressionContext) LEFT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_SQUARE_BRACKET, 0)
}

func (s *SchemaRenamingExpressionContext) AllDeclName() []IDeclNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclNameContext)(nil)).Elem())
	var tst = make([]IDeclNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclNameContext)
		}
	}

	return tst
}

func (s *SchemaRenamingExpressionContext) DeclName(i int) IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *SchemaRenamingExpressionContext) AllSOLIDUS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSOLIDUS)
}

func (s *SchemaRenamingExpressionContext) SOLIDUS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSOLIDUS, i)
}

func (s *SchemaRenamingExpressionContext) RIGHT_SQUARE_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_SQUARE_BRACKET, 0)
}

func (s *SchemaRenamingExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *SchemaRenamingExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}


func (s *SchemaRenamingExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaRenamingExpression(s)
	}
}

func (s *SchemaRenamingExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaRenamingExpression(s)
	}
}


type SchemaConjunctionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaConjunctionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaConjunctionExpressionContext {
	var p = new(SchemaConjunctionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaConjunctionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaConjunctionExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaConjunctionExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaConjunctionExpressionContext) LOGICAL_AND() antlr.TerminalNode {
	return s.GetToken(ZParserLOGICAL_AND, 0)
}


func (s *SchemaConjunctionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaConjunctionExpression(s)
	}
}

func (s *SchemaConjunctionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaConjunctionExpression(s)
	}
}


type ConditionalExpressionContext struct {
	*ExpressionContext
}

func NewConditionalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) IF() antlr.TerminalNode {
	return s.GetToken(ZParserIF, 0)
}

func (s *ConditionalExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *ConditionalExpressionContext) THEN() antlr.TerminalNode {
	return s.GetToken(ZParserTHEN, 0)
}

func (s *ConditionalExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ConditionalExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(ZParserELSE, 0)
}


func (s *ConditionalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitConditionalExpression(s)
	}
}


type SchemaProjectionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaProjectionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaProjectionExpressionContext {
	var p = new(SchemaProjectionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaProjectionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaProjectionExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaProjectionExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaProjectionExpressionContext) SCHEMA_PROJECTION() antlr.TerminalNode {
	return s.GetToken(ZParserSCHEMA_PROJECTION, 0)
}


func (s *SchemaProjectionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaProjectionExpression(s)
	}
}

func (s *SchemaProjectionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaProjectionExpression(s)
	}
}


type InfixRightApplicationExpressionContext struct {
	*ExpressionContext
}

func NewInfixRightApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InfixRightApplicationExpressionContext {
	var p = new(InfixRightApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *InfixRightApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixRightApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InfixRightApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InfixRightApplicationExpressionContext) I() antlr.TerminalNode {
	return s.GetToken(ZParserI, 0)
}


func (s *InfixRightApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixRightApplicationExpression(s)
	}
}

func (s *InfixRightApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixRightApplicationExpression(s)
	}
}


type CharacteristicSetComprehensionExpressionContext struct {
	*ExpressionContext
}

func NewCharacteristicSetComprehensionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharacteristicSetComprehensionExpressionContext {
	var p = new(CharacteristicSetComprehensionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CharacteristicSetComprehensionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharacteristicSetComprehensionExpressionContext) LEFT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_CURLY_BRACKET, 0)
}

func (s *CharacteristicSetComprehensionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *CharacteristicSetComprehensionExpressionContext) RIGHT_CURLY_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_CURLY_BRACKET, 0)
}


func (s *CharacteristicSetComprehensionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterCharacteristicSetComprehensionExpression(s)
	}
}

func (s *CharacteristicSetComprehensionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitCharacteristicSetComprehensionExpression(s)
	}
}


type SchemaPreconditionExpressionContext struct {
	*ExpressionContext
}

func NewSchemaPreconditionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaPreconditionExpressionContext {
	var p = new(SchemaPreconditionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaPreconditionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaPreconditionExpressionContext) PRE_KEY() antlr.TerminalNode {
	return s.GetToken(ZParserPRE_KEY, 0)
}

func (s *SchemaPreconditionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaPreconditionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaPreconditionExpression(s)
	}
}

func (s *SchemaPreconditionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaPreconditionExpression(s)
	}
}


type PrefixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewPrefixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrefixApplicationExpressionContext {
	var p = new(PrefixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PrefixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixApplicationExpressionContext) PRE() antlr.TerminalNode {
	return s.GetToken(ZParserPRE, 0)
}

func (s *PrefixApplicationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *PrefixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixApplicationExpression(s)
	}
}

func (s *PrefixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixApplicationExpression(s)
	}
}


type BindingConstructionExpressionContext struct {
	*ExpressionContext
}

func NewBindingConstructionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BindingConstructionExpressionContext {
	var p = new(BindingConstructionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BindingConstructionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingConstructionExpressionContext) GREEK_SMALL_LETTER_THETA() antlr.TerminalNode {
	return s.GetToken(ZParserGREEK_SMALL_LETTER_THETA, 0)
}

func (s *BindingConstructionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BindingConstructionExpressionContext) AllSTROKE() []antlr.TerminalNode {
	return s.GetTokens(ZParserSTROKE)
}

func (s *BindingConstructionExpressionContext) STROKE(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSTROKE, i)
}


func (s *BindingConstructionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterBindingConstructionExpression(s)
	}
}

func (s *BindingConstructionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitBindingConstructionExpression(s)
	}
}


type SchemaPipingExpressionContext struct {
	*ExpressionContext
}

func NewSchemaPipingExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaPipingExpressionContext {
	var p = new(SchemaPipingExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaPipingExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaPipingExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaPipingExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaPipingExpressionContext) SCHEMA_PIPING() antlr.TerminalNode {
	return s.GetToken(ZParserSCHEMA_PIPING, 0)
}


func (s *SchemaPipingExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaPipingExpression(s)
	}
}

func (s *SchemaPipingExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaPipingExpression(s)
	}
}


type SchemaImplicationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaImplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaImplicationExpressionContext {
	var p = new(SchemaImplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaImplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaImplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SchemaImplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaImplicationExpressionContext) RIGHTWARDS_DOUBLE_ARROW() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHTWARDS_DOUBLE_ARROW, 0)
}


func (s *SchemaImplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaImplicationExpression(s)
	}
}

func (s *SchemaImplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaImplicationExpression(s)
	}
}


type BindingExtensionExpressionContext struct {
	*ExpressionContext
}

func NewBindingExtensionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BindingExtensionExpressionContext {
	var p = new(BindingExtensionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BindingExtensionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BindingExtensionExpressionContext) LEFT_BINDING_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_BINDING_BRACKET, 0)
}

func (s *BindingExtensionExpressionContext) RIGHT_BINDING_BRACKET() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_BINDING_BRACKET, 0)
}

func (s *BindingExtensionExpressionContext) AllDeclNameExpression() []IDeclNameExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem())
	var tst = make([]IDeclNameExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclNameExpressionContext)
		}
	}

	return tst
}

func (s *BindingExtensionExpressionContext) DeclNameExpression(i int) IDeclNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclNameExpressionContext)
}

func (s *BindingExtensionExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *BindingExtensionExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}


func (s *BindingExtensionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterBindingExtensionExpression(s)
	}
}

func (s *BindingExtensionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitBindingExtensionExpression(s)
	}
}


type SchemaDecorationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaDecorationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaDecorationExpressionContext {
	var p = new(SchemaDecorationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaDecorationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDecorationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SchemaDecorationExpressionContext) STROKE() antlr.TerminalNode {
	return s.GetToken(ZParserSTROKE, 0)
}


func (s *SchemaDecorationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaDecorationExpression(s)
	}
}

func (s *SchemaDecorationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaDecorationExpression(s)
	}
}


type SchemaUniqueExistentialQuantificationExpressionContext struct {
	*ExpressionContext
}

func NewSchemaUniqueExistentialQuantificationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SchemaUniqueExistentialQuantificationExpressionContext {
	var p = new(SchemaUniqueExistentialQuantificationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) UNIQUE_EXISTS() antlr.TerminalNode {
	return s.GetToken(ZParserUNIQUE_EXISTS, 0)
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *SchemaUniqueExistentialQuantificationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaUniqueExistentialQuantificationExpression(s)
	}
}

func (s *SchemaUniqueExistentialQuantificationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaUniqueExistentialQuantificationExpression(s)
	}
}


type DefiniteDescriptionExpressionContext struct {
	*ExpressionContext
}

func NewDefiniteDescriptionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefiniteDescriptionExpressionContext {
	var p = new(DefiniteDescriptionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *DefiniteDescriptionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefiniteDescriptionExpressionContext) GREEK_SMALL_LETTER_MU() antlr.TerminalNode {
	return s.GetToken(ZParserGREEK_SMALL_LETTER_MU, 0)
}

func (s *DefiniteDescriptionExpressionContext) SchemaText() ISchemaTextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaTextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaTextContext)
}

func (s *DefiniteDescriptionExpressionContext) SPOT() antlr.TerminalNode {
	return s.GetToken(ZParserSPOT, 0)
}

func (s *DefiniteDescriptionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}


func (s *DefiniteDescriptionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDefiniteDescriptionExpression(s)
	}
}

func (s *DefiniteDescriptionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDefiniteDescriptionExpression(s)
	}
}


type ReferenceExpressionContext struct {
	*ExpressionContext
}

func NewReferenceExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReferenceExpressionContext {
	var p = new(ReferenceExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ReferenceExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReferenceExpressionContext) RefName() IRefNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRefNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRefNameContext)
}


func (s *ReferenceExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterReferenceExpression(s)
	}
}

func (s *ReferenceExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitReferenceExpression(s)
	}
}


type GenericInfixApplicationExpressionContext struct {
	*ExpressionContext
}

func NewGenericInfixApplicationExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GenericInfixApplicationExpressionContext {
	var p = new(GenericInfixApplicationExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *GenericInfixApplicationExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericInfixApplicationExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GenericInfixApplicationExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GenericInfixApplicationExpressionContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *GenericInfixApplicationExpressionContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *GenericInfixApplicationExpressionContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *GenericInfixApplicationExpressionContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *GenericInfixApplicationExpressionContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}


func (s *GenericInfixApplicationExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenericInfixApplicationExpression(s)
	}
}

func (s *GenericInfixApplicationExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenericInfixApplicationExpression(s)
	}
}


type TupleSelectionExpressionContext struct {
	*ExpressionContext
}

func NewTupleSelectionExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TupleSelectionExpressionContext {
	var p = new(TupleSelectionExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *TupleSelectionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleSelectionExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleSelectionExpressionContext) FULL_STOP() antlr.TerminalNode {
	return s.GetToken(ZParserFULL_STOP, 0)
}

func (s *TupleSelectionExpressionContext) NUMERAL() antlr.TerminalNode {
	return s.GetToken(ZParserNUMERAL, 0)
}


func (s *TupleSelectionExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterTupleSelectionExpression(s)
	}
}

func (s *TupleSelectionExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitTupleSelectionExpression(s)
	}
}



func (p *ZParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *ZParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 14
	p.EnterRecursionRule(localctx, 14, ZParserRULE_expression, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSchemaUniversalQuantificationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(299)
			p.Match(ZParserFOR_ALL)
		}
		{
			p.SetState(300)
			p.SchemaText()
		}
		{
			p.SetState(301)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(302)
			p.expression(44)
		}


	case 2:
		localctx = NewSchemaExistentialQuantificationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(304)
			p.Match(ZParserTHERE_EXISTS)
		}
		{
			p.SetState(305)
			p.SchemaText()
		}
		{
			p.SetState(306)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(307)
			p.expression(43)
		}


	case 3:
		localctx = NewSchemaUniqueExistentialQuantificationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(309)
			p.Match(ZParserUNIQUE_EXISTS)
		}
		{
			p.SetState(310)
			p.SchemaText()
		}
		{
			p.SetState(311)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(312)
			p.expression(42)
		}


	case 4:
		localctx = NewFunctionConstructionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(314)
			p.Match(ZParserGREEK_SMALL_LETTER_LAMBDA)
		}
		{
			p.SetState(315)
			p.SchemaText()
		}
		{
			p.SetState(316)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(317)
			p.expression(41)
		}


	case 5:
		localctx = NewDefiniteDescriptionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(319)
			p.Match(ZParserGREEK_SMALL_LETTER_MU)
		}
		{
			p.SetState(320)
			p.SchemaText()
		}
		{
			p.SetState(321)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(322)
			p.expression(40)
		}


	case 6:
		localctx = NewSubstitutionExpressionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(324)
			p.Match(ZParserLET)
		}
		{
			p.SetState(325)
			p.DeclNameExpression()
		}
		p.SetState(330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == ZParserSEMICOLON {
			{
				p.SetState(326)
				p.Match(ZParserSEMICOLON)
			}
			{
				p.SetState(327)
				p.DeclNameExpression()
			}


			p.SetState(332)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(333)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(334)
			p.expression(39)
		}


	case 7:
		localctx = NewSchemaNegationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(336)
			p.Match(ZParserNOT_SIGN)
		}
		{
			p.SetState(337)
			p.expression(34)
		}


	case 8:
		localctx = NewConditionalExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(338)
			p.Match(ZParserIF)
		}
		{
			p.SetState(339)
			p.predicate(0)
		}
		{
			p.SetState(340)
			p.Match(ZParserTHEN)
		}
		{
			p.SetState(341)
			p.expression(0)
		}
		{
			p.SetState(342)
			p.Match(ZParserELSE)
		}
		{
			p.SetState(343)
			p.expression(33)
		}


	case 9:
		localctx = NewSchemaPreconditionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(345)
			p.Match(ZParserPRE_KEY)
		}
		{
			p.SetState(346)
			p.expression(28)
		}


	case 10:
		localctx = NewPowersetExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(347)
			p.Match(ZParserPOWERSET)
		}
		{
			p.SetState(348)
			p.expression(26)
		}


	case 11:
		localctx = NewPrefixApplicationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(349)
			p.Match(ZParserPRE)
		}
		{
			p.SetState(350)
			p.expression(25)
		}


	case 12:
		localctx = NewGenericPrefixApplicationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(351)
			p.Match(ZParserL)
		}
		p.SetState(353)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(352)
				p.ExpSep()
			}


		}
		p.SetState(362)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(355)
				p.expression(0)
			}
			{
				p.SetState(356)
				p.Match(ZParserERE)
			}


		case 2:
			p.SetState(359)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(358)
					p.ExpressionList()
				}

			}
			{
				p.SetState(361)
				p.Match(ZParserSRE)
			}

		}
		{
			p.SetState(364)
			p.expression(24)
		}


	case 13:
		localctx = NewNofixApplicationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(365)
			p.Match(ZParserL)
		}
		p.SetState(367)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(366)
				p.ExpSep()
			}


		}
		p.SetState(376)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(369)
				p.expression(0)
			}
			{
				p.SetState(370)
				p.Match(ZParserER)
			}


		case 2:
			p.SetState(373)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(372)
					p.ExpressionList()
				}

			}
			{
				p.SetState(375)
				p.Match(ZParserSR)
			}

		}


	case 14:
		localctx = NewBindingConstructionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(378)
			p.Match(ZParserGREEK_SMALL_LETTER_THETA)
		}
		{
			p.SetState(379)
			p.expression(0)
		}
		p.SetState(383)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(380)
					p.Match(ZParserSTROKE)
				}


			}
			p.SetState(385)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
		}


	case 15:
		localctx = NewReferenceExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(386)
			p.RefName()
		}


	case 16:
		localctx = NewGenericInstantiationExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(387)
			p.RefName()
		}
		{
			p.SetState(388)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		p.SetState(390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
			{
				p.SetState(389)
				p.ExpressionList()
			}

		}
		{
			p.SetState(392)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}


	case 17:
		localctx = NewNumberLiteralExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(394)
			p.Match(ZParserNUMERAL)
		}


	case 18:
		localctx = NewSetExtensionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(395)
			p.Match(ZParserLEFT_CURLY_BRACKET)
		}
		p.SetState(397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
			{
				p.SetState(396)
				p.ExpressionList()
			}

		}
		{
			p.SetState(399)
			p.Match(ZParserRIGHT_CURLY_BRACKET)
		}


	case 19:
		localctx = NewSetComprehensionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(400)
			p.Match(ZParserLEFT_CURLY_BRACKET)
		}
		{
			p.SetState(401)
			p.SchemaText()
		}
		{
			p.SetState(402)
			p.Match(ZParserSPOT)
		}
		{
			p.SetState(403)
			p.expression(0)
		}
		{
			p.SetState(404)
			p.Match(ZParserRIGHT_CURLY_BRACKET)
		}


	case 20:
		localctx = NewCharacteristicSetComprehensionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(406)
			p.Match(ZParserLEFT_CURLY_BRACKET)
		}
		{
			p.SetState(407)
			p.SchemaText()
		}
		{
			p.SetState(408)
			p.Match(ZParserRIGHT_CURLY_BRACKET)
		}


	case 21:
		localctx = NewSchemaConstructionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(410)
			p.Match(ZParserLEFT_SQUARE_BRACKET)
		}
		{
			p.SetState(411)
			p.SchemaText()
		}
		{
			p.SetState(412)
			p.Match(ZParserRIGHT_SQUARE_BRACKET)
		}


	case 22:
		localctx = NewBindingExtensionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(414)
			p.Match(ZParserLEFT_BINDING_BRACKET)
		}
		p.SetState(423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ZParserARGUMENT || _la == ZParserNAME || ((((_la - 135)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 135))) & ((1 << (ZParserPREP - 135)) | (1 << (ZParserPRE - 135)) | (1 << (ZParserLP - 135)) | (1 << (ZParserL - 135)))) != 0) {
			{
				p.SetState(415)
				p.DeclNameExpression()
			}
			p.SetState(420)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == ZParserCOMMA {
				{
					p.SetState(416)
					p.Match(ZParserCOMMA)
				}
				{
					p.SetState(417)
					p.DeclNameExpression()
				}


				p.SetState(422)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(425)
			p.Match(ZParserRIGHT_BINDING_BRACKET)
		}


	case 23:
		localctx = NewTupleExtensionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(426)
			p.Match(ZParserLEFT_PARENTHESIS)
		}
		{
			p.SetState(427)
			p.expression(0)
		}
		p.SetState(430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for ok := true; ok; ok = _la == ZParserCOMMA {
			{
				p.SetState(428)
				p.Match(ZParserCOMMA)
			}
			{
				p.SetState(429)
				p.expression(0)
			}


			p.SetState(432)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(434)
			p.Match(ZParserRIGHT_PARENTHESIS)
		}


	case 24:
		localctx = NewCharacteristicDefiniteDescriptionExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(436)
			p.Match(ZParserLEFT_PARENTHESIS)
		}
		{
			p.SetState(437)
			p.Match(ZParserGREEK_SMALL_LETTER_MU)
		}
		{
			p.SetState(438)
			p.SchemaText()
		}
		{
			p.SetState(439)
			p.Match(ZParserRIGHT_PARENTHESIS)
		}


	case 25:
		localctx = NewParenthesizedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(441)
			p.Match(ZParserLEFT_PARENTHESIS)
		}
		{
			p.SetState(442)
			p.expression(0)
		}
		{
			p.SetState(443)
			p.Match(ZParserRIGHT_PARENTHESIS)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(553)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSchemaEquivalenceExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(447)

				if !(p.Precpred(p.GetParserRuleContext(), 38)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 38)", ""))
				}
				{
					p.SetState(448)
					p.Match(ZParserLEFT_RIGHT_DOUBLE_ARROW)
				}
				{
					p.SetState(449)
					p.expression(39)
				}


			case 2:
				localctx = NewSchemaImplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(450)

				if !(p.Precpred(p.GetParserRuleContext(), 37)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 37)", ""))
				}
				{
					p.SetState(451)
					p.Match(ZParserRIGHTWARDS_DOUBLE_ARROW)
				}
				{
					p.SetState(452)
					p.expression(38)
				}


			case 3:
				localctx = NewSchemaDisjunctionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(453)

				if !(p.Precpred(p.GetParserRuleContext(), 36)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 36)", ""))
				}
				{
					p.SetState(454)
					p.Match(ZParserLOGICAL_OR)
				}
				{
					p.SetState(455)
					p.expression(37)
				}


			case 4:
				localctx = NewSchemaConjunctionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(456)

				if !(p.Precpred(p.GetParserRuleContext(), 35)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 35)", ""))
				}
				{
					p.SetState(457)
					p.Match(ZParserLOGICAL_AND)
				}
				{
					p.SetState(458)
					p.expression(36)
				}


			case 5:
				localctx = NewSchemaCompositionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(459)

				if !(p.Precpred(p.GetParserRuleContext(), 32)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 32)", ""))
				}
				{
					p.SetState(460)
					p.Match(ZParserSCHEMA_COMPOSITION)
				}
				{
					p.SetState(461)
					p.expression(33)
				}


			case 6:
				localctx = NewSchemaPipingExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(462)

				if !(p.Precpred(p.GetParserRuleContext(), 31)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 31)", ""))
				}
				{
					p.SetState(463)
					p.Match(ZParserSCHEMA_PIPING)
				}
				{
					p.SetState(464)
					p.expression(32)
				}


			case 7:
				localctx = NewSchemaProjectionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(465)

				if !(p.Precpred(p.GetParserRuleContext(), 29)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 29)", ""))
				}
				{
					p.SetState(466)
					p.Match(ZParserSCHEMA_PROJECTION)
				}
				{
					p.SetState(467)
					p.expression(30)
				}


			case 8:
				localctx = NewInfixLeftApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(468)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				p.SetState(469)

				if !(ZSupport.isLeftAssociative(_input)) {
					panic(antlr.NewFailedPredicateException(p, "ZSupport.isLeftAssociative(_input)", ""))
				}
				{
					p.SetState(470)
					p.Match(ZParserI)
				}
				{
					p.SetState(471)
					p.expression(22)
				}


			case 9:
				localctx = NewInfixRightApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(472)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
				}
				{
					p.SetState(473)
					p.Match(ZParserI)
				}
				{
					p.SetState(474)
					p.expression(20)
				}


			case 10:
				localctx = NewGenericInfixApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(475)

				if !(p.Precpred(p.GetParserRuleContext(), 19)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 19)", ""))
				}
				{
					p.SetState(476)
					p.Match(ZParserEL)
				}
				p.SetState(478)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(477)
						p.ExpSep()
					}


				}
				p.SetState(487)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(480)
						p.expression(0)
					}
					{
						p.SetState(481)
						p.Match(ZParserERE)
					}


				case 2:
					p.SetState(484)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
						{
							p.SetState(483)
							p.ExpressionList()
						}

					}
					{
						p.SetState(486)
						p.Match(ZParserSRE)
					}

				}
				{
					p.SetState(489)
					p.expression(20)
				}


			case 11:
				localctx = NewApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(490)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(491)
					p.expression(18)
				}


			case 12:
				localctx = NewSchemaHidingExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(492)

				if !(p.Precpred(p.GetParserRuleContext(), 30)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 30)", ""))
				}
				{
					p.SetState(493)
					p.Match(ZParserREVERSE_SOLIDUS)
				}
				{
					p.SetState(494)
					p.Match(ZParserLEFT_PARENTHESIS)
				}
				{
					p.SetState(495)
					p.DeclName()
				}
				p.SetState(500)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == ZParserCOMMA {
					{
						p.SetState(496)
						p.Match(ZParserCOMMA)
					}
					{
						p.SetState(497)
						p.DeclName()
					}


					p.SetState(502)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(503)
					p.Match(ZParserRIGHT_PARENTHESIS)
				}


			case 13:
				localctx = NewCartesianProductExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(505)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				p.SetState(508)
				p.GetErrorHandler().Sync(p)
				_alt = 1
				for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					switch _alt {
					case 1:
							{
								p.SetState(506)
								p.Match(ZParserMULTIPLICATION_SIGN)
							}
							{
								p.SetState(507)
								p.expression(0)
							}




					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

					p.SetState(510)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext())
				}


			case 14:
				localctx = NewPostfixApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(512)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(513)
					p.Match(ZParserPOST)
				}


			case 15:
				localctx = NewGenericPostfixApplicationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(514)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(515)
					p.Match(ZParserEL)
				}
				p.SetState(517)
				p.GetErrorHandler().Sync(p)


				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(516)
						p.ExpSep()
					}


				}
				p.SetState(526)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(519)
						p.expression(0)
					}
					{
						p.SetState(520)
						p.Match(ZParserER)
					}


				case 2:
					p.SetState(523)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
						{
							p.SetState(522)
							p.ExpressionList()
						}

					}
					{
						p.SetState(525)
						p.Match(ZParserSR)
					}

				}


			case 16:
				localctx = NewSchemaDecorationExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(528)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(529)
					p.Match(ZParserSTROKE)
				}


			case 17:
				localctx = NewSchemaRenamingExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(530)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(531)
					p.Match(ZParserLEFT_SQUARE_BRACKET)
				}
				{
					p.SetState(532)
					p.DeclName()
				}
				{
					p.SetState(533)
					p.Match(ZParserSOLIDUS)
				}
				{
					p.SetState(534)
					p.DeclName()
				}
				p.SetState(542)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				for _la == ZParserCOMMA {
					{
						p.SetState(535)
						p.Match(ZParserCOMMA)
					}
					{
						p.SetState(536)
						p.DeclName()
					}
					{
						p.SetState(537)
						p.Match(ZParserSOLIDUS)
					}
					{
						p.SetState(538)
						p.DeclName()
					}


					p.SetState(544)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(545)
					p.Match(ZParserRIGHT_SQUARE_BRACKET)
				}


			case 18:
				localctx = NewBindingSelectionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(547)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(548)
					p.Match(ZParserFULL_STOP)
				}
				{
					p.SetState(549)
					p.RefName()
				}


			case 19:
				localctx = NewTupleSelectionExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, ZParserRULE_expression)
				p.SetState(550)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(551)
					p.Match(ZParserFULL_STOP)
				}
				{
					p.SetState(552)
					p.Match(ZParserNUMERAL)
				}

			}

		}
		p.SetState(557)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext())
	}



	return localctx
}


// ISchemaTextContext is an interface to support dynamic dispatch.
type ISchemaTextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaTextContext differentiates from other interfaces.
	IsSchemaTextContext()
}

type SchemaTextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaTextContext() *SchemaTextContext {
	var p = new(SchemaTextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_schemaText
	return p
}

func (*SchemaTextContext) IsSchemaTextContext() {}

func NewSchemaTextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaTextContext {
	var p = new(SchemaTextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_schemaText

	return p
}

func (s *SchemaTextContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaTextContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(ZParserNL)
}

func (s *SchemaTextContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNL, i)
}

func (s *SchemaTextContext) DeclPart() IDeclPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclPartContext)
}

func (s *SchemaTextContext) VERTICAL_LINE() antlr.TerminalNode {
	return s.GetToken(ZParserVERTICAL_LINE, 0)
}

func (s *SchemaTextContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SchemaTextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaTextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *SchemaTextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterSchemaText(s)
	}
}

func (s *SchemaTextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitSchemaText(s)
	}
}




func (p *ZParser) SchemaText() (localctx ISchemaTextContext) {
	localctx = NewSchemaTextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, ZParserRULE_schemaText)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(559)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(558)
			p.Match(ZParserNL)
		}


	}
	p.SetState(562)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 47)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 47))) & ((1 << (ZParserARGUMENT - 47)) | (1 << (ZParserFOR_ALL - 47)) | (1 << (ZParserTHERE_EXISTS - 47)) | (1 << (ZParserUNIQUE_EXISTS - 47)) | (1 << (ZParserNOT_SIGN - 47)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 47)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 47)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 47)) | (1 << (ZParserNAME - 47)))) != 0) || ((((_la - 135)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 135))) & ((1 << (ZParserPREP - 135)) | (1 << (ZParserPRE - 135)) | (1 << (ZParserLP - 135)) | (1 << (ZParserL - 135)))) != 0) {
		{
			p.SetState(561)
			p.DeclPart()
		}

	}
	p.SetState(565)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(564)
			p.Match(ZParserNL)
		}


	}
	p.SetState(575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ZParserVERTICAL_LINE {
		{
			p.SetState(567)
			p.Match(ZParserVERTICAL_LINE)
		}
		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == ZParserNL {
			{
				p.SetState(568)
				p.Match(ZParserNL)
			}

		}
		{
			p.SetState(571)
			p.predicate(0)
		}
		p.SetState(573)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(572)
				p.Match(ZParserNL)
			}


		}

	}
	p.SetState(578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == ZParserNL {
		{
			p.SetState(577)
			p.Match(ZParserNL)
		}

	}



	return localctx
}


// IDeclPartContext is an interface to support dynamic dispatch.
type IDeclPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclPartContext differentiates from other interfaces.
	IsDeclPartContext()
}

type DeclPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclPartContext() *DeclPartContext {
	var p = new(DeclPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_declPart
	return p
}

func (*DeclPartContext) IsDeclPartContext() {}

func NewDeclPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclPartContext {
	var p = new(DeclPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_declPart

	return p
}

func (s *DeclPartContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclPartContext) AllDeclaration() []IDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationContext)(nil)).Elem())
	var tst = make([]IDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationContext)
		}
	}

	return tst
}

func (s *DeclPartContext) Declaration(i int) IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclPartContext) AllSEMICOLON() []antlr.TerminalNode {
	return s.GetTokens(ZParserSEMICOLON)
}

func (s *DeclPartContext) SEMICOLON(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSEMICOLON, i)
}

func (s *DeclPartContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(ZParserNL)
}

func (s *DeclPartContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNL, i)
}

func (s *DeclPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDeclPart(s)
	}
}

func (s *DeclPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDeclPart(s)
	}
}




func (p *ZParser) DeclPart() (localctx IDeclPartContext) {
	localctx = NewDeclPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, ZParserRULE_declPart)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(580)
		p.Declaration()
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(581)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZParserNL || _la == ZParserSEMICOLON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
			    p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(582)
				p.Declaration()
			}


		}
		p.SetState(587)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}



	return localctx
}


// IDeclNameExpressionContext is an interface to support dynamic dispatch.
type IDeclNameExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclNameExpressionContext differentiates from other interfaces.
	IsDeclNameExpressionContext()
}

type DeclNameExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclNameExpressionContext() *DeclNameExpressionContext {
	var p = new(DeclNameExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_declNameExpression
	return p
}

func (*DeclNameExpressionContext) IsDeclNameExpressionContext() {}

func NewDeclNameExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclNameExpressionContext {
	var p = new(DeclNameExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_declNameExpression

	return p
}

func (s *DeclNameExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclNameExpressionContext) DeclName() IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *DeclNameExpressionContext) DEFINE_EQUAL() antlr.TerminalNode {
	return s.GetToken(ZParserDEFINE_EQUAL, 0)
}

func (s *DeclNameExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclNameExpressionContext) NL() antlr.TerminalNode {
	return s.GetToken(ZParserNL, 0)
}

func (s *DeclNameExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclNameExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclNameExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDeclNameExpression(s)
	}
}

func (s *DeclNameExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDeclNameExpression(s)
	}
}




func (p *ZParser) DeclNameExpression() (localctx IDeclNameExpressionContext) {
	localctx = NewDeclNameExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, ZParserRULE_declNameExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.DeclName()
	}
	{
		p.SetState(589)
		p.Match(ZParserDEFINE_EQUAL)
	}
	{
		p.SetState(590)
		p.expression(0)
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(591)
			p.Match(ZParserNL)
		}


	}



	return localctx
}


// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) AllDeclName() []IDeclNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclNameContext)(nil)).Elem())
	var tst = make([]IDeclNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclNameContext)
		}
	}

	return tst
}

func (s *DeclarationContext) DeclName(i int) IDeclNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclNameContext)
}

func (s *DeclarationContext) COLON() antlr.TerminalNode {
	return s.GetToken(ZParserCOLON, 0)
}

func (s *DeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeclarationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *DeclarationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}

func (s *DeclarationContext) DeclNameExpression() IDeclNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclNameExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclNameExpressionContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDeclaration(s)
	}
}




func (p *ZParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, ZParserRULE_declaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(594)
			p.DeclName()
		}
		p.SetState(599)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == ZParserCOMMA {
			{
				p.SetState(595)
				p.Match(ZParserCOMMA)
			}
			{
				p.SetState(596)
				p.DeclName()
			}


			p.SetState(601)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(602)
			p.Match(ZParserCOLON)
		}
		{
			p.SetState(603)
			p.expression(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(605)
			p.DeclNameExpression()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(606)
			p.expression(0)
		}

	}


	return localctx
}


// IOperatorTemplateContext is an interface to support dynamic dispatch.
type IOperatorTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorTemplateContext differentiates from other interfaces.
	IsOperatorTemplateContext()
}

type OperatorTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorTemplateContext() *OperatorTemplateContext {
	var p = new(OperatorTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_operatorTemplate
	return p
}

func (*OperatorTemplateContext) IsOperatorTemplateContext() {}

func NewOperatorTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorTemplateContext {
	var p = new(OperatorTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_operatorTemplate

	return p
}

func (s *OperatorTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorTemplateContext) RELATION() antlr.TerminalNode {
	return s.GetToken(ZParserRELATION, 0)
}

func (s *OperatorTemplateContext) Template() ITemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITemplateContext)
}

func (s *OperatorTemplateContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(ZParserFUNCTION, 0)
}

func (s *OperatorTemplateContext) CategoryTemplate() ICategoryTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICategoryTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICategoryTemplateContext)
}

func (s *OperatorTemplateContext) GENERIC() antlr.TerminalNode {
	return s.GetToken(ZParserGENERIC, 0)
}

func (s *OperatorTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OperatorTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterOperatorTemplate(s)
	}
}

func (s *OperatorTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitOperatorTemplate(s)
	}
}




func (p *ZParser) OperatorTemplate() (localctx IOperatorTemplateContext) {
	localctx = NewOperatorTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, ZParserRULE_operatorTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(615)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserRELATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(609)
			p.Match(ZParserRELATION)
		}
		{
			p.SetState(610)
			p.Template()
		}


	case ZParserFUNCTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(611)
			p.Match(ZParserFUNCTION)
		}
		{
			p.SetState(612)
			p.CategoryTemplate()
		}


	case ZParserGENERIC:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(613)
			p.Match(ZParserGENERIC)
		}
		{
			p.SetState(614)
			p.CategoryTemplate()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ICategoryTemplateContext is an interface to support dynamic dispatch.
type ICategoryTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCategoryTemplateContext differentiates from other interfaces.
	IsCategoryTemplateContext()
}

type CategoryTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCategoryTemplateContext() *CategoryTemplateContext {
	var p = new(CategoryTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_categoryTemplate
	return p
}

func (*CategoryTemplateContext) IsCategoryTemplateContext() {}

func NewCategoryTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CategoryTemplateContext {
	var p = new(CategoryTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_categoryTemplate

	return p
}

func (s *CategoryTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *CategoryTemplateContext) PrefixTemplate() IPrefixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixTemplateContext)
}

func (s *CategoryTemplateContext) PostfixTemplate() IPostfixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixTemplateContext)
}

func (s *CategoryTemplateContext) Prec() IPrecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrecContext)
}

func (s *CategoryTemplateContext) Assoc() IAssocContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssocContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssocContext)
}

func (s *CategoryTemplateContext) InfixTemplate() IInfixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixTemplateContext)
}

func (s *CategoryTemplateContext) NofixTemplate() INofixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixTemplateContext)
}

func (s *CategoryTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CategoryTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *CategoryTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterCategoryTemplate(s)
	}
}

func (s *CategoryTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitCategoryTemplate(s)
	}
}




func (p *ZParser) CategoryTemplate() (localctx ICategoryTemplateContext) {
	localctx = NewCategoryTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, ZParserRULE_categoryTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(624)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(617)
			p.PrefixTemplate()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(618)
			p.PostfixTemplate()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(619)
			p.Prec()
		}
		{
			p.SetState(620)
			p.Assoc()
		}
		{
			p.SetState(621)
			p.InfixTemplate()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(623)
			p.NofixTemplate()
		}

	}


	return localctx
}


// IPrecContext is an interface to support dynamic dispatch.
type IPrecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrecContext differentiates from other interfaces.
	IsPrecContext()
}

type PrecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrecContext() *PrecContext {
	var p = new(PrecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prec
	return p
}

func (*PrecContext) IsPrecContext() {}

func NewPrecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrecContext {
	var p = new(PrecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prec

	return p
}

func (s *PrecContext) GetParser() antlr.Parser { return s.parser }

func (s *PrecContext) NUMERAL() antlr.TerminalNode {
	return s.GetToken(ZParserNUMERAL, 0)
}

func (s *PrecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrec(s)
	}
}

func (s *PrecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrec(s)
	}
}




func (p *ZParser) Prec() (localctx IPrecContext) {
	localctx = NewPrecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, ZParserRULE_prec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(626)
		p.Match(ZParserNUMERAL)
	}



	return localctx
}


// IAssocContext is an interface to support dynamic dispatch.
type IAssocContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssocContext differentiates from other interfaces.
	IsAssocContext()
}

type AssocContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssocContext() *AssocContext {
	var p = new(AssocContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_assoc
	return p
}

func (*AssocContext) IsAssocContext() {}

func NewAssocContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssocContext {
	var p = new(AssocContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_assoc

	return p
}

func (s *AssocContext) GetParser() antlr.Parser { return s.parser }

func (s *AssocContext) LEFTASSOC() antlr.TerminalNode {
	return s.GetToken(ZParserLEFTASSOC, 0)
}

func (s *AssocContext) RIGHTASSOC() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHTASSOC, 0)
}

func (s *AssocContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssocContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *AssocContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterAssoc(s)
	}
}

func (s *AssocContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitAssoc(s)
	}
}




func (p *ZParser) Assoc() (localctx IAssocContext) {
	localctx = NewAssocContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, ZParserRULE_assoc)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(628)
	_la = p.GetTokenStream().LA(1)

	if !(_la == ZParserLEFTASSOC || _la == ZParserRIGHTASSOC) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
	    p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}



	return localctx
}


// ITemplateContext is an interface to support dynamic dispatch.
type ITemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTemplateContext differentiates from other interfaces.
	IsTemplateContext()
}

type TemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTemplateContext() *TemplateContext {
	var p = new(TemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_template
	return p
}

func (*TemplateContext) IsTemplateContext() {}

func NewTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TemplateContext {
	var p = new(TemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_template

	return p
}

func (s *TemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *TemplateContext) PrefixTemplate() IPrefixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixTemplateContext)
}

func (s *TemplateContext) PostfixTemplate() IPostfixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixTemplateContext)
}

func (s *TemplateContext) InfixTemplate() IInfixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixTemplateContext)
}

func (s *TemplateContext) NofixTemplate() INofixTemplateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixTemplateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixTemplateContext)
}

func (s *TemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *TemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterTemplate(s)
	}
}

func (s *TemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitTemplate(s)
	}
}




func (p *ZParser) Template() (localctx ITemplateContext) {
	localctx = NewTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, ZParserRULE_template)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(634)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(630)
			p.PrefixTemplate()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(631)
			p.PostfixTemplate()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(632)
			p.InfixTemplate()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(633)
			p.NofixTemplate()
		}

	}


	return localctx
}


// IPrefixTemplateContext is an interface to support dynamic dispatch.
type IPrefixTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixTemplateContext differentiates from other interfaces.
	IsPrefixTemplateContext()
}

type PrefixTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixTemplateContext() *PrefixTemplateContext {
	var p = new(PrefixTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prefixTemplate
	return p
}

func (*PrefixTemplateContext) IsPrefixTemplateContext() {}

func NewPrefixTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixTemplateContext {
	var p = new(PrefixTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prefixTemplate

	return p
}

func (s *PrefixTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixTemplateContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *PrefixTemplateContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *PrefixTemplateContext) PrefixName() IPrefixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixNameContext)
}

func (s *PrefixTemplateContext) POWERSET() antlr.TerminalNode {
	return s.GetToken(ZParserPOWERSET, 0)
}

func (s *PrefixTemplateContext) ARGUMENT() antlr.TerminalNode {
	return s.GetToken(ZParserARGUMENT, 0)
}

func (s *PrefixTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrefixTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixTemplate(s)
	}
}

func (s *PrefixTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixTemplate(s)
	}
}




func (p *ZParser) PrefixTemplate() (localctx IPrefixTemplateContext) {
	localctx = NewPrefixTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, ZParserRULE_prefixTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.Match(ZParserLEFT_PARENTHESIS)
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserPREP, ZParserPRE, ZParserLP, ZParserL:
		{
			p.SetState(637)
			p.PrefixName()
		}


	case ZParserPOWERSET:
		{
			p.SetState(638)
			p.Match(ZParserPOWERSET)
		}
		{
			p.SetState(639)
			p.Match(ZParserARGUMENT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(642)
		p.Match(ZParserRIGHT_PARENTHESIS)
	}



	return localctx
}


// IPostfixTemplateContext is an interface to support dynamic dispatch.
type IPostfixTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixTemplateContext differentiates from other interfaces.
	IsPostfixTemplateContext()
}

type PostfixTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixTemplateContext() *PostfixTemplateContext {
	var p = new(PostfixTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_postfixTemplate
	return p
}

func (*PostfixTemplateContext) IsPostfixTemplateContext() {}

func NewPostfixTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixTemplateContext {
	var p = new(PostfixTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_postfixTemplate

	return p
}

func (s *PostfixTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixTemplateContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *PostfixTemplateContext) PostfixName() IPostfixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixNameContext)
}

func (s *PostfixTemplateContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *PostfixTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixTemplate(s)
	}
}

func (s *PostfixTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixTemplate(s)
	}
}




func (p *ZParser) PostfixTemplate() (localctx IPostfixTemplateContext) {
	localctx = NewPostfixTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, ZParserRULE_postfixTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Match(ZParserLEFT_PARENTHESIS)
	}
	{
		p.SetState(645)
		p.PostfixName()
	}
	{
		p.SetState(646)
		p.Match(ZParserRIGHT_PARENTHESIS)
	}



	return localctx
}


// IInfixTemplateContext is an interface to support dynamic dispatch.
type IInfixTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixTemplateContext differentiates from other interfaces.
	IsInfixTemplateContext()
}

type InfixTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixTemplateContext() *InfixTemplateContext {
	var p = new(InfixTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_infixTemplate
	return p
}

func (*InfixTemplateContext) IsInfixTemplateContext() {}

func NewInfixTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixTemplateContext {
	var p = new(InfixTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_infixTemplate

	return p
}

func (s *InfixTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixTemplateContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *InfixTemplateContext) InfixName() IInfixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixNameContext)
}

func (s *InfixTemplateContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *InfixTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InfixTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixTemplate(s)
	}
}

func (s *InfixTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixTemplate(s)
	}
}




func (p *ZParser) InfixTemplate() (localctx IInfixTemplateContext) {
	localctx = NewInfixTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, ZParserRULE_infixTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Match(ZParserLEFT_PARENTHESIS)
	}
	{
		p.SetState(649)
		p.InfixName()
	}
	{
		p.SetState(650)
		p.Match(ZParserRIGHT_PARENTHESIS)
	}



	return localctx
}


// INofixTemplateContext is an interface to support dynamic dispatch.
type INofixTemplateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNofixTemplateContext differentiates from other interfaces.
	IsNofixTemplateContext()
}

type NofixTemplateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNofixTemplateContext() *NofixTemplateContext {
	var p = new(NofixTemplateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_nofixTemplate
	return p
}

func (*NofixTemplateContext) IsNofixTemplateContext() {}

func NewNofixTemplateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NofixTemplateContext {
	var p = new(NofixTemplateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_nofixTemplate

	return p
}

func (s *NofixTemplateContext) GetParser() antlr.Parser { return s.parser }

func (s *NofixTemplateContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *NofixTemplateContext) NofixName() INofixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixNameContext)
}

func (s *NofixTemplateContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *NofixTemplateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixTemplateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NofixTemplateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixTemplate(s)
	}
}

func (s *NofixTemplateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixTemplate(s)
	}
}




func (p *ZParser) NofixTemplate() (localctx INofixTemplateContext) {
	localctx = NewNofixTemplateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, ZParserRULE_nofixTemplate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(652)
		p.Match(ZParserLEFT_PARENTHESIS)
	}
	{
		p.SetState(653)
		p.NofixName()
	}
	{
		p.SetState(654)
		p.Match(ZParserRIGHT_PARENTHESIS)
	}



	return localctx
}


// IDeclNameContext is an interface to support dynamic dispatch.
type IDeclNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclNameContext differentiates from other interfaces.
	IsDeclNameContext()
}

type DeclNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclNameContext() *DeclNameContext {
	var p = new(DeclNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_declName
	return p
}

func (*DeclNameContext) IsDeclNameContext() {}

func NewDeclNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclNameContext {
	var p = new(DeclNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_declName

	return p
}

func (s *DeclNameContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *DeclNameContext) OpName() IOpNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpNameContext)
}

func (s *DeclNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *DeclNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterDeclName(s)
	}
}

func (s *DeclNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitDeclName(s)
	}
}




func (p *ZParser) DeclName() (localctx IDeclNameContext) {
	localctx = NewDeclNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, ZParserRULE_declName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(658)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(656)
			p.Match(ZParserNAME)
		}


	case ZParserARGUMENT, ZParserPREP, ZParserPRE, ZParserLP, ZParserL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(657)
			p.OpName()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IRefNameContext is an interface to support dynamic dispatch.
type IRefNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRefNameContext differentiates from other interfaces.
	IsRefNameContext()
}

type RefNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRefNameContext() *RefNameContext {
	var p = new(RefNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_refName
	return p
}

func (*RefNameContext) IsRefNameContext() {}

func NewRefNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RefNameContext {
	var p = new(RefNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_refName

	return p
}

func (s *RefNameContext) GetParser() antlr.Parser { return s.parser }

func (s *RefNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(ZParserNAME, 0)
}

func (s *RefNameContext) LEFT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserLEFT_PARENTHESIS, 0)
}

func (s *RefNameContext) OpName() IOpNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpNameContext)
}

func (s *RefNameContext) RIGHT_PARENTHESIS() antlr.TerminalNode {
	return s.GetToken(ZParserRIGHT_PARENTHESIS, 0)
}

func (s *RefNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RefNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RefNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterRefName(s)
	}
}

func (s *RefNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitRefName(s)
	}
}




func (p *ZParser) RefName() (localctx IRefNameContext) {
	localctx = NewRefNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, ZParserRULE_refName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(665)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(660)
			p.Match(ZParserNAME)
		}


	case ZParserLEFT_PARENTHESIS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(661)
			p.Match(ZParserLEFT_PARENTHESIS)
		}
		{
			p.SetState(662)
			p.OpName()
		}
		{
			p.SetState(663)
			p.Match(ZParserRIGHT_PARENTHESIS)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IOpNameContext is an interface to support dynamic dispatch.
type IOpNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpNameContext differentiates from other interfaces.
	IsOpNameContext()
}

type OpNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpNameContext() *OpNameContext {
	var p = new(OpNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_opName
	return p
}

func (*OpNameContext) IsOpNameContext() {}

func NewOpNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpNameContext {
	var p = new(OpNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_opName

	return p
}

func (s *OpNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OpNameContext) PrefixName() IPrefixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixNameContext)
}

func (s *OpNameContext) PostfixName() IPostfixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixNameContext)
}

func (s *OpNameContext) InfixName() IInfixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixNameContext)
}

func (s *OpNameContext) NofixName() INofixNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixNameContext)
}

func (s *OpNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *OpNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterOpName(s)
	}
}

func (s *OpNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitOpName(s)
	}
}




func (p *ZParser) OpName() (localctx IOpNameContext) {
	localctx = NewOpNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, ZParserRULE_opName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(671)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(667)
			p.PrefixName()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(668)
			p.PostfixName()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(669)
			p.InfixName()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(670)
			p.NofixName()
		}

	}


	return localctx
}


// IPrefixNameContext is an interface to support dynamic dispatch.
type IPrefixNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixNameContext differentiates from other interfaces.
	IsPrefixNameContext()
}

type PrefixNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixNameContext() *PrefixNameContext {
	var p = new(PrefixNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prefixName
	return p
}

func (*PrefixNameContext) IsPrefixNameContext() {}

func NewPrefixNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixNameContext {
	var p = new(PrefixNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prefixName

	return p
}

func (s *PrefixNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixNameContext) PRE() antlr.TerminalNode {
	return s.GetToken(ZParserPRE, 0)
}

func (s *PrefixNameContext) AllARGUMENT() []antlr.TerminalNode {
	return s.GetTokens(ZParserARGUMENT)
}

func (s *PrefixNameContext) ARGUMENT(i int) antlr.TerminalNode {
	return s.GetToken(ZParserARGUMENT, i)
}

func (s *PrefixNameContext) PREP() antlr.TerminalNode {
	return s.GetToken(ZParserPREP, 0)
}

func (s *PrefixNameContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *PrefixNameContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *PrefixNameContext) AllLIST() []antlr.TerminalNode {
	return s.GetTokens(ZParserLIST)
}

func (s *PrefixNameContext) LIST(i int) antlr.TerminalNode {
	return s.GetToken(ZParserLIST, i)
}

func (s *PrefixNameContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *PrefixNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *PrefixNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *PrefixNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *PrefixNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *PrefixNameContext) LP() antlr.TerminalNode {
	return s.GetToken(ZParserLP, 0)
}

func (s *PrefixNameContext) EREP() antlr.TerminalNode {
	return s.GetToken(ZParserEREP, 0)
}

func (s *PrefixNameContext) SREP() antlr.TerminalNode {
	return s.GetToken(ZParserSREP, 0)
}

func (s *PrefixNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrefixNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixName(s)
	}
}

func (s *PrefixNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixName(s)
	}
}




func (p *ZParser) PrefixName() (localctx IPrefixNameContext) {
	localctx = NewPrefixNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, ZParserRULE_prefixName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(711)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserPRE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(673)
			p.Match(ZParserPRE)
		}
		{
			p.SetState(674)
			p.Match(ZParserARGUMENT)
		}


	case ZParserPREP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(675)
			p.Match(ZParserPREP)
		}
		{
			p.SetState(676)
			p.Match(ZParserARGUMENT)
		}


	case ZParserL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(677)
			p.Match(ZParserL)
		}
		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(682)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(678)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(679)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(680)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(681)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(686)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
		}
		p.SetState(691)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(687)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(688)
				p.Match(ZParserERE)
			}


		case ZParserLIST:
			{
				p.SetState(689)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(690)
				p.Match(ZParserSRE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(693)
			p.Match(ZParserARGUMENT)
		}


	case ZParserLP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(694)
			p.Match(ZParserLP)
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(699)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(695)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(696)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(697)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(698)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(703)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 66, p.GetParserRuleContext())
		}
		p.SetState(708)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(704)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(705)
				p.Match(ZParserEREP)
			}


		case ZParserLIST:
			{
				p.SetState(706)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(707)
				p.Match(ZParserSREP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(710)
			p.Match(ZParserARGUMENT)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPostfixNameContext is an interface to support dynamic dispatch.
type IPostfixNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixNameContext differentiates from other interfaces.
	IsPostfixNameContext()
}

type PostfixNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixNameContext() *PostfixNameContext {
	var p = new(PostfixNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_postfixName
	return p
}

func (*PostfixNameContext) IsPostfixNameContext() {}

func NewPostfixNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixNameContext {
	var p = new(PostfixNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_postfixName

	return p
}

func (s *PostfixNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixNameContext) AllARGUMENT() []antlr.TerminalNode {
	return s.GetTokens(ZParserARGUMENT)
}

func (s *PostfixNameContext) ARGUMENT(i int) antlr.TerminalNode {
	return s.GetToken(ZParserARGUMENT, i)
}

func (s *PostfixNameContext) POST() antlr.TerminalNode {
	return s.GetToken(ZParserPOST, 0)
}

func (s *PostfixNameContext) POSTP() antlr.TerminalNode {
	return s.GetToken(ZParserPOSTP, 0)
}

func (s *PostfixNameContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *PostfixNameContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *PostfixNameContext) AllLIST() []antlr.TerminalNode {
	return s.GetTokens(ZParserLIST)
}

func (s *PostfixNameContext) LIST(i int) antlr.TerminalNode {
	return s.GetToken(ZParserLIST, i)
}

func (s *PostfixNameContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *PostfixNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *PostfixNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *PostfixNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *PostfixNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *PostfixNameContext) ELP() antlr.TerminalNode {
	return s.GetToken(ZParserELP, 0)
}

func (s *PostfixNameContext) ERP() antlr.TerminalNode {
	return s.GetToken(ZParserERP, 0)
}

func (s *PostfixNameContext) SRP() antlr.TerminalNode {
	return s.GetToken(ZParserSRP, 0)
}

func (s *PostfixNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixName(s)
	}
}

func (s *PostfixNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixName(s)
	}
}




func (p *ZParser) PostfixName() (localctx IPostfixNameContext) {
	localctx = NewPostfixNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, ZParserRULE_postfixName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(713)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(714)
			p.Match(ZParserPOST)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(715)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(716)
			p.Match(ZParserPOSTP)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(717)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(718)
			p.Match(ZParserEL)
		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(723)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(719)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(720)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(721)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(722)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(727)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
		}
		p.SetState(732)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(728)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(729)
				p.Match(ZParserER)
			}


		case ZParserLIST:
			{
				p.SetState(730)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(731)
				p.Match(ZParserSR)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(734)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(735)
			p.Match(ZParserELP)
		}
		p.SetState(742)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(740)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(736)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(737)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(738)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(739)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(744)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(745)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(746)
				p.Match(ZParserERP)
			}


		case ZParserLIST:
			{
				p.SetState(747)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(748)
				p.Match(ZParserSRP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}


	return localctx
}


// IInfixNameContext is an interface to support dynamic dispatch.
type IInfixNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixNameContext differentiates from other interfaces.
	IsInfixNameContext()
}

type InfixNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixNameContext() *InfixNameContext {
	var p = new(InfixNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_infixName
	return p
}

func (*InfixNameContext) IsInfixNameContext() {}

func NewInfixNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixNameContext {
	var p = new(InfixNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_infixName

	return p
}

func (s *InfixNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixNameContext) AllARGUMENT() []antlr.TerminalNode {
	return s.GetTokens(ZParserARGUMENT)
}

func (s *InfixNameContext) ARGUMENT(i int) antlr.TerminalNode {
	return s.GetToken(ZParserARGUMENT, i)
}

func (s *InfixNameContext) I() antlr.TerminalNode {
	return s.GetToken(ZParserI, 0)
}

func (s *InfixNameContext) IP() antlr.TerminalNode {
	return s.GetToken(ZParserIP, 0)
}

func (s *InfixNameContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *InfixNameContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *InfixNameContext) AllLIST() []antlr.TerminalNode {
	return s.GetTokens(ZParserLIST)
}

func (s *InfixNameContext) LIST(i int) antlr.TerminalNode {
	return s.GetToken(ZParserLIST, i)
}

func (s *InfixNameContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *InfixNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *InfixNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *InfixNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *InfixNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *InfixNameContext) ELP() antlr.TerminalNode {
	return s.GetToken(ZParserELP, 0)
}

func (s *InfixNameContext) EREP() antlr.TerminalNode {
	return s.GetToken(ZParserEREP, 0)
}

func (s *InfixNameContext) SREP() antlr.TerminalNode {
	return s.GetToken(ZParserSREP, 0)
}

func (s *InfixNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InfixNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixName(s)
	}
}

func (s *InfixNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixName(s)
	}
}




func (p *ZParser) InfixName() (localctx IInfixNameContext) {
	localctx = NewInfixNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, ZParserRULE_infixName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(795)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(753)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(754)
			p.Match(ZParserI)
		}
		{
			p.SetState(755)
			p.Match(ZParserARGUMENT)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(756)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(757)
			p.Match(ZParserIP)
		}
		{
			p.SetState(758)
			p.Match(ZParserARGUMENT)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(759)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(760)
			p.Match(ZParserEL)
		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(765)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(761)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(762)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(763)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(764)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(769)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext())
		}
		p.SetState(774)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(770)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(771)
				p.Match(ZParserERE)
			}


		case ZParserLIST:
			{
				p.SetState(772)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(773)
				p.Match(ZParserSRE)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(776)
			p.Match(ZParserARGUMENT)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(777)
			p.Match(ZParserARGUMENT)
		}
		{
			p.SetState(778)
			p.Match(ZParserELP)
		}
		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(783)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(779)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(780)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(781)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(782)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(787)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext())
		}
		p.SetState(792)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(788)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(789)
				p.Match(ZParserEREP)
			}


		case ZParserLIST:
			{
				p.SetState(790)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(791)
				p.Match(ZParserSREP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(794)
			p.Match(ZParserARGUMENT)
		}

	}


	return localctx
}


// INofixNameContext is an interface to support dynamic dispatch.
type INofixNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNofixNameContext differentiates from other interfaces.
	IsNofixNameContext()
}

type NofixNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNofixNameContext() *NofixNameContext {
	var p = new(NofixNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_nofixName
	return p
}

func (*NofixNameContext) IsNofixNameContext() {}

func NewNofixNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NofixNameContext {
	var p = new(NofixNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_nofixName

	return p
}

func (s *NofixNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NofixNameContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *NofixNameContext) AllARGUMENT() []antlr.TerminalNode {
	return s.GetTokens(ZParserARGUMENT)
}

func (s *NofixNameContext) ARGUMENT(i int) antlr.TerminalNode {
	return s.GetToken(ZParserARGUMENT, i)
}

func (s *NofixNameContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *NofixNameContext) AllLIST() []antlr.TerminalNode {
	return s.GetTokens(ZParserLIST)
}

func (s *NofixNameContext) LIST(i int) antlr.TerminalNode {
	return s.GetToken(ZParserLIST, i)
}

func (s *NofixNameContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *NofixNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *NofixNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *NofixNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *NofixNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *NofixNameContext) LP() antlr.TerminalNode {
	return s.GetToken(ZParserLP, 0)
}

func (s *NofixNameContext) ERP() antlr.TerminalNode {
	return s.GetToken(ZParserERP, 0)
}

func (s *NofixNameContext) SRP() antlr.TerminalNode {
	return s.GetToken(ZParserSRP, 0)
}

func (s *NofixNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NofixNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixName(s)
	}
}

func (s *NofixNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixName(s)
	}
}




func (p *ZParser) NofixName() (localctx INofixNameContext) {
	localctx = NewNofixNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, ZParserRULE_nofixName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(829)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(797)
			p.Match(ZParserL)
		}
		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(802)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(798)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(799)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(800)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(801)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(806)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
		}
		p.SetState(811)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(807)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(808)
				p.Match(ZParserER)
			}


		case ZParserLIST:
			{
				p.SetState(809)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(810)
				p.Match(ZParserSR)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}


	case ZParserLP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(813)
			p.Match(ZParserLP)
		}
		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(818)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case ZParserARGUMENT:
					{
						p.SetState(814)
						p.Match(ZParserARGUMENT)
					}
					{
						p.SetState(815)
						p.Match(ZParserES)
					}


				case ZParserLIST:
					{
						p.SetState(816)
						p.Match(ZParserLIST)
					}
					{
						p.SetState(817)
						p.Match(ZParserSS)
					}



				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			p.SetState(822)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
		}
		p.SetState(827)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case ZParserARGUMENT:
			{
				p.SetState(823)
				p.Match(ZParserARGUMENT)
			}
			{
				p.SetState(824)
				p.Match(ZParserERP)
			}


		case ZParserLIST:
			{
				p.SetState(825)
				p.Match(ZParserLIST)
			}
			{
				p.SetState(826)
				p.Match(ZParserSRP)
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IGenNameContext is an interface to support dynamic dispatch.
type IGenNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenNameContext differentiates from other interfaces.
	IsGenNameContext()
}

type GenNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenNameContext() *GenNameContext {
	var p = new(GenNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_genName
	return p
}

func (*GenNameContext) IsGenNameContext() {}

func NewGenNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenNameContext {
	var p = new(GenNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_genName

	return p
}

func (s *GenNameContext) GetParser() antlr.Parser { return s.parser }

func (s *GenNameContext) PrefixGenName() IPrefixGenNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixGenNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixGenNameContext)
}

func (s *GenNameContext) PostfixGenName() IPostfixGenNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixGenNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixGenNameContext)
}

func (s *GenNameContext) InfixGenName() IInfixGenNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixGenNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixGenNameContext)
}

func (s *GenNameContext) NofixGenName() INofixGenNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixGenNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixGenNameContext)
}

func (s *GenNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *GenNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterGenName(s)
	}
}

func (s *GenNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitGenName(s)
	}
}




func (p *ZParser) GenName() (localctx IGenNameContext) {
	localctx = NewGenNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, ZParserRULE_genName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(831)
			p.PrefixGenName()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(832)
			p.PostfixGenName()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(833)
			p.InfixGenName()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(834)
			p.NofixGenName()
		}

	}


	return localctx
}


// IPrefixGenNameContext is an interface to support dynamic dispatch.
type IPrefixGenNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixGenNameContext differentiates from other interfaces.
	IsPrefixGenNameContext()
}

type PrefixGenNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixGenNameContext() *PrefixGenNameContext {
	var p = new(PrefixGenNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prefixGenName
	return p
}

func (*PrefixGenNameContext) IsPrefixGenNameContext() {}

func NewPrefixGenNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixGenNameContext {
	var p = new(PrefixGenNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prefixGenName

	return p
}

func (s *PrefixGenNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixGenNameContext) PRE() antlr.TerminalNode {
	return s.GetToken(ZParserPRE, 0)
}

func (s *PrefixGenNameContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(ZParserNAME)
}

func (s *PrefixGenNameContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNAME, i)
}

func (s *PrefixGenNameContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *PrefixGenNameContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *PrefixGenNameContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *PrefixGenNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *PrefixGenNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *PrefixGenNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *PrefixGenNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *PrefixGenNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixGenNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrefixGenNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixGenName(s)
	}
}

func (s *PrefixGenNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixGenName(s)
	}
}




func (p *ZParser) PrefixGenName() (localctx IPrefixGenNameContext) {
	localctx = NewPrefixGenNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, ZParserRULE_prefixGenName)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(850)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserPRE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(837)
			p.Match(ZParserPRE)
		}
		{
			p.SetState(838)
			p.Match(ZParserNAME)
		}


	case ZParserL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(839)
			p.Match(ZParserL)
		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(840)
					p.Match(ZParserNAME)
				}
				p.SetState(841)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZParserES || _la == ZParserSS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
				    p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}


			}
			p.SetState(846)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext())
		}
		{
			p.SetState(847)
			p.Match(ZParserNAME)
		}
		p.SetState(848)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ZParserERE || _la == ZParserSRE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
		    p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(849)
			p.Match(ZParserNAME)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPostfixGenNameContext is an interface to support dynamic dispatch.
type IPostfixGenNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixGenNameContext differentiates from other interfaces.
	IsPostfixGenNameContext()
}

type PostfixGenNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixGenNameContext() *PostfixGenNameContext {
	var p = new(PostfixGenNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_postfixGenName
	return p
}

func (*PostfixGenNameContext) IsPostfixGenNameContext() {}

func NewPostfixGenNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixGenNameContext {
	var p = new(PostfixGenNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_postfixGenName

	return p
}

func (s *PostfixGenNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixGenNameContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(ZParserNAME)
}

func (s *PostfixGenNameContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNAME, i)
}

func (s *PostfixGenNameContext) POST() antlr.TerminalNode {
	return s.GetToken(ZParserPOST, 0)
}

func (s *PostfixGenNameContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *PostfixGenNameContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *PostfixGenNameContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *PostfixGenNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *PostfixGenNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *PostfixGenNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *PostfixGenNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *PostfixGenNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixGenNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixGenNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixGenName(s)
	}
}

func (s *PostfixGenNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixGenName(s)
	}
}




func (p *ZParser) PostfixGenName() (localctx IPostfixGenNameContext) {
	localctx = NewPostfixGenNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, ZParserRULE_postfixGenName)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(852)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(853)
			p.Match(ZParserPOST)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(854)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(855)
			p.Match(ZParserEL)
		}
		p.SetState(860)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(856)
					p.Match(ZParserNAME)
				}
				p.SetState(857)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZParserES || _la == ZParserSS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
				    p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}


			}
			p.SetState(862)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
		}
		{
			p.SetState(863)
			p.Match(ZParserNAME)
		}
		p.SetState(864)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ZParserER || _la == ZParserSR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
		    p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}


	return localctx
}


// IInfixGenNameContext is an interface to support dynamic dispatch.
type IInfixGenNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixGenNameContext differentiates from other interfaces.
	IsInfixGenNameContext()
}

type InfixGenNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixGenNameContext() *InfixGenNameContext {
	var p = new(InfixGenNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_infixGenName
	return p
}

func (*InfixGenNameContext) IsInfixGenNameContext() {}

func NewInfixGenNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixGenNameContext {
	var p = new(InfixGenNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_infixGenName

	return p
}

func (s *InfixGenNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixGenNameContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(ZParserNAME)
}

func (s *InfixGenNameContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNAME, i)
}

func (s *InfixGenNameContext) I() antlr.TerminalNode {
	return s.GetToken(ZParserI, 0)
}

func (s *InfixGenNameContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *InfixGenNameContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *InfixGenNameContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *InfixGenNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *InfixGenNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *InfixGenNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *InfixGenNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *InfixGenNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixGenNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InfixGenNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixGenName(s)
	}
}

func (s *InfixGenNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixGenName(s)
	}
}




func (p *ZParser) InfixGenName() (localctx IInfixGenNameContext) {
	localctx = NewInfixGenNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, ZParserRULE_infixGenName)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(867)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(868)
			p.Match(ZParserI)
		}
		{
			p.SetState(869)
			p.Match(ZParserNAME)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(870)
			p.Match(ZParserNAME)
		}
		{
			p.SetState(871)
			p.Match(ZParserEL)
		}
		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(872)
					p.Match(ZParserNAME)
				}
				p.SetState(873)
				_la = p.GetTokenStream().LA(1)

				if !(_la == ZParserES || _la == ZParserSS) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
				    p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}


			}
			p.SetState(878)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())
		}
		{
			p.SetState(879)
			p.Match(ZParserNAME)
		}
		p.SetState(880)
		_la = p.GetTokenStream().LA(1)

		if !(_la == ZParserERE || _la == ZParserSRE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
		    p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(881)
			p.Match(ZParserNAME)
		}

	}


	return localctx
}


// INofixGenNameContext is an interface to support dynamic dispatch.
type INofixGenNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNofixGenNameContext differentiates from other interfaces.
	IsNofixGenNameContext()
}

type NofixGenNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNofixGenNameContext() *NofixGenNameContext {
	var p = new(NofixGenNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_nofixGenName
	return p
}

func (*NofixGenNameContext) IsNofixGenNameContext() {}

func NewNofixGenNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NofixGenNameContext {
	var p = new(NofixGenNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_nofixGenName

	return p
}

func (s *NofixGenNameContext) GetParser() antlr.Parser { return s.parser }

func (s *NofixGenNameContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *NofixGenNameContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(ZParserNAME)
}

func (s *NofixGenNameContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(ZParserNAME, i)
}

func (s *NofixGenNameContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *NofixGenNameContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *NofixGenNameContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *NofixGenNameContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *NofixGenNameContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *NofixGenNameContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *NofixGenNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixGenNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NofixGenNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixGenName(s)
	}
}

func (s *NofixGenNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixGenName(s)
	}
}




func (p *ZParser) NofixGenName() (localctx INofixGenNameContext) {
	localctx = NewNofixGenNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, ZParserRULE_nofixGenName)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(884)
		p.Match(ZParserL)
	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(885)
				p.Match(ZParserNAME)
			}
			p.SetState(886)
			_la = p.GetTokenStream().LA(1)

			if !(_la == ZParserES || _la == ZParserSS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
			    p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}


		}
		p.SetState(891)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext())
	}
	{
		p.SetState(892)
		p.Match(ZParserNAME)
	}
	p.SetState(893)
	_la = p.GetTokenStream().LA(1)

	if !(_la == ZParserER || _la == ZParserSR) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
	    p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}



	return localctx
}


// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) PrefixRel() IPrefixRelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixRelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixRelContext)
}

func (s *RelationContext) PostfixRel() IPostfixRelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixRelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixRelContext)
}

func (s *RelationContext) InfixRel() IInfixRelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixRelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixRelContext)
}

func (s *RelationContext) NofixRel() INofixRelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixRelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixRelContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *RelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterRelation(s)
	}
}

func (s *RelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitRelation(s)
	}
}




func (p *ZParser) Relation() (localctx IRelationContext) {
	localctx = NewRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, ZParserRULE_relation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(899)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(895)
			p.PrefixRel()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(896)
			p.PostfixRel()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(897)
			p.InfixRel()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(898)
			p.NofixRel()
		}

	}


	return localctx
}


// IPrefixRelContext is an interface to support dynamic dispatch.
type IPrefixRelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixRelContext differentiates from other interfaces.
	IsPrefixRelContext()
}

type PrefixRelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixRelContext() *PrefixRelContext {
	var p = new(PrefixRelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prefixRel
	return p
}

func (*PrefixRelContext) IsPrefixRelContext() {}

func NewPrefixRelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixRelContext {
	var p = new(PrefixRelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prefixRel

	return p
}

func (s *PrefixRelContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixRelContext) PREP() antlr.TerminalNode {
	return s.GetToken(ZParserPREP, 0)
}

func (s *PrefixRelContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PrefixRelContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrefixRelContext) LP() antlr.TerminalNode {
	return s.GetToken(ZParserLP, 0)
}

func (s *PrefixRelContext) EREP() antlr.TerminalNode {
	return s.GetToken(ZParserEREP, 0)
}

func (s *PrefixRelContext) SREP() antlr.TerminalNode {
	return s.GetToken(ZParserSREP, 0)
}

func (s *PrefixRelContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *PrefixRelContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PrefixRelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixRelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrefixRelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixRel(s)
	}
}

func (s *PrefixRelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixRel(s)
	}
}




func (p *ZParser) PrefixRel() (localctx IPrefixRelContext) {
	localctx = NewPrefixRelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, ZParserRULE_prefixRel)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(917)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserPREP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(901)
			p.Match(ZParserPREP)
		}
		{
			p.SetState(902)
			p.expression(0)
		}


	case ZParserLP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(903)
			p.Match(ZParserLP)
		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(904)
				p.ExpSep()
			}


		}
		p.SetState(914)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(907)
				p.expression(0)
			}
			{
				p.SetState(908)
				p.Match(ZParserEREP)
			}


		case 2:
			p.SetState(911)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(910)
					p.ExpressionList()
				}

			}
			{
				p.SetState(913)
				p.Match(ZParserSREP)
			}

		}
		{
			p.SetState(916)
			p.expression(0)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPostfixRelContext is an interface to support dynamic dispatch.
type IPostfixRelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixRelContext differentiates from other interfaces.
	IsPostfixRelContext()
}

type PostfixRelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixRelContext() *PostfixRelContext {
	var p = new(PostfixRelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_postfixRel
	return p
}

func (*PostfixRelContext) IsPostfixRelContext() {}

func NewPostfixRelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixRelContext {
	var p = new(PostfixRelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_postfixRel

	return p
}

func (s *PostfixRelContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixRelContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PostfixRelContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixRelContext) POSTP() antlr.TerminalNode {
	return s.GetToken(ZParserPOSTP, 0)
}

func (s *PostfixRelContext) ELP() antlr.TerminalNode {
	return s.GetToken(ZParserELP, 0)
}

func (s *PostfixRelContext) ERP() antlr.TerminalNode {
	return s.GetToken(ZParserERP, 0)
}

func (s *PostfixRelContext) SRP() antlr.TerminalNode {
	return s.GetToken(ZParserSRP, 0)
}

func (s *PostfixRelContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *PostfixRelContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PostfixRelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixRelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixRelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixRel(s)
	}
}

func (s *PostfixRelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixRel(s)
	}
}




func (p *ZParser) PostfixRel() (localctx IPostfixRelContext) {
	localctx = NewPostfixRelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, ZParserRULE_postfixRel)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(936)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(919)
			p.expression(0)
		}
		{
			p.SetState(920)
			p.Match(ZParserPOSTP)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(922)
			p.expression(0)
		}
		{
			p.SetState(923)
			p.Match(ZParserELP)
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(924)
				p.ExpSep()
			}


		}
		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(927)
				p.expression(0)
			}
			{
				p.SetState(928)
				p.Match(ZParserERP)
			}


		case 2:
			p.SetState(931)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(930)
					p.ExpressionList()
				}

			}
			{
				p.SetState(933)
				p.Match(ZParserSRP)
			}

		}

	}


	return localctx
}


// IInfixRelContext is an interface to support dynamic dispatch.
type IInfixRelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixRelContext differentiates from other interfaces.
	IsInfixRelContext()
}

type InfixRelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixRelContext() *InfixRelContext {
	var p = new(InfixRelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_infixRel
	return p
}

func (*InfixRelContext) IsInfixRelContext() {}

func NewInfixRelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixRelContext {
	var p = new(InfixRelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_infixRel

	return p
}

func (s *InfixRelContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixRelContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InfixRelContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InfixRelContext) AllELEMENT_OF() []antlr.TerminalNode {
	return s.GetTokens(ZParserELEMENT_OF)
}

func (s *InfixRelContext) ELEMENT_OF(i int) antlr.TerminalNode {
	return s.GetToken(ZParserELEMENT_OF, i)
}

func (s *InfixRelContext) AllEQUALS_SIGN() []antlr.TerminalNode {
	return s.GetTokens(ZParserEQUALS_SIGN)
}

func (s *InfixRelContext) EQUALS_SIGN(i int) antlr.TerminalNode {
	return s.GetToken(ZParserEQUALS_SIGN, i)
}

func (s *InfixRelContext) AllIP() []antlr.TerminalNode {
	return s.GetTokens(ZParserIP)
}

func (s *InfixRelContext) IP(i int) antlr.TerminalNode {
	return s.GetToken(ZParserIP, i)
}

func (s *InfixRelContext) ELP() antlr.TerminalNode {
	return s.GetToken(ZParserELP, 0)
}

func (s *InfixRelContext) EREP() antlr.TerminalNode {
	return s.GetToken(ZParserEREP, 0)
}

func (s *InfixRelContext) SREP() antlr.TerminalNode {
	return s.GetToken(ZParserSREP, 0)
}

func (s *InfixRelContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *InfixRelContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InfixRelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixRelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InfixRelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixRel(s)
	}
}

func (s *InfixRelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixRel(s)
	}
}




func (p *ZParser) InfixRel() (localctx IInfixRelContext) {
	localctx = NewInfixRelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, ZParserRULE_infixRel)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(986)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(938)
			p.expression(0)
		}
		p.SetState(939)

		if !(ZSupport.isLeftAssociative(_input)) {
			panic(antlr.NewFailedPredicateException(p, "ZSupport.isLeftAssociative(_input)", ""))
		}
		p.SetState(942)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					p.SetState(940)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ZParserEQUALS_SIGN || _la == ZParserELEMENT_OF || _la == ZParserIP) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
					    p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					{
						p.SetState(941)
						p.expression(0)
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(944)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(946)
			p.expression(0)
		}
		p.SetState(949)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
					p.SetState(947)
					_la = p.GetTokenStream().LA(1)

					if !(_la == ZParserEQUALS_SIGN || _la == ZParserELEMENT_OF || _la == ZParserIP) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
					    p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					{
						p.SetState(948)
						p.expression(0)
					}




			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(951)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext())
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(953)
			p.expression(0)
		}
		p.SetState(954)

		if !(ZSupport.isLeftAssociative(_input)) {
			panic(antlr.NewFailedPredicateException(p, "ZSupport.isLeftAssociative(_input)", ""))
		}
		{
			p.SetState(955)
			p.Match(ZParserELP)
		}
		p.SetState(957)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(956)
				p.ExpSep()
			}


		}
		p.SetState(966)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(959)
				p.expression(0)
			}
			{
				p.SetState(960)
				p.Match(ZParserEREP)
			}


		case 2:
			p.SetState(963)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(962)
					p.ExpressionList()
				}

			}
			{
				p.SetState(965)
				p.Match(ZParserSREP)
			}

		}
		{
			p.SetState(968)
			p.expression(0)
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(970)
			p.expression(0)
		}
		{
			p.SetState(971)
			p.Match(ZParserELP)
		}
		p.SetState(973)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(972)
				p.ExpSep()
			}


		}
		p.SetState(982)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(975)
				p.expression(0)
			}
			{
				p.SetState(976)
				p.Match(ZParserEREP)
			}


		case 2:
			p.SetState(979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(978)
					p.ExpressionList()
				}

			}
			{
				p.SetState(981)
				p.Match(ZParserSREP)
			}

		}
		{
			p.SetState(984)
			p.expression(0)
		}

	}


	return localctx
}


// INofixRelContext is an interface to support dynamic dispatch.
type INofixRelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNofixRelContext differentiates from other interfaces.
	IsNofixRelContext()
}

type NofixRelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNofixRelContext() *NofixRelContext {
	var p = new(NofixRelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_nofixRel
	return p
}

func (*NofixRelContext) IsNofixRelContext() {}

func NewNofixRelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NofixRelContext {
	var p = new(NofixRelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_nofixRel

	return p
}

func (s *NofixRelContext) GetParser() antlr.Parser { return s.parser }

func (s *NofixRelContext) LP() antlr.TerminalNode {
	return s.GetToken(ZParserLP, 0)
}

func (s *NofixRelContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NofixRelContext) ERP() antlr.TerminalNode {
	return s.GetToken(ZParserERP, 0)
}

func (s *NofixRelContext) SRP() antlr.TerminalNode {
	return s.GetToken(ZParserSRP, 0)
}

func (s *NofixRelContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *NofixRelContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NofixRelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixRelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NofixRelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixRel(s)
	}
}

func (s *NofixRelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixRel(s)
	}
}




func (p *ZParser) NofixRel() (localctx INofixRelContext) {
	localctx = NewNofixRelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, ZParserRULE_nofixRel)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(988)
		p.Match(ZParserLP)
	}
	p.SetState(990)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 116, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(989)
			p.ExpSep()
		}


	}
	p.SetState(999)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(992)
			p.expression(0)
		}
		{
			p.SetState(993)
			p.Match(ZParserERP)
		}


	case 2:
		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
			{
				p.SetState(995)
				p.ExpressionList()
			}

		}
		{
			p.SetState(998)
			p.Match(ZParserSRP)
		}

	}



	return localctx
}


// IApplicationContext is an interface to support dynamic dispatch.
type IApplicationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsApplicationContext differentiates from other interfaces.
	IsApplicationContext()
}

type ApplicationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyApplicationContext() *ApplicationContext {
	var p = new(ApplicationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_application
	return p
}

func (*ApplicationContext) IsApplicationContext() {}

func NewApplicationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ApplicationContext {
	var p = new(ApplicationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_application

	return p
}

func (s *ApplicationContext) GetParser() antlr.Parser { return s.parser }

func (s *ApplicationContext) PrefixApp() IPrefixAppContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixAppContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixAppContext)
}

func (s *ApplicationContext) PostfixApp() IPostfixAppContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixAppContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixAppContext)
}

func (s *ApplicationContext) InfixApp() IInfixAppContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInfixAppContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInfixAppContext)
}

func (s *ApplicationContext) NofixApp() INofixAppContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INofixAppContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INofixAppContext)
}

func (s *ApplicationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ApplicationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ApplicationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterApplication(s)
	}
}

func (s *ApplicationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitApplication(s)
	}
}




func (p *ZParser) Application() (localctx IApplicationContext) {
	localctx = NewApplicationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, ZParserRULE_application)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1005)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1001)
			p.PrefixApp()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1002)
			p.PostfixApp()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1003)
			p.InfixApp()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1004)
			p.NofixApp()
		}

	}


	return localctx
}


// IPrefixAppContext is an interface to support dynamic dispatch.
type IPrefixAppContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixAppContext differentiates from other interfaces.
	IsPrefixAppContext()
}

type PrefixAppContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixAppContext() *PrefixAppContext {
	var p = new(PrefixAppContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_prefixApp
	return p
}

func (*PrefixAppContext) IsPrefixAppContext() {}

func NewPrefixAppContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixAppContext {
	var p = new(PrefixAppContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_prefixApp

	return p
}

func (s *PrefixAppContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixAppContext) PRE() antlr.TerminalNode {
	return s.GetToken(ZParserPRE, 0)
}

func (s *PrefixAppContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PrefixAppContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrefixAppContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *PrefixAppContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *PrefixAppContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *PrefixAppContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *PrefixAppContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PrefixAppContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixAppContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PrefixAppContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPrefixApp(s)
	}
}

func (s *PrefixAppContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPrefixApp(s)
	}
}




func (p *ZParser) PrefixApp() (localctx IPrefixAppContext) {
	localctx = NewPrefixAppContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, ZParserRULE_prefixApp)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1023)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case ZParserPRE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1007)
			p.Match(ZParserPRE)
		}
		{
			p.SetState(1008)
			p.expression(0)
		}


	case ZParserL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1009)
			p.Match(ZParserL)
		}
		p.SetState(1011)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1010)
				p.ExpSep()
			}


		}
		p.SetState(1020)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1013)
				p.expression(0)
			}
			{
				p.SetState(1014)
				p.Match(ZParserERE)
			}


		case 2:
			p.SetState(1017)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(1016)
					p.ExpressionList()
				}

			}
			{
				p.SetState(1019)
				p.Match(ZParserSRE)
			}

		}
		{
			p.SetState(1022)
			p.expression(0)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IPostfixAppContext is an interface to support dynamic dispatch.
type IPostfixAppContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixAppContext differentiates from other interfaces.
	IsPostfixAppContext()
}

type PostfixAppContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixAppContext() *PostfixAppContext {
	var p = new(PostfixAppContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_postfixApp
	return p
}

func (*PostfixAppContext) IsPostfixAppContext() {}

func NewPostfixAppContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixAppContext {
	var p = new(PostfixAppContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_postfixApp

	return p
}

func (s *PostfixAppContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixAppContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PostfixAppContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixAppContext) POST() antlr.TerminalNode {
	return s.GetToken(ZParserPOST, 0)
}

func (s *PostfixAppContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *PostfixAppContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *PostfixAppContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *PostfixAppContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *PostfixAppContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *PostfixAppContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixAppContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *PostfixAppContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterPostfixApp(s)
	}
}

func (s *PostfixAppContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitPostfixApp(s)
	}
}




func (p *ZParser) PostfixApp() (localctx IPostfixAppContext) {
	localctx = NewPostfixAppContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, ZParserRULE_postfixApp)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1042)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1025)
			p.expression(0)
		}
		{
			p.SetState(1026)
			p.Match(ZParserPOST)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1028)
			p.expression(0)
		}
		{
			p.SetState(1029)
			p.Match(ZParserEL)
		}
		p.SetState(1031)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1030)
				p.ExpSep()
			}


		}
		p.SetState(1040)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1033)
				p.expression(0)
			}
			{
				p.SetState(1034)
				p.Match(ZParserER)
			}


		case 2:
			p.SetState(1037)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(1036)
					p.ExpressionList()
				}

			}
			{
				p.SetState(1039)
				p.Match(ZParserSR)
			}

		}

	}


	return localctx
}


// IInfixAppContext is an interface to support dynamic dispatch.
type IInfixAppContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInfixAppContext differentiates from other interfaces.
	IsInfixAppContext()
}

type InfixAppContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInfixAppContext() *InfixAppContext {
	var p = new(InfixAppContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_infixApp
	return p
}

func (*InfixAppContext) IsInfixAppContext() {}

func NewInfixAppContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InfixAppContext {
	var p = new(InfixAppContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_infixApp

	return p
}

func (s *InfixAppContext) GetParser() antlr.Parser { return s.parser }

func (s *InfixAppContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InfixAppContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InfixAppContext) I() antlr.TerminalNode {
	return s.GetToken(ZParserI, 0)
}

func (s *InfixAppContext) EL() antlr.TerminalNode {
	return s.GetToken(ZParserEL, 0)
}

func (s *InfixAppContext) ERE() antlr.TerminalNode {
	return s.GetToken(ZParserERE, 0)
}

func (s *InfixAppContext) SRE() antlr.TerminalNode {
	return s.GetToken(ZParserSRE, 0)
}

func (s *InfixAppContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *InfixAppContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InfixAppContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InfixAppContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *InfixAppContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterInfixApp(s)
	}
}

func (s *InfixAppContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitInfixApp(s)
	}
}




func (p *ZParser) InfixApp() (localctx IInfixAppContext) {
	localctx = NewInfixAppContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, ZParserRULE_infixApp)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1064)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1044)
			p.expression(0)
		}
		{
			p.SetState(1045)
			p.Match(ZParserI)
		}
		{
			p.SetState(1046)
			p.expression(0)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1048)
			p.expression(0)
		}
		{
			p.SetState(1049)
			p.Match(ZParserEL)
		}
		p.SetState(1051)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1050)
				p.ExpSep()
			}


		}
		p.SetState(1060)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1053)
				p.expression(0)
			}
			{
				p.SetState(1054)
				p.Match(ZParserERE)
			}


		case 2:
			p.SetState(1057)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
				{
					p.SetState(1056)
					p.ExpressionList()
				}

			}
			{
				p.SetState(1059)
				p.Match(ZParserSRE)
			}

		}
		{
			p.SetState(1062)
			p.expression(0)
		}

	}


	return localctx
}


// INofixAppContext is an interface to support dynamic dispatch.
type INofixAppContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNofixAppContext differentiates from other interfaces.
	IsNofixAppContext()
}

type NofixAppContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNofixAppContext() *NofixAppContext {
	var p = new(NofixAppContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_nofixApp
	return p
}

func (*NofixAppContext) IsNofixAppContext() {}

func NewNofixAppContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NofixAppContext {
	var p = new(NofixAppContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_nofixApp

	return p
}

func (s *NofixAppContext) GetParser() antlr.Parser { return s.parser }

func (s *NofixAppContext) L() antlr.TerminalNode {
	return s.GetToken(ZParserL, 0)
}

func (s *NofixAppContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NofixAppContext) ER() antlr.TerminalNode {
	return s.GetToken(ZParserER, 0)
}

func (s *NofixAppContext) SR() antlr.TerminalNode {
	return s.GetToken(ZParserSR, 0)
}

func (s *NofixAppContext) ExpSep() IExpSepContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpSepContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpSepContext)
}

func (s *NofixAppContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *NofixAppContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NofixAppContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *NofixAppContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterNofixApp(s)
	}
}

func (s *NofixAppContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitNofixApp(s)
	}
}




func (p *ZParser) NofixApp() (localctx INofixAppContext) {
	localctx = NewNofixAppContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, ZParserRULE_nofixApp)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1066)
		p.Match(ZParserL)
	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1067)
			p.ExpSep()
		}


	}
	p.SetState(1077)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1070)
			p.expression(0)
		}
		{
			p.SetState(1071)
			p.Match(ZParserER)
		}


	case 2:
		p.SetState(1074)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
			{
				p.SetState(1073)
				p.ExpressionList()
			}

		}
		{
			p.SetState(1076)
			p.Match(ZParserSR)
		}

	}



	return localctx
}


// IExpSepContext is an interface to support dynamic dispatch.
type IExpSepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpSepContext differentiates from other interfaces.
	IsExpSepContext()
}

type ExpSepContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpSepContext() *ExpSepContext {
	var p = new(ExpSepContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_expSep
	return p
}

func (*ExpSepContext) IsExpSepContext() {}

func NewExpSepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpSepContext {
	var p = new(ExpSepContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_expSep

	return p
}

func (s *ExpSepContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpSepContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpSepContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpSepContext) AllES() []antlr.TerminalNode {
	return s.GetTokens(ZParserES)
}

func (s *ExpSepContext) ES(i int) antlr.TerminalNode {
	return s.GetToken(ZParserES, i)
}

func (s *ExpSepContext) AllSS() []antlr.TerminalNode {
	return s.GetTokens(ZParserSS)
}

func (s *ExpSepContext) SS(i int) antlr.TerminalNode {
	return s.GetToken(ZParserSS, i)
}

func (s *ExpSepContext) AllExpressionList() []IExpressionListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionListContext)(nil)).Elem())
	var tst = make([]IExpressionListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionListContext)
		}
	}

	return tst
}

func (s *ExpSepContext) ExpressionList(i int) IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ExpSepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpSepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpSepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterExpSep(s)
	}
}

func (s *ExpSepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitExpSep(s)
	}
}




func (p *ZParser) ExpSep() (localctx IExpSepContext) {
	localctx = NewExpSepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, ZParserRULE_expSep)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1086)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
				p.SetState(1086)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1079)
						p.expression(0)
					}
					{
						p.SetState(1080)
						p.Match(ZParserES)
					}


				case 2:
					p.SetState(1083)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)


					if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << ZParserNUMERAL) | (1 << ZParserLEFT_PARENTHESIS) | (1 << ZParserLEFT_SQUARE_BRACKET) | (1 << ZParserLEFT_CURLY_BRACKET) | (1 << ZParserLEFT_BINDING_BRACKET) | (1 << ZParserIF) | (1 << ZParserLET) | (1 << ZParserPOWERSET) | (1 << ZParserPRE_KEY))) != 0) || ((((_la - 51)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 51))) & ((1 << (ZParserFOR_ALL - 51)) | (1 << (ZParserTHERE_EXISTS - 51)) | (1 << (ZParserUNIQUE_EXISTS - 51)) | (1 << (ZParserNOT_SIGN - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_THETA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_LAMBDA - 51)) | (1 << (ZParserGREEK_SMALL_LETTER_MU - 51)) | (1 << (ZParserNAME - 51)))) != 0) || _la == ZParserPRE || _la == ZParserL {
						{
							p.SetState(1082)
							p.ExpressionList()
						}

					}
					{
						p.SetState(1085)
						p.Match(ZParserSS)
					}

				}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}



	return localctx
}


// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = ZParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = ZParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(ZParserCOMMA)
}

func (s *ExpressionListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(ZParserCOMMA, i)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}


func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(ZParserListener); ok {
		listenerT.ExitExpressionList(s)
	}
}




func (p *ZParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, ZParserRULE_expressionList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1090)
		p.expression(0)
	}
	p.SetState(1095)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == ZParserCOMMA {
		{
			p.SetState(1091)
			p.Match(ZParserCOMMA)
		}
		{
			p.SetState(1092)
			p.expression(0)
		}


		p.SetState(1097)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


func (p *ZParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 6:
			var t *PredicateContext = nil
			if localctx != nil { t = localctx.(*PredicateContext) }
			return p.Predicate_Sempred(t, predIndex)

	case 7:
			var t *ExpressionContext = nil
			if localctx != nil { t = localctx.(*ExpressionContext) }
			return p.Expression_Sempred(t, predIndex)

	case 36:
			var t *InfixRelContext = nil
			if localctx != nil { t = localctx.(*InfixRelContext) }
			return p.InfixRel_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *ZParser) Predicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 15)

	case 1:
			return p.Precpred(p.GetParserRuleContext(), 14)

	case 2:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 3:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 7)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ZParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
			return p.Precpred(p.GetParserRuleContext(), 38)

	case 7:
			return p.Precpred(p.GetParserRuleContext(), 37)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 36)

	case 9:
			return p.Precpred(p.GetParserRuleContext(), 35)

	case 10:
			return p.Precpred(p.GetParserRuleContext(), 32)

	case 11:
			return p.Precpred(p.GetParserRuleContext(), 31)

	case 12:
			return p.Precpred(p.GetParserRuleContext(), 29)

	case 13:
			return p.Precpred(p.GetParserRuleContext(), 21)

	case 14:
			return ZSupport.isLeftAssociative(_input)

	case 15:
			return p.Precpred(p.GetParserRuleContext(), 20)

	case 16:
			return p.Precpred(p.GetParserRuleContext(), 19)

	case 17:
			return p.Precpred(p.GetParserRuleContext(), 17)

	case 18:
			return p.Precpred(p.GetParserRuleContext(), 30)

	case 19:
			return p.Precpred(p.GetParserRuleContext(), 27)

	case 20:
			return p.Precpred(p.GetParserRuleContext(), 23)

	case 21:
			return p.Precpred(p.GetParserRuleContext(), 22)

	case 22:
			return p.Precpred(p.GetParserRuleContext(), 16)

	case 23:
			return p.Precpred(p.GetParserRuleContext(), 15)

	case 24:
			return p.Precpred(p.GetParserRuleContext(), 14)

	case 25:
			return p.Precpred(p.GetParserRuleContext(), 13)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *ZParser) InfixRel_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 26:
			return ZSupport.isLeftAssociative(_input)

	case 27:
			return ZSupport.isLeftAssociative(_input)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

