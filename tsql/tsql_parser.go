// Generated from TSqlParser.g4 by ANTLR 4.7.

package tsql // TSqlParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 818, 10449,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 4, 289, 9, 289, 4, 290, 9, 290, 4, 291,
	9, 291, 4, 292, 9, 292, 4, 293, 9, 293, 4, 294, 9, 294, 4, 295, 9, 295,
	4, 296, 9, 296, 4, 297, 9, 297, 4, 298, 9, 298, 4, 299, 9, 299, 4, 300,
	9, 300, 4, 301, 9, 301, 4, 302, 9, 302, 4, 303, 9, 303, 4, 304, 9, 304,
	4, 305, 9, 305, 4, 306, 9, 306, 4, 307, 9, 307, 4, 308, 9, 308, 4, 309,
	9, 309, 4, 310, 9, 310, 4, 311, 9, 311, 4, 312, 9, 312, 4, 313, 9, 313,
	4, 314, 9, 314, 4, 315, 9, 315, 4, 316, 9, 316, 4, 317, 9, 317, 4, 318,
	9, 318, 4, 319, 9, 319, 4, 320, 9, 320, 4, 321, 9, 321, 4, 322, 9, 322,
	4, 323, 9, 323, 4, 324, 9, 324, 4, 325, 9, 325, 4, 326, 9, 326, 4, 327,
	9, 327, 4, 328, 9, 328, 4, 329, 9, 329, 4, 330, 9, 330, 4, 331, 9, 331,
	4, 332, 9, 332, 4, 333, 9, 333, 4, 334, 9, 334, 4, 335, 9, 335, 4, 336,
	9, 336, 4, 337, 9, 337, 4, 338, 9, 338, 4, 339, 9, 339, 4, 340, 9, 340,
	4, 341, 9, 341, 4, 342, 9, 342, 4, 343, 9, 343, 4, 344, 9, 344, 4, 345,
	9, 345, 4, 346, 9, 346, 4, 347, 9, 347, 4, 348, 9, 348, 4, 349, 9, 349,
	4, 350, 9, 350, 4, 351, 9, 351, 4, 352, 9, 352, 4, 353, 9, 353, 4, 354,
	9, 354, 4, 355, 9, 355, 4, 356, 9, 356, 4, 357, 9, 357, 4, 358, 9, 358,
	4, 359, 9, 359, 4, 360, 9, 360, 4, 361, 9, 361, 4, 362, 9, 362, 4, 363,
	9, 363, 4, 364, 9, 364, 4, 365, 9, 365, 4, 366, 9, 366, 4, 367, 9, 367,
	4, 368, 9, 368, 4, 369, 9, 369, 4, 370, 9, 370, 4, 371, 9, 371, 4, 372,
	9, 372, 4, 373, 9, 373, 4, 374, 9, 374, 4, 375, 9, 375, 4, 376, 9, 376,
	4, 377, 9, 377, 4, 378, 9, 378, 4, 379, 9, 379, 4, 380, 9, 380, 4, 381,
	9, 381, 4, 382, 9, 382, 4, 383, 9, 383, 4, 384, 9, 384, 4, 385, 9, 385,
	4, 386, 9, 386, 4, 387, 9, 387, 4, 388, 9, 388, 4, 389, 9, 389, 4, 390,
	9, 390, 4, 391, 9, 391, 4, 392, 9, 392, 4, 393, 9, 393, 4, 394, 9, 394,
	4, 395, 9, 395, 4, 396, 9, 396, 4, 397, 9, 397, 4, 398, 9, 398, 4, 399,
	9, 399, 4, 400, 9, 400, 4, 401, 9, 401, 4, 402, 9, 402, 4, 403, 9, 403,
	4, 404, 9, 404, 4, 405, 9, 405, 4, 406, 9, 406, 4, 407, 9, 407, 4, 408,
	9, 408, 4, 409, 9, 409, 4, 410, 9, 410, 4, 411, 9, 411, 4, 412, 9, 412,
	4, 413, 9, 413, 4, 414, 9, 414, 4, 415, 9, 415, 4, 416, 9, 416, 4, 417,
	9, 417, 4, 418, 9, 418, 4, 419, 9, 419, 4, 420, 9, 420, 4, 421, 9, 421,
	4, 422, 9, 422, 4, 423, 9, 423, 4, 424, 9, 424, 4, 425, 9, 425, 4, 426,
	9, 426, 4, 427, 9, 427, 4, 428, 9, 428, 4, 429, 9, 429, 4, 430, 9, 430,
	4, 431, 9, 431, 4, 432, 9, 432, 4, 433, 9, 433, 4, 434, 9, 434, 4, 435,
	9, 435, 4, 436, 9, 436, 4, 437, 9, 437, 4, 438, 9, 438, 4, 439, 9, 439,
	4, 440, 9, 440, 4, 441, 9, 441, 4, 442, 9, 442, 4, 443, 9, 443, 4, 444,
	9, 444, 4, 445, 9, 445, 4, 446, 9, 446, 4, 447, 9, 447, 4, 448, 9, 448,
	4, 449, 9, 449, 4, 450, 9, 450, 4, 451, 9, 451, 4, 452, 9, 452, 4, 453,
	9, 453, 4, 454, 9, 454, 4, 455, 9, 455, 4, 456, 9, 456, 4, 457, 9, 457,
	4, 458, 9, 458, 4, 459, 9, 459, 4, 460, 9, 460, 4, 461, 9, 461, 4, 462,
	9, 462, 4, 463, 9, 463, 4, 464, 9, 464, 4, 465, 9, 465, 4, 466, 9, 466,
	4, 467, 9, 467, 4, 468, 9, 468, 4, 469, 9, 469, 4, 470, 9, 470, 4, 471,
	9, 471, 4, 472, 9, 472, 4, 473, 9, 473, 4, 474, 9, 474, 4, 475, 9, 475,
	3, 2, 7, 2, 952, 10, 2, 12, 2, 14, 2, 955, 11, 2, 3, 2, 3, 2, 3, 3, 3,
	3, 7, 3, 961, 10, 3, 12, 3, 14, 3, 964, 11, 3, 3, 4, 3, 4, 5, 4, 968, 10,
	4, 6, 4, 970, 10, 4, 13, 4, 14, 4, 971, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	5, 3, 5, 5, 5, 981, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 988, 10,
	6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	7, 3, 7, 5, 7, 1147, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 1154, 10,
	8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 5, 9, 1168, 10, 9, 3, 10, 3, 10, 5, 10, 1172, 10, 10, 3, 10, 5, 10,
	1175, 10, 10, 3, 10, 3, 10, 5, 10, 1179, 10, 10, 3, 11, 3, 11, 5, 11, 1183,
	10, 11, 3, 12, 3, 12, 5, 12, 1187, 10, 12, 3, 13, 3, 13, 3, 13, 5, 13,
	1192, 10, 13, 3, 13, 3, 13, 3, 13, 5, 13, 1197, 10, 13, 5, 13, 1199, 10,
	13, 3, 14, 3, 14, 5, 14, 1203, 10, 14, 3, 14, 5, 14, 1206, 10, 14, 3, 15,
	3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 1213, 10, 15, 3, 15, 5, 15, 1216, 10,
	15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 1225, 10, 16,
	3, 16, 5, 16, 1228, 10, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3,
	20, 3, 20, 3, 20, 5, 20, 1239, 10, 20, 3, 20, 5, 20, 1242, 10, 20, 3, 20,
	3, 20, 3, 20, 5, 20, 1247, 10, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1252, 10,
	20, 3, 20, 5, 20, 1255, 10, 20, 3, 20, 3, 20, 3, 20, 5, 20, 1260, 10, 20,
	3, 21, 3, 21, 5, 21, 1264, 10, 21, 3, 21, 5, 21, 1267, 10, 21, 3, 21, 3,
	21, 5, 21, 1271, 10, 21, 3, 21, 5, 21, 1274, 10, 21, 3, 21, 5, 21, 1277,
	10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 1284, 10, 22, 3, 22,
	3, 22, 5, 22, 1288, 10, 22, 5, 22, 1290, 10, 22, 3, 23, 3, 23, 3, 23, 5,
	23, 1295, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 7, 24, 1306, 10, 24, 12, 24, 14, 24, 1309, 11, 24, 3, 24, 3, 24,
	3, 24, 5, 24, 1314, 10, 24, 3, 24, 5, 24, 1317, 10, 24, 3, 25, 3, 25, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	3, 26, 5, 26, 1333, 10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5,
	27, 1341, 10, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1346, 10, 27, 3, 27, 5, 27,
	1349, 10, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1354, 10, 27, 3, 27, 5, 27, 1357,
	10, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1362, 10, 27, 3, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 3, 28, 5, 28, 1370, 10, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1375,
	10, 28, 3, 28, 5, 28, 1378, 10, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1383, 10,
	28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1389, 10, 29, 3, 29, 3, 29, 3, 29,
	5, 29, 1394, 10, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 33, 5, 33, 1411, 10, 33,
	3, 33, 5, 33, 1414, 10, 33, 3, 33, 5, 33, 1417, 10, 33, 3, 33, 5, 33, 1420,
	10, 33, 3, 34, 3, 34, 3, 34, 5, 34, 1425, 10, 34, 3, 35, 3, 35, 3, 36,
	3, 36, 3, 36, 3, 37, 3, 37, 5, 37, 1434, 10, 37, 3, 38, 3, 38, 3, 39, 3,
	39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41,
	1449, 10, 41, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 3, 44, 3, 44, 3, 45, 3,
	45, 3, 45, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 5, 47, 1466, 10, 47, 3, 48,
	3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1477, 10,
	48, 3, 48, 3, 48, 7, 48, 1481, 10, 48, 12, 48, 14, 48, 1484, 11, 48, 3,
	49, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52,
	3, 52, 5, 52, 1498, 10, 52, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 55, 3,
	55, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 1513, 10, 56, 3, 57,
	3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1522, 10, 58, 3, 58, 3,
	58, 5, 58, 1526, 10, 58, 3, 58, 6, 58, 1529, 10, 58, 13, 58, 14, 58, 1530,
	3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1537, 10, 58, 3, 59, 3, 59, 3, 59, 3,
	59, 5, 59, 1543, 10, 59, 3, 59, 5, 59, 1546, 10, 59, 3, 59, 6, 59, 1549,
	10, 59, 13, 59, 14, 59, 1550, 3, 59, 3, 59, 3, 59, 5, 59, 1556, 10, 59,
	3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 1564, 10, 60, 3, 61, 3,
	61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 1574, 10, 62, 3, 62,
	3, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 1593, 10, 64, 3, 65, 3, 65,
	3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1601, 10, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 1614, 10, 65,
	5, 65, 1616, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 5, 65, 1628, 10, 65, 5, 65, 1630, 10, 65, 3, 65, 3, 65,
	3, 65, 3, 65, 3, 65, 5, 65, 1637, 10, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3,
	66, 3, 66, 3, 66, 5, 66, 1646, 10, 66, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67,
	1652, 10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 68, 5, 68, 1661,
	10, 68, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71, 3, 71,
	3, 72, 3, 72, 3, 72, 3, 72, 5, 72, 1676, 10, 72, 3, 72, 3, 72, 3, 72, 3,
	72, 3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 1686, 10, 73, 3, 73, 3, 73, 3, 73,
	3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 1696, 10, 74, 3, 74, 3, 74, 3,
	74, 3, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75,
	3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3,
	75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75,
	3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 1736, 10, 75, 3, 76, 3, 76, 3, 76, 3,
	76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76,
	3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 1759, 10, 76, 3,
	77, 3, 77, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 80, 3, 80,
	3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 3, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 5, 82, 1795, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	5, 82, 1813, 10, 82, 3, 82, 5, 82, 1816, 10, 82, 3, 82, 3, 82, 3, 82, 5,
	82, 1821, 10, 82, 3, 82, 5, 82, 1824, 10, 82, 3, 82, 3, 82, 3, 82, 5, 82,
	1829, 10, 82, 3, 82, 5, 82, 1832, 10, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1837,
	10, 82, 3, 82, 5, 82, 1840, 10, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1845, 10,
	82, 3, 82, 5, 82, 1848, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	5, 82, 1856, 10, 82, 3, 82, 5, 82, 1859, 10, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 5, 82, 1867, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1880, 10, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1891, 10, 82,
	3, 82, 7, 82, 1894, 10, 82, 12, 82, 14, 82, 1897, 11, 82, 3, 82, 5, 82,
	1900, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1906, 10, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1929,
	10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 5, 82, 1941, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 5, 82, 1952, 10, 82, 3, 82, 7, 82, 1955, 10, 82, 12,
	82, 14, 82, 1958, 11, 82, 3, 82, 5, 82, 1961, 10, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 5, 82, 1967, 10, 82, 5, 82, 1969, 10, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 1982, 10,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 6, 82, 2003,
	10, 82, 13, 82, 14, 82, 2004, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82,
	2012, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2021,
	10, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2026, 10, 82, 3, 82, 5, 82, 2029, 10,
	82, 3, 82, 3, 82, 3, 82, 5, 82, 2034, 10, 82, 3, 82, 5, 82, 2037, 10, 82,
	3, 82, 3, 82, 3, 82, 5, 82, 2042, 10, 82, 3, 82, 6, 82, 2045, 10, 82, 13,
	82, 14, 82, 2046, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2075, 10, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2082, 10, 82, 3, 82, 6, 82, 2085,
	10, 82, 13, 82, 14, 82, 2086, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82,
	2094, 10, 82, 5, 82, 2096, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 5, 82, 2107, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82,
	5, 82, 2113, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3,
	82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2128, 10, 82, 3, 83, 3, 83,
	3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5,
	83, 2142, 10, 83, 3, 83, 5, 83, 2145, 10, 83, 5, 83, 2147, 10, 83, 3, 83,
	3, 83, 3, 83, 5, 83, 2152, 10, 83, 3, 83, 3, 83, 5, 83, 2156, 10, 83, 3,
	83, 5, 83, 2159, 10, 83, 5, 83, 2161, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	5, 83, 2167, 10, 83, 3, 83, 5, 83, 2170, 10, 83, 5, 83, 2172, 10, 83, 3,
	83, 3, 83, 3, 83, 3, 83, 5, 83, 2178, 10, 83, 5, 83, 2180, 10, 83, 3, 83,
	3, 83, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3,
	85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 2202,
	10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 2210, 10, 85,
	3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 2218, 10, 85, 6, 85, 2220,
	10, 85, 13, 85, 14, 85, 2221, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 5, 85, 2231, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3,
	86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 3, 86, 5, 86, 2252, 10, 86, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3,
	87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 2265, 10, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3,
	87, 5, 87, 2280, 10, 87, 6, 87, 2282, 10, 87, 13, 87, 14, 87, 2283, 3,
	88, 3, 88, 3, 88, 3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 90,
	3, 90, 3, 90, 3, 90, 3, 90, 3, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 92, 3,
	92, 3, 92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 93, 3, 93, 3, 94, 3, 94, 3, 94,
	3, 94, 5, 94, 2319, 10, 94, 3, 94, 5, 94, 2322, 10, 94, 3, 94, 6, 94, 2325,
	10, 94, 13, 94, 14, 94, 2326, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95,
	3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 97, 3, 97, 3, 97, 3, 97, 5,
	97, 2345, 10, 97, 3, 97, 5, 97, 2348, 10, 97, 3, 97, 3, 97, 3, 97, 5, 97,
	2353, 10, 97, 3, 97, 3, 97, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 3, 99, 3,
	99, 3, 99, 3, 99, 3, 99, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100,
	3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 3, 101, 5, 101, 2379, 10, 101,
	3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 102, 3, 103, 3, 103, 3, 103,
	3, 103, 3, 103, 3, 103, 5, 103, 2393, 10, 103, 3, 103, 3, 103, 3, 103,
	5, 103, 2398, 10, 103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 3, 104,
	5, 104, 2406, 10, 104, 3, 104, 6, 104, 2409, 10, 104, 13, 104, 14, 104,
	2410, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 2418, 10, 104, 3,
	105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 106, 3, 106, 3,
	106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3,
	107, 5, 107, 2439, 10, 107, 3, 107, 3, 107, 3, 108, 3, 108, 3, 108, 3,
	108, 3, 108, 3, 109, 3, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110, 3,
	110, 3, 111, 3, 111, 3, 111, 3, 111, 3, 111, 3, 112, 3, 112, 3, 112, 3,
	112, 3, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 114, 3, 114, 3,
	114, 3, 114, 3, 114, 5, 114, 2476, 10, 114, 3, 114, 3, 114, 3, 114, 5,
	114, 2481, 10, 114, 3, 114, 3, 114, 3, 115, 3, 115, 3, 115, 3, 115, 3,
	115, 3, 115, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 117, 3, 117, 3,
	117, 3, 117, 5, 117, 2500, 10, 117, 3, 117, 3, 117, 3, 118, 3, 118, 3,
	118, 3, 118, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 2512, 10, 119, 3,
	119, 5, 119, 2515, 10, 119, 3, 119, 3, 119, 3, 119, 5, 119, 2520, 10, 119,
	3, 119, 5, 119, 2523, 10, 119, 3, 120, 3, 120, 3, 120, 3, 120, 5, 120,
	2529, 10, 120, 3, 120, 3, 120, 3, 121, 3, 121, 3, 121, 3, 121, 3, 121,
	3, 121, 3, 122, 3, 122, 3, 122, 3, 122, 3, 122, 5, 122, 2544, 10, 122,
	3, 122, 3, 122, 3, 122, 5, 122, 2549, 10, 122, 3, 122, 3, 122, 3, 123,
	3, 123, 3, 123, 3, 123, 5, 123, 2557, 10, 123, 3, 123, 5, 123, 2560, 10,
	123, 3, 123, 3, 123, 3, 123, 5, 123, 2565, 10, 123, 3, 123, 3, 123, 3,
	123, 5, 123, 2570, 10, 123, 3, 123, 5, 123, 2573, 10, 123, 3, 124, 3, 124,
	3, 124, 3, 124, 3, 124, 3, 125, 3, 125, 3, 125, 3, 125, 3, 125, 3, 125,
	3, 126, 3, 126, 3, 126, 3, 126, 3, 126, 3, 127, 3, 127, 3, 127, 3, 127,
	3, 128, 3, 128, 5, 128, 2597, 10, 128, 3, 128, 3, 128, 3, 128, 3, 128,
	3, 128, 5, 128, 2604, 10, 128, 3, 128, 3, 128, 3, 128, 5, 128, 2609, 10,
	128, 3, 128, 3, 128, 3, 128, 5, 128, 2614, 10, 128, 3, 128, 3, 128, 3,
	128, 6, 128, 2619, 10, 128, 13, 128, 14, 128, 2620, 3, 129, 3, 129, 3,
	129, 3, 129, 3, 129, 5, 129, 2628, 10, 129, 3, 129, 3, 129, 3, 129, 3,
	129, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 3, 130, 5, 130, 2641,
	10, 130, 3, 131, 3, 131, 3, 131, 3, 131, 5, 131, 2647, 10, 131, 3, 131,
	3, 131, 3, 131, 5, 131, 2652, 10, 131, 3, 131, 3, 131, 3, 132, 3, 132,
	3, 132, 3, 132, 5, 132, 2660, 10, 132, 3, 132, 3, 132, 3, 133, 3, 133,
	3, 133, 3, 133, 3, 133, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134,
	3, 134, 5, 134, 2676, 10, 134, 3, 134, 3, 134, 3, 135, 3, 135, 3, 135,
	5, 135, 2683, 10, 135, 3, 135, 3, 135, 3, 135, 5, 135, 2688, 10, 135, 3,
	135, 6, 135, 2691, 10, 135, 13, 135, 14, 135, 2692, 3, 135, 5, 135, 2696,
	10, 135, 3, 135, 3, 135, 3, 135, 3, 135, 5, 135, 2702, 10, 135, 3, 135,
	3, 135, 3, 135, 3, 135, 5, 135, 2708, 10, 135, 3, 136, 3, 136, 3, 136,
	5, 136, 2713, 10, 136, 3, 136, 3, 136, 3, 136, 5, 136, 2718, 10, 136, 3,
	136, 6, 136, 2721, 10, 136, 13, 136, 14, 136, 2722, 3, 136, 5, 136, 2726,
	10, 136, 3, 136, 3, 136, 3, 136, 3, 136, 5, 136, 2732, 10, 136, 3, 136,
	3, 136, 3, 136, 3, 136, 5, 136, 2738, 10, 136, 3, 137, 3, 137, 3, 137,
	3, 137, 3, 137, 5, 137, 2745, 10, 137, 3, 137, 3, 137, 3, 137, 5, 137,
	2750, 10, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 5, 137,
	2758, 10, 137, 3, 137, 3, 137, 3, 137, 3, 137, 5, 137, 2764, 10, 137, 6,
	137, 2766, 10, 137, 13, 137, 14, 137, 2767, 3, 137, 3, 137, 5, 137, 2772,
	10, 137, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138,
	3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 138, 3, 139,
	3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139,
	3, 139, 5, 139, 2801, 10, 139, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140,
	3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 2814, 10, 140,
	3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 2820, 10, 140, 3, 141, 3, 141,
	3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141, 5, 141, 2830, 10, 141,
	3, 141, 5, 141, 2833, 10, 141, 3, 142, 3, 142, 3, 142, 3, 142, 3, 142,
	3, 142, 3, 142, 3, 142, 3, 142, 3, 143, 3, 143, 3, 143, 3, 143, 3, 143,
	3, 143, 3, 143, 3, 143, 3, 143, 5, 143, 2853, 10, 143, 3, 143, 3, 143,
	5, 143, 2857, 10, 143, 3, 143, 3, 143, 5, 143, 2861, 10, 143, 3, 143, 6,
	143, 2864, 10, 143, 13, 143, 14, 143, 2865, 3, 143, 3, 143, 3, 143, 3,
	143, 3, 143, 3, 143, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 5, 144, 2881, 10, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5,
	144, 2888, 10, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 5, 144, 2897, 10, 144, 3, 144, 3, 144, 3, 144, 3, 144, 7, 144, 2903,
	10, 144, 12, 144, 14, 144, 2906, 11, 144, 5, 144, 2908, 10, 144, 3, 144,
	3, 144, 3, 144, 5, 144, 2913, 10, 144, 3, 144, 3, 144, 3, 144, 5, 144,
	2918, 10, 144, 3, 144, 3, 144, 3, 144, 3, 144, 6, 144, 2924, 10, 144, 13,
	144, 14, 144, 2925, 3, 144, 3, 144, 6, 144, 2930, 10, 144, 13, 144, 14,
	144, 2931, 3, 144, 3, 144, 5, 144, 2936, 10, 144, 3, 144, 3, 144, 7, 144,
	2940, 10, 144, 12, 144, 14, 144, 2943, 11, 144, 7, 144, 2945, 10, 144,
	12, 144, 14, 144, 2948, 11, 144, 3, 144, 5, 144, 2951, 10, 144, 3, 144,
	3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 2958, 10, 144, 3, 144, 3, 144,
	3, 144, 3, 144, 7, 144, 2964, 10, 144, 12, 144, 14, 144, 2967, 11, 144,
	3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 2974, 10, 144, 3, 144,
	3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 2983, 10, 144,
	3, 144, 3, 144, 3, 144, 5, 144, 2988, 10, 144, 3, 144, 3, 144, 5, 144,
	2992, 10, 144, 3, 144, 5, 144, 2995, 10, 144, 6, 144, 2997, 10, 144, 13,
	144, 14, 144, 2998, 3, 144, 3, 144, 7, 144, 3003, 10, 144, 12, 144, 14,
	144, 3006, 11, 144, 7, 144, 3008, 10, 144, 12, 144, 14, 144, 3011, 11,
	144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 3018, 10, 144, 3,
	144, 3, 144, 3, 144, 3, 144, 7, 144, 3024, 10, 144, 12, 144, 14, 144, 3027,
	11, 144, 3, 144, 3, 144, 3, 144, 5, 144, 3032, 10, 144, 3, 144, 3, 144,
	3, 144, 3, 144, 5, 144, 3038, 10, 144, 3, 144, 5, 144, 3041, 10, 144, 3,
	144, 3, 144, 3, 144, 5, 144, 3046, 10, 144, 3, 144, 5, 144, 3049, 10, 144,
	3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 5, 144, 3056, 10, 144, 5, 144,
	3058, 10, 144, 3, 144, 5, 144, 3061, 10, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 5, 144, 3067, 10, 144, 3, 144, 5, 144, 3070, 10, 144, 3, 144, 3, 144,
	3, 144, 5, 144, 3075, 10, 144, 3, 144, 5, 144, 3078, 10, 144, 3, 144, 3,
	144, 3, 144, 5, 144, 3083, 10, 144, 3, 144, 5, 144, 3086, 10, 144, 3, 144,
	3, 144, 3, 144, 5, 144, 3091, 10, 144, 3, 144, 5, 144, 3094, 10, 144, 3,
	144, 3, 144, 3, 144, 5, 144, 3099, 10, 144, 3, 145, 5, 145, 3102, 10, 145,
	3, 145, 5, 145, 3105, 10, 145, 3, 145, 5, 145, 3108, 10, 145, 3, 145, 3,
	145, 3, 145, 3, 145, 3, 145, 5, 145, 3115, 10, 145, 6, 145, 3117, 10, 145,
	13, 145, 14, 145, 3118, 3, 146, 3, 146, 3, 146, 3, 146, 3, 146, 5, 146,
	3126, 10, 146, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 3133, 10,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 3139, 10, 147, 3, 147, 3,
	147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 3,
	147, 5, 147, 3152, 10, 147, 3, 147, 3, 147, 5, 147, 3156, 10, 147, 3, 147,
	3, 147, 3, 147, 5, 147, 3161, 10, 147, 3, 147, 3, 147, 3, 147, 3, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 3171, 10, 147, 3, 147, 3, 147,
	3, 147, 3, 147, 3, 147, 3, 147, 3, 147, 5, 147, 3180, 10, 147, 3, 147,
	3, 147, 5, 147, 3184, 10, 147, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 3196, 10, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 5, 148, 3202, 10, 148, 3, 148, 3, 148, 3, 148,
	6, 148, 3207, 10, 148, 13, 148, 14, 148, 3208, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148,
	3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 3, 148, 5, 148, 3229, 10, 148,
	3, 148, 3, 148, 5, 148, 3233, 10, 148, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 5, 149, 3241, 10, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 5, 149, 3250, 10, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 5, 149, 3256, 10, 149, 3, 149, 3, 149, 3, 149, 3, 149, 5, 149,
	3262, 10, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 6, 149,
	3270, 10, 149, 13, 149, 14, 149, 3271, 3, 149, 3, 149, 3, 150, 3, 150,
	3, 150, 3, 150, 3, 150, 3, 150, 5, 150, 3282, 10, 150, 3, 150, 3, 150,
	5, 150, 3286, 10, 150, 3, 150, 5, 150, 3289, 10, 150, 3, 150, 3, 150, 5,
	150, 3293, 10, 150, 3, 150, 3, 150, 3, 150, 5, 150, 3298, 10, 150, 3, 150,
	3, 150, 3, 150, 3, 150, 5, 150, 3304, 10, 150, 3, 150, 5, 150, 3307, 10,
	150, 3, 150, 3, 150, 5, 150, 3311, 10, 150, 3, 150, 3, 150, 3, 150, 3,
	150, 3, 150, 3, 150, 6, 150, 3319, 10, 150, 13, 150, 14, 150, 3320, 3,
	150, 5, 150, 3324, 10, 150, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 5, 151, 3332, 10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3,
	151, 5, 151, 3340, 10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5,
	151, 3347, 10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 6, 151, 3354,
	10, 151, 13, 151, 14, 151, 3355, 5, 151, 3358, 10, 151, 3, 151, 3, 151,
	3, 151, 5, 151, 3363, 10, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151,
	3369, 10, 151, 3, 151, 6, 151, 3372, 10, 151, 13, 151, 14, 151, 3373, 5,
	151, 3376, 10, 151, 3, 151, 5, 151, 3379, 10, 151, 3, 151, 3, 151, 3, 151,
	5, 151, 3384, 10, 151, 3, 151, 5, 151, 3387, 10, 151, 3, 151, 3, 151, 3,
	151, 5, 151, 3392, 10, 151, 3, 151, 3, 151, 3, 152, 3, 152, 3, 152, 3,
	152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3407,
	10, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3414, 10, 152,
	3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 6, 152, 3421, 10, 152, 13, 152,
	14, 152, 3422, 5, 152, 3425, 10, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3430,
	10, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3436, 10, 152, 3, 152,
	6, 152, 3439, 10, 152, 13, 152, 14, 152, 3440, 5, 152, 3443, 10, 152, 3,
	152, 5, 152, 3446, 10, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3451, 10, 152,
	3, 152, 5, 152, 3454, 10, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3459, 10,
	152, 3, 152, 3, 152, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3, 153, 3,
	153, 3, 153, 3, 153, 5, 153, 3472, 10, 153, 3, 153, 3, 153, 3, 153, 5,
	153, 3477, 10, 153, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3, 154, 3,
	154, 5, 154, 3486, 10, 154, 3, 154, 3, 154, 3, 154, 5, 154, 3491, 10, 154,
	3, 154, 3, 154, 3, 154, 3, 154, 5, 154, 3497, 10, 154, 3, 154, 3, 154,
	5, 154, 3501, 10, 154, 3, 154, 3, 154, 5, 154, 3505, 10, 154, 3, 155, 3,
	155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3,
	155, 3, 155, 3, 155, 3, 155, 3, 155, 5, 155, 3522, 10, 155, 5, 155, 3524,
	10, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156, 3, 156,
	5, 156, 3534, 10, 156, 3, 156, 3, 156, 3, 156, 5, 156, 3539, 10, 156, 5,
	156, 3541, 10, 156, 3, 156, 3, 156, 5, 156, 3545, 10, 156, 3, 157, 3, 157,
	3, 157, 3, 157, 5, 157, 3551, 10, 157, 3, 157, 3, 157, 3, 157, 3, 157,
	3, 157, 3, 157, 5, 157, 3559, 10, 157, 3, 157, 7, 157, 3562, 10, 157, 12,
	157, 14, 157, 3565, 11, 157, 5, 157, 3567, 10, 157, 3, 157, 3, 157, 3,
	157, 3, 157, 7, 157, 3573, 10, 157, 12, 157, 14, 157, 3576, 11, 157, 5,
	157, 3578, 10, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3583, 10, 157, 3, 157,
	3, 157, 3, 157, 5, 157, 3588, 10, 157, 3, 157, 3, 157, 3, 157, 5, 157,
	3593, 10, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3598, 10, 157, 3, 157, 3,
	157, 3, 157, 5, 157, 3603, 10, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3608,
	10, 157, 3, 157, 3, 157, 5, 157, 3612, 10, 157, 3, 157, 3, 157, 3, 157,
	5, 157, 3617, 10, 157, 3, 158, 3, 158, 3, 158, 3, 158, 3, 158, 3, 158,
	3, 158, 3, 158, 3, 158, 5, 158, 3628, 10, 158, 3, 158, 7, 158, 3631, 10,
	158, 12, 158, 14, 158, 3634, 11, 158, 5, 158, 3636, 10, 158, 3, 158, 5,
	158, 3639, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3644, 10, 158, 3, 158,
	5, 158, 3647, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3652, 10, 158, 3,
	158, 5, 158, 3655, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3660, 10, 158,
	3, 158, 5, 158, 3663, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3668, 10,
	158, 3, 158, 5, 158, 3671, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3676,
	10, 158, 3, 158, 5, 158, 3679, 10, 158, 3, 158, 3, 158, 3, 158, 5, 158,
	3684, 10, 158, 3, 158, 3, 158, 3, 158, 3, 158, 5, 158, 3690, 10, 158, 3,
	158, 3, 158, 3, 158, 5, 158, 3695, 10, 158, 3, 158, 5, 158, 3698, 10, 158,
	3, 158, 3, 158, 3, 158, 5, 158, 3703, 10, 158, 3, 158, 3, 158, 3, 158,
	3, 158, 3, 158, 5, 158, 3710, 10, 158, 5, 158, 3712, 10, 158, 3, 159, 3,
	159, 3, 159, 3, 159, 5, 159, 3718, 10, 159, 3, 159, 3, 159, 3, 159, 3,
	159, 3, 159, 3, 159, 3, 159, 5, 159, 3727, 10, 159, 3, 159, 3, 159, 3,
	159, 5, 159, 3732, 10, 159, 5, 159, 3734, 10, 159, 3, 160, 3, 160, 3, 160,
	3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 5, 160, 3746, 10,
	160, 3, 161, 3, 161, 3, 161, 3, 161, 5, 161, 3752, 10, 161, 3, 161, 3,
	161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 3, 161, 7, 161, 3762, 10,
	161, 12, 161, 14, 161, 3765, 11, 161, 5, 161, 3767, 10, 161, 3, 161, 3,
	161, 3, 161, 5, 161, 3772, 10, 161, 5, 161, 3774, 10, 161, 3, 162, 3, 162,
	3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 3, 162, 5, 162, 3784, 10, 162,
	3, 162, 3, 162, 3, 162, 5, 162, 3789, 10, 162, 5, 162, 3791, 10, 162, 3,
	162, 3, 162, 5, 162, 3795, 10, 162, 3, 163, 3, 163, 3, 163, 3, 163, 5,
	163, 3801, 10, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3,
	163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3, 163, 3,
	163, 5, 163, 3819, 10, 163, 5, 163, 3821, 10, 163, 3, 164, 3, 164, 3, 164,
	3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 164, 3, 165, 3, 165, 3, 165,
	3, 165, 5, 165, 3836, 10, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 3, 165, 5, 165, 3854, 10, 165, 3, 165, 3, 165, 3, 165, 3, 165,
	3, 165, 3, 165, 5, 165, 3862, 10, 165, 3, 166, 3, 166, 3, 166, 3, 166,
	3, 166, 3, 166, 3, 166, 3, 166, 5, 166, 3872, 10, 166, 3, 167, 3, 167,
	3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167, 3, 167,
	3, 167, 3, 167, 3, 167, 5, 167, 3888, 10, 167, 3, 168, 3, 168, 3, 168,
	3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168, 3, 168,
	3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 3, 169, 5, 169, 3909, 10,
	169, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 3,
	170, 5, 170, 3920, 10, 170, 3, 170, 3, 170, 3, 170, 3, 170, 5, 170, 3926,
	10, 170, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5, 171,
	3935, 10, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171, 3, 171,
	5, 171, 3944, 10, 171, 3, 171, 3, 171, 3, 171, 3, 171, 5, 171, 3950, 10,
	171, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 3959,
	10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 3964, 10, 172, 3, 172, 5, 172,
	3967, 10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 3972, 10, 172, 3, 172, 5,
	172, 3975, 10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 3980, 10, 172, 3, 172,
	5, 172, 3983, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172, 3, 172,
	5, 172, 3991, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 5, 172, 3997, 10,
	172, 6, 172, 3999, 10, 172, 13, 172, 14, 172, 4000, 3, 172, 3, 172, 3,
	172, 3, 172, 3, 172, 5, 172, 4008, 10, 172, 3, 172, 3, 172, 3, 172, 3,
	172, 5, 172, 4014, 10, 172, 6, 172, 4016, 10, 172, 13, 172, 14, 172, 4017,
	3, 172, 5, 172, 4021, 10, 172, 5, 172, 4023, 10, 172, 3, 172, 5, 172, 4026,
	10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 4031, 10, 172, 3, 172, 5, 172,
	4034, 10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 4039, 10, 172, 3, 172, 5,
	172, 4042, 10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 4047, 10, 172, 3, 172,
	5, 172, 4050, 10, 172, 3, 172, 3, 172, 3, 172, 5, 172, 4055, 10, 172, 3,
	172, 5, 172, 4058, 10, 172, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3,
	173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 5, 173, 4073,
	10, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173,
	3, 173, 5, 173, 4084, 10, 173, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174,
	3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 5, 174, 4096, 10, 174, 3, 175,
	3, 175, 3, 175, 3, 175, 3, 175, 5, 175, 4103, 10, 175, 3, 176, 3, 176,
	3, 176, 3, 176, 3, 176, 5, 176, 4110, 10, 176, 3, 176, 3, 176, 5, 176,
	4114, 10, 176, 3, 176, 3, 176, 3, 176, 5, 176, 4119, 10, 176, 3, 176, 5,
	176, 4122, 10, 176, 3, 176, 3, 176, 3, 176, 5, 176, 4127, 10, 176, 3, 176,
	5, 176, 4130, 10, 176, 3, 176, 3, 176, 3, 176, 5, 176, 4135, 10, 176, 3,
	176, 5, 176, 4138, 10, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3, 176, 3,
	176, 3, 176, 5, 176, 4147, 10, 176, 3, 177, 3, 177, 3, 177, 3, 177, 3,
	177, 5, 177, 4154, 10, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 178, 3,
	178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 3, 178, 5, 178, 4169,
	10, 178, 3, 178, 3, 178, 5, 178, 4173, 10, 178, 3, 178, 3, 178, 3, 178,
	5, 178, 4178, 10, 178, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179,
	3, 179, 3, 179, 3, 179, 5, 179, 4189, 10, 179, 3, 179, 3, 179, 3, 179,
	3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 5, 179, 4199, 10, 179, 3, 179,
	3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179, 3, 179,
	5, 179, 4211, 10, 179, 3, 179, 3, 179, 3, 179, 3, 179, 7, 179, 4217, 10,
	179, 12, 179, 14, 179, 4220, 11, 179, 3, 180, 3, 180, 3, 180, 3, 180, 3,
	180, 5, 180, 4227, 10, 180, 3, 181, 3, 181, 3, 181, 3, 181, 3, 181, 3,
	181, 3, 181, 5, 181, 4236, 10, 181, 3, 181, 3, 181, 3, 181, 5, 181, 4241,
	10, 181, 3, 182, 3, 182, 3, 182, 3, 182, 3, 182, 3, 182, 3, 182, 3, 182,
	3, 182, 5, 182, 4252, 10, 182, 3, 182, 5, 182, 4255, 10, 182, 3, 182, 3,
	182, 5, 182, 4259, 10, 182, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3,
	183, 5, 183, 4267, 10, 183, 3, 183, 3, 183, 5, 183, 4271, 10, 183, 3, 183,
	3, 183, 5, 183, 4275, 10, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183,
	3, 183, 5, 183, 4283, 10, 183, 3, 183, 6, 183, 4286, 10, 183, 13, 183,
	14, 183, 4287, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183, 5, 183,
	4296, 10, 183, 3, 183, 3, 183, 3, 183, 5, 183, 4301, 10, 183, 3, 183, 3,
	183, 7, 183, 4305, 10, 183, 12, 183, 14, 183, 4308, 11, 183, 6, 183, 4310,
	10, 183, 13, 183, 14, 183, 4311, 3, 183, 3, 183, 3, 183, 3, 183, 3, 183,
	3, 183, 3, 183, 5, 183, 4321, 10, 183, 3, 183, 5, 183, 4324, 10, 183, 3,
	183, 3, 183, 3, 183, 5, 183, 4329, 10, 183, 3, 184, 3, 184, 3, 184, 3,
	184, 3, 184, 5, 184, 4336, 10, 184, 3, 184, 3, 184, 3, 184, 3, 184, 5,
	184, 4342, 10, 184, 5, 184, 4344, 10, 184, 3, 184, 3, 184, 3, 184, 5, 184,
	4349, 10, 184, 3, 184, 3, 184, 3, 184, 3, 184, 5, 184, 4355, 10, 184, 3,
	184, 3, 184, 3, 184, 3, 184, 5, 184, 4361, 10, 184, 3, 184, 3, 184, 3,
	184, 5, 184, 4366, 10, 184, 3, 184, 3, 184, 3, 184, 3, 184, 5, 184, 4372,
	10, 184, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 5, 185, 4379, 10, 185,
	3, 185, 3, 185, 3, 185, 5, 185, 4384, 10, 185, 3, 185, 3, 185, 3, 185,
	5, 185, 4389, 10, 185, 3, 185, 3, 185, 3, 185, 5, 185, 4394, 10, 185, 3,
	185, 5, 185, 4397, 10, 185, 3, 185, 3, 185, 5, 185, 4401, 10, 185, 3, 185,
	3, 185, 5, 185, 4405, 10, 185, 3, 185, 3, 185, 5, 185, 4409, 10, 185, 3,
	185, 3, 185, 5, 185, 4413, 10, 185, 3, 185, 3, 185, 3, 185, 5, 185, 4418,
	10, 185, 3, 185, 3, 185, 5, 185, 4422, 10, 185, 3, 185, 3, 185, 5, 185,
	4426, 10, 185, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186,
	3, 186, 5, 186, 4436, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186,
	4442, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4449, 10,
	186, 3, 186, 5, 186, 4452, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5,
	186, 4458, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4464, 10, 186,
	3, 186, 3, 186, 3, 186, 7, 186, 4469, 10, 186, 12, 186, 14, 186, 4472,
	11, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4477, 10, 186, 5, 186, 4479, 10,
	186, 3, 186, 3, 186, 3, 186, 5, 186, 4484, 10, 186, 3, 186, 3, 186, 3,
	186, 3, 186, 5, 186, 4490, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5,
	186, 4496, 10, 186, 3, 186, 3, 186, 3, 186, 7, 186, 4501, 10, 186, 12,
	186, 14, 186, 4504, 11, 186, 3, 186, 5, 186, 4507, 10, 186, 3, 186, 3,
	186, 5, 186, 4511, 10, 186, 3, 186, 5, 186, 4514, 10, 186, 3, 186, 3, 186,
	3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186,
	3, 186, 5, 186, 4528, 10, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4533, 10,
	186, 3, 186, 3, 186, 5, 186, 4537, 10, 186, 3, 186, 3, 186, 3, 186, 3,
	186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4550,
	10, 186, 3, 186, 5, 186, 4553, 10, 186, 5, 186, 4555, 10, 186, 3, 186,
	3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 5, 186, 4563, 10, 186, 3, 187,
	3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4573, 10,
	187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4579, 10, 187, 3, 187, 3,
	187, 3, 187, 3, 187, 3, 187, 5, 187, 4586, 10, 187, 3, 187, 5, 187, 4589,
	10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4595, 10, 187, 3, 187,
	3, 187, 3, 187, 3, 187, 5, 187, 4601, 10, 187, 3, 187, 3, 187, 3, 187,
	7, 187, 4606, 10, 187, 12, 187, 14, 187, 4609, 11, 187, 3, 187, 3, 187,
	3, 187, 5, 187, 4614, 10, 187, 5, 187, 4616, 10, 187, 3, 187, 3, 187, 3,
	187, 5, 187, 4621, 10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4627,
	10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4633, 10, 187, 3, 187,
	3, 187, 3, 187, 3, 187, 5, 187, 4639, 10, 187, 3, 187, 3, 187, 3, 187,
	7, 187, 4644, 10, 187, 12, 187, 14, 187, 4647, 11, 187, 3, 187, 5, 187,
	4650, 10, 187, 3, 187, 3, 187, 5, 187, 4654, 10, 187, 3, 187, 5, 187, 4657,
	10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187,
	3, 187, 3, 187, 3, 187, 3, 187, 5, 187, 4671, 10, 187, 3, 187, 3, 187,
	3, 187, 5, 187, 4676, 10, 187, 3, 187, 3, 187, 5, 187, 4680, 10, 187, 3,
	187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3,
	187, 3, 187, 5, 187, 4693, 10, 187, 3, 187, 5, 187, 4696, 10, 187, 5, 187,
	4698, 10, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 5, 187,
	4706, 10, 187, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188, 3, 188,
	3, 188, 3, 188, 5, 188, 4717, 10, 188, 3, 188, 3, 188, 3, 188, 3, 188,
	3, 188, 7, 188, 4724, 10, 188, 12, 188, 14, 188, 4727, 11, 188, 3, 188,
	3, 188, 3, 188, 3, 188, 3, 188, 3, 188, 5, 188, 4735, 10, 188, 3, 189,
	3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 5, 189,
	4746, 10, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 7, 189, 4753, 10,
	189, 12, 189, 14, 189, 4756, 11, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3,
	189, 3, 189, 5, 189, 4764, 10, 189, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 4776, 10, 190, 3,
	190, 3, 190, 5, 190, 4780, 10, 190, 3, 190, 3, 190, 3, 190, 6, 190, 4785,
	10, 190, 13, 190, 14, 190, 4786, 5, 190, 4789, 10, 190, 3, 190, 3, 190,
	3, 190, 5, 190, 4794, 10, 190, 3, 190, 3, 190, 5, 190, 4798, 10, 190, 3,
	190, 3, 190, 3, 190, 6, 190, 4803, 10, 190, 13, 190, 14, 190, 4804, 5,
	190, 4807, 10, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 4821, 10, 190, 3,
	190, 3, 190, 3, 190, 5, 190, 4826, 10, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 4848,
	10, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190,
	3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190,
	3, 190, 3, 190, 3, 190, 5, 190, 4870, 10, 190, 3, 190, 3, 190, 3, 190,
	5, 190, 4875, 10, 190, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191,
	3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 5, 191, 4888, 10, 191, 3, 192,
	3, 192, 3, 192, 3, 192, 3, 192, 3, 192, 5, 192, 4896, 10, 192, 3, 193,
	3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 193, 3, 194, 3, 194,
	3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 3, 194, 5, 194,
	4916, 10, 194, 3, 194, 5, 194, 4919, 10, 194, 3, 194, 3, 194, 7, 194, 4923,
	10, 194, 12, 194, 14, 194, 4926, 11, 194, 3, 195, 3, 195, 3, 195, 3, 195,
	3, 195, 5, 195, 4933, 10, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195,
	5, 195, 4940, 10, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4945, 10, 195, 3,
	195, 3, 195, 5, 195, 4949, 10, 195, 6, 195, 4951, 10, 195, 13, 195, 14,
	195, 4952, 3, 195, 5, 195, 4956, 10, 195, 3, 196, 3, 196, 3, 196, 3, 196,
	3, 196, 5, 196, 4963, 10, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196,
	3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196,
	3, 196, 3, 196, 5, 196, 4981, 10, 196, 5, 196, 4983, 10, 196, 3, 197, 3,
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3,
	197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 3, 197, 5, 197, 5003,
	10, 197, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 5, 198, 5011,
	10, 198, 3, 198, 3, 198, 3, 198, 5, 198, 5016, 10, 198, 3, 198, 3, 198,
	3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198,
	3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 5, 198, 5034, 10, 198, 3, 198,
	3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198, 3, 198,
	3, 198, 3, 198, 3, 198, 5, 198, 5049, 10, 198, 5, 198, 5051, 10, 198, 3,
	199, 3, 199, 3, 199, 3, 199, 3, 199, 5, 199, 5058, 10, 199, 3, 199, 3,
	199, 3, 199, 3, 199, 3, 199, 5, 199, 5065, 10, 199, 3, 199, 3, 199, 3,
	199, 5, 199, 5070, 10, 199, 3, 199, 3, 199, 3, 199, 5, 199, 5075, 10, 199,
	3, 199, 3, 199, 3, 199, 3, 199, 5, 199, 5081, 10, 199, 3, 199, 3, 199,
	3, 199, 5, 199, 5086, 10, 199, 5, 199, 5088, 10, 199, 3, 200, 3, 200, 3,
	200, 3, 200, 3, 200, 5, 200, 5095, 10, 200, 3, 200, 3, 200, 3, 200, 3,
	200, 5, 200, 5101, 10, 200, 3, 200, 3, 200, 3, 200, 3, 200, 5, 200, 5107,
	10, 200, 3, 200, 5, 200, 5110, 10, 200, 3, 200, 3, 200, 3, 200, 3, 200,
	5, 200, 5116, 10, 200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200,
	6, 200, 5124, 10, 200, 13, 200, 14, 200, 5125, 3, 200, 5, 200, 5129, 10,
	200, 3, 200, 3, 200, 3, 200, 3, 200, 3, 200, 5, 200, 5136, 10, 200, 3,
	200, 5, 200, 5139, 10, 200, 3, 200, 3, 200, 3, 200, 6, 200, 5144, 10, 200,
	13, 200, 14, 200, 5145, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201,
	5, 201, 5154, 10, 201, 3, 201, 3, 201, 5, 201, 5158, 10, 201, 3, 201, 3,
	201, 3, 201, 3, 201, 5, 201, 5164, 10, 201, 3, 201, 3, 201, 3, 201, 7,
	201, 5169, 10, 201, 12, 201, 14, 201, 5172, 11, 201, 5, 201, 5174, 10,
	201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5181, 10, 201, 3,
	201, 3, 201, 3, 201, 3, 201, 5, 201, 5187, 10, 201, 3, 201, 3, 201, 3,
	201, 3, 201, 3, 201, 5, 201, 5194, 10, 201, 3, 201, 5, 201, 5197, 10, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5203, 10, 201, 3, 201, 3, 201,
	3, 201, 7, 201, 5208, 10, 201, 12, 201, 14, 201, 5211, 11, 201, 5, 201,
	5213, 10, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201,
	5221, 10, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5227, 10, 201, 3,
	201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5234, 10, 201, 3, 201, 5,
	201, 5237, 10, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5243, 10, 201,
	3, 201, 3, 201, 3, 201, 7, 201, 5248, 10, 201, 12, 201, 14, 201, 5251,
	11, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5258, 10, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5266, 10, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5272, 10, 201, 3, 201, 3, 201,
	3, 201, 7, 201, 5277, 10, 201, 12, 201, 14, 201, 5280, 11, 201, 3, 201,
	3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 3, 201, 5, 201, 5289, 10, 201,
	3, 201, 3, 201, 3, 201, 5, 201, 5294, 10, 201, 3, 202, 3, 202, 3, 202,
	3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 5, 202, 5304, 10, 202, 3, 202,
	3, 202, 3, 202, 3, 202, 5, 202, 5310, 10, 202, 3, 202, 3, 202, 3, 202,
	3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 3, 202, 5, 202, 5322, 10,
	202, 5, 202, 5324, 10, 202, 3, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5,
	203, 5331, 10, 203, 3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 5337, 10, 203,
	3, 203, 3, 203, 3, 203, 3, 203, 5, 203, 5343, 10, 203, 3, 203, 3, 203,
	3, 203, 3, 203, 5, 203, 5349, 10, 203, 3, 203, 3, 203, 3, 203, 6, 203,
	5354, 10, 203, 13, 203, 14, 203, 5355, 3, 204, 3, 204, 3, 204, 3, 204,
	3, 204, 5, 204, 5363, 10, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204,
	3, 204, 5, 204, 5371, 10, 204, 3, 204, 3, 204, 3, 204, 3, 204, 5, 204,
	5377, 10, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204,
	3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 6, 204, 5391, 10, 204, 13, 204,
	14, 204, 5392, 3, 204, 5, 204, 5396, 10, 204, 3, 204, 3, 204, 3, 204, 5,
	204, 5401, 10, 204, 5, 204, 5403, 10, 204, 3, 205, 3, 205, 3, 205, 3, 205,
	3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 5, 205, 5415, 10, 205,
	3, 205, 3, 205, 3, 205, 3, 205, 5, 205, 5421, 10, 205, 3, 205, 3, 205,
	3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 205,
	3, 205, 6, 205, 5435, 10, 205, 13, 205, 14, 205, 5436, 3, 205, 5, 205,
	5440, 10, 205, 3, 205, 3, 205, 3, 205, 5, 205, 5445, 10, 205, 3, 205, 5,
	205, 5448, 10, 205, 3, 205, 3, 205, 3, 205, 5, 205, 5453, 10, 205, 5, 205,
	5455, 10, 205, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206,
	5, 206, 5464, 10, 206, 3, 206, 3, 206, 3, 206, 3, 206, 3, 206, 5, 206,
	5471, 10, 206, 3, 207, 3, 207, 3, 207, 3, 207, 5, 207, 5477, 10, 207, 3,
	207, 5, 207, 5480, 10, 207, 3, 207, 3, 207, 3, 207, 5, 207, 5485, 10, 207,
	3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 5492, 10, 208, 5, 208,
	5494, 10, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 5500, 10, 208, 5,
	208, 5502, 10, 208, 3, 208, 3, 208, 3, 208, 5, 208, 5507, 10, 208, 3, 208,
	3, 208, 3, 208, 5, 208, 5512, 10, 208, 3, 208, 5, 208, 5515, 10, 208, 3,
	208, 3, 208, 3, 208, 5, 208, 5520, 10, 208, 3, 208, 5, 208, 5523, 10, 208,
	3, 208, 3, 208, 3, 208, 5, 208, 5528, 10, 208, 3, 208, 5, 208, 5531, 10,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 5538, 10, 208, 5,
	208, 5540, 10, 208, 3, 208, 5, 208, 5543, 10, 208, 3, 208, 3, 208, 3, 208,
	3, 208, 5, 208, 5549, 10, 208, 3, 208, 5, 208, 5552, 10, 208, 3, 208, 5,
	208, 5555, 10, 208, 3, 208, 5, 208, 5558, 10, 208, 3, 209, 3, 209, 3, 209,
	3, 209, 5, 209, 5564, 10, 209, 3, 209, 3, 209, 5, 209, 5568, 10, 209, 3,
	210, 3, 210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 5576, 10, 210, 3,
	210, 3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 5583, 10, 210, 3, 210, 3,
	210, 3, 210, 3, 210, 5, 210, 5589, 10, 210, 5, 210, 5591, 10, 210, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 212, 3, 212, 3, 212, 3, 212, 3, 212, 5, 212,
	5602, 10, 212, 3, 212, 3, 212, 3, 212, 5, 212, 5607, 10, 212, 3, 212, 3,
	212, 3, 212, 3, 212, 5, 212, 5613, 10, 212, 6, 212, 5615, 10, 212, 13,
	212, 14, 212, 5616, 3, 212, 3, 212, 3, 213, 3, 213, 3, 213, 3, 213, 3,
	213, 3, 213, 5, 213, 5627, 10, 213, 3, 214, 3, 214, 3, 214, 3, 214, 3,
	214, 3, 214, 5, 214, 5635, 10, 214, 3, 214, 3, 214, 3, 214, 3, 214, 3,
	214, 3, 214, 3, 214, 3, 214, 3, 214, 3, 214, 5, 214, 5647, 10, 214, 3,
	215, 5, 215, 5650, 10, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3,
	215, 5, 215, 5658, 10, 215, 5, 215, 5660, 10, 215, 3, 215, 5, 215, 5663,
	10, 215, 3, 215, 3, 215, 5, 215, 5667, 10, 215, 3, 215, 5, 215, 5670, 10,
	215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 5,
	215, 5680, 10, 215, 3, 215, 3, 215, 7, 215, 5684, 10, 215, 12, 215, 14,
	215, 5687, 11, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 5, 215, 5694,
	10, 215, 3, 215, 3, 215, 5, 215, 5698, 10, 215, 3, 215, 3, 215, 5, 215,
	5702, 10, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215, 3, 215,
	5, 215, 5711, 10, 215, 3, 215, 3, 215, 7, 215, 5715, 10, 215, 12, 215,
	14, 215, 5718, 11, 215, 3, 215, 5, 215, 5721, 10, 215, 3, 215, 5, 215,
	5724, 10, 215, 3, 215, 3, 215, 3, 216, 3, 216, 3, 216, 3, 216, 3, 216,
	7, 216, 5733, 10, 216, 12, 216, 14, 216, 5736, 11, 216, 3, 216, 5, 216,
	5739, 10, 216, 3, 217, 3, 217, 3, 217, 3, 217, 3, 217, 5, 217, 5746, 10,
	217, 3, 217, 3, 217, 3, 217, 5, 217, 5751, 10, 217, 3, 218, 5, 218, 5754,
	10, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 5, 218, 5762,
	10, 218, 5, 218, 5764, 10, 218, 3, 218, 5, 218, 5767, 10, 218, 3, 218,
	3, 218, 5, 218, 5771, 10, 218, 3, 218, 5, 218, 5774, 10, 218, 3, 218, 3,
	218, 5, 218, 5778, 10, 218, 3, 218, 3, 218, 3, 218, 3, 218, 3, 218, 5,
	218, 5785, 10, 218, 3, 218, 3, 218, 5, 218, 5789, 10, 218, 5, 218, 5791,
	10, 218, 5, 218, 5793, 10, 218, 3, 218, 5, 218, 5796, 10, 218, 3, 218,
	5, 218, 5799, 10, 218, 3, 218, 5, 218, 5802, 10, 218, 3, 219, 3, 219, 3,
	219, 3, 219, 5, 219, 5808, 10, 219, 3, 220, 5, 220, 5811, 10, 220, 3, 220,
	3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 5819, 10, 220, 5, 220,
	5821, 10, 220, 3, 220, 5, 220, 5824, 10, 220, 3, 220, 3, 220, 5, 220, 5828,
	10, 220, 3, 220, 5, 220, 5831, 10, 220, 3, 220, 3, 220, 3, 220, 3, 220,
	5, 220, 5837, 10, 220, 3, 220, 5, 220, 5840, 10, 220, 3, 220, 3, 220, 5,
	220, 5844, 10, 220, 3, 220, 5, 220, 5847, 10, 220, 3, 220, 5, 220, 5850,
	10, 220, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221, 5, 221, 5857, 10, 221,
	3, 222, 5, 222, 5860, 10, 222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222,
	5, 222, 5867, 10, 222, 3, 222, 3, 222, 3, 222, 3, 222, 5, 222, 5873, 10,
	222, 7, 222, 5875, 10, 222, 12, 222, 14, 222, 5878, 11, 222, 3, 222, 3,
	222, 3, 222, 3, 222, 3, 222, 3, 222, 3, 222, 5, 222, 5887, 10, 222, 3,
	222, 5, 222, 5890, 10, 222, 3, 223, 5, 223, 5893, 10, 223, 3, 223, 3, 223,
	5, 223, 5897, 10, 223, 3, 223, 5, 223, 5900, 10, 223, 3, 223, 5, 223, 5903,
	10, 223, 3, 223, 5, 223, 5906, 10, 223, 3, 224, 3, 224, 5, 224, 5910, 10,
	224, 3, 225, 5, 225, 5913, 10, 225, 3, 225, 3, 225, 3, 225, 3, 225, 3,
	225, 3, 225, 5, 225, 5921, 10, 225, 5, 225, 5923, 10, 225, 3, 225, 3, 225,
	5, 225, 5927, 10, 225, 3, 225, 5, 225, 5930, 10, 225, 3, 225, 3, 225, 3,
	225, 3, 225, 7, 225, 5936, 10, 225, 12, 225, 14, 225, 5939, 11, 225, 3,
	225, 5, 225, 5942, 10, 225, 3, 225, 3, 225, 5, 225, 5946, 10, 225, 3, 225,
	3, 225, 3, 225, 3, 225, 3, 225, 5, 225, 5953, 10, 225, 3, 225, 3, 225,
	5, 225, 5957, 10, 225, 5, 225, 5959, 10, 225, 5, 225, 5961, 10, 225, 3,
	225, 5, 225, 5964, 10, 225, 3, 225, 5, 225, 5967, 10, 225, 3, 225, 5, 225,
	5970, 10, 225, 3, 226, 3, 226, 3, 226, 3, 226, 7, 226, 5976, 10, 226, 12,
	226, 14, 226, 5979, 11, 226, 3, 226, 3, 226, 3, 226, 5, 226, 5984, 10,
	226, 3, 226, 3, 226, 3, 226, 3, 226, 5, 226, 5990, 10, 226, 5, 226, 5992,
	10, 226, 3, 227, 3, 227, 5, 227, 5996, 10, 227, 3, 227, 5, 227, 5999, 10,
	227, 3, 228, 3, 228, 3, 228, 5, 228, 6004, 10, 228, 3, 228, 3, 228, 3,
	228, 5, 228, 6009, 10, 228, 3, 228, 5, 228, 6012, 10, 228, 3, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 3, 229, 5, 229, 6020, 10, 229, 3, 229, 3, 229,
	5, 229, 6024, 10, 229, 3, 229, 3, 229, 3, 229, 7, 229, 6029, 10, 229, 12,
	229, 14, 229, 6032, 11, 229, 5, 229, 6034, 10, 229, 3, 229, 3, 229, 3,
	229, 3, 229, 3, 229, 7, 229, 6041, 10, 229, 12, 229, 14, 229, 6044, 11,
	229, 5, 229, 6046, 10, 229, 3, 229, 3, 229, 5, 229, 6050, 10, 229, 3, 229,
	3, 229, 3, 229, 3, 229, 7, 229, 6056, 10, 229, 12, 229, 14, 229, 6059,
	11, 229, 5, 229, 6061, 10, 229, 3, 230, 3, 230, 5, 230, 6065, 10, 230,
	3, 230, 5, 230, 6068, 10, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230,
	3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 5, 230, 6082, 10,
	230, 3, 230, 3, 230, 5, 230, 6086, 10, 230, 3, 230, 5, 230, 6089, 10, 230,
	3, 230, 3, 230, 5, 230, 6093, 10, 230, 3, 230, 5, 230, 6096, 10, 230, 3,
	231, 3, 231, 3, 231, 5, 231, 6101, 10, 231, 3, 231, 5, 231, 6104, 10, 231,
	3, 231, 3, 231, 3, 231, 3, 231, 5, 231, 6110, 10, 231, 3, 231, 5, 231,
	6113, 10, 231, 3, 231, 3, 231, 3, 231, 7, 231, 6118, 10, 231, 12, 231,
	14, 231, 6121, 11, 231, 3, 231, 5, 231, 6124, 10, 231, 5, 231, 6126, 10,
	231, 3, 231, 3, 231, 3, 231, 3, 231, 7, 231, 6132, 10, 231, 12, 231, 14,
	231, 6135, 11, 231, 5, 231, 6137, 10, 231, 3, 231, 3, 231, 5, 231, 6141,
	10, 231, 3, 231, 3, 231, 3, 231, 3, 232, 3, 232, 5, 232, 6148, 10, 232,
	3, 233, 3, 233, 3, 233, 5, 233, 6153, 10, 233, 3, 233, 5, 233, 6156, 10,
	233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 3, 233, 7,
	233, 6166, 10, 233, 12, 233, 14, 233, 6169, 11, 233, 5, 233, 6171, 10,
	233, 3, 233, 3, 233, 3, 233, 3, 233, 5, 233, 6177, 10, 233, 3, 233, 3,
	233, 3, 233, 7, 233, 6182, 10, 233, 12, 233, 14, 233, 6185, 11, 233, 3,
	233, 3, 233, 5, 233, 6189, 10, 233, 3, 233, 3, 233, 3, 233, 5, 233, 6194,
	10, 233, 3, 233, 3, 233, 3, 233, 3, 234, 3, 234, 5, 234, 6201, 10, 234,
	3, 235, 3, 235, 3, 236, 3, 236, 3, 236, 5, 236, 6208, 10, 236, 3, 236,
	5, 236, 6211, 10, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236,
	5, 236, 6219, 10, 236, 3, 236, 3, 236, 3, 236, 3, 236, 7, 236, 6225, 10,
	236, 12, 236, 14, 236, 6228, 11, 236, 5, 236, 6230, 10, 236, 3, 236, 3,
	236, 3, 236, 3, 236, 7, 236, 6236, 10, 236, 12, 236, 14, 236, 6239, 11,
	236, 3, 236, 3, 236, 3, 236, 3, 237, 3, 237, 3, 238, 3, 238, 3, 238, 5,
	238, 6249, 10, 238, 3, 238, 5, 238, 6252, 10, 238, 3, 238, 3, 238, 3, 238,
	3, 238, 3, 238, 3, 238, 7, 238, 6260, 10, 238, 12, 238, 14, 238, 6263,
	11, 238, 3, 238, 3, 238, 3, 238, 3, 238, 5, 238, 6269, 10, 238, 3, 238,
	3, 238, 3, 238, 5, 238, 6274, 10, 238, 3, 238, 5, 238, 6277, 10, 238, 3,
	239, 3, 239, 3, 239, 3, 239, 3, 239, 3, 239, 7, 239, 6285, 10, 239, 12,
	239, 14, 239, 6288, 11, 239, 5, 239, 6290, 10, 239, 3, 239, 5, 239, 6293,
	10, 239, 3, 239, 3, 239, 3, 239, 3, 240, 3, 240, 3, 240, 3, 240, 3, 240,
	3, 240, 3, 240, 7, 240, 6305, 10, 240, 12, 240, 14, 240, 6308, 11, 240,
	5, 240, 6310, 10, 240, 3, 240, 5, 240, 6313, 10, 240, 3, 240, 3, 240, 7,
	240, 6317, 10, 240, 12, 240, 14, 240, 6320, 11, 240, 3, 240, 3, 240, 3,
	240, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241, 7, 241, 6331, 10,
	241, 12, 241, 14, 241, 6334, 11, 241, 5, 241, 6336, 10, 241, 3, 241, 5,
	241, 6339, 10, 241, 3, 241, 3, 241, 7, 241, 6343, 10, 241, 12, 241, 14,
	241, 6346, 11, 241, 3, 241, 3, 241, 3, 241, 5, 241, 6351, 10, 241, 3, 241,
	3, 241, 3, 242, 3, 242, 3, 242, 3, 242, 5, 242, 6359, 10, 242, 3, 242,
	5, 242, 6362, 10, 242, 3, 242, 3, 242, 5, 242, 6366, 10, 242, 3, 242, 3,
	242, 5, 242, 6370, 10, 242, 3, 242, 5, 242, 6373, 10, 242, 3, 243, 3, 243,
	3, 243, 5, 243, 6378, 10, 243, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244,
	3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 3, 244, 5, 244, 6392, 10,
	244, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 3,
	245, 3, 245, 3, 245, 3, 245, 3, 245, 3, 245, 5, 245, 6408, 10, 245, 3,
	245, 3, 245, 5, 245, 6412, 10, 245, 3, 245, 3, 245, 3, 245, 3, 245, 5,
	245, 6418, 10, 245, 5, 245, 6420, 10, 245, 3, 245, 5, 245, 6423, 10, 245,
	3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 3, 246, 5, 246, 6431, 10, 246,
	3, 246, 3, 246, 7, 246, 6435, 10, 246, 12, 246, 14, 246, 6438, 11, 246,
	3, 246, 3, 246, 3, 246, 5, 246, 6443, 10, 246, 3, 246, 3, 246, 3, 246,
	5, 246, 6448, 10, 246, 3, 246, 5, 246, 6451, 10, 246, 3, 247, 3, 247, 3,
	247, 3, 247, 3, 247, 7, 247, 6458, 10, 247, 12, 247, 14, 247, 6461, 11,
	247, 3, 247, 3, 247, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3, 248, 3,
	248, 5, 248, 6472, 10, 248, 3, 248, 3, 248, 3, 248, 3, 248, 7, 248, 6478,
	10, 248, 12, 248, 14, 248, 6481, 11, 248, 5, 248, 6483, 10, 248, 3, 248,
	3, 248, 3, 248, 3, 248, 3, 248, 5, 248, 6490, 10, 248, 3, 248, 5, 248,
	6493, 10, 248, 3, 249, 3, 249, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250,
	3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250,
	3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250,
	3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250,
	3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250,
	5, 250, 6538, 10, 250, 3, 250, 5, 250, 6541, 10, 250, 3, 251, 3, 251, 3,
	251, 3, 251, 5, 251, 6547, 10, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3,
	251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 5, 251, 6559, 10, 251, 5,
	251, 6561, 10, 251, 3, 251, 5, 251, 6564, 10, 251, 3, 252, 3, 252, 3, 252,
	3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252,
	3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252, 3, 252,
	3, 252, 3, 252, 5, 252, 6589, 10, 252, 3, 253, 3, 253, 3, 253, 3, 253,
	3, 253, 3, 253, 3, 253, 3, 253, 3, 253, 5, 253, 6600, 10, 253, 3, 253,
	3, 253, 3, 253, 3, 253, 3, 253, 3, 253, 5, 253, 6608, 10, 253, 3, 254,
	3, 254, 3, 254, 3, 254, 3, 254, 3, 254, 3, 254, 7, 254, 6617, 10, 254,
	12, 254, 14, 254, 6620, 11, 254, 7, 254, 6622, 10, 254, 12, 254, 14, 254,
	6625, 11, 254, 5, 254, 6627, 10, 254, 3, 255, 3, 255, 3, 255, 3, 255, 3,
	255, 3, 255, 5, 255, 6635, 10, 255, 3, 256, 3, 256, 3, 256, 3, 256, 3,
	257, 3, 257, 3, 257, 3, 257, 5, 257, 6645, 10, 257, 3, 258, 3, 258, 3,
	258, 3, 258, 3, 258, 5, 258, 6652, 10, 258, 3, 258, 3, 258, 3, 258, 3,
	258, 3, 258, 5, 258, 6659, 10, 258, 5, 258, 6661, 10, 258, 3, 258, 3, 258,
	3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 5, 258,
	6673, 10, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258,
	3, 258, 3, 258, 5, 258, 6684, 10, 258, 3, 258, 3, 258, 5, 258, 6688, 10,
	258, 3, 258, 3, 258, 3, 258, 5, 258, 6693, 10, 258, 3, 258, 5, 258, 6696,
	10, 258, 5, 258, 6698, 10, 258, 3, 258, 5, 258, 6701, 10, 258, 3, 258,
	3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258,
	5, 258, 6713, 10, 258, 5, 258, 6715, 10, 258, 5, 258, 6717, 10, 258, 3,
	258, 5, 258, 6720, 10, 258, 3, 258, 3, 258, 3, 258, 5, 258, 6725, 10, 258,
	3, 258, 5, 258, 6728, 10, 258, 3, 258, 3, 258, 3, 258, 5, 258, 6733, 10,
	258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 5,
	258, 6743, 10, 258, 3, 258, 3, 258, 5, 258, 6747, 10, 258, 3, 258, 3, 258,
	3, 258, 5, 258, 6752, 10, 258, 3, 258, 5, 258, 6755, 10, 258, 5, 258, 6757,
	10, 258, 3, 258, 5, 258, 6760, 10, 258, 3, 258, 3, 258, 3, 258, 3, 258,
	3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 5, 258, 6772, 10, 258,
	5, 258, 6774, 10, 258, 5, 258, 6776, 10, 258, 3, 258, 5, 258, 6779, 10,
	258, 3, 258, 3, 258, 3, 258, 3, 258, 5, 258, 6785, 10, 258, 3, 259, 3,
	259, 3, 260, 3, 260, 3, 260, 3, 260, 3, 260, 3, 260, 5, 260, 6795, 10,
	260, 3, 261, 3, 261, 3, 262, 3, 262, 3, 263, 3, 263, 3, 264, 3, 264, 3,
	264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3, 264, 3,
	264, 5, 264, 6815, 10, 264, 3, 265, 3, 265, 3, 265, 3, 265, 5, 265, 6821,
	10, 265, 3, 266, 3, 266, 3, 267, 3, 267, 3, 267, 3, 267, 3, 267, 3, 268,
	3, 268, 3, 269, 3, 269, 3, 269, 3, 269, 3, 270, 3, 270, 3, 271, 3, 271,
	3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 5, 271, 6846, 10, 271,
	5, 271, 6848, 10, 271, 3, 272, 3, 272, 3, 272, 3, 273, 3, 273, 3, 273,
	3, 274, 3, 274, 3, 275, 3, 275, 3, 276, 3, 276, 3, 277, 3, 277, 3, 277,
	3, 277, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278,
	5, 278, 6874, 10, 278, 3, 278, 3, 278, 3, 278, 3, 278, 5, 278, 6880, 10,
	278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3,
	278, 5, 278, 6891, 10, 278, 3, 279, 3, 279, 3, 279, 3, 279, 3, 279, 3,
	279, 5, 279, 6899, 10, 279, 3, 279, 5, 279, 6902, 10, 279, 3, 280, 3, 280,
	3, 280, 3, 281, 3, 281, 3, 281, 3, 282, 3, 282, 3, 282, 3, 282, 3, 282,
	3, 282, 5, 282, 6916, 10, 282, 3, 283, 3, 283, 3, 283, 3, 283, 3, 283,
	3, 283, 5, 283, 6924, 10, 283, 3, 284, 3, 284, 3, 284, 3, 284, 3, 284,
	5, 284, 6931, 10, 284, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285,
	3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285,
	3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 3, 285, 5, 285, 6954, 10, 285,
	3, 286, 3, 286, 3, 286, 3, 286, 3, 286, 3, 287, 3, 287, 3, 287, 3, 287,
	3, 287, 3, 287, 5, 287, 6967, 10, 287, 3, 288, 3, 288, 3, 288, 3, 288,
	5, 288, 6973, 10, 288, 3, 288, 3, 288, 3, 288, 7, 288, 6978, 10, 288, 12,
	288, 14, 288, 6981, 11, 288, 3, 288, 3, 288, 3, 288, 7, 288, 6986, 10,
	288, 12, 288, 14, 288, 6989, 11, 288, 5, 288, 6991, 10, 288, 3, 288, 5,
	288, 6994, 10, 288, 3, 289, 3, 289, 3, 289, 3, 289, 3, 290, 3, 290, 3,
	290, 5, 290, 7003, 10, 290, 3, 290, 3, 290, 3, 290, 3, 290, 3, 291, 3,
	291, 3, 291, 3, 291, 5, 291, 7013, 10, 291, 3, 291, 3, 291, 3, 291, 7,
	291, 7018, 10, 291, 12, 291, 14, 291, 7021, 11, 291, 3, 291, 5, 291, 7024,
	10, 291, 3, 292, 3, 292, 5, 292, 7028, 10, 292, 3, 293, 3, 293, 3, 293,
	3, 293, 5, 293, 7034, 10, 293, 3, 293, 3, 293, 3, 293, 7, 293, 7039, 10,
	293, 12, 293, 14, 293, 7042, 11, 293, 3, 293, 5, 293, 7045, 10, 293, 3,
	294, 3, 294, 3, 294, 3, 294, 5, 294, 7051, 10, 294, 3, 294, 3, 294, 3,
	294, 7, 294, 7056, 10, 294, 12, 294, 14, 294, 7059, 11, 294, 3, 294, 3,
	294, 3, 294, 3, 294, 5, 294, 7065, 10, 294, 3, 294, 5, 294, 7068, 10, 294,
	3, 295, 3, 295, 3, 295, 3, 295, 5, 295, 7074, 10, 295, 3, 295, 3, 295,
	3, 295, 7, 295, 7079, 10, 295, 12, 295, 14, 295, 7082, 11, 295, 3, 295,
	5, 295, 7085, 10, 295, 3, 296, 3, 296, 3, 296, 5, 296, 7090, 10, 296, 3,
	296, 3, 296, 3, 296, 5, 296, 7095, 10, 296, 3, 296, 6, 296, 7098, 10, 296,
	13, 296, 14, 296, 7099, 3, 296, 3, 296, 3, 297, 3, 297, 3, 297, 3, 297,
	5, 297, 7108, 10, 297, 3, 297, 3, 297, 5, 297, 7112, 10, 297, 3, 298, 3,
	298, 3, 298, 3, 298, 5, 298, 7118, 10, 298, 3, 298, 3, 298, 3, 298, 7,
	298, 7123, 10, 298, 12, 298, 14, 298, 7126, 11, 298, 3, 298, 5, 298, 7129,
	10, 298, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 5, 299,
	7138, 10, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 3, 299, 5, 299,
	7146, 10, 299, 3, 300, 3, 300, 3, 300, 3, 300, 5, 300, 7152, 10, 300, 3,
	300, 3, 300, 3, 301, 3, 301, 5, 301, 7158, 10, 301, 3, 302, 3, 302, 3,
	302, 3, 302, 3, 302, 3, 302, 3, 302, 3, 303, 3, 303, 3, 303, 3, 303, 3,
	303, 3, 303, 3, 303, 3, 303, 5, 303, 7175, 10, 303, 3, 303, 3, 303, 5,
	303, 7179, 10, 303, 3, 303, 3, 303, 3, 303, 3, 304, 3, 304, 3, 304, 5,
	304, 7187, 10, 304, 3, 304, 3, 304, 5, 304, 7191, 10, 304, 3, 304, 3, 304,
	3, 304, 3, 304, 7, 304, 7197, 10, 304, 12, 304, 14, 304, 7200, 11, 304,
	3, 304, 5, 304, 7203, 10, 304, 3, 304, 3, 304, 3, 304, 5, 304, 7208, 10,
	304, 3, 304, 3, 304, 5, 304, 7212, 10, 304, 3, 304, 3, 304, 3, 304, 3,
	304, 3, 304, 5, 304, 7219, 10, 304, 3, 304, 3, 304, 3, 304, 3, 304, 5,
	304, 7225, 10, 304, 5, 304, 7227, 10, 304, 3, 305, 3, 305, 5, 305, 7231,
	10, 305, 3, 305, 3, 305, 5, 305, 7235, 10, 305, 3, 305, 3, 305, 5, 305,
	7239, 10, 305, 3, 305, 3, 305, 5, 305, 7243, 10, 305, 3, 305, 3, 305, 3,
	305, 3, 305, 5, 305, 7249, 10, 305, 3, 305, 3, 305, 5, 305, 7253, 10, 305,
	5, 305, 7255, 10, 305, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 5, 306,
	7262, 10, 306, 3, 306, 3, 306, 3, 306, 7, 306, 7267, 10, 306, 12, 306,
	14, 306, 7270, 11, 306, 5, 306, 7272, 10, 306, 3, 306, 5, 306, 7275, 10,
	306, 3, 306, 3, 306, 3, 306, 7, 306, 7280, 10, 306, 12, 306, 14, 306, 7283,
	11, 306, 3, 306, 3, 306, 5, 306, 7287, 10, 306, 3, 306, 6, 306, 7290, 10,
	306, 13, 306, 14, 306, 7291, 3, 306, 3, 306, 5, 306, 7296, 10, 306, 3,
	306, 3, 306, 3, 306, 3, 306, 5, 306, 7302, 10, 306, 6, 306, 7304, 10, 306,
	13, 306, 14, 306, 7305, 5, 306, 7308, 10, 306, 3, 306, 3, 306, 3, 306,
	5, 306, 7313, 10, 306, 3, 306, 6, 306, 7316, 10, 306, 13, 306, 14, 306,
	7317, 6, 306, 7320, 10, 306, 13, 306, 14, 306, 7321, 3, 306, 3, 306, 3,
	306, 5, 306, 7327, 10, 306, 3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 7333,
	10, 306, 6, 306, 7335, 10, 306, 13, 306, 14, 306, 7336, 6, 306, 7339, 10,
	306, 13, 306, 14, 306, 7340, 5, 306, 7343, 10, 306, 3, 306, 3, 306, 5,
	306, 7347, 10, 306, 3, 306, 3, 306, 5, 306, 7351, 10, 306, 3, 306, 3, 306,
	5, 306, 7355, 10, 306, 3, 306, 3, 306, 5, 306, 7359, 10, 306, 3, 306, 3,
	306, 3, 306, 3, 306, 5, 306, 7365, 10, 306, 3, 306, 5, 306, 7368, 10, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 7374, 10, 306, 3, 306, 3, 306,
	5, 306, 7378, 10, 306, 3, 306, 3, 306, 5, 306, 7382, 10, 306, 3, 306, 3,
	306, 3, 306, 3, 306, 5, 306, 7388, 10, 306, 3, 306, 3, 306, 3, 306, 3,
	306, 5, 306, 7394, 10, 306, 5, 306, 7396, 10, 306, 3, 306, 5, 306, 7399,
	10, 306, 3, 306, 3, 306, 5, 306, 7403, 10, 306, 3, 306, 3, 306, 5, 306,
	7407, 10, 306, 3, 306, 3, 306, 5, 306, 7411, 10, 306, 3, 306, 3, 306, 3,
	306, 3, 306, 5, 306, 7417, 10, 306, 3, 306, 5, 306, 7420, 10, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 5, 306, 7426, 10, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 5, 306, 7432, 10, 306, 3, 306, 5, 306, 7435, 10, 306, 3, 306, 3,
	306, 3, 306, 3, 306, 5, 306, 7441, 10, 306, 3, 306, 5, 306, 7444, 10, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 7450, 10, 306, 3, 306, 5, 306,
	7453, 10, 306, 3, 306, 3, 306, 5, 306, 7457, 10, 306, 3, 306, 3, 306, 5,
	306, 7461, 10, 306, 3, 306, 3, 306, 5, 306, 7465, 10, 306, 3, 306, 3, 306,
	3, 306, 5, 306, 7470, 10, 306, 3, 306, 5, 306, 7473, 10, 306, 3, 306, 3,
	306, 5, 306, 7477, 10, 306, 3, 306, 3, 306, 5, 306, 7481, 10, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 3, 306,
	3, 306, 3, 306, 3, 306, 3, 306, 3, 306, 5, 306, 7498, 10, 306, 7, 306,
	7500, 10, 306, 12, 306, 14, 306, 7503, 11, 306, 5, 306, 7505, 10, 306,
	3, 307, 3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7512, 10, 307, 3, 307,
	6, 307, 7515, 10, 307, 13, 307, 14, 307, 7516, 3, 307, 3, 307, 5, 307,
	7521, 10, 307, 3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7527, 10, 307, 6,
	307, 7529, 10, 307, 13, 307, 14, 307, 7530, 5, 307, 7533, 10, 307, 3, 307,
	3, 307, 3, 307, 5, 307, 7538, 10, 307, 3, 307, 6, 307, 7541, 10, 307, 13,
	307, 14, 307, 7542, 6, 307, 7545, 10, 307, 13, 307, 14, 307, 7546, 3, 307,
	3, 307, 3, 307, 5, 307, 7552, 10, 307, 3, 307, 3, 307, 3, 307, 3, 307,
	5, 307, 7558, 10, 307, 6, 307, 7560, 10, 307, 13, 307, 14, 307, 7561, 6,
	307, 7564, 10, 307, 13, 307, 14, 307, 7565, 5, 307, 7568, 10, 307, 3, 307,
	3, 307, 5, 307, 7572, 10, 307, 3, 307, 3, 307, 5, 307, 7576, 10, 307, 3,
	307, 3, 307, 5, 307, 7580, 10, 307, 3, 307, 3, 307, 5, 307, 7584, 10, 307,
	3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7590, 10, 307, 3, 307, 5, 307,
	7593, 10, 307, 3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7599, 10, 307, 3,
	307, 3, 307, 5, 307, 7603, 10, 307, 3, 307, 3, 307, 5, 307, 7607, 10, 307,
	3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7613, 10, 307, 3, 307, 3, 307,
	3, 307, 3, 307, 5, 307, 7619, 10, 307, 5, 307, 7621, 10, 307, 3, 307, 5,
	307, 7624, 10, 307, 3, 307, 3, 307, 5, 307, 7628, 10, 307, 3, 307, 3, 307,
	5, 307, 7632, 10, 307, 3, 307, 3, 307, 5, 307, 7636, 10, 307, 3, 307, 3,
	307, 3, 307, 3, 307, 5, 307, 7642, 10, 307, 3, 307, 5, 307, 7645, 10, 307,
	3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7651, 10, 307, 3, 307, 3, 307,
	3, 307, 3, 307, 5, 307, 7657, 10, 307, 3, 307, 5, 307, 7660, 10, 307, 3,
	307, 3, 307, 3, 307, 3, 307, 5, 307, 7666, 10, 307, 3, 307, 5, 307, 7669,
	10, 307, 3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7675, 10, 307, 3, 307,
	5, 307, 7678, 10, 307, 3, 307, 3, 307, 5, 307, 7682, 10, 307, 3, 307, 3,
	307, 5, 307, 7686, 10, 307, 3, 307, 3, 307, 5, 307, 7690, 10, 307, 3, 307,
	3, 307, 3, 307, 5, 307, 7695, 10, 307, 3, 307, 5, 307, 7698, 10, 307, 3,
	307, 3, 307, 5, 307, 7702, 10, 307, 3, 307, 3, 307, 5, 307, 7706, 10, 307,
	3, 307, 3, 307, 3, 307, 3, 307, 5, 307, 7712, 10, 307, 3, 307, 5, 307,
	7715, 10, 307, 3, 307, 3, 307, 5, 307, 7719, 10, 307, 3, 307, 3, 307, 3,
	307, 3, 307, 3, 307, 3, 307, 3, 307, 3, 307, 3, 307, 3, 307, 3, 307, 3,
	307, 3, 307, 3, 307, 3, 307, 5, 307, 7736, 10, 307, 7, 307, 7738, 10, 307,
	12, 307, 14, 307, 7741, 11, 307, 5, 307, 7743, 10, 307, 3, 308, 3, 308,
	3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308,
	3, 308, 5, 308, 7757, 10, 308, 3, 308, 3, 308, 3, 308, 3, 308, 5, 308,
	7763, 10, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 5, 308,
	7771, 10, 308, 3, 308, 3, 308, 3, 308, 3, 308, 3, 308, 6, 308, 7778, 10,
	308, 13, 308, 14, 308, 7779, 3, 308, 5, 308, 7783, 10, 308, 3, 309, 3,
	309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3, 309, 3,
	309, 3, 309, 3, 309, 3, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3,
	310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 310, 3, 311, 3,
	311, 3, 311, 5, 311, 7815, 10, 311, 3, 311, 3, 311, 5, 311, 7819, 10, 311,
	3, 311, 3, 311, 3, 311, 7, 311, 7824, 10, 311, 12, 311, 14, 311, 7827,
	11, 311, 5, 311, 7829, 10, 311, 3, 311, 5, 311, 7832, 10, 311, 3, 311,
	3, 311, 3, 311, 3, 311, 3, 311, 7, 311, 7839, 10, 311, 12, 311, 14, 311,
	7842, 11, 311, 3, 311, 3, 311, 5, 311, 7846, 10, 311, 3, 311, 3, 311, 3,
	311, 5, 311, 7851, 10, 311, 3, 311, 5, 311, 7854, 10, 311, 5, 311, 7856,
	10, 311, 3, 312, 3, 312, 5, 312, 7860, 10, 312, 3, 312, 3, 312, 5, 312,
	7864, 10, 312, 3, 312, 5, 312, 7867, 10, 312, 3, 312, 3, 312, 5, 312, 7871,
	10, 312, 3, 313, 3, 313, 3, 314, 3, 314, 5, 314, 7877, 10, 314, 3, 314,
	3, 314, 3, 314, 5, 314, 7882, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314,
	3, 314, 5, 314, 7889, 10, 314, 5, 314, 7891, 10, 314, 3, 314, 3, 314, 5,
	314, 7895, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314, 7, 314, 7901, 10, 314,
	12, 314, 14, 314, 7904, 11, 314, 3, 314, 3, 314, 3, 314, 5, 314, 7909,
	10, 314, 3, 314, 3, 314, 5, 314, 7913, 10, 314, 3, 314, 5, 314, 7916, 10,
	314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 3, 314, 5, 314, 7925,
	10, 314, 3, 314, 5, 314, 7928, 10, 314, 3, 314, 3, 314, 3, 314, 3, 314,
	5, 314, 7934, 10, 314, 3, 315, 3, 315, 3, 315, 3, 315, 3, 315, 5, 315,
	7941, 10, 315, 3, 315, 3, 315, 3, 315, 5, 315, 7946, 10, 315, 3, 315, 3,
	315, 3, 315, 3, 315, 3, 315, 3, 315, 5, 315, 7954, 10, 315, 3, 316, 3,
	316, 3, 316, 5, 316, 7959, 10, 316, 3, 316, 3, 316, 3, 316, 3, 316, 3,
	316, 3, 316, 3, 316, 3, 316, 3, 316, 3, 316, 5, 316, 7971, 10, 316, 5,
	316, 7973, 10, 316, 3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 3, 317, 3,
	317, 3, 317, 3, 317, 5, 317, 7984, 10, 317, 3, 318, 3, 318, 3, 318, 3,
	318, 3, 318, 5, 318, 7991, 10, 318, 3, 318, 3, 318, 3, 318, 3, 318, 3,
	318, 3, 318, 7, 318, 7999, 10, 318, 12, 318, 14, 318, 8002, 11, 318, 3,
	319, 3, 319, 3, 319, 3, 319, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3,
	320, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3, 320, 3,
	320, 3, 320, 5, 320, 8024, 10, 320, 3, 321, 3, 321, 3, 321, 3, 321, 3,
	321, 3, 321, 3, 321, 3, 321, 3, 321, 3, 321, 3, 321, 5, 321, 8037, 10,
	321, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 3,
	322, 3, 322, 3, 322, 3, 322, 3, 322, 3, 322, 5, 322, 8053, 10, 322, 3,
	322, 3, 322, 3, 322, 5, 322, 8058, 10, 322, 3, 322, 3, 322, 3, 322, 3,
	322, 3, 322, 5, 322, 8065, 10, 322, 3, 322, 5, 322, 8068, 10, 322, 6, 322,
	8070, 10, 322, 13, 322, 14, 322, 8071, 5, 322, 8074, 10, 322, 3, 323, 3,
	323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3, 323, 3,
	323, 3, 323, 3, 323, 3, 323, 3, 323, 5, 323, 8091, 10, 323, 3, 324, 3,
	324, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3, 325, 3,
	325, 3, 325, 3, 325, 5, 325, 8106, 10, 325, 3, 326, 3, 326, 3, 326, 3,
	326, 3, 326, 3, 326, 5, 326, 8114, 10, 326, 3, 326, 3, 326, 3, 326, 3,
	326, 3, 326, 3, 326, 3, 326, 5, 326, 8123, 10, 326, 3, 326, 3, 326, 3,
	326, 3, 326, 3, 326, 3, 326, 5, 326, 8131, 10, 326, 3, 327, 3, 327, 3,
	327, 3, 327, 3, 327, 3, 327, 3, 327, 5, 327, 8140, 10, 327, 3, 327, 3,
	327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 3, 327, 5, 327, 8151,
	10, 327, 3, 327, 3, 327, 5, 327, 8155, 10, 327, 5, 327, 8157, 10, 327,
	5, 327, 8159, 10, 327, 3, 328, 3, 328, 3, 328, 3, 328, 5, 328, 8165, 10,
	328, 3, 328, 3, 328, 3, 328, 5, 328, 8170, 10, 328, 3, 328, 3, 328, 3,
	328, 3, 328, 3, 328, 5, 328, 8177, 10, 328, 3, 328, 3, 328, 3, 328, 3,
	328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 3, 328, 5, 328, 8190,
	10, 328, 5, 328, 8192, 10, 328, 5, 328, 8194, 10, 328, 3, 328, 5, 328,
	8197, 10, 328, 3, 328, 5, 328, 8200, 10, 328, 3, 329, 3, 329, 3, 329, 3,
	329, 3, 329, 5, 329, 8207, 10, 329, 3, 329, 5, 329, 8210, 10, 329, 3, 329,
	3, 329, 3, 329, 3, 329, 5, 329, 8216, 10, 329, 3, 329, 3, 329, 3, 329,
	5, 329, 8221, 10, 329, 5, 329, 8223, 10, 329, 3, 329, 5, 329, 8226, 10,
	329, 3, 329, 3, 329, 3, 329, 3, 329, 5, 329, 8232, 10, 329, 3, 329, 3,
	329, 3, 329, 3, 329, 3, 329, 3, 329, 5, 329, 8240, 10, 329, 5, 329, 8242,
	10, 329, 3, 329, 5, 329, 8245, 10, 329, 3, 329, 3, 329, 5, 329, 8249, 10,
	329, 3, 329, 5, 329, 8252, 10, 329, 3, 329, 3, 329, 3, 329, 3, 329, 5,
	329, 8258, 10, 329, 3, 329, 5, 329, 8261, 10, 329, 3, 329, 3, 329, 5, 329,
	8265, 10, 329, 3, 329, 5, 329, 8268, 10, 329, 3, 329, 3, 329, 3, 329, 3,
	329, 5, 329, 8274, 10, 329, 3, 329, 5, 329, 8277, 10, 329, 5, 329, 8279,
	10, 329, 3, 330, 3, 330, 5, 330, 8283, 10, 330, 3, 331, 3, 331, 3, 331,
	5, 331, 8288, 10, 331, 3, 332, 3, 332, 3, 332, 3, 332, 3, 332, 3, 332,
	5, 332, 8296, 10, 332, 3, 332, 3, 332, 5, 332, 8300, 10, 332, 3, 332, 5,
	332, 8303, 10, 332, 3, 333, 3, 333, 3, 333, 5, 333, 8308, 10, 333, 3, 334,
	3, 334, 3, 334, 3, 334, 3, 335, 3, 335, 5, 335, 8316, 10, 335, 3, 335,
	3, 335, 3, 335, 5, 335, 8321, 10, 335, 3, 336, 3, 336, 3, 336, 3, 336,
	3, 336, 3, 337, 3, 337, 3, 337, 5, 337, 8331, 10, 337, 3, 337, 3, 337,
	3, 337, 3, 338, 3, 338, 3, 338, 3, 338, 3, 339, 3, 339, 5, 339, 8342, 10,
	339, 3, 339, 7, 339, 8345, 10, 339, 12, 339, 14, 339, 8348, 11, 339, 3,
	340, 3, 340, 5, 340, 8352, 10, 340, 3, 341, 3, 341, 3, 341, 3, 341, 5,
	341, 8358, 10, 341, 3, 341, 3, 341, 5, 341, 8362, 10, 341, 3, 341, 5, 341,
	8365, 10, 341, 3, 341, 3, 341, 5, 341, 8369, 10, 341, 3, 341, 3, 341, 5,
	341, 8373, 10, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 3, 341, 5,
	341, 8381, 10, 341, 3, 341, 3, 341, 3, 341, 5, 341, 8386, 10, 341, 5, 341,
	8388, 10, 341, 3, 341, 5, 341, 8391, 10, 341, 3, 341, 7, 341, 8394, 10,
	341, 12, 341, 14, 341, 8397, 11, 341, 3, 342, 3, 342, 5, 342, 8401, 10,
	342, 3, 342, 3, 342, 3, 342, 5, 342, 8406, 10, 342, 3, 342, 5, 342, 8409,
	10, 342, 3, 342, 5, 342, 8412, 10, 342, 3, 342, 3, 342, 3, 342, 3, 342,
	5, 342, 8418, 10, 342, 3, 342, 3, 342, 3, 342, 3, 342, 3, 342, 3, 342,
	5, 342, 8426, 10, 342, 3, 342, 3, 342, 3, 342, 3, 342, 3, 342, 3, 342,
	5, 342, 8434, 10, 342, 3, 342, 5, 342, 8437, 10, 342, 3, 342, 5, 342, 8440,
	10, 342, 3, 343, 3, 343, 5, 343, 8444, 10, 343, 3, 343, 3, 343, 3, 343,
	5, 343, 8449, 10, 343, 3, 343, 5, 343, 8452, 10, 343, 3, 343, 3, 343, 3,
	343, 3, 343, 5, 343, 8458, 10, 343, 3, 343, 3, 343, 5, 343, 8462, 10, 343,
	3, 343, 3, 343, 3, 343, 3, 343, 5, 343, 8468, 10, 343, 3, 343, 3, 343,
	3, 343, 3, 343, 3, 343, 3, 343, 5, 343, 8476, 10, 343, 3, 343, 3, 343,
	3, 343, 3, 343, 6, 343, 8482, 10, 343, 13, 343, 14, 343, 8483, 3, 343,
	5, 343, 8487, 10, 343, 3, 343, 3, 343, 3, 343, 3, 343, 3, 343, 3, 343,
	3, 343, 3, 343, 3, 343, 3, 343, 3, 343, 3, 343, 3, 343, 5, 343, 8502, 10,
	343, 3, 343, 5, 343, 8505, 10, 343, 5, 343, 8507, 10, 343, 3, 344, 3, 344,
	3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 3, 344, 5, 344, 8518, 10,
	344, 3, 345, 3, 345, 3, 345, 3, 345, 3, 345, 3, 345, 3, 345, 3, 345, 3,
	345, 5, 345, 8529, 10, 345, 3, 346, 3, 346, 3, 346, 3, 346, 3, 346, 7,
	346, 8536, 10, 346, 12, 346, 14, 346, 8539, 11, 346, 3, 346, 3, 346, 3,
	347, 3, 347, 3, 347, 3, 347, 3, 347, 5, 347, 8548, 10, 347, 3, 348, 3,
	348, 3, 348, 3, 348, 3, 348, 3, 348, 3, 348, 3, 348, 5, 348, 8558, 10,
	348, 5, 348, 8560, 10, 348, 5, 348, 8562, 10, 348, 3, 348, 5, 348, 8565,
	10, 348, 3, 348, 5, 348, 8568, 10, 348, 3, 348, 3, 348, 3, 348, 3, 348,
	3, 348, 3, 348, 3, 348, 3, 348, 3, 348, 5, 348, 8579, 10, 348, 5, 348,
	8581, 10, 348, 5, 348, 8583, 10, 348, 3, 348, 5, 348, 8586, 10, 348, 3,
	349, 7, 349, 8589, 10, 349, 12, 349, 14, 349, 8592, 11, 349, 3, 349, 3,
	349, 3, 349, 3, 350, 3, 350, 3, 350, 3, 350, 3, 350, 5, 350, 8602, 10,
	350, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 5, 351, 8611,
	10, 351, 3, 351, 5, 351, 8614, 10, 351, 3, 351, 5, 351, 8617, 10, 351,
	3, 351, 3, 351, 3, 351, 3, 351, 3, 351, 7, 351, 8624, 10, 351, 12, 351,
	14, 351, 8627, 11, 351, 5, 351, 8629, 10, 351, 3, 351, 5, 351, 8632, 10,
	351, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 5, 352, 8639, 10, 352, 3,
	352, 5, 352, 8642, 10, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3,
	352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 5, 352, 8656, 10,
	352, 3, 352, 5, 352, 8659, 10, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3,
	352, 5, 352, 8666, 10, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3,
	352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 3, 352, 5,
	352, 8682, 10, 352, 3, 353, 3, 353, 5, 353, 8686, 10, 353, 3, 354, 3, 354,
	3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 5, 354, 8696, 10, 354,
	3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354,
	3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 3, 354, 7, 354,
	8715, 10, 354, 12, 354, 14, 354, 8718, 11, 354, 3, 355, 3, 355, 3, 355,
	3, 355, 5, 355, 8724, 10, 355, 3, 356, 3, 356, 3, 356, 6, 356, 8729, 10,
	356, 13, 356, 14, 356, 8730, 3, 356, 3, 356, 5, 356, 8735, 10, 356, 3,
	356, 3, 356, 3, 356, 3, 356, 6, 356, 8741, 10, 356, 13, 356, 14, 356, 8742,
	3, 356, 3, 356, 5, 356, 8747, 10, 356, 3, 356, 3, 356, 5, 356, 8751, 10,
	356, 3, 357, 3, 357, 3, 357, 3, 357, 5, 357, 8757, 10, 357, 3, 358, 3,
	358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 3, 358, 5, 358, 8767, 10,
	358, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 3, 359, 5,
	359, 8777, 10, 359, 3, 360, 3, 360, 3, 361, 3, 361, 3, 361, 5, 361, 8784,
	10, 361, 3, 361, 3, 361, 3, 361, 7, 361, 8789, 10, 361, 12, 361, 14, 361,
	8792, 11, 361, 3, 361, 3, 361, 3, 361, 3, 361, 3, 361, 3, 361, 5, 361,
	8800, 10, 361, 3, 361, 3, 361, 3, 361, 3, 361, 3, 361, 5, 361, 8807, 10,
	361, 3, 362, 3, 362, 3, 362, 3, 362, 3, 362, 5, 362, 8814, 10, 362, 3,
	362, 3, 362, 3, 362, 3, 362, 3, 362, 3, 363, 3, 363, 5, 363, 8823, 10,
	363, 3, 363, 3, 363, 5, 363, 8827, 10, 363, 3, 363, 3, 363, 3, 363, 3,
	363, 3, 363, 3, 363, 3, 363, 3, 363, 5, 363, 8837, 10, 363, 3, 364, 3,
	364, 3, 364, 7, 364, 8842, 10, 364, 12, 364, 14, 364, 8845, 11, 364, 3,
	365, 3, 365, 3, 365, 7, 365, 8850, 10, 365, 12, 365, 14, 365, 8853, 11,
	365, 3, 366, 3, 366, 3, 366, 7, 366, 8858, 10, 366, 12, 366, 14, 366, 8861,
	11, 366, 3, 367, 5, 367, 8864, 10, 367, 3, 367, 3, 367, 3, 368, 3, 368,
	3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368,
	3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 8886, 10,
	368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 8895,
	10, 368, 3, 368, 3, 368, 3, 368, 3, 368, 5, 368, 8901, 10, 368, 3, 368,
	3, 368, 3, 368, 3, 368, 5, 368, 8907, 10, 368, 3, 368, 3, 368, 3, 368,
	3, 368, 5, 368, 8913, 10, 368, 3, 368, 3, 368, 3, 368, 3, 368, 3, 368,
	3, 368, 3, 368, 3, 368, 5, 368, 8923, 10, 368, 3, 369, 3, 369, 3, 369,
	3, 369, 3, 369, 5, 369, 8930, 10, 369, 3, 369, 7, 369, 8933, 10, 369, 12,
	369, 14, 369, 8936, 11, 369, 3, 370, 3, 370, 5, 370, 8940, 10, 370, 3,
	370, 3, 370, 5, 370, 8944, 10, 370, 3, 370, 3, 370, 3, 370, 3, 370, 3,
	370, 5, 370, 8951, 10, 370, 3, 371, 3, 371, 5, 371, 8955, 10, 371, 3, 371,
	5, 371, 8958, 10, 371, 3, 371, 3, 371, 3, 371, 5, 371, 8963, 10, 371, 3,
	371, 3, 371, 5, 371, 8967, 10, 371, 3, 371, 3, 371, 5, 371, 8971, 10, 371,
	3, 371, 3, 371, 3, 371, 5, 371, 8976, 10, 371, 3, 371, 3, 371, 3, 371,
	7, 371, 8981, 10, 371, 12, 371, 14, 371, 8984, 11, 371, 5, 371, 8986, 10,
	371, 3, 371, 3, 371, 5, 371, 8990, 10, 371, 3, 372, 3, 372, 3, 372, 5,
	372, 8995, 10, 372, 3, 372, 3, 372, 5, 372, 8999, 10, 372, 3, 373, 3, 373,
	3, 373, 3, 373, 3, 373, 3, 373, 3, 373, 5, 373, 9008, 10, 373, 3, 374,
	3, 374, 3, 374, 3, 374, 3, 374, 5, 374, 9015, 10, 374, 3, 375, 3, 375,
	3, 375, 3, 375, 3, 375, 7, 375, 9022, 10, 375, 12, 375, 14, 375, 9025,
	11, 375, 3, 375, 3, 375, 3, 375, 3, 375, 3, 375, 3, 375, 3, 375, 3, 375,
	3, 375, 5, 375, 9036, 10, 375, 5, 375, 9038, 10, 375, 3, 376, 3, 376, 3,
	376, 3, 376, 3, 376, 5, 376, 9045, 10, 376, 3, 376, 3, 376, 3, 376, 3,
	376, 5, 376, 9051, 10, 376, 3, 376, 3, 376, 3, 376, 5, 376, 9056, 10, 376,
	3, 376, 7, 376, 9059, 10, 376, 12, 376, 14, 376, 9062, 11, 376, 5, 376,
	9064, 10, 376, 3, 377, 3, 377, 3, 377, 3, 378, 3, 378, 5, 378, 9071, 10,
	378, 3, 379, 3, 379, 3, 380, 3, 380, 3, 380, 3, 380, 3, 380, 7, 380, 9080,
	10, 380, 12, 380, 14, 380, 9083, 11, 380, 3, 380, 3, 380, 3, 381, 3, 381,
	3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381,
	3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381,
	3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 7, 381, 9114, 10,
	381, 12, 381, 14, 381, 9117, 11, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3,
	381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 3, 381, 5,
	381, 9132, 10, 381, 3, 382, 3, 382, 3, 382, 3, 382, 3, 382, 5, 382, 9139,
	10, 382, 5, 382, 9141, 10, 382, 3, 383, 3, 383, 3, 383, 7, 383, 9146, 10,
	383, 12, 383, 14, 383, 9149, 11, 383, 3, 384, 3, 384, 3, 384, 3, 384, 7,
	384, 9155, 10, 384, 12, 384, 14, 384, 9158, 11, 384, 3, 384, 3, 384, 3,
	385, 3, 385, 3, 385, 3, 385, 3, 385, 5, 385, 9167, 10, 385, 3, 386, 3,
	386, 3, 386, 5, 386, 9172, 10, 386, 3, 386, 3, 386, 3, 386, 3, 386, 3,
	386, 5, 386, 9179, 10, 386, 3, 386, 5, 386, 9182, 10, 386, 3, 387, 3, 387,
	3, 387, 3, 387, 3, 387, 5, 387, 9189, 10, 387, 3, 387, 3, 387, 3, 387,
	3, 387, 3, 387, 5, 387, 9196, 10, 387, 3, 387, 5, 387, 9199, 10, 387, 5,
	387, 9201, 10, 387, 3, 388, 3, 388, 5, 388, 9205, 10, 388, 3, 388, 3, 388,
	3, 388, 3, 388, 5, 388, 9211, 10, 388, 3, 389, 3, 389, 3, 389, 3, 389,
	5, 389, 9217, 10, 389, 3, 390, 3, 390, 3, 390, 7, 390, 9222, 10, 390, 12,
	390, 14, 390, 9225, 11, 390, 3, 391, 3, 391, 3, 391, 3, 391, 3, 391, 5,
	391, 9232, 10, 391, 3, 392, 3, 392, 7, 392, 9236, 10, 392, 12, 392, 14,
	392, 9239, 11, 392, 3, 393, 3, 393, 5, 393, 9243, 10, 393, 3, 393, 3, 393,
	5, 393, 9247, 10, 393, 3, 393, 3, 393, 5, 393, 9251, 10, 393, 3, 393, 3,
	393, 3, 393, 5, 393, 9256, 10, 393, 5, 393, 9258, 10, 393, 3, 393, 3, 393,
	3, 393, 3, 393, 3, 393, 5, 393, 9265, 10, 393, 3, 393, 3, 393, 5, 393,
	9269, 10, 393, 3, 393, 3, 393, 3, 393, 3, 393, 3, 393, 5, 393, 9276, 10,
	393, 5, 393, 9278, 10, 393, 3, 393, 3, 393, 3, 393, 3, 393, 3, 393, 5,
	393, 9285, 10, 393, 5, 393, 9287, 10, 393, 3, 394, 3, 394, 3, 394, 3, 394,
	3, 394, 3, 394, 3, 394, 5, 394, 9296, 10, 394, 3, 394, 3, 394, 3, 394,
	3, 394, 3, 394, 3, 394, 5, 394, 9304, 10, 394, 3, 395, 3, 395, 3, 395,
	7, 395, 9309, 10, 395, 12, 395, 14, 395, 9312, 11, 395, 3, 396, 3, 396,
	3, 396, 5, 396, 9317, 10, 396, 3, 397, 3, 397, 3, 397, 3, 397, 3, 397,
	3, 397, 3, 397, 3, 397, 3, 398, 5, 398, 9328, 10, 398, 3, 398, 3, 398,
	5, 398, 9332, 10, 398, 5, 398, 9334, 10, 398, 3, 398, 5, 398, 9337, 10,
	398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3,
	398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3, 398, 3,
	398, 3, 398, 3, 398, 3, 398, 3, 398, 5, 398, 9361, 10, 398, 3, 399, 3,
	399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 399, 3, 400, 3, 400, 3,
	400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 400, 3, 401, 3,
	401, 3, 401, 7, 401, 9384, 10, 401, 12, 401, 14, 401, 9387, 11, 401, 3,
	402, 3, 402, 5, 402, 9391, 10, 402, 3, 403, 3, 403, 3, 403, 3, 403, 3,
	403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3, 403, 3,
	403, 3, 403, 3, 403, 7, 403, 9409, 10, 403, 12, 403, 14, 403, 9412, 11,
	403, 3, 403, 5, 403, 9415, 10, 403, 3, 403, 3, 403, 5, 403, 9419, 10, 403,
	3, 404, 3, 404, 3, 404, 3, 404, 3, 405, 3, 405, 3, 405, 3, 405, 3, 405,
	3, 405, 3, 405, 3, 405, 3, 405, 3, 405, 5, 405, 9435, 10, 405, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 5, 406, 9443, 10, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 5, 406, 9465, 10, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 5, 406, 9523, 10, 406,
	3, 406, 3, 406, 5, 406, 9527, 10, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406, 3, 406,
	5, 406, 9560, 10, 406, 3, 407, 3, 407, 3, 407, 3, 407, 3, 407, 5, 407,
	9567, 10, 407, 3, 408, 3, 408, 3, 408, 3, 408, 5, 408, 9573, 10, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 5, 408, 9586, 10, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 5,
	408, 9601, 10, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3, 408, 3,
	408, 3, 408, 3, 408, 5, 408, 9612, 10, 408, 3, 409, 3, 409, 3, 409, 5,
	409, 9617, 10, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 5, 409, 9627, 10, 409, 3, 409, 3, 409, 3, 409, 3, 409, 3,
	409, 3, 409, 3, 409, 5, 409, 9636, 10, 409, 3, 410, 3, 410, 3, 410, 3,
	410, 3, 410, 3, 410, 3, 410, 3, 411, 3, 411, 3, 411, 3, 411, 3, 411, 3,
	411, 3, 411, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3, 412, 3,
	413, 3, 413, 3, 413, 3, 413, 3, 413, 3, 414, 3, 414, 3, 414, 3, 414, 3,
	414, 3, 415, 5, 415, 9670, 10, 415, 3, 415, 3, 415, 3, 416, 5, 416, 9675,
	10, 416, 3, 416, 3, 416, 3, 417, 3, 417, 5, 417, 9681, 10, 417, 3, 418,
	5, 418, 9684, 10, 418, 3, 418, 3, 418, 3, 418, 5, 418, 9689, 10, 418, 3,
	418, 7, 418, 9692, 10, 418, 12, 418, 14, 418, 9695, 11, 418, 3, 418, 3,
	418, 3, 419, 3, 419, 3, 419, 3, 419, 5, 419, 9703, 10, 419, 3, 419, 7,
	419, 9706, 10, 419, 12, 419, 14, 419, 9709, 11, 419, 3, 419, 3, 419, 3,
	420, 5, 420, 9714, 10, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3, 420, 7,
	420, 9721, 10, 420, 12, 420, 14, 420, 9724, 11, 420, 3, 420, 3, 420, 3,
	420, 3, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3,
	420, 7, 420, 9738, 10, 420, 12, 420, 14, 420, 9741, 11, 420, 3, 420, 3,
	420, 3, 420, 5, 420, 9746, 10, 420, 3, 420, 3, 420, 3, 420, 3, 420, 3,
	420, 3, 420, 5, 420, 9754, 10, 420, 3, 421, 3, 421, 5, 421, 9758, 10, 421,
	3, 422, 3, 422, 3, 422, 3, 422, 7, 422, 9764, 10, 422, 12, 422, 14, 422,
	9767, 11, 422, 3, 422, 3, 422, 3, 423, 3, 423, 5, 423, 9773, 10, 423, 3,
	424, 3, 424, 3, 424, 3, 424, 3, 424, 3, 424, 3, 424, 3, 424, 3, 424, 7,
	424, 9784, 10, 424, 12, 424, 14, 424, 9787, 11, 424, 3, 425, 3, 425, 3,
	425, 7, 425, 9792, 10, 425, 12, 425, 14, 425, 9795, 11, 425, 3, 426, 3,
	426, 3, 426, 3, 426, 3, 426, 3, 426, 3, 426, 3, 426, 3, 426, 3, 426, 5,
	426, 9807, 10, 426, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427, 5, 427, 9814,
	10, 427, 3, 427, 3, 427, 3, 427, 3, 427, 5, 427, 9820, 10, 427, 3, 427,
	3, 427, 5, 427, 9824, 10, 427, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427,
	3, 427, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427, 3, 427,
	3, 427, 5, 427, 9841, 10, 427, 3, 428, 3, 428, 3, 428, 3, 428, 3, 428,
	3, 428, 3, 428, 3, 428, 3, 428, 3, 428, 3, 428, 3, 428, 3, 428, 5, 428,
	9856, 10, 428, 5, 428, 9858, 10, 428, 3, 428, 3, 428, 3, 428, 5, 428, 9863,
	10, 428, 3, 429, 5, 429, 9866, 10, 429, 3, 429, 3, 429, 3, 430, 3, 430,
	3, 430, 3, 430, 3, 430, 5, 430, 9875, 10, 430, 3, 430, 5, 430, 9878, 10,
	430, 3, 430, 5, 430, 9881, 10, 430, 3, 430, 3, 430, 3, 431, 3, 431, 3,
	431, 3, 432, 3, 432, 3, 432, 3, 432, 3, 432, 3, 432, 5, 432, 9894, 10,
	432, 3, 433, 3, 433, 5, 433, 9898, 10, 433, 3, 434, 3, 434, 3, 434, 3,
	434, 3, 434, 3, 434, 5, 434, 9906, 10, 434, 3, 435, 3, 435, 3, 435, 3,
	435, 5, 435, 9912, 10, 435, 3, 436, 3, 436, 3, 436, 3, 436, 7, 436, 9918,
	10, 436, 12, 436, 14, 436, 9921, 11, 436, 3, 436, 3, 436, 3, 436, 3, 436,
	5, 436, 9927, 10, 436, 3, 436, 3, 436, 3, 436, 3, 436, 5, 436, 9933, 10,
	436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3, 436, 3,
	436, 3, 436, 3, 436, 3, 436, 3, 436, 5, 436, 9948, 10, 436, 3, 437, 3,
	437, 3, 437, 3, 437, 3, 437, 3, 437, 3, 437, 5, 437, 9957, 10, 437, 3,
	437, 3, 437, 3, 438, 3, 438, 5, 438, 9963, 10, 438, 3, 439, 3, 439, 3,
	439, 3, 439, 5, 439, 9969, 10, 439, 3, 439, 5, 439, 9972, 10, 439, 3, 439,
	3, 439, 5, 439, 9976, 10, 439, 3, 439, 3, 439, 3, 439, 7, 439, 9981, 10,
	439, 12, 439, 14, 439, 9984, 11, 439, 3, 440, 3, 440, 3, 440, 3, 440, 3,
	440, 5, 440, 9991, 10, 440, 3, 440, 5, 440, 9994, 10, 440, 3, 440, 3, 440,
	3, 440, 3, 440, 5, 440, 10000, 10, 440, 3, 440, 3, 440, 3, 440, 3, 440,
	5, 440, 10006, 10, 440, 5, 440, 10008, 10, 440, 3, 440, 3, 440, 3, 440,
	3, 440, 5, 440, 10014, 10, 440, 3, 440, 5, 440, 10017, 10, 440, 5, 440,
	10019, 10, 440, 3, 440, 3, 440, 3, 440, 3, 440, 5, 440, 10025, 10, 440,
	5, 440, 10027, 10, 440, 3, 440, 3, 440, 3, 441, 3, 441, 3, 441, 3, 441,
	3, 441, 3, 441, 3, 441, 3, 441, 3, 441, 3, 441, 5, 441, 10041, 10, 441,
	3, 441, 3, 441, 3, 441, 3, 441, 3, 441, 5, 441, 10048, 10, 441, 3, 441,
	3, 441, 3, 442, 3, 442, 3, 442, 3, 442, 3, 442, 5, 442, 10057, 10, 442,
	3, 443, 3, 443, 3, 443, 3, 443, 3, 443, 5, 443, 10064, 10, 443, 3, 444,
	3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444,
	5, 444, 10076, 10, 444, 3, 444, 3, 444, 3, 444, 3, 444, 3, 444, 5, 444,
	10083, 10, 444, 3, 444, 3, 444, 3, 445, 3, 445, 3, 445, 5, 445, 10090,
	10, 445, 3, 445, 3, 445, 3, 445, 3, 445, 3, 445, 5, 445, 10097, 10, 445,
	3, 445, 3, 445, 3, 445, 3, 445, 5, 445, 10103, 10, 445, 3, 445, 3, 445,
	3, 445, 3, 445, 3, 445, 5, 445, 10110, 10, 445, 3, 445, 5, 445, 10113,
	10, 445, 3, 446, 3, 446, 3, 446, 5, 446, 10118, 10, 446, 3, 446, 3, 446,
	3, 447, 3, 447, 3, 447, 5, 447, 10125, 10, 447, 3, 447, 3, 447, 3, 447,
	3, 447, 3, 447, 5, 447, 10132, 10, 447, 3, 447, 3, 447, 3, 448, 3, 448,
	5, 448, 10138, 10, 448, 3, 449, 3, 449, 3, 449, 5, 449, 10143, 10, 449,
	3, 449, 3, 449, 3, 449, 3, 449, 5, 449, 10149, 10, 449, 3, 449, 3, 449,
	3, 449, 3, 449, 5, 449, 10155, 10, 449, 3, 449, 3, 449, 3, 449, 3, 449,
	5, 449, 10161, 10, 449, 3, 449, 3, 449, 3, 449, 3, 449, 5, 449, 10167,
	10, 449, 3, 449, 3, 449, 3, 449, 3, 449, 5, 449, 10173, 10, 449, 3, 449,
	3, 449, 3, 449, 3, 449, 5, 449, 10179, 10, 449, 3, 449, 3, 449, 3, 449,
	3, 449, 5, 449, 10185, 10, 449, 3, 449, 5, 449, 10188, 10, 449, 3, 450,
	3, 450, 5, 450, 10192, 10, 450, 3, 450, 3, 450, 3, 450, 5, 450, 10197,
	10, 450, 7, 450, 10199, 10, 450, 12, 450, 14, 450, 10202, 11, 450, 3, 451,
	3, 451, 3, 451, 7, 451, 10207, 10, 451, 12, 451, 14, 451, 10210, 11, 451,
	3, 452, 3, 452, 5, 452, 10214, 10, 452, 3, 453, 3, 453, 3, 454, 3, 454,
	3, 455, 5, 455, 10221, 10, 455, 3, 455, 3, 455, 3, 456, 3, 456, 3, 456,
	3, 456, 3, 456, 5, 456, 10230, 10, 456, 5, 456, 10232, 10, 456, 3, 457,
	3, 457, 3, 457, 3, 457, 3, 457, 5, 457, 10239, 10, 457, 3, 458, 3, 458,
	3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 3, 458, 5, 458,
	10251, 10, 458, 3, 459, 3, 459, 3, 459, 5, 459, 10256, 10, 459, 3, 459,
	3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 5, 459,
	10267, 10, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459, 3, 459,
	3, 459, 5, 459, 10277, 10, 459, 5, 459, 10279, 10, 459, 3, 459, 3, 459,
	3, 459, 3, 459, 5, 459, 10285, 10, 459, 5, 459, 10287, 10, 459, 3, 459,
	3, 459, 3, 459, 5, 459, 10292, 10, 459, 5, 459, 10294, 10, 459, 3, 459,
	5, 459, 10297, 10, 459, 3, 460, 3, 460, 5, 460, 10301, 10, 460, 3, 461,
	3, 461, 5, 461, 10305, 10, 461, 3, 462, 3, 462, 3, 462, 3, 462, 5, 462,
	10311, 10, 462, 3, 462, 3, 462, 3, 462, 3, 462, 3, 462, 3, 462, 3, 462,
	5, 462, 10320, 10, 462, 3, 462, 5, 462, 10323, 10, 462, 5, 462, 10325,
	10, 462, 3, 463, 5, 463, 10328, 10, 463, 3, 463, 3, 463, 3, 463, 3, 463,
	5, 463, 10334, 10, 463, 3, 463, 3, 463, 5, 463, 10338, 10, 463, 3, 463,
	5, 463, 10341, 10, 463, 3, 464, 3, 464, 3, 464, 3, 464, 3, 464, 3, 464,
	3, 464, 5, 464, 10350, 10, 464, 3, 465, 3, 465, 3, 465, 3, 465, 3, 465,
	3, 465, 3, 465, 5, 465, 10359, 10, 465, 3, 466, 3, 466, 3, 466, 3, 466,
	3, 466, 3, 466, 3, 466, 3, 466, 3, 466, 3, 466, 5, 466, 10371, 10, 466,
	3, 466, 5, 466, 10374, 10, 466, 3, 467, 3, 467, 5, 467, 10378, 10, 467,
	3, 467, 3, 467, 3, 467, 3, 467, 5, 467, 10384, 10, 467, 3, 467, 5, 467,
	10387, 10, 467, 3, 467, 3, 467, 3, 467, 3, 467, 5, 467, 10393, 10, 467,
	3, 468, 3, 468, 3, 468, 5, 468, 10398, 10, 468, 3, 469, 3, 469, 3, 469,
	5, 469, 10403, 10, 469, 3, 469, 3, 469, 5, 469, 10407, 10, 469, 3, 469,
	3, 469, 5, 469, 10411, 10, 469, 3, 469, 3, 469, 5, 469, 10415, 10, 469,
	3, 470, 3, 470, 3, 471, 3, 471, 3, 471, 5, 471, 10422, 10, 471, 3, 472,
	3, 472, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473,
	3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 3, 473, 5, 473, 10441,
	10, 473, 3, 474, 3, 474, 3, 475, 3, 475, 5, 475, 10447, 10, 475, 3, 475,
	2, 4, 94, 706, 476, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64,
	66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100,
	102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130,
	132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160,
	162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190,
	192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220,
	222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250,
	252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280,
	282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310,
	312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340,
	342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
	372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400,
	402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430,
	432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460,
	462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490,
	492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520,
	522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550,
	552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580,
	582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610,
	612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640,
	642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670,
	672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700,
	702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730,
	732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760,
	762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790,
	792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820,
	822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850,
	852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880,
	882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910,
	912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940,
	942, 944, 946, 948, 2, 134, 3, 2, 778, 779, 4, 2, 778, 778, 783, 783, 5,
	2, 470, 470, 740, 740, 743, 743, 4, 2, 778, 779, 783, 783, 4, 2, 186, 186,
	710, 710, 5, 2, 124, 124, 298, 298, 362, 362, 4, 2, 225, 225, 228, 228,
	3, 2, 783, 784, 3, 2, 291, 295, 4, 2, 452, 452, 623, 623, 4, 2, 301, 301,
	617, 617, 5, 2, 84, 84, 301, 301, 617, 617, 5, 2, 212, 212, 255, 255, 698,
	699, 4, 2, 18, 18, 732, 732, 4, 2, 22, 22, 569, 569, 4, 2, 5, 5, 663, 663,
	5, 2, 5, 5, 609, 609, 661, 661, 4, 2, 9, 9, 72, 72, 4, 2, 3, 3, 103, 103,
	4, 2, 481, 481, 489, 489, 4, 2, 779, 779, 783, 783, 4, 2, 548, 548, 588,
	588, 4, 2, 7, 8, 218, 218, 5, 2, 212, 212, 246, 246, 248, 248, 4, 2, 332,
	332, 335, 335, 4, 2, 10, 10, 236, 236, 3, 2, 781, 782, 4, 2, 3, 3, 316,
	316, 4, 2, 181, 181, 378, 378, 3, 2, 261, 262, 4, 2, 779, 779, 783, 784,
	4, 2, 205, 205, 360, 360, 4, 2, 200, 200, 325, 325, 4, 2, 268, 268, 481,
	481, 4, 2, 781, 781, 783, 783, 4, 2, 93, 93, 145, 145, 6, 2, 92, 92, 161,
	161, 305, 305, 363, 363, 4, 2, 29, 29, 510, 510, 4, 2, 161, 161, 363, 363,
	4, 2, 92, 92, 363, 363, 5, 2, 521, 521, 588, 588, 736, 736, 4, 2, 757,
	757, 779, 779, 5, 2, 65, 65, 318, 318, 503, 503, 4, 2, 89, 89, 783, 783,
	4, 2, 89, 89, 779, 779, 4, 2, 563, 563, 783, 783, 5, 2, 521, 521, 548,
	548, 588, 588, 6, 2, 390, 392, 475, 476, 656, 658, 746, 747, 4, 2, 133,
	133, 139, 139, 5, 2, 532, 532, 568, 568, 586, 586, 5, 2, 12, 12, 344, 344,
	541, 541, 4, 2, 212, 212, 242, 242, 3, 2, 257, 258, 5, 2, 92, 92, 161,
	161, 363, 363, 4, 2, 133, 133, 394, 394, 4, 2, 626, 627, 659, 659, 4, 2,
	244, 244, 690, 690, 5, 2, 492, 492, 693, 693, 765, 765, 5, 2, 341, 341,
	410, 410, 481, 481, 5, 2, 463, 463, 534, 534, 591, 591, 4, 2, 524, 524,
	563, 563, 4, 2, 5, 5, 165, 166, 5, 2, 170, 170, 207, 207, 221, 221, 5,
	2, 274, 274, 338, 338, 482, 482, 4, 2, 107, 107, 482, 482, 5, 2, 5, 5,
	382, 382, 633, 633, 4, 2, 140, 140, 225, 225, 5, 2, 487, 487, 618, 618,
	621, 621, 4, 2, 661, 661, 663, 663, 5, 2, 597, 597, 683, 683, 714, 714,
	5, 2, 397, 397, 482, 482, 515, 515, 4, 2, 279, 279, 727, 727, 4, 2, 515,
	515, 713, 713, 5, 2, 140, 140, 428, 428, 713, 713, 5, 2, 212, 212, 436,
	436, 744, 744, 4, 2, 591, 591, 701, 701, 4, 2, 129, 129, 506, 506, 5, 2,
	97, 97, 343, 343, 365, 365, 4, 2, 56, 56, 217, 217, 4, 2, 159, 159, 210,
	210, 4, 2, 214, 214, 320, 320, 4, 2, 209, 209, 517, 517, 4, 2, 216, 216,
	436, 436, 4, 2, 66, 66, 337, 337, 4, 2, 213, 213, 285, 285, 4, 2, 184,
	184, 215, 215, 4, 2, 390, 392, 747, 747, 4, 2, 368, 368, 566, 566, 3, 2,
	626, 627, 4, 2, 129, 129, 784, 784, 4, 2, 466, 466, 492, 492, 4, 2, 498,
	498, 719, 719, 4, 2, 341, 341, 372, 372, 3, 2, 351, 352, 6, 2, 429, 429,
	628, 628, 705, 705, 783, 783, 4, 2, 445, 445, 485, 485, 4, 2, 518, 518,
	695, 695, 6, 2, 486, 486, 505, 505, 551, 551, 720, 720, 5, 2, 624, 624,
	661, 661, 696, 696, 4, 2, 384, 384, 669, 669, 3, 2, 809, 811, 4, 2, 812,
	813, 815, 817, 3, 2, 812, 813, 5, 2, 5, 5, 12, 12, 322, 322, 4, 2, 5, 5,
	98, 98, 3, 2, 785, 786, 4, 2, 688, 688, 690, 690, 4, 2, 511, 511, 603,
	603, 6, 2, 264, 264, 410, 410, 499, 499, 634, 634, 5, 2, 422, 422, 686,
	686, 752, 752, 4, 2, 16, 16, 94, 94, 4, 2, 237, 237, 530, 530, 5, 2, 200,
	200, 443, 443, 530, 530, 5, 2, 200, 200, 530, 530, 567, 567, 4, 2, 222,
	222, 778, 779, 5, 2, 140, 140, 176, 176, 286, 286, 6, 2, 200, 200, 530,
	530, 567, 567, 674, 674, 4, 2, 778, 778, 780, 780, 5, 2, 473, 473, 655,
	655, 691, 691, 8, 2, 418, 418, 571, 571, 590, 590, 723, 724, 730, 730,
	762, 763, 4, 2, 448, 448, 450, 450, 4, 2, 512, 512, 556, 556, 4, 2, 554,
	554, 557, 557, 4, 2, 654, 654, 690, 690, 5, 2, 140, 140, 225, 225, 661,
	661, 4, 2, 52, 52, 211, 211, 3, 2, 271, 272, 4, 2, 571, 571, 779, 779,
	4, 2, 779, 779, 785, 785, 98, 2, 39, 39, 82, 82, 114, 114, 130, 131, 134,
	134, 171, 171, 188, 189, 226, 226, 240, 240, 260, 260, 264, 264, 281, 282,
	289, 289, 296, 296, 310, 310, 319, 319, 323, 323, 330, 330, 344, 344, 384,
	384, 387, 387, 389, 389, 405, 405, 410, 410, 417, 418, 429, 430, 433, 433,
	437, 437, 441, 441, 443, 444, 446, 450, 470, 470, 472, 473, 481, 481, 486,
	486, 492, 492, 497, 497, 504, 505, 511, 511, 513, 515, 518, 519, 524, 524,
	526, 527, 530, 530, 536, 536, 538, 538, 542, 544, 547, 547, 549, 551, 555,
	555, 558, 558, 563, 567, 570, 571, 581, 582, 584, 584, 590, 590, 595, 595,
	598, 598, 603, 605, 608, 608, 613, 613, 615, 615, 619, 619, 621, 622, 624,
	628, 630, 631, 634, 634, 638, 638, 640, 640, 645, 645, 654, 655, 659, 659,
	661, 661, 665, 665, 669, 669, 674, 674, 676, 676, 685, 686, 688, 693, 695,
	696, 705, 705, 708, 708, 713, 713, 715, 715, 717, 718, 720, 721, 723, 724,
	730, 730, 737, 740, 749, 749, 752, 756, 758, 758, 761, 765, 767, 767, 769,
	770, 780, 780, 3, 2, 791, 798, 7, 2, 521, 521, 548, 548, 588, 588, 736,
	736, 811, 811, 2, 12149, 2, 953, 3, 2, 2, 2, 4, 958, 3, 2, 2, 2, 6, 969,
	3, 2, 2, 2, 8, 980, 3, 2, 2, 2, 10, 987, 3, 2, 2, 2, 12, 1146, 3, 2, 2,
	2, 14, 1153, 3, 2, 2, 2, 16, 1167, 3, 2, 2, 2, 18, 1169, 3, 2, 2, 2, 20,
	1180, 3, 2, 2, 2, 22, 1184, 3, 2, 2, 2, 24, 1198, 3, 2, 2, 2, 26, 1200,
	3, 2, 2, 2, 28, 1207, 3, 2, 2, 2, 30, 1217, 3, 2, 2, 2, 32, 1229, 3, 2,
	2, 2, 34, 1231, 3, 2, 2, 2, 36, 1233, 3, 2, 2, 2, 38, 1235, 3, 2, 2, 2,
	40, 1261, 3, 2, 2, 2, 42, 1278, 3, 2, 2, 2, 44, 1291, 3, 2, 2, 2, 46, 1296,
	3, 2, 2, 2, 48, 1318, 3, 2, 2, 2, 50, 1332, 3, 2, 2, 2, 52, 1334, 3, 2,
	2, 2, 54, 1363, 3, 2, 2, 2, 56, 1384, 3, 2, 2, 2, 58, 1397, 3, 2, 2, 2,
	60, 1402, 3, 2, 2, 2, 62, 1406, 3, 2, 2, 2, 64, 1410, 3, 2, 2, 2, 66, 1421,
	3, 2, 2, 2, 68, 1426, 3, 2, 2, 2, 70, 1428, 3, 2, 2, 2, 72, 1433, 3, 2,
	2, 2, 74, 1435, 3, 2, 2, 2, 76, 1437, 3, 2, 2, 2, 78, 1440, 3, 2, 2, 2,
	80, 1444, 3, 2, 2, 2, 82, 1450, 3, 2, 2, 2, 84, 1452, 3, 2, 2, 2, 86, 1455,
	3, 2, 2, 2, 88, 1457, 3, 2, 2, 2, 90, 1460, 3, 2, 2, 2, 92, 1465, 3, 2,
	2, 2, 94, 1476, 3, 2, 2, 2, 96, 1485, 3, 2, 2, 2, 98, 1489, 3, 2, 2, 2,
	100, 1491, 3, 2, 2, 2, 102, 1497, 3, 2, 2, 2, 104, 1499, 3, 2, 2, 2, 106,
	1501, 3, 2, 2, 2, 108, 1504, 3, 2, 2, 2, 110, 1512, 3, 2, 2, 2, 112, 1514,
	3, 2, 2, 2, 114, 1516, 3, 2, 2, 2, 116, 1538, 3, 2, 2, 2, 118, 1557, 3,
	2, 2, 2, 120, 1565, 3, 2, 2, 2, 122, 1569, 3, 2, 2, 2, 124, 1577, 3, 2,
	2, 2, 126, 1592, 3, 2, 2, 2, 128, 1594, 3, 2, 2, 2, 130, 1638, 3, 2, 2,
	2, 132, 1647, 3, 2, 2, 2, 134, 1660, 3, 2, 2, 2, 136, 1662, 3, 2, 2, 2,
	138, 1664, 3, 2, 2, 2, 140, 1667, 3, 2, 2, 2, 142, 1671, 3, 2, 2, 2, 144,
	1681, 3, 2, 2, 2, 146, 1691, 3, 2, 2, 2, 148, 1735, 3, 2, 2, 2, 150, 1758,
	3, 2, 2, 2, 152, 1760, 3, 2, 2, 2, 154, 1762, 3, 2, 2, 2, 156, 1764, 3,
	2, 2, 2, 158, 1769, 3, 2, 2, 2, 160, 1772, 3, 2, 2, 2, 162, 2127, 3, 2,
	2, 2, 164, 2129, 3, 2, 2, 2, 166, 2183, 3, 2, 2, 2, 168, 2188, 3, 2, 2,
	2, 170, 2232, 3, 2, 2, 2, 172, 2255, 3, 2, 2, 2, 174, 2285, 3, 2, 2, 2,
	176, 2289, 3, 2, 2, 2, 178, 2295, 3, 2, 2, 2, 180, 2301, 3, 2, 2, 2, 182,
	2305, 3, 2, 2, 2, 184, 2309, 3, 2, 2, 2, 186, 2314, 3, 2, 2, 2, 188, 2328,
	3, 2, 2, 2, 190, 2334, 3, 2, 2, 2, 192, 2340, 3, 2, 2, 2, 194, 2356, 3,
	2, 2, 2, 196, 2360, 3, 2, 2, 2, 198, 2366, 3, 2, 2, 2, 200, 2372, 3, 2,
	2, 2, 202, 2380, 3, 2, 2, 2, 204, 2386, 3, 2, 2, 2, 206, 2401, 3, 2, 2,
	2, 208, 2419, 3, 2, 2, 2, 210, 2426, 3, 2, 2, 2, 212, 2431, 3, 2, 2, 2,
	214, 2442, 3, 2, 2, 2, 216, 2447, 3, 2, 2, 2, 218, 2451, 3, 2, 2, 2, 220,
	2455, 3, 2, 2, 2, 222, 2460, 3, 2, 2, 2, 224, 2465, 3, 2, 2, 2, 226, 2470,
	3, 2, 2, 2, 228, 2484, 3, 2, 2, 2, 230, 2490, 3, 2, 2, 2, 232, 2495, 3,
	2, 2, 2, 234, 2503, 3, 2, 2, 2, 236, 2507, 3, 2, 2, 2, 238, 2524, 3, 2,
	2, 2, 240, 2532, 3, 2, 2, 2, 242, 2538, 3, 2, 2, 2, 244, 2552, 3, 2, 2,
	2, 246, 2574, 3, 2, 2, 2, 248, 2579, 3, 2, 2, 2, 250, 2585, 3, 2, 2, 2,
	252, 2590, 3, 2, 2, 2, 254, 2594, 3, 2, 2, 2, 256, 2622, 3, 2, 2, 2, 258,
	2633, 3, 2, 2, 2, 260, 2642, 3, 2, 2, 2, 262, 2655, 3, 2, 2, 2, 264, 2663,
	3, 2, 2, 2, 266, 2668, 3, 2, 2, 2, 268, 2679, 3, 2, 2, 2, 270, 2709, 3,
	2, 2, 2, 272, 2739, 3, 2, 2, 2, 274, 2773, 3, 2, 2, 2, 276, 2789, 3, 2,
	2, 2, 278, 2802, 3, 2, 2, 2, 280, 2821, 3, 2, 2, 2, 282, 2834, 3, 2, 2,
	2, 284, 2843, 3, 2, 2, 2, 286, 2873, 3, 2, 2, 2, 288, 3116, 3, 2, 2, 2,
	290, 3125, 3, 2, 2, 2, 292, 3183, 3, 2, 2, 2, 294, 3232, 3, 2, 2, 2, 296,
	3234, 3, 2, 2, 2, 298, 3275, 3, 2, 2, 2, 300, 3325, 3, 2, 2, 2, 302, 3395,
	3, 2, 2, 2, 304, 3462, 3, 2, 2, 2, 306, 3478, 3, 2, 2, 2, 308, 3506, 3,
	2, 2, 2, 310, 3525, 3, 2, 2, 2, 312, 3546, 3, 2, 2, 2, 314, 3618, 3, 2,
	2, 2, 316, 3713, 3, 2, 2, 2, 318, 3735, 3, 2, 2, 2, 320, 3747, 3, 2, 2,
	2, 322, 3775, 3, 2, 2, 2, 324, 3796, 3, 2, 2, 2, 326, 3822, 3, 2, 2, 2,
	328, 3831, 3, 2, 2, 2, 330, 3863, 3, 2, 2, 2, 332, 3873, 3, 2, 2, 2, 334,
	3889, 3, 2, 2, 2, 336, 3901, 3, 2, 2, 2, 338, 3910, 3, 2, 2, 2, 340, 3927,
	3, 2, 2, 2, 342, 3951, 3, 2, 2, 2, 344, 4059, 3, 2, 2, 2, 346, 4085, 3,
	2, 2, 2, 348, 4097, 3, 2, 2, 2, 350, 4104, 3, 2, 2, 2, 352, 4148, 3, 2,
	2, 2, 354, 4159, 3, 2, 2, 2, 356, 4179, 3, 2, 2, 2, 358, 4221, 3, 2, 2,
	2, 360, 4228, 3, 2, 2, 2, 362, 4242, 3, 2, 2, 2, 364, 4260, 3, 2, 2, 2,
	366, 4330, 3, 2, 2, 2, 368, 4373, 3, 2, 2, 2, 370, 4427, 3, 2, 2, 2, 372,
	4564, 3, 2, 2, 2, 374, 4707, 3, 2, 2, 2, 376, 4736, 3, 2, 2, 2, 378, 4765,
	3, 2, 2, 2, 380, 4876, 3, 2, 2, 2, 382, 4889, 3, 2, 2, 2, 384, 4897, 3,
	2, 2, 2, 386, 4905, 3, 2, 2, 2, 388, 4927, 3, 2, 2, 2, 390, 4957, 3, 2,
	2, 2, 392, 4984, 3, 2, 2, 2, 394, 5004, 3, 2, 2, 2, 396, 5052, 3, 2, 2,
	2, 398, 5089, 3, 2, 2, 2, 400, 5293, 3, 2, 2, 2, 402, 5323, 3, 2, 2, 2,
	404, 5325, 3, 2, 2, 2, 406, 5357, 3, 2, 2, 2, 408, 5404, 3, 2, 2, 2, 410,
	5456, 3, 2, 2, 2, 412, 5472, 3, 2, 2, 2, 414, 5486, 3, 2, 2, 2, 416, 5559,
	3, 2, 2, 2, 418, 5590, 3, 2, 2, 2, 420, 5592, 3, 2, 2, 2, 422, 5596, 3,
	2, 2, 2, 424, 5626, 3, 2, 2, 2, 426, 5628, 3, 2, 2, 2, 428, 5649, 3, 2,
	2, 2, 430, 5738, 3, 2, 2, 2, 432, 5740, 3, 2, 2, 2, 434, 5753, 3, 2, 2,
	2, 436, 5807, 3, 2, 2, 2, 438, 5810, 3, 2, 2, 2, 440, 5856, 3, 2, 2, 2,
	442, 5859, 3, 2, 2, 2, 444, 5892, 3, 2, 2, 2, 446, 5909, 3, 2, 2, 2, 448,
	5912, 3, 2, 2, 2, 450, 5971, 3, 2, 2, 2, 452, 5995, 3, 2, 2, 2, 454, 6011,
	3, 2, 2, 2, 456, 6013, 3, 2, 2, 2, 458, 6062, 3, 2, 2, 2, 460, 6103, 3,
	2, 2, 2, 462, 6147, 3, 2, 2, 2, 464, 6155, 3, 2, 2, 2, 466, 6200, 3, 2,
	2, 2, 468, 6202, 3, 2, 2, 2, 470, 6210, 3, 2, 2, 2, 472, 6243, 3, 2, 2,
	2, 474, 6251, 3, 2, 2, 2, 476, 6278, 3, 2, 2, 2, 478, 6297, 3, 2, 2, 2,
	480, 6324, 3, 2, 2, 2, 482, 6354, 3, 2, 2, 2, 484, 6377, 3, 2, 2, 2, 486,
	6391, 3, 2, 2, 2, 488, 6393, 3, 2, 2, 2, 490, 6424, 3, 2, 2, 2, 492, 6452,
	3, 2, 2, 2, 494, 6464, 3, 2, 2, 2, 496, 6494, 3, 2, 2, 2, 498, 6496, 3,
	2, 2, 2, 500, 6542, 3, 2, 2, 2, 502, 6588, 3, 2, 2, 2, 504, 6607, 3, 2,
	2, 2, 506, 6609, 3, 2, 2, 2, 508, 6634, 3, 2, 2, 2, 510, 6636, 3, 2, 2,
	2, 512, 6644, 3, 2, 2, 2, 514, 6646, 3, 2, 2, 2, 516, 6786, 3, 2, 2, 2,
	518, 6794, 3, 2, 2, 2, 520, 6796, 3, 2, 2, 2, 522, 6798, 3, 2, 2, 2, 524,
	6800, 3, 2, 2, 2, 526, 6814, 3, 2, 2, 2, 528, 6820, 3, 2, 2, 2, 530, 6822,
	3, 2, 2, 2, 532, 6824, 3, 2, 2, 2, 534, 6829, 3, 2, 2, 2, 536, 6831, 3,
	2, 2, 2, 538, 6835, 3, 2, 2, 2, 540, 6847, 3, 2, 2, 2, 542, 6849, 3, 2,
	2, 2, 544, 6852, 3, 2, 2, 2, 546, 6855, 3, 2, 2, 2, 548, 6857, 3, 2, 2,
	2, 550, 6859, 3, 2, 2, 2, 552, 6861, 3, 2, 2, 2, 554, 6890, 3, 2, 2, 2,
	556, 6892, 3, 2, 2, 2, 558, 6903, 3, 2, 2, 2, 560, 6906, 3, 2, 2, 2, 562,
	6915, 3, 2, 2, 2, 564, 6923, 3, 2, 2, 2, 566, 6930, 3, 2, 2, 2, 568, 6953,
	3, 2, 2, 2, 570, 6955, 3, 2, 2, 2, 572, 6966, 3, 2, 2, 2, 574, 6968, 3,
	2, 2, 2, 576, 6995, 3, 2, 2, 2, 578, 7002, 3, 2, 2, 2, 580, 7008, 3, 2,
	2, 2, 582, 7027, 3, 2, 2, 2, 584, 7029, 3, 2, 2, 2, 586, 7046, 3, 2, 2,
	2, 588, 7069, 3, 2, 2, 2, 590, 7086, 3, 2, 2, 2, 592, 7103, 3, 2, 2, 2,
	594, 7113, 3, 2, 2, 2, 596, 7130, 3, 2, 2, 2, 598, 7147, 3, 2, 2, 2, 600,
	7157, 3, 2, 2, 2, 602, 7159, 3, 2, 2, 2, 604, 7166, 3, 2, 2, 2, 606, 7226,
	3, 2, 2, 2, 608, 7254, 3, 2, 2, 2, 610, 7256, 3, 2, 2, 2, 612, 7506, 3,
	2, 2, 2, 614, 7744, 3, 2, 2, 2, 616, 7784, 3, 2, 2, 2, 618, 7797, 3, 2,
	2, 2, 620, 7855, 3, 2, 2, 2, 622, 7859, 3, 2, 2, 2, 624, 7872, 3, 2, 2,
	2, 626, 7933, 3, 2, 2, 2, 628, 7935, 3, 2, 2, 2, 630, 7972, 3, 2, 2, 2,
	632, 7974, 3, 2, 2, 2, 634, 7990, 3, 2, 2, 2, 636, 8003, 3, 2, 2, 2, 638,
	8023, 3, 2, 2, 2, 640, 8036, 3, 2, 2, 2, 642, 8073, 3, 2, 2, 2, 644, 8090,
	3, 2, 2, 2, 646, 8092, 3, 2, 2, 2, 648, 8105, 3, 2, 2, 2, 650, 8130, 3,
	2, 2, 2, 652, 8158, 3, 2, 2, 2, 654, 8199, 3, 2, 2, 2, 656, 8278, 3, 2,
	2, 2, 658, 8280, 3, 2, 2, 2, 660, 8284, 3, 2, 2, 2, 662, 8289, 3, 2, 2,
	2, 664, 8304, 3, 2, 2, 2, 666, 8309, 3, 2, 2, 2, 668, 8313, 3, 2, 2, 2,
	670, 8322, 3, 2, 2, 2, 672, 8327, 3, 2, 2, 2, 674, 8335, 3, 2, 2, 2, 676,
	8339, 3, 2, 2, 2, 678, 8351, 3, 2, 2, 2, 680, 8353, 3, 2, 2, 2, 682, 8400,
	3, 2, 2, 2, 684, 8443, 3, 2, 2, 2, 686, 8508, 3, 2, 2, 2, 688, 8519, 3,
	2, 2, 2, 690, 8530, 3, 2, 2, 2, 692, 8542, 3, 2, 2, 2, 694, 8549, 3, 2,
	2, 2, 696, 8590, 3, 2, 2, 2, 698, 8601, 3, 2, 2, 2, 700, 8603, 3, 2, 2,
	2, 702, 8681, 3, 2, 2, 2, 704, 8685, 3, 2, 2, 2, 706, 8695, 3, 2, 2, 2,
	708, 8723, 3, 2, 2, 2, 710, 8750, 3, 2, 2, 2, 712, 8756, 3, 2, 2, 2, 714,
	8766, 3, 2, 2, 2, 716, 8776, 3, 2, 2, 2, 718, 8778, 3, 2, 2, 2, 720, 8806,
	3, 2, 2, 2, 722, 8808, 3, 2, 2, 2, 724, 8836, 3, 2, 2, 2, 726, 8838, 3,
	2, 2, 2, 728, 8846, 3, 2, 2, 2, 730, 8854, 3, 2, 2, 2, 732, 8863, 3, 2,
	2, 2, 734, 8922, 3, 2, 2, 2, 736, 8929, 3, 2, 2, 2, 738, 8943, 3, 2, 2,
	2, 740, 8952, 3, 2, 2, 2, 742, 8991, 3, 2, 2, 2, 744, 9007, 3, 2, 2, 2,
	746, 9014, 3, 2, 2, 2, 748, 9016, 3, 2, 2, 2, 750, 9063, 3, 2, 2, 2, 752,
	9065, 3, 2, 2, 2, 754, 9068, 3, 2, 2, 2, 756, 9072, 3, 2, 2, 2, 758, 9074,
	3, 2, 2, 2, 760, 9131, 3, 2, 2, 2, 762, 9133, 3, 2, 2, 2, 764, 9142, 3,
	2, 2, 2, 766, 9150, 3, 2, 2, 2, 768, 9166, 3, 2, 2, 2, 770, 9171, 3, 2,
	2, 2, 772, 9200, 3, 2, 2, 2, 774, 9210, 3, 2, 2, 2, 776, 9216, 3, 2, 2,
	2, 778, 9218, 3, 2, 2, 2, 780, 9231, 3, 2, 2, 2, 782, 9233, 3, 2, 2, 2,
	784, 9286, 3, 2, 2, 2, 786, 9288, 3, 2, 2, 2, 788, 9305, 3, 2, 2, 2, 790,
	9313, 3, 2, 2, 2, 792, 9318, 3, 2, 2, 2, 794, 9360, 3, 2, 2, 2, 796, 9362,
	3, 2, 2, 2, 798, 9370, 3, 2, 2, 2, 800, 9380, 3, 2, 2, 2, 802, 9388, 3,
	2, 2, 2, 804, 9418, 3, 2, 2, 2, 806, 9420, 3, 2, 2, 2, 808, 9434, 3, 2,
	2, 2, 810, 9559, 3, 2, 2, 2, 812, 9566, 3, 2, 2, 2, 814, 9611, 3, 2, 2,
	2, 816, 9635, 3, 2, 2, 2, 818, 9637, 3, 2, 2, 2, 820, 9644, 3, 2, 2, 2,
	822, 9651, 3, 2, 2, 2, 824, 9658, 3, 2, 2, 2, 826, 9663, 3, 2, 2, 2, 828,
	9669, 3, 2, 2, 2, 830, 9674, 3, 2, 2, 2, 832, 9678, 3, 2, 2, 2, 834, 9683,
	3, 2, 2, 2, 836, 9698, 3, 2, 2, 2, 838, 9713, 3, 2, 2, 2, 840, 9757, 3,
	2, 2, 2, 842, 9759, 3, 2, 2, 2, 844, 9772, 3, 2, 2, 2, 846, 9774, 3, 2,
	2, 2, 848, 9788, 3, 2, 2, 2, 850, 9806, 3, 2, 2, 2, 852, 9840, 3, 2, 2,
	2, 854, 9862, 3, 2, 2, 2, 856, 9865, 3, 2, 2, 2, 858, 9869, 3, 2, 2, 2,
	860, 9884, 3, 2, 2, 2, 862, 9893, 3, 2, 2, 2, 864, 9897, 3, 2, 2, 2, 866,
	9905, 3, 2, 2, 2, 868, 9911, 3, 2, 2, 2, 870, 9947, 3, 2, 2, 2, 872, 9949,
	3, 2, 2, 2, 874, 9962, 3, 2, 2, 2, 876, 9964, 3, 2, 2, 2, 878, 9985, 3,
	2, 2, 2, 880, 10047, 3, 2, 2, 2, 882, 10056, 3, 2, 2, 2, 884, 10063, 3,
	2, 2, 2, 886, 10082, 3, 2, 2, 2, 888, 10112, 3, 2, 2, 2, 890, 10117, 3,
	2, 2, 2, 892, 10131, 3, 2, 2, 2, 894, 10137, 3, 2, 2, 2, 896, 10187, 3,
	2, 2, 2, 898, 10189, 3, 2, 2, 2, 900, 10203, 3, 2, 2, 2, 902, 10213, 3,
	2, 2, 2, 904, 10215, 3, 2, 2, 2, 906, 10217, 3, 2, 2, 2, 908, 10220, 3,
	2, 2, 2, 910, 10231, 3, 2, 2, 2, 912, 10238, 3, 2, 2, 2, 914, 10240, 3,
	2, 2, 2, 916, 10252, 3, 2, 2, 2, 918, 10300, 3, 2, 2, 2, 920, 10304, 3,
	2, 2, 2, 922, 10306, 3, 2, 2, 2, 924, 10327, 3, 2, 2, 2, 926, 10342, 3,
	2, 2, 2, 928, 10358, 3, 2, 2, 2, 930, 10360, 3, 2, 2, 2, 932, 10392, 3,
	2, 2, 2, 934, 10397, 3, 2, 2, 2, 936, 10414, 3, 2, 2, 2, 938, 10416, 3,
	2, 2, 2, 940, 10421, 3, 2, 2, 2, 942, 10423, 3, 2, 2, 2, 944, 10440, 3,
	2, 2, 2, 946, 10442, 3, 2, 2, 2, 948, 10444, 3, 2, 2, 2, 950, 952, 5, 4,
	3, 2, 951, 950, 3, 2, 2, 2, 952, 955, 3, 2, 2, 2, 953, 951, 3, 2, 2, 2,
	953, 954, 3, 2, 2, 2, 954, 956, 3, 2, 2, 2, 955, 953, 3, 2, 2, 2, 956,
	957, 7, 2, 2, 3, 957, 3, 3, 2, 2, 2, 958, 962, 5, 6, 4, 2, 959, 961, 5,
	658, 330, 2, 960, 959, 3, 2, 2, 2, 961, 964, 3, 2, 2, 2, 962, 960, 3, 2,
	2, 2, 962, 963, 3, 2, 2, 2, 963, 5, 3, 2, 2, 2, 964, 962, 3, 2, 2, 2, 965,
	967, 5, 8, 5, 2, 966, 968, 7, 807, 2, 2, 967, 966, 3, 2, 2, 2, 967, 968,
	3, 2, 2, 2, 968, 970, 3, 2, 2, 2, 969, 965, 3, 2, 2, 2, 970, 971, 3, 2,
	2, 2, 971, 969, 3, 2, 2, 2, 971, 972, 3, 2, 2, 2, 972, 7, 3, 2, 2, 2, 973,
	981, 5, 10, 6, 2, 974, 981, 5, 12, 7, 2, 975, 981, 5, 16, 9, 2, 976, 981,
	5, 662, 332, 2, 977, 981, 5, 48, 25, 2, 978, 981, 5, 50, 26, 2, 979, 981,
	5, 14, 8, 2, 980, 973, 3, 2, 2, 2, 980, 974, 3, 2, 2, 2, 980, 975, 3, 2,
	2, 2, 980, 976, 3, 2, 2, 2, 980, 977, 3, 2, 2, 2, 980, 978, 3, 2, 2, 2,
	980, 979, 3, 2, 2, 2, 981, 9, 3, 2, 2, 2, 982, 988, 5, 428, 215, 2, 983,
	988, 5, 434, 218, 2, 984, 988, 5, 438, 220, 2, 985, 988, 5, 444, 223, 2,
	986, 988, 5, 448, 225, 2, 987, 982, 3, 2, 2, 2, 987, 983, 3, 2, 2, 2, 987,
	984, 3, 2, 2, 2, 987, 985, 3, 2, 2, 2, 987, 986, 3, 2, 2, 2, 988, 11, 3,
	2, 2, 2, 989, 1147, 5, 52, 27, 2, 990, 1147, 5, 60, 31, 2, 991, 1147, 5,
	118, 60, 2, 992, 1147, 5, 132, 67, 2, 993, 1147, 5, 144, 73, 2, 994, 1147,
	5, 146, 74, 2, 995, 1147, 5, 142, 72, 2, 996, 1147, 5, 158, 80, 2, 997,
	1147, 5, 168, 85, 2, 998, 1147, 5, 170, 86, 2, 999, 1147, 5, 276, 139,
	2, 1000, 1147, 5, 280, 141, 2, 1001, 1147, 5, 500, 251, 2, 1002, 1147,
	5, 346, 174, 2, 1003, 1147, 5, 514, 258, 2, 1004, 1147, 5, 286, 144, 2,
	1005, 1147, 5, 294, 148, 2, 1006, 1147, 5, 296, 149, 2, 1007, 1147, 5,
	300, 151, 2, 1008, 1147, 5, 304, 153, 2, 1009, 1147, 5, 308, 155, 2, 1010,
	1147, 5, 316, 159, 2, 1011, 1147, 5, 320, 161, 2, 1012, 1147, 5, 312, 157,
	2, 1013, 1147, 5, 328, 165, 2, 1014, 1147, 5, 324, 163, 2, 1015, 1147,
	5, 332, 167, 2, 1016, 1147, 5, 334, 168, 2, 1017, 1147, 5, 336, 169, 2,
	1018, 1147, 5, 338, 170, 2, 1019, 1147, 5, 344, 173, 2, 1020, 1147, 5,
	360, 181, 2, 1021, 1147, 5, 354, 178, 2, 1022, 1147, 5, 366, 184, 2, 1023,
	1147, 5, 370, 186, 2, 1024, 1147, 5, 374, 188, 2, 1025, 1147, 5, 378, 190,
	2, 1026, 1147, 5, 380, 191, 2, 1027, 1147, 5, 384, 193, 2, 1028, 1147,
	5, 386, 194, 2, 1029, 1147, 5, 390, 196, 2, 1030, 1147, 5, 392, 197, 2,
	1031, 1147, 5, 498, 250, 2, 1032, 1147, 5, 398, 200, 2, 1033, 1147, 5,
	404, 203, 2, 1034, 1147, 5, 406, 204, 2, 1035, 1147, 5, 54, 28, 2, 1036,
	1147, 5, 114, 58, 2, 1037, 1147, 5, 128, 65, 2, 1038, 1147, 5, 172, 87,
	2, 1039, 1147, 5, 274, 138, 2, 1040, 1147, 5, 278, 140, 2, 1041, 1147,
	5, 282, 142, 2, 1042, 1147, 5, 456, 229, 2, 1043, 1147, 5, 348, 175, 2,
	1044, 1147, 5, 284, 143, 2, 1045, 1147, 5, 298, 150, 2, 1046, 1147, 5,
	302, 152, 2, 1047, 1147, 5, 306, 154, 2, 1048, 1147, 5, 310, 156, 2, 1049,
	1147, 5, 458, 230, 2, 1050, 1147, 5, 318, 160, 2, 1051, 1147, 5, 322, 162,
	2, 1052, 1147, 5, 314, 158, 2, 1053, 1147, 5, 330, 166, 2, 1054, 1147,
	5, 326, 164, 2, 1055, 1147, 5, 164, 83, 2, 1056, 1147, 5, 474, 238, 2,
	1057, 1147, 5, 460, 231, 2, 1058, 1147, 5, 462, 232, 2, 1059, 1147, 5,
	340, 171, 2, 1060, 1147, 5, 342, 172, 2, 1061, 1147, 5, 350, 176, 2, 1062,
	1147, 5, 352, 177, 2, 1063, 1147, 5, 356, 179, 2, 1064, 1147, 5, 358, 180,
	2, 1065, 1147, 5, 362, 182, 2, 1066, 1147, 5, 364, 183, 2, 1067, 1147,
	5, 368, 185, 2, 1068, 1147, 5, 372, 187, 2, 1069, 1147, 5, 376, 189, 2,
	1070, 1147, 5, 382, 192, 2, 1071, 1147, 5, 388, 195, 2, 1072, 1147, 5,
	488, 245, 2, 1073, 1147, 5, 394, 198, 2, 1074, 1147, 5, 396, 199, 2, 1075,
	1147, 5, 490, 246, 2, 1076, 1147, 5, 596, 299, 2, 1077, 1147, 5, 400, 201,
	2, 1078, 1147, 5, 402, 202, 2, 1079, 1147, 5, 494, 248, 2, 1080, 1147,
	5, 408, 205, 2, 1081, 1147, 5, 410, 206, 2, 1082, 1147, 5, 56, 29, 2, 1083,
	1147, 5, 58, 30, 2, 1084, 1147, 5, 116, 59, 2, 1085, 1147, 5, 130, 66,
	2, 1086, 1147, 5, 156, 79, 2, 1087, 1147, 5, 166, 84, 2, 1088, 1147, 5,
	174, 88, 2, 1089, 1147, 5, 176, 89, 2, 1090, 1147, 5, 178, 90, 2, 1091,
	1147, 5, 180, 91, 2, 1092, 1147, 5, 182, 92, 2, 1093, 1147, 5, 184, 93,
	2, 1094, 1147, 5, 186, 94, 2, 1095, 1147, 5, 188, 95, 2, 1096, 1147, 5,
	190, 96, 2, 1097, 1147, 5, 232, 117, 2, 1098, 1147, 5, 192, 97, 2, 1099,
	1147, 5, 194, 98, 2, 1100, 1147, 5, 206, 104, 2, 1101, 1147, 5, 208, 105,
	2, 1102, 1147, 5, 196, 99, 2, 1103, 1147, 5, 198, 100, 2, 1104, 1147, 5,
	200, 101, 2, 1105, 1147, 5, 202, 102, 2, 1106, 1147, 5, 204, 103, 2, 1107,
	1147, 5, 210, 106, 2, 1108, 1147, 5, 212, 107, 2, 1109, 1147, 5, 214, 108,
	2, 1110, 1147, 5, 588, 295, 2, 1111, 1147, 5, 574, 288, 2, 1112, 1147,
	5, 216, 109, 2, 1113, 1147, 5, 218, 110, 2, 1114, 1147, 5, 220, 111, 2,
	1115, 1147, 5, 222, 112, 2, 1116, 1147, 5, 224, 113, 2, 1117, 1147, 5,
	580, 291, 2, 1118, 1147, 5, 226, 114, 2, 1119, 1147, 5, 228, 115, 2, 1120,
	1147, 5, 230, 116, 2, 1121, 1147, 5, 234, 118, 2, 1122, 1147, 5, 236, 119,
	2, 1123, 1147, 5, 238, 120, 2, 1124, 1147, 5, 240, 121, 2, 1125, 1147,
	5, 242, 122, 2, 1126, 1147, 5, 244, 123, 2, 1127, 1147, 5, 246, 124, 2,
	1128, 1147, 5, 248, 125, 2, 1129, 1147, 5, 250, 126, 2, 1130, 1147, 5,
	252, 127, 2, 1131, 1147, 5, 254, 128, 2, 1132, 1147, 5, 590, 296, 2, 1133,
	1147, 5, 256, 129, 2, 1134, 1147, 5, 258, 130, 2, 1135, 1147, 5, 260, 131,
	2, 1136, 1147, 5, 592, 297, 2, 1137, 1147, 5, 582, 292, 2, 1138, 1147,
	5, 598, 300, 2, 1139, 1147, 5, 262, 132, 2, 1140, 1147, 5, 594, 298, 2,
	1141, 1147, 5, 264, 133, 2, 1142, 1147, 5, 266, 134, 2, 1143, 1147, 5,
	268, 135, 2, 1144, 1147, 5, 270, 136, 2, 1145, 1147, 5, 272, 137, 2, 1146,
	989, 3, 2, 2, 2, 1146, 990, 3, 2, 2, 2, 1146, 991, 3, 2, 2, 2, 1146, 992,
	3, 2, 2, 2, 1146, 993, 3, 2, 2, 2, 1146, 994, 3, 2, 2, 2, 1146, 995, 3,
	2, 2, 2, 1146, 996, 3, 2, 2, 2, 1146, 997, 3, 2, 2, 2, 1146, 998, 3, 2,
	2, 2, 1146, 999, 3, 2, 2, 2, 1146, 1000, 3, 2, 2, 2, 1146, 1001, 3, 2,
	2, 2, 1146, 1002, 3, 2, 2, 2, 1146, 1003, 3, 2, 2, 2, 1146, 1004, 3, 2,
	2, 2, 1146, 1005, 3, 2, 2, 2, 1146, 1006, 3, 2, 2, 2, 1146, 1007, 3, 2,
	2, 2, 1146, 1008, 3, 2, 2, 2, 1146, 1009, 3, 2, 2, 2, 1146, 1010, 3, 2,
	2, 2, 1146, 1011, 3, 2, 2, 2, 1146, 1012, 3, 2, 2, 2, 1146, 1013, 3, 2,
	2, 2, 1146, 1014, 3, 2, 2, 2, 1146, 1015, 3, 2, 2, 2, 1146, 1016, 3, 2,
	2, 2, 1146, 1017, 3, 2, 2, 2, 1146, 1018, 3, 2, 2, 2, 1146, 1019, 3, 2,
	2, 2, 1146, 1020, 3, 2, 2, 2, 1146, 1021, 3, 2, 2, 2, 1146, 1022, 3, 2,
	2, 2, 1146, 1023, 3, 2, 2, 2, 1146, 1024, 3, 2, 2, 2, 1146, 1025, 3, 2,
	2, 2, 1146, 1026, 3, 2, 2, 2, 1146, 1027, 3, 2, 2, 2, 1146, 1028, 3, 2,
	2, 2, 1146, 1029, 3, 2, 2, 2, 1146, 1030, 3, 2, 2, 2, 1146, 1031, 3, 2,
	2, 2, 1146, 1032, 3, 2, 2, 2, 1146, 1033, 3, 2, 2, 2, 1146, 1034, 3, 2,
	2, 2, 1146, 1035, 3, 2, 2, 2, 1146, 1036, 3, 2, 2, 2, 1146, 1037, 3, 2,
	2, 2, 1146, 1038, 3, 2, 2, 2, 1146, 1039, 3, 2, 2, 2, 1146, 1040, 3, 2,
	2, 2, 1146, 1041, 3, 2, 2, 2, 1146, 1042, 3, 2, 2, 2, 1146, 1043, 3, 2,
	2, 2, 1146, 1044, 3, 2, 2, 2, 1146, 1045, 3, 2, 2, 2, 1146, 1046, 3, 2,
	2, 2, 1146, 1047, 3, 2, 2, 2, 1146, 1048, 3, 2, 2, 2, 1146, 1049, 3, 2,
	2, 2, 1146, 1050, 3, 2, 2, 2, 1146, 1051, 3, 2, 2, 2, 1146, 1052, 3, 2,
	2, 2, 1146, 1053, 3, 2, 2, 2, 1146, 1054, 3, 2, 2, 2, 1146, 1055, 3, 2,
	2, 2, 1146, 1056, 3, 2, 2, 2, 1146, 1057, 3, 2, 2, 2, 1146, 1058, 3, 2,
	2, 2, 1146, 1059, 3, 2, 2, 2, 1146, 1060, 3, 2, 2, 2, 1146, 1061, 3, 2,
	2, 2, 1146, 1062, 3, 2, 2, 2, 1146, 1063, 3, 2, 2, 2, 1146, 1064, 3, 2,
	2, 2, 1146, 1065, 3, 2, 2, 2, 1146, 1066, 3, 2, 2, 2, 1146, 1067, 3, 2,
	2, 2, 1146, 1068, 3, 2, 2, 2, 1146, 1069, 3, 2, 2, 2, 1146, 1070, 3, 2,
	2, 2, 1146, 1071, 3, 2, 2, 2, 1146, 1072, 3, 2, 2, 2, 1146, 1073, 3, 2,
	2, 2, 1146, 1074, 3, 2, 2, 2, 1146, 1075, 3, 2, 2, 2, 1146, 1076, 3, 2,
	2, 2, 1146, 1077, 3, 2, 2, 2, 1146, 1078, 3, 2, 2, 2, 1146, 1079, 3, 2,
	2, 2, 1146, 1080, 3, 2, 2, 2, 1146, 1081, 3, 2, 2, 2, 1146, 1082, 3, 2,
	2, 2, 1146, 1083, 3, 2, 2, 2, 1146, 1084, 3, 2, 2, 2, 1146, 1085, 3, 2,
	2, 2, 1146, 1086, 3, 2, 2, 2, 1146, 1087, 3, 2, 2, 2, 1146, 1088, 3, 2,
	2, 2, 1146, 1089, 3, 2, 2, 2, 1146, 1090, 3, 2, 2, 2, 1146, 1091, 3, 2,
	2, 2, 1146, 1092, 3, 2, 2, 2, 1146, 1093, 3, 2, 2, 2, 1146, 1094, 3, 2,
	2, 2, 1146, 1095, 3, 2, 2, 2, 1146, 1096, 3, 2, 2, 2, 1146, 1097, 3, 2,
	2, 2, 1146, 1098, 3, 2, 2, 2, 1146, 1099, 3, 2, 2, 2, 1146, 1100, 3, 2,
	2, 2, 1146, 1101, 3, 2, 2, 2, 1146, 1102, 3, 2, 2, 2, 1146, 1103, 3, 2,
	2, 2, 1146, 1104, 3, 2, 2, 2, 1146, 1105, 3, 2, 2, 2, 1146, 1106, 3, 2,
	2, 2, 1146, 1107, 3, 2, 2, 2, 1146, 1108, 3, 2, 2, 2, 1146, 1109, 3, 2,
	2, 2, 1146, 1110, 3, 2, 2, 2, 1146, 1111, 3, 2, 2, 2, 1146, 1112, 3, 2,
	2, 2, 1146, 1113, 3, 2, 2, 2, 1146, 1114, 3, 2, 2, 2, 1146, 1115, 3, 2,
	2, 2, 1146, 1116, 3, 2, 2, 2, 1146, 1117, 3, 2, 2, 2, 1146, 1118, 3, 2,
	2, 2, 1146, 1119, 3, 2, 2, 2, 1146, 1120, 3, 2, 2, 2, 1146, 1121, 3, 2,
	2, 2, 1146, 1122, 3, 2, 2, 2, 1146, 1123, 3, 2, 2, 2, 1146, 1124, 3, 2,
	2, 2, 1146, 1125, 3, 2, 2, 2, 1146, 1126, 3, 2, 2, 2, 1146, 1127, 3, 2,
	2, 2, 1146, 1128, 3, 2, 2, 2, 1146, 1129, 3, 2, 2, 2, 1146, 1130, 3, 2,
	2, 2, 1146, 1131, 3, 2, 2, 2, 1146, 1132, 3, 2, 2, 2, 1146, 1133, 3, 2,
	2, 2, 1146, 1134, 3, 2, 2, 2, 1146, 1135, 3, 2, 2, 2, 1146, 1136, 3, 2,
	2, 2, 1146, 1137, 3, 2, 2, 2, 1146, 1138, 3, 2, 2, 2, 1146, 1139, 3, 2,
	2, 2, 1146, 1140, 3, 2, 2, 2, 1146, 1141, 3, 2, 2, 2, 1146, 1142, 3, 2,
	2, 2, 1146, 1143, 3, 2, 2, 2, 1146, 1144, 3, 2, 2, 2, 1146, 1145, 3, 2,
	2, 2, 1147, 13, 3, 2, 2, 2, 1148, 1154, 5, 610, 306, 2, 1149, 1154, 5,
	612, 307, 2, 1150, 1154, 5, 614, 308, 2, 1151, 1154, 5, 616, 309, 2, 1152,
	1154, 5, 618, 310, 2, 1153, 1148, 3, 2, 2, 2, 1153, 1149, 3, 2, 2, 2, 1153,
	1150, 3, 2, 2, 2, 1153, 1151, 3, 2, 2, 2, 1153, 1152, 3, 2, 2, 2, 1154,
	15, 3, 2, 2, 2, 1155, 1168, 5, 18, 10, 2, 1156, 1168, 5, 20, 11, 2, 1157,
	1168, 5, 22, 12, 2, 1158, 1168, 5, 24, 13, 2, 1159, 1168, 5, 28, 15, 2,
	1160, 1168, 5, 26, 14, 2, 1161, 1168, 5, 30, 16, 2, 1162, 1168, 5, 38,
	20, 2, 1163, 1168, 5, 40, 21, 2, 1164, 1168, 5, 42, 22, 2, 1165, 1168,
	5, 44, 23, 2, 1166, 1168, 5, 46, 24, 2, 1167, 1155, 3, 2, 2, 2, 1167, 1156,
	3, 2, 2, 2, 1167, 1157, 3, 2, 2, 2, 1167, 1158, 3, 2, 2, 2, 1167, 1159,
	3, 2, 2, 2, 1167, 1160, 3, 2, 2, 2, 1167, 1161, 3, 2, 2, 2, 1167, 1162,
	3, 2, 2, 2, 1167, 1163, 3, 2, 2, 2, 1167, 1164, 3, 2, 2, 2, 1167, 1165,
	3, 2, 2, 2, 1167, 1166, 3, 2, 2, 2, 1168, 17, 3, 2, 2, 2, 1169, 1171, 7,
	27, 2, 2, 1170, 1172, 7, 807, 2, 2, 1171, 1170, 3, 2, 2, 2, 1171, 1172,
	3, 2, 2, 2, 1172, 1174, 3, 2, 2, 2, 1173, 1175, 5, 6, 4, 2, 1174, 1173,
	3, 2, 2, 2, 1174, 1175, 3, 2, 2, 2, 1175, 1176, 3, 2, 2, 2, 1176, 1178,
	7, 108, 2, 2, 1177, 1179, 7, 807, 2, 2, 1178, 1177, 3, 2, 2, 2, 1178, 1179,
	3, 2, 2, 2, 1179, 19, 3, 2, 2, 2, 1180, 1182, 7, 32, 2, 2, 1181, 1183,
	7, 807, 2, 2, 1182, 1181, 3, 2, 2, 2, 1182, 1183, 3, 2, 2, 2, 1183, 21,
	3, 2, 2, 2, 1184, 1186, 7, 65, 2, 2, 1185, 1187, 7, 807, 2, 2, 1186, 1185,
	3, 2, 2, 2, 1186, 1187, 3, 2, 2, 2, 1187, 23, 3, 2, 2, 2, 1188, 1189, 7,
	143, 2, 2, 1189, 1191, 5, 940, 471, 2, 1190, 1192, 7, 807, 2, 2, 1191,
	1190, 3, 2, 2, 2, 1191, 1192, 3, 2, 2, 2, 1192, 1199, 3, 2, 2, 2, 1193,
	1194, 5, 940, 471, 2, 1194, 1196, 7, 808, 2, 2, 1195, 1197, 7, 807, 2,
	2, 1196, 1195, 3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 1199, 3, 2, 2,
	2, 1198, 1188, 3, 2, 2, 2, 1198, 1193, 3, 2, 2, 2, 1199, 25, 3, 2, 2, 2,
	1200, 1202, 7, 281, 2, 2, 1201, 1203, 5, 706, 354, 2, 1202, 1201, 3, 2,
	2, 2, 1202, 1203, 3, 2, 2, 2, 1203, 1205, 3, 2, 2, 2, 1204, 1206, 7, 807,
	2, 2, 1205, 1204, 3, 2, 2, 2, 1205, 1206, 3, 2, 2, 2, 1206, 27, 3, 2, 2,
	2, 1207, 1208, 7, 153, 2, 2, 1208, 1209, 5, 728, 365, 2, 1209, 1212, 5,
	8, 5, 2, 1210, 1211, 7, 106, 2, 2, 1211, 1213, 5, 8, 5, 2, 1212, 1210,
	3, 2, 2, 2, 1212, 1213, 3, 2, 2, 2, 1213, 1215, 3, 2, 2, 2, 1214, 1216,
	7, 807, 2, 2, 1215, 1214, 3, 2, 2, 2, 1215, 1216, 3, 2, 2, 2, 1216, 29,
	3, 2, 2, 2, 1217, 1224, 7, 738, 2, 2, 1218, 1219, 5, 32, 17, 2, 1219, 1220,
	7, 806, 2, 2, 1220, 1221, 5, 34, 18, 2, 1221, 1222, 7, 806, 2, 2, 1222,
	1223, 5, 36, 19, 2, 1223, 1225, 3, 2, 2, 2, 1224, 1218, 3, 2, 2, 2, 1224,
	1225, 3, 2, 2, 2, 1225, 1227, 3, 2, 2, 2, 1226, 1228, 7, 807, 2, 2, 1227,
	1226, 3, 2, 2, 2, 1227, 1228, 3, 2, 2, 2, 1228, 31, 3, 2, 2, 2, 1229, 1230,
	9, 2, 2, 2, 1230, 33, 3, 2, 2, 2, 1231, 1232, 9, 3, 2, 2, 1232, 35, 3,
	2, 2, 2, 1233, 1234, 9, 2, 2, 2, 1234, 37, 3, 2, 2, 2, 1235, 1236, 7, 27,
	2, 2, 1236, 1238, 7, 749, 2, 2, 1237, 1239, 7, 807, 2, 2, 1238, 1237, 3,
	2, 2, 2, 1238, 1239, 3, 2, 2, 2, 1239, 1241, 3, 2, 2, 2, 1240, 1242, 5,
	6, 4, 2, 1241, 1240, 3, 2, 2, 2, 1241, 1242, 3, 2, 2, 2, 1242, 1243, 3,
	2, 2, 2, 1243, 1244, 7, 108, 2, 2, 1244, 1246, 7, 749, 2, 2, 1245, 1247,
	7, 807, 2, 2, 1246, 1245, 3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247, 1248,
	3, 2, 2, 2, 1248, 1249, 7, 27, 2, 2, 1249, 1251, 7, 433, 2, 2, 1250, 1252,
	7, 807, 2, 2, 1251, 1250, 3, 2, 2, 2, 1251, 1252, 3, 2, 2, 2, 1252, 1254,
	3, 2, 2, 2, 1253, 1255, 5, 6, 4, 2, 1254, 1253, 3, 2, 2, 2, 1254, 1255,
	3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2, 1256, 1257, 7, 108, 2, 2, 1257, 1259,
	7, 433, 2, 2, 1258, 1260, 7, 807, 2, 2, 1259, 1258, 3, 2, 2, 2, 1259, 1260,
	3, 2, 2, 2, 1260, 39, 3, 2, 2, 2, 1261, 1263, 7, 374, 2, 2, 1262, 1264,
	5, 442, 222, 2, 1263, 1262, 3, 2, 2, 2, 1263, 1264, 3, 2, 2, 2, 1264, 1266,
	3, 2, 2, 2, 1265, 1267, 7, 806, 2, 2, 1266, 1265, 3, 2, 2, 2, 1266, 1267,
	3, 2, 2, 2, 1267, 1270, 3, 2, 2, 2, 1268, 1269, 9, 4, 2, 2, 1269, 1271,
	5, 446, 224, 2, 1270, 1268, 3, 2, 2, 2, 1270, 1271, 3, 2, 2, 2, 1271, 1273,
	3, 2, 2, 2, 1272, 1274, 5, 706, 354, 2, 1273, 1272, 3, 2, 2, 2, 1273, 1274,
	3, 2, 2, 2, 1274, 1276, 3, 2, 2, 2, 1275, 1277, 7, 807, 2, 2, 1276, 1275,
	3, 2, 2, 2, 1276, 1277, 3, 2, 2, 2, 1277, 41, 3, 2, 2, 2, 1278, 1279, 7,
	377, 2, 2, 1279, 1289, 5, 728, 365, 2, 1280, 1290, 5, 8, 5, 2, 1281, 1283,
	7, 32, 2, 2, 1282, 1284, 7, 807, 2, 2, 1283, 1282, 3, 2, 2, 2, 1283, 1284,
	3, 2, 2, 2, 1284, 1290, 3, 2, 2, 2, 1285, 1287, 7, 65, 2, 2, 1286, 1288,
	7, 807, 2, 2, 1287, 1286, 3, 2, 2, 2, 1287, 1288, 3, 2, 2, 2, 1288, 1290,
	3, 2, 2, 2, 1289, 1280, 3, 2, 2, 2, 1289, 1281, 3, 2, 2, 2, 1289, 1285,
	3, 2, 2, 2, 1290, 43, 3, 2, 2, 2, 1291, 1292, 7, 256, 2, 2, 1292, 1294,
	5, 706, 354, 2, 1293, 1295, 7, 807, 2, 2, 1294, 1293, 3, 2, 2, 2, 1294,
	1295, 3, 2, 2, 2, 1295, 45, 3, 2, 2, 2, 1296, 1297, 7, 263, 2, 2, 1297,
	1298, 7, 804, 2, 2, 1298, 1299, 9, 5, 2, 2, 1299, 1300, 7, 806, 2, 2, 1300,
	1301, 5, 704, 353, 2, 1301, 1302, 7, 806, 2, 2, 1302, 1307, 5, 704, 353,
	2, 1303, 1304, 7, 806, 2, 2, 1304, 1306, 5, 704, 353, 2, 1305, 1303, 3,
	2, 2, 2, 1306, 1309, 3, 2, 2, 2, 1307, 1305, 3, 2, 2, 2, 1307, 1308, 3,
	2, 2, 2, 1308, 1310, 3, 2, 2, 2, 1309, 1307, 3, 2, 2, 2, 1310, 1313, 7,
	805, 2, 2, 1311, 1312, 7, 379, 2, 2, 1312, 1314, 9, 6, 2, 2, 1313, 1311,
	3, 2, 2, 2, 1313, 1314, 3, 2, 2, 2, 1314, 1316, 3, 2, 2, 2, 1315, 1317,
	7, 807, 2, 2, 1316, 1315, 3, 2, 2, 2, 1316, 1317, 3, 2, 2, 2, 1317, 47,
	3, 2, 2, 2, 1318, 1319, 7, 807, 2, 2, 1319, 49, 3, 2, 2, 2, 1320, 1333,
	5, 606, 304, 2, 1321, 1333, 5, 608, 305, 2, 1322, 1333, 5, 424, 213, 2,
	1323, 1333, 5, 422, 212, 2, 1324, 1333, 5, 412, 207, 2, 1325, 1333, 5,
	416, 209, 2, 1326, 1333, 5, 620, 311, 2, 1327, 1333, 5, 426, 214, 2, 1328,
	1333, 5, 626, 314, 2, 1329, 1333, 5, 654, 328, 2, 1330, 1333, 5, 656, 329,
	2, 1331, 1333, 5, 660, 331, 2, 1332, 1320, 3, 2, 2, 2, 1332, 1321, 3, 2,
	2, 2, 1332, 1322, 3, 2, 2, 2, 1332, 1323, 3, 2, 2, 2, 1332, 1324, 3, 2,
	2, 2, 1332, 1325, 3, 2, 2, 2, 1332, 1326, 3, 2, 2, 2, 1332, 1327, 3, 2,
	2, 2, 1332, 1328, 3, 2, 2, 2, 1332, 1329, 3, 2, 2, 2, 1332, 1330, 3, 2,
	2, 2, 1332, 1331, 3, 2, 2, 2, 1333, 51, 3, 2, 2, 2, 1334, 1335, 7, 9, 2,
	2, 1335, 1336, 7, 14, 2, 2, 1336, 1337, 7, 288, 2, 2, 1337, 1338, 5, 940,
	471, 2, 1338, 1345, 7, 379, 2, 2, 1339, 1341, 7, 806, 2, 2, 1340, 1339,
	3, 2, 2, 2, 1340, 1341, 3, 2, 2, 2, 1341, 1342, 3, 2, 2, 2, 1342, 1343,
	7, 598, 2, 2, 1343, 1344, 7, 787, 2, 2, 1344, 1346, 5, 940, 471, 2, 1345,
	1340, 3, 2, 2, 2, 1345, 1346, 3, 2, 2, 2, 1346, 1353, 3, 2, 2, 2, 1347,
	1349, 7, 806, 2, 2, 1348, 1347, 3, 2, 2, 2, 1348, 1349, 3, 2, 2, 2, 1349,
	1350, 3, 2, 2, 2, 1350, 1351, 7, 243, 2, 2, 1351, 1352, 7, 787, 2, 2, 1352,
	1354, 7, 783, 2, 2, 1353, 1348, 3, 2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354,
	1361, 3, 2, 2, 2, 1355, 1357, 7, 806, 2, 2, 1356, 1355, 3, 2, 2, 2, 1356,
	1357, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1359, 7, 91, 2, 2, 1359,
	1360, 7, 787, 2, 2, 1360, 1362, 5, 940, 471, 2, 1361, 1356, 3, 2, 2, 2,
	1361, 1362, 3, 2, 2, 2, 1362, 53, 3, 2, 2, 2, 1363, 1364, 7, 72, 2, 2,
	1364, 1365, 7, 14, 2, 2, 1365, 1366, 7, 288, 2, 2, 1366, 1367, 5, 940,
	471, 2, 1367, 1374, 7, 379, 2, 2, 1368, 1370, 7, 806, 2, 2, 1369, 1368,
	3, 2, 2, 2, 1369, 1370, 3, 2, 2, 2, 1370, 1371, 3, 2, 2, 2, 1371, 1372,
	7, 243, 2, 2, 1372, 1373, 7, 787, 2, 2, 1373, 1375, 7, 783, 2, 2, 1374,
	1369, 3, 2, 2, 2, 1374, 1375, 3, 2, 2, 2, 1375, 1382, 3, 2, 2, 2, 1376,
	1378, 7, 806, 2, 2, 1377, 1376, 3, 2, 2, 2, 1377, 1378, 3, 2, 2, 2, 1378,
	1379, 3, 2, 2, 2, 1379, 1380, 7, 91, 2, 2, 1380, 1381, 7, 787, 2, 2, 1381,
	1383, 5, 940, 471, 2, 1382, 1377, 3, 2, 2, 2, 1382, 1383, 3, 2, 2, 2, 1383,
	55, 3, 2, 2, 2, 1384, 1385, 7, 103, 2, 2, 1385, 1388, 7, 395, 2, 2, 1386,
	1387, 7, 153, 2, 2, 1387, 1389, 7, 119, 2, 2, 1388, 1386, 3, 2, 2, 2, 1388,
	1389, 3, 2, 2, 2, 1389, 1393, 3, 2, 2, 2, 1390, 1391, 5, 940, 471, 2, 1391,
	1392, 7, 799, 2, 2, 1392, 1394, 3, 2, 2, 2, 1393, 1390, 3, 2, 2, 2, 1393,
	1394, 3, 2, 2, 2, 1394, 1395, 3, 2, 2, 2, 1395, 1396, 5, 940, 471, 2, 1396,
	57, 3, 2, 2, 2, 1397, 1398, 7, 103, 2, 2, 1398, 1399, 7, 14, 2, 2, 1399,
	1400, 7, 288, 2, 2, 1400, 1401, 5, 940, 471, 2, 1401, 59, 3, 2, 2, 2, 1402,
	1403, 5, 62, 32, 2, 1403, 1404, 5, 940, 471, 2, 1404, 1405, 5, 64, 33,
	2, 1405, 61, 3, 2, 2, 2, 1406, 1407, 7, 9, 2, 2, 1407, 1408, 7, 407, 2,
	2, 1408, 63, 3, 2, 2, 2, 1409, 1411, 5, 66, 34, 2, 1410, 1409, 3, 2, 2,
	2, 1410, 1411, 3, 2, 2, 2, 1411, 1413, 3, 2, 2, 2, 1412, 1414, 5, 88, 45,
	2, 1413, 1412, 3, 2, 2, 2, 1413, 1414, 3, 2, 2, 2, 1414, 1416, 3, 2, 2,
	2, 1415, 1417, 5, 70, 36, 2, 1416, 1415, 3, 2, 2, 2, 1416, 1417, 3, 2,
	2, 2, 1417, 1419, 3, 2, 2, 2, 1418, 1420, 5, 76, 39, 2, 1419, 1418, 3,
	2, 2, 2, 1419, 1420, 3, 2, 2, 2, 1420, 65, 3, 2, 2, 2, 1421, 1424, 5, 68,
	35, 2, 1422, 1425, 5, 92, 47, 2, 1423, 1425, 5, 84, 43, 2, 1424, 1422,
	3, 2, 2, 2, 1424, 1423, 3, 2, 2, 2, 1425, 67, 3, 2, 2, 2, 1426, 1427, 7,
	139, 2, 2, 1427, 69, 3, 2, 2, 2, 1428, 1429, 5, 74, 38, 2, 1429, 1430,
	5, 72, 37, 2, 1430, 71, 3, 2, 2, 2, 1431, 1434, 7, 5, 2, 2, 1432, 1434,
	5, 110, 56, 2, 1433, 1431, 3, 2, 2, 2, 1433, 1432, 3, 2, 2, 2, 1434, 73,
	3, 2, 2, 2, 1435, 1436, 7, 103, 2, 2, 1436, 75, 3, 2, 2, 2, 1437, 1438,
	5, 78, 40, 2, 1438, 1439, 5, 80, 41, 2, 1439, 77, 3, 2, 2, 2, 1440, 1441,
	7, 3, 2, 2, 1441, 1442, 7, 129, 2, 2, 1442, 1443, 7, 139, 2, 2, 1443, 79,
	3, 2, 2, 2, 1444, 1448, 5, 82, 42, 2, 1445, 1446, 5, 86, 44, 2, 1446, 1447,
	5, 940, 471, 2, 1447, 1449, 3, 2, 2, 2, 1448, 1445, 3, 2, 2, 2, 1448, 1449,
	3, 2, 2, 2, 1449, 81, 3, 2, 2, 2, 1450, 1451, 7, 783, 2, 2, 1451, 83, 3,
	2, 2, 2, 1452, 1453, 5, 86, 44, 2, 1453, 1454, 5, 940, 471, 2, 1454, 85,
	3, 2, 2, 2, 1455, 1456, 7, 15, 2, 2, 1456, 87, 3, 2, 2, 2, 1457, 1458,
	5, 90, 46, 2, 1458, 1459, 5, 94, 48, 2, 1459, 89, 3, 2, 2, 2, 1460, 1461,
	7, 379, 2, 2, 1461, 91, 3, 2, 2, 2, 1462, 1466, 5, 96, 49, 2, 1463, 1466,
	5, 106, 54, 2, 1464, 1466, 7, 783, 2, 2, 1465, 1462, 3, 2, 2, 2, 1465,
	1463, 3, 2, 2, 2, 1465, 1464, 3, 2, 2, 2, 1466, 93, 3, 2, 2, 2, 1467, 1468,
	8, 48, 1, 2, 1468, 1469, 7, 245, 2, 2, 1469, 1470, 7, 787, 2, 2, 1470,
	1477, 9, 7, 2, 2, 1471, 1472, 7, 373, 2, 2, 1472, 1473, 7, 787, 2, 2, 1473,
	1477, 9, 8, 2, 2, 1474, 1475, 7, 357, 2, 2, 1475, 1477, 7, 81, 2, 2, 1476,
	1467, 3, 2, 2, 2, 1476, 1471, 3, 2, 2, 2, 1476, 1474, 3, 2, 2, 2, 1477,
	1482, 3, 2, 2, 2, 1478, 1479, 12, 3, 2, 2, 1479, 1481, 7, 806, 2, 2, 1480,
	1478, 3, 2, 2, 2, 1481, 1484, 3, 2, 2, 2, 1482, 1480, 3, 2, 2, 2, 1482,
	1483, 3, 2, 2, 2, 1483, 95, 3, 2, 2, 2, 1484, 1482, 3, 2, 2, 2, 1485, 1486,
	5, 100, 51, 2, 1486, 1487, 5, 98, 50, 2, 1487, 1488, 5, 102, 52, 2, 1488,
	97, 3, 2, 2, 2, 1489, 1490, 5, 940, 471, 2, 1490, 99, 3, 2, 2, 2, 1491,
	1492, 7, 101, 2, 2, 1492, 101, 3, 2, 2, 2, 1493, 1494, 5, 104, 53, 2, 1494,
	1495, 5, 102, 52, 2, 1495, 1498, 3, 2, 2, 2, 1496, 1498, 5, 940, 471, 2,
	1497, 1493, 3, 2, 2, 2, 1497, 1496, 3, 2, 2, 2, 1498, 103, 3, 2, 2, 2,
	1499, 1500, 7, 24, 2, 2, 1500, 105, 3, 2, 2, 2, 1501, 1502, 5, 108, 55,
	2, 1502, 1503, 5, 102, 52, 2, 1503, 107, 3, 2, 2, 2, 1504, 1505, 7, 484,
	2, 2, 1505, 109, 3, 2, 2, 2, 1506, 1507, 5, 112, 57, 2, 1507, 1508, 5,
	106, 54, 2, 1508, 1509, 7, 776, 2, 2, 1509, 1510, 7, 806, 2, 2, 1510, 1513,
	3, 2, 2, 2, 1511, 1513, 5, 106, 54, 2, 1512, 1506, 3, 2, 2, 2, 1512, 1511,
	3, 2, 2, 2, 1513, 111, 3, 2, 2, 2, 1514, 1515, 7, 776, 2, 2, 1515, 113,
	3, 2, 2, 2, 1516, 1517, 7, 72, 2, 2, 1517, 1518, 7, 407, 2, 2, 1518, 1521,
	5, 940, 471, 2, 1519, 1520, 7, 19, 2, 2, 1520, 1522, 5, 940, 471, 2, 1521,
	1519, 3, 2, 2, 2, 1521, 1522, 3, 2, 2, 2, 1522, 1523, 3, 2, 2, 2, 1523,
	1528, 7, 139, 2, 2, 1524, 1526, 7, 806, 2, 2, 1525, 1524, 3, 2, 2, 2, 1525,
	1526, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527, 1529, 9, 9, 2, 2, 1528,
	1525, 3, 2, 2, 2, 1529, 1530, 3, 2, 2, 2, 1530, 1528, 3, 2, 2, 2, 1530,
	1531, 3, 2, 2, 2, 1531, 1536, 3, 2, 2, 2, 1532, 1533, 7, 379, 2, 2, 1533,
	1534, 7, 245, 2, 2, 1534, 1535, 7, 787, 2, 2, 1535, 1537, 9, 7, 2, 2, 1536,
	1532, 3, 2, 2, 2, 1536, 1537, 3, 2, 2, 2, 1537, 115, 3, 2, 2, 2, 1538,
	1539, 7, 103, 2, 2, 1539, 1542, 7, 407, 2, 2, 1540, 1541, 7, 153, 2, 2,
	1541, 1543, 7, 119, 2, 2, 1542, 1540, 3, 2, 2, 2, 1542, 1543, 3, 2, 2,
	2, 1543, 1548, 3, 2, 2, 2, 1544, 1546, 7, 806, 2, 2, 1545, 1544, 3, 2,
	2, 2, 1545, 1546, 3, 2, 2, 2, 1546, 1547, 3, 2, 2, 2, 1547, 1549, 5, 940,
	471, 2, 1548, 1545, 3, 2, 2, 2, 1549, 1550, 3, 2, 2, 2, 1550, 1548, 3,
	2, 2, 2, 1550, 1551, 3, 2, 2, 2, 1551, 1555, 3, 2, 2, 2, 1552, 1553, 7,
	379, 2, 2, 1553, 1554, 7, 609, 2, 2, 1554, 1556, 7, 474, 2, 2, 1555, 1552,
	3, 2, 2, 2, 1555, 1556, 3, 2, 2, 2, 1556, 117, 3, 2, 2, 2, 1557, 1558,
	5, 120, 61, 2, 1558, 1563, 5, 940, 471, 2, 1559, 1564, 5, 122, 62, 2, 1560,
	1561, 7, 670, 2, 2, 1561, 1562, 7, 643, 2, 2, 1562, 1564, 7, 171, 2, 2,
	1563, 1559, 3, 2, 2, 2, 1563, 1560, 3, 2, 2, 2, 1564, 119, 3, 2, 2, 2,
	1565, 1566, 7, 9, 2, 2, 1566, 1567, 7, 17, 2, 2, 1567, 1568, 7, 171, 2,
	2, 1568, 121, 3, 2, 2, 2, 1569, 1570, 5, 124, 63, 2, 1570, 1573, 5, 126,
	64, 2, 1571, 1572, 7, 806, 2, 2, 1572, 1574, 5, 126, 64, 2, 1573, 1571,
	3, 2, 2, 2, 1573, 1574, 3, 2, 2, 2, 1574, 1575, 3, 2, 2, 2, 1575, 1576,
	7, 805, 2, 2, 1576, 123, 3, 2, 2, 2, 1577, 1578, 7, 379, 2, 2, 1578, 1579,
	7, 643, 2, 2, 1579, 1580, 7, 171, 2, 2, 1580, 1581, 7, 804, 2, 2, 1581,
	125, 3, 2, 2, 2, 1582, 1583, 7, 466, 2, 2, 1583, 1584, 7, 37, 2, 2, 1584,
	1585, 7, 243, 2, 2, 1585, 1586, 7, 787, 2, 2, 1586, 1593, 7, 783, 2, 2,
	1587, 1588, 7, 492, 2, 2, 1588, 1589, 7, 37, 2, 2, 1589, 1590, 7, 243,
	2, 2, 1590, 1591, 7, 787, 2, 2, 1591, 1593, 7, 783, 2, 2, 1592, 1582, 3,
	2, 2, 2, 1592, 1587, 3, 2, 2, 2, 1593, 127, 3, 2, 2, 2, 1594, 1595, 7,
	72, 2, 2, 1595, 1596, 7, 17, 2, 2, 1596, 1597, 7, 171, 2, 2, 1597, 1600,
	5, 940, 471, 2, 1598, 1599, 7, 19, 2, 2, 1599, 1601, 5, 940, 471, 2, 1600,
	1598, 3, 2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 1615, 3, 2, 2, 2, 1602,
	1613, 7, 139, 2, 2, 1603, 1604, 7, 129, 2, 2, 1604, 1605, 7, 787, 2, 2,
	1605, 1614, 7, 783, 2, 2, 1606, 1607, 7, 117, 2, 2, 1607, 1608, 7, 787,
	2, 2, 1608, 1614, 7, 783, 2, 2, 1609, 1610, 7, 407, 2, 2, 1610, 1614, 5,
	940, 471, 2, 1611, 1612, 7, 648, 2, 2, 1612, 1614, 5, 940, 471, 2, 1613,
	1603, 3, 2, 2, 2, 1613, 1606, 3, 2, 2, 2, 1613, 1609, 3, 2, 2, 2, 1613,
	1611, 3, 2, 2, 2, 1614, 1616, 3, 2, 2, 2, 1615, 1602, 3, 2, 2, 2, 1615,
	1616, 3, 2, 2, 2, 1616, 1629, 3, 2, 2, 2, 1617, 1627, 7, 379, 2, 2, 1618,
	1619, 7, 396, 2, 2, 1619, 1620, 7, 787, 2, 2, 1620, 1628, 9, 10, 2, 2,
	1621, 1622, 7, 649, 2, 2, 1622, 1623, 7, 787, 2, 2, 1623, 1628, 7, 783,
	2, 2, 1624, 1625, 7, 453, 2, 2, 1625, 1626, 7, 787, 2, 2, 1626, 1628, 9,
	11, 2, 2, 1627, 1618, 3, 2, 2, 2, 1627, 1621, 3, 2, 2, 2, 1627, 1624, 3,
	2, 2, 2, 1628, 1630, 3, 2, 2, 2, 1629, 1617, 3, 2, 2, 2, 1629, 1630, 3,
	2, 2, 2, 1630, 1636, 3, 2, 2, 2, 1631, 1632, 7, 492, 2, 2, 1632, 1633,
	7, 37, 2, 2, 1633, 1634, 7, 243, 2, 2, 1634, 1635, 7, 787, 2, 2, 1635,
	1637, 7, 783, 2, 2, 1636, 1631, 3, 2, 2, 2, 1636, 1637, 3, 2, 2, 2, 1637,
	129, 3, 2, 2, 2, 1638, 1639, 7, 103, 2, 2, 1639, 1640, 7, 17, 2, 2, 1640,
	1641, 7, 171, 2, 2, 1641, 1645, 5, 940, 471, 2, 1642, 1643, 7, 670, 2,
	2, 1643, 1644, 7, 648, 2, 2, 1644, 1646, 7, 171, 2, 2, 1645, 1642, 3, 2,
	2, 2, 1645, 1646, 3, 2, 2, 2, 1646, 131, 3, 2, 2, 2, 1647, 1651, 5, 140,
	71, 2, 1648, 1649, 5, 148, 75, 2, 1649, 1650, 5, 138, 70, 2, 1650, 1652,
	3, 2, 2, 2, 1651, 1648, 3, 2, 2, 2, 1651, 1652, 3, 2, 2, 2, 1652, 1653,
	3, 2, 2, 2, 1653, 1654, 5, 880, 441, 2, 1654, 1655, 5, 136, 69, 2, 1655,
	1656, 5, 134, 68, 2, 1656, 133, 3, 2, 2, 2, 1657, 1661, 5, 940, 471, 2,
	1658, 1659, 7, 301, 2, 2, 1659, 1661, 7, 628, 2, 2, 1660, 1657, 3, 2, 2,
	2, 1660, 1658, 3, 2, 2, 2, 1661, 135, 3, 2, 2, 2, 1662, 1663, 7, 348, 2,
	2, 1663, 137, 3, 2, 2, 2, 1664, 1665, 7, 808, 2, 2, 1665, 1666, 7, 808,
	2, 2, 1666, 139, 3, 2, 2, 2, 1667, 1668, 7, 9, 2, 2, 1668, 1669, 7, 19,
	2, 2, 1669, 1670, 7, 228, 2, 2, 1670, 141, 3, 2, 2, 2, 1671, 1675, 5, 140,
	71, 2, 1672, 1673, 5, 150, 76, 2, 1673, 1674, 5, 138, 70, 2, 1674, 1676,
	3, 2, 2, 2, 1675, 1672, 3, 2, 2, 2, 1675, 1676, 3, 2, 2, 2, 1676, 1677,
	3, 2, 2, 2, 1677, 1678, 5, 880, 441, 2, 1678, 1679, 5, 136, 69, 2, 1679,
	1680, 5, 134, 68, 2, 1680, 143, 3, 2, 2, 2, 1681, 1685, 5, 140, 71, 2,
	1682, 1683, 5, 152, 77, 2, 1683, 1684, 5, 138, 70, 2, 1684, 1686, 3, 2,
	2, 2, 1685, 1682, 3, 2, 2, 2, 1685, 1686, 3, 2, 2, 2, 1686, 1687, 3, 2,
	2, 2, 1687, 1688, 5, 882, 442, 2, 1688, 1689, 5, 136, 69, 2, 1689, 1690,
	5, 134, 68, 2, 1690, 145, 3, 2, 2, 2, 1691, 1695, 5, 140, 71, 2, 1692,
	1693, 5, 154, 78, 2, 1693, 1694, 5, 138, 70, 2, 1694, 1696, 3, 2, 2, 2,
	1695, 1692, 3, 2, 2, 2, 1695, 1696, 3, 2, 2, 2, 1696, 1697, 3, 2, 2, 2,
	1697, 1698, 5, 884, 443, 2, 1698, 1699, 5, 136, 69, 2, 1699, 1700, 5, 134,
	68, 2, 1700, 147, 3, 2, 2, 2, 1701, 1736, 7, 617, 2, 2, 1702, 1736, 7,
	407, 2, 2, 1703, 1704, 7, 17, 2, 2, 1704, 1736, 7, 171, 2, 2, 1705, 1706,
	7, 417, 2, 2, 1706, 1736, 7, 146, 2, 2, 1707, 1736, 7, 42, 2, 2, 1708,
	1736, 7, 67, 2, 2, 1709, 1736, 7, 752, 2, 2, 1710, 1736, 7, 84, 2, 2, 1711,
	1736, 7, 109, 2, 2, 1712, 1713, 7, 520, 2, 2, 1713, 1736, 7, 432, 2, 2,
	1714, 1715, 7, 520, 2, 2, 1715, 1736, 7, 725, 2, 2, 1716, 1717, 7, 587,
	2, 2, 1717, 1736, 7, 752, 2, 2, 1718, 1719, 7, 674, 2, 2, 1719, 1720, 7,
	311, 2, 2, 1720, 1736, 7, 424, 2, 2, 1721, 1736, 7, 288, 2, 2, 1722, 1736,
	7, 687, 2, 2, 1723, 1736, 7, 301, 2, 2, 1724, 1725, 7, 697, 2, 2, 1725,
	1726, 7, 647, 2, 2, 1726, 1736, 7, 559, 2, 2, 1727, 1728, 7, 310, 2, 2,
	1728, 1736, 7, 288, 2, 2, 1729, 1736, 7, 311, 2, 2, 1730, 1731, 7, 731,
	2, 2, 1731, 1736, 7, 171, 2, 2, 1732, 1733, 7, 769, 2, 2, 1733, 1734, 7,
	301, 2, 2, 1734, 1736, 7, 439, 2, 2, 1735, 1701, 3, 2, 2, 2, 1735, 1702,
	3, 2, 2, 2, 1735, 1703, 3, 2, 2, 2, 1735, 1705, 3, 2, 2, 2, 1735, 1707,
	3, 2, 2, 2, 1735, 1708, 3, 2, 2, 2, 1735, 1709, 3, 2, 2, 2, 1735, 1710,
	3, 2, 2, 2, 1735, 1711, 3, 2, 2, 2, 1735, 1712, 3, 2, 2, 2, 1735, 1714,
	3, 2, 2, 2, 1735, 1716, 3, 2, 2, 2, 1735, 1718, 3, 2, 2, 2, 1735, 1721,
	3, 2, 2, 2, 1735, 1722, 3, 2, 2, 2, 1735, 1723, 3, 2, 2, 2, 1735, 1724,
	3, 2, 2, 2, 1735, 1727, 3, 2, 2, 2, 1735, 1729, 3, 2, 2, 2, 1735, 1730,
	3, 2, 2, 2, 1735, 1732, 3, 2, 2, 2, 1736, 149, 3, 2, 2, 2, 1737, 1759,
	7, 617, 2, 2, 1738, 1759, 7, 407, 2, 2, 1739, 1740, 7, 17, 2, 2, 1740,
	1759, 7, 171, 2, 2, 1741, 1759, 7, 42, 2, 2, 1742, 1759, 7, 752, 2, 2,
	1743, 1759, 7, 84, 2, 2, 1744, 1745, 7, 520, 2, 2, 1745, 1759, 7, 432,
	2, 2, 1746, 1747, 7, 520, 2, 2, 1747, 1759, 7, 725, 2, 2, 1748, 1759, 7,
	288, 2, 2, 1749, 1759, 7, 301, 2, 2, 1750, 1751, 7, 697, 2, 2, 1751, 1752,
	7, 647, 2, 2, 1752, 1759, 7, 559, 2, 2, 1753, 1754, 7, 731, 2, 2, 1754,
	1759, 7, 171, 2, 2, 1755, 1756, 7, 769, 2, 2, 1756, 1757, 7, 301, 2, 2,
	1757, 1759, 7, 439, 2, 2, 1758, 1737, 3, 2, 2, 2, 1758, 1738, 3, 2, 2,
	2, 1758, 1739, 3, 2, 2, 2, 1758, 1741, 3, 2, 2, 2, 1758, 1742, 3, 2, 2,
	2, 1758, 1743, 3, 2, 2, 2, 1758, 1744, 3, 2, 2, 2, 1758, 1746, 3, 2, 2,
	2, 1758, 1748, 3, 2, 2, 2, 1758, 1749, 3, 2, 2, 2, 1758, 1750, 3, 2, 2,
	2, 1758, 1753, 3, 2, 2, 2, 1758, 1755, 3, 2, 2, 2, 1759, 151, 3, 2, 2,
	2, 1760, 1761, 9, 12, 2, 2, 1761, 153, 3, 2, 2, 2, 1762, 1763, 9, 13, 2,
	2, 1763, 155, 3, 2, 2, 2, 1764, 1765, 7, 103, 2, 2, 1765, 1766, 7, 417,
	2, 2, 1766, 1767, 7, 146, 2, 2, 1767, 1768, 5, 940, 471, 2, 1768, 157,
	3, 2, 2, 2, 1769, 1770, 5, 160, 81, 2, 1770, 1771, 5, 162, 82, 2, 1771,
	159, 3, 2, 2, 2, 1772, 1773, 7, 9, 2, 2, 1773, 1774, 7, 417, 2, 2, 1774,
	1775, 7, 146, 2, 2, 1775, 1776, 5, 940, 471, 2, 1776, 161, 3, 2, 2, 2,
	1777, 1778, 7, 316, 2, 2, 1778, 1794, 7, 804, 2, 2, 1779, 1780, 7, 21,
	2, 2, 1780, 1781, 7, 787, 2, 2, 1781, 1795, 9, 14, 2, 2, 1782, 1783, 7,
	502, 2, 2, 1783, 1784, 7, 787, 2, 2, 1784, 1795, 7, 779, 2, 2, 1785, 1786,
	7, 531, 2, 2, 1786, 1787, 7, 787, 2, 2, 1787, 1795, 7, 779, 2, 2, 1788,
	1789, 7, 465, 2, 2, 1789, 1790, 7, 787, 2, 2, 1790, 1795, 9, 8, 2, 2, 1791,
	1792, 7, 673, 2, 2, 1792, 1793, 7, 787, 2, 2, 1793, 1795, 7, 779, 2, 2,
	1794, 1779, 3, 2, 2, 2, 1794, 1782, 3, 2, 2, 2, 1794, 1785, 3, 2, 2, 2,
	1794, 1788, 3, 2, 2, 2, 1794, 1791, 3, 2, 2, 2, 1795, 1796, 3, 2, 2, 2,
	1796, 2128, 7, 805, 2, 2, 1797, 1798, 7, 3, 2, 2, 1798, 1799, 7, 84, 2,
	2, 1799, 2128, 5, 940, 471, 2, 1800, 1801, 7, 670, 2, 2, 1801, 1802, 7,
	84, 2, 2, 1802, 2128, 5, 940, 471, 2, 1803, 1804, 7, 3, 2, 2, 1804, 1805,
	7, 672, 2, 2, 1805, 1806, 7, 228, 2, 2, 1806, 1807, 7, 783, 2, 2, 1807,
	1808, 7, 379, 2, 2, 1808, 1812, 7, 804, 2, 2, 1809, 1810, 7, 493, 2, 2,
	1810, 1811, 7, 787, 2, 2, 1811, 1813, 7, 783, 2, 2, 1812, 1809, 3, 2, 2,
	2, 1812, 1813, 3, 2, 2, 2, 1813, 1820, 3, 2, 2, 2, 1814, 1816, 7, 806,
	2, 2, 1815, 1814, 3, 2, 2, 2, 1815, 1816, 3, 2, 2, 2, 1816, 1817, 3, 2,
	2, 2, 1817, 1818, 7, 23, 2, 2, 1818, 1819, 7, 787, 2, 2, 1819, 1821, 9,
	15, 2, 2, 1820, 1815, 3, 2, 2, 2, 1820, 1821, 3, 2, 2, 2, 1821, 1828, 3,
	2, 2, 2, 1822, 1824, 7, 806, 2, 2, 1823, 1822, 3, 2, 2, 2, 1823, 1824,
	3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1826, 7, 500, 2, 2, 1826, 1827,
	7, 787, 2, 2, 1827, 1829, 9, 16, 2, 2, 1828, 1823, 3, 2, 2, 2, 1828, 1829,
	3, 2, 2, 2, 1829, 1836, 3, 2, 2, 2, 1830, 1832, 7, 806, 2, 2, 1831, 1830,
	3, 2, 2, 2, 1831, 1832, 3, 2, 2, 2, 1832, 1833, 3, 2, 2, 2, 1833, 1834,
	7, 704, 2, 2, 1834, 1835, 7, 787, 2, 2, 1835, 1837, 9, 16, 2, 2, 1836,
	1831, 3, 2, 2, 2, 1836, 1837, 3, 2, 2, 2, 1837, 1844, 3, 2, 2, 2, 1838,
	1840, 7, 806, 2, 2, 1839, 1838, 3, 2, 2, 2, 1839, 1840, 3, 2, 2, 2, 1840,
	1841, 3, 2, 2, 2, 1841, 1842, 7, 419, 2, 2, 1842, 1843, 7, 787, 2, 2, 1843,
	1845, 7, 779, 2, 2, 1844, 1839, 3, 2, 2, 2, 1844, 1845, 3, 2, 2, 2, 1845,
	1855, 3, 2, 2, 2, 1846, 1848, 7, 806, 2, 2, 1847, 1846, 3, 2, 2, 2, 1847,
	1848, 3, 2, 2, 2, 1848, 1849, 3, 2, 2, 2, 1849, 1850, 7, 639, 2, 2, 1850,
	1851, 7, 804, 2, 2, 1851, 1852, 7, 6, 2, 2, 1852, 1853, 7, 787, 2, 2, 1853,
	1854, 9, 17, 2, 2, 1854, 1856, 7, 805, 2, 2, 1855, 1847, 3, 2, 2, 2, 1855,
	1856, 3, 2, 2, 2, 1856, 1866, 3, 2, 2, 2, 1857, 1859, 7, 806, 2, 2, 1858,
	1857, 3, 2, 2, 2, 1858, 1859, 3, 2, 2, 2, 1859, 1860, 3, 2, 2, 2, 1860,
	1861, 7, 700, 2, 2, 1861, 1862, 7, 804, 2, 2, 1862, 1863, 7, 6, 2, 2, 1863,
	1864, 7, 787, 2, 2, 1864, 1865, 7, 661, 2, 2, 1865, 1867, 7, 805, 2, 2,
	1866, 1858, 3, 2, 2, 2, 1866, 1867, 3, 2, 2, 2, 1867, 1868, 3, 2, 2, 2,
	1868, 2128, 7, 805, 2, 2, 1869, 1870, 7, 700, 2, 2, 1870, 1879, 7, 804,
	2, 2, 1871, 1872, 7, 6, 2, 2, 1872, 1873, 7, 787, 2, 2, 1873, 1880, 9,
	18, 2, 2, 1874, 1875, 7, 662, 2, 2, 1875, 1876, 7, 787, 2, 2, 1876, 1877,
	7, 804, 2, 2, 1877, 1878, 7, 783, 2, 2, 1878, 1880, 7, 805, 2, 2, 1879,
	1871, 3, 2, 2, 2, 1879, 1874, 3, 2, 2, 2, 1880, 2128, 3, 2, 2, 2, 1881,
	1882, 7, 639, 2, 2, 1882, 1905, 7, 804, 2, 2, 1883, 1884, 7, 6, 2, 2, 1884,
	1885, 7, 787, 2, 2, 1885, 1906, 9, 18, 2, 2, 1886, 1887, 7, 662, 2, 2,
	1887, 1888, 7, 787, 2, 2, 1888, 1899, 7, 804, 2, 2, 1889, 1891, 7, 806,
	2, 2, 1890, 1889, 3, 2, 2, 2, 1890, 1891, 3, 2, 2, 2, 1891, 1892, 3, 2,
	2, 2, 1892, 1894, 7, 783, 2, 2, 1893, 1890, 3, 2, 2, 2, 1894, 1897, 3,
	2, 2, 2, 1895, 1893, 3, 2, 2, 2, 1895, 1896, 3, 2, 2, 2, 1896, 1900, 3,
	2, 2, 2, 1897, 1895, 3, 2, 2, 2, 1898, 1900, 7, 212, 2, 2, 1899, 1895,
	3, 2, 2, 2, 1899, 1898, 3, 2, 2, 2, 1900, 1901, 3, 2, 2, 2, 1901, 1906,
	7, 805, 2, 2, 1902, 1903, 7, 709, 2, 2, 1903, 1904, 7, 787, 2, 2, 1904,
	1906, 7, 779, 2, 2, 1905, 1883, 3, 2, 2, 2, 1905, 1886, 3, 2, 2, 2, 1905,
	1902, 3, 2, 2, 2, 1906, 2128, 3, 2, 2, 2, 1907, 1908, 7, 595, 2, 2, 1908,
	1909, 7, 672, 2, 2, 1909, 1910, 7, 228, 2, 2, 1910, 1968, 7, 783, 2, 2,
	1911, 1912, 7, 379, 2, 2, 1912, 1928, 7, 804, 2, 2, 1913, 1914, 7, 493,
	2, 2, 1914, 1915, 7, 787, 2, 2, 1915, 1929, 7, 783, 2, 2, 1916, 1917, 7,
	23, 2, 2, 1917, 1918, 7, 787, 2, 2, 1918, 1929, 9, 15, 2, 2, 1919, 1920,
	7, 500, 2, 2, 1920, 1921, 7, 787, 2, 2, 1921, 1929, 9, 16, 2, 2, 1922,
	1923, 7, 704, 2, 2, 1923, 1924, 7, 787, 2, 2, 1924, 1929, 9, 16, 2, 2,
	1925, 1926, 7, 419, 2, 2, 1926, 1927, 7, 787, 2, 2, 1927, 1929, 7, 779,
	2, 2, 1928, 1913, 3, 2, 2, 2, 1928, 1916, 3, 2, 2, 2, 1928, 1919, 3, 2,
	2, 2, 1928, 1922, 3, 2, 2, 2, 1928, 1925, 3, 2, 2, 2, 1929, 1969, 3, 2,
	2, 2, 1930, 1931, 7, 700, 2, 2, 1931, 1940, 7, 804, 2, 2, 1932, 1933, 7,
	6, 2, 2, 1933, 1934, 7, 787, 2, 2, 1934, 1941, 9, 18, 2, 2, 1935, 1936,
	7, 662, 2, 2, 1936, 1937, 7, 787, 2, 2, 1937, 1938, 7, 804, 2, 2, 1938,
	1939, 7, 783, 2, 2, 1939, 1941, 7, 805, 2, 2, 1940, 1932, 3, 2, 2, 2, 1940,
	1935, 3, 2, 2, 2, 1941, 1969, 3, 2, 2, 2, 1942, 1943, 7, 639, 2, 2, 1943,
	1966, 7, 804, 2, 2, 1944, 1945, 7, 6, 2, 2, 1945, 1946, 7, 787, 2, 2, 1946,
	1967, 9, 18, 2, 2, 1947, 1948, 7, 662, 2, 2, 1948, 1949, 7, 787, 2, 2,
	1949, 1960, 7, 804, 2, 2, 1950, 1952, 7, 806, 2, 2, 1951, 1950, 3, 2, 2,
	2, 1951, 1952, 3, 2, 2, 2, 1952, 1953, 3, 2, 2, 2, 1953, 1955, 7, 783,
	2, 2, 1954, 1951, 3, 2, 2, 2, 1955, 1958, 3, 2, 2, 2, 1956, 1954, 3, 2,
	2, 2, 1956, 1957, 3, 2, 2, 2, 1957, 1961, 3, 2, 2, 2, 1958, 1956, 3, 2,
	2, 2, 1959, 1961, 7, 212, 2, 2, 1960, 1956, 3, 2, 2, 2, 1960, 1959, 3,
	2, 2, 2, 1961, 1962, 3, 2, 2, 2, 1962, 1967, 7, 805, 2, 2, 1963, 1964,
	7, 709, 2, 2, 1964, 1965, 7, 787, 2, 2, 1965, 1967, 7, 779, 2, 2, 1966,
	1944, 3, 2, 2, 2, 1966, 1947, 3, 2, 2, 2, 1966, 1963, 3, 2, 2, 2, 1967,
	1969, 3, 2, 2, 2, 1968, 1911, 3, 2, 2, 2, 1968, 1930, 3, 2, 2, 2, 1968,
	1942, 3, 2, 2, 2, 1969, 1970, 3, 2, 2, 2, 1970, 2128, 7, 805, 2, 2, 1971,
	1972, 7, 670, 2, 2, 1972, 1973, 7, 672, 2, 2, 1973, 1974, 7, 228, 2, 2,
	1974, 2128, 7, 783, 2, 2, 1975, 2128, 7, 169, 2, 2, 1976, 1977, 7, 169,
	2, 2, 1977, 1978, 7, 417, 2, 2, 1978, 1979, 7, 146, 2, 2, 1979, 2002, 7,
	228, 2, 2, 1980, 1982, 7, 806, 2, 2, 1981, 1980, 3, 2, 2, 2, 1981, 1982,
	3, 2, 2, 2, 1982, 1983, 3, 2, 2, 2, 1983, 1984, 7, 783, 2, 2, 1984, 1985,
	7, 379, 2, 2, 1985, 1986, 7, 804, 2, 2, 1986, 1987, 7, 561, 2, 2, 1987,
	1988, 7, 787, 2, 2, 1988, 1989, 7, 783, 2, 2, 1989, 1990, 7, 806, 2, 2,
	1990, 1991, 7, 23, 2, 2, 1991, 1992, 7, 787, 2, 2, 1992, 1993, 9, 15, 2,
	2, 1993, 1994, 7, 806, 2, 2, 1994, 1995, 7, 500, 2, 2, 1995, 1996, 7, 787,
	2, 2, 1996, 1997, 7, 569, 2, 2, 1997, 1998, 7, 806, 2, 2, 1998, 1999, 7,
	704, 2, 2, 1999, 2000, 7, 787, 2, 2, 2000, 2001, 9, 16, 2, 2, 2001, 2003,
	7, 805, 2, 2, 2002, 1981, 3, 2, 2, 2, 2003, 2004, 3, 2, 2, 2, 2004, 2002,
	3, 2, 2, 2, 2004, 2005, 3, 2, 2, 2, 2005, 2128, 3, 2, 2, 2, 2006, 2007,
	7, 595, 2, 2, 2007, 2008, 7, 417, 2, 2, 2008, 2009, 7, 146, 2, 2, 2009,
	2044, 7, 228, 2, 2, 2010, 2012, 7, 806, 2, 2, 2011, 2010, 3, 2, 2, 2, 2011,
	2012, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013, 2014, 7, 783, 2, 2, 2014,
	2015, 7, 379, 2, 2, 2015, 2016, 7, 804, 2, 2, 2016, 2017, 7, 561, 2, 2,
	2017, 2018, 7, 787, 2, 2, 2018, 2025, 7, 783, 2, 2, 2019, 2021, 7, 806,
	2, 2, 2020, 2019, 3, 2, 2, 2, 2020, 2021, 3, 2, 2, 2, 2021, 2022, 3, 2,
	2, 2, 2022, 2023, 7, 23, 2, 2, 2023, 2024, 7, 787, 2, 2, 2024, 2026, 9,
	15, 2, 2, 2025, 2020, 3, 2, 2, 2, 2025, 2026, 3, 2, 2, 2, 2026, 2033, 3,
	2, 2, 2, 2027, 2029, 7, 806, 2, 2, 2028, 2027, 3, 2, 2, 2, 2028, 2029,
	3, 2, 2, 2, 2029, 2030, 3, 2, 2, 2, 2030, 2031, 7, 500, 2, 2, 2031, 2032,
	7, 787, 2, 2, 2032, 2034, 7, 569, 2, 2, 2033, 2028, 3, 2, 2, 2, 2033, 2034,
	3, 2, 2, 2, 2034, 2041, 3, 2, 2, 2, 2035, 2037, 7, 806, 2, 2, 2036, 2035,
	3, 2, 2, 2, 2036, 2037, 3, 2, 2, 2, 2037, 2038, 3, 2, 2, 2, 2038, 2039,
	7, 704, 2, 2, 2039, 2040, 7, 787, 2, 2, 2040, 2042, 9, 16, 2, 2, 2041,
	2036, 3, 2, 2, 2, 2041, 2042, 3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043,
	2045, 7, 805, 2, 2, 2044, 2011, 3, 2, 2, 2, 2045, 2046, 3, 2, 2, 2, 2046,
	2044, 3, 2, 2, 2, 2046, 2047, 3, 2, 2, 2, 2047, 2128, 3, 2, 2, 2, 2048,
	2049, 7, 145, 2, 2, 2049, 2050, 7, 72, 2, 2, 2050, 2051, 7, 12, 2, 2, 2051,
	2128, 7, 84, 2, 2, 2052, 2053, 7, 93, 2, 2, 2053, 2054, 7, 72, 2, 2, 2054,
	2055, 7, 12, 2, 2, 2055, 2128, 7, 84, 2, 2, 2056, 2128, 7, 125, 2, 2, 2057,
	2128, 7, 516, 2, 2, 2058, 2059, 7, 3, 2, 2, 2059, 2060, 7, 560, 2, 2, 2060,
	2061, 7, 783, 2, 2, 2061, 2095, 7, 804, 2, 2, 2062, 2063, 7, 379, 2, 2,
	2063, 2064, 7, 478, 2, 2, 2064, 2065, 7, 228, 2, 2, 2065, 2066, 7, 804,
	2, 2, 2066, 2067, 7, 165, 2, 2, 2067, 2068, 7, 165, 2, 2, 2068, 2069, 3,
	2, 2, 2, 2069, 2096, 7, 805, 2, 2, 2070, 2071, 7, 379, 2, 2, 2071, 2072,
	7, 546, 2, 2, 2072, 2084, 7, 804, 2, 2, 2073, 2075, 7, 806, 2, 2, 2074,
	2073, 3, 2, 2, 2, 2074, 2075, 3, 2, 2, 2, 2075, 2076, 3, 2, 2, 2, 2076,
	2081, 7, 804, 2, 2, 2077, 2078, 7, 165, 2, 2, 2078, 2079, 7, 806, 2, 2,
	2079, 2082, 7, 165, 2, 2, 2080, 2082, 7, 166, 2, 2, 2081, 2077, 3, 2, 2,
	2, 2081, 2080, 3, 2, 2, 2, 2082, 2083, 3, 2, 2, 2, 2083, 2085, 7, 805,
	2, 2, 2084, 2074, 3, 2, 2, 2, 2085, 2086, 3, 2, 2, 2, 2086, 2084, 3, 2,
	2, 2, 2086, 2087, 3, 2, 2, 2, 2087, 2088, 3, 2, 2, 2, 2088, 2093, 7, 805,
	2, 2, 2089, 2090, 7, 806, 2, 2, 2090, 2091, 7, 637, 2, 2, 2091, 2092, 7,
	787, 2, 2, 2092, 2094, 7, 779, 2, 2, 2093, 2089, 3, 2, 2, 2, 2093, 2094,
	3, 2, 2, 2, 2094, 2096, 3, 2, 2, 2, 2095, 2062, 3, 2, 2, 2, 2095, 2070,
	3, 2, 2, 2, 2096, 2097, 3, 2, 2, 2, 2097, 2128, 7, 805, 2, 2, 2098, 2099,
	7, 595, 2, 2, 2099, 2112, 7, 560, 2, 2, 2100, 2101, 7, 3, 2, 2, 2101, 2102,
	7, 546, 2, 2, 2102, 2106, 7, 804, 2, 2, 2103, 2104, 7, 165, 2, 2, 2104,
	2107, 7, 165, 2, 2, 2105, 2107, 7, 166, 2, 2, 2106, 2103, 3, 2, 2, 2, 2106,
	2105, 3, 2, 2, 2, 2107, 2108, 3, 2, 2, 2, 2108, 2113, 7, 805, 2, 2, 2109,
	2110, 7, 637, 2, 2, 2110, 2111, 7, 787, 2, 2, 2111, 2113, 7, 779, 2, 2,
	2112, 2100, 3, 2, 2, 2, 2112, 2109, 3, 2, 2, 2, 2113, 2128, 3, 2, 2, 2,
	2114, 2115, 7, 276, 2, 2, 2115, 2116, 7, 560, 2, 2, 2116, 2128, 7, 783,
	2, 2, 2117, 2118, 7, 670, 2, 2, 2118, 2119, 7, 560, 2, 2, 2119, 2128, 7,
	783, 2, 2, 2120, 2128, 7, 618, 2, 2, 2121, 2122, 7, 379, 2, 2, 2122, 2123,
	7, 804, 2, 2, 2123, 2124, 7, 104, 2, 2, 2124, 2125, 7, 787, 2, 2, 2125,
	2126, 7, 247, 2, 2, 2126, 2128, 7, 805, 2, 2, 2127, 1777, 3, 2, 2, 2, 2127,
	1797, 3, 2, 2, 2, 2127, 1800, 3, 2, 2, 2, 2127, 1803, 3, 2, 2, 2, 2127,
	1869, 3, 2, 2, 2, 2127, 1881, 3, 2, 2, 2, 2127, 1907, 3, 2, 2, 2, 2127,
	1971, 3, 2, 2, 2, 2127, 1975, 3, 2, 2, 2, 2127, 1976, 3, 2, 2, 2, 2127,
	2006, 3, 2, 2, 2, 2127, 2048, 3, 2, 2, 2, 2127, 2052, 3, 2, 2, 2, 2127,
	2056, 3, 2, 2, 2, 2127, 2057, 3, 2, 2, 2, 2127, 2058, 3, 2, 2, 2, 2127,
	2098, 3, 2, 2, 2, 2127, 2114, 3, 2, 2, 2, 2127, 2117, 3, 2, 2, 2, 2127,
	2120, 3, 2, 2, 2, 2127, 2121, 3, 2, 2, 2, 2128, 163, 3, 2, 2, 2, 2129,
	2130, 9, 19, 2, 2, 2130, 2131, 7, 426, 2, 2, 2131, 2132, 7, 641, 2, 2,
	2132, 2133, 5, 940, 471, 2, 2133, 2134, 7, 133, 2, 2, 2134, 2135, 7, 69,
	2, 2, 2135, 2136, 7, 316, 2, 2, 2136, 2146, 7, 804, 2, 2, 2137, 2138, 7,
	68, 2, 2, 2138, 2141, 7, 787, 2, 2, 2139, 2142, 5, 940, 471, 2, 2140, 2142,
	7, 12, 2, 2, 2141, 2139, 3, 2, 2, 2, 2141, 2140, 3, 2, 2, 2, 2142, 2144,
	3, 2, 2, 2, 2143, 2145, 7, 806, 2, 2, 2144, 2143, 3, 2, 2, 2, 2144, 2145,
	3, 2, 2, 2, 2145, 2147, 3, 2, 2, 2, 2146, 2137, 3, 2, 2, 2, 2146, 2147,
	3, 2, 2, 2, 2147, 2160, 3, 2, 2, 2, 2148, 2149, 7, 185, 2, 2, 2149, 2155,
	7, 787, 2, 2, 2150, 2152, 7, 102, 2, 2, 2151, 2150, 3, 2, 2, 2, 2151, 2152,
	3, 2, 2, 2, 2152, 2153, 3, 2, 2, 2, 2153, 2156, 5, 940, 471, 2, 2154, 2156,
	7, 12, 2, 2, 2155, 2151, 3, 2, 2, 2, 2155, 2154, 3, 2, 2, 2, 2156, 2158,
	3, 2, 2, 2, 2157, 2159, 7, 806, 2, 2, 2158, 2157, 3, 2, 2, 2, 2158, 2159,
	3, 2, 2, 2, 2159, 2161, 3, 2, 2, 2, 2160, 2148, 3, 2, 2, 2, 2160, 2161,
	3, 2, 2, 2, 2161, 2171, 3, 2, 2, 2, 2162, 2163, 7, 675, 2, 2, 2163, 2166,
	7, 787, 2, 2, 2164, 2167, 7, 783, 2, 2, 2165, 2167, 7, 12, 2, 2, 2166,
	2164, 3, 2, 2, 2, 2166, 2165, 3, 2, 2, 2, 2167, 2169, 3, 2, 2, 2, 2168,
	2170, 7, 806, 2, 2, 2169, 2168, 3, 2, 2, 2, 2169, 2170, 3, 2, 2, 2, 2170,
	2172, 3, 2, 2, 2, 2171, 2162, 3, 2, 2, 2, 2171, 2172, 3, 2, 2, 2, 2172,
	2179, 3, 2, 2, 2, 2173, 2174, 7, 642, 2, 2, 2174, 2177, 7, 787, 2, 2, 2175,
	2178, 7, 779, 2, 2, 2176, 2178, 7, 89, 2, 2, 2177, 2175, 3, 2, 2, 2, 2177,
	2176, 3, 2, 2, 2, 2178, 2180, 3, 2, 2, 2, 2179, 2173, 3, 2, 2, 2, 2179,
	2180, 3, 2, 2, 2, 2180, 2181, 3, 2, 2, 2, 2181, 2182, 7, 805, 2, 2, 2182,
	165, 3, 2, 2, 2, 2183, 2184, 7, 103, 2, 2, 2184, 2185, 7, 426, 2, 2, 2185,
	2186, 7, 641, 2, 2, 2186, 2187, 5, 940, 471, 2, 2187, 167, 3, 2, 2, 2,
	2188, 2189, 7, 9, 2, 2, 2189, 2190, 7, 42, 2, 2, 2190, 2230, 5, 940, 471,
	2, 2191, 2192, 7, 670, 2, 2, 2192, 2231, 7, 644, 2, 2, 2193, 2194, 7, 379,
	2, 2, 2194, 2195, 7, 643, 2, 2, 2195, 2196, 7, 171, 2, 2, 2196, 2219, 7,
	804, 2, 2, 2197, 2198, 7, 129, 2, 2, 2198, 2199, 7, 787, 2, 2, 2199, 2201,
	7, 783, 2, 2, 2200, 2202, 7, 806, 2, 2, 2201, 2200, 3, 2, 2, 2, 2201, 2202,
	3, 2, 2, 2, 2202, 2220, 3, 2, 2, 2, 2203, 2204, 7, 466, 2, 2, 2204, 2205,
	7, 37, 2, 2, 2205, 2206, 7, 243, 2, 2, 2206, 2207, 7, 787, 2, 2, 2207,
	2209, 7, 783, 2, 2, 2208, 2210, 7, 806, 2, 2, 2209, 2208, 3, 2, 2, 2, 2209,
	2210, 3, 2, 2, 2, 2210, 2220, 3, 2, 2, 2, 2211, 2212, 7, 492, 2, 2, 2212,
	2213, 7, 37, 2, 2, 2213, 2214, 7, 243, 2, 2, 2214, 2215, 7, 787, 2, 2,
	2215, 2217, 7, 783, 2, 2, 2216, 2218, 7, 806, 2, 2, 2217, 2216, 3, 2, 2,
	2, 2217, 2218, 3, 2, 2, 2, 2218, 2220, 3, 2, 2, 2, 2219, 2197, 3, 2, 2,
	2, 2219, 2203, 3, 2, 2, 2, 2219, 2211, 3, 2, 2, 2, 2220, 2221, 3, 2, 2,
	2, 2221, 2219, 3, 2, 2, 2, 2221, 2222, 3, 2, 2, 2, 2222, 2223, 3, 2, 2,
	2, 2223, 2231, 7, 805, 2, 2, 2224, 2225, 7, 379, 2, 2, 2225, 2226, 7, 387,
	2, 2, 2226, 2227, 7, 133, 2, 2, 2227, 2228, 7, 420, 2, 2, 2228, 2229, 7,
	787, 2, 2, 2229, 2231, 9, 8, 2, 2, 2230, 2191, 3, 2, 2, 2, 2230, 2193,
	3, 2, 2, 2, 2230, 2224, 3, 2, 2, 2, 2231, 169, 3, 2, 2, 2, 2232, 2233,
	7, 9, 2, 2, 2233, 2234, 7, 55, 2, 2, 2234, 2235, 7, 492, 2, 2, 2235, 2236,
	7, 171, 2, 2, 2236, 2237, 5, 940, 471, 2, 2237, 2238, 9, 20, 2, 2, 2238,
	2239, 7, 761, 2, 2, 2239, 2240, 7, 804, 2, 2, 2240, 2241, 7, 440, 2, 2,
	2241, 2242, 7, 787, 2, 2, 2242, 2251, 5, 940, 471, 2, 2243, 2244, 7, 806,
	2, 2, 2244, 2245, 7, 396, 2, 2, 2245, 2246, 7, 787, 2, 2, 2246, 2247, 7,
	783, 2, 2, 2247, 2248, 7, 806, 2, 2, 2248, 2249, 7, 491, 2, 2, 2249, 2250,
	7, 787, 2, 2, 2250, 2252, 7, 784, 2, 2, 2251, 2243, 3, 2, 2, 2, 2251, 2252,
	3, 2, 2, 2, 2252, 2253, 3, 2, 2, 2, 2253, 2254, 7, 805, 2, 2, 2254, 171,
	3, 2, 2, 2, 2255, 2256, 7, 72, 2, 2, 2256, 2257, 7, 55, 2, 2, 2257, 2258,
	7, 492, 2, 2, 2258, 2259, 7, 171, 2, 2, 2259, 2260, 5, 940, 471, 2, 2260,
	2261, 7, 379, 2, 2, 2261, 2281, 7, 369, 2, 2, 2262, 2264, 7, 804, 2, 2,
	2263, 2265, 7, 806, 2, 2, 2264, 2263, 3, 2, 2, 2, 2264, 2265, 3, 2, 2,
	2, 2265, 2266, 3, 2, 2, 2, 2266, 2267, 7, 440, 2, 2, 2267, 2268, 7, 787,
	2, 2, 2268, 2269, 5, 940, 471, 2, 2269, 2270, 7, 806, 2, 2, 2270, 2271,
	7, 396, 2, 2, 2271, 2272, 7, 787, 2, 2, 2272, 2273, 7, 783, 2, 2, 2273,
	2274, 7, 806, 2, 2, 2274, 2275, 7, 491, 2, 2, 2275, 2276, 7, 787, 2, 2,
	2276, 2277, 7, 784, 2, 2, 2277, 2279, 7, 805, 2, 2, 2278, 2280, 7, 806,
	2, 2, 2279, 2278, 3, 2, 2, 2, 2279, 2280, 3, 2, 2, 2, 2280, 2282, 3, 2,
	2, 2, 2281, 2262, 3, 2, 2, 2, 2282, 2283, 3, 2, 2, 2, 2283, 2281, 3, 2,
	2, 2, 2283, 2284, 3, 2, 2, 2, 2284, 173, 3, 2, 2, 2, 2285, 2286, 7, 103,
	2, 2, 2286, 2287, 7, 42, 2, 2, 2287, 2288, 5, 940, 471, 2, 2288, 175, 3,
	2, 2, 2, 2289, 2290, 7, 103, 2, 2, 2290, 2291, 7, 55, 2, 2, 2291, 2292,
	7, 492, 2, 2, 2292, 2293, 7, 171, 2, 2, 2293, 2294, 5, 940, 471, 2, 2294,
	177, 3, 2, 2, 2, 2295, 2296, 7, 103, 2, 2, 2296, 2297, 7, 55, 2, 2, 2297,
	2298, 7, 188, 2, 2, 2298, 2299, 7, 171, 2, 2, 2299, 2300, 5, 940, 471,
	2, 2300, 179, 3, 2, 2, 2, 2301, 2302, 7, 103, 2, 2, 2302, 2303, 7, 67,
	2, 2, 2303, 2304, 5, 940, 471, 2, 2304, 181, 3, 2, 2, 2, 2305, 2306, 7,
	103, 2, 2, 2306, 2307, 7, 454, 2, 2, 2307, 2308, 5, 940, 471, 2, 2308,
	183, 3, 2, 2, 2, 2309, 2310, 7, 103, 2, 2, 2310, 2311, 7, 455, 2, 2, 2311,
	2312, 7, 648, 2, 2, 2312, 2313, 5, 940, 471, 2, 2313, 185, 3, 2, 2, 2,
	2314, 2315, 7, 103, 2, 2, 2315, 2318, 7, 84, 2, 2, 2316, 2317, 7, 153,
	2, 2, 2317, 2319, 7, 119, 2, 2, 2318, 2316, 3, 2, 2, 2, 2318, 2319, 3,
	2, 2, 2, 2319, 2324, 3, 2, 2, 2, 2320, 2322, 7, 806, 2, 2, 2321, 2320,
	3, 2, 2, 2, 2321, 2322, 3, 2, 2, 2, 2322, 2323, 3, 2, 2, 2, 2323, 2325,
	5, 940, 471, 2, 2324, 2321, 3, 2, 2, 2, 2325, 2326, 3, 2, 2, 2, 2326, 2324,
	3, 2, 2, 2, 2326, 2327, 3, 2, 2, 2, 2327, 187, 3, 2, 2, 2, 2328, 2329,
	7, 103, 2, 2, 2329, 2330, 7, 84, 2, 2, 2330, 2331, 7, 408, 2, 2, 2331,
	2332, 7, 324, 2, 2, 2332, 2333, 5, 940, 471, 2, 2333, 189, 3, 2, 2, 2,
	2334, 2335, 7, 103, 2, 2, 2335, 2336, 7, 84, 2, 2, 2336, 2337, 7, 694,
	2, 2, 2337, 2338, 7, 454, 2, 2, 2338, 2339, 5, 940, 471, 2, 2339, 191,
	3, 2, 2, 2, 2340, 2341, 7, 103, 2, 2, 2341, 2344, 7, 89, 2, 2, 2342, 2343,
	7, 153, 2, 2, 2343, 2345, 7, 119, 2, 2, 2344, 2342, 3, 2, 2, 2, 2344, 2345,
	3, 2, 2, 2, 2345, 2347, 3, 2, 2, 2, 2346, 2348, 7, 806, 2, 2, 2347, 2346,
	3, 2, 2, 2, 2347, 2348, 3, 2, 2, 2, 2348, 2352, 3, 2, 2, 2, 2349, 2350,
	5, 940, 471, 2, 2350, 2351, 7, 799, 2, 2, 2351, 2353, 3, 2, 2, 2, 2352,
	2349, 3, 2, 2, 2, 2352, 2353, 3, 2, 2, 2, 2353, 2354, 3, 2, 2, 2, 2354,
	2355, 5, 940, 471, 2, 2355, 193, 3, 2, 2, 2, 2356, 2357, 7, 103, 2, 2,
	2357, 2358, 7, 109, 2, 2, 2358, 2359, 5, 940, 471, 2, 2359, 195, 3, 2,
	2, 2, 2360, 2361, 7, 103, 2, 2, 2361, 2362, 7, 123, 2, 2, 2362, 2363, 7,
	81, 2, 2, 2363, 2364, 7, 323, 2, 2, 2364, 2365, 5, 940, 471, 2, 2365, 197,
	3, 2, 2, 2, 2366, 2367, 7, 103, 2, 2, 2367, 2368, 7, 123, 2, 2, 2368, 2369,
	7, 129, 2, 2, 2369, 2370, 7, 517, 2, 2, 2370, 2371, 5, 940, 471, 2, 2371,
	199, 3, 2, 2, 2, 2372, 2373, 7, 103, 2, 2, 2373, 2374, 7, 123, 2, 2, 2374,
	2375, 7, 177, 2, 2, 2375, 2378, 5, 940, 471, 2, 2376, 2377, 7, 19, 2, 2,
	2377, 2379, 5, 940, 471, 2, 2378, 2376, 3, 2, 2, 2, 2378, 2379, 3, 2, 2,
	2, 2379, 201, 3, 2, 2, 2, 2380, 2381, 7, 103, 2, 2, 2381, 2382, 7, 123,
	2, 2, 2382, 2383, 7, 681, 2, 2, 2383, 2384, 7, 635, 2, 2, 2384, 2385, 5,
	940, 471, 2, 2385, 203, 3, 2, 2, 2, 2386, 2387, 7, 103, 2, 2, 2387, 2388,
	7, 123, 2, 2, 2388, 2392, 7, 341, 2, 2, 2389, 2390, 5, 940, 471, 2, 2390,
	2391, 7, 799, 2, 2, 2391, 2393, 3, 2, 2, 2, 2392, 2389, 3, 2, 2, 2, 2392,
	2393, 3, 2, 2, 2, 2393, 2397, 3, 2, 2, 2, 2394, 2395, 5, 940, 471, 2, 2395,
	2396, 7, 799, 2, 2, 2396, 2398, 3, 2, 2, 2, 2397, 2394, 3, 2, 2, 2, 2397,
	2398, 3, 2, 2, 2, 2398, 2399, 3, 2, 2, 2, 2399, 2400, 5, 940, 471, 2, 2400,
	205, 3, 2, 2, 2, 2401, 2402, 7, 103, 2, 2, 2402, 2403, 7, 113, 2, 2, 2403,
	2408, 7, 220, 2, 2, 2404, 2406, 7, 806, 2, 2, 2405, 2404, 3, 2, 2, 2, 2405,
	2406, 3, 2, 2, 2, 2406, 2407, 3, 2, 2, 2, 2407, 2409, 5, 940, 471, 2, 2408,
	2405, 3, 2, 2, 2, 2409, 2410, 3, 2, 2, 2, 2410, 2408, 3, 2, 2, 2, 2410,
	2411, 3, 2, 2, 2, 2411, 2412, 3, 2, 2, 2, 2412, 2417, 7, 228, 2, 2, 2413,
	2418, 7, 310, 2, 2, 2414, 2418, 7, 84, 2, 2, 2415, 2416, 7, 650, 2, 2,
	2416, 2418, 5, 940, 471, 2, 2417, 2413, 3, 2, 2, 2, 2417, 2414, 3, 2, 2,
	2, 2417, 2415, 3, 2, 2, 2, 2418, 207, 3, 2, 2, 2, 2419, 2420, 7, 103, 2,
	2, 2420, 2421, 7, 113, 2, 2, 2421, 2422, 7, 314, 2, 2, 2422, 2423, 5, 940,
	471, 2, 2423, 2424, 7, 228, 2, 2, 2424, 2425, 7, 310, 2, 2, 2425, 209,
	3, 2, 2, 2, 2426, 2427, 7, 103, 2, 2, 2427, 2428, 7, 520, 2, 2, 2428, 2429,
	7, 432, 2, 2, 2429, 2430, 5, 940, 471, 2, 2430, 211, 3, 2, 2, 2, 2431,
	2432, 7, 103, 2, 2, 2432, 2433, 7, 520, 2, 2, 2433, 2434, 7, 157, 2, 2,
	2434, 2438, 7, 228, 2, 2, 2435, 2436, 5, 940, 471, 2, 2436, 2437, 7, 799,
	2, 2, 2437, 2439, 3, 2, 2, 2, 2438, 2435, 3, 2, 2, 2, 2438, 2439, 3, 2,
	2, 2, 2439, 2440, 3, 2, 2, 2, 2440, 2441, 5, 940, 471, 2, 2441, 213, 3,
	2, 2, 2, 2442, 2443, 7, 103, 2, 2, 2443, 2444, 7, 520, 2, 2, 2444, 2445,
	7, 725, 2, 2, 2445, 2446, 5, 940, 471, 2, 2446, 215, 3, 2, 2, 2, 2447,
	2448, 7, 103, 2, 2, 2448, 2449, 7, 566, 2, 2, 2449, 2450, 5, 940, 471,
	2, 2450, 217, 3, 2, 2, 2, 2451, 2452, 7, 103, 2, 2, 2452, 2453, 7, 188,
	2, 2, 2453, 2454, 7, 171, 2, 2, 2454, 219, 3, 2, 2, 2, 2455, 2456, 7, 103,
	2, 2, 2456, 2457, 7, 587, 2, 2, 2457, 2458, 7, 752, 2, 2, 2458, 2459, 5,
	940, 471, 2, 2459, 221, 3, 2, 2, 2, 2460, 2461, 7, 103, 2, 2, 2461, 2462,
	7, 631, 2, 2, 2462, 2463, 7, 141, 2, 2, 2463, 2464, 5, 940, 471, 2, 2464,
	223, 3, 2, 2, 2, 2465, 2466, 7, 103, 2, 2, 2466, 2467, 7, 631, 2, 2, 2467,
	2468, 7, 302, 2, 2, 2468, 2469, 5, 940, 471, 2, 2469, 225, 3, 2, 2, 2,
	2470, 2471, 7, 103, 2, 2, 2471, 2475, 7, 650, 2, 2, 2472, 2473, 5, 940,
	471, 2, 2473, 2474, 7, 799, 2, 2, 2474, 2476, 3, 2, 2, 2, 2475, 2472, 3,
	2, 2, 2, 2475, 2476, 3, 2, 2, 2, 2476, 2480, 3, 2, 2, 2, 2477, 2478, 5,
	940, 471, 2, 2478, 2479, 7, 799, 2, 2, 2479, 2481, 3, 2, 2, 2, 2480, 2477,
	3, 2, 2, 2, 2480, 2481, 3, 2, 2, 2, 2481, 2482, 3, 2, 2, 2, 2482, 2483,
	5, 940, 471, 2, 2483, 227, 3, 2, 2, 2, 2484, 2485, 7, 103, 2, 2, 2485,
	2486, 7, 674, 2, 2, 2486, 2487, 7, 311, 2, 2, 2487, 2488, 7, 424, 2, 2,
	2488, 2489, 5, 940, 471, 2, 2489, 229, 3, 2, 2, 2, 2490, 2491, 7, 103,
	2, 2, 2491, 2492, 7, 681, 2, 2, 2492, 2493, 7, 635, 2, 2, 2493, 2494, 5,
	940, 471, 2, 2494, 231, 3, 2, 2, 2, 2495, 2496, 7, 103, 2, 2, 2496, 2499,
	7, 288, 2, 2, 2497, 2498, 7, 153, 2, 2, 2498, 2500, 7, 119, 2, 2, 2499,
	2497, 3, 2, 2, 2, 2499, 2500, 3, 2, 2, 2, 2500, 2501, 3, 2, 2, 2, 2501,
	2502, 5, 940, 471, 2, 2502, 233, 3, 2, 2, 2, 2503, 2504, 7, 103, 2, 2,
	2504, 2505, 7, 687, 2, 2, 2505, 2506, 5, 940, 471, 2, 2506, 235, 3, 2,
	2, 2, 2507, 2508, 7, 103, 2, 2, 2508, 2511, 7, 297, 2, 2, 2509, 2510, 7,
	153, 2, 2, 2510, 2512, 7, 119, 2, 2, 2511, 2509, 3, 2, 2, 2, 2511, 2512,
	3, 2, 2, 2, 2512, 2522, 3, 2, 2, 2, 2513, 2515, 7, 806, 2, 2, 2514, 2513,
	3, 2, 2, 2, 2514, 2515, 3, 2, 2, 2, 2515, 2519, 3, 2, 2, 2, 2516, 2517,
	5, 940, 471, 2, 2517, 2518, 7, 799, 2, 2, 2518, 2520, 3, 2, 2, 2, 2519,
	2516, 3, 2, 2, 2, 2519, 2520, 3, 2, 2, 2, 2520, 2521, 3, 2, 2, 2, 2521,
	2523, 5, 940, 471, 2, 2522, 2514, 3, 2, 2, 2, 2522, 2523, 3, 2, 2, 2, 2523,
	237, 3, 2, 2, 2, 2524, 2525, 7, 103, 2, 2, 2525, 2528, 7, 301, 2, 2, 2526,
	2527, 7, 153, 2, 2, 2527, 2529, 7, 119, 2, 2, 2528, 2526, 3, 2, 2, 2, 2528,
	2529, 3, 2, 2, 2, 2529, 2530, 3, 2, 2, 2, 2530, 2531, 5, 940, 471, 2, 2531,
	239, 3, 2, 2, 2, 2532, 2533, 7, 103, 2, 2, 2533, 2534, 7, 697, 2, 2, 2534,
	2535, 7, 647, 2, 2, 2535, 2536, 7, 559, 2, 2, 2536, 2537, 5, 940, 471,
	2, 2537, 241, 3, 2, 2, 2, 2538, 2539, 7, 103, 2, 2, 2539, 2540, 7, 303,
	2, 2, 2540, 2543, 7, 252, 2, 2, 2541, 2542, 7, 153, 2, 2, 2542, 2544, 7,
	119, 2, 2, 2543, 2541, 3, 2, 2, 2, 2543, 2544, 3, 2, 2, 2, 2544, 2548,
	3, 2, 2, 2, 2545, 2546, 5, 940, 471, 2, 2546, 2547, 7, 799, 2, 2, 2547,
	2549, 3, 2, 2, 2, 2548, 2545, 3, 2, 2, 2, 2548, 2549, 3, 2, 2, 2, 2549,
	2550, 3, 2, 2, 2, 2550, 2551, 5, 940, 471, 2, 2551, 243, 3, 2, 2, 2, 2552,
	2553, 7, 103, 2, 2, 2553, 2556, 7, 309, 2, 2, 2554, 2555, 7, 153, 2, 2,
	2555, 2557, 7, 119, 2, 2, 2556, 2554, 3, 2, 2, 2, 2556, 2557, 3, 2, 2,
	2, 2557, 2572, 3, 2, 2, 2, 2558, 2560, 7, 806, 2, 2, 2559, 2558, 3, 2,
	2, 2, 2559, 2560, 3, 2, 2, 2, 2560, 2564, 3, 2, 2, 2, 2561, 2562, 5, 940,
	471, 2, 2562, 2563, 7, 799, 2, 2, 2563, 2565, 3, 2, 2, 2, 2564, 2561, 3,
	2, 2, 2, 2564, 2565, 3, 2, 2, 2, 2565, 2569, 3, 2, 2, 2, 2566, 2567, 5,
	940, 471, 2, 2567, 2568, 7, 799, 2, 2, 2568, 2570, 3, 2, 2, 2, 2569, 2566,
	3, 2, 2, 2, 2569, 2570, 3, 2, 2, 2, 2570, 2571, 3, 2, 2, 2, 2571, 2573,
	5, 940, 471, 2, 2572, 2559, 3, 2, 2, 2, 2572, 2573, 3, 2, 2, 2, 2573, 245,
	3, 2, 2, 2, 2574, 2575, 7, 103, 2, 2, 2575, 2576, 7, 310, 2, 2, 2576, 2577,
	7, 408, 2, 2, 2577, 2578, 5, 940, 471, 2, 2578, 247, 3, 2, 2, 2, 2579,
	2580, 7, 103, 2, 2, 2580, 2581, 7, 310, 2, 2, 2581, 2582, 7, 408, 2, 2,
	2582, 2583, 7, 324, 2, 2, 2583, 2584, 5, 940, 471, 2, 2584, 249, 3, 2,
	2, 2, 2585, 2586, 7, 103, 2, 2, 2586, 2587, 7, 310, 2, 2, 2587, 2588, 7,
	288, 2, 2, 2588, 2589, 5, 940, 471, 2, 2589, 251, 3, 2, 2, 2, 2590, 2591,
	7, 103, 2, 2, 2591, 2592, 7, 311, 2, 2, 2592, 2593, 5, 940, 471, 2, 2593,
	253, 3, 2, 2, 2, 2594, 2596, 7, 103, 2, 2, 2595, 2597, 7, 449, 2, 2, 2596,
	2595, 3, 2, 2, 2, 2596, 2597, 3, 2, 2, 2, 2597, 2598, 3, 2, 2, 2, 2598,
	2599, 7, 712, 2, 2, 2599, 2603, 7, 139, 2, 2, 2600, 2601, 5, 940, 471,
	2, 2601, 2602, 7, 799, 2, 2, 2602, 2604, 3, 2, 2, 2, 2603, 2600, 3, 2,
	2, 2, 2603, 2604, 3, 2, 2, 2, 2604, 2605, 3, 2, 2, 2, 2605, 2606, 5, 940,
	471, 2, 2606, 2618, 7, 37, 2, 2, 2607, 2609, 7, 806, 2, 2, 2608, 2607,
	3, 2, 2, 2, 2608, 2609, 3, 2, 2, 2, 2609, 2610, 3, 2, 2, 2, 2610, 2611,
	7, 42, 2, 2, 2611, 2619, 5, 940, 471, 2, 2612, 2614, 7, 806, 2, 2, 2613,
	2612, 3, 2, 2, 2, 2613, 2614, 3, 2, 2, 2, 2614, 2615, 3, 2, 2, 2, 2615,
	2616, 7, 17, 2, 2, 2616, 2617, 7, 171, 2, 2, 2617, 2619, 5, 940, 471, 2,
	2618, 2608, 3, 2, 2, 2, 2618, 2613, 3, 2, 2, 2, 2619, 2620, 3, 2, 2, 2,
	2620, 2618, 3, 2, 2, 2, 2620, 2621, 3, 2, 2, 2, 2621, 255, 3, 2, 2, 2,
	2622, 2623, 7, 103, 2, 2, 2623, 2627, 7, 329, 2, 2, 2624, 2625, 5, 940,
	471, 2, 2625, 2626, 7, 799, 2, 2, 2626, 2628, 3, 2, 2, 2, 2627, 2624, 3,
	2, 2, 2, 2627, 2628, 3, 2, 2, 2, 2628, 2629, 3, 2, 2, 2, 2629, 2630, 5,
	940, 471, 2, 2630, 2631, 7, 799, 2, 2, 2631, 2632, 5, 940, 471, 2, 2632,
	257, 3, 2, 2, 2, 2633, 2634, 7, 103, 2, 2, 2634, 2635, 7, 731, 2, 2, 2635,
	2636, 7, 171, 2, 2, 2636, 2640, 5, 940, 471, 2, 2637, 2638, 7, 670, 2,
	2, 2638, 2639, 7, 648, 2, 2, 2639, 2641, 7, 171, 2, 2, 2640, 2637, 3, 2,
	2, 2, 2640, 2641, 3, 2, 2, 2, 2641, 259, 3, 2, 2, 2, 2642, 2643, 7, 103,
	2, 2, 2643, 2646, 7, 733, 2, 2, 2644, 2645, 7, 153, 2, 2, 2645, 2647, 7,
	119, 2, 2, 2646, 2644, 3, 2, 2, 2, 2646, 2647, 3, 2, 2, 2, 2647, 2651,
	3, 2, 2, 2, 2648, 2649, 5, 940, 471, 2, 2649, 2650, 7, 799, 2, 2, 2650,
	2652, 3, 2, 2, 2, 2651, 2648, 3, 2, 2, 2, 2651, 2652, 3, 2, 2, 2, 2652,
	2653, 3, 2, 2, 2, 2653, 2654, 5, 940, 471, 2, 2654, 261, 3, 2, 2, 2, 2655,
	2656, 7, 103, 2, 2, 2656, 2659, 7, 368, 2, 2, 2657, 2658, 7, 153, 2, 2,
	2658, 2660, 7, 119, 2, 2, 2659, 2657, 3, 2, 2, 2, 2659, 2660, 3, 2, 2,
	2, 2660, 2661, 3, 2, 2, 2, 2661, 2662, 5, 940, 471, 2, 2662, 263, 3, 2,
	2, 2, 2663, 2664, 7, 103, 2, 2, 2664, 2665, 7, 768, 2, 2, 2665, 2666, 7,
	146, 2, 2, 2666, 2667, 5, 940, 471, 2, 2667, 265, 3, 2, 2, 2, 2668, 2669,
	7, 103, 2, 2, 2669, 2670, 7, 769, 2, 2, 2670, 2671, 7, 301, 2, 2, 2671,
	2675, 7, 439, 2, 2, 2672, 2673, 5, 940, 471, 2, 2673, 2674, 7, 799, 2,
	2, 2674, 2676, 3, 2, 2, 2, 2675, 2672, 3, 2, 2, 2, 2675, 2676, 3, 2, 2,
	2, 2676, 2677, 3, 2, 2, 2, 2677, 2678, 5, 940, 471, 2, 2678, 267, 3, 2,
	2, 2, 2679, 2680, 7, 481, 2, 2, 2680, 2695, 7, 354, 2, 2, 2681, 2683, 7,
	806, 2, 2, 2682, 2681, 3, 2, 2, 2, 2682, 2683, 3, 2, 2, 2, 2683, 2687,
	3, 2, 2, 2, 2684, 2685, 5, 940, 471, 2, 2685, 2686, 7, 799, 2, 2, 2686,
	2688, 3, 2, 2, 2, 2687, 2684, 3, 2, 2, 2, 2687, 2688, 3, 2, 2, 2, 2688,
	2689, 3, 2, 2, 2, 2689, 2691, 5, 940, 471, 2, 2690, 2682, 3, 2, 2, 2, 2691,
	2692, 3, 2, 2, 2, 2692, 2690, 3, 2, 2, 2, 2692, 2693, 3, 2, 2, 2, 2693,
	2696, 3, 2, 2, 2, 2694, 2696, 7, 5, 2, 2, 2695, 2690, 3, 2, 2, 2, 2695,
	2694, 3, 2, 2, 2, 2696, 2697, 3, 2, 2, 2, 2697, 2707, 7, 228, 2, 2, 2698,
	2699, 5, 940, 471, 2, 2699, 2700, 7, 799, 2, 2, 2700, 2702, 3, 2, 2, 2,
	2701, 2698, 3, 2, 2, 2, 2701, 2702, 3, 2, 2, 2, 2702, 2703, 3, 2, 2, 2,
	2703, 2708, 5, 940, 471, 2, 2704, 2708, 7, 84, 2, 2, 2705, 2706, 7, 5,
	2, 2, 2706, 2708, 7, 310, 2, 2, 2707, 2701, 3, 2, 2, 2, 2707, 2704, 3,
	2, 2, 2, 2707, 2705, 3, 2, 2, 2, 2708, 269, 3, 2, 2, 2, 2709, 2710, 7,
	489, 2, 2, 2710, 2725, 7, 354, 2, 2, 2711, 2713, 7, 806, 2, 2, 2712, 2711,
	3, 2, 2, 2, 2712, 2713, 3, 2, 2, 2, 2713, 2717, 3, 2, 2, 2, 2714, 2715,
	5, 940, 471, 2, 2715, 2716, 7, 799, 2, 2, 2716, 2718, 3, 2, 2, 2, 2717,
	2714, 3, 2, 2, 2, 2717, 2718, 3, 2, 2, 2, 2718, 2719, 3, 2, 2, 2, 2719,
	2721, 5, 940, 471, 2, 2720, 2712, 3, 2, 2, 2, 2721, 2722, 3, 2, 2, 2, 2722,
	2720, 3, 2, 2, 2, 2722, 2723, 3, 2, 2, 2, 2723, 2726, 3, 2, 2, 2, 2724,
	2726, 7, 5, 2, 2, 2725, 2720, 3, 2, 2, 2, 2725, 2724, 3, 2, 2, 2, 2726,
	2727, 3, 2, 2, 2, 2727, 2737, 7, 228, 2, 2, 2728, 2729, 5, 940, 471, 2,
	2729, 2730, 7, 799, 2, 2, 2730, 2732, 3, 2, 2, 2, 2731, 2728, 3, 2, 2,
	2, 2731, 2732, 3, 2, 2, 2, 2732, 2733, 3, 2, 2, 2, 2733, 2738, 5, 940,
	471, 2, 2734, 2738, 7, 84, 2, 2, 2735, 2736, 7, 5, 2, 2, 2736, 2738, 7,
	310, 2, 2, 2737, 2731, 3, 2, 2, 2, 2737, 2734, 3, 2, 2, 2, 2737, 2735,
	3, 2, 2, 2, 2738, 271, 3, 2, 2, 2, 2739, 2740, 7, 355, 2, 2, 2740, 2744,
	7, 341, 2, 2, 2741, 2742, 5, 940, 471, 2, 2742, 2743, 7, 799, 2, 2, 2743,
	2745, 3, 2, 2, 2, 2744, 2741, 3, 2, 2, 2, 2744, 2745, 3, 2, 2, 2, 2745,
	2749, 3, 2, 2, 2, 2746, 2747, 5, 940, 471, 2, 2747, 2748, 7, 799, 2, 2,
	2748, 2750, 3, 2, 2, 2, 2749, 2746, 3, 2, 2, 2, 2749, 2750, 3, 2, 2, 2,
	2750, 2751, 3, 2, 2, 2, 2751, 2771, 5, 940, 471, 2, 2752, 2753, 7, 379,
	2, 2, 2753, 2754, 7, 804, 2, 2, 2754, 2755, 7, 632, 2, 2, 2755, 2765, 7,
	804, 2, 2, 2756, 2758, 7, 806, 2, 2, 2757, 2756, 3, 2, 2, 2, 2757, 2758,
	3, 2, 2, 2, 2758, 2763, 3, 2, 2, 2, 2759, 2764, 7, 779, 2, 2, 2760, 2761,
	7, 779, 2, 2, 2761, 2762, 7, 348, 2, 2, 2762, 2764, 7, 779, 2, 2, 2763,
	2759, 3, 2, 2, 2, 2763, 2760, 3, 2, 2, 2, 2764, 2766, 3, 2, 2, 2, 2765,
	2757, 3, 2, 2, 2, 2766, 2767, 3, 2, 2, 2, 2767, 2765, 3, 2, 2, 2, 2767,
	2768, 3, 2, 2, 2, 2768, 2769, 3, 2, 2, 2, 2769, 2770, 7, 805, 2, 2, 2770,
	2772, 7, 805, 2, 2, 2771, 2752, 3, 2, 2, 2, 2771, 2772, 3, 2, 2, 2, 2772,
	273, 3, 2, 2, 2, 2773, 2774, 7, 72, 2, 2, 2774, 2775, 7, 55, 2, 2, 2775,
	2776, 7, 188, 2, 2, 2776, 2777, 7, 171, 2, 2, 2777, 2778, 5, 940, 471,
	2, 2778, 2779, 7, 379, 2, 2, 2779, 2780, 7, 804, 2, 2, 2780, 2781, 7, 173,
	2, 2, 2781, 2782, 7, 787, 2, 2, 2782, 2783, 7, 783, 2, 2, 2783, 2784, 7,
	806, 2, 2, 2784, 2785, 7, 172, 2, 2, 2785, 2786, 7, 787, 2, 2, 2786, 2787,
	7, 783, 2, 2, 2787, 2788, 7, 805, 2, 2, 2788, 275, 3, 2, 2, 2, 2789, 2790,
	7, 9, 2, 2, 2790, 2791, 7, 454, 2, 2, 2791, 2792, 5, 940, 471, 2, 2792,
	2793, 7, 379, 2, 2, 2793, 2794, 7, 150, 2, 2, 2794, 2795, 7, 787, 2, 2,
	2795, 2800, 7, 783, 2, 2, 2796, 2797, 7, 806, 2, 2, 2797, 2798, 7, 702,
	2, 2, 2798, 2799, 7, 787, 2, 2, 2799, 2801, 7, 783, 2, 2, 2800, 2796, 3,
	2, 2, 2, 2800, 2801, 3, 2, 2, 2, 2801, 277, 3, 2, 2, 2, 2802, 2803, 7,
	72, 2, 2, 2803, 2804, 7, 454, 2, 2, 2804, 2805, 5, 940, 471, 2, 2805, 2806,
	7, 379, 2, 2, 2806, 2807, 7, 150, 2, 2, 2807, 2808, 7, 787, 2, 2, 2808,
	2813, 7, 783, 2, 2, 2809, 2810, 7, 806, 2, 2, 2810, 2811, 7, 702, 2, 2,
	2811, 2812, 7, 787, 2, 2, 2812, 2814, 7, 783, 2, 2, 2813, 2809, 3, 2, 2,
	2, 2813, 2814, 3, 2, 2, 2, 2814, 2819, 3, 2, 2, 2, 2815, 2816, 7, 133,
	2, 2, 2816, 2817, 7, 455, 2, 2, 2817, 2818, 7, 648, 2, 2, 2818, 2820, 5,
	940, 471, 2, 2819, 2815, 3, 2, 2, 2, 2819, 2820, 3, 2, 2, 2, 2820, 279,
	3, 2, 2, 2, 2821, 2822, 7, 9, 2, 2, 2822, 2823, 7, 455, 2, 2, 2823, 2824,
	7, 648, 2, 2, 2824, 2829, 5, 940, 471, 2, 2825, 2826, 7, 139, 2, 2, 2826,
	2827, 7, 129, 2, 2, 2827, 2828, 7, 787, 2, 2, 2828, 2830, 7, 783, 2, 2,
	2829, 2825, 3, 2, 2, 2, 2829, 2830, 3, 2, 2, 2, 2830, 2832, 3, 2, 2, 2,
	2831, 2833, 9, 21, 2, 2, 2832, 2831, 3, 2, 2, 2, 2832, 2833, 3, 2, 2, 2,
	2833, 281, 3, 2, 2, 2, 2834, 2835, 7, 72, 2, 2, 2835, 2836, 7, 455, 2,
	2, 2836, 2837, 7, 648, 2, 2, 2837, 2838, 5, 940, 471, 2, 2838, 2839, 7,
	139, 2, 2, 2839, 2840, 7, 129, 2, 2, 2840, 2841, 7, 787, 2, 2, 2841, 2842,
	7, 783, 2, 2, 2842, 283, 3, 2, 2, 2, 2843, 2844, 7, 72, 2, 2, 2844, 2845,
	7, 113, 2, 2, 2845, 2846, 7, 220, 2, 2, 2846, 2847, 5, 940, 471, 2, 2847,
	2852, 7, 228, 2, 2, 2848, 2853, 7, 310, 2, 2, 2849, 2853, 7, 84, 2, 2,
	2850, 2851, 7, 650, 2, 2, 2851, 2853, 5, 940, 471, 2, 2852, 2848, 3, 2,
	2, 2, 2852, 2849, 3, 2, 2, 2, 2852, 2850, 3, 2, 2, 2, 2853, 2856, 3, 2,
	2, 2, 2854, 2855, 7, 379, 2, 2, 2855, 2857, 7, 127, 2, 2, 2856, 2854, 3,
	2, 2, 2, 2856, 2857, 3, 2, 2, 2, 2857, 2858, 3, 2, 2, 2, 2858, 2863, 7,
	133, 2, 2, 2859, 2861, 7, 806, 2, 2, 2860, 2859, 3, 2, 2, 2, 2860, 2861,
	3, 2, 2, 2, 2861, 2862, 3, 2, 2, 2, 2862, 2864, 5, 940, 471, 2, 2863, 2860,
	3, 2, 2, 2, 2864, 2865, 3, 2, 2, 2, 2865, 2863, 3, 2, 2, 2, 2865, 2866,
	3, 2, 2, 2, 2866, 2867, 3, 2, 2, 2, 2867, 2868, 7, 348, 2, 2, 2868, 2869,
	7, 311, 2, 2, 2869, 2870, 7, 783, 2, 2, 2870, 2871, 7, 806, 2, 2, 2871,
	2872, 7, 783, 2, 2, 2872, 285, 3, 2, 2, 2, 2873, 2874, 9, 19, 2, 2, 2874,
	2875, 7, 113, 2, 2, 2875, 2876, 7, 314, 2, 2, 2876, 2877, 5, 940, 471,
	2, 2877, 2878, 7, 228, 2, 2, 2878, 2946, 7, 310, 2, 2, 2879, 2881, 7, 806,
	2, 2, 2880, 2879, 3, 2, 2, 2, 2880, 2881, 3, 2, 2, 2, 2881, 2882, 3, 2,
	2, 2, 2882, 2883, 7, 3, 2, 2, 2883, 2887, 7, 113, 2, 2, 2884, 2885, 5,
	940, 471, 2, 2885, 2886, 7, 799, 2, 2, 2886, 2888, 3, 2, 2, 2, 2887, 2884,
	3, 2, 2, 2, 2887, 2888, 3, 2, 2, 2, 2888, 2889, 3, 2, 2, 2, 2889, 2890,
	5, 940, 471, 2, 2890, 2891, 7, 799, 2, 2, 2891, 2892, 5, 940, 471, 2, 2892,
	2941, 3, 2, 2, 2, 2893, 2907, 7, 804, 2, 2, 2894, 2904, 7, 316, 2, 2, 2895,
	2897, 7, 806, 2, 2, 2896, 2895, 3, 2, 2, 2, 2896, 2897, 3, 2, 2, 2, 2897,
	2898, 3, 2, 2, 2, 2898, 2899, 5, 940, 471, 2, 2899, 2900, 7, 787, 2, 2,
	2900, 2901, 9, 22, 2, 2, 2901, 2903, 3, 2, 2, 2, 2902, 2896, 3, 2, 2, 2,
	2903, 2906, 3, 2, 2, 2, 2904, 2902, 3, 2, 2, 2, 2904, 2905, 3, 2, 2, 2,
	2905, 2908, 3, 2, 2, 2, 2906, 2904, 3, 2, 2, 2, 2907, 2894, 3, 2, 2, 2,
	2907, 2908, 3, 2, 2, 2, 2908, 2929, 3, 2, 2, 2, 2909, 2910, 7, 386, 2,
	2, 2910, 2923, 7, 804, 2, 2, 2911, 2913, 7, 806, 2, 2, 2912, 2911, 3, 2,
	2, 2, 2912, 2913, 3, 2, 2, 2, 2913, 2917, 3, 2, 2, 2, 2914, 2915, 5, 940,
	471, 2, 2915, 2916, 7, 799, 2, 2, 2916, 2918, 3, 2, 2, 2, 2917, 2914, 3,
	2, 2, 2, 2917, 2918, 3, 2, 2, 2, 2918, 2919, 3, 2, 2, 2, 2919, 2920, 5,
	940, 471, 2, 2920, 2921, 7, 799, 2, 2, 2921, 2922, 5, 940, 471, 2, 2922,
	2924, 3, 2, 2, 2, 2923, 2912, 3, 2, 2, 2, 2924, 2925, 3, 2, 2, 2, 2925,
	2923, 3, 2, 2, 2, 2925, 2926, 3, 2, 2, 2, 2926, 2927, 3, 2, 2, 2, 2927,
	2928, 7, 805, 2, 2, 2928, 2930, 3, 2, 2, 2, 2929, 2909, 3, 2, 2, 2, 2930,
	2931, 3, 2, 2, 2, 2931, 2929, 3, 2, 2, 2, 2931, 2932, 3, 2, 2, 2, 2932,
	2935, 3, 2, 2, 2, 2933, 2934, 7, 376, 2, 2, 2934, 2936, 5, 288, 145, 2,
	2935, 2933, 3, 2, 2, 2, 2935, 2936, 3, 2, 2, 2, 2936, 2937, 3, 2, 2, 2,
	2937, 2938, 7, 805, 2, 2, 2938, 2940, 3, 2, 2, 2, 2939, 2893, 3, 2, 2,
	2, 2940, 2943, 3, 2, 2, 2, 2941, 2939, 3, 2, 2, 2, 2941, 2942, 3, 2, 2,
	2, 2942, 2945, 3, 2, 2, 2, 2943, 2941, 3, 2, 2, 2, 2944, 2880, 3, 2, 2,
	2, 2945, 2948, 3, 2, 2, 2, 2946, 2944, 3, 2, 2, 2, 2946, 2947, 3, 2, 2,
	2, 2947, 2965, 3, 2, 2, 2, 2948, 2946, 3, 2, 2, 2, 2949, 2951, 7, 806,
	2, 2, 2950, 2949, 3, 2, 2, 2, 2950, 2951, 3, 2, 2, 2, 2951, 2952, 3, 2,
	2, 2, 2952, 2953, 7, 103, 2, 2, 2953, 2957, 7, 113, 2, 2, 2954, 2955, 5,
	940, 471, 2, 2955, 2956, 7, 799, 2, 2, 2956, 2958, 3, 2, 2, 2, 2957, 2954,
	3, 2, 2, 2, 2957, 2958, 3, 2, 2, 2, 2958, 2959, 3, 2, 2, 2, 2959, 2960,
	5, 940, 471, 2, 2960, 2961, 7, 799, 2, 2, 2961, 2962, 5, 940, 471, 2, 2962,
	2964, 3, 2, 2, 2, 2963, 2950, 3, 2, 2, 2, 2964, 2967, 3, 2, 2, 2, 2965,
	2963, 3, 2, 2, 2, 2965, 2966, 3, 2, 2, 2, 2966, 3009, 3, 2, 2, 2, 2967,
	2965, 3, 2, 2, 2, 2968, 2969, 7, 3, 2, 2, 2969, 2973, 7, 344, 2, 2, 2970,
	2971, 5, 940, 471, 2, 2971, 2972, 7, 799, 2, 2, 2972, 2974, 3, 2, 2, 2,
	2973, 2970, 3, 2, 2, 2, 2973, 2974, 3, 2, 2, 2, 2974, 2975, 3, 2, 2, 2,
	2975, 2976, 5, 940, 471, 2, 2976, 2977, 7, 799, 2, 2, 2977, 2978, 5, 940,
	471, 2, 2978, 3004, 3, 2, 2, 2, 2979, 2980, 7, 804, 2, 2, 2980, 2996, 7,
	316, 2, 2, 2981, 2983, 7, 806, 2, 2, 2982, 2981, 3, 2, 2, 2, 2982, 2983,
	3, 2, 2, 2, 2983, 2984, 3, 2, 2, 2, 2984, 2985, 5, 940, 471, 2, 2985, 2994,
	7, 787, 2, 2, 2986, 2988, 7, 804, 2, 2, 2987, 2986, 3, 2, 2, 2, 2987, 2988,
	3, 2, 2, 2, 2988, 2989, 3, 2, 2, 2, 2989, 2991, 7, 779, 2, 2, 2990, 2992,
	7, 805, 2, 2, 2991, 2990, 3, 2, 2, 2, 2991, 2992, 3, 2, 2, 2, 2992, 2995,
	3, 2, 2, 2, 2993, 2995, 7, 783, 2, 2, 2994, 2987, 3, 2, 2, 2, 2994, 2993,
	3, 2, 2, 2, 2995, 2997, 3, 2, 2, 2, 2996, 2982, 3, 2, 2, 2, 2997, 2998,
	3, 2, 2, 2, 2998, 2996, 3, 2, 2, 2, 2998, 2999, 3, 2, 2, 2, 2999, 3000,
	3, 2, 2, 2, 3000, 3001, 7, 805, 2, 2, 3001, 3003, 3, 2, 2, 2, 3002, 2979,
	3, 2, 2, 2, 3003, 3006, 3, 2, 2, 2, 3004, 3002, 3, 2, 2, 2, 3004, 3005,
	3, 2, 2, 2, 3005, 3008, 3, 2, 2, 2, 3006, 3004, 3, 2, 2, 2, 3007, 2968,
	3, 2, 2, 2, 3008, 3011, 3, 2, 2, 2, 3009, 3007, 3, 2, 2, 2, 3009, 3010,
	3, 2, 2, 2, 3010, 3025, 3, 2, 2, 2, 3011, 3009, 3, 2, 2, 2, 3012, 3013,
	7, 103, 2, 2, 3013, 3017, 7, 344, 2, 2, 3014, 3015, 5, 940, 471, 2, 3015,
	3016, 7, 799, 2, 2, 3016, 3018, 3, 2, 2, 2, 3017, 3014, 3, 2, 2, 2, 3017,
	3018, 3, 2, 2, 2, 3018, 3019, 3, 2, 2, 2, 3019, 3020, 5, 940, 471, 2, 3020,
	3021, 7, 799, 2, 2, 3021, 3022, 5, 940, 471, 2, 3022, 3024, 3, 2, 2, 2,
	3023, 3012, 3, 2, 2, 2, 3024, 3027, 3, 2, 2, 2, 3025, 3023, 3, 2, 2, 2,
	3025, 3026, 3, 2, 2, 2, 3026, 3093, 3, 2, 2, 2, 3027, 3025, 3, 2, 2, 2,
	3028, 3029, 7, 379, 2, 2, 3029, 3037, 7, 804, 2, 2, 3030, 3032, 7, 806,
	2, 2, 3031, 3030, 3, 2, 2, 2, 3031, 3032, 3, 2, 2, 2, 3032, 3033, 3, 2,
	2, 2, 3033, 3034, 7, 189, 2, 2, 3034, 3035, 7, 787, 2, 2, 3035, 3036, 7,
	779, 2, 2, 3036, 3038, 9, 23, 2, 2, 3037, 3031, 3, 2, 2, 2, 3037, 3038,
	3, 2, 2, 2, 3038, 3045, 3, 2, 2, 2, 3039, 3041, 7, 806, 2, 2, 3040, 3039,
	3, 2, 2, 2, 3040, 3041, 3, 2, 2, 2, 3041, 3042, 3, 2, 2, 2, 3042, 3043,
	7, 115, 2, 2, 3043, 3044, 7, 787, 2, 2, 3044, 3046, 9, 24, 2, 2, 3045,
	3040, 3, 2, 2, 2, 3045, 3046, 3, 2, 2, 2, 3046, 3057, 3, 2, 2, 2, 3047,
	3049, 7, 806, 2, 2, 3048, 3047, 3, 2, 2, 2, 3048, 3049, 3, 2, 2, 2, 3049,
	3050, 3, 2, 2, 2, 3050, 3051, 7, 192, 2, 2, 3051, 3055, 7, 787, 2, 2, 3052,
	3053, 7, 779, 2, 2, 3053, 3056, 7, 701, 2, 2, 3054, 3056, 7, 158, 2, 2,
	3055, 3052, 3, 2, 2, 2, 3055, 3054, 3, 2, 2, 2, 3056, 3058, 3, 2, 2, 2,
	3057, 3048, 3, 2, 2, 2, 3057, 3058, 3, 2, 2, 2, 3058, 3066, 3, 2, 2, 2,
	3059, 3061, 7, 806, 2, 2, 3060, 3059, 3, 2, 2, 2, 3060, 3061, 3, 2, 2,
	2, 3061, 3062, 3, 2, 2, 2, 3062, 3063, 7, 193, 2, 2, 3063, 3064, 7, 787,
	2, 2, 3064, 3065, 7, 779, 2, 2, 3065, 3067, 9, 23, 2, 2, 3066, 3060, 3,
	2, 2, 2, 3066, 3067, 3, 2, 2, 2, 3067, 3074, 3, 2, 2, 2, 3068, 3070, 7,
	806, 2, 2, 3069, 3068, 3, 2, 2, 2, 3069, 3070, 3, 2, 2, 2, 3070, 3071,
	3, 2, 2, 2, 3071, 3072, 7, 199, 2, 2, 3072, 3073, 7, 787, 2, 2, 3073, 3075,
	9, 25, 2, 2, 3074, 3069, 3, 2, 2, 2, 3074, 3075, 3, 2, 2, 2, 3075, 3082,
	3, 2, 2, 2, 3076, 3078, 7, 806, 2, 2, 3077, 3076, 3, 2, 2, 2, 3077, 3078,
	3, 2, 2, 2, 3078, 3079, 3, 2, 2, 2, 3079, 3080, 7, 350, 2, 2, 3080, 3081,
	7, 787, 2, 2, 3081, 3083, 9, 8, 2, 2, 3082, 3077, 3, 2, 2, 2, 3082, 3083,
	3, 2, 2, 2, 3083, 3090, 3, 2, 2, 2, 3084, 3086, 7, 806, 2, 2, 3085, 3084,
	3, 2, 2, 2, 3085, 3086, 3, 2, 2, 2, 3086, 3087, 3, 2, 2, 2, 3087, 3088,
	7, 334, 2, 2, 3088, 3089, 7, 787, 2, 2, 3089, 3091, 9, 8, 2, 2, 3090, 3085,
	3, 2, 2, 2, 3090, 3091, 3, 2, 2, 2, 3091, 3092, 3, 2, 2, 2, 3092, 3094,
	7, 805, 2, 2, 3093, 3028, 3, 2, 2, 2, 3093, 3094, 3, 2, 2, 2, 3094, 3098,
	3, 2, 2, 2, 3095, 3096, 7, 330, 2, 2, 3096, 3097, 7, 787, 2, 2, 3097, 3099,
	9, 26, 2, 2, 3098, 3095, 3, 2, 2, 2, 3098, 3099, 3, 2, 2, 2, 3099, 287,
	3, 2, 2, 2, 3100, 3102, 7, 806, 2, 2, 3101, 3100, 3, 2, 2, 2, 3101, 3102,
	3, 2, 2, 2, 3102, 3104, 3, 2, 2, 2, 3103, 3105, 9, 27, 2, 2, 3104, 3103,
	3, 2, 2, 2, 3104, 3105, 3, 2, 2, 2, 3105, 3107, 3, 2, 2, 2, 3106, 3108,
	7, 219, 2, 2, 3107, 3106, 3, 2, 2, 2, 3107, 3108, 3, 2, 2, 2, 3108, 3114,
	3, 2, 2, 2, 3109, 3115, 5, 290, 146, 2, 3110, 3111, 7, 804, 2, 2, 3111,
	3112, 5, 288, 145, 2, 3112, 3113, 7, 805, 2, 2, 3113, 3115, 3, 2, 2, 2,
	3114, 3109, 3, 2, 2, 2, 3114, 3110, 3, 2, 2, 2, 3115, 3117, 3, 2, 2, 2,
	3116, 3101, 3, 2, 2, 2, 3117, 3118, 3, 2, 2, 2, 3118, 3116, 3, 2, 2, 2,
	3118, 3119, 3, 2, 2, 2, 3119, 289, 3, 2, 2, 2, 3120, 3126, 5, 292, 147,
	2, 3121, 3122, 7, 804, 2, 2, 3122, 3123, 5, 288, 145, 2, 3123, 3124, 7,
	805, 2, 2, 3124, 3126, 3, 2, 2, 2, 3125, 3120, 3, 2, 2, 2, 3125, 3121,
	3, 2, 2, 2, 3126, 291, 3, 2, 2, 2, 3127, 3156, 5, 940, 471, 2, 3128, 3139,
	5, 940, 471, 2, 3129, 3130, 5, 940, 471, 2, 3130, 3131, 7, 799, 2, 2, 3131,
	3133, 3, 2, 2, 2, 3132, 3129, 3, 2, 2, 2, 3132, 3133, 3, 2, 2, 2, 3133,
	3134, 3, 2, 2, 2, 3134, 3135, 5, 940, 471, 2, 3135, 3136, 7, 799, 2, 2,
	3136, 3137, 5, 940, 471, 2, 3137, 3139, 3, 2, 2, 2, 3138, 3128, 3, 2, 2,
	2, 3138, 3132, 3, 2, 2, 2, 3139, 3151, 3, 2, 2, 2, 3140, 3152, 7, 787,
	2, 2, 3141, 3142, 7, 789, 2, 2, 3142, 3152, 7, 788, 2, 2, 3143, 3144, 7,
	790, 2, 2, 3144, 3152, 7, 787, 2, 2, 3145, 3152, 7, 788, 2, 2, 3146, 3147,
	7, 788, 2, 2, 3147, 3152, 7, 787, 2, 2, 3148, 3152, 7, 789, 2, 2, 3149,
	3150, 7, 789, 2, 2, 3150, 3152, 7, 787, 2, 2, 3151, 3140, 3, 2, 2, 2, 3151,
	3141, 3, 2, 2, 2, 3151, 3143, 3, 2, 2, 2, 3151, 3145, 3, 2, 2, 2, 3151,
	3146, 3, 2, 2, 2, 3151, 3148, 3, 2, 2, 2, 3151, 3149, 3, 2, 2, 2, 3152,
	3153, 3, 2, 2, 2, 3153, 3154, 9, 22, 2, 2, 3154, 3156, 3, 2, 2, 2, 3155,
	3127, 3, 2, 2, 2, 3155, 3138, 3, 2, 2, 2, 3156, 3184, 3, 2, 2, 2, 3157,
	3158, 5, 940, 471, 2, 3158, 3159, 7, 799, 2, 2, 3159, 3161, 3, 2, 2, 2,
	3160, 3157, 3, 2, 2, 2, 3160, 3161, 3, 2, 2, 2, 3161, 3162, 3, 2, 2, 2,
	3162, 3163, 5, 940, 471, 2, 3163, 3164, 7, 799, 2, 2, 3164, 3165, 5, 940,
	471, 2, 3165, 3179, 7, 804, 2, 2, 3166, 3180, 5, 940, 471, 2, 3167, 3168,
	5, 940, 471, 2, 3168, 3169, 7, 799, 2, 2, 3169, 3171, 3, 2, 2, 2, 3170,
	3167, 3, 2, 2, 2, 3170, 3171, 3, 2, 2, 2, 3171, 3172, 3, 2, 2, 2, 3172,
	3173, 5, 940, 471, 2, 3173, 3174, 7, 799, 2, 2, 3174, 3175, 5, 940, 471,
	2, 3175, 3176, 3, 2, 2, 2, 3176, 3177, 7, 806, 2, 2, 3177, 3178, 9, 22,
	2, 2, 3178, 3180, 3, 2, 2, 2, 3179, 3166, 3, 2, 2, 2, 3179, 3170, 3, 2,
	2, 2, 3180, 3181, 3, 2, 2, 2, 3181, 3182, 7, 805, 2, 2, 3182, 3184, 3,
	2, 2, 2, 3183, 3155, 3, 2, 2, 2, 3183, 3160, 3, 2, 2, 2, 3184, 293, 3,
	2, 2, 2, 3185, 3186, 7, 9, 2, 2, 3186, 3187, 7, 123, 2, 2, 3187, 3188,
	7, 81, 2, 2, 3188, 3189, 7, 323, 2, 2, 3189, 3190, 5, 940, 471, 2, 3190,
	3206, 7, 316, 2, 2, 3191, 3192, 7, 564, 2, 2, 3192, 3193, 7, 787, 2, 2,
	3193, 3195, 9, 28, 2, 2, 3194, 3196, 7, 806, 2, 2, 3195, 3194, 3, 2, 2,
	2, 3195, 3196, 3, 2, 2, 2, 3196, 3207, 3, 2, 2, 2, 3197, 3198, 7, 682,
	2, 2, 3198, 3199, 7, 787, 2, 2, 3199, 3201, 9, 28, 2, 2, 3200, 3202, 7,
	806, 2, 2, 3201, 3200, 3, 2, 2, 2, 3201, 3202, 3, 2, 2, 2, 3202, 3207,
	3, 2, 2, 2, 3203, 3204, 7, 454, 2, 2, 3204, 3205, 7, 787, 2, 2, 3205, 3207,
	5, 940, 471, 2, 3206, 3191, 3, 2, 2, 2, 3206, 3197, 3, 2, 2, 2, 3206, 3203,
	3, 2, 2, 2, 3207, 3208, 3, 2, 2, 2, 3208, 3206, 3, 2, 2, 2, 3208, 3209,
	3, 2, 2, 2, 3209, 3233, 3, 2, 2, 2, 3210, 3211, 7, 9, 2, 2, 3211, 3212,
	7, 123, 2, 2, 3212, 3213, 7, 81, 2, 2, 3213, 3214, 7, 323, 2, 2, 3214,
	3215, 5, 940, 471, 2, 3215, 3216, 7, 379, 2, 2, 3216, 3217, 7, 804, 2,
	2, 3217, 3218, 7, 752, 2, 2, 3218, 3219, 7, 787, 2, 2, 3219, 3220, 7, 425,
	2, 2, 3220, 3221, 7, 806, 2, 2, 3221, 3222, 7, 564, 2, 2, 3222, 3223, 7,
	787, 2, 2, 3223, 3228, 7, 783, 2, 2, 3224, 3225, 7, 806, 2, 2, 3225, 3226,
	7, 454, 2, 2, 3226, 3227, 7, 787, 2, 2, 3227, 3229, 5, 940, 471, 2, 3228,
	3224, 3, 2, 2, 2, 3228, 3229, 3, 2, 2, 2, 3229, 3230, 3, 2, 2, 2, 3230,
	3231, 7, 805, 2, 2, 3231, 3233, 3, 2, 2, 2, 3232, 3185, 3, 2, 2, 2, 3232,
	3210, 3, 2, 2, 2, 3233, 295, 3, 2, 2, 2, 3234, 3235, 7, 9, 2, 2, 3235,
	3236, 7, 123, 2, 2, 3236, 3237, 7, 177, 2, 2, 3237, 3240, 5, 940, 471,
	2, 3238, 3239, 7, 19, 2, 2, 3239, 3241, 5, 940, 471, 2, 3240, 3238, 3,
	2, 2, 2, 3240, 3241, 3, 2, 2, 2, 3241, 3242, 3, 2, 2, 2, 3242, 3243, 9,
	29, 2, 2, 3243, 3244, 7, 804, 2, 2, 3244, 3245, 7, 445, 2, 2, 3245, 3249,
	7, 787, 2, 2, 3246, 3250, 7, 783, 2, 2, 3247, 3250, 7, 784, 2, 2, 3248,
	3250, 7, 212, 2, 2, 3249, 3246, 3, 2, 2, 2, 3249, 3247, 3, 2, 2, 2, 3249,
	3248, 3, 2, 2, 2, 3250, 3251, 3, 2, 2, 2, 3251, 3252, 7, 806, 2, 2, 3252,
	3253, 7, 251, 2, 2, 3253, 3255, 7, 787, 2, 2, 3254, 3256, 9, 30, 2, 2,
	3255, 3254, 3, 2, 2, 2, 3255, 3256, 3, 2, 2, 2, 3256, 3257, 3, 2, 2, 2,
	3257, 3258, 7, 805, 2, 2, 3258, 3259, 3, 2, 2, 2, 3259, 3269, 7, 379, 2,
	2, 3260, 3262, 7, 806, 2, 2, 3261, 3260, 3, 2, 2, 2, 3261, 3262, 3, 2,
	2, 2, 3262, 3263, 3, 2, 2, 2, 3263, 3264, 7, 175, 2, 2, 3264, 3265, 7,
	787, 2, 2, 3265, 3270, 9, 31, 2, 2, 3266, 3267, 7, 83, 2, 2, 3267, 3268,
	7, 787, 2, 2, 3268, 3270, 5, 940, 471, 2, 3269, 3261, 3, 2, 2, 2, 3269,
	3266, 3, 2, 2, 2, 3270, 3271, 3, 2, 2, 2, 3271, 3269, 3, 2, 2, 2, 3271,
	3272, 3, 2, 2, 2, 3272, 3273, 3, 2, 2, 2, 3273, 3274, 7, 805, 2, 2, 3274,
	297, 3, 2, 2, 2, 3275, 3276, 7, 72, 2, 2, 3276, 3277, 7, 123, 2, 2, 3277,
	3278, 7, 177, 2, 2, 3278, 3281, 5, 940, 471, 2, 3279, 3280, 7, 19, 2, 2,
	3280, 3282, 5, 940, 471, 2, 3281, 3279, 3, 2, 2, 2, 3281, 3282, 3, 2, 2,
	2, 3282, 3283, 3, 2, 2, 2, 3283, 3285, 7, 139, 2, 2, 3284, 3286, 7, 806,
	2, 2, 3285, 3284, 3, 2, 2, 2, 3285, 3286, 3, 2, 2, 2, 3286, 3288, 3, 2,
	2, 2, 3287, 3289, 7, 804, 2, 2, 3288, 3287, 3, 2, 2, 2, 3288, 3289, 3,
	2, 2, 2, 3289, 3292, 3, 2, 2, 2, 3290, 3291, 7, 445, 2, 2, 3291, 3293,
	7, 787, 2, 2, 3292, 3290, 3, 2, 2, 2, 3292, 3293, 3, 2, 2, 2, 3293, 3297,
	3, 2, 2, 2, 3294, 3298, 7, 783, 2, 2, 3295, 3298, 7, 784, 2, 2, 3296, 3298,
	7, 212, 2, 2, 3297, 3294, 3, 2, 2, 2, 3297, 3295, 3, 2, 2, 2, 3297, 3296,
	3, 2, 2, 2, 3298, 3306, 3, 2, 2, 2, 3299, 3300, 7, 806, 2, 2, 3300, 3301,
	7, 251, 2, 2, 3301, 3303, 7, 787, 2, 2, 3302, 3304, 9, 30, 2, 2, 3303,
	3302, 3, 2, 2, 2, 3303, 3304, 3, 2, 2, 2, 3304, 3305, 3, 2, 2, 2, 3305,
	3307, 7, 805, 2, 2, 3306, 3299, 3, 2, 2, 2, 3306, 3307, 3, 2, 2, 2, 3307,
	3323, 3, 2, 2, 2, 3308, 3318, 7, 379, 2, 2, 3309, 3311, 7, 806, 2, 2, 3310,
	3309, 3, 2, 2, 2, 3310, 3311, 3, 2, 2, 2, 3311, 3312, 3, 2, 2, 2, 3312,
	3313, 7, 175, 2, 2, 3313, 3314, 7, 787, 2, 2, 3314, 3319, 9, 31, 2, 2,
	3315, 3316, 7, 83, 2, 2, 3316, 3317, 7, 787, 2, 2, 3317, 3319, 5, 940,
	471, 2, 3318, 3310, 3, 2, 2, 2, 3318, 3315, 3, 2, 2, 2, 3319, 3320, 3,
	2, 2, 2, 3320, 3318, 3, 2, 2, 2, 3320, 3321, 3, 2, 2, 2, 3321, 3322, 3,
	2, 2, 2, 3322, 3324, 7, 805, 2, 2, 3323, 3308, 3, 2, 2, 2, 3323, 3324,
	3, 2, 2, 2, 3324, 299, 3, 2, 2, 2, 3325, 3326, 7, 9, 2, 2, 3326, 3327,
	7, 123, 2, 2, 3327, 3328, 7, 681, 2, 2, 3328, 3331, 7, 635, 2, 2, 3329,
	3332, 5, 940, 471, 2, 3330, 3332, 7, 467, 2, 2, 3331, 3329, 3, 2, 2, 2,
	3331, 3330, 3, 2, 2, 2, 3332, 3333, 3, 2, 2, 2, 3333, 3334, 7, 379, 2,
	2, 3334, 3335, 7, 804, 2, 2, 3335, 3336, 7, 572, 2, 2, 3336, 3337, 7, 787,
	2, 2, 3337, 3375, 7, 779, 2, 2, 3338, 3340, 7, 806, 2, 2, 3339, 3338, 3,
	2, 2, 2, 3339, 3340, 3, 2, 2, 2, 3340, 3341, 3, 2, 2, 2, 3341, 3342, 7,
	393, 2, 2, 3342, 3343, 7, 451, 2, 2, 3343, 3357, 7, 787, 2, 2, 3344, 3358,
	7, 410, 2, 2, 3345, 3347, 7, 806, 2, 2, 3346, 3345, 3, 2, 2, 2, 3346, 3347,
	3, 2, 2, 2, 3347, 3348, 3, 2, 2, 2, 3348, 3349, 7, 779, 2, 2, 3349, 3350,
	7, 348, 2, 2, 3350, 3354, 7, 779, 2, 2, 3351, 3352, 7, 806, 2, 2, 3352,
	3354, 7, 779, 2, 2, 3353, 3346, 3, 2, 2, 2, 3353, 3351, 3, 2, 2, 2, 3354,
	3355, 3, 2, 2, 2, 3355, 3353, 3, 2, 2, 2, 3355, 3356, 3, 2, 2, 2, 3356,
	3358, 3, 2, 2, 2, 3357, 3344, 3, 2, 2, 2, 3357, 3353, 3, 2, 2, 2, 3358,
	3376, 3, 2, 2, 2, 3359, 3360, 7, 614, 2, 2, 3360, 3371, 7, 787, 2, 2, 3361,
	3363, 7, 806, 2, 2, 3362, 3361, 3, 2, 2, 2, 3362, 3363, 3, 2, 2, 2, 3363,
	3364, 3, 2, 2, 2, 3364, 3365, 7, 779, 2, 2, 3365, 3366, 7, 348, 2, 2, 3366,
	3372, 7, 779, 2, 2, 3367, 3369, 7, 806, 2, 2, 3368, 3367, 3, 2, 2, 2, 3368,
	3369, 3, 2, 2, 2, 3369, 3370, 3, 2, 2, 2, 3370, 3372, 7, 779, 2, 2, 3371,
	3362, 3, 2, 2, 2, 3371, 3368, 3, 2, 2, 2, 3372, 3373, 3, 2, 2, 2, 3373,
	3371, 3, 2, 2, 2, 3373, 3374, 3, 2, 2, 2, 3374, 3376, 3, 2, 2, 2, 3375,
	3339, 3, 2, 2, 2, 3375, 3359, 3, 2, 2, 2, 3376, 3383, 3, 2, 2, 2, 3377,
	3379, 7, 806, 2, 2, 3378, 3377, 3, 2, 2, 2, 3378, 3379, 3, 2, 2, 2, 3379,
	3380, 3, 2, 2, 2, 3380, 3381, 7, 577, 2, 2, 3381, 3382, 7, 787, 2, 2, 3382,
	3384, 7, 779, 2, 2, 3383, 3378, 3, 2, 2, 2, 3383, 3384, 3, 2, 2, 2, 3384,
	3391, 3, 2, 2, 2, 3385, 3387, 7, 806, 2, 2, 3386, 3385, 3, 2, 2, 2, 3386,
	3387, 3, 2, 2, 2, 3387, 3388, 3, 2, 2, 2, 3388, 3389, 7, 579, 2, 2, 3389,
	3390, 7, 787, 2, 2, 3390, 3392, 7, 779, 2, 2, 3391, 3386, 3, 2, 2, 2, 3391,
	3392, 3, 2, 2, 2, 3392, 3393, 3, 2, 2, 2, 3393, 3394, 7, 805, 2, 2, 3394,
	301, 3, 2, 2, 2, 3395, 3396, 7, 72, 2, 2, 3396, 3397, 7, 123, 2, 2, 3397,
	3398, 7, 681, 2, 2, 3398, 3399, 7, 635, 2, 2, 3399, 3400, 5, 940, 471,
	2, 3400, 3401, 7, 379, 2, 2, 3401, 3402, 7, 804, 2, 2, 3402, 3403, 7, 572,
	2, 2, 3403, 3404, 7, 787, 2, 2, 3404, 3442, 7, 779, 2, 2, 3405, 3407, 7,
	806, 2, 2, 3406, 3405, 3, 2, 2, 2, 3406, 3407, 3, 2, 2, 2, 3407, 3408,
	3, 2, 2, 2, 3408, 3409, 7, 393, 2, 2, 3409, 3410, 7, 451, 2, 2, 3410, 3424,
	7, 787, 2, 2, 3411, 3425, 7, 410, 2, 2, 3412, 3414, 7, 806, 2, 2, 3413,
	3412, 3, 2, 2, 2, 3413, 3414, 3, 2, 2, 2, 3414, 3415, 3, 2, 2, 2, 3415,
	3416, 7, 779, 2, 2, 3416, 3417, 7, 348, 2, 2, 3417, 3421, 7, 779, 2, 2,
	3418, 3419, 7, 806, 2, 2, 3419, 3421, 7, 779, 2, 2, 3420, 3413, 3, 2, 2,
	2, 3420, 3418, 3, 2, 2, 2, 3421, 3422, 3, 2, 2, 2, 3422, 3420, 3, 2, 2,
	2, 3422, 3423, 3, 2, 2, 2, 3423, 3425, 3, 2, 2, 2, 3424, 3411, 3, 2, 2,
	2, 3424, 3420, 3, 2, 2, 2, 3425, 3443, 3, 2, 2, 2, 3426, 3427, 7, 614,
	2, 2, 3427, 3438, 7, 787, 2, 2, 3428, 3430, 7, 806, 2, 2, 3429, 3428, 3,
	2, 2, 2, 3429, 3430, 3, 2, 2, 2, 3430, 3431, 3, 2, 2, 2, 3431, 3432, 7,
	779, 2, 2, 3432, 3433, 7, 348, 2, 2, 3433, 3439, 7, 779, 2, 2, 3434, 3436,
	7, 806, 2, 2, 3435, 3434, 3, 2, 2, 2, 3435, 3436, 3, 2, 2, 2, 3436, 3437,
	3, 2, 2, 2, 3437, 3439, 7, 779, 2, 2, 3438, 3429, 3, 2, 2, 2, 3438, 3435,
	3, 2, 2, 2, 3439, 3440, 3, 2, 2, 2, 3440, 3438, 3, 2, 2, 2, 3440, 3441,
	3, 2, 2, 2, 3441, 3443, 3, 2, 2, 2, 3442, 3406, 3, 2, 2, 2, 3442, 3426,
	3, 2, 2, 2, 3443, 3450, 3, 2, 2, 2, 3444, 3446, 7, 806, 2, 2, 3445, 3444,
	3, 2, 2, 2, 3445, 3446, 3, 2, 2, 2, 3446, 3447, 3, 2, 2, 2, 3447, 3448,
	7, 577, 2, 2, 3448, 3449, 7, 787, 2, 2, 3449, 3451, 7, 779, 2, 2, 3450,
	3445, 3, 2, 2, 2, 3450, 3451, 3, 2, 2, 2, 3451, 3458, 3, 2, 2, 2, 3452,
	3454, 7, 806, 2, 2, 3453, 3452, 3, 2, 2, 2, 3453, 3454, 3, 2, 2, 2, 3454,
	3455, 3, 2, 2, 2, 3455, 3456, 7, 579, 2, 2, 3456, 3457, 7, 787, 2, 2, 3457,
	3459, 7, 779, 2, 2, 3458, 3453, 3, 2, 2, 2, 3458, 3459, 3, 2, 2, 2, 3459,
	3460, 3, 2, 2, 2, 3460, 3461, 7, 805, 2, 2, 3461, 303, 3, 2, 2, 2, 3462,
	3463, 7, 9, 2, 2, 3463, 3464, 7, 520, 2, 2, 3464, 3465, 7, 432, 2, 2, 3465,
	3476, 5, 940, 471, 2, 3466, 3471, 7, 664, 2, 2, 3467, 3468, 7, 379, 2,
	2, 3468, 3469, 7, 385, 2, 2, 3469, 3470, 7, 787, 2, 2, 3470, 3472, 9, 8,
	2, 2, 3471, 3467, 3, 2, 2, 2, 3471, 3472, 3, 2, 2, 2, 3472, 3477, 3, 2,
	2, 2, 3473, 3477, 7, 671, 2, 2, 3474, 3475, 7, 15, 2, 2, 3475, 3477, 7,
	89, 2, 2, 3476, 3466, 3, 2, 2, 2, 3476, 3473, 3, 2, 2, 2, 3476, 3474, 3,
	2, 2, 2, 3477, 305, 3, 2, 2, 2, 3478, 3479, 7, 72, 2, 2, 3479, 3480, 7,
	520, 2, 2, 3480, 3481, 7, 432, 2, 2, 3481, 3485, 5, 940, 471, 2, 3482,
	3483, 7, 228, 2, 2, 3483, 3484, 7, 506, 2, 2, 3484, 3486, 5, 940, 471,
	2, 3485, 3482, 3, 2, 2, 2, 3485, 3486, 3, 2, 2, 2, 3486, 3490, 3, 2, 2,
	2, 3487, 3488, 7, 154, 2, 2, 3488, 3489, 7, 634, 2, 2, 3489, 3491, 7, 783,
	2, 2, 3490, 3487, 3, 2, 2, 2, 3490, 3491, 3, 2, 2, 2, 3491, 3496, 3, 2,
	2, 2, 3492, 3493, 7, 379, 2, 2, 3493, 3494, 7, 385, 2, 2, 3494, 3495, 7,
	787, 2, 2, 3495, 3497, 9, 8, 2, 2, 3496, 3492, 3, 2, 2, 2, 3496, 3497,
	3, 2, 2, 2, 3497, 3500, 3, 2, 2, 2, 3498, 3499, 7, 15, 2, 2, 3499, 3501,
	7, 89, 2, 2, 3500, 3498, 3, 2, 2, 2, 3500, 3501, 3, 2, 2, 2, 3501, 3504,
	3, 2, 2, 2, 3502, 3503, 7, 19, 2, 2, 3503, 3505, 5, 940, 471, 2, 3504,
	3502, 3, 2, 2, 2, 3504, 3505, 3, 2, 2, 2, 3505, 307, 3, 2, 2, 2, 3506,
	3507, 7, 9, 2, 2, 3507, 3508, 7, 520, 2, 2, 3508, 3509, 7, 725, 2, 2, 3509,
	3523, 5, 940, 471, 2, 3510, 3511, 7, 3, 2, 2, 3511, 3512, 7, 783, 2, 2,
	3512, 3513, 7, 175, 2, 2, 3513, 3524, 9, 32, 2, 2, 3514, 3521, 7, 103,
	2, 2, 3515, 3516, 7, 783, 2, 2, 3516, 3517, 7, 175, 2, 2, 3517, 3522, 9,
	32, 2, 2, 3518, 3519, 7, 5, 2, 2, 3519, 3522, 9, 32, 2, 2, 3520, 3522,
	7, 5, 2, 2, 3521, 3515, 3, 2, 2, 2, 3521, 3518, 3, 2, 2, 2, 3521, 3520,
	3, 2, 2, 2, 3522, 3524, 3, 2, 2, 2, 3523, 3510, 3, 2, 2, 2, 3523, 3514,
	3, 2, 2, 2, 3524, 309, 3, 2, 2, 2, 3525, 3526, 7, 72, 2, 2, 3526, 3527,
	7, 520, 2, 2, 3527, 3528, 7, 725, 2, 2, 3528, 3540, 5, 940, 471, 2, 3529,
	3538, 7, 139, 2, 2, 3530, 3531, 5, 940, 471, 2, 3531, 3532, 7, 799, 2,
	2, 3532, 3534, 3, 2, 2, 2, 3533, 3530, 3, 2, 2, 2, 3533, 3534, 3, 2, 2,
	2, 3534, 3535, 3, 2, 2, 2, 3535, 3539, 5, 940, 471, 2, 3536, 3537, 7, 339,
	2, 2, 3537, 3539, 7, 725, 2, 2, 3538, 3533, 3, 2, 2, 2, 3538, 3536, 3,
	2, 2, 2, 3539, 3541, 3, 2, 2, 2, 3540, 3529, 3, 2, 2, 2, 3540, 3541, 3,
	2, 2, 2, 3541, 3544, 3, 2, 2, 2, 3542, 3543, 7, 19, 2, 2, 3543, 3545, 5,
	940, 471, 2, 3544, 3542, 3, 2, 2, 2, 3544, 3545, 3, 2, 2, 2, 3545, 311,
	3, 2, 2, 2, 3546, 3547, 7, 9, 2, 2, 3547, 3548, 7, 566, 2, 2, 3548, 3616,
	5, 940, 471, 2, 3549, 3551, 9, 21, 2, 2, 3550, 3549, 3, 2, 2, 2, 3550,
	3551, 3, 2, 2, 2, 3551, 3617, 3, 2, 2, 2, 3552, 3566, 7, 379, 2, 2, 3553,
	3554, 7, 243, 2, 2, 3554, 3558, 7, 787, 2, 2, 3555, 3559, 7, 783, 2, 2,
	3556, 3557, 7, 784, 2, 2, 3557, 3559, 7, 148, 2, 2, 3558, 3555, 3, 2, 2,
	2, 3558, 3556, 3, 2, 2, 2, 3559, 3563, 3, 2, 2, 2, 3560, 3562, 9, 33, 2,
	2, 3561, 3560, 3, 2, 2, 2, 3562, 3565, 3, 2, 2, 2, 3563, 3561, 3, 2, 2,
	2, 3563, 3564, 3, 2, 2, 2, 3564, 3567, 3, 2, 2, 2, 3565, 3563, 3, 2, 2,
	2, 3566, 3553, 3, 2, 2, 2, 3566, 3567, 3, 2, 2, 2, 3567, 3577, 3, 2, 2,
	2, 3568, 3569, 7, 227, 2, 2, 3569, 3570, 7, 787, 2, 2, 3570, 3574, 7, 783,
	2, 2, 3571, 3573, 9, 33, 2, 2, 3572, 3571, 3, 2, 2, 2, 3573, 3576, 3, 2,
	2, 2, 3574, 3572, 3, 2, 2, 2, 3574, 3575, 3, 2, 2, 2, 3575, 3578, 3, 2,
	2, 2, 3576, 3574, 3, 2, 2, 2, 3577, 3568, 3, 2, 2, 2, 3577, 3578, 3, 2,
	2, 2, 3578, 3582, 3, 2, 2, 2, 3579, 3580, 7, 90, 2, 2, 3580, 3581, 7, 787,
	2, 2, 3581, 3583, 5, 940, 471, 2, 3582, 3579, 3, 2, 2, 2, 3582, 3583, 3,
	2, 2, 2, 3583, 3587, 3, 2, 2, 2, 3584, 3585, 7, 469, 2, 2, 3585, 3586,
	7, 787, 2, 2, 3586, 3588, 5, 940, 471, 2, 3587, 3584, 3, 2, 2, 2, 3587,
	3588, 3, 2, 2, 2, 3588, 3592, 3, 2, 2, 2, 3589, 3590, 7, 598, 2, 2, 3590,
	3591, 7, 787, 2, 2, 3591, 3593, 5, 940, 471, 2, 3592, 3589, 3, 2, 2, 2,
	3592, 3593, 3, 2, 2, 2, 3593, 3597, 3, 2, 2, 2, 3594, 3595, 7, 47, 2, 2,
	3595, 3596, 7, 787, 2, 2, 3596, 3598, 9, 8, 2, 2, 3597, 3594, 3, 2, 2,
	2, 3597, 3598, 3, 2, 2, 2, 3598, 3602, 3, 2, 2, 2, 3599, 3600, 7, 48, 2,
	2, 3600, 3601, 7, 787, 2, 2, 3601, 3603, 9, 8, 2, 2, 3602, 3599, 3, 2,
	2, 2, 3602, 3603, 3, 2, 2, 2, 3603, 3607, 3, 2, 2, 2, 3604, 3605, 7, 454,
	2, 2, 3605, 3606, 7, 787, 2, 2, 3606, 3608, 5, 940, 471, 2, 3607, 3604,
	3, 2, 2, 2, 3607, 3608, 3, 2, 2, 2, 3608, 3611, 3, 2, 2, 2, 3609, 3610,
	7, 609, 2, 2, 3610, 3612, 7, 454, 2, 2, 3611, 3609, 3, 2, 2, 2, 3611, 3612,
	3, 2, 2, 2, 3612, 3617, 3, 2, 2, 2, 3613, 3614, 9, 20, 2, 2, 3614, 3615,
	7, 454, 2, 2, 3615, 3617, 5, 940, 471, 2, 3616, 3550, 3, 2, 2, 2, 3616,
	3552, 3, 2, 2, 2, 3616, 3613, 3, 2, 2, 2, 3617, 313, 3, 2, 2, 2, 3618,
	3619, 7, 72, 2, 2, 3619, 3620, 7, 566, 2, 2, 3620, 3711, 5, 940, 471, 2,
	3621, 3635, 7, 379, 2, 2, 3622, 3623, 7, 243, 2, 2, 3623, 3627, 7, 787,
	2, 2, 3624, 3628, 7, 783, 2, 2, 3625, 3626, 7, 784, 2, 2, 3626, 3628, 7,
	148, 2, 2, 3627, 3624, 3, 2, 2, 2, 3627, 3625, 3, 2, 2, 2, 3628, 3632,
	3, 2, 2, 2, 3629, 3631, 9, 33, 2, 2, 3630, 3629, 3, 2, 2, 2, 3631, 3634,
	3, 2, 2, 2, 3632, 3630, 3, 2, 2, 2, 3632, 3633, 3, 2, 2, 2, 3633, 3636,
	3, 2, 2, 2, 3634, 3632, 3, 2, 2, 2, 3635, 3622, 3, 2, 2, 2, 3635, 3636,
	3, 2, 2, 2, 3636, 3643, 3, 2, 2, 2, 3637, 3639, 7, 806, 2, 2, 3638, 3637,
	3, 2, 2, 2, 3638, 3639, 3, 2, 2, 2, 3639, 3640, 3, 2, 2, 2, 3640, 3641,
	7, 319, 2, 2, 3641, 3642, 7, 787, 2, 2, 3642, 3644, 7, 784, 2, 2, 3643,
	3638, 3, 2, 2, 2, 3643, 3644, 3, 2, 2, 2, 3644, 3651, 3, 2, 2, 2, 3645,
	3647, 7, 806, 2, 2, 3646, 3645, 3, 2, 2, 2, 3646, 3647, 3, 2, 2, 2, 3647,
	3648, 3, 2, 2, 2, 3648, 3649, 7, 90, 2, 2, 3649, 3650, 7, 787, 2, 2, 3650,
	3652, 5, 940, 471, 2, 3651, 3646, 3, 2, 2, 2, 3651, 3652, 3, 2, 2, 2, 3652,
	3659, 3, 2, 2, 2, 3653, 3655, 7, 806, 2, 2, 3654, 3653, 3, 2, 2, 2, 3654,
	3655, 3, 2, 2, 2, 3655, 3656, 3, 2, 2, 2, 3656, 3657, 7, 469, 2, 2, 3657,
	3658, 7, 787, 2, 2, 3658, 3660, 5, 940, 471, 2, 3659, 3654, 3, 2, 2, 2,
	3659, 3660, 3, 2, 2, 2, 3660, 3667, 3, 2, 2, 2, 3661, 3663, 7, 806, 2,
	2, 3662, 3661, 3, 2, 2, 2, 3662, 3663, 3, 2, 2, 2, 3663, 3664, 3, 2, 2,
	2, 3664, 3665, 7, 48, 2, 2, 3665, 3666, 7, 787, 2, 2, 3666, 3668, 9, 8,
	2, 2, 3667, 3662, 3, 2, 2, 2, 3667, 3668, 3, 2, 2, 2, 3668, 3675, 3, 2,
	2, 2, 3669, 3671, 7, 806, 2, 2, 3670, 3669, 3, 2, 2, 2, 3670, 3671, 3,
	2, 2, 2, 3671, 3672, 3, 2, 2, 2, 3672, 3673, 7, 47, 2, 2, 3673, 3674, 7,
	787, 2, 2, 3674, 3676, 9, 8, 2, 2, 3675, 3670, 3, 2, 2, 2, 3675, 3676,
	3, 2, 2, 2, 3676, 3683, 3, 2, 2, 2, 3677, 3679, 7, 806, 2, 2, 3678, 3677,
	3, 2, 2, 2, 3678, 3679, 3, 2, 2, 2, 3679, 3680, 3, 2, 2, 2, 3680, 3681,
	7, 454, 2, 2, 3681, 3682, 7, 787, 2, 2, 3682, 3684, 5, 940, 471, 2, 3683,
	3678, 3, 2, 2, 2, 3683, 3684, 3, 2, 2, 2, 3684, 3712, 3, 2, 2, 2, 3685,
	3709, 7, 139, 2, 2, 3686, 3687, 7, 378, 2, 2, 3687, 3694, 7, 379, 2, 2,
	3688, 3690, 7, 806, 2, 2, 3689, 3688, 3, 2, 2, 2, 3689, 3690, 3, 2, 2,
	2, 3690, 3691, 3, 2, 2, 2, 3691, 3692, 7, 90, 2, 2, 3692, 3693, 7, 787,
	2, 2, 3693, 3695, 5, 940, 471, 2, 3694, 3689, 3, 2, 2, 2, 3694, 3695, 3,
	2, 2, 2, 3695, 3702, 3, 2, 2, 2, 3696, 3698, 7, 806, 2, 2, 3697, 3696,
	3, 2, 2, 2, 3697, 3698, 3, 2, 2, 2, 3698, 3699, 3, 2, 2, 2, 3699, 3700,
	7, 469, 2, 2, 3700, 3701, 7, 787, 2, 2, 3701, 3703, 7, 783, 2, 2, 3702,
	3697, 3, 2, 2, 2, 3702, 3703, 3, 2, 2, 2, 3703, 3710, 3, 2, 2, 2, 3704,
	3705, 7, 42, 2, 2, 3705, 3710, 5, 940, 471, 2, 3706, 3707, 7, 17, 2, 2,
	3707, 3708, 7, 171, 2, 2, 3708, 3710, 5, 940, 471, 2, 3709, 3686, 3, 2,
	2, 2, 3709, 3704, 3, 2, 2, 2, 3709, 3706, 3, 2, 2, 2, 3710, 3712, 3, 2,
	2, 2, 3711, 3621, 3, 2, 2, 2, 3711, 3685, 3, 2, 2, 2, 3712, 315, 3, 2,
	2, 2, 3713, 3714, 7, 9, 2, 2, 3714, 3715, 7, 566, 2, 2, 3715, 3733, 5,
	940, 471, 2, 3716, 3718, 9, 21, 2, 2, 3717, 3716, 3, 2, 2, 2, 3717, 3718,
	3, 2, 2, 2, 3718, 3734, 3, 2, 2, 2, 3719, 3731, 7, 379, 2, 2, 3720, 3721,
	7, 243, 2, 2, 3721, 3722, 7, 787, 2, 2, 3722, 3726, 7, 783, 2, 2, 3723,
	3724, 7, 227, 2, 2, 3724, 3725, 7, 787, 2, 2, 3725, 3727, 7, 783, 2, 2,
	3726, 3723, 3, 2, 2, 2, 3726, 3727, 3, 2, 2, 2, 3727, 3732, 3, 2, 2, 2,
	3728, 3729, 7, 598, 2, 2, 3729, 3730, 7, 787, 2, 2, 3730, 3732, 5, 940,
	471, 2, 3731, 3720, 3, 2, 2, 2, 3731, 3728, 3, 2, 2, 2, 3732, 3734, 3,
	2, 2, 2, 3733, 3717, 3, 2, 2, 2, 3733, 3719, 3, 2, 2, 2, 3734, 317, 3,
	2, 2, 2, 3735, 3736, 7, 72, 2, 2, 3736, 3737, 7, 566, 2, 2, 3737, 3738,
	5, 940, 471, 2, 3738, 3739, 7, 379, 2, 2, 3739, 3740, 7, 243, 2, 2, 3740,
	3741, 7, 787, 2, 2, 3741, 3745, 7, 783, 2, 2, 3742, 3743, 7, 319, 2, 2,
	3743, 3744, 7, 787, 2, 2, 3744, 3746, 7, 784, 2, 2, 3745, 3742, 3, 2, 2,
	2, 3745, 3746, 3, 2, 2, 2, 3746, 319, 3, 2, 2, 2, 3747, 3748, 7, 9, 2,
	2, 3748, 3749, 7, 566, 2, 2, 3749, 3773, 5, 940, 471, 2, 3750, 3752, 9,
	21, 2, 2, 3751, 3750, 3, 2, 2, 2, 3751, 3752, 3, 2, 2, 2, 3752, 3774, 3,
	2, 2, 2, 3753, 3771, 7, 379, 2, 2, 3754, 3755, 7, 243, 2, 2, 3755, 3756,
	7, 787, 2, 2, 3756, 3766, 7, 783, 2, 2, 3757, 3758, 7, 227, 2, 2, 3758,
	3759, 7, 787, 2, 2, 3759, 3763, 7, 783, 2, 2, 3760, 3762, 9, 33, 2, 2,
	3761, 3760, 3, 2, 2, 2, 3762, 3765, 3, 2, 2, 2, 3763, 3761, 3, 2, 2, 2,
	3763, 3764, 3, 2, 2, 2, 3764, 3767, 3, 2, 2, 2, 3765, 3763, 3, 2, 2, 2,
	3766, 3757, 3, 2, 2, 2, 3766, 3767, 3, 2, 2, 2, 3767, 3772, 3, 2, 2, 2,
	3768, 3769, 7, 598, 2, 2, 3769, 3770, 7, 787, 2, 2, 3770, 3772, 5, 940,
	471, 2, 3771, 3754, 3, 2, 2, 2, 3771, 3768, 3, 2, 2, 2, 3772, 3774, 3,
	2, 2, 2, 3773, 3751, 3, 2, 2, 2, 3773, 3753, 3, 2, 2, 2, 3774, 321, 3,
	2, 2, 2, 3775, 3776, 7, 72, 2, 2, 3776, 3777, 7, 566, 2, 2, 3777, 3794,
	5, 940, 471, 2, 3778, 3779, 7, 379, 2, 2, 3779, 3780, 7, 243, 2, 2, 3780,
	3781, 7, 787, 2, 2, 3781, 3783, 7, 783, 2, 2, 3782, 3784, 7, 205, 2, 2,
	3783, 3782, 3, 2, 2, 2, 3783, 3784, 3, 2, 2, 2, 3784, 3790, 3, 2, 2, 2,
	3785, 3786, 7, 47, 2, 2, 3786, 3788, 7, 787, 2, 2, 3787, 3789, 9, 8, 2,
	2, 3788, 3787, 3, 2, 2, 2, 3788, 3789, 3, 2, 2, 2, 3789, 3791, 3, 2, 2,
	2, 3790, 3785, 3, 2, 2, 2, 3790, 3791, 3, 2, 2, 2, 3791, 3795, 3, 2, 2,
	2, 3792, 3793, 7, 139, 2, 2, 3793, 3795, 7, 378, 2, 2, 3794, 3778, 3, 2,
	2, 2, 3794, 3792, 3, 2, 2, 2, 3795, 323, 3, 2, 2, 2, 3796, 3797, 7, 9,
	2, 2, 3797, 3798, 7, 188, 2, 2, 3798, 3820, 7, 171, 2, 2, 3799, 3801, 7,
	514, 2, 2, 3800, 3799, 3, 2, 2, 2, 3800, 3801, 3, 2, 2, 2, 3801, 3802,
	3, 2, 2, 2, 3802, 3803, 7, 270, 2, 2, 3803, 3804, 7, 379, 2, 2, 3804, 3805,
	7, 492, 2, 2, 3805, 3806, 7, 37, 2, 2, 3806, 3807, 7, 243, 2, 2, 3807,
	3808, 7, 787, 2, 2, 3808, 3821, 7, 783, 2, 2, 3809, 3810, 9, 20, 2, 2,
	3810, 3811, 7, 492, 2, 2, 3811, 3818, 7, 37, 2, 2, 3812, 3813, 7, 311,
	2, 2, 3813, 3814, 7, 188, 2, 2, 3814, 3819, 7, 171, 2, 2, 3815, 3816, 7,
	243, 2, 2, 3816, 3817, 7, 787, 2, 2, 3817, 3819, 7, 783, 2, 2, 3818, 3812,
	3, 2, 2, 2, 3818, 3815, 3, 2, 2, 2, 3819, 3821, 3, 2, 2, 2, 3820, 3800,
	3, 2, 2, 2, 3820, 3809, 3, 2, 2, 2, 3821, 325, 3, 2, 2, 2, 3822, 3823,
	7, 72, 2, 2, 3823, 3824, 7, 188, 2, 2, 3824, 3825, 7, 171, 2, 2, 3825,
	3826, 7, 492, 2, 2, 3826, 3827, 7, 37, 2, 2, 3827, 3828, 7, 243, 2, 2,
	3828, 3829, 7, 787, 2, 2, 3829, 3830, 7, 783, 2, 2, 3830, 327, 3, 2, 2,
	2, 3831, 3832, 7, 9, 2, 2, 3832, 3833, 7, 188, 2, 2, 3833, 3861, 7, 171,
	2, 2, 3834, 3836, 7, 514, 2, 2, 3835, 3834, 3, 2, 2, 2, 3835, 3836, 3,
	2, 2, 2, 3836, 3837, 3, 2, 2, 2, 3837, 3838, 7, 270, 2, 2, 3838, 3839,
	7, 379, 2, 2, 3839, 3840, 7, 492, 2, 2, 3840, 3841, 7, 37, 2, 2, 3841,
	3842, 7, 243, 2, 2, 3842, 3843, 7, 787, 2, 2, 3843, 3862, 7, 783, 2, 2,
	3844, 3845, 7, 3, 2, 2, 3845, 3846, 7, 492, 2, 2, 3846, 3853, 7, 37, 2,
	2, 3847, 3848, 7, 311, 2, 2, 3848, 3849, 7, 188, 2, 2, 3849, 3854, 7, 171,
	2, 2, 3850, 3851, 7, 243, 2, 2, 3851, 3852, 7, 787, 2, 2, 3852, 3854, 7,
	783, 2, 2, 3853, 3847, 3, 2, 2, 2, 3853, 3850, 3, 2, 2, 2, 3854, 3862,
	3, 2, 2, 2, 3855, 3856, 7, 103, 2, 2, 3856, 3857, 7, 492, 2, 2, 3857, 3858,
	7, 37, 2, 2, 3858, 3859, 7, 243, 2, 2, 3859, 3860, 7, 787, 2, 2, 3860,
	3862, 7, 783, 2, 2, 3861, 3835, 3, 2, 2, 2, 3861, 3844, 3, 2, 2, 2, 3861,
	3855, 3, 2, 2, 2, 3862, 329, 3, 2, 2, 2, 3863, 3864, 7, 72, 2, 2, 3864,
	3865, 7, 188, 2, 2, 3865, 3871, 7, 171, 2, 2, 3866, 3867, 7, 492, 2, 2,
	3867, 3868, 7, 37, 2, 2, 3868, 3869, 7, 243, 2, 2, 3869, 3870, 7, 787,
	2, 2, 3870, 3872, 7, 783, 2, 2, 3871, 3866, 3, 2, 2, 2, 3871, 3872, 3,
	2, 2, 2, 3872, 331, 3, 2, 2, 2, 3873, 3874, 7, 9, 2, 2, 3874, 3875, 7,
	587, 2, 2, 3875, 3876, 7, 752, 2, 2, 3876, 3877, 5, 940, 471, 2, 3877,
	3878, 7, 759, 2, 2, 3878, 3887, 7, 787, 2, 2, 3879, 3888, 7, 212, 2, 2,
	3880, 3888, 7, 488, 2, 2, 3881, 3888, 7, 766, 2, 2, 3882, 3883, 7, 760,
	2, 2, 3883, 3884, 7, 379, 2, 2, 3884, 3885, 7, 301, 2, 2, 3885, 3886, 7,
	439, 2, 2, 3886, 3888, 5, 940, 471, 2, 3887, 3879, 3, 2, 2, 2, 3887, 3880,
	3, 2, 2, 2, 3887, 3881, 3, 2, 2, 2, 3887, 3882, 3, 2, 2, 2, 3888, 333,
	3, 2, 2, 2, 3889, 3890, 7, 9, 2, 2, 3890, 3891, 7, 631, 2, 2, 3891, 3892,
	7, 141, 2, 2, 3892, 3893, 5, 940, 471, 2, 3893, 3894, 7, 804, 2, 2, 3894,
	3895, 7, 805, 2, 2, 3895, 3896, 9, 34, 2, 2, 3896, 3897, 7, 654, 2, 2,
	3897, 3898, 7, 804, 2, 2, 3898, 3899, 7, 779, 2, 2, 3899, 3900, 7, 805,
	2, 2, 3900, 335, 3, 2, 2, 2, 3901, 3902, 7, 9, 2, 2, 3902, 3903, 7, 631,
	2, 2, 3903, 3904, 7, 302, 2, 2, 3904, 3905, 5, 940, 471, 2, 3905, 3906,
	7, 603, 2, 2, 3906, 3908, 7, 367, 2, 2, 3907, 3909, 5, 940, 471, 2, 3908,
	3907, 3, 2, 2, 2, 3908, 3909, 3, 2, 2, 2, 3909, 337, 3, 2, 2, 2, 3910,
	3911, 7, 9, 2, 2, 3911, 3912, 7, 674, 2, 2, 3912, 3913, 7, 311, 2, 2, 3913,
	3914, 7, 424, 2, 2, 3914, 3915, 5, 940, 471, 2, 3915, 3919, 7, 379, 2,
	2, 3916, 3917, 7, 368, 2, 2, 3917, 3918, 7, 787, 2, 2, 3918, 3920, 5, 940,
	471, 2, 3919, 3916, 3, 2, 2, 2, 3919, 3920, 3, 2, 2, 2, 3920, 3925, 3,
	2, 2, 2, 3921, 3922, 7, 806, 2, 2, 3922, 3923, 7, 11, 2, 2, 3923, 3924,
	7, 787, 2, 2, 3924, 3926, 9, 8, 2, 2, 3925, 3921, 3, 2, 2, 2, 3925, 3926,
	3, 2, 2, 2, 3926, 339, 3, 2, 2, 2, 3927, 3928, 7, 72, 2, 2, 3928, 3929,
	7, 674, 2, 2, 3929, 3930, 7, 311, 2, 2, 3930, 3931, 7, 424, 2, 2, 3931,
	3934, 5, 940, 471, 2, 3932, 3933, 7, 19, 2, 2, 3933, 3935, 5, 940, 471,
	2, 3934, 3932, 3, 2, 2, 2, 3934, 3935, 3, 2, 2, 2, 3935, 3936, 3, 2, 2,
	2, 3936, 3937, 7, 348, 2, 2, 3937, 3938, 7, 311, 2, 2, 3938, 3939, 7, 783,
	2, 2, 3939, 3943, 7, 379, 2, 2, 3940, 3941, 7, 368, 2, 2, 3941, 3942, 7,
	787, 2, 2, 3942, 3944, 5, 940, 471, 2, 3943, 3940, 3, 2, 2, 2, 3943, 3944,
	3, 2, 2, 2, 3944, 3949, 3, 2, 2, 2, 3945, 3946, 7, 806, 2, 2, 3946, 3947,
	7, 11, 2, 2, 3947, 3948, 7, 787, 2, 2, 3948, 3950, 9, 8, 2, 2, 3949, 3945,
	3, 2, 2, 2, 3949, 3950, 3, 2, 2, 2, 3950, 341, 3, 2, 2, 2, 3951, 3952,
	7, 72, 2, 2, 3952, 3953, 7, 681, 2, 2, 3953, 3954, 7, 635, 2, 2, 3954,
	4057, 5, 940, 471, 2, 3955, 3956, 7, 379, 2, 2, 3956, 3963, 7, 804, 2,
	2, 3957, 3959, 7, 806, 2, 2, 3958, 3957, 3, 2, 2, 2, 3958, 3959, 3, 2,
	2, 2, 3959, 3960, 3, 2, 2, 2, 3960, 3961, 7, 573, 2, 2, 3961, 3962, 7,
	787, 2, 2, 3962, 3964, 7, 779, 2, 2, 3963, 3958, 3, 2, 2, 2, 3963, 3964,
	3, 2, 2, 2, 3964, 3971, 3, 2, 2, 2, 3965, 3967, 7, 806, 2, 2, 3966, 3965,
	3, 2, 2, 2, 3966, 3967, 3, 2, 2, 2, 3967, 3968, 3, 2, 2, 2, 3968, 3969,
	7, 572, 2, 2, 3969, 3970, 7, 787, 2, 2, 3970, 3972, 7, 779, 2, 2, 3971,
	3966, 3, 2, 2, 2, 3971, 3972, 3, 2, 2, 2, 3972, 3979, 3, 2, 2, 2, 3973,
	3975, 7, 806, 2, 2, 3974, 3973, 3, 2, 2, 2, 3974, 3975, 3, 2, 2, 2, 3975,
	3976, 3, 2, 2, 2, 3976, 3977, 7, 431, 2, 2, 3977, 3978, 7, 787, 2, 2, 3978,
	3980, 7, 779, 2, 2, 3979, 3974, 3, 2, 2, 2, 3979, 3980, 3, 2, 2, 2, 3980,
	4022, 3, 2, 2, 2, 3981, 3983, 7, 806, 2, 2, 3982, 3981, 3, 2, 2, 2, 3982,
	3983, 3, 2, 2, 2, 3983, 3984, 3, 2, 2, 2, 3984, 3985, 7, 393, 2, 2, 3985,
	3986, 7, 300, 2, 2, 3986, 4020, 7, 787, 2, 2, 3987, 4021, 7, 410, 2, 2,
	3988, 3998, 7, 804, 2, 2, 3989, 3991, 7, 806, 2, 2, 3990, 3989, 3, 2, 2,
	2, 3990, 3991, 3, 2, 2, 2, 3991, 3996, 3, 2, 2, 2, 3992, 3997, 7, 779,
	2, 2, 3993, 3994, 7, 779, 2, 2, 3994, 3995, 7, 348, 2, 2, 3995, 3997, 7,
	779, 2, 2, 3996, 3992, 3, 2, 2, 2, 3996, 3993, 3, 2, 2, 2, 3997, 3999,
	3, 2, 2, 2, 3998, 3990, 3, 2, 2, 2, 3999, 4000, 3, 2, 2, 2, 4000, 3998,
	3, 2, 2, 2, 4000, 4001, 3, 2, 2, 2, 4001, 4002, 3, 2, 2, 2, 4002, 4021,
	7, 805, 2, 2, 4003, 4004, 7, 614, 2, 2, 4004, 4005, 7, 787, 2, 2, 4005,
	4015, 7, 804, 2, 2, 4006, 4008, 7, 806, 2, 2, 4007, 4006, 3, 2, 2, 2, 4007,
	4008, 3, 2, 2, 2, 4008, 4013, 3, 2, 2, 2, 4009, 4014, 7, 779, 2, 2, 4010,
	4011, 7, 779, 2, 2, 4011, 4012, 7, 348, 2, 2, 4012, 4014, 7, 779, 2, 2,
	4013, 4009, 3, 2, 2, 2, 4013, 4010, 3, 2, 2, 2, 4014, 4016, 3, 2, 2, 2,
	4015, 4007, 3, 2, 2, 2, 4016, 4017, 3, 2, 2, 2, 4017, 4015, 3, 2, 2, 2,
	4017, 4018, 3, 2, 2, 2, 4018, 4019, 3, 2, 2, 2, 4019, 4021, 7, 805, 2,
	2, 4020, 3987, 3, 2, 2, 2, 4020, 3988, 3, 2, 2, 2, 4020, 4003, 3, 2, 2,
	2, 4021, 4023, 3, 2, 2, 2, 4022, 3982, 3, 2, 2, 2, 4022, 4023, 3, 2, 2,
	2, 4023, 4030, 3, 2, 2, 2, 4024, 4026, 7, 806, 2, 2, 4025, 4024, 3, 2,
	2, 2, 4025, 4026, 3, 2, 2, 2, 4026, 4027, 3, 2, 2, 2, 4027, 4028, 7, 578,
	2, 2, 4028, 4029, 7, 787, 2, 2, 4029, 4031, 7, 779, 2, 2, 4030, 4025, 3,
	2, 2, 2, 4030, 4031, 3, 2, 2, 2, 4031, 4038, 3, 2, 2, 2, 4032, 4034, 7,
	806, 2, 2, 4033, 4032, 3, 2, 2, 2, 4033, 4034, 3, 2, 2, 2, 4034, 4035,
	3, 2, 2, 2, 4035, 4036, 7, 577, 2, 2, 4036, 4037, 7, 787, 2, 2, 4037, 4039,
	7, 779, 2, 2, 4038, 4033, 3, 2, 2, 2, 4038, 4039, 3, 2, 2, 2, 4039, 4046,
	3, 2, 2, 2, 4040, 4042, 7, 806, 2, 2, 4041, 4040, 3, 2, 2, 2, 4041, 4042,
	3, 2, 2, 2, 4042, 4043, 3, 2, 2, 2, 4043, 4044, 7, 576, 2, 2, 4044, 4045,
	7, 787, 2, 2, 4045, 4047, 7, 779, 2, 2, 4046, 4041, 3, 2, 2, 2, 4046, 4047,
	3, 2, 2, 2, 4047, 4054, 3, 2, 2, 2, 4048, 4050, 7, 806, 2, 2, 4049, 4048,
	3, 2, 2, 2, 4049, 4050, 3, 2, 2, 2, 4050, 4051, 3, 2, 2, 2, 4051, 4052,
	7, 575, 2, 2, 4052, 4053, 7, 787, 2, 2, 4053, 4055, 7, 779, 2, 2, 4054,
	4049, 3, 2, 2, 2, 4054, 4055, 3, 2, 2, 2, 4055, 4056, 3, 2, 2, 2, 4056,
	4058, 7, 805, 2, 2, 4057, 3955, 3, 2, 2, 2, 4057, 4058, 3, 2, 2, 2, 4058,
	343, 3, 2, 2, 2, 4059, 4060, 7, 9, 2, 2, 4060, 4061, 7, 681, 2, 2, 4061,
	4083, 7, 144, 2, 2, 4062, 4084, 9, 35, 2, 2, 4063, 4064, 7, 379, 2, 2,
	4064, 4065, 7, 804, 2, 2, 4065, 4066, 7, 49, 2, 2, 4066, 4072, 7, 787,
	2, 2, 4067, 4068, 5, 940, 471, 2, 4068, 4069, 7, 799, 2, 2, 4069, 4070,
	5, 940, 471, 2, 4070, 4073, 3, 2, 2, 2, 4071, 4073, 7, 222, 2, 2, 4072,
	4067, 3, 2, 2, 2, 4072, 4071, 3, 2, 2, 2, 4073, 4074, 3, 2, 2, 2, 4074,
	4084, 7, 805, 2, 2, 4075, 4076, 7, 275, 2, 2, 4076, 4084, 7, 329, 2, 2,
	4077, 4078, 7, 379, 2, 2, 4078, 4079, 7, 804, 2, 2, 4079, 4080, 7, 195,
	2, 2, 4080, 4081, 7, 787, 2, 2, 4081, 4082, 7, 779, 2, 2, 4082, 4084, 7,
	805, 2, 2, 4083, 4062, 3, 2, 2, 2, 4083, 4063, 3, 2, 2, 2, 4083, 4075,
	3, 2, 2, 2, 4083, 4077, 3, 2, 2, 2, 4084, 345, 3, 2, 2, 2, 4085, 4086,
	7, 9, 2, 2, 4086, 4087, 7, 288, 2, 2, 4087, 4095, 5, 940, 471, 2, 4088,
	4089, 9, 20, 2, 2, 4089, 4090, 7, 198, 2, 2, 4090, 4096, 5, 940, 471, 2,
	4091, 4092, 7, 379, 2, 2, 4092, 4093, 7, 598, 2, 2, 4093, 4094, 7, 787,
	2, 2, 4094, 4096, 5, 940, 471, 2, 4095, 4088, 3, 2, 2, 2, 4095, 4091, 3,
	2, 2, 2, 4096, 347, 3, 2, 2, 2, 4097, 4098, 7, 72, 2, 2, 4098, 4099, 7,
	288, 2, 2, 4099, 4102, 5, 940, 471, 2, 4100, 4101, 7, 19, 2, 2, 4101, 4103,
	5, 940, 471, 2, 4102, 4100, 3, 2, 2, 2, 4102, 4103, 3, 2, 2, 2, 4103, 349,
	3, 2, 2, 2, 4104, 4105, 7, 72, 2, 2, 4105, 4106, 7, 687, 2, 2, 4106, 4109,
	5, 940, 471, 2, 4107, 4108, 7, 19, 2, 2, 4108, 4110, 5, 940, 471, 2, 4109,
	4107, 3, 2, 2, 2, 4109, 4110, 3, 2, 2, 2, 4110, 4111, 3, 2, 2, 2, 4111,
	4118, 7, 379, 2, 2, 4112, 4114, 7, 806, 2, 2, 4113, 4112, 3, 2, 2, 2, 4113,
	4114, 3, 2, 2, 2, 4114, 4115, 3, 2, 2, 2, 4115, 4116, 7, 313, 2, 2, 4116,
	4117, 7, 787, 2, 2, 4117, 4119, 7, 783, 2, 2, 4118, 4113, 3, 2, 2, 2, 4118,
	4119, 3, 2, 2, 2, 4119, 4126, 3, 2, 2, 2, 4120, 4122, 7, 806, 2, 2, 4121,
	4120, 3, 2, 2, 2, 4121, 4122, 3, 2, 2, 2, 4122, 4123, 3, 2, 2, 2, 4123,
	4124, 7, 427, 2, 2, 4124, 4125, 7, 787, 2, 2, 4125, 4127, 7, 783, 2, 2,
	4126, 4121, 3, 2, 2, 2, 4126, 4127, 3, 2, 2, 2, 4127, 4134, 3, 2, 2, 2,
	4128, 4130, 7, 806, 2, 2, 4129, 4128, 3, 2, 2, 2, 4129, 4130, 3, 2, 2,
	2, 4130, 4131, 3, 2, 2, 2, 4131, 4132, 7, 178, 2, 2, 4132, 4133, 7, 787,
	2, 2, 4133, 4135, 7, 779, 2, 2, 4134, 4129, 3, 2, 2, 2, 4134, 4135, 3,
	2, 2, 2, 4135, 4137, 3, 2, 2, 2, 4136, 4138, 7, 806, 2, 2, 4137, 4136,
	3, 2, 2, 2, 4137, 4138, 3, 2, 2, 2, 4138, 4139, 3, 2, 2, 2, 4139, 4140,
	7, 389, 2, 2, 4140, 4141, 7, 787, 2, 2, 4141, 4146, 9, 36, 2, 2, 4142,
	4143, 7, 806, 2, 2, 4143, 4144, 7, 592, 2, 2, 4144, 4145, 7, 787, 2, 2,
	4145, 4147, 9, 36, 2, 2, 4146, 4142, 3, 2, 2, 2, 4146, 4147, 3, 2, 2, 2,
	4147, 351, 3, 2, 2, 2, 4148, 4149, 7, 72, 2, 2, 4149, 4153, 7, 297, 2,
	2, 4150, 4151, 5, 940, 471, 2, 4151, 4152, 7, 799, 2, 2, 4152, 4154, 3,
	2, 2, 2, 4153, 4150, 3, 2, 2, 2, 4153, 4154, 3, 2, 2, 2, 4154, 4155, 3,
	2, 2, 2, 4155, 4156, 5, 940, 471, 2, 4156, 4157, 7, 15, 2, 2, 4157, 4158,
	5, 728, 365, 2, 4158, 353, 3, 2, 2, 2, 4159, 4160, 7, 9, 2, 2, 4160, 4161,
	7, 301, 2, 2, 4161, 4162, 5, 940, 471, 2, 4162, 4172, 7, 353, 2, 2, 4163,
	4169, 7, 617, 2, 2, 4164, 4169, 7, 752, 2, 2, 4165, 4166, 7, 769, 2, 2,
	4166, 4167, 7, 301, 2, 2, 4167, 4169, 7, 439, 2, 2, 4168, 4163, 3, 2, 2,
	2, 4168, 4164, 3, 2, 2, 2, 4168, 4165, 3, 2, 2, 2, 4169, 4170, 3, 2, 2,
	2, 4170, 4171, 7, 808, 2, 2, 4171, 4173, 7, 808, 2, 2, 4172, 4168, 3, 2,
	2, 2, 4172, 4173, 3, 2, 2, 2, 4173, 4174, 3, 2, 2, 2, 4174, 4177, 5, 940,
	471, 2, 4175, 4176, 7, 799, 2, 2, 4176, 4178, 5, 940, 471, 2, 4177, 4175,
	3, 2, 2, 2, 4177, 4178, 3, 2, 2, 2, 4178, 355, 3, 2, 2, 2, 4179, 4180,
	7, 72, 2, 2, 4180, 4188, 7, 301, 2, 2, 4181, 4189, 5, 940, 471, 2, 4182,
	4183, 7, 19, 2, 2, 4183, 4189, 5, 940, 471, 2, 4184, 4185, 5, 940, 471,
	2, 4185, 4186, 7, 19, 2, 2, 4186, 4187, 5, 940, 471, 2, 4187, 4189, 3,
	2, 2, 2, 4188, 4181, 3, 2, 2, 2, 4188, 4182, 3, 2, 2, 2, 4188, 4184, 3,
	2, 2, 2, 4189, 4218, 3, 2, 2, 2, 4190, 4217, 5, 490, 246, 2, 4191, 4217,
	5, 494, 248, 2, 4192, 4193, 9, 37, 2, 2, 4193, 4194, 9, 38, 2, 2, 4194,
	4198, 7, 228, 2, 2, 4195, 4196, 7, 301, 2, 2, 4196, 4197, 7, 808, 2, 2,
	4197, 4199, 7, 808, 2, 2, 4198, 4195, 3, 2, 2, 2, 4198, 4199, 3, 2, 2,
	2, 4199, 4200, 3, 2, 2, 2, 4200, 4201, 5, 940, 471, 2, 4201, 4202, 7, 348,
	2, 2, 4202, 4203, 5, 940, 471, 2, 4203, 4217, 3, 2, 2, 2, 4204, 4205, 7,
	284, 2, 2, 4205, 4206, 9, 38, 2, 2, 4206, 4210, 7, 228, 2, 2, 4207, 4208,
	7, 301, 2, 2, 4208, 4209, 7, 808, 2, 2, 4209, 4211, 7, 808, 2, 2, 4210,
	4207, 3, 2, 2, 2, 4210, 4211, 3, 2, 2, 2, 4211, 4212, 3, 2, 2, 2, 4212,
	4213, 5, 940, 471, 2, 4213, 4214, 7, 139, 2, 2, 4214, 4215, 5, 940, 471,
	2, 4215, 4217, 3, 2, 2, 2, 4216, 4190, 3, 2, 2, 2, 4216, 4191, 3, 2, 2,
	2, 4216, 4192, 3, 2, 2, 2, 4216, 4204, 3, 2, 2, 2, 4217, 4220, 3, 2, 2,
	2, 4218, 4216, 3, 2, 2, 2, 4218, 4219, 3, 2, 2, 2, 4219, 357, 3, 2, 2,
	2, 4220, 4218, 3, 2, 2, 2, 4221, 4222, 7, 72, 2, 2, 4222, 4223, 7, 301,
	2, 2, 4223, 4226, 5, 940, 471, 2, 4224, 4225, 7, 19, 2, 2, 4225, 4227,
	5, 940, 471, 2, 4226, 4224, 3, 2, 2, 2, 4226, 4227, 3, 2, 2, 2, 4227, 359,
	3, 2, 2, 2, 4228, 4229, 7, 9, 2, 2, 4229, 4230, 7, 301, 2, 2, 4230, 4231,
	5, 940, 471, 2, 4231, 4235, 7, 353, 2, 2, 4232, 4233, 7, 617, 2, 2, 4233,
	4234, 7, 808, 2, 2, 4234, 4236, 7, 808, 2, 2, 4235, 4232, 3, 2, 2, 2, 4235,
	4236, 3, 2, 2, 2, 4236, 4237, 3, 2, 2, 2, 4237, 4240, 5, 940, 471, 2, 4238,
	4239, 7, 799, 2, 2, 4239, 4241, 7, 780, 2, 2, 4240, 4238, 3, 2, 2, 2, 4240,
	4241, 3, 2, 2, 2, 4241, 361, 3, 2, 2, 2, 4242, 4243, 7, 72, 2, 2, 4243,
	4244, 7, 697, 2, 2, 4244, 4245, 7, 647, 2, 2, 4245, 4246, 7, 559, 2, 2,
	4246, 4254, 5, 940, 471, 2, 4247, 4251, 7, 139, 2, 2, 4248, 4249, 5, 940,
	471, 2, 4249, 4250, 7, 799, 2, 2, 4250, 4252, 3, 2, 2, 2, 4251, 4248, 3,
	2, 2, 2, 4251, 4252, 3, 2, 2, 2, 4252, 4253, 3, 2, 2, 2, 4253, 4255, 5,
	940, 471, 2, 4254, 4247, 3, 2, 2, 2, 4254, 4255, 3, 2, 2, 2, 4255, 4258,
	3, 2, 2, 2, 4256, 4257, 7, 19, 2, 2, 4257, 4259, 5, 940, 471, 2, 4258,
	4256, 3, 2, 2, 2, 4258, 4259, 3, 2, 2, 2, 4259, 363, 3, 2, 2, 2, 4260,
	4261, 7, 72, 2, 2, 4261, 4262, 7, 303, 2, 2, 4262, 4266, 7, 252, 2, 2,
	4263, 4264, 5, 940, 471, 2, 4264, 4265, 7, 799, 2, 2, 4265, 4267, 3, 2,
	2, 2, 4266, 4263, 3, 2, 2, 2, 4266, 4267, 3, 2, 2, 2, 4267, 4268, 3, 2,
	2, 2, 4268, 4309, 5, 940, 471, 2, 4269, 4271, 7, 806, 2, 2, 4270, 4269,
	3, 2, 2, 2, 4270, 4271, 3, 2, 2, 2, 4271, 4272, 3, 2, 2, 2, 4272, 4274,
	7, 3, 2, 2, 4273, 4275, 9, 39, 2, 2, 4274, 4273, 3, 2, 2, 2, 4274, 4275,
	3, 2, 2, 2, 4275, 4276, 3, 2, 2, 2, 4276, 4277, 7, 254, 2, 2, 4277, 4278,
	5, 940, 471, 2, 4278, 4279, 7, 799, 2, 2, 4279, 4280, 5, 940, 471, 2, 4280,
	4285, 7, 804, 2, 2, 4281, 4283, 7, 806, 2, 2, 4282, 4281, 3, 2, 2, 2, 4282,
	4283, 3, 2, 2, 2, 4283, 4284, 3, 2, 2, 2, 4284, 4286, 5, 940, 471, 2, 4285,
	4282, 3, 2, 2, 2, 4286, 4287, 3, 2, 2, 2, 4287, 4285, 3, 2, 2, 2, 4287,
	4288, 3, 2, 2, 2, 4288, 4289, 3, 2, 2, 2, 4289, 4290, 7, 805, 2, 2, 4290,
	4291, 7, 228, 2, 2, 4291, 4292, 5, 940, 471, 2, 4292, 4293, 7, 799, 2,
	2, 4293, 4306, 5, 940, 471, 2, 4294, 4296, 7, 806, 2, 2, 4295, 4294, 3,
	2, 2, 2, 4295, 4296, 3, 2, 2, 2, 4296, 4297, 3, 2, 2, 2, 4297, 4298, 7,
	394, 2, 2, 4298, 4305, 9, 40, 2, 2, 4299, 4301, 7, 806, 2, 2, 4300, 4299,
	3, 2, 2, 2, 4300, 4301, 3, 2, 2, 2, 4301, 4302, 3, 2, 2, 2, 4302, 4303,
	7, 26, 2, 2, 4303, 4305, 9, 41, 2, 2, 4304, 4295, 3, 2, 2, 2, 4304, 4300,
	3, 2, 2, 2, 4305, 4308, 3, 2, 2, 2, 4306, 4304, 3, 2, 2, 2, 4306, 4307,
	3, 2, 2, 2, 4307, 4310, 3, 2, 2, 2, 4308, 4306, 3, 2, 2, 2, 4309, 4270,
	3, 2, 2, 2, 4310, 4311, 3, 2, 2, 2, 4311, 4309, 3, 2, 2, 2, 4311, 4312,
	3, 2, 2, 2, 4312, 4323, 3, 2, 2, 2, 4313, 4314, 7, 379, 2, 2, 4314, 4315,
	7, 804, 2, 2, 4315, 4316, 7, 330, 2, 2, 4316, 4317, 7, 787, 2, 2, 4317,
	4320, 9, 8, 2, 2, 4318, 4319, 7, 693, 2, 2, 4319, 4321, 9, 8, 2, 2, 4320,
	4318, 3, 2, 2, 2, 4320, 4321, 3, 2, 2, 2, 4321, 4322, 3, 2, 2, 2, 4322,
	4324, 7, 805, 2, 2, 4323, 4313, 3, 2, 2, 2, 4323, 4324, 3, 2, 2, 2, 4324,
	4328, 3, 2, 2, 2, 4325, 4326, 7, 219, 2, 2, 4326, 4327, 7, 133, 2, 2, 4327,
	4329, 7, 273, 2, 2, 4328, 4325, 3, 2, 2, 2, 4328, 4329, 3, 2, 2, 2, 4329,
	365, 3, 2, 2, 2, 4330, 4331, 7, 9, 2, 2, 4331, 4335, 7, 309, 2, 2, 4332,
	4333, 5, 940, 471, 2, 4333, 4334, 7, 799, 2, 2, 4334, 4336, 3, 2, 2, 2,
	4335, 4332, 3, 2, 2, 2, 4335, 4336, 3, 2, 2, 2, 4336, 4337, 3, 2, 2, 2,
	4337, 4343, 5, 940, 471, 2, 4338, 4341, 7, 276, 2, 2, 4339, 4340, 7, 379,
	2, 2, 4340, 4342, 7, 779, 2, 2, 4341, 4339, 3, 2, 2, 2, 4341, 4342, 3,
	2, 2, 2, 4342, 4344, 3, 2, 2, 2, 4343, 4338, 3, 2, 2, 2, 4343, 4344, 3,
	2, 2, 2, 4344, 4348, 3, 2, 2, 2, 4345, 4346, 7, 156, 2, 2, 4346, 4347,
	7, 37, 2, 2, 4347, 4349, 7, 779, 2, 2, 4348, 4345, 3, 2, 2, 2, 4348, 4349,
	3, 2, 2, 2, 4349, 4354, 3, 2, 2, 2, 4350, 4351, 7, 203, 2, 2, 4351, 4355,
	7, 779, 2, 2, 4352, 4353, 7, 609, 2, 2, 4353, 4355, 7, 203, 2, 2, 4354,
	4350, 3, 2, 2, 2, 4354, 4352, 3, 2, 2, 2, 4354, 4355, 3, 2, 2, 2, 4355,
	4360, 3, 2, 2, 2, 4356, 4357, 7, 191, 2, 2, 4357, 4361, 7, 779, 2, 2, 4358,
	4359, 7, 609, 2, 2, 4359, 4361, 7, 191, 2, 2, 4360, 4356, 3, 2, 2, 2, 4360,
	4358, 3, 2, 2, 2, 4360, 4361, 3, 2, 2, 2, 4361, 4365, 3, 2, 2, 2, 4362,
	4366, 7, 80, 2, 2, 4363, 4364, 7, 609, 2, 2, 4364, 4366, 7, 80, 2, 2, 4365,
	4362, 3, 2, 2, 2, 4365, 4363, 3, 2, 2, 2, 4365, 4366, 3, 2, 2, 2, 4366,
	4371, 3, 2, 2, 2, 4367, 4368, 7, 38, 2, 2, 4368, 4372, 7, 779, 2, 2, 4369,
	4370, 7, 609, 2, 2, 4370, 4372, 7, 38, 2, 2, 4371, 4367, 3, 2, 2, 2, 4371,
	4369, 3, 2, 2, 2, 4371, 4372, 3, 2, 2, 2, 4372, 367, 3, 2, 2, 2, 4373,
	4374, 7, 72, 2, 2, 4374, 4378, 7, 309, 2, 2, 4375, 4376, 5, 940, 471, 2,
	4376, 4377, 7, 799, 2, 2, 4377, 4379, 3, 2, 2, 2, 4378, 4375, 3, 2, 2,
	2, 4378, 4379, 3, 2, 2, 2, 4379, 4380, 3, 2, 2, 2, 4380, 4383, 5, 940,
	471, 2, 4381, 4382, 7, 15, 2, 2, 4382, 4384, 5, 932, 467, 2, 4383, 4381,
	3, 2, 2, 2, 4383, 4384, 3, 2, 2, 2, 4384, 4388, 3, 2, 2, 2, 4385, 4386,
	7, 332, 2, 2, 4386, 4387, 7, 379, 2, 2, 4387, 4389, 7, 779, 2, 2, 4388,
	4385, 3, 2, 2, 2, 4388, 4389, 3, 2, 2, 2, 4389, 4396, 3, 2, 2, 2, 4390,
	4391, 7, 156, 2, 2, 4391, 4393, 7, 37, 2, 2, 4392, 4394, 7, 813, 2, 2,
	4393, 4392, 3, 2, 2, 2, 4393, 4394, 3, 2, 2, 2, 4394, 4395, 3, 2, 2, 2,
	4395, 4397, 7, 779, 2, 2, 4396, 4390, 3, 2, 2, 2, 4396, 4397, 3, 2, 2,
	2, 4397, 4404, 3, 2, 2, 2, 4398, 4400, 7, 203, 2, 2, 4399, 4401, 7, 779,
	2, 2, 4400, 4399, 3, 2, 2, 2, 4400, 4401, 3, 2, 2, 2, 4401, 4405, 3, 2,
	2, 2, 4402, 4403, 7, 609, 2, 2, 4403, 4405, 7, 203, 2, 2, 4404, 4398, 3,
	2, 2, 2, 4404, 4402, 3, 2, 2, 2, 4404, 4405, 3, 2, 2, 2, 4405, 4412, 3,
	2, 2, 2, 4406, 4408, 7, 191, 2, 2, 4407, 4409, 7, 779, 2, 2, 4408, 4407,
	3, 2, 2, 2, 4408, 4409, 3, 2, 2, 2, 4409, 4413, 3, 2, 2, 2, 4410, 4411,
	7, 609, 2, 2, 4411, 4413, 7, 191, 2, 2, 4412, 4406, 3, 2, 2, 2, 4412, 4410,
	3, 2, 2, 2, 4412, 4413, 3, 2, 2, 2, 4413, 4417, 3, 2, 2, 2, 4414, 4418,
	7, 80, 2, 2, 4415, 4416, 7, 609, 2, 2, 4416, 4418, 7, 80, 2, 2, 4417, 4414,
	3, 2, 2, 2, 4417, 4415, 3, 2, 2, 2, 4417, 4418, 3, 2, 2, 2, 4418, 4425,
	3, 2, 2, 2, 4419, 4421, 7, 38, 2, 2, 4420, 4422, 7, 779, 2, 2, 4421, 4420,
	3, 2, 2, 2, 4421, 4422, 3, 2, 2, 2, 4422, 4426, 3, 2, 2, 2, 4423, 4424,
	7, 609, 2, 2, 4424, 4426, 7, 38, 2, 2, 4425, 4419, 3, 2, 2, 2, 4425, 4423,
	3, 2, 2, 2, 4425, 4426, 3, 2, 2, 2, 4426, 369, 3, 2, 2, 2, 4427, 4428,
	7, 9, 2, 2, 4428, 4429, 7, 310, 2, 2, 4429, 4430, 7, 408, 2, 2, 4430, 4562,
	5, 940, 471, 2, 4431, 4476, 7, 348, 2, 2, 4432, 4433, 7, 129, 2, 2, 4433,
	4470, 7, 804, 2, 2, 4434, 4436, 7, 806, 2, 2, 4435, 4434, 3, 2, 2, 2, 4435,
	4436, 3, 2, 2, 2, 4436, 4437, 3, 2, 2, 2, 4437, 4438, 7, 508, 2, 2, 4438,
	4439, 7, 787, 2, 2, 4439, 4469, 7, 783, 2, 2, 4440, 4442, 7, 806, 2, 2,
	4441, 4440, 3, 2, 2, 2, 4441, 4442, 3, 2, 2, 2, 4442, 4443, 3, 2, 2, 2,
	4443, 4444, 7, 585, 2, 2, 4444, 4448, 7, 787, 2, 2, 4445, 4446, 7, 779,
	2, 2, 4446, 4449, 9, 42, 2, 2, 4447, 4449, 7, 757, 2, 2, 4448, 4445, 3,
	2, 2, 2, 4448, 4447, 3, 2, 2, 2, 4449, 4469, 3, 2, 2, 2, 4450, 4452, 7,
	806, 2, 2, 4451, 4450, 3, 2, 2, 2, 4451, 4452, 3, 2, 2, 2, 4452, 4453,
	3, 2, 2, 2, 4453, 4454, 7, 581, 2, 2, 4454, 4455, 7, 787, 2, 2, 4455, 4469,
	9, 43, 2, 2, 4456, 4458, 7, 806, 2, 2, 4457, 4456, 3, 2, 2, 2, 4457, 4458,
	3, 2, 2, 2, 4458, 4459, 3, 2, 2, 2, 4459, 4460, 7, 574, 2, 2, 4460, 4461,
	7, 787, 2, 2, 4461, 4469, 7, 779, 2, 2, 4462, 4464, 7, 806, 2, 2, 4463,
	4462, 3, 2, 2, 2, 4463, 4464, 3, 2, 2, 2, 4464, 4465, 3, 2, 2, 2, 4465,
	4466, 7, 680, 2, 2, 4466, 4467, 7, 787, 2, 2, 4467, 4469, 9, 8, 2, 2, 4468,
	4435, 3, 2, 2, 2, 4468, 4441, 3, 2, 2, 2, 4468, 4451, 3, 2, 2, 2, 4468,
	4457, 3, 2, 2, 2, 4468, 4463, 3, 2, 2, 2, 4469, 4472, 3, 2, 2, 2, 4470,
	4468, 3, 2, 2, 2, 4470, 4471, 3, 2, 2, 2, 4471, 4473, 3, 2, 2, 2, 4472,
	4470, 3, 2, 2, 2, 4473, 4477, 7, 805, 2, 2, 4474, 4477, 7, 404, 2, 2, 4475,
	4477, 7, 703, 2, 2, 4476, 4432, 3, 2, 2, 2, 4476, 4474, 3, 2, 2, 2, 4476,
	4475, 3, 2, 2, 2, 4477, 4479, 3, 2, 2, 2, 4478, 4431, 3, 2, 2, 2, 4478,
	4479, 3, 2, 2, 2, 4479, 4506, 3, 2, 2, 2, 4480, 4481, 7, 379, 2, 2, 4481,
	4502, 7, 804, 2, 2, 4482, 4484, 7, 806, 2, 2, 4483, 4482, 3, 2, 2, 2, 4483,
	4484, 3, 2, 2, 2, 4484, 4485, 3, 2, 2, 2, 4485, 4486, 7, 651, 2, 2, 4486,
	4487, 7, 787, 2, 2, 4487, 4501, 7, 779, 2, 2, 4488, 4490, 7, 806, 2, 2,
	4489, 4488, 3, 2, 2, 2, 4489, 4490, 3, 2, 2, 2, 4490, 4491, 3, 2, 2, 2,
	4491, 4492, 7, 229, 2, 2, 4492, 4493, 7, 787, 2, 2, 4493, 4501, 9, 44,
	2, 2, 4494, 4496, 7, 806, 2, 2, 4495, 4494, 3, 2, 2, 2, 4495, 4496, 3,
	2, 2, 2, 4496, 4497, 3, 2, 2, 2, 4497, 4498, 7, 330, 2, 2, 4498, 4499,
	7, 787, 2, 2, 4499, 4501, 9, 8, 2, 2, 4500, 4483, 3, 2, 2, 2, 4500, 4489,
	3, 2, 2, 2, 4500, 4495, 3, 2, 2, 2, 4501, 4504, 3, 2, 2, 2, 4502, 4500,
	3, 2, 2, 2, 4502, 4503, 3, 2, 2, 2, 4503, 4505, 3, 2, 2, 2, 4504, 4502,
	3, 2, 2, 2, 4505, 4507, 7, 805, 2, 2, 4506, 4480, 3, 2, 2, 2, 4506, 4507,
	3, 2, 2, 2, 4507, 4554, 3, 2, 2, 2, 4508, 4552, 7, 376, 2, 2, 4509, 4511,
	7, 806, 2, 2, 4510, 4509, 3, 2, 2, 2, 4510, 4511, 3, 2, 2, 2, 4511, 4513,
	3, 2, 2, 2, 4512, 4514, 7, 219, 2, 2, 4513, 4512, 3, 2, 2, 2, 4513, 4514,
	3, 2, 2, 2, 4514, 4515, 3, 2, 2, 2, 4515, 4527, 5, 940, 471, 2, 4516, 4528,
	7, 787, 2, 2, 4517, 4518, 7, 789, 2, 2, 4518, 4528, 7, 788, 2, 2, 4519,
	4520, 7, 790, 2, 2, 4520, 4528, 7, 787, 2, 2, 4521, 4528, 7, 788, 2, 2,
	4522, 4523, 7, 788, 2, 2, 4523, 4528, 7, 787, 2, 2, 4524, 4528, 7, 789,
	2, 2, 4525, 4526, 7, 789, 2, 2, 4526, 4528, 7, 787, 2, 2, 4527, 4516, 3,
	2, 2, 2, 4527, 4517, 3, 2, 2, 2, 4527, 4519, 3, 2, 2, 2, 4527, 4521, 3,
	2, 2, 2, 4527, 4522, 3, 2, 2, 2, 4527, 4524, 3, 2, 2, 2, 4527, 4525, 3,
	2, 2, 2, 4528, 4529, 3, 2, 2, 2, 4529, 4530, 9, 22, 2, 2, 4530, 4553, 3,
	2, 2, 2, 4531, 4533, 7, 806, 2, 2, 4532, 4531, 3, 2, 2, 2, 4532, 4533,
	3, 2, 2, 2, 4533, 4534, 3, 2, 2, 2, 4534, 4536, 9, 27, 2, 2, 4535, 4537,
	7, 219, 2, 2, 4536, 4535, 3, 2, 2, 2, 4536, 4537, 3, 2, 2, 2, 4537, 4549,
	3, 2, 2, 2, 4538, 4550, 7, 787, 2, 2, 4539, 4540, 7, 789, 2, 2, 4540, 4550,
	7, 788, 2, 2, 4541, 4542, 7, 790, 2, 2, 4542, 4550, 7, 787, 2, 2, 4543,
	4550, 7, 788, 2, 2, 4544, 4545, 7, 788, 2, 2, 4545, 4550, 7, 787, 2, 2,
	4546, 4550, 7, 789, 2, 2, 4547, 4548, 7, 789, 2, 2, 4548, 4550, 7, 787,
	2, 2, 4549, 4538, 3, 2, 2, 2, 4549, 4539, 3, 2, 2, 2, 4549, 4541, 3, 2,
	2, 2, 4549, 4543, 3, 2, 2, 2, 4549, 4544, 3, 2, 2, 2, 4549, 4546, 3, 2,
	2, 2, 4549, 4547, 3, 2, 2, 2, 4550, 4551, 3, 2, 2, 2, 4551, 4553, 9, 22,
	2, 2, 4552, 4510, 3, 2, 2, 2, 4552, 4532, 3, 2, 2, 2, 4553, 4555, 3, 2,
	2, 2, 4554, 4508, 3, 2, 2, 2, 4554, 4555, 3, 2, 2, 2, 4555, 4563, 3, 2,
	2, 2, 4556, 4557, 7, 670, 2, 2, 4557, 4563, 7, 376, 2, 2, 4558, 4559, 7,
	595, 2, 2, 4559, 4560, 7, 598, 2, 2, 4560, 4561, 7, 787, 2, 2, 4561, 4563,
	5, 940, 471, 2, 4562, 4478, 3, 2, 2, 2, 4562, 4556, 3, 2, 2, 2, 4562, 4558,
	3, 2, 2, 2, 4563, 371, 3, 2, 2, 2, 4564, 4565, 7, 72, 2, 2, 4565, 4566,
	7, 310, 2, 2, 4566, 4567, 7, 408, 2, 2, 4567, 4705, 5, 940, 471, 2, 4568,
	4613, 7, 348, 2, 2, 4569, 4570, 7, 129, 2, 2, 4570, 4607, 7, 804, 2, 2,
	4571, 4573, 7, 806, 2, 2, 4572, 4571, 3, 2, 2, 2, 4572, 4573, 3, 2, 2,
	2, 4573, 4574, 3, 2, 2, 2, 4574, 4575, 7, 508, 2, 2, 4575, 4576, 7, 787,
	2, 2, 4576, 4606, 7, 783, 2, 2, 4577, 4579, 7, 806, 2, 2, 4578, 4577, 3,
	2, 2, 2, 4578, 4579, 3, 2, 2, 2, 4579, 4580, 3, 2, 2, 2, 4580, 4581, 7,
	585, 2, 2, 4581, 4585, 7, 787, 2, 2, 4582, 4583, 7, 779, 2, 2, 4583, 4586,
	9, 42, 2, 2, 4584, 4586, 7, 757, 2, 2, 4585, 4582, 3, 2, 2, 2, 4585, 4584,
	3, 2, 2, 2, 4586, 4606, 3, 2, 2, 2, 4587, 4589, 7, 806, 2, 2, 4588, 4587,
	3, 2, 2, 2, 4588, 4589, 3, 2, 2, 2, 4589, 4590, 3, 2, 2, 2, 4590, 4591,
	7, 581, 2, 2, 4591, 4592, 7, 787, 2, 2, 4592, 4606, 9, 43, 2, 2, 4593,
	4595, 7, 806, 2, 2, 4594, 4593, 3, 2, 2, 2, 4594, 4595, 3, 2, 2, 2, 4595,
	4596, 3, 2, 2, 2, 4596, 4597, 7, 574, 2, 2, 4597, 4598, 7, 787, 2, 2, 4598,
	4606, 7, 779, 2, 2, 4599, 4601, 7, 806, 2, 2, 4600, 4599, 3, 2, 2, 2, 4600,
	4601, 3, 2, 2, 2, 4601, 4602, 3, 2, 2, 2, 4602, 4603, 7, 680, 2, 2, 4603,
	4604, 7, 787, 2, 2, 4604, 4606, 9, 8, 2, 2, 4605, 4572, 3, 2, 2, 2, 4605,
	4578, 3, 2, 2, 2, 4605, 4588, 3, 2, 2, 2, 4605, 4594, 3, 2, 2, 2, 4605,
	4600, 3, 2, 2, 2, 4606, 4609, 3, 2, 2, 2, 4607, 4605, 3, 2, 2, 2, 4607,
	4608, 3, 2, 2, 2, 4608, 4610, 3, 2, 2, 2, 4609, 4607, 3, 2, 2, 2, 4610,
	4614, 7, 805, 2, 2, 4611, 4614, 7, 404, 2, 2, 4612, 4614, 7, 703, 2, 2,
	4613, 4569, 3, 2, 2, 2, 4613, 4611, 3, 2, 2, 2, 4613, 4612, 3, 2, 2, 2,
	4614, 4616, 3, 2, 2, 2, 4615, 4568, 3, 2, 2, 2, 4615, 4616, 3, 2, 2, 2,
	4616, 4649, 3, 2, 2, 2, 4617, 4618, 7, 379, 2, 2, 4618, 4645, 7, 804, 2,
	2, 4619, 4621, 7, 806, 2, 2, 4620, 4619, 3, 2, 2, 2, 4620, 4621, 3, 2,
	2, 2, 4621, 4622, 3, 2, 2, 2, 4622, 4623, 7, 651, 2, 2, 4623, 4624, 7,
	787, 2, 2, 4624, 4644, 7, 779, 2, 2, 4625, 4627, 7, 806, 2, 2, 4626, 4625,
	3, 2, 2, 2, 4626, 4627, 3, 2, 2, 2, 4627, 4628, 3, 2, 2, 2, 4628, 4629,
	7, 229, 2, 2, 4629, 4630, 7, 787, 2, 2, 4630, 4644, 9, 44, 2, 2, 4631,
	4633, 7, 806, 2, 2, 4632, 4631, 3, 2, 2, 2, 4632, 4633, 3, 2, 2, 2, 4633,
	4634, 3, 2, 2, 2, 4634, 4635, 7, 330, 2, 2, 4635, 4636, 7, 787, 2, 2, 4636,
	4644, 9, 8, 2, 2, 4637, 4639, 7, 806, 2, 2, 4638, 4637, 3, 2, 2, 2, 4638,
	4639, 3, 2, 2, 2, 4639, 4640, 3, 2, 2, 2, 4640, 4641, 7, 409, 2, 2, 4641,
	4642, 7, 787, 2, 2, 4642, 4644, 5, 940, 471, 2, 4643, 4620, 3, 2, 2, 2,
	4643, 4626, 3, 2, 2, 2, 4643, 4632, 3, 2, 2, 2, 4643, 4638, 3, 2, 2, 2,
	4644, 4647, 3, 2, 2, 2, 4645, 4643, 3, 2, 2, 2, 4645, 4646, 3, 2, 2, 2,
	4646, 4648, 3, 2, 2, 2, 4647, 4645, 3, 2, 2, 2, 4648, 4650, 7, 805, 2,
	2, 4649, 4617, 3, 2, 2, 2, 4649, 4650, 3, 2, 2, 2, 4650, 4697, 3, 2, 2,
	2, 4651, 4695, 7, 376, 2, 2, 4652, 4654, 7, 806, 2, 2, 4653, 4652, 3, 2,
	2, 2, 4653, 4654, 3, 2, 2, 2, 4654, 4656, 3, 2, 2, 2, 4655, 4657, 7, 219,
	2, 2, 4656, 4655, 3, 2, 2, 2, 4656, 4657, 3, 2, 2, 2, 4657, 4658, 3, 2,
	2, 2, 4658, 4670, 5, 940, 471, 2, 4659, 4671, 7, 787, 2, 2, 4660, 4661,
	7, 789, 2, 2, 4661, 4671, 7, 788, 2, 2, 4662, 4663, 7, 790, 2, 2, 4663,
	4671, 7, 787, 2, 2, 4664, 4671, 7, 788, 2, 2, 4665, 4666, 7, 788, 2, 2,
	4666, 4671, 7, 787, 2, 2, 4667, 4671, 7, 789, 2, 2, 4668, 4669, 7, 789,
	2, 2, 4669, 4671, 7, 787, 2, 2, 4670, 4659, 3, 2, 2, 2, 4670, 4660, 3,
	2, 2, 2, 4670, 4662, 3, 2, 2, 2, 4670, 4664, 3, 2, 2, 2, 4670, 4665, 3,
	2, 2, 2, 4670, 4667, 3, 2, 2, 2, 4670, 4668, 3, 2, 2, 2, 4671, 4672, 3,
	2, 2, 2, 4672, 4673, 9, 22, 2, 2, 4673, 4696, 3, 2, 2, 2, 4674, 4676, 7,
	806, 2, 2, 4675, 4674, 3, 2, 2, 2, 4675, 4676, 3, 2, 2, 2, 4676, 4677,
	3, 2, 2, 2, 4677, 4679, 9, 27, 2, 2, 4678, 4680, 7, 219, 2, 2, 4679, 4678,
	3, 2, 2, 2, 4679, 4680, 3, 2, 2, 2, 4680, 4692, 3, 2, 2, 2, 4681, 4693,
	7, 787, 2, 2, 4682, 4683, 7, 789, 2, 2, 4683, 4693, 7, 788, 2, 2, 4684,
	4685, 7, 790, 2, 2, 4685, 4693, 7, 787, 2, 2, 4686, 4693, 7, 788, 2, 2,
	4687, 4688, 7, 788, 2, 2, 4688, 4693, 7, 787, 2, 2, 4689, 4693, 7, 789,
	2, 2, 4690, 4691, 7, 789, 2, 2, 4691, 4693, 7, 787, 2, 2, 4692, 4681, 3,
	2, 2, 2, 4692, 4682, 3, 2, 2, 2, 4692, 4684, 3, 2, 2, 2, 4692, 4686, 3,
	2, 2, 2, 4692, 4687, 3, 2, 2, 2, 4692, 4689, 3, 2, 2, 2, 4692, 4690, 3,
	2, 2, 2, 4693, 4694, 3, 2, 2, 2, 4694, 4696, 9, 22, 2, 2, 4695, 4653, 3,
	2, 2, 2, 4695, 4675, 3, 2, 2, 2, 4696, 4698, 3, 2, 2, 2, 4697, 4651, 3,
	2, 2, 2, 4697, 4698, 3, 2, 2, 2, 4698, 4706, 3, 2, 2, 2, 4699, 4700, 7,
	670, 2, 2, 4700, 4706, 7, 376, 2, 2, 4701, 4702, 7, 595, 2, 2, 4702, 4703,
	7, 598, 2, 2, 4703, 4704, 7, 787, 2, 2, 4704, 4706, 5, 940, 471, 2, 4705,
	4615, 3, 2, 2, 2, 4705, 4699, 3, 2, 2, 2, 4705, 4701, 3, 2, 2, 2, 4706,
	373, 3, 2, 2, 2, 4707, 4708, 7, 9, 2, 2, 4708, 4709, 7, 310, 2, 2, 4709,
	4710, 7, 408, 2, 2, 4710, 4711, 7, 324, 2, 2, 4711, 4716, 5, 940, 471,
	2, 4712, 4713, 7, 133, 2, 2, 4713, 4714, 7, 310, 2, 2, 4714, 4715, 7, 408,
	2, 2, 4715, 4717, 5, 940, 471, 2, 4716, 4712, 3, 2, 2, 2, 4716, 4717, 3,
	2, 2, 2, 4717, 4725, 3, 2, 2, 2, 4718, 4719, 9, 20, 2, 2, 4719, 4720, 7,
	804, 2, 2, 4720, 4721, 5, 940, 471, 2, 4721, 4722, 7, 805, 2, 2, 4722,
	4724, 3, 2, 2, 2, 4723, 4718, 3, 2, 2, 2, 4724, 4727, 3, 2, 2, 2, 4725,
	4723, 3, 2, 2, 2, 4725, 4726, 3, 2, 2, 2, 4726, 4734, 3, 2, 2, 2, 4727,
	4725, 3, 2, 2, 2, 4728, 4729, 7, 379, 2, 2, 4729, 4730, 7, 804, 2, 2, 4730,
	4731, 7, 330, 2, 2, 4731, 4732, 7, 787, 2, 2, 4732, 4733, 9, 8, 2, 2, 4733,
	4735, 7, 805, 2, 2, 4734, 4728, 3, 2, 2, 2, 4734, 4735, 3, 2, 2, 2, 4735,
	375, 3, 2, 2, 2, 4736, 4737, 7, 72, 2, 2, 4737, 4738, 7, 310, 2, 2, 4738,
	4739, 7, 408, 2, 2, 4739, 4740, 7, 324, 2, 2, 4740, 4745, 5, 940, 471,
	2, 4741, 4742, 7, 133, 2, 2, 4742, 4743, 7, 310, 2, 2, 4743, 4744, 7, 408,
	2, 2, 4744, 4746, 5, 940, 471, 2, 4745, 4741, 3, 2, 2, 2, 4745, 4746, 3,
	2, 2, 2, 4746, 4754, 3, 2, 2, 2, 4747, 4748, 7, 3, 2, 2, 4748, 4749, 7,
	804, 2, 2, 4749, 4750, 5, 940, 471, 2, 4750, 4751, 7, 805, 2, 2, 4751,
	4753, 3, 2, 2, 2, 4752, 4747, 3, 2, 2, 2, 4753, 4756, 3, 2, 2, 2, 4754,
	4752, 3, 2, 2, 2, 4754, 4755, 3, 2, 2, 2, 4755, 4763, 3, 2, 2, 2, 4756,
	4754, 3, 2, 2, 2, 4757, 4758, 7, 379, 2, 2, 4758, 4759, 7, 804, 2, 2, 4759,
	4760, 7, 330, 2, 2, 4760, 4761, 7, 787, 2, 2, 4761, 4762, 9, 8, 2, 2, 4762,
	4764, 7, 805, 2, 2, 4763, 4757, 3, 2, 2, 2, 4763, 4764, 3, 2, 2, 2, 4764,
	377, 3, 2, 2, 2, 4765, 4766, 7, 9, 2, 2, 4766, 4767, 7, 310, 2, 2, 4767,
	4768, 7, 59, 2, 2, 4768, 4874, 7, 316, 2, 2, 4769, 4770, 7, 259, 2, 2,
	4770, 4806, 7, 393, 2, 2, 4771, 4772, 7, 451, 2, 2, 4772, 4788, 7, 787,
	2, 2, 4773, 4789, 7, 410, 2, 2, 4774, 4776, 7, 806, 2, 2, 4775, 4774, 3,
	2, 2, 2, 4775, 4776, 3, 2, 2, 2, 4776, 4777, 3, 2, 2, 2, 4777, 4785, 7,
	779, 2, 2, 4778, 4780, 7, 806, 2, 2, 4779, 4778, 3, 2, 2, 2, 4779, 4780,
	3, 2, 2, 2, 4780, 4781, 3, 2, 2, 2, 4781, 4782, 7, 779, 2, 2, 4782, 4783,
	7, 348, 2, 2, 4783, 4785, 7, 779, 2, 2, 4784, 4775, 3, 2, 2, 2, 4784, 4779,
	3, 2, 2, 2, 4785, 4786, 3, 2, 2, 2, 4786, 4784, 3, 2, 2, 2, 4786, 4787,
	3, 2, 2, 2, 4787, 4789, 3, 2, 2, 2, 4788, 4773, 3, 2, 2, 2, 4788, 4784,
	3, 2, 2, 2, 4789, 4807, 3, 2, 2, 2, 4790, 4791, 7, 614, 2, 2, 4791, 4802,
	7, 787, 2, 2, 4792, 4794, 7, 806, 2, 2, 4793, 4792, 3, 2, 2, 2, 4793, 4794,
	3, 2, 2, 2, 4794, 4795, 3, 2, 2, 2, 4795, 4803, 7, 779, 2, 2, 4796, 4798,
	7, 806, 2, 2, 4797, 4796, 3, 2, 2, 2, 4797, 4798, 3, 2, 2, 2, 4798, 4799,
	3, 2, 2, 2, 4799, 4800, 7, 779, 2, 2, 4800, 4801, 7, 348, 2, 2, 4801, 4803,
	7, 779, 2, 2, 4802, 4793, 3, 2, 2, 2, 4802, 4797, 3, 2, 2, 2, 4803, 4804,
	3, 2, 2, 2, 4804, 4802, 3, 2, 2, 2, 4804, 4805, 3, 2, 2, 2, 4805, 4807,
	3, 2, 2, 2, 4806, 4771, 3, 2, 2, 2, 4806, 4790, 3, 2, 2, 2, 4807, 4875,
	3, 2, 2, 2, 4808, 4809, 7, 95, 2, 2, 4809, 4825, 7, 186, 2, 2, 4810, 4826,
	7, 228, 2, 2, 4811, 4826, 7, 225, 2, 2, 4812, 4813, 7, 634, 2, 2, 4813,
	4814, 7, 787, 2, 2, 4814, 4826, 9, 45, 2, 2, 4815, 4816, 7, 194, 2, 2,
	4816, 4820, 7, 787, 2, 2, 4817, 4818, 7, 779, 2, 2, 4818, 4821, 7, 588,
	2, 2, 4819, 4821, 7, 89, 2, 2, 4820, 4817, 3, 2, 2, 2, 4820, 4819, 3, 2,
	2, 2, 4821, 4826, 3, 2, 2, 2, 4822, 4823, 7, 574, 2, 2, 4823, 4824, 7,
	787, 2, 2, 4824, 4826, 9, 46, 2, 2, 4825, 4810, 3, 2, 2, 2, 4825, 4811,
	3, 2, 2, 2, 4825, 4812, 3, 2, 2, 2, 4825, 4815, 3, 2, 2, 2, 4825, 4822,
	3, 2, 2, 2, 4826, 4875, 3, 2, 2, 2, 4827, 4828, 7, 125, 2, 2, 4828, 4829,
	7, 51, 2, 2, 4829, 4847, 7, 647, 2, 2, 4830, 4831, 7, 371, 2, 2, 4831,
	4832, 7, 787, 2, 2, 4832, 4848, 9, 45, 2, 2, 4833, 4834, 7, 326, 2, 2,
	4834, 4835, 7, 787, 2, 2, 4835, 4848, 9, 45, 2, 2, 4836, 4837, 7, 327,
	2, 2, 4837, 4838, 7, 787, 2, 2, 4838, 4848, 9, 45, 2, 2, 4839, 4840, 7,
	328, 2, 2, 4840, 4848, 9, 45, 2, 2, 4841, 4842, 7, 126, 2, 2, 4842, 4843,
	7, 787, 2, 2, 4843, 4848, 9, 45, 2, 2, 4844, 4845, 7, 149, 2, 2, 4845,
	4846, 7, 787, 2, 2, 4846, 4848, 9, 46, 2, 2, 4847, 4830, 3, 2, 2, 2, 4847,
	4833, 3, 2, 2, 2, 4847, 4836, 3, 2, 2, 2, 4847, 4839, 3, 2, 2, 2, 4847,
	4841, 3, 2, 2, 2, 4847, 4844, 3, 2, 2, 2, 4848, 4875, 3, 2, 2, 2, 4849,
	4850, 7, 529, 2, 2, 4850, 4851, 7, 51, 2, 2, 4851, 4852, 7, 64, 2, 2, 4852,
	4853, 7, 787, 2, 2, 4853, 4875, 9, 47, 2, 2, 4854, 4855, 7, 34, 2, 2, 4855,
	4856, 7, 635, 2, 2, 4856, 4869, 7, 122, 2, 2, 4857, 4858, 7, 228, 2, 2,
	4858, 4859, 7, 804, 2, 2, 4859, 4860, 7, 130, 2, 2, 4860, 4861, 7, 787,
	2, 2, 4861, 4862, 7, 783, 2, 2, 4862, 4863, 7, 806, 2, 2, 4863, 4864, 7,
	715, 2, 2, 4864, 4865, 7, 787, 2, 2, 4865, 4866, 7, 779, 2, 2, 4866, 4867,
	9, 48, 2, 2, 4867, 4870, 7, 805, 2, 2, 4868, 4870, 7, 225, 2, 2, 4869,
	4857, 3, 2, 2, 2, 4869, 4868, 3, 2, 2, 2, 4870, 4875, 3, 2, 2, 2, 4871,
	4872, 7, 316, 2, 2, 4872, 4873, 7, 321, 2, 2, 4873, 4875, 9, 8, 2, 2, 4874,
	4769, 3, 2, 2, 2, 4874, 4808, 3, 2, 2, 2, 4874, 4827, 3, 2, 2, 2, 4874,
	4849, 3, 2, 2, 2, 4874, 4854, 3, 2, 2, 2, 4874, 4871, 3, 2, 2, 2, 4875,
	379, 3, 2, 2, 2, 4876, 4877, 7, 9, 2, 2, 4877, 4878, 7, 310, 2, 2, 4878,
	4879, 7, 288, 2, 2, 4879, 4887, 5, 940, 471, 2, 4880, 4881, 9, 20, 2, 2,
	4881, 4882, 7, 198, 2, 2, 4882, 4888, 5, 940, 471, 2, 4883, 4884, 7, 379,
	2, 2, 4884, 4885, 7, 598, 2, 2, 4885, 4886, 7, 787, 2, 2, 4886, 4888, 5,
	940, 471, 2, 4887, 4880, 3, 2, 2, 2, 4887, 4883, 3, 2, 2, 2, 4888, 381,
	3, 2, 2, 2, 4889, 4890, 7, 72, 2, 2, 4890, 4891, 7, 310, 2, 2, 4891, 4892,
	7, 288, 2, 2, 4892, 4895, 5, 940, 471, 2, 4893, 4894, 7, 19, 2, 2, 4894,
	4896, 5, 940, 471, 2, 4895, 4893, 3, 2, 2, 2, 4895, 4896, 3, 2, 2, 2, 4896,
	383, 3, 2, 2, 2, 4897, 4898, 7, 9, 2, 2, 4898, 4899, 7, 310, 2, 2, 4899,
	4900, 7, 288, 2, 2, 4900, 4901, 5, 940, 471, 2, 4901, 4902, 9, 20, 2, 2,
	4902, 4903, 7, 198, 2, 2, 4903, 4904, 5, 940, 471, 2, 4904, 385, 3, 2,
	2, 2, 4905, 4906, 7, 9, 2, 2, 4906, 4907, 7, 311, 2, 2, 4907, 4915, 5,
	940, 471, 2, 4908, 4909, 7, 228, 2, 2, 4909, 4910, 7, 650, 2, 2, 4910,
	4911, 5, 940, 471, 2, 4911, 4912, 7, 799, 2, 2, 4912, 4913, 3, 2, 2, 2,
	4913, 4914, 5, 940, 471, 2, 4914, 4916, 3, 2, 2, 2, 4915, 4908, 3, 2, 2,
	2, 4915, 4916, 3, 2, 2, 2, 4916, 4924, 3, 2, 2, 2, 4917, 4919, 7, 806,
	2, 2, 4918, 4917, 3, 2, 2, 2, 4918, 4919, 3, 2, 2, 2, 4919, 4920, 3, 2,
	2, 2, 4920, 4921, 9, 20, 2, 2, 4921, 4923, 5, 940, 471, 2, 4922, 4918,
	3, 2, 2, 2, 4923, 4926, 3, 2, 2, 2, 4924, 4922, 3, 2, 2, 2, 4924, 4925,
	3, 2, 2, 2, 4925, 387, 3, 2, 2, 2, 4926, 4924, 3, 2, 2, 2, 4927, 4928,
	7, 72, 2, 2, 4928, 4929, 7, 311, 2, 2, 4929, 4932, 5, 940, 471, 2, 4930,
	4931, 7, 19, 2, 2, 4931, 4933, 5, 940, 471, 2, 4932, 4930, 3, 2, 2, 2,
	4932, 4933, 3, 2, 2, 2, 4933, 4934, 3, 2, 2, 2, 4934, 4935, 7, 228, 2,
	2, 4935, 4939, 7, 650, 2, 2, 4936, 4937, 5, 940, 471, 2, 4937, 4938, 7,
	799, 2, 2, 4938, 4940, 3, 2, 2, 2, 4939, 4936, 3, 2, 2, 2, 4939, 4940,
	3, 2, 2, 2, 4940, 4941, 3, 2, 2, 2, 4941, 4955, 5, 940, 471, 2, 4942, 4950,
	7, 804, 2, 2, 4943, 4945, 7, 806, 2, 2, 4944, 4943, 3, 2, 2, 2, 4944, 4945,
	3, 2, 2, 2, 4945, 4948, 3, 2, 2, 2, 4946, 4949, 5, 940, 471, 2, 4947, 4949,
	7, 89, 2, 2, 4948, 4946, 3, 2, 2, 2, 4948, 4947, 3, 2, 2, 2, 4949, 4951,
	3, 2, 2, 2, 4950, 4944, 3, 2, 2, 2, 4951, 4952, 3, 2, 2, 2, 4952, 4950,
	3, 2, 2, 2, 4952, 4953, 3, 2, 2, 2, 4953, 4954, 3, 2, 2, 2, 4954, 4956,
	7, 805, 2, 2, 4955, 4942, 3, 2, 2, 2, 4955, 4956, 3, 2, 2, 2, 4956, 389,
	3, 2, 2, 2, 4957, 4958, 7, 9, 2, 2, 4958, 4959, 7, 311, 2, 2, 4959, 4960,
	7, 188, 2, 2, 4960, 4982, 7, 171, 2, 2, 4961, 4963, 7, 514, 2, 2, 4962,
	4961, 3, 2, 2, 2, 4962, 4963, 3, 2, 2, 2, 4963, 4964, 3, 2, 2, 2, 4964,
	4983, 7, 270, 2, 2, 4965, 4980, 7, 379, 2, 2, 4966, 4967, 7, 620, 2, 2,
	4967, 4968, 7, 787, 2, 2, 4968, 4969, 7, 783, 2, 2, 4969, 4970, 7, 806,
	2, 2, 4970, 4971, 7, 227, 2, 2, 4971, 4972, 7, 787, 2, 2, 4972, 4981, 7,
	783, 2, 2, 4973, 4974, 7, 600, 2, 2, 4974, 4975, 7, 787, 2, 2, 4975, 4976,
	7, 783, 2, 2, 4976, 4977, 7, 806, 2, 2, 4977, 4978, 7, 602, 2, 2, 4978,
	4979, 7, 787, 2, 2, 4979, 4981, 7, 783, 2, 2, 4980, 4966, 3, 2, 2, 2, 4980,
	4973, 3, 2, 2, 2, 4980, 4981, 3, 2, 2, 2, 4981, 4983, 3, 2, 2, 2, 4982,
	4962, 3, 2, 2, 2, 4982, 4965, 3, 2, 2, 2, 4983, 391, 3, 2, 2, 2, 4984,
	4985, 7, 9, 2, 2, 4985, 4986, 7, 731, 2, 2, 4986, 4987, 7, 171, 2, 2, 4987,
	4988, 5, 940, 471, 2, 4988, 4989, 9, 20, 2, 2, 4989, 4990, 7, 492, 2, 2,
	4990, 5002, 7, 37, 2, 2, 4991, 4992, 7, 42, 2, 2, 4992, 5003, 5, 940, 471,
	2, 4993, 4994, 7, 243, 2, 2, 4994, 4995, 7, 787, 2, 2, 4995, 5003, 7, 783,
	2, 2, 4996, 4997, 7, 731, 2, 2, 4997, 4998, 7, 171, 2, 2, 4998, 5003, 5,
	940, 471, 2, 4999, 5000, 7, 17, 2, 2, 5000, 5001, 7, 171, 2, 2, 5001, 5003,
	5, 940, 471, 2, 5002, 4991, 3, 2, 2, 2, 5002, 4993, 3, 2, 2, 2, 5002, 4996,
	3, 2, 2, 2, 5002, 4999, 3, 2, 2, 2, 5003, 393, 3, 2, 2, 2, 5004, 5005,
	7, 9, 2, 2, 5005, 5006, 7, 731, 2, 2, 5006, 5007, 7, 171, 2, 2, 5007, 5010,
	5, 940, 471, 2, 5008, 5009, 7, 19, 2, 2, 5009, 5011, 5, 940, 471, 2, 5010,
	5008, 3, 2, 2, 2, 5010, 5011, 3, 2, 2, 2, 5011, 5015, 3, 2, 2, 2, 5012,
	5013, 7, 139, 2, 2, 5013, 5014, 7, 648, 2, 2, 5014, 5016, 5, 940, 471,
	2, 5015, 5012, 3, 2, 2, 2, 5015, 5016, 3, 2, 2, 2, 5016, 5017, 3, 2, 2,
	2, 5017, 5050, 7, 379, 2, 2, 5018, 5019, 7, 553, 2, 2, 5019, 5020, 7, 787,
	2, 2, 5020, 5034, 7, 783, 2, 2, 5021, 5022, 7, 396, 2, 2, 5022, 5023, 7,
	787, 2, 2, 5023, 5034, 9, 49, 2, 2, 5024, 5025, 7, 535, 2, 2, 5025, 5026,
	7, 787, 2, 2, 5026, 5034, 7, 783, 2, 2, 5027, 5028, 7, 649, 2, 2, 5028,
	5029, 7, 787, 2, 2, 5029, 5034, 7, 783, 2, 2, 5030, 5031, 7, 453, 2, 2,
	5031, 5032, 7, 787, 2, 2, 5032, 5034, 9, 11, 2, 2, 5033, 5018, 3, 2, 2,
	2, 5033, 5021, 3, 2, 2, 2, 5033, 5024, 3, 2, 2, 2, 5033, 5027, 3, 2, 2,
	2, 5033, 5030, 3, 2, 2, 2, 5034, 5051, 3, 2, 2, 2, 5035, 5036, 7, 492,
	2, 2, 5036, 5048, 7, 37, 2, 2, 5037, 5038, 7, 42, 2, 2, 5038, 5049, 5,
	940, 471, 2, 5039, 5040, 7, 243, 2, 2, 5040, 5041, 7, 787, 2, 2, 5041,
	5049, 7, 783, 2, 2, 5042, 5043, 7, 731, 2, 2, 5043, 5044, 7, 171, 2, 2,
	5044, 5049, 5, 940, 471, 2, 5045, 5046, 7, 17, 2, 2, 5046, 5047, 7, 171,
	2, 2, 5047, 5049, 5, 940, 471, 2, 5048, 5037, 3, 2, 2, 2, 5048, 5039, 3,
	2, 2, 2, 5048, 5042, 3, 2, 2, 2, 5048, 5045, 3, 2, 2, 2, 5049, 5051, 3,
	2, 2, 2, 5050, 5033, 3, 2, 2, 2, 5050, 5035, 3, 2, 2, 2, 5051, 395, 3,
	2, 2, 2, 5052, 5053, 7, 72, 2, 2, 5053, 5057, 7, 733, 2, 2, 5054, 5055,
	5, 940, 471, 2, 5055, 5056, 7, 799, 2, 2, 5056, 5058, 3, 2, 2, 2, 5057,
	5054, 3, 2, 2, 2, 5057, 5058, 3, 2, 2, 2, 5058, 5059, 3, 2, 2, 2, 5059,
	5060, 5, 940, 471, 2, 5060, 5087, 7, 133, 2, 2, 5061, 5062, 5, 940, 471,
	2, 5062, 5063, 7, 799, 2, 2, 5063, 5065, 3, 2, 2, 2, 5064, 5061, 3, 2,
	2, 2, 5064, 5065, 3, 2, 2, 2, 5065, 5069, 3, 2, 2, 2, 5066, 5067, 5, 940,
	471, 2, 5067, 5068, 7, 799, 2, 2, 5068, 5070, 3, 2, 2, 2, 5069, 5066, 3,
	2, 2, 2, 5069, 5070, 3, 2, 2, 2, 5070, 5074, 3, 2, 2, 2, 5071, 5072, 5,
	940, 471, 2, 5072, 5073, 7, 799, 2, 2, 5073, 5075, 3, 2, 2, 2, 5074, 5071,
	3, 2, 2, 2, 5074, 5075, 3, 2, 2, 2, 5075, 5076, 3, 2, 2, 2, 5076, 5088,
	5, 940, 471, 2, 5077, 5078, 5, 940, 471, 2, 5078, 5079, 7, 799, 2, 2, 5079,
	5081, 3, 2, 2, 2, 5080, 5077, 3, 2, 2, 2, 5080, 5081, 3, 2, 2, 2, 5081,
	5085, 3, 2, 2, 2, 5082, 5083, 5, 940, 471, 2, 5083, 5084, 7, 799, 2, 2,
	5084, 5086, 3, 2, 2, 2, 5085, 5082, 3, 2, 2, 2, 5085, 5086, 3, 2, 2, 2,
	5086, 5088, 3, 2, 2, 2, 5087, 5064, 3, 2, 2, 2, 5087, 5080, 3, 2, 2, 2,
	5088, 397, 3, 2, 2, 2, 5089, 5090, 7, 9, 2, 2, 5090, 5091, 7, 368, 2, 2,
	5091, 5092, 5, 940, 471, 2, 5092, 5143, 7, 379, 2, 2, 5093, 5095, 7, 806,
	2, 2, 5094, 5093, 3, 2, 2, 2, 5094, 5095, 3, 2, 2, 2, 5095, 5096, 3, 2,
	2, 2, 5096, 5097, 7, 598, 2, 2, 5097, 5098, 7, 787, 2, 2, 5098, 5144, 5,
	940, 471, 2, 5099, 5101, 7, 806, 2, 2, 5100, 5099, 3, 2, 2, 2, 5100, 5101,
	3, 2, 2, 2, 5101, 5102, 3, 2, 2, 2, 5102, 5103, 7, 91, 2, 2, 5103, 5106,
	7, 787, 2, 2, 5104, 5107, 5, 940, 471, 2, 5105, 5107, 7, 222, 2, 2, 5106,
	5104, 3, 2, 2, 2, 5106, 5105, 3, 2, 2, 2, 5107, 5144, 3, 2, 2, 2, 5108,
	5110, 7, 806, 2, 2, 5109, 5108, 3, 2, 2, 2, 5109, 5110, 3, 2, 2, 2, 5110,
	5111, 3, 2, 2, 2, 5111, 5112, 7, 566, 2, 2, 5112, 5113, 7, 787, 2, 2, 5113,
	5144, 5, 940, 471, 2, 5114, 5116, 7, 806, 2, 2, 5115, 5114, 3, 2, 2, 2,
	5115, 5116, 3, 2, 2, 2, 5116, 5117, 3, 2, 2, 2, 5117, 5118, 7, 243, 2,
	2, 5118, 5119, 7, 787, 2, 2, 5119, 5123, 7, 783, 2, 2, 5120, 5121, 7, 227,
	2, 2, 5121, 5122, 7, 787, 2, 2, 5122, 5124, 7, 783, 2, 2, 5123, 5120, 3,
	2, 2, 2, 5124, 5125, 3, 2, 2, 2, 5125, 5123, 3, 2, 2, 2, 5125, 5126, 3,
	2, 2, 2, 5126, 5144, 3, 2, 2, 2, 5127, 5129, 7, 806, 2, 2, 5128, 5127,
	3, 2, 2, 2, 5128, 5129, 3, 2, 2, 2, 5129, 5130, 3, 2, 2, 2, 5130, 5131,
	7, 469, 2, 2, 5131, 5135, 7, 787, 2, 2, 5132, 5136, 7, 212, 2, 2, 5133,
	5136, 7, 779, 2, 2, 5134, 5136, 5, 940, 471, 2, 5135, 5132, 3, 2, 2, 2,
	5135, 5133, 3, 2, 2, 2, 5135, 5134, 3, 2, 2, 2, 5136, 5144, 3, 2, 2, 2,
	5137, 5139, 7, 806, 2, 2, 5138, 5137, 3, 2, 2, 2, 5138, 5139, 3, 2, 2,
	2, 5139, 5140, 3, 2, 2, 2, 5140, 5141, 7, 398, 2, 2, 5141, 5142, 7, 787,
	2, 2, 5142, 5144, 9, 8, 2, 2, 5143, 5094, 3, 2, 2, 2, 5143, 5100, 3, 2,
	2, 2, 5143, 5109, 3, 2, 2, 2, 5143, 5115, 3, 2, 2, 2, 5143, 5128, 3, 2,
	2, 2, 5143, 5138, 3, 2, 2, 2, 5144, 5145, 3, 2, 2, 2, 5145, 5143, 3, 2,
	2, 2, 5145, 5146, 3, 2, 2, 2, 5146, 399, 3, 2, 2, 2, 5147, 5148, 7, 72,
	2, 2, 5148, 5149, 7, 368, 2, 2, 5149, 5153, 5, 940, 471, 2, 5150, 5151,
	9, 50, 2, 2, 5151, 5152, 7, 566, 2, 2, 5152, 5154, 5, 940, 471, 2, 5153,
	5150, 3, 2, 2, 2, 5153, 5154, 3, 2, 2, 2, 5154, 5173, 3, 2, 2, 2, 5155,
	5170, 7, 379, 2, 2, 5156, 5158, 7, 806, 2, 2, 5157, 5156, 3, 2, 2, 2, 5157,
	5158, 3, 2, 2, 2, 5158, 5159, 3, 2, 2, 2, 5159, 5160, 7, 91, 2, 2, 5160,
	5161, 7, 787, 2, 2, 5161, 5169, 5, 940, 471, 2, 5162, 5164, 7, 806, 2,
	2, 5163, 5162, 3, 2, 2, 2, 5163, 5164, 3, 2, 2, 2, 5164, 5165, 3, 2, 2,
	2, 5165, 5166, 7, 398, 2, 2, 5166, 5167, 7, 787, 2, 2, 5167, 5169, 9, 8,
	2, 2, 5168, 5157, 3, 2, 2, 2, 5168, 5163, 3, 2, 2, 2, 5169, 5172, 3, 2,
	2, 2, 5170, 5168, 3, 2, 2, 2, 5170, 5171, 3, 2, 2, 2, 5171, 5174, 3, 2,
	2, 2, 5172, 5170, 3, 2, 2, 2, 5173, 5155, 3, 2, 2, 2, 5173, 5174, 3, 2,
	2, 2, 5174, 5294, 3, 2, 2, 2, 5175, 5176, 7, 72, 2, 2, 5176, 5257, 7, 368,
	2, 2, 5177, 5212, 5, 940, 471, 2, 5178, 5209, 7, 379, 2, 2, 5179, 5181,
	7, 806, 2, 2, 5180, 5179, 3, 2, 2, 2, 5180, 5181, 3, 2, 2, 2, 5181, 5182,
	3, 2, 2, 2, 5182, 5183, 7, 91, 2, 2, 5183, 5184, 7, 787, 2, 2, 5184, 5208,
	5, 940, 471, 2, 5185, 5187, 7, 806, 2, 2, 5186, 5185, 3, 2, 2, 2, 5186,
	5187, 3, 2, 2, 2, 5187, 5188, 3, 2, 2, 2, 5188, 5189, 7, 469, 2, 2, 5189,
	5193, 7, 787, 2, 2, 5190, 5194, 7, 212, 2, 2, 5191, 5194, 7, 779, 2, 2,
	5192, 5194, 5, 940, 471, 2, 5193, 5190, 3, 2, 2, 2, 5193, 5191, 3, 2, 2,
	2, 5193, 5192, 3, 2, 2, 2, 5194, 5208, 3, 2, 2, 2, 5195, 5197, 7, 806,
	2, 2, 5196, 5195, 3, 2, 2, 2, 5196, 5197, 3, 2, 2, 2, 5197, 5198, 3, 2,
	2, 2, 5198, 5199, 7, 319, 2, 2, 5199, 5200, 7, 787, 2, 2, 5200, 5208, 7,
	784, 2, 2, 5201, 5203, 7, 806, 2, 2, 5202, 5201, 3, 2, 2, 2, 5202, 5203,
	3, 2, 2, 2, 5203, 5204, 3, 2, 2, 2, 5204, 5205, 7, 398, 2, 2, 5205, 5206,
	7, 787, 2, 2, 5206, 5208, 9, 8, 2, 2, 5207, 5180, 3, 2, 2, 2, 5207, 5186,
	3, 2, 2, 2, 5207, 5196, 3, 2, 2, 2, 5207, 5202, 3, 2, 2, 2, 5208, 5211,
	3, 2, 2, 2, 5209, 5207, 3, 2, 2, 2, 5209, 5210, 3, 2, 2, 2, 5210, 5213,
	3, 2, 2, 2, 5211, 5209, 3, 2, 2, 2, 5212, 5178, 3, 2, 2, 2, 5212, 5213,
	3, 2, 2, 2, 5213, 5258, 3, 2, 2, 2, 5214, 5215, 5, 940, 471, 2, 5215, 5216,
	7, 379, 2, 2, 5216, 5217, 7, 243, 2, 2, 5217, 5218, 7, 787, 2, 2, 5218,
	5249, 7, 783, 2, 2, 5219, 5221, 7, 806, 2, 2, 5220, 5219, 3, 2, 2, 2, 5220,
	5221, 3, 2, 2, 2, 5221, 5222, 3, 2, 2, 2, 5222, 5223, 7, 91, 2, 2, 5223,
	5224, 7, 787, 2, 2, 5224, 5248, 5, 940, 471, 2, 5225, 5227, 7, 806, 2,
	2, 5226, 5225, 3, 2, 2, 2, 5226, 5227, 3, 2, 2, 2, 5227, 5228, 3, 2, 2,
	2, 5228, 5229, 7, 469, 2, 2, 5229, 5233, 7, 787, 2, 2, 5230, 5234, 7, 212,
	2, 2, 5231, 5234, 7, 779, 2, 2, 5232, 5234, 5, 940, 471, 2, 5233, 5230,
	3, 2, 2, 2, 5233, 5231, 3, 2, 2, 2, 5233, 5232, 3, 2, 2, 2, 5234, 5248,
	3, 2, 2, 2, 5235, 5237, 7, 806, 2, 2, 5236, 5235, 3, 2, 2, 2, 5236, 5237,
	3, 2, 2, 2, 5237, 5238, 3, 2, 2, 2, 5238, 5239, 7, 319, 2, 2, 5239, 5240,
	7, 787, 2, 2, 5240, 5248, 7, 784, 2, 2, 5241, 5243, 7, 806, 2, 2, 5242,
	5241, 3, 2, 2, 2, 5242, 5243, 3, 2, 2, 2, 5243, 5244, 3, 2, 2, 2, 5244,
	5245, 7, 398, 2, 2, 5245, 5246, 7, 787, 2, 2, 5246, 5248, 9, 8, 2, 2, 5247,
	5220, 3, 2, 2, 2, 5247, 5226, 3, 2, 2, 2, 5247, 5236, 3, 2, 2, 2, 5247,
	5242, 3, 2, 2, 2, 5248, 5251, 3, 2, 2, 2, 5249, 5247, 3, 2, 2, 2, 5249,
	5250, 3, 2, 2, 2, 5250, 5258, 3, 2, 2, 2, 5251, 5249, 3, 2, 2, 2, 5252,
	5253, 5, 940, 471, 2, 5253, 5254, 7, 139, 2, 2, 5254, 5255, 7, 123, 2,
	2, 5255, 5256, 7, 648, 2, 2, 5256, 5258, 3, 2, 2, 2, 5257, 5177, 3, 2,
	2, 2, 5257, 5214, 3, 2, 2, 2, 5257, 5252, 3, 2, 2, 2, 5258, 5294, 3, 2,
	2, 2, 5259, 5260, 7, 72, 2, 2, 5260, 5261, 7, 368, 2, 2, 5261, 5288, 5,
	940, 471, 2, 5262, 5263, 7, 381, 2, 2, 5263, 5278, 7, 566, 2, 2, 5264,
	5266, 7, 806, 2, 2, 5265, 5264, 3, 2, 2, 2, 5265, 5266, 3, 2, 2, 2, 5266,
	5267, 3, 2, 2, 2, 5267, 5268, 7, 91, 2, 2, 5268, 5269, 7, 787, 2, 2, 5269,
	5277, 5, 940, 471, 2, 5270, 5272, 7, 806, 2, 2, 5271, 5270, 3, 2, 2, 2,
	5271, 5272, 3, 2, 2, 2, 5272, 5273, 3, 2, 2, 2, 5273, 5274, 7, 398, 2,
	2, 5274, 5275, 7, 787, 2, 2, 5275, 5277, 9, 8, 2, 2, 5276, 5265, 3, 2,
	2, 2, 5276, 5271, 3, 2, 2, 2, 5277, 5280, 3, 2, 2, 2, 5278, 5276, 3, 2,
	2, 2, 5278, 5279, 3, 2, 2, 2, 5279, 5289, 3, 2, 2, 2, 5280, 5278, 3, 2,
	2, 2, 5281, 5282, 9, 50, 2, 2, 5282, 5283, 7, 42, 2, 2, 5283, 5289, 5,
	940, 471, 2, 5284, 5285, 9, 50, 2, 2, 5285, 5286, 7, 17, 2, 2, 5286, 5287,
	7, 171, 2, 2, 5287, 5289, 5, 940, 471, 2, 5288, 5262, 3, 2, 2, 2, 5288,
	5281, 3, 2, 2, 2, 5288, 5284, 3, 2, 2, 2, 5289, 5294, 3, 2, 2, 2, 5290,
	5291, 7, 72, 2, 2, 5291, 5292, 7, 368, 2, 2, 5292, 5294, 5, 940, 471, 2,
	5293, 5147, 3, 2, 2, 2, 5293, 5175, 3, 2, 2, 2, 5293, 5259, 3, 2, 2, 2,
	5293, 5290, 3, 2, 2, 2, 5294, 401, 3, 2, 2, 2, 5295, 5296, 7, 72, 2, 2,
	5296, 5297, 7, 368, 2, 2, 5297, 5303, 5, 940, 471, 2, 5298, 5299, 9, 50,
	2, 2, 5299, 5300, 7, 566, 2, 2, 5300, 5304, 5, 940, 471, 2, 5301, 5302,
	7, 381, 2, 2, 5302, 5304, 7, 566, 2, 2, 5303, 5298, 3, 2, 2, 2, 5303, 5301,
	3, 2, 2, 2, 5303, 5304, 3, 2, 2, 2, 5304, 5309, 3, 2, 2, 2, 5305, 5306,
	7, 379, 2, 2, 5306, 5307, 7, 91, 2, 2, 5307, 5308, 7, 787, 2, 2, 5308,
	5310, 5, 940, 471, 2, 5309, 5305, 3, 2, 2, 2, 5309, 5310, 3, 2, 2, 2, 5310,
	5324, 3, 2, 2, 2, 5311, 5312, 7, 72, 2, 2, 5312, 5313, 7, 368, 2, 2, 5313,
	5314, 5, 940, 471, 2, 5314, 5315, 7, 139, 2, 2, 5315, 5316, 7, 123, 2,
	2, 5316, 5321, 7, 648, 2, 2, 5317, 5318, 7, 379, 2, 2, 5318, 5319, 7, 91,
	2, 2, 5319, 5320, 7, 787, 2, 2, 5320, 5322, 5, 940, 471, 2, 5321, 5317,
	3, 2, 2, 2, 5321, 5322, 3, 2, 2, 2, 5322, 5324, 3, 2, 2, 2, 5323, 5295,
	3, 2, 2, 2, 5323, 5311, 3, 2, 2, 2, 5324, 403, 3, 2, 2, 2, 5325, 5326,
	7, 9, 2, 2, 5326, 5327, 7, 368, 2, 2, 5327, 5328, 5, 940, 471, 2, 5328,
	5353, 7, 379, 2, 2, 5329, 5331, 7, 806, 2, 2, 5330, 5329, 3, 2, 2, 2, 5330,
	5331, 3, 2, 2, 2, 5331, 5332, 3, 2, 2, 2, 5332, 5333, 7, 598, 2, 2, 5333,
	5334, 7, 787, 2, 2, 5334, 5354, 5, 940, 471, 2, 5335, 5337, 7, 806, 2,
	2, 5336, 5335, 3, 2, 2, 2, 5336, 5337, 3, 2, 2, 2, 5337, 5338, 3, 2, 2,
	2, 5338, 5339, 7, 91, 2, 2, 5339, 5340, 7, 787, 2, 2, 5340, 5354, 5, 940,
	471, 2, 5341, 5343, 7, 806, 2, 2, 5342, 5341, 3, 2, 2, 2, 5342, 5343, 3,
	2, 2, 2, 5343, 5344, 3, 2, 2, 2, 5344, 5345, 7, 566, 2, 2, 5345, 5346,
	7, 787, 2, 2, 5346, 5354, 5, 940, 471, 2, 5347, 5349, 7, 806, 2, 2, 5348,
	5347, 3, 2, 2, 2, 5348, 5349, 3, 2, 2, 2, 5349, 5350, 3, 2, 2, 2, 5350,
	5351, 7, 398, 2, 2, 5351, 5352, 7, 787, 2, 2, 5352, 5354, 9, 8, 2, 2, 5353,
	5330, 3, 2, 2, 2, 5353, 5336, 3, 2, 2, 2, 5353, 5342, 3, 2, 2, 2, 5353,
	5348, 3, 2, 2, 2, 5354, 5355, 3, 2, 2, 2, 5355, 5353, 3, 2, 2, 2, 5355,
	5356, 3, 2, 2, 2, 5356, 405, 3, 2, 2, 2, 5357, 5358, 7, 9, 2, 2, 5358,
	5359, 7, 768, 2, 2, 5359, 5362, 7, 146, 2, 2, 5360, 5363, 5, 940, 471,
	2, 5361, 5363, 7, 467, 2, 2, 5362, 5360, 3, 2, 2, 2, 5362, 5361, 3, 2,
	2, 2, 5363, 5395, 3, 2, 2, 2, 5364, 5365, 7, 379, 2, 2, 5365, 5390, 7,
	804, 2, 2, 5366, 5367, 7, 539, 2, 2, 5367, 5368, 7, 787, 2, 2, 5368, 5391,
	9, 51, 2, 2, 5369, 5371, 7, 806, 2, 2, 5370, 5369, 3, 2, 2, 2, 5370, 5371,
	3, 2, 2, 2, 5371, 5372, 3, 2, 2, 2, 5372, 5373, 7, 677, 2, 2, 5373, 5374,
	7, 787, 2, 2, 5374, 5391, 7, 779, 2, 2, 5375, 5377, 7, 806, 2, 2, 5376,
	5375, 3, 2, 2, 2, 5376, 5377, 3, 2, 2, 2, 5377, 5378, 3, 2, 2, 2, 5378,
	5379, 7, 678, 2, 2, 5379, 5380, 7, 787, 2, 2, 5380, 5391, 7, 779, 2, 2,
	5381, 5382, 7, 679, 2, 2, 5382, 5383, 7, 787, 2, 2, 5383, 5391, 7, 779,
	2, 2, 5384, 5385, 7, 583, 2, 2, 5385, 5386, 7, 787, 2, 2, 5386, 5391, 7,
	779, 2, 2, 5387, 5388, 7, 528, 2, 2, 5388, 5389, 7, 787, 2, 2, 5389, 5391,
	7, 779, 2, 2, 5390, 5366, 3, 2, 2, 2, 5390, 5370, 3, 2, 2, 2, 5390, 5376,
	3, 2, 2, 2, 5390, 5381, 3, 2, 2, 2, 5390, 5384, 3, 2, 2, 2, 5390, 5387,
	3, 2, 2, 2, 5391, 5392, 3, 2, 2, 2, 5392, 5390, 3, 2, 2, 2, 5392, 5393,
	3, 2, 2, 2, 5393, 5394, 3, 2, 2, 2, 5394, 5396, 7, 805, 2, 2, 5395, 5364,
	3, 2, 2, 2, 5395, 5396, 3, 2, 2, 2, 5396, 5402, 3, 2, 2, 2, 5397, 5400,
	7, 758, 2, 2, 5398, 5401, 5, 940, 471, 2, 5399, 5401, 7, 467, 2, 2, 5400,
	5398, 3, 2, 2, 2, 5400, 5399, 3, 2, 2, 2, 5401, 5403, 3, 2, 2, 2, 5402,
	5397, 3, 2, 2, 2, 5402, 5403, 3, 2, 2, 2, 5403, 407, 3, 2, 2, 2, 5404,
	5405, 7, 72, 2, 2, 5405, 5406, 7, 768, 2, 2, 5406, 5407, 7, 146, 2, 2,
	5407, 5439, 5, 940, 471, 2, 5408, 5409, 7, 379, 2, 2, 5409, 5434, 7, 804,
	2, 2, 5410, 5411, 7, 539, 2, 2, 5411, 5412, 7, 787, 2, 2, 5412, 5435, 9,
	51, 2, 2, 5413, 5415, 7, 806, 2, 2, 5414, 5413, 3, 2, 2, 2, 5414, 5415,
	3, 2, 2, 2, 5415, 5416, 3, 2, 2, 2, 5416, 5417, 7, 677, 2, 2, 5417, 5418,
	7, 787, 2, 2, 5418, 5435, 7, 779, 2, 2, 5419, 5421, 7, 806, 2, 2, 5420,
	5419, 3, 2, 2, 2, 5420, 5421, 3, 2, 2, 2, 5421, 5422, 3, 2, 2, 2, 5422,
	5423, 7, 678, 2, 2, 5423, 5424, 7, 787, 2, 2, 5424, 5435, 7, 779, 2, 2,
	5425, 5426, 7, 679, 2, 2, 5426, 5427, 7, 787, 2, 2, 5427, 5435, 7, 779,
	2, 2, 5428, 5429, 7, 583, 2, 2, 5429, 5430, 7, 787, 2, 2, 5430, 5435, 7,
	779, 2, 2, 5431, 5432, 7, 528, 2, 2, 5432, 5433, 7, 787, 2, 2, 5433, 5435,
	7, 779, 2, 2, 5434, 5410, 3, 2, 2, 2, 5434, 5414, 3, 2, 2, 2, 5434, 5420,
	3, 2, 2, 2, 5434, 5425, 3, 2, 2, 2, 5434, 5428, 3, 2, 2, 2, 5434, 5431,
	3, 2, 2, 2, 5435, 5436, 3, 2, 2, 2, 5436, 5434, 3, 2, 2, 2, 5436, 5437,
	3, 2, 2, 2, 5437, 5438, 3, 2, 2, 2, 5438, 5440, 7, 805, 2, 2, 5439, 5408,
	3, 2, 2, 2, 5439, 5440, 3, 2, 2, 2, 5440, 5454, 3, 2, 2, 2, 5441, 5444,
	7, 758, 2, 2, 5442, 5445, 5, 940, 471, 2, 5443, 5445, 7, 467, 2, 2, 5444,
	5442, 3, 2, 2, 2, 5444, 5443, 3, 2, 2, 2, 5444, 5445, 3, 2, 2, 2, 5445,
	5452, 3, 2, 2, 2, 5446, 5448, 7, 806, 2, 2, 5447, 5446, 3, 2, 2, 2, 5447,
	5448, 3, 2, 2, 2, 5448, 5449, 3, 2, 2, 2, 5449, 5450, 7, 123, 2, 2, 5450,
	5453, 5, 940, 471, 2, 5451, 5453, 7, 467, 2, 2, 5452, 5447, 3, 2, 2, 2,
	5452, 5451, 3, 2, 2, 2, 5452, 5453, 3, 2, 2, 2, 5453, 5455, 3, 2, 2, 2,
	5454, 5441, 3, 2, 2, 2, 5454, 5455, 3, 2, 2, 2, 5455, 409, 3, 2, 2, 2,
	5456, 5457, 7, 72, 2, 2, 5457, 5458, 7, 769, 2, 2, 5458, 5459, 7, 301,
	2, 2, 5459, 5463, 7, 439, 2, 2, 5460, 5461, 5, 940, 471, 2, 5461, 5462,
	7, 799, 2, 2, 5462, 5464, 3, 2, 2, 2, 5463, 5460, 3, 2, 2, 2, 5463, 5464,
	3, 2, 2, 2, 5464, 5465, 3, 2, 2, 2, 5465, 5466, 5, 940, 471, 2, 5466, 5470,
	7, 15, 2, 2, 5467, 5471, 7, 783, 2, 2, 5468, 5471, 5, 940, 471, 2, 5469,
	5471, 7, 778, 2, 2, 5470, 5467, 3, 2, 2, 2, 5470, 5468, 3, 2, 2, 2, 5470,
	5469, 3, 2, 2, 2, 5471, 411, 3, 2, 2, 2, 5472, 5473, 7, 72, 2, 2, 5473,
	5476, 7, 650, 2, 2, 5474, 5477, 5, 886, 444, 2, 5475, 5477, 5, 940, 471,
	2, 5476, 5474, 3, 2, 2, 2, 5476, 5475, 3, 2, 2, 2, 5477, 5479, 3, 2, 2,
	2, 5478, 5480, 5, 414, 208, 2, 5479, 5478, 3, 2, 2, 2, 5479, 5480, 3, 2,
	2, 2, 5480, 5484, 3, 2, 2, 2, 5481, 5482, 7, 228, 2, 2, 5482, 5485, 5,
	940, 471, 2, 5483, 5485, 7, 89, 2, 2, 5484, 5481, 3, 2, 2, 2, 5484, 5483,
	3, 2, 2, 2, 5484, 5485, 3, 2, 2, 2, 5485, 413, 3, 2, 2, 2, 5486, 5493,
	7, 379, 2, 2, 5487, 5488, 7, 722, 2, 2, 5488, 5489, 7, 787, 2, 2, 5489,
	5491, 9, 8, 2, 2, 5490, 5492, 7, 806, 2, 2, 5491, 5490, 3, 2, 2, 2, 5491,
	5492, 3, 2, 2, 2, 5492, 5494, 3, 2, 2, 2, 5493, 5487, 3, 2, 2, 2, 5493,
	5494, 3, 2, 2, 2, 5494, 5501, 3, 2, 2, 2, 5495, 5496, 7, 684, 2, 2, 5496,
	5497, 7, 787, 2, 2, 5497, 5499, 9, 8, 2, 2, 5498, 5500, 7, 806, 2, 2, 5499,
	5498, 3, 2, 2, 2, 5499, 5500, 3, 2, 2, 2, 5500, 5502, 3, 2, 2, 2, 5501,
	5495, 3, 2, 2, 2, 5501, 5502, 3, 2, 2, 2, 5502, 5557, 3, 2, 2, 2, 5503,
	5504, 7, 388, 2, 2, 5504, 5511, 7, 804, 2, 2, 5505, 5507, 7, 806, 2, 2,
	5506, 5505, 3, 2, 2, 2, 5506, 5507, 3, 2, 2, 2, 5507, 5508, 3, 2, 2, 2,
	5508, 5509, 7, 722, 2, 2, 5509, 5510, 7, 787, 2, 2, 5510, 5512, 9, 8, 2,
	2, 5511, 5506, 3, 2, 2, 2, 5511, 5512, 3, 2, 2, 2, 5512, 5519, 3, 2, 2,
	2, 5513, 5515, 7, 806, 2, 2, 5514, 5513, 3, 2, 2, 2, 5514, 5515, 3, 2,
	2, 2, 5515, 5516, 3, 2, 2, 2, 5516, 5517, 7, 646, 2, 2, 5517, 5518, 7,
	787, 2, 2, 5518, 5520, 5, 892, 447, 2, 5519, 5514, 3, 2, 2, 2, 5519, 5520,
	3, 2, 2, 2, 5520, 5527, 3, 2, 2, 2, 5521, 5523, 7, 806, 2, 2, 5522, 5521,
	3, 2, 2, 2, 5522, 5523, 3, 2, 2, 2, 5523, 5524, 3, 2, 2, 2, 5524, 5525,
	7, 580, 2, 2, 5525, 5526, 7, 787, 2, 2, 5526, 5528, 7, 779, 2, 2, 5527,
	5522, 3, 2, 2, 2, 5527, 5528, 3, 2, 2, 2, 5528, 5539, 3, 2, 2, 2, 5529,
	5531, 7, 806, 2, 2, 5530, 5529, 3, 2, 2, 2, 5530, 5531, 3, 2, 2, 2, 5531,
	5532, 3, 2, 2, 2, 5532, 5533, 7, 118, 2, 2, 5533, 5537, 7, 15, 2, 2, 5534,
	5538, 7, 705, 2, 2, 5535, 5538, 7, 783, 2, 2, 5536, 5538, 7, 628, 2, 2,
	5537, 5534, 3, 2, 2, 2, 5537, 5535, 3, 2, 2, 2, 5537, 5536, 3, 2, 2, 2,
	5538, 5540, 3, 2, 2, 2, 5539, 5530, 3, 2, 2, 2, 5539, 5540, 3, 2, 2, 2,
	5540, 5548, 3, 2, 2, 2, 5541, 5543, 7, 806, 2, 2, 5542, 5541, 3, 2, 2,
	2, 5542, 5543, 3, 2, 2, 2, 5543, 5544, 3, 2, 2, 2, 5544, 5545, 7, 636,
	2, 2, 5545, 5546, 7, 722, 2, 2, 5546, 5547, 7, 787, 2, 2, 5547, 5549, 9,
	8, 2, 2, 5548, 5542, 3, 2, 2, 2, 5548, 5549, 3, 2, 2, 2, 5549, 5554, 3,
	2, 2, 2, 5550, 5552, 7, 806, 2, 2, 5551, 5550, 3, 2, 2, 2, 5551, 5552,
	3, 2, 2, 2, 5552, 5553, 3, 2, 2, 2, 5553, 5555, 7, 103, 2, 2, 5554, 5551,
	3, 2, 2, 2, 5554, 5555, 3, 2, 2, 2, 5555, 5556, 3, 2, 2, 2, 5556, 5558,
	7, 805, 2, 2, 5557, 5503, 3, 2, 2, 2, 5557, 5558, 3, 2, 2, 2, 5558, 415,
	3, 2, 2, 2, 5559, 5560, 7, 9, 2, 2, 5560, 5563, 7, 650, 2, 2, 5561, 5564,
	5, 886, 444, 2, 5562, 5564, 5, 940, 471, 2, 5563, 5561, 3, 2, 2, 2, 5563,
	5562, 3, 2, 2, 2, 5564, 5567, 3, 2, 2, 2, 5565, 5568, 5, 414, 208, 2, 5566,
	5568, 5, 418, 210, 2, 5567, 5565, 3, 2, 2, 2, 5567, 5566, 3, 2, 2, 2, 5568,
	417, 3, 2, 2, 2, 5569, 5575, 7, 664, 2, 2, 5570, 5571, 7, 379, 2, 2, 5571,
	5572, 7, 804, 2, 2, 5572, 5573, 5, 420, 211, 2, 5573, 5574, 7, 805, 2,
	2, 5574, 5576, 3, 2, 2, 2, 5575, 5570, 3, 2, 2, 2, 5575, 5576, 3, 2, 2,
	2, 5576, 5591, 3, 2, 2, 2, 5577, 5582, 7, 671, 2, 2, 5578, 5579, 7, 379,
	2, 2, 5579, 5580, 7, 562, 2, 2, 5580, 5581, 7, 787, 2, 2, 5581, 5583, 9,
	8, 2, 2, 5582, 5578, 3, 2, 2, 2, 5582, 5583, 3, 2, 2, 2, 5583, 5591, 3,
	2, 2, 2, 5584, 5585, 7, 596, 2, 2, 5585, 5588, 7, 348, 2, 2, 5586, 5589,
	5, 940, 471, 2, 5587, 5589, 7, 89, 2, 2, 5588, 5586, 3, 2, 2, 2, 5588,
	5587, 3, 2, 2, 2, 5589, 5591, 3, 2, 2, 2, 5590, 5569, 3, 2, 2, 2, 5590,
	5577, 3, 2, 2, 2, 5590, 5584, 3, 2, 2, 2, 5591, 419, 3, 2, 2, 2, 5592,
	5593, 7, 582, 2, 2, 5593, 5594, 7, 787, 2, 2, 5594, 5595, 7, 779, 2, 2,
	5595, 421, 3, 2, 2, 2, 5596, 5597, 7, 72, 2, 2, 5597, 5598, 7, 67, 2, 2,
	5598, 5601, 5, 918, 460, 2, 5599, 5600, 7, 19, 2, 2, 5600, 5602, 5, 940,
	471, 2, 5601, 5599, 3, 2, 2, 2, 5601, 5602, 3, 2, 2, 2, 5602, 5603, 3,
	2, 2, 2, 5603, 5614, 7, 804, 2, 2, 5604, 5607, 5, 940, 471, 2, 5605, 5607,
	7, 89, 2, 2, 5606, 5604, 3, 2, 2, 2, 5606, 5605, 3, 2, 2, 2, 5607, 5608,
	3, 2, 2, 2, 5608, 5609, 7, 707, 2, 2, 5609, 5610, 7, 37, 2, 2, 5610, 5612,
	9, 52, 2, 2, 5611, 5613, 7, 806, 2, 2, 5612, 5611, 3, 2, 2, 2, 5612, 5613,
	3, 2, 2, 2, 5613, 5615, 3, 2, 2, 2, 5614, 5606, 3, 2, 2, 2, 5615, 5616,
	3, 2, 2, 2, 5616, 5614, 3, 2, 2, 2, 5616, 5617, 3, 2, 2, 2, 5617, 5618,
	3, 2, 2, 2, 5618, 5619, 7, 805, 2, 2, 5619, 423, 3, 2, 2, 2, 5620, 5627,
	5, 914, 458, 2, 5621, 5627, 5, 916, 459, 2, 5622, 5627, 5, 922, 462, 2,
	5623, 5627, 5, 926, 464, 2, 5624, 5627, 5, 930, 466, 2, 5625, 5627, 5,
	924, 463, 2, 5626, 5620, 3, 2, 2, 2, 5626, 5621, 3, 2, 2, 2, 5626, 5622,
	3, 2, 2, 2, 5626, 5623, 3, 2, 2, 2, 5626, 5624, 3, 2, 2, 2, 5626, 5625,
	3, 2, 2, 2, 5627, 425, 3, 2, 2, 2, 5628, 5629, 7, 72, 2, 2, 5629, 5630,
	7, 587, 2, 2, 5630, 5631, 7, 752, 2, 2, 5631, 5634, 5, 940, 471, 2, 5632,
	5633, 7, 19, 2, 2, 5633, 5635, 5, 940, 471, 2, 5634, 5632, 3, 2, 2, 2,
	5634, 5635, 3, 2, 2, 2, 5635, 5636, 3, 2, 2, 2, 5636, 5637, 7, 759, 2,
	2, 5637, 5646, 7, 787, 2, 2, 5638, 5647, 7, 212, 2, 2, 5639, 5647, 7, 488,
	2, 2, 5640, 5647, 7, 766, 2, 2, 5641, 5642, 7, 760, 2, 2, 5642, 5643, 7,
	379, 2, 2, 5643, 5644, 7, 301, 2, 2, 5644, 5645, 7, 439, 2, 2, 5645, 5647,
	5, 940, 471, 2, 5646, 5638, 3, 2, 2, 2, 5646, 5639, 3, 2, 2, 2, 5646, 5640,
	3, 2, 2, 2, 5646, 5641, 3, 2, 2, 2, 5647, 427, 3, 2, 2, 2, 5648, 5650,
	5, 720, 361, 2, 5649, 5648, 3, 2, 2, 2, 5649, 5650, 3, 2, 2, 2, 5650, 5651,
	3, 2, 2, 2, 5651, 5659, 7, 200, 2, 2, 5652, 5653, 7, 349, 2, 2, 5653, 5654,
	7, 804, 2, 2, 5654, 5655, 5, 706, 354, 2, 5655, 5657, 7, 805, 2, 2, 5656,
	5658, 7, 244, 2, 2, 5657, 5656, 3, 2, 2, 2, 5657, 5658, 3, 2, 2, 2, 5658,
	5660, 3, 2, 2, 2, 5659, 5652, 3, 2, 2, 2, 5659, 5660, 3, 2, 2, 2, 5660,
	5662, 3, 2, 2, 2, 5661, 5663, 7, 164, 2, 2, 5662, 5661, 3, 2, 2, 2, 5662,
	5663, 3, 2, 2, 2, 5663, 5664, 3, 2, 2, 2, 5664, 5666, 5, 894, 448, 2, 5665,
	5667, 5, 836, 419, 2, 5666, 5665, 3, 2, 2, 2, 5666, 5667, 3, 2, 2, 2, 5667,
	5669, 3, 2, 2, 2, 5668, 5670, 5, 830, 416, 2, 5669, 5668, 3, 2, 2, 2, 5669,
	5670, 3, 2, 2, 2, 5670, 5671, 3, 2, 2, 2, 5671, 5672, 7, 758, 2, 2, 5672,
	5673, 5, 778, 390, 2, 5673, 5674, 7, 228, 2, 2, 5674, 5685, 5, 728, 365,
	2, 5675, 5676, 7, 375, 2, 2, 5676, 5679, 7, 187, 2, 2, 5677, 5678, 7, 10,
	2, 2, 5678, 5680, 5, 728, 365, 2, 5679, 5677, 3, 2, 2, 2, 5679, 5680, 3,
	2, 2, 2, 5680, 5681, 3, 2, 2, 2, 5681, 5682, 7, 347, 2, 2, 5682, 5684,
	5, 430, 216, 2, 5683, 5675, 3, 2, 2, 2, 5684, 5687, 3, 2, 2, 2, 5685, 5683,
	3, 2, 2, 2, 5685, 5686, 3, 2, 2, 2, 5686, 5701, 3, 2, 2, 2, 5687, 5685,
	3, 2, 2, 2, 5688, 5689, 7, 375, 2, 2, 5689, 5690, 7, 219, 2, 2, 5690, 5693,
	7, 187, 2, 2, 5691, 5692, 7, 37, 2, 2, 5692, 5694, 7, 344, 2, 2, 5693,
	5691, 3, 2, 2, 2, 5693, 5694, 3, 2, 2, 2, 5694, 5697, 3, 2, 2, 2, 5695,
	5696, 7, 10, 2, 2, 5696, 5698, 5, 728, 365, 2, 5697, 5695, 3, 2, 2, 2,
	5697, 5698, 3, 2, 2, 2, 5698, 5699, 3, 2, 2, 2, 5699, 5700, 7, 347, 2,
	2, 5700, 5702, 5, 432, 217, 2, 5701, 5688, 3, 2, 2, 2, 5701, 5702, 3, 2,
	2, 2, 5702, 5716, 3, 2, 2, 2, 5703, 5704, 7, 375, 2, 2, 5704, 5705, 7,
	219, 2, 2, 5705, 5706, 7, 187, 2, 2, 5706, 5707, 7, 37, 2, 2, 5707, 5710,
	7, 323, 2, 2, 5708, 5709, 7, 10, 2, 2, 5709, 5711, 5, 728, 365, 2, 5710,
	5708, 3, 2, 2, 2, 5710, 5711, 3, 2, 2, 2, 5711, 5712, 3, 2, 2, 2, 5712,
	5713, 7, 347, 2, 2, 5713, 5715, 5, 430, 216, 2, 5714, 5703, 3, 2, 2, 2,
	5715, 5718, 3, 2, 2, 2, 5716, 5714, 3, 2, 2, 2, 5716, 5717, 3, 2, 2, 2,
	5717, 5720, 3, 2, 2, 2, 5718, 5716, 3, 2, 2, 2, 5719, 5721, 5, 450, 226,
	2, 5720, 5719, 3, 2, 2, 2, 5720, 5721, 3, 2, 2, 2, 5721, 5723, 3, 2, 2,
	2, 5722, 5724, 5, 758, 380, 2, 5723, 5722, 3, 2, 2, 2, 5723, 5724, 3, 2,
	2, 2, 5724, 5725, 3, 2, 2, 2, 5725, 5726, 7, 807, 2, 2, 5726, 429, 3, 2,
	2, 2, 5727, 5728, 7, 363, 2, 2, 5728, 5729, 7, 316, 2, 2, 5729, 5734, 5,
	724, 363, 2, 5730, 5731, 7, 806, 2, 2, 5731, 5733, 5, 724, 363, 2, 5732,
	5730, 3, 2, 2, 2, 5733, 5736, 3, 2, 2, 2, 5734, 5732, 3, 2, 2, 2, 5734,
	5735, 3, 2, 2, 2, 5735, 5739, 3, 2, 2, 2, 5736, 5734, 3, 2, 2, 2, 5737,
	5739, 7, 92, 2, 2, 5738, 5727, 3, 2, 2, 2, 5738, 5737, 3, 2, 2, 2, 5739,
	431, 3, 2, 2, 2, 5740, 5745, 7, 161, 2, 2, 5741, 5742, 7, 804, 2, 2, 5742,
	5743, 5, 900, 451, 2, 5743, 5744, 7, 805, 2, 2, 5744, 5746, 3, 2, 2, 2,
	5745, 5741, 3, 2, 2, 2, 5745, 5746, 3, 2, 2, 2, 5746, 5750, 3, 2, 2, 2,
	5747, 5751, 5, 846, 424, 2, 5748, 5749, 7, 89, 2, 2, 5749, 5751, 7, 369,
	2, 2, 5750, 5747, 3, 2, 2, 2, 5750, 5748, 3, 2, 2, 2, 5751, 433, 3, 2,
	2, 2, 5752, 5754, 5, 720, 361, 2, 5753, 5752, 3, 2, 2, 2, 5753, 5754, 3,
	2, 2, 2, 5754, 5755, 3, 2, 2, 2, 5755, 5763, 7, 92, 2, 2, 5756, 5757, 7,
	349, 2, 2, 5757, 5758, 7, 804, 2, 2, 5758, 5759, 5, 706, 354, 2, 5759,
	5761, 7, 805, 2, 2, 5760, 5762, 7, 244, 2, 2, 5761, 5760, 3, 2, 2, 2, 5761,
	5762, 3, 2, 2, 2, 5762, 5764, 3, 2, 2, 2, 5763, 5756, 3, 2, 2, 2, 5763,
	5764, 3, 2, 2, 2, 5764, 5766, 3, 2, 2, 2, 5765, 5767, 7, 139, 2, 2, 5766,
	5765, 3, 2, 2, 2, 5766, 5767, 3, 2, 2, 2, 5767, 5768, 3, 2, 2, 2, 5768,
	5770, 5, 436, 219, 2, 5769, 5771, 5, 836, 419, 2, 5770, 5769, 3, 2, 2,
	2, 5770, 5771, 3, 2, 2, 2, 5771, 5773, 3, 2, 2, 2, 5772, 5774, 5, 450,
	226, 2, 5773, 5772, 3, 2, 2, 2, 5773, 5774, 3, 2, 2, 2, 5774, 5777, 3,
	2, 2, 2, 5775, 5776, 7, 139, 2, 2, 5776, 5778, 5, 778, 390, 2, 5777, 5775,
	3, 2, 2, 2, 5777, 5778, 3, 2, 2, 2, 5778, 5792, 3, 2, 2, 2, 5779, 5790,
	7, 376, 2, 2, 5780, 5791, 5, 728, 365, 2, 5781, 5782, 7, 74, 2, 2, 5782,
	5788, 7, 224, 2, 2, 5783, 5785, 7, 524, 2, 2, 5784, 5783, 3, 2, 2, 2, 5784,
	5785, 3, 2, 2, 2, 5785, 5786, 3, 2, 2, 2, 5786, 5789, 5, 902, 452, 2, 5787,
	5789, 7, 778, 2, 2, 5788, 5784, 3, 2, 2, 2, 5788, 5787, 3, 2, 2, 2, 5789,
	5791, 3, 2, 2, 2, 5790, 5780, 3, 2, 2, 2, 5790, 5781, 3, 2, 2, 2, 5791,
	5793, 3, 2, 2, 2, 5792, 5779, 3, 2, 2, 2, 5792, 5793, 3, 2, 2, 2, 5793,
	5795, 3, 2, 2, 2, 5794, 5796, 5, 750, 376, 2, 5795, 5794, 3, 2, 2, 2, 5795,
	5796, 3, 2, 2, 2, 5796, 5798, 3, 2, 2, 2, 5797, 5799, 5, 758, 380, 2, 5798,
	5797, 3, 2, 2, 2, 5798, 5799, 3, 2, 2, 2, 5799, 5801, 3, 2, 2, 2, 5800,
	5802, 7, 807, 2, 2, 5801, 5800, 3, 2, 2, 2, 5801, 5802, 3, 2, 2, 2, 5802,
	435, 3, 2, 2, 2, 5803, 5808, 5, 894, 448, 2, 5804, 5808, 5, 832, 417, 2,
	5805, 5808, 5, 600, 301, 2, 5806, 5808, 7, 778, 2, 2, 5807, 5803, 3, 2,
	2, 2, 5807, 5804, 3, 2, 2, 2, 5807, 5805, 3, 2, 2, 2, 5807, 5806, 3, 2,
	2, 2, 5808, 437, 3, 2, 2, 2, 5809, 5811, 5, 720, 361, 2, 5810, 5809, 3,
	2, 2, 2, 5810, 5811, 3, 2, 2, 2, 5811, 5812, 3, 2, 2, 2, 5812, 5820, 7,
	161, 2, 2, 5813, 5814, 7, 349, 2, 2, 5814, 5815, 7, 804, 2, 2, 5815, 5816,
	5, 706, 354, 2, 5816, 5818, 7, 805, 2, 2, 5817, 5819, 7, 244, 2, 2, 5818,
	5817, 3, 2, 2, 2, 5818, 5819, 3, 2, 2, 2, 5819, 5821, 3, 2, 2, 2, 5820,
	5813, 3, 2, 2, 2, 5820, 5821, 3, 2, 2, 2, 5821, 5823, 3, 2, 2, 2, 5822,
	5824, 7, 164, 2, 2, 5823, 5822, 3, 2, 2, 2, 5823, 5824, 3, 2, 2, 2, 5824,
	5827, 3, 2, 2, 2, 5825, 5828, 5, 894, 448, 2, 5826, 5828, 5, 600, 301,
	2, 5827, 5825, 3, 2, 2, 2, 5827, 5826, 3, 2, 2, 2, 5828, 5830, 3, 2, 2,
	2, 5829, 5831, 5, 836, 419, 2, 5830, 5829, 3, 2, 2, 2, 5830, 5831, 3, 2,
	2, 2, 5831, 5836, 3, 2, 2, 2, 5832, 5833, 7, 804, 2, 2, 5833, 5834, 5,
	900, 451, 2, 5834, 5835, 7, 805, 2, 2, 5835, 5837, 3, 2, 2, 2, 5836, 5832,
	3, 2, 2, 2, 5836, 5837, 3, 2, 2, 2, 5837, 5839, 3, 2, 2, 2, 5838, 5840,
	5, 450, 226, 2, 5839, 5838, 3, 2, 2, 2, 5839, 5840, 3, 2, 2, 2, 5840, 5841,
	3, 2, 2, 2, 5841, 5843, 5, 440, 221, 2, 5842, 5844, 5, 750, 376, 2, 5843,
	5842, 3, 2, 2, 2, 5843, 5844, 3, 2, 2, 2, 5844, 5846, 3, 2, 2, 2, 5845,
	5847, 5, 758, 380, 2, 5846, 5845, 3, 2, 2, 2, 5846, 5847, 3, 2, 2, 2, 5847,
	5849, 3, 2, 2, 2, 5848, 5850, 7, 807, 2, 2, 5849, 5848, 3, 2, 2, 2, 5849,
	5850, 3, 2, 2, 2, 5850, 439, 3, 2, 2, 2, 5851, 5857, 5, 846, 424, 2, 5852,
	5857, 5, 808, 405, 2, 5853, 5857, 5, 620, 311, 2, 5854, 5855, 7, 89, 2,
	2, 5855, 5857, 7, 369, 2, 2, 5856, 5851, 3, 2, 2, 2, 5856, 5852, 3, 2,
	2, 2, 5856, 5853, 3, 2, 2, 2, 5856, 5854, 3, 2, 2, 2, 5857, 441, 3, 2,
	2, 2, 5858, 5860, 7, 804, 2, 2, 5859, 5858, 3, 2, 2, 2, 5859, 5860, 3,
	2, 2, 2, 5860, 5861, 3, 2, 2, 2, 5861, 5866, 7, 666, 2, 2, 5862, 5867,
	7, 5, 2, 2, 5863, 5867, 7, 98, 2, 2, 5864, 5867, 5, 742, 372, 2, 5865,
	5867, 7, 809, 2, 2, 5866, 5862, 3, 2, 2, 2, 5866, 5863, 3, 2, 2, 2, 5866,
	5864, 3, 2, 2, 2, 5866, 5865, 3, 2, 2, 2, 5867, 5876, 3, 2, 2, 2, 5868,
	5869, 7, 778, 2, 2, 5869, 5870, 7, 787, 2, 2, 5870, 5872, 5, 706, 354,
	2, 5871, 5873, 7, 806, 2, 2, 5872, 5871, 3, 2, 2, 2, 5872, 5873, 3, 2,
	2, 2, 5873, 5875, 3, 2, 2, 2, 5874, 5868, 3, 2, 2, 2, 5875, 5878, 3, 2,
	2, 2, 5876, 5874, 3, 2, 2, 2, 5876, 5877, 3, 2, 2, 2, 5877, 5879, 3, 2,
	2, 2, 5878, 5876, 3, 2, 2, 2, 5879, 5880, 7, 139, 2, 2, 5880, 5886, 5,
	886, 444, 2, 5881, 5882, 7, 164, 2, 2, 5882, 5883, 5, 940, 471, 2, 5883,
	5884, 7, 376, 2, 2, 5884, 5885, 5, 728, 365, 2, 5885, 5887, 3, 2, 2, 2,
	5886, 5881, 3, 2, 2, 2, 5886, 5887, 3, 2, 2, 2, 5887, 5889, 3, 2, 2, 2,
	5888, 5890, 7, 805, 2, 2, 5889, 5888, 3, 2, 2, 2, 5889, 5890, 3, 2, 2,
	2, 5890, 443, 3, 2, 2, 2, 5891, 5893, 5, 720, 361, 2, 5892, 5891, 3, 2,
	2, 2, 5892, 5893, 3, 2, 2, 2, 5893, 5894, 3, 2, 2, 2, 5894, 5896, 5, 736,
	369, 2, 5895, 5897, 5, 748, 375, 2, 5896, 5895, 3, 2, 2, 2, 5896, 5897,
	3, 2, 2, 2, 5897, 5899, 3, 2, 2, 2, 5898, 5900, 5, 750, 376, 2, 5899, 5898,
	3, 2, 2, 2, 5899, 5900, 3, 2, 2, 2, 5900, 5902, 3, 2, 2, 2, 5901, 5903,
	5, 758, 380, 2, 5902, 5901, 3, 2, 2, 2, 5902, 5903, 3, 2, 2, 2, 5903, 5905,
	3, 2, 2, 2, 5904, 5906, 7, 807, 2, 2, 5905, 5904, 3, 2, 2, 2, 5905, 5906,
	3, 2, 2, 2, 5906, 445, 3, 2, 2, 2, 5907, 5910, 7, 778, 2, 2, 5908, 5910,
	5, 936, 469, 2, 5909, 5907, 3, 2, 2, 2, 5909, 5908, 3, 2, 2, 2, 5910, 447,
	3, 2, 2, 2, 5911, 5913, 5, 720, 361, 2, 5912, 5911, 3, 2, 2, 2, 5912, 5913,
	3, 2, 2, 2, 5913, 5914, 3, 2, 2, 2, 5914, 5922, 7, 363, 2, 2, 5915, 5916,
	7, 349, 2, 2, 5916, 5917, 7, 804, 2, 2, 5917, 5918, 5, 706, 354, 2, 5918,
	5920, 7, 805, 2, 2, 5919, 5921, 7, 244, 2, 2, 5920, 5919, 3, 2, 2, 2, 5920,
	5921, 3, 2, 2, 2, 5921, 5923, 3, 2, 2, 2, 5922, 5915, 3, 2, 2, 2, 5922,
	5923, 3, 2, 2, 2, 5923, 5926, 3, 2, 2, 2, 5924, 5927, 5, 894, 448, 2, 5925,
	5927, 5, 600, 301, 2, 5926, 5924, 3, 2, 2, 2, 5926, 5925, 3, 2, 2, 2, 5927,
	5929, 3, 2, 2, 2, 5928, 5930, 5, 834, 418, 2, 5929, 5928, 3, 2, 2, 2, 5929,
	5930, 3, 2, 2, 2, 5930, 5931, 3, 2, 2, 2, 5931, 5932, 7, 316, 2, 2, 5932,
	5937, 5, 724, 363, 2, 5933, 5934, 7, 806, 2, 2, 5934, 5936, 5, 724, 363,
	2, 5935, 5933, 3, 2, 2, 2, 5936, 5939, 3, 2, 2, 2, 5937, 5935, 3, 2, 2,
	2, 5937, 5938, 3, 2, 2, 2, 5938, 5941, 3, 2, 2, 2, 5939, 5937, 3, 2, 2,
	2, 5940, 5942, 5, 450, 226, 2, 5941, 5940, 3, 2, 2, 2, 5941, 5942, 3, 2,
	2, 2, 5942, 5945, 3, 2, 2, 2, 5943, 5944, 7, 139, 2, 2, 5944, 5946, 5,
	778, 390, 2, 5945, 5943, 3, 2, 2, 2, 5945, 5946, 3, 2, 2, 2, 5946, 5960,
	3, 2, 2, 2, 5947, 5958, 7, 376, 2, 2, 5948, 5959, 5, 726, 364, 2, 5949,
	5950, 7, 74, 2, 2, 5950, 5956, 7, 224, 2, 2, 5951, 5953, 7, 524, 2, 2,
	5952, 5951, 3, 2, 2, 2, 5952, 5953, 3, 2, 2, 2, 5953, 5954, 3, 2, 2, 2,
	5954, 5957, 5, 902, 452, 2, 5955, 5957, 7, 778, 2, 2, 5956, 5952, 3, 2,
	2, 2, 5956, 5955, 3, 2, 2, 2, 5957, 5959, 3, 2, 2, 2, 5958, 5948, 3, 2,
	2, 2, 5958, 5949, 3, 2, 2, 2, 5959, 5961, 3, 2, 2, 2, 5960, 5947, 3, 2,
	2, 2, 5960, 5961, 3, 2, 2, 2, 5961, 5963, 3, 2, 2, 2, 5962, 5964, 5, 750,
	376, 2, 5963, 5962, 3, 2, 2, 2, 5963, 5964, 3, 2, 2, 2, 5964, 5966, 3,
	2, 2, 2, 5965, 5967, 5, 758, 380, 2, 5966, 5965, 3, 2, 2, 2, 5966, 5967,
	3, 2, 2, 2, 5967, 5969, 3, 2, 2, 2, 5968, 5970, 7, 807, 2, 2, 5969, 5968,
	3, 2, 2, 2, 5969, 5970, 3, 2, 2, 2, 5970, 449, 3, 2, 2, 2, 5971, 5972,
	7, 627, 2, 2, 5972, 5977, 5, 452, 227, 2, 5973, 5974, 7, 806, 2, 2, 5974,
	5976, 5, 452, 227, 2, 5975, 5973, 3, 2, 2, 2, 5976, 5979, 3, 2, 2, 2, 5977,
	5975, 3, 2, 2, 2, 5977, 5978, 3, 2, 2, 2, 5978, 5991, 3, 2, 2, 2, 5979,
	5977, 3, 2, 2, 2, 5980, 5983, 7, 164, 2, 2, 5981, 5984, 7, 778, 2, 2, 5982,
	5984, 5, 888, 445, 2, 5983, 5981, 3, 2, 2, 2, 5983, 5982, 3, 2, 2, 2, 5984,
	5989, 3, 2, 2, 2, 5985, 5986, 7, 804, 2, 2, 5986, 5987, 5, 900, 451, 2,
	5987, 5988, 7, 805, 2, 2, 5988, 5990, 3, 2, 2, 2, 5989, 5985, 3, 2, 2,
	2, 5989, 5990, 3, 2, 2, 2, 5990, 5992, 3, 2, 2, 2, 5991, 5980, 3, 2, 2,
	2, 5991, 5992, 3, 2, 2, 2, 5992, 451, 3, 2, 2, 2, 5993, 5996, 5, 454, 228,
	2, 5994, 5996, 5, 706, 354, 2, 5995, 5993, 3, 2, 2, 2, 5995, 5994, 3, 2,
	2, 2, 5996, 5998, 3, 2, 2, 2, 5997, 5999, 5, 828, 415, 2, 5998, 5997, 3,
	2, 2, 2, 5998, 5999, 3, 2, 2, 2, 5999, 453, 3, 2, 2, 2, 6000, 6004, 7,
	472, 2, 2, 6001, 6004, 7, 544, 2, 2, 6002, 6004, 5, 888, 445, 2, 6003,
	6000, 3, 2, 2, 2, 6003, 6001, 3, 2, 2, 2, 6003, 6002, 3, 2, 2, 2, 6004,
	6005, 3, 2, 2, 2, 6005, 6008, 7, 799, 2, 2, 6006, 6009, 7, 809, 2, 2, 6007,
	6009, 5, 940, 471, 2, 6008, 6006, 3, 2, 2, 2, 6008, 6007, 3, 2, 2, 2, 6009,
	6012, 3, 2, 2, 2, 6010, 6012, 7, 771, 2, 2, 6011, 6003, 3, 2, 2, 2, 6011,
	6010, 3, 2, 2, 2, 6012, 455, 3, 2, 2, 2, 6013, 6014, 7, 72, 2, 2, 6014,
	6015, 7, 84, 2, 2, 6015, 6019, 5, 940, 471, 2, 6016, 6017, 7, 61, 2, 2,
	6017, 6018, 7, 787, 2, 2, 6018, 6020, 9, 53, 2, 2, 6019, 6016, 3, 2, 2,
	2, 6019, 6020, 3, 2, 2, 2, 6020, 6033, 3, 2, 2, 2, 6021, 6023, 7, 228,
	2, 2, 6022, 6024, 7, 255, 2, 2, 6023, 6022, 3, 2, 2, 2, 6023, 6024, 3,
	2, 2, 2, 6024, 6025, 3, 2, 2, 2, 6025, 6030, 5, 874, 438, 2, 6026, 6027,
	7, 806, 2, 2, 6027, 6029, 5, 874, 438, 2, 6028, 6026, 3, 2, 2, 2, 6029,
	6032, 3, 2, 2, 2, 6030, 6028, 3, 2, 2, 2, 6030, 6031, 3, 2, 2, 2, 6031,
	6034, 3, 2, 2, 2, 6032, 6030, 3, 2, 2, 2, 6033, 6021, 3, 2, 2, 2, 6033,
	6034, 3, 2, 2, 2, 6034, 6045, 3, 2, 2, 2, 6035, 6036, 7, 186, 2, 2, 6036,
	6037, 7, 228, 2, 2, 6037, 6042, 5, 874, 438, 2, 6038, 6039, 7, 806, 2,
	2, 6039, 6041, 5, 874, 438, 2, 6040, 6038, 3, 2, 2, 2, 6041, 6044, 3, 2,
	2, 2, 6042, 6040, 3, 2, 2, 2, 6042, 6043, 3, 2, 2, 2, 6043, 6046, 3, 2,
	2, 2, 6044, 6042, 3, 2, 2, 2, 6045, 6035, 3, 2, 2, 2, 6045, 6046, 3, 2,
	2, 2, 6046, 6049, 3, 2, 2, 2, 6047, 6048, 7, 54, 2, 2, 6048, 6050, 5, 940,
	471, 2, 6049, 6047, 3, 2, 2, 2, 6049, 6050, 3, 2, 2, 2, 6050, 6060, 3,
	2, 2, 2, 6051, 6052, 7, 379, 2, 2, 6052, 6057, 5, 870, 436, 2, 6053, 6054,
	7, 806, 2, 2, 6054, 6056, 5, 870, 436, 2, 6055, 6053, 3, 2, 2, 2, 6056,
	6059, 3, 2, 2, 2, 6057, 6055, 3, 2, 2, 2, 6057, 6058, 3, 2, 2, 2, 6058,
	6061, 3, 2, 2, 2, 6059, 6057, 3, 2, 2, 2, 6060, 6051, 3, 2, 2, 2, 6060,
	6061, 3, 2, 2, 2, 6061, 457, 3, 2, 2, 2, 6062, 6064, 7, 72, 2, 2, 6063,
	6065, 7, 359, 2, 2, 6064, 6063, 3, 2, 2, 2, 6064, 6065, 3, 2, 2, 2, 6065,
	6067, 3, 2, 2, 2, 6066, 6068, 5, 906, 454, 2, 6067, 6066, 3, 2, 2, 2, 6067,
	6068, 3, 2, 2, 2, 6068, 6069, 3, 2, 2, 2, 6069, 6070, 7, 157, 2, 2, 6070,
	6071, 5, 940, 471, 2, 6071, 6072, 7, 228, 2, 2, 6072, 6073, 5, 802, 402,
	2, 6073, 6074, 7, 804, 2, 2, 6074, 6075, 5, 898, 450, 2, 6075, 6081, 7,
	805, 2, 2, 6076, 6077, 7, 155, 2, 2, 6077, 6078, 7, 804, 2, 2, 6078, 6079,
	5, 900, 451, 2, 6079, 6080, 7, 805, 2, 2, 6080, 6082, 3, 2, 2, 2, 6081,
	6076, 3, 2, 2, 2, 6081, 6082, 3, 2, 2, 2, 6082, 6085, 3, 2, 2, 2, 6083,
	6084, 7, 376, 2, 2, 6084, 6086, 5, 728, 365, 2, 6085, 6083, 3, 2, 2, 2,
	6085, 6086, 3, 2, 2, 2, 6086, 6088, 3, 2, 2, 2, 6087, 6089, 5, 690, 346,
	2, 6088, 6087, 3, 2, 2, 2, 6088, 6089, 3, 2, 2, 2, 6089, 6092, 3, 2, 2,
	2, 6090, 6091, 7, 228, 2, 2, 6091, 6093, 5, 940, 471, 2, 6092, 6090, 3,
	2, 2, 2, 6092, 6093, 3, 2, 2, 2, 6093, 6095, 3, 2, 2, 2, 6094, 6096, 7,
	807, 2, 2, 6095, 6094, 3, 2, 2, 2, 6095, 6096, 3, 2, 2, 2, 6096, 459, 3,
	2, 2, 2, 6097, 6100, 7, 72, 2, 2, 6098, 6099, 7, 236, 2, 2, 6099, 6101,
	7, 9, 2, 2, 6100, 6098, 3, 2, 2, 2, 6100, 6101, 3, 2, 2, 2, 6101, 6104,
	3, 2, 2, 2, 6102, 6104, 7, 9, 2, 2, 6103, 6097, 3, 2, 2, 2, 6103, 6102,
	3, 2, 2, 2, 6104, 6105, 3, 2, 2, 2, 6105, 6106, 9, 54, 2, 2, 6106, 6109,
	5, 892, 447, 2, 6107, 6108, 7, 807, 2, 2, 6108, 6110, 7, 779, 2, 2, 6109,
	6107, 3, 2, 2, 2, 6109, 6110, 3, 2, 2, 2, 6110, 6125, 3, 2, 2, 2, 6111,
	6113, 7, 804, 2, 2, 6112, 6111, 3, 2, 2, 2, 6112, 6113, 3, 2, 2, 2, 6113,
	6114, 3, 2, 2, 2, 6114, 6119, 5, 482, 242, 2, 6115, 6116, 7, 806, 2, 2,
	6116, 6118, 5, 482, 242, 2, 6117, 6115, 3, 2, 2, 2, 6118, 6121, 3, 2, 2,
	2, 6119, 6117, 3, 2, 2, 2, 6119, 6120, 3, 2, 2, 2, 6120, 6123, 3, 2, 2,
	2, 6121, 6119, 3, 2, 2, 2, 6122, 6124, 7, 805, 2, 2, 6123, 6122, 3, 2,
	2, 2, 6123, 6124, 3, 2, 2, 2, 6124, 6126, 3, 2, 2, 2, 6125, 6112, 3, 2,
	2, 2, 6125, 6126, 3, 2, 2, 2, 6126, 6136, 3, 2, 2, 2, 6127, 6128, 7, 379,
	2, 2, 6128, 6133, 5, 484, 243, 2, 6129, 6130, 7, 806, 2, 2, 6130, 6132,
	5, 484, 243, 2, 6131, 6129, 3, 2, 2, 2, 6132, 6135, 3, 2, 2, 2, 6133, 6131,
	3, 2, 2, 2, 6133, 6134, 3, 2, 2, 2, 6134, 6137, 3, 2, 2, 2, 6135, 6133,
	3, 2, 2, 2, 6136, 6127, 3, 2, 2, 2, 6136, 6137, 3, 2, 2, 2, 6137, 6140,
	3, 2, 2, 2, 6138, 6139, 7, 133, 2, 2, 6139, 6141, 7, 273, 2, 2, 6140, 6138,
	3, 2, 2, 2, 6140, 6141, 3, 2, 2, 2, 6141, 6142, 3, 2, 2, 2, 6142, 6143,
	7, 15, 2, 2, 6143, 6144, 5, 6, 4, 2, 6144, 461, 3, 2, 2, 2, 6145, 6148,
	5, 464, 233, 2, 6146, 6148, 5, 470, 236, 2, 6147, 6145, 3, 2, 2, 2, 6147,
	6146, 3, 2, 2, 2, 6148, 463, 3, 2, 2, 2, 6149, 6152, 7, 72, 2, 2, 6150,
	6151, 7, 236, 2, 2, 6151, 6153, 7, 9, 2, 2, 6152, 6150, 3, 2, 2, 2, 6152,
	6153, 3, 2, 2, 2, 6153, 6156, 3, 2, 2, 2, 6154, 6156, 7, 9, 2, 2, 6155,
	6149, 3, 2, 2, 2, 6155, 6154, 3, 2, 2, 2, 6156, 6157, 3, 2, 2, 2, 6157,
	6158, 7, 354, 2, 2, 6158, 6159, 5, 890, 446, 2, 6159, 6160, 7, 228, 2,
	2, 6160, 6170, 5, 888, 445, 2, 6161, 6162, 7, 379, 2, 2, 6162, 6167, 5,
	466, 234, 2, 6163, 6164, 7, 806, 2, 2, 6164, 6166, 5, 466, 234, 2, 6165,
	6163, 3, 2, 2, 2, 6166, 6169, 3, 2, 2, 2, 6167, 6165, 3, 2, 2, 2, 6167,
	6168, 3, 2, 2, 2, 6168, 6171, 3, 2, 2, 2, 6169, 6167, 3, 2, 2, 2, 6170,
	6161, 3, 2, 2, 2, 6170, 6171, 3, 2, 2, 2, 6171, 6176, 3, 2, 2, 2, 6172,
	6177, 7, 133, 2, 2, 6173, 6177, 7, 394, 2, 2, 6174, 6175, 7, 162, 2, 2,
	6175, 6177, 7, 224, 2, 2, 6176, 6172, 3, 2, 2, 2, 6176, 6173, 3, 2, 2,
	2, 6176, 6174, 3, 2, 2, 2, 6177, 6178, 3, 2, 2, 2, 6178, 6183, 5, 468,
	235, 2, 6179, 6180, 7, 806, 2, 2, 6180, 6182, 5, 468, 235, 2, 6181, 6179,
	3, 2, 2, 2, 6182, 6185, 3, 2, 2, 2, 6183, 6181, 3, 2, 2, 2, 6183, 6184,
	3, 2, 2, 2, 6184, 6188, 3, 2, 2, 2, 6185, 6183, 3, 2, 2, 2, 6186, 6187,
	7, 379, 2, 2, 6187, 6189, 7, 13, 2, 2, 6188, 6186, 3, 2, 2, 2, 6188, 6189,
	3, 2, 2, 2, 6189, 6193, 3, 2, 2, 2, 6190, 6191, 7, 219, 2, 2, 6191, 6192,
	7, 133, 2, 2, 6192, 6194, 7, 273, 2, 2, 6193, 6190, 3, 2, 2, 2, 6193, 6194,
	3, 2, 2, 2, 6194, 6195, 3, 2, 2, 2, 6195, 6196, 7, 15, 2, 2, 6196, 6197,
	5, 6, 4, 2, 6197, 465, 3, 2, 2, 2, 6198, 6201, 7, 492, 2, 2, 6199, 6201,
	5, 666, 334, 2, 6200, 6198, 3, 2, 2, 2, 6200, 6199, 3, 2, 2, 2, 6201, 467,
	3, 2, 2, 2, 6202, 6203, 9, 55, 2, 2, 6203, 469, 3, 2, 2, 2, 6204, 6207,
	7, 72, 2, 2, 6205, 6206, 7, 236, 2, 2, 6206, 6208, 7, 9, 2, 2, 6207, 6205,
	3, 2, 2, 2, 6207, 6208, 3, 2, 2, 2, 6208, 6211, 3, 2, 2, 2, 6209, 6211,
	7, 9, 2, 2, 6210, 6204, 3, 2, 2, 2, 6210, 6209, 3, 2, 2, 2, 6211, 6212,
	3, 2, 2, 2, 6212, 6213, 7, 354, 2, 2, 6213, 6214, 5, 890, 446, 2, 6214,
	6218, 7, 228, 2, 2, 6215, 6216, 7, 5, 2, 2, 6216, 6219, 7, 310, 2, 2, 6217,
	6219, 7, 84, 2, 2, 6218, 6215, 3, 2, 2, 2, 6218, 6217, 3, 2, 2, 2, 6219,
	6229, 3, 2, 2, 2, 6220, 6221, 7, 379, 2, 2, 6221, 6226, 5, 466, 234, 2,
	6222, 6223, 7, 806, 2, 2, 6223, 6225, 5, 466, 234, 2, 6224, 6222, 3, 2,
	2, 2, 6225, 6228, 3, 2, 2, 2, 6226, 6224, 3, 2, 2, 2, 6226, 6227, 3, 2,
	2, 2, 6227, 6230, 3, 2, 2, 2, 6228, 6226, 3, 2, 2, 2, 6229, 6220, 3, 2,
	2, 2, 6229, 6230, 3, 2, 2, 2, 6230, 6231, 3, 2, 2, 2, 6231, 6232, 9, 56,
	2, 2, 6232, 6237, 5, 472, 237, 2, 6233, 6234, 7, 806, 2, 2, 6234, 6236,
	5, 468, 235, 2, 6235, 6233, 3, 2, 2, 2, 6236, 6239, 3, 2, 2, 2, 6237, 6235,
	3, 2, 2, 2, 6237, 6238, 3, 2, 2, 2, 6238, 6240, 3, 2, 2, 2, 6239, 6237,
	3, 2, 2, 2, 6240, 6241, 7, 15, 2, 2, 6241, 6242, 5, 6, 4, 2, 6242, 471,
	3, 2, 2, 2, 6243, 6244, 5, 942, 472, 2, 6244, 473, 3, 2, 2, 2, 6245, 6248,
	7, 72, 2, 2, 6246, 6247, 7, 236, 2, 2, 6247, 6249, 7, 9, 2, 2, 6248, 6246,
	3, 2, 2, 2, 6248, 6249, 3, 2, 2, 2, 6249, 6252, 3, 2, 2, 2, 6250, 6252,
	7, 9, 2, 2, 6251, 6245, 3, 2, 2, 2, 6251, 6250, 3, 2, 2, 2, 6252, 6253,
	3, 2, 2, 2, 6253, 6254, 7, 141, 2, 2, 6254, 6268, 5, 892, 447, 2, 6255,
	6256, 7, 804, 2, 2, 6256, 6261, 5, 482, 242, 2, 6257, 6258, 7, 806, 2,
	2, 6258, 6260, 5, 482, 242, 2, 6259, 6257, 3, 2, 2, 2, 6260, 6263, 3, 2,
	2, 2, 6261, 6259, 3, 2, 2, 2, 6261, 6262, 3, 2, 2, 2, 6262, 6264, 3, 2,
	2, 2, 6263, 6261, 3, 2, 2, 2, 6264, 6265, 7, 805, 2, 2, 6265, 6269, 3,
	2, 2, 2, 6266, 6267, 7, 804, 2, 2, 6267, 6269, 7, 805, 2, 2, 6268, 6255,
	3, 2, 2, 2, 6268, 6266, 3, 2, 2, 2, 6269, 6273, 3, 2, 2, 2, 6270, 6274,
	5, 476, 239, 2, 6271, 6274, 5, 478, 240, 2, 6272, 6274, 5, 480, 241, 2,
	6273, 6270, 3, 2, 2, 2, 6273, 6271, 3, 2, 2, 2, 6273, 6272, 3, 2, 2, 2,
	6274, 6276, 3, 2, 2, 2, 6275, 6277, 7, 807, 2, 2, 6276, 6275, 3, 2, 2,
	2, 6276, 6277, 3, 2, 2, 2, 6277, 475, 3, 2, 2, 2, 6278, 6279, 7, 282, 2,
	2, 6279, 6289, 7, 341, 2, 2, 6280, 6281, 7, 379, 2, 2, 6281, 6286, 5, 486,
	244, 2, 6282, 6283, 7, 806, 2, 2, 6283, 6285, 5, 486, 244, 2, 6284, 6282,
	3, 2, 2, 2, 6285, 6288, 3, 2, 2, 2, 6286, 6284, 3, 2, 2, 2, 6286, 6287,
	3, 2, 2, 2, 6287, 6290, 3, 2, 2, 2, 6288, 6286, 3, 2, 2, 2, 6289, 6280,
	3, 2, 2, 2, 6289, 6290, 3, 2, 2, 2, 6290, 6292, 3, 2, 2, 2, 6291, 6293,
	7, 15, 2, 2, 6292, 6291, 3, 2, 2, 2, 6292, 6293, 3, 2, 2, 2, 6293, 6294,
	3, 2, 2, 2, 6294, 6295, 7, 281, 2, 2, 6295, 6296, 5, 444, 223, 2, 6296,
	477, 3, 2, 2, 2, 6297, 6298, 7, 282, 2, 2, 6298, 6299, 7, 778, 2, 2, 6299,
	6309, 5, 670, 336, 2, 6300, 6301, 7, 379, 2, 2, 6301, 6306, 5, 486, 244,
	2, 6302, 6303, 7, 806, 2, 2, 6303, 6305, 5, 486, 244, 2, 6304, 6302, 3,
	2, 2, 2, 6305, 6308, 3, 2, 2, 2, 6306, 6304, 3, 2, 2, 2, 6306, 6307, 3,
	2, 2, 2, 6307, 6310, 3, 2, 2, 2, 6308, 6306, 3, 2, 2, 2, 6309, 6300, 3,
	2, 2, 2, 6309, 6310, 3, 2, 2, 2, 6310, 6312, 3, 2, 2, 2, 6311, 6313, 7,
	15, 2, 2, 6312, 6311, 3, 2, 2, 2, 6312, 6313, 3, 2, 2, 2, 6313, 6314, 3,
	2, 2, 2, 6314, 6318, 7, 27, 2, 2, 6315, 6317, 5, 8, 5, 2, 6316, 6315, 3,
	2, 2, 2, 6317, 6320, 3, 2, 2, 2, 6318, 6316, 3, 2, 2, 2, 6318, 6319, 3,
	2, 2, 2, 6319, 6321, 3, 2, 2, 2, 6320, 6318, 3, 2, 2, 2, 6321, 6322, 7,
	281, 2, 2, 6322, 6323, 7, 108, 2, 2, 6323, 479, 3, 2, 2, 2, 6324, 6325,
	7, 282, 2, 2, 6325, 6335, 5, 932, 467, 2, 6326, 6327, 7, 379, 2, 2, 6327,
	6332, 5, 486, 244, 2, 6328, 6329, 7, 806, 2, 2, 6329, 6331, 5, 486, 244,
	2, 6330, 6328, 3, 2, 2, 2, 6331, 6334, 3, 2, 2, 2, 6332, 6330, 3, 2, 2,
	2, 6332, 6333, 3, 2, 2, 2, 6333, 6336, 3, 2, 2, 2, 6334, 6332, 3, 2, 2,
	2, 6335, 6326, 3, 2, 2, 2, 6335, 6336, 3, 2, 2, 2, 6336, 6338, 3, 2, 2,
	2, 6337, 6339, 7, 15, 2, 2, 6338, 6337, 3, 2, 2, 2, 6338, 6339, 3, 2, 2,
	2, 6339, 6340, 3, 2, 2, 2, 6340, 6344, 7, 27, 2, 2, 6341, 6343, 5, 8, 5,
	2, 6342, 6341, 3, 2, 2, 2, 6343, 6346, 3, 2, 2, 2, 6344, 6342, 3, 2, 2,
	2, 6344, 6345, 3, 2, 2, 2, 6345, 6347, 3, 2, 2, 2, 6346, 6344, 3, 2, 2,
	2, 6347, 6348, 7, 281, 2, 2, 6348, 6350, 5, 706, 354, 2, 6349, 6351, 7,
	807, 2, 2, 6350, 6349, 3, 2, 2, 2, 6350, 6351, 3, 2, 2, 2, 6351, 6352,
	3, 2, 2, 2, 6352, 6353, 7, 108, 2, 2, 6353, 481, 3, 2, 2, 2, 6354, 6358,
	7, 778, 2, 2, 6355, 6356, 5, 940, 471, 2, 6356, 6357, 7, 799, 2, 2, 6357,
	6359, 3, 2, 2, 2, 6358, 6355, 3, 2, 2, 2, 6358, 6359, 3, 2, 2, 2, 6359,
	6361, 3, 2, 2, 2, 6360, 6362, 7, 15, 2, 2, 6361, 6360, 3, 2, 2, 2, 6361,
	6362, 3, 2, 2, 2, 6362, 6363, 3, 2, 2, 2, 6363, 6365, 5, 932, 467, 2, 6364,
	6366, 7, 370, 2, 2, 6365, 6364, 3, 2, 2, 2, 6365, 6366, 3, 2, 2, 2, 6366,
	6369, 3, 2, 2, 2, 6367, 6368, 7, 787, 2, 2, 6368, 6370, 5, 934, 468, 2,
	6369, 6367, 3, 2, 2, 2, 6369, 6370, 3, 2, 2, 2, 6370, 6372, 3, 2, 2, 2,
	6371, 6373, 9, 57, 2, 2, 6372, 6371, 3, 2, 2, 2, 6372, 6373, 3, 2, 2, 2,
	6373, 483, 3, 2, 2, 2, 6374, 6378, 7, 492, 2, 2, 6375, 6378, 7, 665, 2,
	2, 6376, 6378, 5, 666, 334, 2, 6377, 6374, 3, 2, 2, 2, 6377, 6375, 3, 2,
	2, 2, 6377, 6376, 3, 2, 2, 2, 6378, 485, 3, 2, 2, 2, 6379, 6392, 7, 492,
	2, 2, 6380, 6392, 7, 693, 2, 2, 6381, 6382, 7, 282, 2, 2, 6382, 6383, 7,
	222, 2, 2, 6383, 6384, 7, 228, 2, 2, 6384, 6385, 7, 222, 2, 2, 6385, 6392,
	7, 542, 2, 2, 6386, 6387, 7, 39, 2, 2, 6387, 6388, 7, 228, 2, 2, 6388,
	6389, 7, 222, 2, 2, 6389, 6392, 7, 542, 2, 2, 6390, 6392, 5, 666, 334,
	2, 6391, 6379, 3, 2, 2, 2, 6391, 6380, 3, 2, 2, 2, 6391, 6381, 3, 2, 2,
	2, 6391, 6386, 3, 2, 2, 2, 6391, 6390, 3, 2, 2, 2, 6392, 487, 3, 2, 2,
	2, 6393, 6394, 7, 72, 2, 2, 6394, 6395, 7, 329, 2, 2, 6395, 6396, 5, 940,
	471, 2, 6396, 6397, 7, 228, 2, 2, 6397, 6398, 5, 802, 402, 2, 6398, 6399,
	7, 804, 2, 2, 6399, 6400, 5, 900, 451, 2, 6400, 6419, 7, 805, 2, 2, 6401,
	6407, 7, 379, 2, 2, 6402, 6408, 7, 519, 2, 2, 6403, 6404, 7, 692, 2, 2,
	6404, 6405, 7, 779, 2, 2, 6405, 6408, 9, 58, 2, 2, 6406, 6408, 7, 721,
	2, 2, 6407, 6402, 3, 2, 2, 2, 6407, 6403, 3, 2, 2, 2, 6407, 6406, 3, 2,
	2, 2, 6408, 6411, 3, 2, 2, 2, 6409, 6410, 7, 806, 2, 2, 6410, 6412, 7,
	608, 2, 2, 6411, 6409, 3, 2, 2, 2, 6411, 6412, 3, 2, 2, 2, 6412, 6417,
	3, 2, 2, 2, 6413, 6414, 7, 806, 2, 2, 6414, 6415, 7, 540, 2, 2, 6415, 6416,
	7, 787, 2, 2, 6416, 6418, 5, 904, 453, 2, 6417, 6413, 3, 2, 2, 2, 6417,
	6418, 3, 2, 2, 2, 6418, 6420, 3, 2, 2, 2, 6419, 6401, 3, 2, 2, 2, 6419,
	6420, 3, 2, 2, 2, 6420, 6422, 3, 2, 2, 2, 6421, 6423, 7, 807, 2, 2, 6422,
	6421, 3, 2, 2, 2, 6422, 6423, 3, 2, 2, 2, 6423, 489, 3, 2, 2, 2, 6424,
	6425, 7, 72, 2, 2, 6425, 6426, 7, 341, 2, 2, 6426, 6427, 5, 888, 445, 2,
	6427, 6428, 7, 804, 2, 2, 6428, 6430, 5, 676, 339, 2, 6429, 6431, 7, 806,
	2, 2, 6430, 6429, 3, 2, 2, 2, 6430, 6431, 3, 2, 2, 2, 6431, 6432, 3, 2,
	2, 2, 6432, 6436, 7, 805, 2, 2, 6433, 6435, 5, 492, 247, 2, 6434, 6433,
	3, 2, 2, 2, 6435, 6438, 3, 2, 2, 2, 6436, 6434, 3, 2, 2, 2, 6436, 6437,
	3, 2, 2, 2, 6437, 6442, 3, 2, 2, 2, 6438, 6436, 3, 2, 2, 2, 6439, 6440,
	7, 228, 2, 2, 6440, 6443, 5, 940, 471, 2, 6441, 6443, 7, 89, 2, 2, 6442,
	6439, 3, 2, 2, 2, 6442, 6441, 3, 2, 2, 2, 6442, 6443, 3, 2, 2, 2, 6443,
	6447, 3, 2, 2, 2, 6444, 6445, 7, 737, 2, 2, 6445, 6448, 5, 940, 471, 2,
	6446, 6448, 7, 89, 2, 2, 6447, 6444, 3, 2, 2, 2, 6447, 6446, 3, 2, 2, 2,
	6447, 6448, 3, 2, 2, 2, 6448, 6450, 3, 2, 2, 2, 6449, 6451, 7, 807, 2,
	2, 6450, 6449, 3, 2, 2, 2, 6450, 6451, 3, 2, 2, 2, 6451, 491, 3, 2, 2,
	2, 6452, 6453, 7, 379, 2, 2, 6453, 6454, 7, 804, 2, 2, 6454, 6459, 5, 692,
	347, 2, 6455, 6456, 7, 806, 2, 2, 6456, 6458, 5, 692, 347, 2, 6457, 6455,
	3, 2, 2, 2, 6458, 6461, 3, 2, 2, 2, 6459, 6457, 3, 2, 2, 2, 6459, 6460,
	3, 2, 2, 2, 6460, 6462, 3, 2, 2, 2, 6461, 6459, 3, 2, 2, 2, 6462, 6463,
	7, 805, 2, 2, 6463, 493, 3, 2, 2, 2, 6464, 6465, 7, 72, 2, 2, 6465, 6466,
	7, 372, 2, 2, 6466, 6471, 5, 890, 446, 2, 6467, 6468, 7, 804, 2, 2, 6468,
	6469, 5, 900, 451, 2, 6469, 6470, 7, 805, 2, 2, 6470, 6472, 3, 2, 2, 2,
	6471, 6467, 3, 2, 2, 2, 6471, 6472, 3, 2, 2, 2, 6472, 6482, 3, 2, 2, 2,
	6473, 6474, 7, 379, 2, 2, 6474, 6479, 5, 496, 249, 2, 6475, 6476, 7, 806,
	2, 2, 6476, 6478, 5, 496, 249, 2, 6477, 6475, 3, 2, 2, 2, 6478, 6481, 3,
	2, 2, 2, 6479, 6477, 3, 2, 2, 2, 6479, 6480, 3, 2, 2, 2, 6480, 6483, 3,
	2, 2, 2, 6481, 6479, 3, 2, 2, 2, 6482, 6473, 3, 2, 2, 2, 6482, 6483, 3,
	2, 2, 2, 6483, 6484, 3, 2, 2, 2, 6484, 6485, 7, 15, 2, 2, 6485, 6489, 5,
	444, 223, 2, 6486, 6487, 7, 379, 2, 2, 6487, 6488, 7, 45, 2, 2, 6488, 6490,
	7, 235, 2, 2, 6489, 6486, 3, 2, 2, 2, 6489, 6490, 3, 2, 2, 2, 6490, 6492,
	3, 2, 2, 2, 6491, 6493, 7, 807, 2, 2, 6492, 6491, 3, 2, 2, 2, 6492, 6493,
	3, 2, 2, 2, 6493, 495, 3, 2, 2, 2, 6494, 6495, 9, 59, 2, 2, 6495, 497,
	3, 2, 2, 2, 6496, 6497, 7, 9, 2, 2, 6497, 6498, 7, 341, 2, 2, 6498, 6537,
	5, 888, 445, 2, 6499, 6500, 7, 316, 2, 2, 6500, 6501, 7, 804, 2, 2, 6501,
	6502, 7, 565, 2, 2, 6502, 6503, 7, 787, 2, 2, 6503, 6504, 9, 60, 2, 2,
	6504, 6538, 7, 805, 2, 2, 6505, 6506, 7, 3, 2, 2, 6506, 6538, 5, 678, 340,
	2, 6507, 6508, 7, 9, 2, 2, 6508, 6509, 7, 55, 2, 2, 6509, 6538, 5, 680,
	341, 2, 6510, 6511, 7, 103, 2, 2, 6511, 6512, 7, 55, 2, 2, 6512, 6538,
	5, 940, 471, 2, 6513, 6514, 7, 103, 2, 2, 6514, 6515, 7, 60, 2, 2, 6515,
	6538, 5, 940, 471, 2, 6516, 6517, 7, 379, 2, 2, 6517, 6518, 7, 45, 2, 2,
	6518, 6519, 7, 3, 2, 2, 6519, 6520, 7, 60, 2, 2, 6520, 6521, 5, 940, 471,
	2, 6521, 6522, 7, 136, 2, 2, 6522, 6523, 7, 171, 2, 2, 6523, 6524, 7, 804,
	2, 2, 6524, 6525, 5, 900, 451, 2, 6525, 6526, 7, 805, 2, 2, 6526, 6527,
	7, 269, 2, 2, 6527, 6528, 5, 888, 445, 2, 6528, 6529, 7, 804, 2, 2, 6529,
	6530, 5, 900, 451, 2, 6530, 6531, 7, 805, 2, 2, 6531, 6538, 3, 2, 2, 2,
	6532, 6533, 7, 45, 2, 2, 6533, 6534, 7, 60, 2, 2, 6534, 6538, 5, 940, 471,
	2, 6535, 6536, 7, 664, 2, 2, 6536, 6538, 5, 492, 247, 2, 6537, 6499, 3,
	2, 2, 2, 6537, 6505, 3, 2, 2, 2, 6537, 6507, 3, 2, 2, 2, 6537, 6510, 3,
	2, 2, 2, 6537, 6513, 3, 2, 2, 2, 6537, 6516, 3, 2, 2, 2, 6537, 6532, 3,
	2, 2, 2, 6537, 6535, 3, 2, 2, 2, 6538, 6540, 3, 2, 2, 2, 6539, 6541, 7,
	807, 2, 2, 6540, 6539, 3, 2, 2, 2, 6540, 6541, 3, 2, 2, 2, 6541, 499, 3,
	2, 2, 2, 6542, 6543, 7, 9, 2, 2, 6543, 6546, 7, 84, 2, 2, 6544, 6547, 5,
	940, 471, 2, 6545, 6547, 7, 74, 2, 2, 6546, 6544, 3, 2, 2, 2, 6546, 6545,
	3, 2, 2, 2, 6547, 6560, 3, 2, 2, 2, 6548, 6549, 7, 595, 2, 2, 6549, 6550,
	7, 598, 2, 2, 6550, 6551, 7, 787, 2, 2, 6551, 6561, 5, 940, 471, 2, 6552,
	6553, 7, 54, 2, 2, 6553, 6561, 5, 940, 471, 2, 6554, 6555, 7, 316, 2, 2,
	6555, 6558, 5, 502, 252, 2, 6556, 6557, 7, 379, 2, 2, 6557, 6559, 5, 572,
	287, 2, 6558, 6556, 3, 2, 2, 2, 6558, 6559, 3, 2, 2, 2, 6559, 6561, 3,
	2, 2, 2, 6560, 6548, 3, 2, 2, 2, 6560, 6552, 3, 2, 2, 2, 6560, 6554, 3,
	2, 2, 2, 6561, 6563, 3, 2, 2, 2, 6562, 6564, 7, 807, 2, 2, 6563, 6562,
	3, 2, 2, 2, 6563, 6564, 3, 2, 2, 2, 6564, 501, 3, 2, 2, 2, 6565, 6589,
	5, 504, 253, 2, 6566, 6589, 5, 506, 254, 2, 6567, 6589, 5, 510, 256, 2,
	6568, 6589, 5, 512, 257, 2, 6569, 6589, 5, 516, 259, 2, 6570, 6589, 5,
	542, 272, 2, 6571, 6589, 5, 544, 273, 2, 6572, 6589, 5, 546, 274, 2, 6573,
	6589, 5, 548, 275, 2, 6574, 6589, 5, 550, 276, 2, 6575, 6589, 5, 552, 277,
	2, 6576, 6589, 5, 554, 278, 2, 6577, 6578, 7, 509, 2, 2, 6578, 6589, 5,
	872, 437, 2, 6579, 6589, 5, 556, 279, 2, 6580, 6589, 5, 558, 280, 2, 6581,
	6589, 5, 560, 281, 2, 6582, 6589, 5, 562, 282, 2, 6583, 6589, 5, 564, 283,
	2, 6584, 6589, 5, 566, 284, 2, 6585, 6589, 5, 568, 285, 2, 6586, 6589,
	5, 570, 286, 2, 6587, 6589, 5, 572, 287, 2, 6588, 6565, 3, 2, 2, 2, 6588,
	6566, 3, 2, 2, 2, 6588, 6567, 3, 2, 2, 2, 6588, 6568, 3, 2, 2, 2, 6588,
	6569, 3, 2, 2, 2, 6588, 6570, 3, 2, 2, 2, 6588, 6571, 3, 2, 2, 2, 6588,
	6572, 3, 2, 2, 2, 6588, 6573, 3, 2, 2, 2, 6588, 6574, 3, 2, 2, 2, 6588,
	6575, 3, 2, 2, 2, 6588, 6576, 3, 2, 2, 2, 6588, 6577, 3, 2, 2, 2, 6588,
	6579, 3, 2, 2, 2, 6588, 6580, 3, 2, 2, 2, 6588, 6581, 3, 2, 2, 2, 6588,
	6582, 3, 2, 2, 2, 6588, 6583, 3, 2, 2, 2, 6588, 6584, 3, 2, 2, 2, 6588,
	6585, 3, 2, 2, 2, 6588, 6586, 3, 2, 2, 2, 6588, 6587, 3, 2, 2, 2, 6589,
	503, 3, 2, 2, 2, 6590, 6591, 7, 412, 2, 2, 6591, 6608, 5, 904, 453, 2,
	6592, 6593, 7, 413, 2, 2, 6593, 6608, 7, 225, 2, 2, 6594, 6599, 7, 228,
	2, 2, 6595, 6596, 7, 540, 2, 2, 6596, 6597, 7, 787, 2, 2, 6597, 6600, 7,
	228, 2, 2, 6598, 6600, 7, 225, 2, 2, 6599, 6595, 3, 2, 2, 2, 6599, 6598,
	3, 2, 2, 2, 6600, 6608, 3, 2, 2, 2, 6601, 6602, 7, 414, 2, 2, 6602, 6608,
	5, 904, 453, 2, 6603, 6604, 7, 415, 2, 2, 6604, 6608, 5, 904, 453, 2, 6605,
	6606, 7, 416, 2, 2, 6606, 6608, 9, 8, 2, 2, 6607, 6590, 3, 2, 2, 2, 6607,
	6592, 3, 2, 2, 2, 6607, 6594, 3, 2, 2, 2, 6607, 6601, 3, 2, 2, 2, 6607,
	6603, 3, 2, 2, 2, 6607, 6605, 3, 2, 2, 2, 6608, 505, 3, 2, 2, 2, 6609,
	6610, 7, 435, 2, 2, 6610, 6626, 7, 787, 2, 2, 6611, 6627, 7, 225, 2, 2,
	6612, 6623, 7, 228, 2, 2, 6613, 6618, 5, 508, 255, 2, 6614, 6615, 7, 806,
	2, 2, 6615, 6617, 5, 508, 255, 2, 6616, 6614, 3, 2, 2, 2, 6617, 6620, 3,
	2, 2, 2, 6618, 6616, 3, 2, 2, 2, 6618, 6619, 3, 2, 2, 2, 6619, 6622, 3,
	2, 2, 2, 6620, 6618, 3, 2, 2, 2, 6621, 6613, 3, 2, 2, 2, 6622, 6625, 3,
	2, 2, 2, 6623, 6621, 3, 2, 2, 2, 6623, 6624, 3, 2, 2, 2, 6624, 6627, 3,
	2, 2, 2, 6625, 6623, 3, 2, 2, 2, 6626, 6611, 3, 2, 2, 2, 6626, 6612, 3,
	2, 2, 2, 6627, 507, 3, 2, 2, 2, 6628, 6629, 7, 411, 2, 2, 6629, 6630, 7,
	787, 2, 2, 6630, 6635, 5, 904, 453, 2, 6631, 6632, 7, 434, 2, 2, 6632,
	6633, 7, 787, 2, 2, 6633, 6635, 9, 61, 2, 2, 6634, 6628, 3, 2, 2, 2, 6634,
	6631, 3, 2, 2, 2, 6635, 509, 3, 2, 2, 2, 6636, 6637, 7, 61, 2, 2, 6637,
	6638, 7, 787, 2, 2, 6638, 6639, 9, 53, 2, 2, 6639, 511, 3, 2, 2, 2, 6640,
	6641, 7, 456, 2, 2, 6641, 6645, 5, 904, 453, 2, 6642, 6643, 7, 457, 2,
	2, 6643, 6645, 9, 62, 2, 2, 6644, 6640, 3, 2, 2, 2, 6644, 6642, 3, 2, 2,
	2, 6645, 513, 3, 2, 2, 2, 6646, 6647, 7, 9, 2, 2, 6647, 6648, 7, 109, 2,
	2, 6648, 6651, 5, 940, 471, 2, 6649, 6650, 7, 19, 2, 2, 6650, 6652, 5,
	940, 471, 2, 6651, 6649, 3, 2, 2, 2, 6651, 6652, 3, 2, 2, 2, 6652, 6660,
	3, 2, 2, 2, 6653, 6654, 7, 330, 2, 2, 6654, 6658, 7, 787, 2, 2, 6655, 6659,
	7, 333, 2, 2, 6656, 6659, 7, 336, 2, 2, 6657, 6659, 7, 482, 2, 2, 6658,
	6655, 3, 2, 2, 2, 6658, 6656, 3, 2, 2, 2, 6658, 6657, 3, 2, 2, 2, 6659,
	6661, 3, 2, 2, 2, 6660, 6653, 3, 2, 2, 2, 6660, 6661, 3, 2, 2, 2, 6661,
	6662, 3, 2, 2, 2, 6662, 6663, 7, 15, 2, 2, 6663, 6664, 7, 345, 2, 2, 6664,
	6665, 7, 804, 2, 2, 6665, 6666, 7, 183, 2, 2, 6666, 6667, 7, 787, 2, 2,
	6667, 6672, 7, 779, 2, 2, 6668, 6669, 7, 806, 2, 2, 6669, 6670, 7, 182,
	2, 2, 6670, 6671, 7, 787, 2, 2, 6671, 6673, 9, 63, 2, 2, 6672, 6668, 3,
	2, 2, 2, 6672, 6673, 3, 2, 2, 2, 6673, 6674, 3, 2, 2, 2, 6674, 6784, 7,
	805, 2, 2, 6675, 6785, 7, 750, 2, 2, 6676, 6677, 7, 133, 2, 2, 6677, 6678,
	7, 312, 2, 2, 6678, 6679, 7, 804, 2, 2, 6679, 6680, 7, 20, 2, 2, 6680,
	6697, 7, 787, 2, 2, 6681, 6683, 7, 378, 2, 2, 6682, 6684, 9, 64, 2, 2,
	6683, 6682, 3, 2, 2, 2, 6683, 6684, 3, 2, 2, 2, 6684, 6687, 3, 2, 2, 2,
	6685, 6686, 7, 42, 2, 2, 6686, 6688, 5, 940, 471, 2, 6687, 6685, 3, 2,
	2, 2, 6687, 6688, 3, 2, 2, 2, 6688, 6698, 3, 2, 2, 2, 6689, 6690, 7, 42,
	2, 2, 6690, 6692, 5, 940, 471, 2, 6691, 6693, 7, 378, 2, 2, 6692, 6691,
	3, 2, 2, 2, 6692, 6693, 3, 2, 2, 2, 6693, 6695, 3, 2, 2, 2, 6694, 6696,
	9, 64, 2, 2, 6695, 6694, 3, 2, 2, 2, 6695, 6696, 3, 2, 2, 2, 6696, 6698,
	3, 2, 2, 2, 6697, 6681, 3, 2, 2, 2, 6697, 6689, 3, 2, 2, 2, 6698, 6716,
	3, 2, 2, 2, 6699, 6701, 7, 806, 2, 2, 6700, 6699, 3, 2, 2, 2, 6700, 6701,
	3, 2, 2, 2, 6701, 6702, 3, 2, 2, 2, 6702, 6703, 7, 492, 2, 2, 6703, 6704,
	7, 787, 2, 2, 6704, 6714, 9, 65, 2, 2, 6705, 6712, 7, 396, 2, 2, 6706,
	6713, 7, 4, 2, 2, 6707, 6713, 7, 657, 2, 2, 6708, 6709, 7, 4, 2, 2, 6709,
	6713, 7, 657, 2, 2, 6710, 6711, 7, 657, 2, 2, 6711, 6713, 7, 4, 2, 2, 6712,
	6706, 3, 2, 2, 2, 6712, 6707, 3, 2, 2, 2, 6712, 6708, 3, 2, 2, 2, 6712,
	6710, 3, 2, 2, 2, 6713, 6715, 3, 2, 2, 2, 6714, 6705, 3, 2, 2, 2, 6714,
	6715, 3, 2, 2, 2, 6715, 6717, 3, 2, 2, 2, 6716, 6700, 3, 2, 2, 2, 6716,
	6717, 3, 2, 2, 2, 6717, 6724, 3, 2, 2, 2, 6718, 6720, 7, 806, 2, 2, 6719,
	6718, 3, 2, 2, 2, 6719, 6720, 3, 2, 2, 2, 6720, 6721, 3, 2, 2, 2, 6721,
	6722, 7, 201, 2, 2, 6722, 6723, 7, 787, 2, 2, 6723, 6725, 9, 66, 2, 2,
	6724, 6719, 3, 2, 2, 2, 6724, 6725, 3, 2, 2, 2, 6725, 6732, 3, 2, 2, 2,
	6726, 6728, 7, 806, 2, 2, 6727, 6726, 3, 2, 2, 2, 6727, 6728, 3, 2, 2,
	2, 6728, 6729, 3, 2, 2, 2, 6729, 6730, 7, 202, 2, 2, 6730, 6731, 7, 787,
	2, 2, 6731, 6733, 7, 779, 2, 2, 6732, 6727, 3, 2, 2, 2, 6732, 6733, 3,
	2, 2, 2, 6733, 6734, 3, 2, 2, 2, 6734, 6785, 7, 805, 2, 2, 6735, 6736,
	7, 133, 2, 2, 6736, 6737, 7, 85, 2, 2, 6737, 6738, 7, 804, 2, 2, 6738,
	6739, 7, 20, 2, 2, 6739, 6756, 7, 787, 2, 2, 6740, 6742, 7, 378, 2, 2,
	6741, 6743, 9, 64, 2, 2, 6742, 6741, 3, 2, 2, 2, 6742, 6743, 3, 2, 2, 2,
	6743, 6746, 3, 2, 2, 2, 6744, 6745, 7, 42, 2, 2, 6745, 6747, 5, 940, 471,
	2, 6746, 6744, 3, 2, 2, 2, 6746, 6747, 3, 2, 2, 2, 6747, 6757, 3, 2, 2,
	2, 6748, 6749, 7, 42, 2, 2, 6749, 6751, 5, 940, 471, 2, 6750, 6752, 7,
	378, 2, 2, 6751, 6750, 3, 2, 2, 2, 6751, 6752, 3, 2, 2, 2, 6752, 6754,
	3, 2, 2, 2, 6753, 6755, 9, 64, 2, 2, 6754, 6753, 3, 2, 2, 2, 6754, 6755,
	3, 2, 2, 2, 6755, 6757, 3, 2, 2, 2, 6756, 6740, 3, 2, 2, 2, 6756, 6748,
	3, 2, 2, 2, 6757, 6775, 3, 2, 2, 2, 6758, 6760, 7, 806, 2, 2, 6759, 6758,
	3, 2, 2, 2, 6759, 6760, 3, 2, 2, 2, 6760, 6761, 3, 2, 2, 2, 6761, 6762,
	7, 492, 2, 2, 6762, 6763, 7, 787, 2, 2, 6763, 6773, 9, 65, 2, 2, 6764,
	6771, 7, 396, 2, 2, 6765, 6772, 7, 4, 2, 2, 6766, 6772, 7, 657, 2, 2, 6767,
	6768, 7, 4, 2, 2, 6768, 6772, 7, 657, 2, 2, 6769, 6770, 7, 657, 2, 2, 6770,
	6772, 7, 4, 2, 2, 6771, 6765, 3, 2, 2, 2, 6771, 6766, 3, 2, 2, 2, 6771,
	6767, 3, 2, 2, 2, 6771, 6769, 3, 2, 2, 2, 6772, 6774, 3, 2, 2, 2, 6773,
	6764, 3, 2, 2, 2, 6773, 6774, 3, 2, 2, 2, 6774, 6776, 3, 2, 2, 2, 6775,
	6759, 3, 2, 2, 2, 6775, 6776, 3, 2, 2, 2, 6776, 6778, 3, 2, 2, 2, 6777,
	6779, 7, 806, 2, 2, 6778, 6777, 3, 2, 2, 2, 6778, 6779, 3, 2, 2, 2, 6779,
	6780, 3, 2, 2, 2, 6780, 6781, 7, 288, 2, 2, 6781, 6782, 7, 787, 2, 2, 6782,
	6783, 9, 67, 2, 2, 6783, 6785, 7, 805, 2, 2, 6784, 6675, 3, 2, 2, 2, 6784,
	6676, 3, 2, 2, 2, 6784, 6735, 3, 2, 2, 2, 6785, 515, 3, 2, 2, 2, 6786,
	6787, 5, 518, 260, 2, 6787, 517, 3, 2, 2, 2, 6788, 6789, 5, 520, 261, 2,
	6789, 6790, 5, 526, 264, 2, 6790, 6795, 3, 2, 2, 2, 6791, 6792, 5, 522,
	262, 2, 6792, 6793, 5, 528, 265, 2, 6793, 6795, 3, 2, 2, 2, 6794, 6788,
	3, 2, 2, 2, 6794, 6791, 3, 2, 2, 2, 6795, 519, 3, 2, 2, 2, 6796, 6797,
	7, 633, 2, 2, 6797, 521, 3, 2, 2, 2, 6798, 6799, 7, 382, 2, 2, 6799, 523,
	3, 2, 2, 2, 6800, 6801, 7, 787, 2, 2, 6801, 525, 3, 2, 2, 2, 6802, 6803,
	5, 524, 263, 2, 6803, 6804, 5, 532, 267, 2, 6804, 6815, 3, 2, 2, 2, 6805,
	6815, 7, 125, 2, 2, 6806, 6815, 7, 135, 2, 2, 6807, 6815, 7, 225, 2, 2,
	6808, 6815, 7, 279, 2, 2, 6809, 6810, 7, 296, 2, 2, 6810, 6815, 9, 68,
	2, 2, 6811, 6815, 7, 727, 2, 2, 6812, 6813, 7, 743, 2, 2, 6813, 6815, 7,
	779, 2, 2, 6814, 6802, 3, 2, 2, 2, 6814, 6805, 3, 2, 2, 2, 6814, 6806,
	3, 2, 2, 2, 6814, 6807, 3, 2, 2, 2, 6814, 6808, 3, 2, 2, 2, 6814, 6809,
	3, 2, 2, 2, 6814, 6811, 3, 2, 2, 2, 6814, 6812, 3, 2, 2, 2, 6815, 527,
	3, 2, 2, 2, 6816, 6817, 5, 524, 263, 2, 6817, 6818, 5, 530, 266, 2, 6818,
	6821, 3, 2, 2, 2, 6819, 6821, 7, 225, 2, 2, 6820, 6816, 3, 2, 2, 2, 6820,
	6819, 3, 2, 2, 2, 6821, 529, 3, 2, 2, 2, 6822, 6823, 5, 532, 267, 2, 6823,
	531, 3, 2, 2, 2, 6824, 6825, 5, 536, 269, 2, 6825, 6826, 5, 540, 271, 2,
	6826, 6827, 5, 534, 268, 2, 6827, 6828, 5, 538, 270, 2, 6828, 533, 3, 2,
	2, 2, 6829, 6830, 7, 808, 2, 2, 6830, 535, 3, 2, 2, 2, 6831, 6832, 7, 345,
	2, 2, 6832, 6833, 7, 808, 2, 2, 6833, 6834, 7, 102, 2, 2, 6834, 537, 3,
	2, 2, 2, 6835, 6836, 7, 779, 2, 2, 6836, 539, 3, 2, 2, 2, 6837, 6838, 5,
	940, 471, 2, 6838, 6839, 7, 799, 2, 2, 6839, 6840, 5, 540, 271, 2, 6840,
	6848, 3, 2, 2, 2, 6841, 6842, 5, 940, 471, 2, 6842, 6843, 7, 799, 2, 2,
	6843, 6846, 3, 2, 2, 2, 6844, 6846, 5, 940, 471, 2, 6845, 6841, 3, 2, 2,
	2, 6845, 6844, 3, 2, 2, 2, 6846, 6848, 3, 2, 2, 2, 6847, 6837, 3, 2, 2,
	2, 6847, 6845, 3, 2, 2, 2, 6848, 541, 3, 2, 2, 2, 6849, 6850, 7, 462, 2,
	2, 6850, 6851, 5, 904, 453, 2, 6851, 543, 3, 2, 2, 2, 6852, 6853, 7, 492,
	2, 2, 6853, 6854, 5, 904, 453, 2, 6854, 545, 3, 2, 2, 2, 6855, 6856, 9,
	69, 2, 2, 6856, 547, 3, 2, 2, 2, 6857, 6858, 9, 70, 2, 2, 6858, 549, 3,
	2, 2, 2, 6859, 6860, 9, 71, 2, 2, 6860, 551, 3, 2, 2, 2, 6861, 6862, 7,
	471, 2, 2, 6862, 6863, 7, 787, 2, 2, 6863, 6864, 9, 72, 2, 2, 6864, 553,
	3, 2, 2, 2, 6865, 6866, 7, 464, 2, 2, 6866, 6891, 5, 904, 453, 2, 6867,
	6868, 7, 748, 2, 2, 6868, 6891, 5, 904, 453, 2, 6869, 6870, 7, 469, 2,
	2, 6870, 6873, 7, 787, 2, 2, 6871, 6874, 5, 940, 471, 2, 6872, 6874, 7,
	783, 2, 2, 6873, 6871, 3, 2, 2, 2, 6873, 6872, 3, 2, 2, 2, 6874, 6891,
	3, 2, 2, 2, 6875, 6876, 7, 468, 2, 2, 6876, 6879, 7, 787, 2, 2, 6877, 6880,
	5, 940, 471, 2, 6878, 6880, 7, 783, 2, 2, 6879, 6877, 3, 2, 2, 2, 6879,
	6878, 3, 2, 2, 2, 6880, 6891, 3, 2, 2, 2, 6881, 6882, 7, 599, 2, 2, 6882,
	6883, 7, 787, 2, 2, 6883, 6891, 9, 8, 2, 2, 6884, 6885, 7, 745, 2, 2, 6885,
	6886, 7, 787, 2, 2, 6886, 6891, 9, 8, 2, 2, 6887, 6888, 7, 751, 2, 2, 6888,
	6889, 7, 787, 2, 2, 6889, 6891, 7, 779, 2, 2, 6890, 6865, 3, 2, 2, 2, 6890,
	6867, 3, 2, 2, 2, 6890, 6869, 3, 2, 2, 2, 6890, 6875, 3, 2, 2, 2, 6890,
	6881, 3, 2, 2, 2, 6890, 6884, 3, 2, 2, 2, 6890, 6887, 3, 2, 2, 2, 6891,
	555, 3, 2, 2, 2, 6892, 6901, 7, 529, 2, 2, 6893, 6894, 7, 417, 2, 2, 6894,
	6895, 7, 146, 2, 2, 6895, 6896, 7, 787, 2, 2, 6896, 6899, 5, 940, 471,
	2, 6897, 6899, 7, 225, 2, 2, 6898, 6893, 3, 2, 2, 2, 6898, 6897, 3, 2,
	2, 2, 6899, 6902, 3, 2, 2, 2, 6900, 6902, 9, 73, 2, 2, 6901, 6898, 3, 2,
	2, 2, 6901, 6900, 3, 2, 2, 2, 6902, 557, 3, 2, 2, 2, 6903, 6904, 7, 594,
	2, 2, 6904, 6905, 9, 8, 2, 2, 6905, 559, 3, 2, 2, 2, 6906, 6907, 7, 630,
	2, 2, 6907, 6908, 9, 74, 2, 2, 6908, 561, 3, 2, 2, 2, 6909, 6910, 7, 667,
	2, 2, 6910, 6916, 9, 75, 2, 2, 6911, 6912, 7, 744, 2, 2, 6912, 6916, 5,
	904, 453, 2, 6913, 6914, 7, 629, 2, 2, 6914, 6916, 9, 76, 2, 2, 6915, 6909,
	3, 2, 2, 2, 6915, 6911, 3, 2, 2, 2, 6915, 6913, 3, 2, 2, 2, 6916, 563,
	3, 2, 2, 2, 6917, 6924, 7, 490, 2, 2, 6918, 6924, 7, 483, 2, 2, 6919, 6924,
	7, 601, 2, 2, 6920, 6924, 7, 494, 2, 2, 6921, 6922, 7, 533, 2, 2, 6922,
	6924, 5, 904, 453, 2, 6923, 6917, 3, 2, 2, 2, 6923, 6918, 3, 2, 2, 2, 6923,
	6919, 3, 2, 2, 2, 6923, 6920, 3, 2, 2, 2, 6923, 6921, 3, 2, 2, 2, 6924,
	565, 3, 2, 2, 2, 6925, 6926, 7, 399, 2, 2, 6926, 6931, 5, 904, 453, 2,
	6927, 6928, 7, 660, 2, 2, 6928, 6931, 9, 8, 2, 2, 6929, 6931, 9, 8, 2,
	2, 6930, 6925, 3, 2, 2, 2, 6930, 6927, 3, 2, 2, 2, 6930, 6929, 3, 2, 2,
	2, 6931, 567, 3, 2, 2, 2, 6932, 6933, 7, 401, 2, 2, 6933, 6954, 5, 904,
	453, 2, 6934, 6935, 7, 400, 2, 2, 6935, 6954, 5, 904, 453, 2, 6936, 6937,
	7, 402, 2, 2, 6937, 6954, 5, 904, 453, 2, 6938, 6939, 7, 403, 2, 2, 6939,
	6954, 5, 904, 453, 2, 6940, 6941, 7, 406, 2, 2, 6941, 6954, 5, 904, 453,
	2, 6942, 6943, 7, 442, 2, 2, 6943, 6944, 7, 787, 2, 2, 6944, 6954, 7, 779,
	2, 2, 6945, 6946, 7, 444, 2, 2, 6946, 6954, 5, 904, 453, 2, 6947, 6948,
	7, 616, 2, 2, 6948, 6954, 5, 904, 453, 2, 6949, 6950, 7, 653, 2, 2, 6950,
	6954, 5, 904, 453, 2, 6951, 6952, 7, 668, 2, 2, 6952, 6954, 5, 904, 453,
	2, 6953, 6932, 3, 2, 2, 2, 6953, 6934, 3, 2, 2, 2, 6953, 6936, 3, 2, 2,
	2, 6953, 6938, 3, 2, 2, 2, 6953, 6940, 3, 2, 2, 2, 6953, 6942, 3, 2, 2,
	2, 6953, 6945, 3, 2, 2, 2, 6953, 6947, 3, 2, 2, 2, 6953, 6949, 3, 2, 2,
	2, 6953, 6951, 3, 2, 2, 2, 6954, 569, 3, 2, 2, 2, 6955, 6956, 7, 735, 2,
	2, 6956, 6957, 7, 787, 2, 2, 6957, 6958, 7, 779, 2, 2, 6958, 6959, 9, 77,
	2, 2, 6959, 571, 3, 2, 2, 2, 6960, 6961, 7, 287, 2, 2, 6961, 6962, 7, 394,
	2, 2, 6962, 6967, 7, 779, 2, 2, 6963, 6964, 7, 287, 2, 2, 6964, 6967, 7,
	537, 2, 2, 6965, 6967, 7, 612, 2, 2, 6966, 6960, 3, 2, 2, 2, 6966, 6963,
	3, 2, 2, 2, 6966, 6965, 3, 2, 2, 2, 6967, 573, 3, 2, 2, 2, 6968, 6969,
	7, 103, 2, 2, 6969, 6972, 7, 157, 2, 2, 6970, 6971, 7, 153, 2, 2, 6971,
	6973, 7, 119, 2, 2, 6972, 6970, 3, 2, 2, 2, 6972, 6973, 3, 2, 2, 2, 6973,
	6990, 3, 2, 2, 2, 6974, 6979, 5, 576, 289, 2, 6975, 6976, 7, 806, 2, 2,
	6976, 6978, 5, 576, 289, 2, 6977, 6975, 3, 2, 2, 2, 6978, 6981, 3, 2, 2,
	2, 6979, 6977, 3, 2, 2, 2, 6979, 6980, 3, 2, 2, 2, 6980, 6991, 3, 2, 2,
	2, 6981, 6979, 3, 2, 2, 2, 6982, 6987, 5, 578, 290, 2, 6983, 6984, 7, 806,
	2, 2, 6984, 6986, 5, 578, 290, 2, 6985, 6983, 3, 2, 2, 2, 6986, 6989, 3,
	2, 2, 2, 6987, 6985, 3, 2, 2, 2, 6987, 6988, 3, 2, 2, 2, 6988, 6991, 3,
	2, 2, 2, 6989, 6987, 3, 2, 2, 2, 6990, 6974, 3, 2, 2, 2, 6990, 6982, 3,
	2, 2, 2, 6991, 6993, 3, 2, 2, 2, 6992, 6994, 7, 807, 2, 2, 6993, 6992,
	3, 2, 2, 2, 6993, 6994, 3, 2, 2, 2, 6994, 575, 3, 2, 2, 2, 6995, 6996,
	5, 940, 471, 2, 6996, 6997, 7, 228, 2, 2, 6997, 6998, 5, 886, 444, 2, 6998,
	577, 3, 2, 2, 2, 6999, 7000, 5, 940, 471, 2, 7000, 7001, 7, 799, 2, 2,
	7001, 7003, 3, 2, 2, 2, 7002, 6999, 3, 2, 2, 2, 7002, 7003, 3, 2, 2, 2,
	7003, 7004, 3, 2, 2, 2, 7004, 7005, 5, 940, 471, 2, 7005, 7006, 7, 799,
	2, 2, 7006, 7007, 5, 940, 471, 2, 7007, 579, 3, 2, 2, 2, 7008, 7009, 7,
	103, 2, 2, 7009, 7012, 9, 54, 2, 2, 7010, 7011, 7, 153, 2, 2, 7011, 7013,
	7, 119, 2, 2, 7012, 7010, 3, 2, 2, 2, 7012, 7013, 3, 2, 2, 2, 7013, 7014,
	3, 2, 2, 2, 7014, 7019, 5, 892, 447, 2, 7015, 7016, 7, 806, 2, 2, 7016,
	7018, 5, 892, 447, 2, 7017, 7015, 3, 2, 2, 2, 7018, 7021, 3, 2, 2, 2, 7019,
	7017, 3, 2, 2, 2, 7019, 7020, 3, 2, 2, 2, 7020, 7023, 3, 2, 2, 2, 7021,
	7019, 3, 2, 2, 2, 7022, 7024, 7, 807, 2, 2, 7023, 7022, 3, 2, 2, 2, 7023,
	7024, 3, 2, 2, 2, 7024, 581, 3, 2, 2, 2, 7025, 7028, 5, 584, 293, 2, 7026,
	7028, 5, 586, 294, 2, 7027, 7025, 3, 2, 2, 2, 7027, 7026, 3, 2, 2, 2, 7028,
	583, 3, 2, 2, 2, 7029, 7030, 7, 103, 2, 2, 7030, 7033, 7, 354, 2, 2, 7031,
	7032, 7, 153, 2, 2, 7032, 7034, 7, 119, 2, 2, 7033, 7031, 3, 2, 2, 2, 7033,
	7034, 3, 2, 2, 2, 7034, 7035, 3, 2, 2, 2, 7035, 7040, 5, 890, 446, 2, 7036,
	7037, 7, 806, 2, 2, 7037, 7039, 5, 890, 446, 2, 7038, 7036, 3, 2, 2, 2,
	7039, 7042, 3, 2, 2, 2, 7040, 7038, 3, 2, 2, 2, 7040, 7041, 3, 2, 2, 2,
	7041, 7044, 3, 2, 2, 2, 7042, 7040, 3, 2, 2, 2, 7043, 7045, 7, 807, 2,
	2, 7044, 7043, 3, 2, 2, 2, 7044, 7045, 3, 2, 2, 2, 7045, 585, 3, 2, 2,
	2, 7046, 7047, 7, 103, 2, 2, 7047, 7050, 7, 354, 2, 2, 7048, 7049, 7, 153,
	2, 2, 7049, 7051, 7, 119, 2, 2, 7050, 7048, 3, 2, 2, 2, 7050, 7051, 3,
	2, 2, 2, 7051, 7052, 3, 2, 2, 2, 7052, 7057, 5, 890, 446, 2, 7053, 7054,
	7, 806, 2, 2, 7054, 7056, 5, 890, 446, 2, 7055, 7053, 3, 2, 2, 2, 7056,
	7059, 3, 2, 2, 2, 7057, 7055, 3, 2, 2, 2, 7057, 7058, 3, 2, 2, 2, 7058,
	7060, 3, 2, 2, 2, 7059, 7057, 3, 2, 2, 2, 7060, 7064, 7, 228, 2, 2, 7061,
	7065, 7, 84, 2, 2, 7062, 7063, 7, 5, 2, 2, 7063, 7065, 7, 310, 2, 2, 7064,
	7061, 3, 2, 2, 2, 7064, 7062, 3, 2, 2, 2, 7065, 7067, 3, 2, 2, 2, 7066,
	7068, 7, 807, 2, 2, 7067, 7066, 3, 2, 2, 2, 7067, 7068, 3, 2, 2, 2, 7068,
	587, 3, 2, 2, 2, 7069, 7070, 7, 103, 2, 2, 7070, 7073, 7, 141, 2, 2, 7071,
	7072, 7, 153, 2, 2, 7072, 7074, 7, 119, 2, 2, 7073, 7071, 3, 2, 2, 2, 7073,
	7074, 3, 2, 2, 2, 7074, 7075, 3, 2, 2, 2, 7075, 7080, 5, 892, 447, 2, 7076,
	7077, 7, 806, 2, 2, 7077, 7079, 5, 892, 447, 2, 7078, 7076, 3, 2, 2, 2,
	7079, 7082, 3, 2, 2, 2, 7080, 7078, 3, 2, 2, 2, 7080, 7081, 3, 2, 2, 2,
	7081, 7084, 3, 2, 2, 2, 7082, 7080, 3, 2, 2, 2, 7083, 7085, 7, 807, 2,
	2, 7084, 7083, 3, 2, 2, 2, 7084, 7085, 3, 2, 2, 2, 7085, 589, 3, 2, 2,
	2, 7086, 7087, 7, 103, 2, 2, 7087, 7097, 7, 329, 2, 2, 7088, 7090, 7, 806,
	2, 2, 7089, 7088, 3, 2, 2, 2, 7089, 7090, 3, 2, 2, 2, 7090, 7094, 3, 2,
	2, 2, 7091, 7092, 5, 888, 445, 2, 7092, 7093, 7, 799, 2, 2, 7093, 7095,
	3, 2, 2, 2, 7094, 7091, 3, 2, 2, 2, 7094, 7095, 3, 2, 2, 2, 7095, 7096,
	3, 2, 2, 2, 7096, 7098, 5, 940, 471, 2, 7097, 7089, 3, 2, 2, 2, 7098, 7099,
	3, 2, 2, 2, 7099, 7097, 3, 2, 2, 2, 7099, 7100, 3, 2, 2, 2, 7100, 7101,
	3, 2, 2, 2, 7101, 7102, 7, 807, 2, 2, 7102, 591, 3, 2, 2, 2, 7103, 7104,
	7, 103, 2, 2, 7104, 7107, 7, 341, 2, 2, 7105, 7106, 7, 153, 2, 2, 7106,
	7108, 7, 119, 2, 2, 7107, 7105, 3, 2, 2, 2, 7107, 7108, 3, 2, 2, 2, 7108,
	7109, 3, 2, 2, 2, 7109, 7111, 5, 888, 445, 2, 7110, 7112, 7, 807, 2, 2,
	7111, 7110, 3, 2, 2, 2, 7111, 7112, 3, 2, 2, 2, 7112, 593, 3, 2, 2, 2,
	7113, 7114, 7, 103, 2, 2, 7114, 7117, 7, 372, 2, 2, 7115, 7116, 7, 153,
	2, 2, 7116, 7118, 7, 119, 2, 2, 7117, 7115, 3, 2, 2, 2, 7117, 7118, 3,
	2, 2, 2, 7118, 7119, 3, 2, 2, 2, 7119, 7124, 5, 890, 446, 2, 7120, 7121,
	7, 806, 2, 2, 7121, 7123, 5, 890, 446, 2, 7122, 7120, 3, 2, 2, 2, 7123,
	7126, 3, 2, 2, 2, 7124, 7122, 3, 2, 2, 2, 7124, 7125, 3, 2, 2, 2, 7125,
	7128, 3, 2, 2, 2, 7126, 7124, 3, 2, 2, 2, 7127, 7129, 7, 807, 2, 2, 7128,
	7127, 3, 2, 2, 2, 7128, 7129, 3, 2, 2, 2, 7129, 595, 3, 2, 2, 2, 7130,
	7131, 7, 72, 2, 2, 7131, 7132, 7, 752, 2, 2, 7132, 7137, 5, 890, 446, 2,
	7133, 7134, 7, 139, 2, 2, 7134, 7135, 5, 932, 467, 2, 7135, 7136, 5, 934,
	468, 2, 7136, 7138, 3, 2, 2, 2, 7137, 7133, 3, 2, 2, 2, 7137, 7138, 3,
	2, 2, 2, 7138, 7145, 3, 2, 2, 2, 7139, 7140, 7, 15, 2, 2, 7140, 7141, 7,
	341, 2, 2, 7141, 7142, 7, 804, 2, 2, 7142, 7143, 5, 676, 339, 2, 7143,
	7144, 7, 805, 2, 2, 7144, 7146, 3, 2, 2, 2, 7145, 7139, 3, 2, 2, 2, 7145,
	7146, 3, 2, 2, 2, 7146, 597, 3, 2, 2, 2, 7147, 7148, 7, 103, 2, 2, 7148,
	7151, 7, 752, 2, 2, 7149, 7150, 7, 153, 2, 2, 7150, 7152, 7, 119, 2, 2,
	7151, 7149, 3, 2, 2, 2, 7151, 7152, 3, 2, 2, 2, 7152, 7153, 3, 2, 2, 2,
	7153, 7154, 5, 890, 446, 2, 7154, 599, 3, 2, 2, 2, 7155, 7158, 5, 602,
	302, 2, 7156, 7158, 5, 604, 303, 2, 7157, 7155, 3, 2, 2, 2, 7157, 7156,
	3, 2, 2, 2, 7158, 601, 3, 2, 2, 2, 7159, 7160, 7, 232, 2, 2, 7160, 7161,
	7, 804, 2, 2, 7161, 7162, 5, 940, 471, 2, 7162, 7163, 7, 806, 2, 2, 7163,
	7164, 7, 783, 2, 2, 7164, 7165, 7, 805, 2, 2, 7165, 603, 3, 2, 2, 2, 7166,
	7167, 7, 231, 2, 2, 7167, 7168, 7, 804, 2, 2, 7168, 7169, 7, 783, 2, 2,
	7169, 7170, 7, 806, 2, 2, 7170, 7171, 7, 783, 2, 2, 7171, 7172, 7, 805,
	2, 2, 7172, 7174, 7, 799, 2, 2, 7173, 7175, 5, 940, 471, 2, 7174, 7173,
	3, 2, 2, 2, 7174, 7175, 3, 2, 2, 2, 7175, 7176, 3, 2, 2, 2, 7176, 7178,
	7, 799, 2, 2, 7177, 7179, 5, 940, 471, 2, 7178, 7177, 3, 2, 2, 2, 7178,
	7179, 3, 2, 2, 2, 7179, 7180, 3, 2, 2, 2, 7180, 7181, 7, 799, 2, 2, 7181,
	7182, 5, 940, 471, 2, 7182, 605, 3, 2, 2, 2, 7183, 7184, 7, 88, 2, 2, 7184,
	7186, 7, 778, 2, 2, 7185, 7187, 7, 15, 2, 2, 7186, 7185, 3, 2, 2, 2, 7186,
	7187, 3, 2, 2, 2, 7187, 7188, 3, 2, 2, 2, 7188, 7190, 5, 670, 336, 2, 7189,
	7191, 7, 807, 2, 2, 7190, 7189, 3, 2, 2, 2, 7190, 7191, 3, 2, 2, 2, 7191,
	7227, 3, 2, 2, 2, 7192, 7193, 7, 88, 2, 2, 7193, 7198, 5, 668, 335, 2,
	7194, 7195, 7, 806, 2, 2, 7195, 7197, 5, 668, 335, 2, 7196, 7194, 3, 2,
	2, 2, 7197, 7200, 3, 2, 2, 2, 7198, 7196, 3, 2, 2, 2, 7198, 7199, 3, 2,
	2, 2, 7199, 7202, 3, 2, 2, 2, 7200, 7198, 3, 2, 2, 2, 7201, 7203, 7, 807,
	2, 2, 7202, 7201, 3, 2, 2, 2, 7202, 7203, 3, 2, 2, 2, 7203, 7227, 3, 2,
	2, 2, 7204, 7205, 7, 88, 2, 2, 7205, 7207, 7, 778, 2, 2, 7206, 7208, 7,
	15, 2, 2, 7207, 7206, 3, 2, 2, 2, 7207, 7208, 3, 2, 2, 2, 7208, 7209, 3,
	2, 2, 2, 7209, 7211, 5, 672, 337, 2, 7210, 7212, 7, 807, 2, 2, 7211, 7210,
	3, 2, 2, 2, 7211, 7212, 3, 2, 2, 2, 7212, 7227, 3, 2, 2, 2, 7213, 7214,
	7, 379, 2, 2, 7214, 7215, 7, 770, 2, 2, 7215, 7216, 7, 804, 2, 2, 7216,
	7218, 7, 783, 2, 2, 7217, 7219, 7, 806, 2, 2, 7218, 7217, 3, 2, 2, 2, 7218,
	7219, 3, 2, 2, 2, 7219, 7220, 3, 2, 2, 2, 7220, 7221, 7, 15, 2, 2, 7221,
	7222, 5, 940, 471, 2, 7222, 7224, 7, 805, 2, 2, 7223, 7225, 7, 807, 2,
	2, 7224, 7223, 3, 2, 2, 2, 7224, 7225, 3, 2, 2, 2, 7225, 7227, 3, 2, 2,
	2, 7226, 7183, 3, 2, 2, 2, 7226, 7192, 3, 2, 2, 2, 7226, 7204, 3, 2, 2,
	2, 7226, 7213, 3, 2, 2, 2, 7227, 607, 3, 2, 2, 2, 7228, 7230, 7, 50, 2,
	2, 7229, 7231, 7, 524, 2, 2, 7230, 7229, 3, 2, 2, 2, 7230, 7231, 3, 2,
	2, 2, 7231, 7232, 3, 2, 2, 2, 7232, 7234, 5, 902, 452, 2, 7233, 7235, 7,
	807, 2, 2, 7234, 7233, 3, 2, 2, 2, 7234, 7235, 3, 2, 2, 2, 7235, 7255,
	3, 2, 2, 2, 7236, 7238, 7, 87, 2, 2, 7237, 7239, 7, 524, 2, 2, 7238, 7237,
	3, 2, 2, 2, 7238, 7239, 3, 2, 2, 2, 7239, 7240, 3, 2, 2, 2, 7240, 7242,
	5, 902, 452, 2, 7241, 7243, 7, 807, 2, 2, 7242, 7241, 3, 2, 2, 2, 7242,
	7243, 3, 2, 2, 2, 7243, 7255, 3, 2, 2, 2, 7244, 7255, 5, 694, 348, 2, 7245,
	7255, 5, 700, 351, 2, 7246, 7248, 7, 230, 2, 2, 7247, 7249, 7, 524, 2,
	2, 7248, 7247, 3, 2, 2, 2, 7248, 7249, 3, 2, 2, 2, 7249, 7250, 3, 2, 2,
	2, 7250, 7252, 5, 902, 452, 2, 7251, 7253, 7, 807, 2, 2, 7252, 7251, 3,
	2, 2, 2, 7252, 7253, 3, 2, 2, 2, 7253, 7255, 3, 2, 2, 2, 7254, 7228, 3,
	2, 2, 2, 7254, 7236, 3, 2, 2, 2, 7254, 7244, 3, 2, 2, 2, 7254, 7245, 3,
	2, 2, 2, 7254, 7246, 3, 2, 2, 2, 7255, 609, 3, 2, 2, 2, 7256, 7257, 7,
	25, 2, 2, 7257, 7258, 7, 84, 2, 2, 7258, 7271, 5, 940, 471, 2, 7259, 7268,
	7, 267, 2, 2, 7260, 7262, 7, 806, 2, 2, 7261, 7260, 3, 2, 2, 2, 7261, 7262,
	3, 2, 2, 2, 7262, 7263, 3, 2, 2, 2, 7263, 7264, 9, 78, 2, 2, 7264, 7265,
	7, 787, 2, 2, 7265, 7267, 7, 783, 2, 2, 7266, 7261, 3, 2, 2, 2, 7267, 7270,
	3, 2, 2, 2, 7268, 7266, 3, 2, 2, 2, 7268, 7269, 3, 2, 2, 2, 7269, 7272,
	3, 2, 2, 2, 7270, 7268, 3, 2, 2, 2, 7271, 7259, 3, 2, 2, 2, 7271, 7272,
	3, 2, 2, 2, 7272, 7281, 3, 2, 2, 2, 7273, 7275, 7, 806, 2, 2, 7274, 7273,
	3, 2, 2, 2, 7274, 7275, 3, 2, 2, 2, 7275, 7276, 3, 2, 2, 2, 7276, 7277,
	9, 78, 2, 2, 7277, 7278, 7, 787, 2, 2, 7278, 7280, 7, 783, 2, 2, 7279,
	7274, 3, 2, 2, 2, 7280, 7283, 3, 2, 2, 2, 7281, 7279, 3, 2, 2, 2, 7281,
	7282, 3, 2, 2, 2, 7282, 7307, 3, 2, 2, 2, 7283, 7281, 3, 2, 2, 2, 7284,
	7289, 7, 348, 2, 2, 7285, 7287, 7, 806, 2, 2, 7286, 7285, 3, 2, 2, 2, 7286,
	7287, 3, 2, 2, 2, 7287, 7288, 3, 2, 2, 2, 7288, 7290, 5, 940, 471, 2, 7289,
	7286, 3, 2, 2, 2, 7290, 7291, 3, 2, 2, 2, 7291, 7289, 3, 2, 2, 2, 7291,
	7292, 3, 2, 2, 2, 7292, 7308, 3, 2, 2, 2, 7293, 7303, 7, 348, 2, 2, 7294,
	7296, 7, 806, 2, 2, 7295, 7294, 3, 2, 2, 2, 7295, 7296, 3, 2, 2, 2, 7296,
	7297, 3, 2, 2, 2, 7297, 7298, 9, 79, 2, 2, 7298, 7301, 7, 787, 2, 2, 7299,
	7302, 7, 783, 2, 2, 7300, 7302, 5, 940, 471, 2, 7301, 7299, 3, 2, 2, 2,
	7301, 7300, 3, 2, 2, 2, 7302, 7304, 3, 2, 2, 2, 7303, 7295, 3, 2, 2, 2,
	7304, 7305, 3, 2, 2, 2, 7305, 7303, 3, 2, 2, 2, 7305, 7306, 3, 2, 2, 2,
	7306, 7308, 3, 2, 2, 2, 7307, 7284, 3, 2, 2, 2, 7307, 7293, 3, 2, 2, 2,
	7308, 7342, 3, 2, 2, 2, 7309, 7310, 7, 204, 2, 2, 7310, 7315, 7, 348, 2,
	2, 7311, 7313, 7, 806, 2, 2, 7312, 7311, 3, 2, 2, 2, 7312, 7313, 3, 2,
	2, 2, 7313, 7314, 3, 2, 2, 2, 7314, 7316, 5, 940, 471, 2, 7315, 7312, 3,
	2, 2, 2, 7316, 7317, 3, 2, 2, 2, 7317, 7315, 3, 2, 2, 2, 7317, 7318, 3,
	2, 2, 2, 7318, 7320, 3, 2, 2, 2, 7319, 7309, 3, 2, 2, 2, 7320, 7321, 3,
	2, 2, 2, 7321, 7319, 3, 2, 2, 2, 7321, 7322, 3, 2, 2, 2, 7322, 7343, 3,
	2, 2, 2, 7323, 7324, 7, 204, 2, 2, 7324, 7334, 7, 348, 2, 2, 7325, 7327,
	7, 806, 2, 2, 7326, 7325, 3, 2, 2, 2, 7326, 7327, 3, 2, 2, 2, 7327, 7328,
	3, 2, 2, 2, 7328, 7329, 9, 79, 2, 2, 7329, 7332, 7, 787, 2, 2, 7330, 7333,
	7, 783, 2, 2, 7331, 7333, 5, 940, 471, 2, 7332, 7330, 3, 2, 2, 2, 7332,
	7331, 3, 2, 2, 2, 7333, 7335, 3, 2, 2, 2, 7334, 7326, 3, 2, 2, 2, 7335,
	7336, 3, 2, 2, 2, 7336, 7334, 3, 2, 2, 2, 7336, 7337, 3, 2, 2, 2, 7337,
	7339, 3, 2, 2, 2, 7338, 7323, 3, 2, 2, 2, 7339, 7340, 3, 2, 2, 2, 7340,
	7338, 3, 2, 2, 2, 7340, 7341, 3, 2, 2, 2, 7341, 7343, 3, 2, 2, 2, 7342,
	7319, 3, 2, 2, 2, 7342, 7338, 3, 2, 2, 2, 7342, 7343, 3, 2, 2, 2, 7343,
	7504, 3, 2, 2, 2, 7344, 7501, 7, 379, 2, 2, 7345, 7347, 7, 806, 2, 2, 7346,
	7345, 3, 2, 2, 2, 7346, 7347, 3, 2, 2, 2, 7347, 7348, 3, 2, 2, 2, 7348,
	7500, 7, 96, 2, 2, 7349, 7351, 7, 806, 2, 2, 7350, 7349, 3, 2, 2, 2, 7350,
	7351, 3, 2, 2, 2, 7351, 7352, 3, 2, 2, 2, 7352, 7500, 7, 71, 2, 2, 7353,
	7355, 7, 806, 2, 2, 7354, 7353, 3, 2, 2, 2, 7354, 7355, 3, 2, 2, 2, 7355,
	7356, 3, 2, 2, 2, 7356, 7500, 9, 80, 2, 2, 7357, 7359, 7, 806, 2, 2, 7358,
	7357, 3, 2, 2, 2, 7358, 7359, 3, 2, 2, 2, 7359, 7360, 3, 2, 2, 2, 7360,
	7361, 7, 477, 2, 2, 7361, 7364, 7, 787, 2, 2, 7362, 7365, 7, 783, 2, 2,
	7363, 7365, 5, 940, 471, 2, 7364, 7362, 3, 2, 2, 2, 7364, 7363, 3, 2, 2,
	2, 7365, 7500, 3, 2, 2, 2, 7366, 7368, 7, 806, 2, 2, 7367, 7366, 3, 2,
	2, 2, 7367, 7368, 3, 2, 2, 2, 7368, 7369, 3, 2, 2, 2, 7369, 7370, 7, 598,
	2, 2, 7370, 7371, 7, 787, 2, 2, 7371, 7500, 5, 940, 471, 2, 7372, 7374,
	7, 806, 2, 2, 7373, 7372, 3, 2, 2, 2, 7373, 7374, 3, 2, 2, 2, 7374, 7375,
	3, 2, 2, 2, 7375, 7500, 7, 454, 2, 2, 7376, 7378, 7, 806, 2, 2, 7377, 7376,
	3, 2, 2, 2, 7377, 7378, 3, 2, 2, 2, 7378, 7379, 3, 2, 2, 2, 7379, 7500,
	7, 132, 2, 2, 7380, 7382, 7, 806, 2, 2, 7381, 7380, 3, 2, 2, 2, 7381, 7382,
	3, 2, 2, 2, 7382, 7395, 3, 2, 2, 2, 7383, 7384, 7, 120, 2, 2, 7384, 7387,
	7, 787, 2, 2, 7385, 7388, 7, 783, 2, 2, 7386, 7388, 5, 940, 471, 2, 7387,
	7385, 3, 2, 2, 2, 7387, 7386, 3, 2, 2, 2, 7388, 7396, 3, 2, 2, 2, 7389,
	7390, 7, 280, 2, 2, 7390, 7393, 7, 787, 2, 2, 7391, 7394, 7, 779, 2, 2,
	7392, 7394, 5, 940, 471, 2, 7393, 7391, 3, 2, 2, 2, 7393, 7392, 3, 2, 2,
	2, 7394, 7396, 3, 2, 2, 2, 7395, 7383, 3, 2, 2, 2, 7395, 7389, 3, 2, 2,
	2, 7396, 7500, 3, 2, 2, 2, 7397, 7399, 7, 806, 2, 2, 7398, 7397, 3, 2,
	2, 2, 7398, 7399, 3, 2, 2, 2, 7399, 7400, 3, 2, 2, 2, 7400, 7500, 9, 81,
	2, 2, 7401, 7403, 7, 806, 2, 2, 7402, 7401, 3, 2, 2, 2, 7402, 7403, 3,
	2, 2, 2, 7403, 7404, 3, 2, 2, 2, 7404, 7500, 9, 82, 2, 2, 7405, 7407, 7,
	806, 2, 2, 7406, 7405, 3, 2, 2, 2, 7406, 7407, 3, 2, 2, 2, 7407, 7408,
	3, 2, 2, 2, 7408, 7500, 9, 83, 2, 2, 7409, 7411, 7, 806, 2, 2, 7410, 7409,
	3, 2, 2, 2, 7410, 7411, 3, 2, 2, 2, 7411, 7412, 3, 2, 2, 2, 7412, 7413,
	7, 196, 2, 2, 7413, 7416, 7, 787, 2, 2, 7414, 7417, 7, 783, 2, 2, 7415,
	7417, 5, 940, 471, 2, 7416, 7414, 3, 2, 2, 2, 7416, 7415, 3, 2, 2, 2, 7417,
	7500, 3, 2, 2, 2, 7418, 7420, 7, 806, 2, 2, 7419, 7418, 3, 2, 2, 2, 7419,
	7420, 3, 2, 2, 2, 7420, 7421, 3, 2, 2, 2, 7421, 7422, 7, 197, 2, 2, 7422,
	7423, 7, 787, 2, 2, 7423, 7500, 7, 783, 2, 2, 7424, 7426, 7, 806, 2, 2,
	7425, 7424, 3, 2, 2, 2, 7425, 7426, 3, 2, 2, 2, 7426, 7427, 3, 2, 2, 2,
	7427, 7428, 7, 30, 2, 2, 7428, 7431, 7, 787, 2, 2, 7429, 7432, 7, 779,
	2, 2, 7430, 7432, 5, 940, 471, 2, 7431, 7429, 3, 2, 2, 2, 7431, 7430, 3,
	2, 2, 2, 7432, 7500, 3, 2, 2, 2, 7433, 7435, 7, 806, 2, 2, 7434, 7433,
	3, 2, 2, 2, 7434, 7435, 3, 2, 2, 2, 7435, 7436, 3, 2, 2, 2, 7436, 7437,
	7, 35, 2, 2, 7437, 7440, 7, 787, 2, 2, 7438, 7441, 7, 779, 2, 2, 7439,
	7441, 5, 940, 471, 2, 7440, 7438, 3, 2, 2, 2, 7440, 7439, 3, 2, 2, 2, 7441,
	7500, 3, 2, 2, 2, 7442, 7444, 7, 806, 2, 2, 7443, 7442, 3, 2, 2, 2, 7443,
	7444, 3, 2, 2, 2, 7444, 7445, 3, 2, 2, 2, 7445, 7446, 7, 190, 2, 2, 7446,
	7449, 7, 787, 2, 2, 7447, 7450, 7, 779, 2, 2, 7448, 7450, 5, 940, 471,
	2, 7449, 7447, 3, 2, 2, 2, 7449, 7448, 3, 2, 2, 2, 7450, 7500, 3, 2, 2,
	2, 7451, 7453, 7, 806, 2, 2, 7452, 7451, 3, 2, 2, 2, 7452, 7453, 3, 2,
	2, 2, 7453, 7454, 3, 2, 2, 2, 7454, 7500, 9, 84, 2, 2, 7455, 7457, 7, 806,
	2, 2, 7456, 7455, 3, 2, 2, 2, 7456, 7457, 3, 2, 2, 2, 7457, 7458, 3, 2,
	2, 2, 7458, 7500, 9, 85, 2, 2, 7459, 7461, 7, 806, 2, 2, 7460, 7459, 3,
	2, 2, 2, 7460, 7461, 3, 2, 2, 2, 7461, 7462, 3, 2, 2, 2, 7462, 7500, 7,
	276, 2, 2, 7463, 7465, 7, 806, 2, 2, 7464, 7463, 3, 2, 2, 2, 7464, 7465,
	3, 2, 2, 2, 7465, 7466, 3, 2, 2, 2, 7466, 7469, 7, 331, 2, 2, 7467, 7468,
	7, 787, 2, 2, 7468, 7470, 7, 779, 2, 2, 7469, 7467, 3, 2, 2, 2, 7469, 7470,
	3, 2, 2, 2, 7470, 7500, 3, 2, 2, 2, 7471, 7473, 7, 806, 2, 2, 7472, 7471,
	3, 2, 2, 2, 7472, 7473, 3, 2, 2, 2, 7473, 7474, 3, 2, 2, 2, 7474, 7500,
	9, 86, 2, 2, 7475, 7477, 7, 806, 2, 2, 7476, 7475, 3, 2, 2, 2, 7476, 7477,
	3, 2, 2, 2, 7477, 7478, 3, 2, 2, 2, 7478, 7500, 9, 87, 2, 2, 7479, 7481,
	7, 806, 2, 2, 7480, 7479, 3, 2, 2, 2, 7480, 7481, 3, 2, 2, 2, 7481, 7482,
	3, 2, 2, 2, 7482, 7483, 7, 492, 2, 2, 7483, 7484, 7, 804, 2, 2, 7484, 7485,
	7, 396, 2, 2, 7485, 7486, 7, 787, 2, 2, 7486, 7487, 9, 88, 2, 2, 7487,
	7488, 7, 806, 2, 2, 7488, 7489, 7, 310, 2, 2, 7489, 7490, 7, 42, 2, 2,
	7490, 7497, 7, 787, 2, 2, 7491, 7498, 5, 940, 471, 2, 7492, 7493, 7, 310,
	2, 2, 7493, 7494, 7, 17, 2, 2, 7494, 7495, 7, 171, 2, 2, 7495, 7496, 7,
	787, 2, 2, 7496, 7498, 5, 940, 471, 2, 7497, 7491, 3, 2, 2, 2, 7497, 7492,
	3, 2, 2, 2, 7498, 7500, 3, 2, 2, 2, 7499, 7346, 3, 2, 2, 2, 7499, 7350,
	3, 2, 2, 2, 7499, 7354, 3, 2, 2, 2, 7499, 7358, 3, 2, 2, 2, 7499, 7367,
	3, 2, 2, 2, 7499, 7373, 3, 2, 2, 2, 7499, 7377, 3, 2, 2, 2, 7499, 7381,
	3, 2, 2, 2, 7499, 7398, 3, 2, 2, 2, 7499, 7402, 3, 2, 2, 2, 7499, 7406,
	3, 2, 2, 2, 7499, 7410, 3, 2, 2, 2, 7499, 7419, 3, 2, 2, 2, 7499, 7425,
	3, 2, 2, 2, 7499, 7434, 3, 2, 2, 2, 7499, 7443, 3, 2, 2, 2, 7499, 7452,
	3, 2, 2, 2, 7499, 7456, 3, 2, 2, 2, 7499, 7460, 3, 2, 2, 2, 7499, 7464,
	3, 2, 2, 2, 7499, 7472, 3, 2, 2, 2, 7499, 7476, 3, 2, 2, 2, 7499, 7480,
	3, 2, 2, 2, 7500, 7503, 3, 2, 2, 2, 7501, 7499, 3, 2, 2, 2, 7501, 7502,
	3, 2, 2, 2, 7502, 7505, 3, 2, 2, 2, 7503, 7501, 3, 2, 2, 2, 7504, 7344,
	3, 2, 2, 2, 7504, 7505, 3, 2, 2, 2, 7505, 611, 3, 2, 2, 2, 7506, 7507,
	7, 25, 2, 2, 7507, 7508, 7, 186, 2, 2, 7508, 7532, 5, 940, 471, 2, 7509,
	7514, 7, 348, 2, 2, 7510, 7512, 7, 806, 2, 2, 7511, 7510, 3, 2, 2, 2, 7511,
	7512, 3, 2, 2, 2, 7512, 7513, 3, 2, 2, 2, 7513, 7515, 5, 940, 471, 2, 7514,
	7511, 3, 2, 2, 2, 7515, 7516, 3, 2, 2, 2, 7516, 7514, 3, 2, 2, 2, 7516,
	7517, 3, 2, 2, 2, 7517, 7533, 3, 2, 2, 2, 7518, 7528, 7, 348, 2, 2, 7519,
	7521, 7, 806, 2, 2, 7520, 7519, 3, 2, 2, 2, 7520, 7521, 3, 2, 2, 2, 7521,
	7522, 3, 2, 2, 2, 7522, 7523, 9, 79, 2, 2, 7523, 7526, 7, 787, 2, 2, 7524,
	7527, 7, 783, 2, 2, 7525, 7527, 5, 940, 471, 2, 7526, 7524, 3, 2, 2, 2,
	7526, 7525, 3, 2, 2, 2, 7527, 7529, 3, 2, 2, 2, 7528, 7520, 3, 2, 2, 2,
	7529, 7530, 3, 2, 2, 2, 7530, 7528, 3, 2, 2, 2, 7530, 7531, 3, 2, 2, 2,
	7531, 7533, 3, 2, 2, 2, 7532, 7509, 3, 2, 2, 2, 7532, 7518, 3, 2, 2, 2,
	7533, 7567, 3, 2, 2, 2, 7534, 7535, 7, 204, 2, 2, 7535, 7540, 7, 348, 2,
	2, 7536, 7538, 7, 806, 2, 2, 7537, 7536, 3, 2, 2, 2, 7537, 7538, 3, 2,
	2, 2, 7538, 7539, 3, 2, 2, 2, 7539, 7541, 5, 940, 471, 2, 7540, 7537, 3,
	2, 2, 2, 7541, 7542, 3, 2, 2, 2, 7542, 7540, 3, 2, 2, 2, 7542, 7543, 3,
	2, 2, 2, 7543, 7545, 3, 2, 2, 2, 7544, 7534, 3, 2, 2, 2, 7545, 7546, 3,
	2, 2, 2, 7546, 7544, 3, 2, 2, 2, 7546, 7547, 3, 2, 2, 2, 7547, 7568, 3,
	2, 2, 2, 7548, 7549, 7, 204, 2, 2, 7549, 7559, 7, 348, 2, 2, 7550, 7552,
	7, 806, 2, 2, 7551, 7550, 3, 2, 2, 2, 7551, 7552, 3, 2, 2, 2, 7552, 7553,
	3, 2, 2, 2, 7553, 7554, 9, 79, 2, 2, 7554, 7557, 7, 787, 2, 2, 7555, 7558,
	7, 783, 2, 2, 7556, 7558, 5, 940, 471, 2, 7557, 7555, 3, 2, 2, 2, 7557,
	7556, 3, 2, 2, 2, 7558, 7560, 3, 2, 2, 2, 7559, 7551, 3, 2, 2, 2, 7560,
	7561, 3, 2, 2, 2, 7561, 7559, 3, 2, 2, 2, 7561, 7562, 3, 2, 2, 2, 7562,
	7564, 3, 2, 2, 2, 7563, 7548, 3, 2, 2, 2, 7564, 7565, 3, 2, 2, 2, 7565,
	7563, 3, 2, 2, 2, 7565, 7566, 3, 2, 2, 2, 7566, 7568, 3, 2, 2, 2, 7567,
	7544, 3, 2, 2, 2, 7567, 7563, 3, 2, 2, 2, 7567, 7568, 3, 2, 2, 2, 7568,
	7742, 3, 2, 2, 2, 7569, 7739, 7, 379, 2, 2, 7570, 7572, 7, 806, 2, 2, 7571,
	7570, 3, 2, 2, 2, 7571, 7572, 3, 2, 2, 2, 7572, 7573, 3, 2, 2, 2, 7573,
	7738, 7, 96, 2, 2, 7574, 7576, 7, 806, 2, 2, 7575, 7574, 3, 2, 2, 2, 7575,
	7576, 3, 2, 2, 2, 7576, 7577, 3, 2, 2, 2, 7577, 7738, 7, 71, 2, 2, 7578,
	7580, 7, 806, 2, 2, 7579, 7578, 3, 2, 2, 2, 7579, 7580, 3, 2, 2, 2, 7580,
	7581, 3, 2, 2, 2, 7581, 7738, 9, 80, 2, 2, 7582, 7584, 7, 806, 2, 2, 7583,
	7582, 3, 2, 2, 2, 7583, 7584, 3, 2, 2, 2, 7584, 7585, 3, 2, 2, 2, 7585,
	7586, 7, 477, 2, 2, 7586, 7589, 7, 787, 2, 2, 7587, 7590, 7, 783, 2, 2,
	7588, 7590, 5, 940, 471, 2, 7589, 7587, 3, 2, 2, 2, 7589, 7588, 3, 2, 2,
	2, 7590, 7738, 3, 2, 2, 2, 7591, 7593, 7, 806, 2, 2, 7592, 7591, 3, 2,
	2, 2, 7592, 7593, 3, 2, 2, 2, 7593, 7594, 3, 2, 2, 2, 7594, 7595, 7, 598,
	2, 2, 7595, 7596, 7, 787, 2, 2, 7596, 7738, 5, 940, 471, 2, 7597, 7599,
	7, 806, 2, 2, 7598, 7597, 3, 2, 2, 2, 7598, 7599, 3, 2, 2, 2, 7599, 7600,
	3, 2, 2, 2, 7600, 7738, 7, 454, 2, 2, 7601, 7603, 7, 806, 2, 2, 7602, 7601,
	3, 2, 2, 2, 7602, 7603, 3, 2, 2, 2, 7603, 7604, 3, 2, 2, 2, 7604, 7738,
	7, 132, 2, 2, 7605, 7607, 7, 806, 2, 2, 7606, 7605, 3, 2, 2, 2, 7606, 7607,
	3, 2, 2, 2, 7607, 7620, 3, 2, 2, 2, 7608, 7609, 7, 120, 2, 2, 7609, 7612,
	7, 787, 2, 2, 7610, 7613, 7, 783, 2, 2, 7611, 7613, 5, 940, 471, 2, 7612,
	7610, 3, 2, 2, 2, 7612, 7611, 3, 2, 2, 2, 7613, 7621, 3, 2, 2, 2, 7614,
	7615, 7, 280, 2, 2, 7615, 7618, 7, 787, 2, 2, 7616, 7619, 7, 779, 2, 2,
	7617, 7619, 5, 940, 471, 2, 7618, 7616, 3, 2, 2, 2, 7618, 7617, 3, 2, 2,
	2, 7619, 7621, 3, 2, 2, 2, 7620, 7608, 3, 2, 2, 2, 7620, 7614, 3, 2, 2,
	2, 7621, 7738, 3, 2, 2, 2, 7622, 7624, 7, 806, 2, 2, 7623, 7622, 3, 2,
	2, 2, 7623, 7624, 3, 2, 2, 2, 7624, 7625, 3, 2, 2, 2, 7625, 7738, 9, 81,
	2, 2, 7626, 7628, 7, 806, 2, 2, 7627, 7626, 3, 2, 2, 2, 7627, 7628, 3,
	2, 2, 2, 7628, 7629, 3, 2, 2, 2, 7629, 7738, 9, 82, 2, 2, 7630, 7632, 7,
	806, 2, 2, 7631, 7630, 3, 2, 2, 2, 7631, 7632, 3, 2, 2, 2, 7632, 7633,
	3, 2, 2, 2, 7633, 7738, 9, 83, 2, 2, 7634, 7636, 7, 806, 2, 2, 7635, 7634,
	3, 2, 2, 2, 7635, 7636, 3, 2, 2, 2, 7636, 7637, 3, 2, 2, 2, 7637, 7638,
	7, 196, 2, 2, 7638, 7641, 7, 787, 2, 2, 7639, 7642, 7, 783, 2, 2, 7640,
	7642, 5, 940, 471, 2, 7641, 7639, 3, 2, 2, 2, 7641, 7640, 3, 2, 2, 2, 7642,
	7738, 3, 2, 2, 2, 7643, 7645, 7, 806, 2, 2, 7644, 7643, 3, 2, 2, 2, 7644,
	7645, 3, 2, 2, 2, 7645, 7646, 3, 2, 2, 2, 7646, 7647, 7, 197, 2, 2, 7647,
	7648, 7, 787, 2, 2, 7648, 7738, 7, 783, 2, 2, 7649, 7651, 7, 806, 2, 2,
	7650, 7649, 3, 2, 2, 2, 7650, 7651, 3, 2, 2, 2, 7651, 7652, 3, 2, 2, 2,
	7652, 7653, 7, 30, 2, 2, 7653, 7656, 7, 787, 2, 2, 7654, 7657, 7, 779,
	2, 2, 7655, 7657, 5, 940, 471, 2, 7656, 7654, 3, 2, 2, 2, 7656, 7655, 3,
	2, 2, 2, 7657, 7738, 3, 2, 2, 2, 7658, 7660, 7, 806, 2, 2, 7659, 7658,
	3, 2, 2, 2, 7659, 7660, 3, 2, 2, 2, 7660, 7661, 3, 2, 2, 2, 7661, 7662,
	7, 35, 2, 2, 7662, 7665, 7, 787, 2, 2, 7663, 7666, 7, 779, 2, 2, 7664,
	7666, 5, 940, 471, 2, 7665, 7663, 3, 2, 2, 2, 7665, 7664, 3, 2, 2, 2, 7666,
	7738, 3, 2, 2, 2, 7667, 7669, 7, 806, 2, 2, 7668, 7667, 3, 2, 2, 2, 7668,
	7669, 3, 2, 2, 2, 7669, 7670, 3, 2, 2, 2, 7670, 7671, 7, 190, 2, 2, 7671,
	7674, 7, 787, 2, 2, 7672, 7675, 7, 779, 2, 2, 7673, 7675, 5, 940, 471,
	2, 7674, 7672, 3, 2, 2, 2, 7674, 7673, 3, 2, 2, 2, 7675, 7738, 3, 2, 2,
	2, 7676, 7678, 7, 806, 2, 2, 7677, 7676, 3, 2, 2, 2, 7677, 7678, 3, 2,
	2, 2, 7678, 7679, 3, 2, 2, 2, 7679, 7738, 9, 84, 2, 2, 7680, 7682, 7, 806,
	2, 2, 7681, 7680, 3, 2, 2, 2, 7681, 7682, 3, 2, 2, 2, 7682, 7683, 3, 2,
	2, 2, 7683, 7738, 9, 85, 2, 2, 7684, 7686, 7, 806, 2, 2, 7685, 7684, 3,
	2, 2, 2, 7685, 7686, 3, 2, 2, 2, 7686, 7687, 3, 2, 2, 2, 7687, 7738, 7,
	276, 2, 2, 7688, 7690, 7, 806, 2, 2, 7689, 7688, 3, 2, 2, 2, 7689, 7690,
	3, 2, 2, 2, 7690, 7691, 3, 2, 2, 2, 7691, 7694, 7, 331, 2, 2, 7692, 7693,
	7, 787, 2, 2, 7693, 7695, 7, 779, 2, 2, 7694, 7692, 3, 2, 2, 2, 7694, 7695,
	3, 2, 2, 2, 7695, 7738, 3, 2, 2, 2, 7696, 7698, 7, 806, 2, 2, 7697, 7696,
	3, 2, 2, 2, 7697, 7698, 3, 2, 2, 2, 7698, 7699, 3, 2, 2, 2, 7699, 7738,
	9, 86, 2, 2, 7700, 7702, 7, 806, 2, 2, 7701, 7700, 3, 2, 2, 2, 7701, 7702,
	3, 2, 2, 2, 7702, 7703, 3, 2, 2, 2, 7703, 7738, 9, 87, 2, 2, 7704, 7706,
	7, 806, 2, 2, 7705, 7704, 3, 2, 2, 2, 7705, 7706, 3, 2, 2, 2, 7706, 7711,
	3, 2, 2, 2, 7707, 7712, 7, 610, 2, 2, 7708, 7709, 7, 728, 2, 2, 7709, 7710,
	7, 787, 2, 2, 7710, 7712, 7, 783, 2, 2, 7711, 7707, 3, 2, 2, 2, 7711, 7708,
	3, 2, 2, 2, 7712, 7738, 3, 2, 2, 2, 7713, 7715, 7, 806, 2, 2, 7714, 7713,
	3, 2, 2, 2, 7714, 7715, 3, 2, 2, 2, 7715, 7716, 3, 2, 2, 2, 7716, 7738,
	7, 611, 2, 2, 7717, 7719, 7, 806, 2, 2, 7718, 7717, 3, 2, 2, 2, 7718, 7719,
	3, 2, 2, 2, 7719, 7720, 3, 2, 2, 2, 7720, 7721, 7, 492, 2, 2, 7721, 7722,
	7, 804, 2, 2, 7722, 7723, 7, 396, 2, 2, 7723, 7724, 7, 787, 2, 2, 7724,
	7725, 9, 88, 2, 2, 7725, 7726, 7, 806, 2, 2, 7726, 7727, 7, 310, 2, 2,
	7727, 7728, 7, 42, 2, 2, 7728, 7735, 7, 787, 2, 2, 7729, 7736, 5, 940,
	471, 2, 7730, 7731, 7, 310, 2, 2, 7731, 7732, 7, 17, 2, 2, 7732, 7733,
	7, 171, 2, 2, 7733, 7734, 7, 787, 2, 2, 7734, 7736, 5, 940, 471, 2, 7735,
	7729, 3, 2, 2, 2, 7735, 7730, 3, 2, 2, 2, 7736, 7738, 3, 2, 2, 2, 7737,
	7571, 3, 2, 2, 2, 7737, 7575, 3, 2, 2, 2, 7737, 7579, 3, 2, 2, 2, 7737,
	7583, 3, 2, 2, 2, 7737, 7592, 3, 2, 2, 2, 7737, 7598, 3, 2, 2, 2, 7737,
	7602, 3, 2, 2, 2, 7737, 7606, 3, 2, 2, 2, 7737, 7623, 3, 2, 2, 2, 7737,
	7627, 3, 2, 2, 2, 7737, 7631, 3, 2, 2, 2, 7737, 7635, 3, 2, 2, 2, 7737,
	7644, 3, 2, 2, 2, 7737, 7650, 3, 2, 2, 2, 7737, 7659, 3, 2, 2, 2, 7737,
	7668, 3, 2, 2, 2, 7737, 7677, 3, 2, 2, 2, 7737, 7681, 3, 2, 2, 2, 7737,
	7685, 3, 2, 2, 2, 7737, 7689, 3, 2, 2, 2, 7737, 7697, 3, 2, 2, 2, 7737,
	7701, 3, 2, 2, 2, 7737, 7705, 3, 2, 2, 2, 7737, 7714, 3, 2, 2, 2, 7737,
	7718, 3, 2, 2, 2, 7738, 7741, 3, 2, 2, 2, 7739, 7737, 3, 2, 2, 2, 7739,
	7740, 3, 2, 2, 2, 7740, 7743, 3, 2, 2, 2, 7741, 7739, 3, 2, 2, 2, 7742,
	7569, 3, 2, 2, 2, 7742, 7743, 3, 2, 2, 2, 7743, 613, 3, 2, 2, 2, 7744,
	7745, 7, 25, 2, 2, 7745, 7746, 7, 42, 2, 2, 7746, 7747, 5, 940, 471, 2,
	7747, 7748, 7, 348, 2, 2, 7748, 7749, 7, 129, 2, 2, 7749, 7750, 7, 787,
	2, 2, 7750, 7782, 7, 783, 2, 2, 7751, 7752, 7, 379, 2, 2, 7752, 7753, 7,
	643, 2, 2, 7753, 7754, 7, 171, 2, 2, 7754, 7777, 7, 804, 2, 2, 7755, 7757,
	7, 806, 2, 2, 7756, 7755, 3, 2, 2, 2, 7756, 7757, 3, 2, 2, 2, 7757, 7758,
	3, 2, 2, 2, 7758, 7759, 7, 129, 2, 2, 7759, 7760, 7, 787, 2, 2, 7760, 7778,
	7, 783, 2, 2, 7761, 7763, 7, 806, 2, 2, 7762, 7761, 3, 2, 2, 2, 7762, 7763,
	3, 2, 2, 2, 7763, 7764, 3, 2, 2, 2, 7764, 7765, 7, 492, 2, 2, 7765, 7766,
	7, 37, 2, 2, 7766, 7767, 7, 243, 2, 2, 7767, 7768, 7, 787, 2, 2, 7768,
	7778, 7, 783, 2, 2, 7769, 7771, 7, 806, 2, 2, 7770, 7769, 3, 2, 2, 2, 7770,
	7771, 3, 2, 2, 2, 7771, 7772, 3, 2, 2, 2, 7772, 7773, 7, 466, 2, 2, 7773,
	7774, 7, 37, 2, 2, 7774, 7775, 7, 243, 2, 2, 7775, 7776, 7, 787, 2, 2,
	7776, 7778, 7, 783, 2, 2, 7777, 7756, 3, 2, 2, 2, 7777, 7762, 3, 2, 2,
	2, 7777, 7770, 3, 2, 2, 2, 7778, 7779, 3, 2, 2, 2, 7779, 7777, 3, 2, 2,
	2, 7779, 7780, 3, 2, 2, 2, 7780, 7781, 3, 2, 2, 2, 7781, 7783, 7, 805,
	2, 2, 7782, 7751, 3, 2, 2, 2, 7782, 7783, 3, 2, 2, 2, 7783, 615, 3, 2,
	2, 2, 7784, 7785, 7, 25, 2, 2, 7785, 7786, 7, 188, 2, 2, 7786, 7787, 7,
	171, 2, 2, 7787, 7788, 7, 348, 2, 2, 7788, 7789, 7, 129, 2, 2, 7789, 7790,
	7, 787, 2, 2, 7790, 7791, 7, 783, 2, 2, 7791, 7792, 7, 492, 2, 2, 7792,
	7793, 7, 37, 2, 2, 7793, 7794, 7, 243, 2, 2, 7794, 7795, 7, 787, 2, 2,
	7795, 7796, 7, 783, 2, 2, 7796, 617, 3, 2, 2, 2, 7797, 7798, 7, 25, 2,
	2, 7798, 7799, 7, 311, 2, 2, 7799, 7800, 7, 188, 2, 2, 7800, 7801, 7, 171,
	2, 2, 7801, 7802, 7, 348, 2, 2, 7802, 7803, 7, 129, 2, 2, 7803, 7804, 7,
	787, 2, 2, 7804, 7805, 7, 783, 2, 2, 7805, 7806, 7, 492, 2, 2, 7806, 7807,
	7, 37, 2, 2, 7807, 7808, 7, 243, 2, 2, 7808, 7809, 7, 787, 2, 2, 7809,
	7810, 7, 783, 2, 2, 7810, 619, 3, 2, 2, 2, 7811, 7814, 7, 118, 2, 2, 7812,
	7813, 7, 778, 2, 2, 7813, 7815, 7, 787, 2, 2, 7814, 7812, 3, 2, 2, 2, 7814,
	7815, 3, 2, 2, 2, 7815, 7818, 3, 2, 2, 2, 7816, 7819, 5, 892, 447, 2, 7817,
	7819, 5, 706, 354, 2, 7818, 7816, 3, 2, 2, 2, 7818, 7817, 3, 2, 2, 2, 7819,
	7828, 3, 2, 2, 2, 7820, 7825, 5, 622, 312, 2, 7821, 7822, 7, 806, 2, 2,
	7822, 7824, 5, 622, 312, 2, 7823, 7821, 3, 2, 2, 2, 7824, 7827, 3, 2, 2,
	2, 7825, 7823, 3, 2, 2, 2, 7825, 7826, 3, 2, 2, 2, 7826, 7829, 3, 2, 2,
	2, 7827, 7825, 3, 2, 2, 2, 7828, 7820, 3, 2, 2, 2, 7828, 7829, 3, 2, 2,
	2, 7829, 7831, 3, 2, 2, 2, 7830, 7832, 7, 807, 2, 2, 7831, 7830, 3, 2,
	2, 2, 7831, 7832, 3, 2, 2, 2, 7832, 7856, 3, 2, 2, 2, 7833, 7834, 7, 118,
	2, 2, 7834, 7835, 7, 804, 2, 2, 7835, 7840, 5, 624, 313, 2, 7836, 7837,
	7, 812, 2, 2, 7837, 7839, 5, 624, 313, 2, 7838, 7836, 3, 2, 2, 2, 7839,
	7842, 3, 2, 2, 2, 7840, 7838, 3, 2, 2, 2, 7840, 7841, 3, 2, 2, 2, 7841,
	7843, 3, 2, 2, 2, 7842, 7840, 3, 2, 2, 2, 7843, 7850, 7, 805, 2, 2, 7844,
	7846, 7, 15, 2, 2, 7845, 7844, 3, 2, 2, 2, 7845, 7846, 3, 2, 2, 2, 7846,
	7847, 3, 2, 2, 2, 7847, 7848, 9, 89, 2, 2, 7848, 7849, 7, 787, 2, 2, 7849,
	7851, 7, 783, 2, 2, 7850, 7845, 3, 2, 2, 2, 7850, 7851, 3, 2, 2, 2, 7851,
	7853, 3, 2, 2, 2, 7852, 7854, 7, 807, 2, 2, 7853, 7852, 3, 2, 2, 2, 7853,
	7854, 3, 2, 2, 2, 7854, 7856, 3, 2, 2, 2, 7855, 7811, 3, 2, 2, 2, 7855,
	7833, 3, 2, 2, 2, 7856, 621, 3, 2, 2, 2, 7857, 7858, 7, 778, 2, 2, 7858,
	7860, 7, 787, 2, 2, 7859, 7857, 3, 2, 2, 2, 7859, 7860, 3, 2, 2, 2, 7860,
	7870, 3, 2, 2, 2, 7861, 7864, 5, 704, 353, 2, 7862, 7864, 5, 940, 471,
	2, 7863, 7861, 3, 2, 2, 2, 7863, 7862, 3, 2, 2, 2, 7864, 7866, 3, 2, 2,
	2, 7865, 7867, 9, 90, 2, 2, 7866, 7865, 3, 2, 2, 2, 7866, 7867, 3, 2, 2,
	2, 7867, 7871, 3, 2, 2, 2, 7868, 7871, 7, 89, 2, 2, 7869, 7871, 7, 222,
	2, 2, 7870, 7863, 3, 2, 2, 2, 7870, 7868, 3, 2, 2, 2, 7870, 7869, 3, 2,
	2, 2, 7871, 623, 3, 2, 2, 2, 7872, 7873, 9, 3, 2, 2, 7873, 625, 3, 2, 2,
	2, 7874, 7876, 5, 666, 334, 2, 7875, 7877, 7, 807, 2, 2, 7876, 7875, 3,
	2, 2, 2, 7876, 7877, 3, 2, 2, 2, 7877, 7934, 3, 2, 2, 2, 7878, 7890, 7,
	145, 2, 2, 7879, 7881, 7, 5, 2, 2, 7880, 7882, 7, 645, 2, 2, 7881, 7880,
	3, 2, 2, 2, 7881, 7882, 3, 2, 2, 2, 7882, 7891, 3, 2, 2, 2, 7883, 7888,
	5, 652, 327, 2, 7884, 7885, 7, 804, 2, 2, 7885, 7886, 5, 900, 451, 2, 7886,
	7887, 7, 805, 2, 2, 7887, 7889, 3, 2, 2, 2, 7888, 7884, 3, 2, 2, 2, 7888,
	7889, 3, 2, 2, 2, 7889, 7891, 3, 2, 2, 2, 7890, 7879, 3, 2, 2, 2, 7890,
	7883, 3, 2, 2, 2, 7891, 7894, 3, 2, 2, 2, 7892, 7893, 7, 228, 2, 2, 7893,
	7895, 5, 888, 445, 2, 7894, 7892, 3, 2, 2, 2, 7894, 7895, 3, 2, 2, 2, 7895,
	7896, 3, 2, 2, 2, 7896, 7897, 7, 348, 2, 2, 7897, 7902, 5, 940, 471, 2,
	7898, 7899, 7, 806, 2, 2, 7899, 7901, 5, 940, 471, 2, 7900, 7898, 3, 2,
	2, 2, 7901, 7904, 3, 2, 2, 2, 7902, 7900, 3, 2, 2, 2, 7902, 7903, 3, 2,
	2, 2, 7903, 7908, 3, 2, 2, 2, 7904, 7902, 3, 2, 2, 2, 7905, 7906, 7, 379,
	2, 2, 7906, 7907, 7, 145, 2, 2, 7907, 7909, 7, 235, 2, 2, 7908, 7905, 3,
	2, 2, 2, 7908, 7909, 3, 2, 2, 2, 7909, 7912, 3, 2, 2, 2, 7910, 7911, 7,
	15, 2, 2, 7911, 7913, 5, 940, 471, 2, 7912, 7910, 3, 2, 2, 2, 7912, 7913,
	3, 2, 2, 2, 7913, 7915, 3, 2, 2, 2, 7914, 7916, 7, 807, 2, 2, 7915, 7914,
	3, 2, 2, 2, 7915, 7916, 3, 2, 2, 2, 7916, 7934, 3, 2, 2, 2, 7917, 7924,
	7, 283, 2, 2, 7918, 7919, 7, 804, 2, 2, 7919, 7920, 7, 379, 2, 2, 7920,
	7921, 7, 447, 2, 2, 7921, 7922, 7, 787, 2, 2, 7922, 7923, 7, 778, 2, 2,
	7923, 7925, 7, 805, 2, 2, 7924, 7918, 3, 2, 2, 2, 7924, 7925, 3, 2, 2,
	2, 7925, 7927, 3, 2, 2, 2, 7926, 7928, 7, 807, 2, 2, 7927, 7926, 3, 2,
	2, 2, 7927, 7928, 3, 2, 2, 2, 7928, 7934, 3, 2, 2, 2, 7929, 7934, 5, 638,
	320, 2, 7930, 7934, 5, 640, 321, 2, 7931, 7934, 5, 642, 322, 2, 7932, 7934,
	5, 628, 315, 2, 7933, 7874, 3, 2, 2, 2, 7933, 7878, 3, 2, 2, 2, 7933, 7917,
	3, 2, 2, 2, 7933, 7929, 3, 2, 2, 2, 7933, 7930, 3, 2, 2, 2, 7933, 7931,
	3, 2, 2, 2, 7933, 7932, 3, 2, 2, 2, 7934, 627, 3, 2, 2, 2, 7935, 7936,
	7, 72, 2, 2, 7936, 7937, 7, 42, 2, 2, 7937, 7940, 5, 940, 471, 2, 7938,
	7939, 7, 19, 2, 2, 7939, 7941, 5, 940, 471, 2, 7940, 7938, 3, 2, 2, 2,
	7940, 7941, 3, 2, 2, 2, 7941, 7945, 3, 2, 2, 2, 7942, 7943, 7, 139, 2,
	2, 7943, 7946, 5, 630, 316, 2, 7944, 7946, 5, 634, 318, 2, 7945, 7942,
	3, 2, 2, 2, 7945, 7944, 3, 2, 2, 2, 7946, 7953, 3, 2, 2, 2, 7947, 7948,
	7, 387, 2, 2, 7948, 7949, 7, 133, 2, 2, 7949, 7950, 7, 27, 2, 2, 7950,
	7951, 7, 479, 2, 2, 7951, 7952, 7, 787, 2, 2, 7952, 7954, 9, 8, 2, 2, 7953,
	7947, 3, 2, 2, 2, 7953, 7954, 3, 2, 2, 2, 7954, 629, 3, 2, 2, 2, 7955,
	7956, 7, 407, 2, 2, 7956, 7973, 5, 940, 471, 2, 7957, 7959, 7, 495, 2,
	2, 7958, 7957, 3, 2, 2, 2, 7958, 7959, 3, 2, 2, 2, 7959, 7960, 3, 2, 2,
	2, 7960, 7961, 7, 129, 2, 2, 7961, 7962, 7, 787, 2, 2, 7962, 7970, 7, 783,
	2, 2, 7963, 7964, 7, 379, 2, 2, 7964, 7965, 7, 643, 2, 2, 7965, 7966, 7,
	171, 2, 2, 7966, 7967, 7, 804, 2, 2, 7967, 7968, 5, 632, 317, 2, 7968,
	7969, 7, 805, 2, 2, 7969, 7971, 3, 2, 2, 2, 7970, 7963, 3, 2, 2, 2, 7970,
	7971, 3, 2, 2, 2, 7971, 7973, 3, 2, 2, 2, 7972, 7955, 3, 2, 2, 2, 7972,
	7958, 3, 2, 2, 2, 7973, 631, 3, 2, 2, 2, 7974, 7975, 9, 91, 2, 2, 7975,
	7976, 7, 787, 2, 2, 7976, 7983, 7, 783, 2, 2, 7977, 7978, 7, 806, 2, 2,
	7978, 7979, 9, 92, 2, 2, 7979, 7980, 7, 37, 2, 2, 7980, 7981, 7, 243, 2,
	2, 7981, 7982, 7, 787, 2, 2, 7982, 7984, 7, 783, 2, 2, 7983, 7977, 3, 2,
	2, 2, 7983, 7984, 3, 2, 2, 2, 7984, 633, 3, 2, 2, 2, 7985, 7986, 7, 492,
	2, 2, 7986, 7987, 7, 37, 2, 2, 7987, 7988, 7, 243, 2, 2, 7988, 7989, 7,
	787, 2, 2, 7989, 7991, 7, 783, 2, 2, 7990, 7985, 3, 2, 2, 2, 7990, 7991,
	3, 2, 2, 2, 7991, 7992, 3, 2, 2, 2, 7992, 7993, 7, 379, 2, 2, 7993, 7994,
	7, 726, 2, 2, 7994, 7995, 7, 787, 2, 2, 7995, 8000, 7, 783, 2, 2, 7996,
	7997, 7, 806, 2, 2, 7997, 7999, 5, 636, 319, 2, 7998, 7996, 3, 2, 2, 2,
	7999, 8002, 3, 2, 2, 2, 8000, 7998, 3, 2, 2, 2, 8000, 8001, 3, 2, 2, 2,
	8001, 635, 3, 2, 2, 2, 8002, 8000, 3, 2, 2, 2, 8003, 8004, 9, 93, 2, 2,
	8004, 8005, 7, 787, 2, 2, 8005, 8006, 7, 783, 2, 2, 8006, 637, 3, 2, 2,
	2, 8007, 8008, 7, 230, 2, 2, 8008, 8009, 7, 731, 2, 2, 8009, 8010, 7, 171,
	2, 2, 8010, 8011, 5, 940, 471, 2, 8011, 8012, 7, 466, 2, 2, 8012, 8013,
	7, 37, 2, 2, 8013, 8014, 5, 650, 326, 2, 8014, 8024, 3, 2, 2, 2, 8015,
	8016, 7, 230, 2, 2, 8016, 8017, 7, 188, 2, 2, 8017, 8018, 7, 171, 2, 2,
	8018, 8019, 7, 466, 2, 2, 8019, 8020, 7, 37, 2, 2, 8020, 8021, 7, 243,
	2, 2, 8021, 8022, 7, 787, 2, 2, 8022, 8024, 7, 783, 2, 2, 8023, 8007, 3,
	2, 2, 2, 8023, 8015, 3, 2, 2, 2, 8024, 639, 3, 2, 2, 2, 8025, 8026, 7,
	50, 2, 2, 8026, 8027, 7, 731, 2, 2, 8027, 8028, 7, 171, 2, 2, 8028, 8037,
	5, 940, 471, 2, 8029, 8030, 7, 50, 2, 2, 8030, 8031, 7, 5, 2, 2, 8031,
	8032, 7, 731, 2, 2, 8032, 8037, 7, 552, 2, 2, 8033, 8034, 7, 50, 2, 2,
	8034, 8035, 7, 188, 2, 2, 8035, 8037, 7, 171, 2, 2, 8036, 8025, 3, 2, 2,
	2, 8036, 8029, 3, 2, 2, 2, 8036, 8033, 3, 2, 2, 2, 8037, 641, 3, 2, 2,
	2, 8038, 8039, 7, 72, 2, 2, 8039, 8040, 7, 188, 2, 2, 8040, 8041, 7, 171,
	2, 2, 8041, 8042, 7, 492, 2, 2, 8042, 8043, 7, 37, 2, 2, 8043, 8044, 7,
	243, 2, 2, 8044, 8045, 7, 787, 2, 2, 8045, 8074, 7, 783, 2, 2, 8046, 8047,
	7, 72, 2, 2, 8047, 8048, 7, 731, 2, 2, 8048, 8049, 7, 171, 2, 2, 8049,
	8052, 5, 940, 471, 2, 8050, 8051, 7, 19, 2, 2, 8051, 8053, 5, 940, 471,
	2, 8052, 8050, 3, 2, 2, 2, 8052, 8053, 3, 2, 2, 2, 8053, 8057, 3, 2, 2,
	2, 8054, 8055, 7, 139, 2, 2, 8055, 8056, 7, 648, 2, 2, 8056, 8058, 5, 940,
	471, 2, 8057, 8054, 3, 2, 2, 2, 8057, 8058, 3, 2, 2, 2, 8058, 8059, 3,
	2, 2, 2, 8059, 8069, 7, 379, 2, 2, 8060, 8065, 5, 644, 323, 2, 8061, 8062,
	7, 492, 2, 2, 8062, 8063, 7, 37, 2, 2, 8063, 8065, 5, 648, 325, 2, 8064,
	8060, 3, 2, 2, 2, 8064, 8061, 3, 2, 2, 2, 8065, 8067, 3, 2, 2, 2, 8066,
	8068, 7, 806, 2, 2, 8067, 8066, 3, 2, 2, 2, 8067, 8068, 3, 2, 2, 2, 8068,
	8070, 3, 2, 2, 2, 8069, 8064, 3, 2, 2, 2, 8070, 8071, 3, 2, 2, 2, 8071,
	8069, 3, 2, 2, 2, 8071, 8072, 3, 2, 2, 2, 8072, 8074, 3, 2, 2, 2, 8073,
	8038, 3, 2, 2, 2, 8073, 8046, 3, 2, 2, 2, 8074, 643, 3, 2, 2, 2, 8075,
	8076, 7, 553, 2, 2, 8076, 8077, 7, 787, 2, 2, 8077, 8091, 7, 783, 2, 2,
	8078, 8079, 7, 396, 2, 2, 8079, 8080, 7, 787, 2, 2, 8080, 8091, 5, 646,
	324, 2, 8081, 8082, 7, 535, 2, 2, 8082, 8083, 7, 787, 2, 2, 8083, 8091,
	7, 783, 2, 2, 8084, 8085, 7, 649, 2, 2, 8085, 8086, 7, 787, 2, 2, 8086,
	8091, 7, 783, 2, 2, 8087, 8088, 7, 453, 2, 2, 8088, 8089, 7, 787, 2, 2,
	8089, 8091, 9, 11, 2, 2, 8090, 8075, 3, 2, 2, 2, 8090, 8078, 3, 2, 2, 2,
	8090, 8081, 3, 2, 2, 2, 8090, 8084, 3, 2, 2, 2, 8090, 8087, 3, 2, 2, 2,
	8091, 645, 3, 2, 2, 2, 8092, 8093, 9, 49, 2, 2, 8093, 647, 3, 2, 2, 2,
	8094, 8095, 7, 42, 2, 2, 8095, 8106, 5, 940, 471, 2, 8096, 8097, 7, 17,
	2, 2, 8097, 8098, 7, 171, 2, 2, 8098, 8106, 5, 940, 471, 2, 8099, 8100,
	7, 731, 2, 2, 8100, 8101, 7, 171, 2, 2, 8101, 8106, 5, 940, 471, 2, 8102,
	8103, 7, 243, 2, 2, 8103, 8104, 7, 787, 2, 2, 8104, 8106, 7, 783, 2, 2,
	8105, 8094, 3, 2, 2, 2, 8105, 8096, 3, 2, 2, 2, 8105, 8099, 3, 2, 2, 2,
	8105, 8102, 3, 2, 2, 2, 8106, 649, 3, 2, 2, 2, 8107, 8108, 7, 42, 2, 2,
	8108, 8113, 5, 940, 471, 2, 8109, 8110, 7, 379, 2, 2, 8110, 8111, 7, 243,
	2, 2, 8111, 8112, 7, 787, 2, 2, 8112, 8114, 7, 783, 2, 2, 8113, 8109, 3,
	2, 2, 2, 8113, 8114, 3, 2, 2, 2, 8114, 8131, 3, 2, 2, 2, 8115, 8116, 7,
	17, 2, 2, 8116, 8117, 7, 171, 2, 2, 8117, 8122, 5, 940, 471, 2, 8118, 8119,
	7, 379, 2, 2, 8119, 8120, 7, 243, 2, 2, 8120, 8121, 7, 787, 2, 2, 8121,
	8123, 7, 783, 2, 2, 8122, 8118, 3, 2, 2, 2, 8122, 8123, 3, 2, 2, 2, 8123,
	8131, 3, 2, 2, 2, 8124, 8125, 7, 731, 2, 2, 8125, 8126, 7, 171, 2, 2, 8126,
	8131, 5, 940, 471, 2, 8127, 8128, 7, 243, 2, 2, 8128, 8129, 7, 787, 2,
	2, 8129, 8131, 7, 783, 2, 2, 8130, 8107, 3, 2, 2, 2, 8130, 8115, 3, 2,
	2, 2, 8130, 8124, 3, 2, 2, 2, 8130, 8127, 3, 2, 2, 2, 8131, 651, 3, 2,
	2, 2, 8132, 8159, 7, 118, 2, 2, 8133, 8134, 7, 372, 2, 2, 8134, 8159, 5,
	940, 471, 2, 8135, 8136, 7, 734, 2, 2, 8136, 8159, 5, 940, 471, 2, 8137,
	8139, 7, 446, 2, 2, 8138, 8140, 5, 940, 471, 2, 8139, 8138, 3, 2, 2, 2,
	8139, 8140, 3, 2, 2, 2, 8140, 8159, 3, 2, 2, 2, 8141, 8142, 7, 72, 2, 2,
	8142, 8159, 9, 94, 2, 2, 8143, 8159, 7, 711, 2, 2, 8144, 8159, 7, 538,
	2, 2, 8145, 8159, 7, 305, 2, 2, 8146, 8159, 7, 269, 2, 2, 8147, 8159, 7,
	161, 2, 2, 8148, 8156, 7, 9, 2, 2, 8149, 8151, 7, 12, 2, 2, 8150, 8149,
	3, 2, 2, 2, 8150, 8151, 3, 2, 2, 2, 8151, 8154, 3, 2, 2, 2, 8152, 8155,
	5, 940, 471, 2, 8153, 8155, 7, 84, 2, 2, 8154, 8152, 3, 2, 2, 2, 8154,
	8153, 3, 2, 2, 2, 8155, 8157, 3, 2, 2, 2, 8156, 8150, 3, 2, 2, 2, 8156,
	8157, 3, 2, 2, 2, 8157, 8159, 3, 2, 2, 2, 8158, 8132, 3, 2, 2, 2, 8158,
	8133, 3, 2, 2, 2, 8158, 8135, 3, 2, 2, 2, 8158, 8137, 3, 2, 2, 2, 8158,
	8141, 3, 2, 2, 2, 8158, 8143, 3, 2, 2, 2, 8158, 8144, 3, 2, 2, 2, 8158,
	8145, 3, 2, 2, 2, 8158, 8146, 3, 2, 2, 2, 8158, 8147, 3, 2, 2, 2, 8158,
	8148, 3, 2, 2, 2, 8159, 653, 3, 2, 2, 2, 8160, 8161, 7, 316, 2, 2, 8161,
	8164, 7, 778, 2, 2, 8162, 8163, 7, 799, 2, 2, 8163, 8165, 5, 940, 471,
	2, 8164, 8162, 3, 2, 2, 2, 8164, 8165, 3, 2, 2, 2, 8165, 8166, 3, 2, 2,
	2, 8166, 8167, 7, 787, 2, 2, 8167, 8169, 5, 706, 354, 2, 8168, 8170, 7,
	807, 2, 2, 8169, 8168, 3, 2, 2, 2, 8169, 8170, 3, 2, 2, 2, 8170, 8200,
	3, 2, 2, 2, 8171, 8172, 7, 316, 2, 2, 8172, 8173, 7, 778, 2, 2, 8173, 8174,
	5, 946, 474, 2, 8174, 8176, 5, 706, 354, 2, 8175, 8177, 7, 807, 2, 2, 8176,
	8175, 3, 2, 2, 2, 8176, 8177, 3, 2, 2, 2, 8177, 8200, 3, 2, 2, 2, 8178,
	8179, 7, 316, 2, 2, 8179, 8180, 7, 778, 2, 2, 8180, 8181, 7, 787, 2, 2,
	8181, 8182, 7, 79, 2, 2, 8182, 8193, 5, 696, 349, 2, 8183, 8191, 7, 133,
	2, 2, 8184, 8185, 7, 265, 2, 2, 8185, 8192, 7, 622, 2, 2, 8186, 8189, 7,
	363, 2, 2, 8187, 8188, 7, 224, 2, 2, 8188, 8190, 5, 900, 451, 2, 8189,
	8187, 3, 2, 2, 2, 8189, 8190, 3, 2, 2, 2, 8190, 8192, 3, 2, 2, 2, 8191,
	8184, 3, 2, 2, 2, 8191, 8186, 3, 2, 2, 2, 8192, 8194, 3, 2, 2, 2, 8193,
	8183, 3, 2, 2, 2, 8193, 8194, 3, 2, 2, 2, 8194, 8196, 3, 2, 2, 2, 8195,
	8197, 7, 807, 2, 2, 8196, 8195, 3, 2, 2, 2, 8196, 8197, 3, 2, 2, 2, 8197,
	8200, 3, 2, 2, 2, 8198, 8200, 5, 702, 352, 2, 8199, 8160, 3, 2, 2, 2, 8199,
	8171, 3, 2, 2, 2, 8199, 8178, 3, 2, 2, 2, 8199, 8198, 3, 2, 2, 2, 8200,
	655, 3, 2, 2, 2, 8201, 8202, 7, 27, 2, 2, 8202, 8203, 7, 99, 2, 2, 8203,
	8206, 9, 95, 2, 2, 8204, 8207, 5, 940, 471, 2, 8205, 8207, 7, 778, 2, 2,
	8206, 8204, 3, 2, 2, 2, 8206, 8205, 3, 2, 2, 2, 8206, 8207, 3, 2, 2, 2,
	8207, 8209, 3, 2, 2, 2, 8208, 8210, 7, 807, 2, 2, 8209, 8208, 3, 2, 2,
	2, 8209, 8210, 3, 2, 2, 2, 8210, 8279, 3, 2, 2, 2, 8211, 8212, 7, 27, 2,
	2, 8212, 8222, 9, 95, 2, 2, 8213, 8216, 5, 940, 471, 2, 8214, 8216, 7,
	778, 2, 2, 8215, 8213, 3, 2, 2, 2, 8215, 8214, 3, 2, 2, 2, 8216, 8220,
	3, 2, 2, 2, 8217, 8218, 7, 379, 2, 2, 8218, 8219, 7, 570, 2, 2, 8219, 8221,
	7, 783, 2, 2, 8220, 8217, 3, 2, 2, 2, 8220, 8221, 3, 2, 2, 2, 8221, 8223,
	3, 2, 2, 2, 8222, 8215, 3, 2, 2, 2, 8222, 8223, 3, 2, 2, 2, 8223, 8225,
	3, 2, 2, 2, 8224, 8226, 7, 807, 2, 2, 8225, 8224, 3, 2, 2, 2, 8225, 8226,
	3, 2, 2, 2, 8226, 8279, 3, 2, 2, 2, 8227, 8228, 7, 57, 2, 2, 8228, 8241,
	9, 95, 2, 2, 8229, 8232, 5, 940, 471, 2, 8230, 8232, 7, 778, 2, 2, 8231,
	8229, 3, 2, 2, 2, 8231, 8230, 3, 2, 2, 2, 8232, 8239, 3, 2, 2, 2, 8233,
	8234, 7, 379, 2, 2, 8234, 8235, 7, 804, 2, 2, 8235, 8236, 7, 471, 2, 2,
	8236, 8237, 7, 787, 2, 2, 8237, 8238, 9, 8, 2, 2, 8238, 8240, 7, 805, 2,
	2, 8239, 8233, 3, 2, 2, 2, 8239, 8240, 3, 2, 2, 2, 8240, 8242, 3, 2, 2,
	2, 8241, 8231, 3, 2, 2, 2, 8241, 8242, 3, 2, 2, 2, 8242, 8244, 3, 2, 2,
	2, 8243, 8245, 7, 807, 2, 2, 8244, 8243, 3, 2, 2, 2, 8244, 8245, 3, 2,
	2, 2, 8245, 8279, 3, 2, 2, 2, 8246, 8248, 7, 57, 2, 2, 8247, 8249, 7, 767,
	2, 2, 8248, 8247, 3, 2, 2, 2, 8248, 8249, 3, 2, 2, 2, 8249, 8251, 3, 2,
	2, 2, 8250, 8252, 7, 807, 2, 2, 8251, 8250, 3, 2, 2, 2, 8251, 8252, 3,
	2, 2, 2, 8252, 8279, 3, 2, 2, 2, 8253, 8254, 7, 287, 2, 2, 8254, 8257,
	9, 95, 2, 2, 8255, 8258, 5, 940, 471, 2, 8256, 8258, 7, 778, 2, 2, 8257,
	8255, 3, 2, 2, 2, 8257, 8256, 3, 2, 2, 2, 8257, 8258, 3, 2, 2, 2, 8258,
	8260, 3, 2, 2, 2, 8259, 8261, 7, 807, 2, 2, 8260, 8259, 3, 2, 2, 2, 8260,
	8261, 3, 2, 2, 2, 8261, 8279, 3, 2, 2, 2, 8262, 8264, 7, 287, 2, 2, 8263,
	8265, 7, 767, 2, 2, 8264, 8263, 3, 2, 2, 2, 8264, 8265, 3, 2, 2, 2, 8265,
	8267, 3, 2, 2, 2, 8266, 8268, 7, 807, 2, 2, 8267, 8266, 3, 2, 2, 2, 8267,
	8268, 3, 2, 2, 2, 8268, 8279, 3, 2, 2, 2, 8269, 8270, 7, 299, 2, 2, 8270,
	8273, 9, 95, 2, 2, 8271, 8274, 5, 940, 471, 2, 8272, 8274, 7, 778, 2, 2,
	8273, 8271, 3, 2, 2, 2, 8273, 8272, 3, 2, 2, 2, 8273, 8274, 3, 2, 2, 2,
	8274, 8276, 3, 2, 2, 2, 8275, 8277, 7, 807, 2, 2, 8276, 8275, 3, 2, 2,
	2, 8276, 8277, 3, 2, 2, 2, 8277, 8279, 3, 2, 2, 2, 8278, 8201, 3, 2, 2,
	2, 8278, 8211, 3, 2, 2, 2, 8278, 8227, 3, 2, 2, 2, 8278, 8246, 3, 2, 2,
	2, 8278, 8253, 3, 2, 2, 2, 8278, 8262, 3, 2, 2, 2, 8278, 8269, 3, 2, 2,
	2, 8279, 657, 3, 2, 2, 2, 8280, 8282, 7, 525, 2, 2, 8281, 8283, 7, 779,
	2, 2, 8282, 8281, 3, 2, 2, 2, 8282, 8283, 3, 2, 2, 2, 8283, 659, 3, 2,
	2, 2, 8284, 8285, 7, 366, 2, 2, 8285, 8287, 5, 940, 471, 2, 8286, 8288,
	7, 807, 2, 2, 8287, 8286, 3, 2, 2, 2, 8287, 8288, 3, 2, 2, 2, 8288, 661,
	3, 2, 2, 2, 8289, 8290, 7, 86, 2, 2, 8290, 8295, 5, 942, 472, 2, 8291,
	8292, 7, 804, 2, 2, 8292, 8293, 5, 848, 425, 2, 8293, 8294, 7, 805, 2,
	2, 8294, 8296, 3, 2, 2, 2, 8295, 8291, 3, 2, 2, 2, 8295, 8296, 3, 2, 2,
	2, 8296, 8299, 3, 2, 2, 2, 8297, 8298, 7, 379, 2, 2, 8298, 8300, 5, 664,
	333, 2, 8299, 8297, 3, 2, 2, 2, 8299, 8300, 3, 2, 2, 2, 8300, 8302, 3,
	2, 2, 2, 8301, 8303, 7, 807, 2, 2, 8302, 8301, 3, 2, 2, 2, 8302, 8303,
	3, 2, 2, 2, 8303, 663, 3, 2, 2, 2, 8304, 8307, 5, 942, 472, 2, 8305, 8306,
	7, 806, 2, 2, 8306, 8308, 5, 942, 472, 2, 8307, 8305, 3, 2, 2, 2, 8307,
	8308, 3, 2, 2, 2, 8308, 665, 3, 2, 2, 2, 8309, 8310, 7, 118, 2, 2, 8310,
	8311, 7, 15, 2, 2, 8311, 8312, 9, 96, 2, 2, 8312, 667, 3, 2, 2, 2, 8313,
	8315, 7, 778, 2, 2, 8314, 8316, 7, 15, 2, 2, 8315, 8314, 3, 2, 2, 2, 8315,
	8316, 3, 2, 2, 2, 8316, 8317, 3, 2, 2, 2, 8317, 8320, 5, 932, 467, 2, 8318,
	8319, 7, 787, 2, 2, 8319, 8321, 5, 706, 354, 2, 8320, 8318, 3, 2, 2, 2,
	8320, 8321, 3, 2, 2, 2, 8321, 669, 3, 2, 2, 2, 8322, 8323, 7, 341, 2, 2,
	8323, 8324, 7, 804, 2, 2, 8324, 8325, 5, 676, 339, 2, 8325, 8326, 7, 805,
	2, 2, 8326, 671, 3, 2, 2, 2, 8327, 8328, 7, 769, 2, 2, 8328, 8330, 7, 804,
	2, 2, 8329, 8331, 9, 97, 2, 2, 8330, 8329, 3, 2, 2, 2, 8330, 8331, 3, 2,
	2, 2, 8331, 8332, 3, 2, 2, 2, 8332, 8333, 5, 674, 338, 2, 8333, 8334, 7,
	805, 2, 2, 8334, 673, 3, 2, 2, 2, 8335, 8336, 7, 780, 2, 2, 8336, 8337,
	7, 799, 2, 2, 8337, 8338, 7, 780, 2, 2, 8338, 675, 3, 2, 2, 2, 8339, 8346,
	5, 678, 340, 2, 8340, 8342, 7, 806, 2, 2, 8341, 8340, 3, 2, 2, 2, 8341,
	8342, 3, 2, 2, 2, 8342, 8343, 3, 2, 2, 2, 8343, 8345, 5, 678, 340, 2, 8344,
	8341, 3, 2, 2, 2, 8345, 8348, 3, 2, 2, 2, 8346, 8344, 3, 2, 2, 2, 8346,
	8347, 3, 2, 2, 2, 8347, 677, 3, 2, 2, 2, 8348, 8346, 3, 2, 2, 2, 8349,
	8352, 5, 680, 341, 2, 8350, 8352, 5, 684, 343, 2, 8351, 8349, 3, 2, 2,
	2, 8351, 8350, 3, 2, 2, 2, 8352, 679, 3, 2, 2, 2, 8353, 8357, 5, 940, 471,
	2, 8354, 8358, 5, 932, 467, 2, 8355, 8356, 7, 15, 2, 2, 8356, 8358, 5,
	706, 354, 2, 8357, 8354, 3, 2, 2, 2, 8357, 8355, 3, 2, 2, 2, 8358, 8361,
	3, 2, 2, 2, 8359, 8360, 7, 54, 2, 2, 8360, 8362, 5, 940, 471, 2, 8361,
	8359, 3, 2, 2, 2, 8361, 8362, 3, 2, 2, 2, 8362, 8364, 3, 2, 2, 2, 8363,
	8365, 5, 908, 455, 2, 8364, 8363, 3, 2, 2, 2, 8364, 8365, 3, 2, 2, 2, 8365,
	8387, 3, 2, 2, 2, 8366, 8367, 7, 60, 2, 2, 8367, 8369, 5, 940, 471, 2,
	8368, 8366, 3, 2, 2, 2, 8368, 8369, 3, 2, 2, 2, 8369, 8370, 3, 2, 2, 2,
	8370, 8372, 5, 910, 456, 2, 8371, 8373, 5, 910, 456, 2, 8372, 8371, 3,
	2, 2, 2, 8372, 8373, 3, 2, 2, 2, 8373, 8388, 3, 2, 2, 2, 8374, 8380, 7,
	150, 2, 2, 8375, 8376, 7, 804, 2, 2, 8376, 8377, 7, 779, 2, 2, 8377, 8378,
	7, 806, 2, 2, 8378, 8379, 7, 779, 2, 2, 8379, 8381, 7, 805, 2, 2, 8380,
	8375, 3, 2, 2, 2, 8380, 8381, 3, 2, 2, 2, 8381, 8385, 3, 2, 2, 2, 8382,
	8383, 7, 219, 2, 2, 8383, 8384, 7, 133, 2, 2, 8384, 8386, 7, 273, 2, 2,
	8385, 8382, 3, 2, 2, 2, 8385, 8386, 3, 2, 2, 2, 8386, 8388, 3, 2, 2, 2,
	8387, 8368, 3, 2, 2, 2, 8387, 8374, 3, 2, 2, 2, 8387, 8388, 3, 2, 2, 2,
	8388, 8390, 3, 2, 2, 2, 8389, 8391, 7, 290, 2, 2, 8390, 8389, 3, 2, 2,
	2, 8390, 8391, 3, 2, 2, 2, 8391, 8395, 3, 2, 2, 2, 8392, 8394, 5, 682,
	342, 2, 8393, 8392, 3, 2, 2, 2, 8394, 8397, 3, 2, 2, 2, 8395, 8393, 3,
	2, 2, 2, 8395, 8396, 3, 2, 2, 2, 8396, 681, 3, 2, 2, 2, 8397, 8395, 3,
	2, 2, 2, 8398, 8399, 7, 60, 2, 2, 8399, 8401, 5, 940, 471, 2, 8400, 8398,
	3, 2, 2, 2, 8400, 8401, 3, 2, 2, 2, 8401, 8439, 3, 2, 2, 2, 8402, 8403,
	7, 255, 2, 2, 8403, 8406, 7, 171, 2, 2, 8404, 8406, 7, 359, 2, 2, 8405,
	8402, 3, 2, 2, 2, 8405, 8404, 3, 2, 2, 2, 8406, 8408, 3, 2, 2, 2, 8407,
	8409, 5, 906, 454, 2, 8408, 8407, 3, 2, 2, 2, 8408, 8409, 3, 2, 2, 2, 8409,
	8411, 3, 2, 2, 2, 8410, 8412, 5, 690, 346, 2, 8411, 8410, 3, 2, 2, 2, 8411,
	8412, 3, 2, 2, 2, 8412, 8440, 3, 2, 2, 2, 8413, 8417, 7, 45, 2, 2, 8414,
	8415, 7, 219, 2, 2, 8415, 8416, 7, 133, 2, 2, 8416, 8418, 7, 273, 2, 2,
	8417, 8414, 3, 2, 2, 2, 8417, 8418, 3, 2, 2, 2, 8418, 8419, 3, 2, 2, 2,
	8419, 8420, 7, 804, 2, 2, 8420, 8421, 5, 728, 365, 2, 8421, 8422, 7, 805,
	2, 2, 8422, 8440, 3, 2, 2, 2, 8423, 8424, 7, 136, 2, 2, 8424, 8426, 7,
	171, 2, 2, 8425, 8423, 3, 2, 2, 2, 8425, 8426, 3, 2, 2, 2, 8426, 8427,
	3, 2, 2, 2, 8427, 8428, 7, 269, 2, 2, 8428, 8429, 5, 888, 445, 2, 8429,
	8430, 7, 804, 2, 2, 8430, 8431, 5, 900, 451, 2, 8431, 8433, 7, 805, 2,
	2, 8432, 8434, 5, 686, 344, 2, 8433, 8432, 3, 2, 2, 2, 8433, 8434, 3, 2,
	2, 2, 8434, 8436, 3, 2, 2, 2, 8435, 8437, 5, 688, 345, 2, 8436, 8435, 3,
	2, 2, 2, 8436, 8437, 3, 2, 2, 2, 8437, 8440, 3, 2, 2, 2, 8438, 8440, 5,
	908, 455, 2, 8439, 8405, 3, 2, 2, 2, 8439, 8413, 3, 2, 2, 2, 8439, 8425,
	3, 2, 2, 2, 8439, 8438, 3, 2, 2, 2, 8440, 683, 3, 2, 2, 2, 8441, 8442,
	7, 60, 2, 2, 8442, 8444, 5, 940, 471, 2, 8443, 8441, 3, 2, 2, 2, 8443,
	8444, 3, 2, 2, 2, 8444, 8506, 3, 2, 2, 2, 8445, 8446, 7, 255, 2, 2, 8446,
	8449, 7, 171, 2, 2, 8447, 8449, 7, 359, 2, 2, 8448, 8445, 3, 2, 2, 2, 8448,
	8447, 3, 2, 2, 2, 8449, 8451, 3, 2, 2, 2, 8450, 8452, 5, 906, 454, 2, 8451,
	8450, 3, 2, 2, 2, 8451, 8452, 3, 2, 2, 2, 8452, 8453, 3, 2, 2, 2, 8453,
	8454, 7, 804, 2, 2, 8454, 8455, 5, 898, 450, 2, 8455, 8457, 7, 805, 2,
	2, 8456, 8458, 5, 690, 346, 2, 8457, 8456, 3, 2, 2, 2, 8457, 8458, 3, 2,
	2, 2, 8458, 8461, 3, 2, 2, 2, 8459, 8460, 7, 228, 2, 2, 8460, 8462, 5,
	940, 471, 2, 8461, 8459, 3, 2, 2, 2, 8461, 8462, 3, 2, 2, 2, 8462, 8507,
	3, 2, 2, 2, 8463, 8467, 7, 45, 2, 2, 8464, 8465, 7, 219, 2, 2, 8465, 8466,
	7, 133, 2, 2, 8466, 8468, 7, 273, 2, 2, 8467, 8464, 3, 2, 2, 2, 8467, 8468,
	3, 2, 2, 2, 8468, 8469, 3, 2, 2, 2, 8469, 8470, 7, 804, 2, 2, 8470, 8471,
	5, 728, 365, 2, 8471, 8472, 7, 805, 2, 2, 8472, 8507, 3, 2, 2, 2, 8473,
	8475, 7, 89, 2, 2, 8474, 8476, 7, 804, 2, 2, 8475, 8474, 3, 2, 2, 2, 8475,
	8476, 3, 2, 2, 2, 8476, 8481, 3, 2, 2, 2, 8477, 8482, 7, 783, 2, 2, 8478,
	8482, 7, 812, 2, 2, 8479, 8482, 5, 810, 406, 2, 8480, 8482, 7, 779, 2,
	2, 8481, 8477, 3, 2, 2, 2, 8481, 8478, 3, 2, 2, 2, 8481, 8479, 3, 2, 2,
	2, 8481, 8480, 3, 2, 2, 2, 8482, 8483, 3, 2, 2, 2, 8483, 8481, 3, 2, 2,
	2, 8483, 8484, 3, 2, 2, 2, 8484, 8486, 3, 2, 2, 2, 8485, 8487, 7, 805,
	2, 2, 8486, 8485, 3, 2, 2, 2, 8486, 8487, 3, 2, 2, 2, 8487, 8488, 3, 2,
	2, 2, 8488, 8489, 7, 133, 2, 2, 8489, 8507, 5, 940, 471, 2, 8490, 8491,
	7, 136, 2, 2, 8491, 8492, 7, 171, 2, 2, 8492, 8493, 7, 804, 2, 2, 8493,
	8494, 5, 900, 451, 2, 8494, 8495, 7, 805, 2, 2, 8495, 8496, 7, 269, 2,
	2, 8496, 8497, 5, 888, 445, 2, 8497, 8498, 7, 804, 2, 2, 8498, 8499, 5,
	900, 451, 2, 8499, 8501, 7, 805, 2, 2, 8500, 8502, 5, 686, 344, 2, 8501,
	8500, 3, 2, 2, 2, 8501, 8502, 3, 2, 2, 2, 8502, 8504, 3, 2, 2, 2, 8503,
	8505, 5, 688, 345, 2, 8504, 8503, 3, 2, 2, 2, 8504, 8505, 3, 2, 2, 2, 8505,
	8507, 3, 2, 2, 2, 8506, 8448, 3, 2, 2, 2, 8506, 8463, 3, 2, 2, 2, 8506,
	8473, 3, 2, 2, 2, 8506, 8490, 3, 2, 2, 2, 8507, 685, 3, 2, 2, 2, 8508,
	8509, 7, 228, 2, 2, 8509, 8517, 7, 92, 2, 2, 8510, 8511, 7, 609, 2, 2,
	8511, 8518, 7, 386, 2, 2, 8512, 8518, 7, 40, 2, 2, 8513, 8514, 7, 316,
	2, 2, 8514, 8518, 7, 222, 2, 2, 8515, 8516, 7, 316, 2, 2, 8516, 8518, 7,
	89, 2, 2, 8517, 8510, 3, 2, 2, 2, 8517, 8512, 3, 2, 2, 2, 8517, 8513, 3,
	2, 2, 2, 8517, 8515, 3, 2, 2, 2, 8518, 687, 3, 2, 2, 2, 8519, 8520, 7,
	228, 2, 2, 8520, 8528, 7, 363, 2, 2, 8521, 8522, 7, 609, 2, 2, 8522, 8529,
	7, 386, 2, 2, 8523, 8529, 7, 40, 2, 2, 8524, 8525, 7, 316, 2, 2, 8525,
	8529, 7, 222, 2, 2, 8526, 8527, 7, 316, 2, 2, 8527, 8529, 7, 89, 2, 2,
	8528, 8521, 3, 2, 2, 2, 8528, 8523, 3, 2, 2, 2, 8528, 8524, 3, 2, 2, 2,
	8528, 8526, 3, 2, 2, 2, 8529, 689, 3, 2, 2, 2, 8530, 8531, 7, 379, 2, 2,
	8531, 8532, 7, 804, 2, 2, 8532, 8537, 5, 692, 347, 2, 8533, 8534, 7, 806,
	2, 2, 8534, 8536, 5, 692, 347, 2, 8535, 8533, 3, 2, 2, 2, 8536, 8539, 3,
	2, 2, 2, 8537, 8535, 3, 2, 2, 2, 8537, 8538, 3, 2, 2, 2, 8538, 8540, 3,
	2, 2, 2, 8539, 8537, 3, 2, 2, 2, 8540, 8541, 7, 805, 2, 2, 8541, 691, 3,
	2, 2, 2, 8542, 8543, 5, 942, 472, 2, 8543, 8547, 7, 787, 2, 2, 8544, 8548,
	5, 942, 472, 2, 8545, 8548, 5, 904, 453, 2, 8546, 8548, 7, 779, 2, 2, 8547,
	8544, 3, 2, 2, 2, 8547, 8545, 3, 2, 2, 2, 8547, 8546, 3, 2, 2, 2, 8548,
	693, 3, 2, 2, 2, 8549, 8550, 7, 88, 2, 2, 8550, 8582, 5, 902, 452, 2, 8551,
	8561, 7, 79, 2, 2, 8552, 8559, 5, 696, 349, 2, 8553, 8554, 7, 133, 2, 2,
	8554, 8557, 7, 363, 2, 2, 8555, 8556, 7, 224, 2, 2, 8556, 8558, 5, 900,
	451, 2, 8557, 8555, 3, 2, 2, 2, 8557, 8558, 3, 2, 2, 2, 8558, 8560, 3,
	2, 2, 2, 8559, 8553, 3, 2, 2, 2, 8559, 8560, 3, 2, 2, 2, 8560, 8562, 3,
	2, 2, 2, 8561, 8552, 3, 2, 2, 2, 8561, 8562, 3, 2, 2, 2, 8562, 8583, 3,
	2, 2, 2, 8563, 8565, 7, 543, 2, 2, 8564, 8563, 3, 2, 2, 2, 8564, 8565,
	3, 2, 2, 2, 8565, 8567, 3, 2, 2, 2, 8566, 8568, 7, 695, 2, 2, 8567, 8566,
	3, 2, 2, 2, 8567, 8568, 3, 2, 2, 2, 8568, 8569, 3, 2, 2, 2, 8569, 8570,
	7, 79, 2, 2, 8570, 8571, 7, 133, 2, 2, 8571, 8580, 5, 444, 223, 2, 8572,
	8578, 7, 133, 2, 2, 8573, 8574, 7, 265, 2, 2, 8574, 8579, 7, 622, 2, 2,
	8575, 8579, 7, 363, 2, 2, 8576, 8577, 7, 224, 2, 2, 8577, 8579, 5, 900,
	451, 2, 8578, 8573, 3, 2, 2, 2, 8578, 8575, 3, 2, 2, 2, 8578, 8576, 3,
	2, 2, 2, 8579, 8581, 3, 2, 2, 2, 8580, 8572, 3, 2, 2, 2, 8580, 8581, 3,
	2, 2, 2, 8581, 8583, 3, 2, 2, 2, 8582, 8551, 3, 2, 2, 2, 8582, 8564, 3,
	2, 2, 2, 8583, 8585, 3, 2, 2, 2, 8584, 8586, 7, 807, 2, 2, 8585, 8584,
	3, 2, 2, 2, 8585, 8586, 3, 2, 2, 2, 8586, 695, 3, 2, 2, 2, 8587, 8589,
	5, 698, 350, 2, 8588, 8587, 3, 2, 2, 2, 8589, 8592, 3, 2, 2, 2, 8590, 8588,
	3, 2, 2, 2, 8590, 8591, 3, 2, 2, 2, 8591, 8593, 3, 2, 2, 2, 8592, 8590,
	3, 2, 2, 2, 8593, 8594, 7, 133, 2, 2, 8594, 8595, 5, 444, 223, 2, 8595,
	697, 3, 2, 2, 2, 8596, 8602, 9, 62, 2, 2, 8597, 8602, 9, 98, 2, 2, 8598,
	8602, 9, 99, 2, 2, 8599, 8602, 9, 100, 2, 2, 8600, 8602, 7, 753, 2, 2,
	8601, 8596, 3, 2, 2, 2, 8601, 8597, 3, 2, 2, 2, 8601, 8598, 3, 2, 2, 2,
	8601, 8599, 3, 2, 2, 2, 8601, 8600, 3, 2, 2, 2, 8602, 699, 3, 2, 2, 2,
	8603, 8613, 7, 128, 2, 2, 8604, 8611, 7, 603, 2, 2, 8605, 8611, 7, 640,
	2, 2, 8606, 8611, 7, 511, 2, 2, 8607, 8611, 7, 555, 2, 2, 8608, 8609, 9,
	101, 2, 2, 8609, 8611, 5, 706, 354, 2, 8610, 8604, 3, 2, 2, 2, 8610, 8605,
	3, 2, 2, 2, 8610, 8606, 3, 2, 2, 2, 8610, 8607, 3, 2, 2, 2, 8610, 8608,
	3, 2, 2, 2, 8610, 8611, 3, 2, 2, 2, 8611, 8612, 3, 2, 2, 2, 8612, 8614,
	7, 139, 2, 2, 8613, 8610, 3, 2, 2, 2, 8613, 8614, 3, 2, 2, 2, 8614, 8616,
	3, 2, 2, 2, 8615, 8617, 7, 524, 2, 2, 8616, 8615, 3, 2, 2, 2, 8616, 8617,
	3, 2, 2, 2, 8617, 8618, 3, 2, 2, 2, 8618, 8628, 5, 902, 452, 2, 8619, 8620,
	7, 164, 2, 2, 8620, 8625, 7, 778, 2, 2, 8621, 8622, 7, 806, 2, 2, 8622,
	8624, 7, 778, 2, 2, 8623, 8621, 3, 2, 2, 2, 8624, 8627, 3, 2, 2, 2, 8625,
	8623, 3, 2, 2, 2, 8625, 8626, 3, 2, 2, 2, 8626, 8629, 3, 2, 2, 2, 8627,
	8625, 3, 2, 2, 2, 8628, 8619, 3, 2, 2, 2, 8628, 8629, 3, 2, 2, 2, 8629,
	8631, 3, 2, 2, 2, 8630, 8632, 7, 807, 2, 2, 8631, 8630, 3, 2, 2, 2, 8631,
	8632, 3, 2, 2, 2, 8632, 701, 3, 2, 2, 2, 8633, 8634, 7, 316, 2, 2, 8634,
	8638, 5, 940, 471, 2, 8635, 8639, 5, 940, 471, 2, 8636, 8639, 5, 704, 353,
	2, 8637, 8639, 5, 904, 453, 2, 8638, 8635, 3, 2, 2, 2, 8638, 8636, 3, 2,
	2, 2, 8638, 8637, 3, 2, 2, 2, 8639, 8641, 3, 2, 2, 2, 8640, 8642, 7, 807,
	2, 2, 8641, 8640, 3, 2, 2, 2, 8641, 8642, 3, 2, 2, 2, 8642, 8682, 3, 2,
	2, 2, 8643, 8644, 7, 316, 2, 2, 8644, 8645, 7, 352, 2, 2, 8645, 8646, 7,
	547, 2, 2, 8646, 8655, 7, 558, 2, 2, 8647, 8648, 7, 265, 2, 2, 8648, 8656,
	7, 755, 2, 2, 8649, 8650, 7, 265, 2, 2, 8650, 8656, 7, 441, 2, 2, 8651,
	8652, 7, 676, 2, 2, 8652, 8656, 7, 265, 2, 2, 8653, 8656, 7, 717, 2, 2,
	8654, 8656, 7, 708, 2, 2, 8655, 8647, 3, 2, 2, 2, 8655, 8649, 3, 2, 2,
	2, 8655, 8651, 3, 2, 2, 2, 8655, 8653, 3, 2, 2, 2, 8655, 8654, 3, 2, 2,
	2, 8656, 8658, 3, 2, 2, 2, 8657, 8659, 7, 807, 2, 2, 8658, 8657, 3, 2,
	2, 2, 8658, 8659, 3, 2, 2, 2, 8659, 8682, 3, 2, 2, 2, 8660, 8661, 7, 316,
	2, 2, 8661, 8662, 7, 152, 2, 2, 8662, 8663, 5, 888, 445, 2, 8663, 8665,
	5, 904, 453, 2, 8664, 8666, 7, 807, 2, 2, 8665, 8664, 3, 2, 2, 2, 8665,
	8666, 3, 2, 2, 2, 8666, 8682, 3, 2, 2, 2, 8667, 8668, 7, 316, 2, 2, 8668,
	8669, 7, 400, 2, 2, 8669, 8682, 5, 904, 453, 2, 8670, 8671, 7, 316, 2,
	2, 8671, 8672, 7, 653, 2, 2, 8672, 8682, 5, 904, 453, 2, 8673, 8674, 7,
	316, 2, 2, 8674, 8675, 7, 402, 2, 2, 8675, 8682, 5, 904, 453, 2, 8676,
	8677, 7, 316, 2, 2, 8677, 8678, 7, 403, 2, 2, 8678, 8682, 5, 904, 453,
	2, 8679, 8680, 7, 316, 2, 2, 8680, 8682, 5, 820, 411, 2, 8681, 8633, 3,
	2, 2, 2, 8681, 8643, 3, 2, 2, 2, 8681, 8660, 3, 2, 2, 2, 8681, 8667, 3,
	2, 2, 2, 8681, 8670, 3, 2, 2, 2, 8681, 8673, 3, 2, 2, 2, 8681, 8676, 3,
	2, 2, 2, 8681, 8679, 3, 2, 2, 2, 8682, 703, 3, 2, 2, 2, 8683, 8686, 5,
	936, 469, 2, 8684, 8686, 7, 778, 2, 2, 8685, 8683, 3, 2, 2, 2, 8685, 8684,
	3, 2, 2, 2, 8686, 705, 3, 2, 2, 2, 8687, 8688, 8, 354, 1, 2, 8688, 8696,
	5, 708, 355, 2, 8689, 8696, 5, 810, 406, 2, 8690, 8696, 5, 710, 356, 2,
	8691, 8696, 5, 896, 449, 2, 8692, 8696, 5, 714, 358, 2, 8693, 8696, 5,
	712, 357, 2, 8694, 8696, 5, 858, 430, 2, 8695, 8687, 3, 2, 2, 2, 8695,
	8689, 3, 2, 2, 2, 8695, 8690, 3, 2, 2, 2, 8695, 8691, 3, 2, 2, 2, 8695,
	8692, 3, 2, 2, 2, 8695, 8693, 3, 2, 2, 2, 8695, 8694, 3, 2, 2, 2, 8696,
	8716, 3, 2, 2, 2, 8697, 8698, 12, 7, 2, 2, 8698, 8699, 9, 102, 2, 2, 8699,
	8715, 5, 706, 354, 8, 8700, 8701, 12, 6, 2, 2, 8701, 8702, 9, 103, 2, 2,
	8702, 8715, 5, 706, 354, 7, 8703, 8704, 12, 5, 2, 2, 8704, 8705, 5, 944,
	473, 2, 8705, 8706, 5, 706, 354, 6, 8706, 8715, 3, 2, 2, 2, 8707, 8708,
	12, 4, 2, 2, 8708, 8709, 5, 946, 474, 2, 8709, 8710, 5, 706, 354, 5, 8710,
	8715, 3, 2, 2, 2, 8711, 8712, 12, 12, 2, 2, 8712, 8713, 7, 54, 2, 2, 8713,
	8715, 5, 940, 471, 2, 8714, 8697, 3, 2, 2, 2, 8714, 8700, 3, 2, 2, 2, 8714,
	8703, 3, 2, 2, 2, 8714, 8707, 3, 2, 2, 2, 8714, 8711, 3, 2, 2, 2, 8715,
	8718, 3, 2, 2, 2, 8716, 8714, 3, 2, 2, 2, 8716, 8717, 3, 2, 2, 2, 8717,
	707, 3, 2, 2, 2, 8718, 8716, 3, 2, 2, 2, 8719, 8724, 7, 89, 2, 2, 8720,
	8724, 7, 222, 2, 2, 8721, 8724, 7, 778, 2, 2, 8722, 8724, 5, 936, 469,
	2, 8723, 8719, 3, 2, 2, 2, 8723, 8720, 3, 2, 2, 2, 8723, 8721, 3, 2, 2,
	2, 8723, 8722, 3, 2, 2, 2, 8724, 709, 3, 2, 2, 2, 8725, 8726, 7, 41, 2,
	2, 8726, 8728, 5, 706, 354, 2, 8727, 8729, 5, 824, 413, 2, 8728, 8727,
	3, 2, 2, 2, 8729, 8730, 3, 2, 2, 2, 8730, 8728, 3, 2, 2, 2, 8730, 8731,
	3, 2, 2, 2, 8731, 8734, 3, 2, 2, 2, 8732, 8733, 7, 106, 2, 2, 8733, 8735,
	5, 706, 354, 2, 8734, 8732, 3, 2, 2, 2, 8734, 8735, 3, 2, 2, 2, 8735, 8736,
	3, 2, 2, 2, 8736, 8737, 7, 108, 2, 2, 8737, 8751, 3, 2, 2, 2, 8738, 8740,
	7, 41, 2, 2, 8739, 8741, 5, 826, 414, 2, 8740, 8739, 3, 2, 2, 2, 8741,
	8742, 3, 2, 2, 2, 8742, 8740, 3, 2, 2, 2, 8742, 8743, 3, 2, 2, 2, 8743,
	8746, 3, 2, 2, 2, 8744, 8745, 7, 106, 2, 2, 8745, 8747, 5, 706, 354, 2,
	8746, 8744, 3, 2, 2, 2, 8746, 8747, 3, 2, 2, 2, 8747, 8748, 3, 2, 2, 2,
	8748, 8749, 7, 108, 2, 2, 8749, 8751, 3, 2, 2, 2, 8750, 8725, 3, 2, 2,
	2, 8750, 8738, 3, 2, 2, 2, 8751, 711, 3, 2, 2, 2, 8752, 8753, 7, 814, 2,
	2, 8753, 8757, 5, 706, 354, 2, 8754, 8755, 9, 104, 2, 2, 8755, 8757, 5,
	706, 354, 2, 8756, 8752, 3, 2, 2, 2, 8756, 8754, 3, 2, 2, 2, 8757, 713,
	3, 2, 2, 2, 8758, 8759, 7, 804, 2, 2, 8759, 8760, 5, 706, 354, 2, 8760,
	8761, 7, 805, 2, 2, 8761, 8767, 3, 2, 2, 2, 8762, 8763, 7, 804, 2, 2, 8763,
	8764, 5, 718, 360, 2, 8764, 8765, 7, 805, 2, 2, 8765, 8767, 3, 2, 2, 2,
	8766, 8758, 3, 2, 2, 2, 8766, 8762, 3, 2, 2, 2, 8767, 715, 3, 2, 2, 2,
	8768, 8777, 7, 222, 2, 2, 8769, 8777, 5, 936, 469, 2, 8770, 8777, 5, 810,
	406, 2, 8771, 8777, 7, 778, 2, 2, 8772, 8773, 7, 804, 2, 2, 8773, 8774,
	5, 716, 359, 2, 8774, 8775, 7, 805, 2, 2, 8775, 8777, 3, 2, 2, 2, 8776,
	8768, 3, 2, 2, 2, 8776, 8769, 3, 2, 2, 2, 8776, 8770, 3, 2, 2, 2, 8776,
	8771, 3, 2, 2, 2, 8776, 8772, 3, 2, 2, 2, 8777, 717, 3, 2, 2, 2, 8778,
	8779, 5, 444, 223, 2, 8779, 719, 3, 2, 2, 2, 8780, 8783, 7, 379, 2, 2,
	8781, 8782, 7, 770, 2, 2, 8782, 8784, 7, 806, 2, 2, 8783, 8781, 3, 2, 2,
	2, 8783, 8784, 3, 2, 2, 2, 8784, 8785, 3, 2, 2, 2, 8785, 8790, 5, 722,
	362, 2, 8786, 8787, 7, 806, 2, 2, 8787, 8789, 5, 722, 362, 2, 8788, 8786,
	3, 2, 2, 2, 8789, 8792, 3, 2, 2, 2, 8790, 8788, 3, 2, 2, 2, 8790, 8791,
	3, 2, 2, 2, 8791, 8807, 3, 2, 2, 2, 8792, 8790, 3, 2, 2, 2, 8793, 8794,
	7, 379, 2, 2, 8794, 8799, 7, 31, 2, 2, 8795, 8796, 7, 804, 2, 2, 8796,
	8797, 5, 800, 401, 2, 8797, 8798, 7, 805, 2, 2, 8798, 8800, 3, 2, 2, 2,
	8799, 8795, 3, 2, 2, 2, 8799, 8800, 3, 2, 2, 2, 8800, 8801, 3, 2, 2, 2,
	8801, 8802, 7, 15, 2, 2, 8802, 8803, 7, 804, 2, 2, 8803, 8804, 5, 444,
	223, 2, 8804, 8805, 7, 805, 2, 2, 8805, 8807, 3, 2, 2, 2, 8806, 8780, 3,
	2, 2, 2, 8806, 8793, 3, 2, 2, 2, 8807, 721, 3, 2, 2, 2, 8808, 8813, 5,
	940, 471, 2, 8809, 8810, 7, 804, 2, 2, 8810, 8811, 5, 900, 451, 2, 8811,
	8812, 7, 805, 2, 2, 8812, 8814, 3, 2, 2, 2, 8813, 8809, 3, 2, 2, 2, 8813,
	8814, 3, 2, 2, 2, 8814, 8815, 3, 2, 2, 2, 8815, 8816, 7, 15, 2, 2, 8816,
	8817, 7, 804, 2, 2, 8817, 8818, 5, 444, 223, 2, 8818, 8819, 7, 805, 2,
	2, 8819, 723, 3, 2, 2, 2, 8820, 8823, 5, 896, 449, 2, 8821, 8823, 7, 778,
	2, 2, 8822, 8820, 3, 2, 2, 2, 8822, 8821, 3, 2, 2, 2, 8823, 8826, 3, 2,
	2, 2, 8824, 8827, 7, 787, 2, 2, 8825, 8827, 5, 946, 474, 2, 8826, 8824,
	3, 2, 2, 2, 8826, 8825, 3, 2, 2, 2, 8827, 8828, 3, 2, 2, 2, 8828, 8837,
	5, 706, 354, 2, 8829, 8830, 5, 940, 471, 2, 8830, 8831, 7, 799, 2, 2, 8831,
	8832, 5, 940, 471, 2, 8832, 8833, 7, 804, 2, 2, 8833, 8834, 5, 848, 425,
	2, 8834, 8835, 7, 805, 2, 2, 8835, 8837, 3, 2, 2, 2, 8836, 8822, 3, 2,
	2, 2, 8836, 8829, 3, 2, 2, 2, 8837, 725, 3, 2, 2, 2, 8838, 8843, 5, 728,
	365, 2, 8839, 8840, 7, 806, 2, 2, 8840, 8842, 5, 728, 365, 2, 8841, 8839,
	3, 2, 2, 2, 8842, 8845, 3, 2, 2, 2, 8843, 8841, 3, 2, 2, 2, 8843, 8844,
	3, 2, 2, 2, 8844, 727, 3, 2, 2, 2, 8845, 8843, 3, 2, 2, 2, 8846, 8851,
	5, 730, 366, 2, 8847, 8848, 7, 236, 2, 2, 8848, 8850, 5, 730, 366, 2, 8849,
	8847, 3, 2, 2, 2, 8850, 8853, 3, 2, 2, 2, 8851, 8849, 3, 2, 2, 2, 8851,
	8852, 3, 2, 2, 2, 8852, 729, 3, 2, 2, 2, 8853, 8851, 3, 2, 2, 2, 8854,
	8859, 5, 732, 367, 2, 8855, 8856, 7, 10, 2, 2, 8856, 8858, 5, 732, 367,
	2, 8857, 8855, 3, 2, 2, 2, 8858, 8861, 3, 2, 2, 2, 8859, 8857, 3, 2, 2,
	2, 8859, 8860, 3, 2, 2, 2, 8860, 731, 3, 2, 2, 2, 8861, 8859, 3, 2, 2,
	2, 8862, 8864, 7, 219, 2, 2, 8863, 8862, 3, 2, 2, 2, 8863, 8864, 3, 2,
	2, 2, 8864, 8865, 3, 2, 2, 2, 8865, 8866, 5, 734, 368, 2, 8866, 733, 3,
	2, 2, 2, 8867, 8868, 7, 119, 2, 2, 8868, 8869, 7, 804, 2, 2, 8869, 8870,
	5, 718, 360, 2, 8870, 8871, 7, 805, 2, 2, 8871, 8923, 3, 2, 2, 2, 8872,
	8873, 5, 706, 354, 2, 8873, 8874, 5, 944, 473, 2, 8874, 8875, 5, 706, 354,
	2, 8875, 8923, 3, 2, 2, 2, 8876, 8877, 5, 706, 354, 2, 8877, 8878, 5, 944,
	473, 2, 8878, 8879, 9, 105, 2, 2, 8879, 8880, 7, 804, 2, 2, 8880, 8881,
	5, 718, 360, 2, 8881, 8882, 7, 805, 2, 2, 8882, 8923, 3, 2, 2, 2, 8883,
	8885, 5, 706, 354, 2, 8884, 8886, 7, 219, 2, 2, 8885, 8884, 3, 2, 2, 2,
	8885, 8886, 3, 2, 2, 2, 8886, 8887, 3, 2, 2, 2, 8887, 8888, 7, 28, 2, 2,
	8888, 8889, 5, 706, 354, 2, 8889, 8890, 7, 10, 2, 2, 8890, 8891, 5, 706,
	354, 2, 8891, 8923, 3, 2, 2, 2, 8892, 8894, 5, 706, 354, 2, 8893, 8895,
	7, 219, 2, 2, 8894, 8893, 3, 2, 2, 2, 8894, 8895, 3, 2, 2, 2, 8895, 8896,
	3, 2, 2, 2, 8896, 8897, 7, 154, 2, 2, 8897, 8900, 7, 804, 2, 2, 8898, 8901,
	5, 718, 360, 2, 8899, 8901, 5, 848, 425, 2, 8900, 8898, 3, 2, 2, 2, 8900,
	8899, 3, 2, 2, 2, 8901, 8902, 3, 2, 2, 2, 8902, 8903, 7, 805, 2, 2, 8903,
	8923, 3, 2, 2, 2, 8904, 8906, 5, 706, 354, 2, 8905, 8907, 7, 219, 2, 2,
	8906, 8905, 3, 2, 2, 2, 8906, 8907, 3, 2, 2, 2, 8907, 8908, 3, 2, 2, 2,
	8908, 8909, 7, 179, 2, 2, 8909, 8912, 5, 706, 354, 2, 8910, 8911, 7, 111,
	2, 2, 8911, 8913, 5, 706, 354, 2, 8912, 8910, 3, 2, 2, 2, 8912, 8913, 3,
	2, 2, 2, 8913, 8923, 3, 2, 2, 2, 8914, 8915, 5, 706, 354, 2, 8915, 8916,
	7, 167, 2, 2, 8916, 8917, 5, 908, 455, 2, 8917, 8923, 3, 2, 2, 2, 8918,
	8919, 7, 804, 2, 2, 8919, 8920, 5, 728, 365, 2, 8920, 8921, 7, 805, 2,
	2, 8921, 8923, 3, 2, 2, 2, 8922, 8867, 3, 2, 2, 2, 8922, 8872, 3, 2, 2,
	2, 8922, 8876, 3, 2, 2, 2, 8922, 8883, 3, 2, 2, 2, 8922, 8892, 3, 2, 2,
	2, 8922, 8904, 3, 2, 2, 2, 8922, 8914, 3, 2, 2, 2, 8922, 8918, 3, 2, 2,
	2, 8923, 735, 3, 2, 2, 2, 8924, 8930, 5, 740, 371, 2, 8925, 8926, 7, 804,
	2, 2, 8926, 8927, 5, 736, 369, 2, 8927, 8928, 7, 805, 2, 2, 8928, 8930,
	3, 2, 2, 2, 8929, 8924, 3, 2, 2, 2, 8929, 8925, 3, 2, 2, 2, 8930, 8934,
	3, 2, 2, 2, 8931, 8933, 5, 738, 370, 2, 8932, 8931, 3, 2, 2, 2, 8933, 8936,
	3, 2, 2, 2, 8934, 8932, 3, 2, 2, 2, 8934, 8935, 3, 2, 2, 2, 8935, 737,
	3, 2, 2, 2, 8936, 8934, 3, 2, 2, 2, 8937, 8939, 7, 358, 2, 2, 8938, 8940,
	7, 5, 2, 2, 8939, 8938, 3, 2, 2, 2, 8939, 8940, 3, 2, 2, 2, 8940, 8944,
	3, 2, 2, 2, 8941, 8944, 7, 116, 2, 2, 8942, 8944, 7, 163, 2, 2, 8943, 8937,
	3, 2, 2, 2, 8943, 8941, 3, 2, 2, 2, 8943, 8942, 3, 2, 2, 2, 8944, 8950,
	3, 2, 2, 2, 8945, 8951, 5, 740, 371, 2, 8946, 8947, 7, 804, 2, 2, 8947,
	8948, 5, 736, 369, 2, 8948, 8949, 7, 805, 2, 2, 8949, 8951, 3, 2, 2, 2,
	8950, 8945, 3, 2, 2, 2, 8950, 8946, 3, 2, 2, 2, 8951, 739, 3, 2, 2, 2,
	8952, 8954, 7, 305, 2, 2, 8953, 8955, 9, 106, 2, 2, 8954, 8953, 3, 2, 2,
	2, 8954, 8955, 3, 2, 2, 2, 8955, 8957, 3, 2, 2, 2, 8956, 8958, 5, 742,
	372, 2, 8957, 8956, 3, 2, 2, 2, 8957, 8958, 3, 2, 2, 2, 8958, 8959, 3,
	2, 2, 2, 8959, 8962, 5, 764, 383, 2, 8960, 8961, 7, 164, 2, 2, 8961, 8963,
	5, 888, 445, 2, 8962, 8960, 3, 2, 2, 2, 8962, 8963, 3, 2, 2, 2, 8963, 8966,
	3, 2, 2, 2, 8964, 8965, 7, 139, 2, 2, 8965, 8967, 5, 778, 390, 2, 8966,
	8964, 3, 2, 2, 2, 8966, 8967, 3, 2, 2, 2, 8967, 8970, 3, 2, 2, 2, 8968,
	8969, 7, 376, 2, 2, 8969, 8971, 5, 728, 365, 2, 8970, 8968, 3, 2, 2, 2,
	8970, 8971, 3, 2, 2, 2, 8971, 8985, 3, 2, 2, 2, 8972, 8973, 7, 146, 2,
	2, 8973, 8975, 7, 37, 2, 2, 8974, 8976, 7, 5, 2, 2, 8975, 8974, 3, 2, 2,
	2, 8975, 8976, 3, 2, 2, 2, 8976, 8977, 3, 2, 2, 2, 8977, 8982, 5, 756,
	379, 2, 8978, 8979, 7, 806, 2, 2, 8979, 8981, 5, 756, 379, 2, 8980, 8978,
	3, 2, 2, 2, 8981, 8984, 3, 2, 2, 2, 8982, 8980, 3, 2, 2, 2, 8982, 8983,
	3, 2, 2, 2, 8983, 8986, 3, 2, 2, 2, 8984, 8982, 3, 2, 2, 2, 8985, 8972,
	3, 2, 2, 2, 8985, 8986, 3, 2, 2, 2, 8986, 8989, 3, 2, 2, 2, 8987, 8988,
	7, 147, 2, 2, 8988, 8990, 5, 728, 365, 2, 8989, 8987, 3, 2, 2, 2, 8989,
	8990, 3, 2, 2, 2, 8990, 741, 3, 2, 2, 2, 8991, 8994, 7, 349, 2, 2, 8992,
	8995, 5, 744, 373, 2, 8993, 8995, 5, 746, 374, 2, 8994, 8992, 3, 2, 2,
	2, 8994, 8993, 3, 2, 2, 2, 8995, 8998, 3, 2, 2, 2, 8996, 8997, 7, 379,
	2, 2, 8997, 8999, 7, 739, 2, 2, 8998, 8996, 3, 2, 2, 2, 8998, 8999, 3,
	2, 2, 2, 8999, 743, 3, 2, 2, 2, 9000, 9001, 9, 107, 2, 2, 9001, 9008, 7,
	244, 2, 2, 9002, 9003, 7, 804, 2, 2, 9003, 9004, 5, 706, 354, 2, 9004,
	9005, 7, 805, 2, 2, 9005, 9006, 7, 244, 2, 2, 9006, 9008, 3, 2, 2, 2, 9007,
	9000, 3, 2, 2, 2, 9007, 9002, 3, 2, 2, 2, 9008, 745, 3, 2, 2, 2, 9009,
	9015, 7, 779, 2, 2, 9010, 9011, 7, 804, 2, 2, 9011, 9012, 5, 706, 354,
	2, 9012, 9013, 7, 805, 2, 2, 9013, 9015, 3, 2, 2, 2, 9014, 9009, 3, 2,
	2, 2, 9014, 9010, 3, 2, 2, 2, 9015, 747, 3, 2, 2, 2, 9016, 9017, 7, 237,
	2, 2, 9017, 9018, 7, 37, 2, 2, 9018, 9023, 5, 754, 378, 2, 9019, 9020,
	7, 806, 2, 2, 9020, 9022, 5, 754, 378, 2, 9021, 9019, 3, 2, 2, 2, 9022,
	9025, 3, 2, 2, 2, 9023, 9021, 3, 2, 2, 2, 9023, 9024, 3, 2, 2, 2, 9024,
	9037, 3, 2, 2, 2, 9025, 9023, 3, 2, 2, 2, 9026, 9027, 7, 619, 2, 2, 9027,
	9028, 5, 706, 354, 2, 9028, 9035, 9, 108, 2, 2, 9029, 9030, 7, 128, 2,
	2, 9030, 9031, 9, 109, 2, 2, 9031, 9032, 5, 706, 354, 2, 9032, 9033, 9,
	108, 2, 2, 9033, 9034, 7, 622, 2, 2, 9034, 9036, 3, 2, 2, 2, 9035, 9029,
	3, 2, 2, 2, 9035, 9036, 3, 2, 2, 2, 9036, 9038, 3, 2, 2, 2, 9037, 9026,
	3, 2, 2, 2, 9037, 9038, 3, 2, 2, 2, 9038, 749, 3, 2, 2, 2, 9039, 9040,
	7, 133, 2, 2, 9040, 9064, 7, 33, 2, 2, 9041, 9042, 7, 133, 2, 2, 9042,
	9044, 7, 769, 2, 2, 9043, 9045, 5, 752, 377, 2, 9044, 9043, 3, 2, 2, 2,
	9044, 9045, 3, 2, 2, 2, 9045, 9064, 3, 2, 2, 2, 9046, 9047, 7, 133, 2,
	2, 9047, 9048, 7, 769, 2, 2, 9048, 9050, 9, 110, 2, 2, 9049, 9051, 7, 806,
	2, 2, 9050, 9049, 3, 2, 2, 2, 9050, 9051, 3, 2, 2, 2, 9051, 9055, 3, 2,
	2, 2, 9052, 9053, 7, 804, 2, 2, 9053, 9054, 7, 783, 2, 2, 9054, 9056, 7,
	805, 2, 2, 9055, 9052, 3, 2, 2, 2, 9055, 9056, 3, 2, 2, 2, 9056, 9060,
	3, 2, 2, 2, 9057, 9059, 5, 752, 377, 2, 9058, 9057, 3, 2, 2, 2, 9059, 9062,
	3, 2, 2, 2, 9060, 9058, 3, 2, 2, 2, 9060, 9061, 3, 2, 2, 2, 9061, 9064,
	3, 2, 2, 2, 9062, 9060, 3, 2, 2, 2, 9063, 9039, 3, 2, 2, 2, 9063, 9041,
	3, 2, 2, 2, 9063, 9046, 3, 2, 2, 2, 9064, 751, 3, 2, 2, 2, 9065, 9066,
	7, 806, 2, 2, 9066, 9067, 9, 111, 2, 2, 9067, 753, 3, 2, 2, 2, 9068, 9070,
	5, 706, 354, 2, 9069, 9071, 9, 112, 2, 2, 9070, 9069, 3, 2, 2, 2, 9070,
	9071, 3, 2, 2, 2, 9071, 755, 3, 2, 2, 2, 9072, 9073, 5, 706, 354, 2, 9073,
	757, 3, 2, 2, 2, 9074, 9075, 7, 235, 2, 2, 9075, 9076, 7, 804, 2, 2, 9076,
	9081, 5, 760, 381, 2, 9077, 9078, 7, 806, 2, 2, 9078, 9080, 5, 760, 381,
	2, 9079, 9077, 3, 2, 2, 2, 9080, 9083, 3, 2, 2, 2, 9081, 9079, 3, 2, 2,
	2, 9081, 9082, 3, 2, 2, 2, 9082, 9084, 3, 2, 2, 2, 9083, 9081, 3, 2, 2,
	2, 9084, 9085, 7, 805, 2, 2, 9085, 759, 3, 2, 2, 2, 9086, 9087, 7, 504,
	2, 2, 9087, 9132, 7, 779, 2, 2, 9088, 9089, 9, 113, 2, 2, 9089, 9132, 7,
	146, 2, 2, 9090, 9091, 9, 114, 2, 2, 9091, 9132, 7, 358, 2, 2, 9092, 9093,
	9, 115, 2, 2, 9093, 9132, 7, 169, 2, 2, 9094, 9095, 7, 497, 2, 2, 9095,
	9132, 7, 764, 2, 2, 9096, 9097, 7, 514, 2, 2, 9097, 9132, 7, 237, 2, 2,
	9098, 9132, 7, 536, 2, 2, 9099, 9100, 7, 549, 2, 2, 9100, 9132, 7, 250,
	2, 2, 9101, 9102, 7, 550, 2, 2, 9102, 9132, 7, 250, 2, 2, 9103, 9104, 7,
	582, 2, 2, 9104, 9132, 7, 779, 2, 2, 9105, 9106, 7, 584, 2, 2, 9106, 9132,
	7, 779, 2, 2, 9107, 9108, 7, 625, 2, 2, 9108, 9109, 7, 133, 2, 2, 9109,
	9110, 7, 804, 2, 2, 9110, 9115, 5, 762, 382, 2, 9111, 9112, 7, 806, 2,
	2, 9112, 9114, 5, 762, 382, 2, 9113, 9111, 3, 2, 2, 2, 9114, 9117, 3, 2,
	2, 2, 9115, 9113, 3, 2, 2, 2, 9115, 9116, 3, 2, 2, 2, 9116, 9118, 3, 2,
	2, 2, 9117, 9115, 3, 2, 2, 2, 9118, 9119, 7, 805, 2, 2, 9119, 9132, 3,
	2, 2, 2, 9120, 9121, 7, 625, 2, 2, 9121, 9122, 7, 133, 2, 2, 9122, 9132,
	7, 756, 2, 2, 9123, 9124, 7, 630, 2, 2, 9124, 9132, 9, 74, 2, 2, 9125,
	9132, 7, 665, 2, 2, 9126, 9127, 7, 685, 2, 2, 9127, 9132, 7, 250, 2, 2,
	9128, 9129, 7, 366, 2, 2, 9129, 9130, 7, 250, 2, 2, 9130, 9132, 7, 783,
	2, 2, 9131, 9086, 3, 2, 2, 2, 9131, 9088, 3, 2, 2, 2, 9131, 9090, 3, 2,
	2, 2, 9131, 9092, 3, 2, 2, 2, 9131, 9094, 3, 2, 2, 2, 9131, 9096, 3, 2,
	2, 2, 9131, 9098, 3, 2, 2, 2, 9131, 9099, 3, 2, 2, 2, 9131, 9101, 3, 2,
	2, 2, 9131, 9103, 3, 2, 2, 2, 9131, 9105, 3, 2, 2, 2, 9131, 9107, 3, 2,
	2, 2, 9131, 9120, 3, 2, 2, 2, 9131, 9123, 3, 2, 2, 2, 9131, 9125, 3, 2,
	2, 2, 9131, 9126, 3, 2, 2, 2, 9131, 9128, 3, 2, 2, 2, 9132, 761, 3, 2,
	2, 2, 9133, 9140, 7, 778, 2, 2, 9134, 9141, 7, 756, 2, 2, 9135, 9138, 7,
	787, 2, 2, 9136, 9139, 5, 936, 469, 2, 9137, 9139, 7, 222, 2, 2, 9138,
	9136, 3, 2, 2, 2, 9138, 9137, 3, 2, 2, 2, 9139, 9141, 3, 2, 2, 2, 9140,
	9134, 3, 2, 2, 2, 9140, 9135, 3, 2, 2, 2, 9141, 763, 3, 2, 2, 2, 9142,
	9147, 5, 776, 389, 2, 9143, 9144, 7, 806, 2, 2, 9144, 9146, 5, 776, 389,
	2, 9145, 9143, 3, 2, 2, 2, 9146, 9149, 3, 2, 2, 2, 9147, 9145, 3, 2, 2,
	2, 9147, 9148, 3, 2, 2, 2, 9148, 765, 3, 2, 2, 2, 9149, 9147, 3, 2, 2,
	2, 9150, 9151, 7, 804, 2, 2, 9151, 9156, 5, 624, 313, 2, 9152, 9153, 7,
	806, 2, 2, 9153, 9155, 5, 624, 313, 2, 9154, 9152, 3, 2, 2, 2, 9155, 9158,
	3, 2, 2, 2, 9156, 9154, 3, 2, 2, 2, 9156, 9157, 3, 2, 2, 2, 9157, 9159,
	3, 2, 2, 2, 9158, 9156, 3, 2, 2, 2, 9159, 9160, 7, 805, 2, 2, 9160, 767,
	3, 2, 2, 2, 9161, 9167, 7, 809, 2, 2, 9162, 9163, 5, 888, 445, 2, 9163,
	9164, 7, 799, 2, 2, 9164, 9165, 5, 768, 385, 2, 9165, 9167, 3, 2, 2, 2,
	9166, 9161, 3, 2, 2, 2, 9166, 9162, 3, 2, 2, 2, 9167, 769, 3, 2, 2, 2,
	9168, 9169, 5, 888, 445, 2, 9169, 9170, 7, 799, 2, 2, 9170, 9172, 3, 2,
	2, 2, 9171, 9168, 3, 2, 2, 2, 9171, 9172, 3, 2, 2, 2, 9172, 9178, 3, 2,
	2, 2, 9173, 9179, 5, 940, 471, 2, 9174, 9175, 7, 803, 2, 2, 9175, 9179,
	7, 150, 2, 2, 9176, 9177, 7, 803, 2, 2, 9177, 9179, 7, 689, 2, 2, 9178,
	9173, 3, 2, 2, 2, 9178, 9174, 3, 2, 2, 2, 9178, 9176, 3, 2, 2, 2, 9179,
	9181, 3, 2, 2, 2, 9180, 9182, 5, 828, 415, 2, 9181, 9180, 3, 2, 2, 2, 9181,
	9182, 3, 2, 2, 2, 9182, 771, 3, 2, 2, 2, 9183, 9184, 5, 940, 471, 2, 9184,
	9185, 7, 799, 2, 2, 9185, 9186, 5, 940, 471, 2, 9186, 9188, 5, 766, 384,
	2, 9187, 9189, 5, 828, 415, 2, 9188, 9187, 3, 2, 2, 2, 9188, 9189, 3, 2,
	2, 2, 9189, 9201, 3, 2, 2, 2, 9190, 9191, 5, 940, 471, 2, 9191, 9192, 7,
	808, 2, 2, 9192, 9193, 7, 808, 2, 2, 9193, 9195, 5, 940, 471, 2, 9194,
	9196, 5, 766, 384, 2, 9195, 9194, 3, 2, 2, 2, 9195, 9196, 3, 2, 2, 2, 9196,
	9198, 3, 2, 2, 2, 9197, 9199, 5, 828, 415, 2, 9198, 9197, 3, 2, 2, 2, 9198,
	9199, 3, 2, 2, 2, 9199, 9201, 3, 2, 2, 2, 9200, 9183, 3, 2, 2, 2, 9200,
	9190, 3, 2, 2, 2, 9201, 773, 3, 2, 2, 2, 9202, 9204, 5, 706, 354, 2, 9203,
	9205, 5, 828, 415, 2, 9204, 9203, 3, 2, 2, 2, 9204, 9205, 3, 2, 2, 2, 9205,
	9211, 3, 2, 2, 2, 9206, 9207, 5, 844, 423, 2, 9207, 9208, 7, 787, 2, 2,
	9208, 9209, 5, 706, 354, 2, 9209, 9211, 3, 2, 2, 2, 9210, 9202, 3, 2, 2,
	2, 9210, 9206, 3, 2, 2, 2, 9211, 775, 3, 2, 2, 2, 9212, 9217, 5, 768, 385,
	2, 9213, 9217, 5, 770, 386, 2, 9214, 9217, 5, 772, 387, 2, 9215, 9217,
	5, 774, 388, 2, 9216, 9212, 3, 2, 2, 2, 9216, 9213, 3, 2, 2, 2, 9216, 9214,
	3, 2, 2, 2, 9216, 9215, 3, 2, 2, 2, 9217, 777, 3, 2, 2, 2, 9218, 9223,
	5, 780, 391, 2, 9219, 9220, 7, 806, 2, 2, 9220, 9222, 5, 780, 391, 2, 9221,
	9219, 3, 2, 2, 2, 9222, 9225, 3, 2, 2, 2, 9223, 9221, 3, 2, 2, 2, 9223,
	9224, 3, 2, 2, 2, 9224, 779, 3, 2, 2, 2, 9225, 9223, 3, 2, 2, 2, 9226,
	9232, 5, 782, 392, 2, 9227, 9228, 7, 804, 2, 2, 9228, 9229, 5, 782, 392,
	2, 9229, 9230, 7, 805, 2, 2, 9230, 9232, 3, 2, 2, 2, 9231, 9226, 3, 2,
	2, 2, 9231, 9227, 3, 2, 2, 2, 9232, 781, 3, 2, 2, 2, 9233, 9237, 5, 784,
	393, 2, 9234, 9236, 5, 794, 398, 2, 9235, 9234, 3, 2, 2, 2, 9236, 9239,
	3, 2, 2, 2, 9237, 9235, 3, 2, 2, 2, 9237, 9238, 3, 2, 2, 2, 9238, 783,
	3, 2, 2, 2, 9239, 9237, 3, 2, 2, 2, 9240, 9242, 5, 802, 402, 2, 9241, 9243,
	5, 830, 416, 2, 9242, 9241, 3, 2, 2, 2, 9242, 9243, 3, 2, 2, 2, 9243, 9287,
	3, 2, 2, 2, 9244, 9246, 5, 886, 444, 2, 9245, 9247, 5, 830, 416, 2, 9246,
	9245, 3, 2, 2, 2, 9246, 9247, 3, 2, 2, 2, 9247, 9287, 3, 2, 2, 2, 9248,
	9250, 5, 804, 403, 2, 9249, 9251, 5, 830, 416, 2, 9250, 9249, 3, 2, 2,
	2, 9250, 9251, 3, 2, 2, 2, 9251, 9287, 3, 2, 2, 2, 9252, 9257, 5, 808,
	405, 2, 9253, 9255, 5, 830, 416, 2, 9254, 9256, 5, 842, 422, 2, 9255, 9254,
	3, 2, 2, 2, 9255, 9256, 3, 2, 2, 2, 9256, 9258, 3, 2, 2, 2, 9257, 9253,
	3, 2, 2, 2, 9257, 9258, 3, 2, 2, 2, 9258, 9287, 3, 2, 2, 2, 9259, 9260,
	5, 792, 397, 2, 9260, 9261, 5, 830, 416, 2, 9261, 9287, 3, 2, 2, 2, 9262,
	9264, 5, 810, 406, 2, 9263, 9265, 5, 830, 416, 2, 9264, 9263, 3, 2, 2,
	2, 9264, 9265, 3, 2, 2, 2, 9265, 9287, 3, 2, 2, 2, 9266, 9268, 7, 778,
	2, 2, 9267, 9269, 5, 830, 416, 2, 9268, 9267, 3, 2, 2, 2, 9268, 9269, 3,
	2, 2, 2, 9269, 9287, 3, 2, 2, 2, 9270, 9271, 7, 778, 2, 2, 9271, 9272,
	7, 799, 2, 2, 9272, 9277, 5, 810, 406, 2, 9273, 9275, 5, 830, 416, 2, 9274,
	9276, 5, 842, 422, 2, 9275, 9274, 3, 2, 2, 2, 9275, 9276, 3, 2, 2, 2, 9276,
	9278, 3, 2, 2, 2, 9277, 9273, 3, 2, 2, 2, 9277, 9278, 3, 2, 2, 2, 9278,
	9287, 3, 2, 2, 2, 9279, 9287, 5, 786, 394, 2, 9280, 9281, 7, 808, 2, 2,
	9281, 9282, 7, 808, 2, 2, 9282, 9284, 5, 810, 406, 2, 9283, 9285, 5, 830,
	416, 2, 9284, 9283, 3, 2, 2, 2, 9284, 9285, 3, 2, 2, 2, 9285, 9287, 3,
	2, 2, 2, 9286, 9240, 3, 2, 2, 2, 9286, 9244, 3, 2, 2, 2, 9286, 9248, 3,
	2, 2, 2, 9286, 9252, 3, 2, 2, 2, 9286, 9259, 3, 2, 2, 2, 9286, 9262, 3,
	2, 2, 2, 9286, 9266, 3, 2, 2, 2, 9286, 9270, 3, 2, 2, 2, 9286, 9279, 3,
	2, 2, 2, 9286, 9280, 3, 2, 2, 2, 9287, 785, 3, 2, 2, 2, 9288, 9289, 7,
	234, 2, 2, 9289, 9290, 7, 804, 2, 2, 9290, 9291, 5, 706, 354, 2, 9291,
	9292, 7, 806, 2, 2, 9292, 9295, 5, 706, 354, 2, 9293, 9294, 7, 806, 2,
	2, 9294, 9296, 5, 706, 354, 2, 9295, 9293, 3, 2, 2, 2, 9295, 9296, 3, 2,
	2, 2, 9296, 9297, 3, 2, 2, 2, 9297, 9303, 7, 805, 2, 2, 9298, 9299, 7,
	379, 2, 2, 9299, 9300, 7, 804, 2, 2, 9300, 9301, 5, 788, 395, 2, 9301,
	9302, 7, 805, 2, 2, 9302, 9304, 3, 2, 2, 2, 9303, 9298, 3, 2, 2, 2, 9303,
	9304, 3, 2, 2, 2, 9304, 787, 3, 2, 2, 2, 9305, 9310, 5, 790, 396, 2, 9306,
	9307, 7, 806, 2, 2, 9307, 9309, 5, 790, 396, 2, 9308, 9306, 3, 2, 2, 2,
	9309, 9312, 3, 2, 2, 2, 9310, 9308, 3, 2, 2, 2, 9310, 9311, 3, 2, 2, 2,
	9311, 789, 3, 2, 2, 2, 9312, 9310, 3, 2, 2, 2, 9313, 9314, 7, 780, 2, 2,
	9314, 9316, 5, 932, 467, 2, 9315, 9317, 7, 783, 2, 2, 9316, 9315, 3, 2,
	2, 2, 9316, 9317, 3, 2, 2, 2, 9317, 791, 3, 2, 2, 2, 9318, 9319, 7, 43,
	2, 2, 9319, 9320, 7, 804, 2, 2, 9320, 9321, 7, 44, 2, 2, 9321, 9322, 5,
	888, 445, 2, 9322, 9323, 7, 806, 2, 2, 9323, 9324, 9, 116, 2, 2, 9324,
	9325, 7, 805, 2, 2, 9325, 793, 3, 2, 2, 2, 9326, 9328, 7, 160, 2, 2, 9327,
	9326, 3, 2, 2, 2, 9327, 9328, 3, 2, 2, 2, 9328, 9334, 3, 2, 2, 2, 9329,
	9331, 9, 117, 2, 2, 9330, 9332, 7, 238, 2, 2, 9331, 9330, 3, 2, 2, 2, 9331,
	9332, 3, 2, 2, 2, 9332, 9334, 3, 2, 2, 2, 9333, 9327, 3, 2, 2, 2, 9333,
	9329, 3, 2, 2, 2, 9334, 9336, 3, 2, 2, 2, 9335, 9337, 9, 118, 2, 2, 9336,
	9335, 3, 2, 2, 2, 9336, 9337, 3, 2, 2, 2, 9337, 9338, 3, 2, 2, 2, 9338,
	9339, 7, 169, 2, 2, 9339, 9340, 5, 780, 391, 2, 9340, 9341, 7, 228, 2,
	2, 9341, 9342, 5, 728, 365, 2, 9342, 9361, 3, 2, 2, 2, 9343, 9344, 7, 73,
	2, 2, 9344, 9345, 7, 169, 2, 2, 9345, 9361, 5, 780, 391, 2, 9346, 9347,
	7, 73, 2, 2, 9347, 9348, 7, 405, 2, 2, 9348, 9361, 5, 780, 391, 2, 9349,
	9350, 7, 238, 2, 2, 9350, 9351, 7, 405, 2, 2, 9351, 9361, 5, 780, 391,
	2, 9352, 9353, 7, 249, 2, 2, 9353, 9354, 5, 796, 399, 2, 9354, 9355, 5,
	830, 416, 2, 9355, 9361, 3, 2, 2, 2, 9356, 9357, 7, 361, 2, 2, 9357, 9358,
	5, 798, 400, 2, 9358, 9359, 5, 830, 416, 2, 9359, 9361, 3, 2, 2, 2, 9360,
	9333, 3, 2, 2, 2, 9360, 9343, 3, 2, 2, 2, 9360, 9346, 3, 2, 2, 2, 9360,
	9349, 3, 2, 2, 2, 9360, 9352, 3, 2, 2, 2, 9360, 9356, 3, 2, 2, 2, 9361,
	795, 3, 2, 2, 2, 9362, 9363, 7, 804, 2, 2, 9363, 9364, 5, 852, 427, 2,
	9364, 9365, 7, 133, 2, 2, 9365, 9366, 5, 896, 449, 2, 9366, 9367, 7, 154,
	2, 2, 9367, 9368, 5, 842, 422, 2, 9368, 9369, 7, 805, 2, 2, 9369, 797,
	3, 2, 2, 2, 9370, 9371, 7, 804, 2, 2, 9371, 9372, 5, 706, 354, 2, 9372,
	9373, 7, 133, 2, 2, 9373, 9374, 5, 896, 449, 2, 9374, 9375, 7, 154, 2,
	2, 9375, 9376, 7, 804, 2, 2, 9376, 9377, 5, 800, 401, 2, 9377, 9378, 7,
	805, 2, 2, 9378, 9379, 7, 805, 2, 2, 9379, 799, 3, 2, 2, 2, 9380, 9385,
	5, 896, 449, 2, 9381, 9382, 7, 806, 2, 2, 9382, 9384, 5, 896, 449, 2, 9383,
	9381, 3, 2, 2, 2, 9384, 9387, 3, 2, 2, 2, 9385, 9383, 3, 2, 2, 2, 9385,
	9386, 3, 2, 2, 2, 9386, 801, 3, 2, 2, 2, 9387, 9385, 3, 2, 2, 2, 9388,
	9390, 5, 888, 445, 2, 9389, 9391, 5, 834, 418, 2, 9390, 9389, 3, 2, 2,
	2, 9390, 9391, 3, 2, 2, 2, 9391, 803, 3, 2, 2, 2, 9392, 9393, 7, 233, 2,
	2, 9393, 9394, 7, 804, 2, 2, 9394, 9395, 7, 783, 2, 2, 9395, 9396, 7, 806,
	2, 2, 9396, 9397, 7, 783, 2, 2, 9397, 9398, 7, 806, 2, 2, 9398, 9399, 7,
	783, 2, 2, 9399, 9419, 7, 805, 2, 2, 9400, 9401, 7, 233, 2, 2, 9401, 9402,
	7, 804, 2, 2, 9402, 9403, 7, 36, 2, 2, 9403, 9404, 7, 783, 2, 2, 9404,
	9414, 7, 806, 2, 2, 9405, 9410, 5, 806, 404, 2, 9406, 9407, 7, 806, 2,
	2, 9407, 9409, 5, 806, 404, 2, 9408, 9406, 3, 2, 2, 2, 9409, 9412, 3, 2,
	2, 2, 9410, 9408, 3, 2, 2, 2, 9410, 9411, 3, 2, 2, 2, 9411, 9415, 3, 2,
	2, 2, 9412, 9410, 3, 2, 2, 2, 9413, 9415, 5, 940, 471, 2, 9414, 9405, 3,
	2, 2, 2, 9414, 9413, 3, 2, 2, 2, 9415, 9416, 3, 2, 2, 2, 9416, 9417, 7,
	805, 2, 2, 9417, 9419, 3, 2, 2, 2, 9418, 9392, 3, 2, 2, 2, 9418, 9400,
	3, 2, 2, 2, 9419, 805, 3, 2, 2, 2, 9420, 9421, 5, 940, 471, 2, 9421, 9422,
	7, 787, 2, 2, 9422, 9423, 9, 22, 2, 2, 9423, 807, 3, 2, 2, 2, 9424, 9435,
	5, 718, 360, 2, 9425, 9426, 7, 804, 2, 2, 9426, 9427, 5, 718, 360, 2, 9427,
	9428, 7, 805, 2, 2, 9428, 9435, 3, 2, 2, 2, 9429, 9435, 5, 846, 424, 2,
	9430, 9431, 7, 804, 2, 2, 9431, 9432, 5, 846, 424, 2, 9432, 9433, 7, 805,
	2, 2, 9433, 9435, 3, 2, 2, 2, 9434, 9424, 3, 2, 2, 2, 9434, 9425, 3, 2,
	2, 2, 9434, 9429, 3, 2, 2, 2, 9434, 9430, 3, 2, 2, 2, 9435, 809, 3, 2,
	2, 2, 9436, 9560, 5, 850, 426, 2, 9437, 9560, 5, 852, 427, 2, 9438, 9560,
	5, 854, 428, 2, 9439, 9440, 5, 912, 457, 2, 9440, 9442, 7, 804, 2, 2, 9441,
	9443, 5, 848, 425, 2, 9442, 9441, 3, 2, 2, 2, 9442, 9443, 3, 2, 2, 2, 9443,
	9444, 3, 2, 2, 2, 9444, 9445, 7, 805, 2, 2, 9445, 9560, 3, 2, 2, 2, 9446,
	9447, 7, 423, 2, 2, 9447, 9448, 7, 804, 2, 2, 9448, 9449, 7, 809, 2, 2,
	9449, 9560, 7, 805, 2, 2, 9450, 9451, 7, 430, 2, 2, 9451, 9452, 7, 804,
	2, 2, 9452, 9453, 5, 706, 354, 2, 9453, 9454, 7, 15, 2, 2, 9454, 9455,
	5, 932, 467, 2, 9455, 9456, 7, 805, 2, 2, 9456, 9560, 3, 2, 2, 2, 9457,
	9458, 7, 70, 2, 2, 9458, 9459, 7, 804, 2, 2, 9459, 9460, 5, 932, 467, 2,
	9460, 9461, 7, 806, 2, 2, 9461, 9464, 5, 706, 354, 2, 9462, 9463, 7, 806,
	2, 2, 9463, 9465, 5, 706, 354, 2, 9464, 9462, 3, 2, 2, 2, 9464, 9465, 3,
	2, 2, 2, 9465, 9466, 3, 2, 2, 2, 9466, 9467, 7, 805, 2, 2, 9467, 9560,
	3, 2, 2, 2, 9468, 9469, 7, 436, 2, 2, 9469, 9470, 7, 804, 2, 2, 9470, 9471,
	7, 809, 2, 2, 9471, 9560, 7, 805, 2, 2, 9472, 9473, 7, 53, 2, 2, 9473,
	9474, 7, 804, 2, 2, 9474, 9475, 5, 848, 425, 2, 9475, 9476, 7, 805, 2,
	2, 9476, 9560, 3, 2, 2, 2, 9477, 9560, 7, 77, 2, 2, 9478, 9560, 7, 78,
	2, 2, 9479, 9480, 7, 458, 2, 2, 9480, 9481, 7, 804, 2, 2, 9481, 9482, 7,
	780, 2, 2, 9482, 9483, 7, 806, 2, 2, 9483, 9484, 5, 706, 354, 2, 9484,
	9485, 7, 806, 2, 2, 9485, 9486, 5, 706, 354, 2, 9486, 9487, 7, 805, 2,
	2, 9487, 9560, 3, 2, 2, 2, 9488, 9489, 7, 459, 2, 2, 9489, 9490, 7, 804,
	2, 2, 9490, 9491, 7, 780, 2, 2, 9491, 9492, 7, 806, 2, 2, 9492, 9493, 5,
	706, 354, 2, 9493, 9494, 7, 806, 2, 2, 9494, 9495, 5, 706, 354, 2, 9495,
	9496, 7, 805, 2, 2, 9496, 9560, 3, 2, 2, 2, 9497, 9498, 7, 460, 2, 2, 9498,
	9499, 7, 804, 2, 2, 9499, 9500, 7, 780, 2, 2, 9500, 9501, 7, 806, 2, 2,
	9501, 9502, 5, 706, 354, 2, 9502, 9503, 7, 805, 2, 2, 9503, 9560, 3, 2,
	2, 2, 9504, 9505, 7, 461, 2, 2, 9505, 9506, 7, 804, 2, 2, 9506, 9507, 7,
	780, 2, 2, 9507, 9508, 7, 806, 2, 2, 9508, 9509, 5, 706, 354, 2, 9509,
	9510, 7, 805, 2, 2, 9510, 9560, 3, 2, 2, 2, 9511, 9512, 7, 522, 2, 2, 9512,
	9513, 7, 804, 2, 2, 9513, 9560, 7, 805, 2, 2, 9514, 9515, 7, 523, 2, 2,
	9515, 9516, 7, 804, 2, 2, 9516, 9560, 7, 805, 2, 2, 9517, 9518, 7, 150,
	2, 2, 9518, 9519, 7, 804, 2, 2, 9519, 9522, 5, 932, 467, 2, 9520, 9521,
	7, 806, 2, 2, 9521, 9523, 7, 779, 2, 2, 9522, 9520, 3, 2, 2, 2, 9522, 9523,
	3, 2, 2, 2, 9523, 9526, 3, 2, 2, 2, 9524, 9525, 7, 806, 2, 2, 9525, 9527,
	7, 779, 2, 2, 9526, 9524, 3, 2, 2, 2, 9526, 9527, 3, 2, 2, 2, 9527, 9528,
	3, 2, 2, 2, 9528, 9529, 7, 805, 2, 2, 9529, 9560, 3, 2, 2, 2, 9530, 9560,
	7, 593, 2, 2, 9531, 9532, 7, 223, 2, 2, 9532, 9533, 7, 804, 2, 2, 9533,
	9534, 5, 706, 354, 2, 9534, 9535, 7, 806, 2, 2, 9535, 9536, 5, 706, 354,
	2, 9536, 9537, 7, 805, 2, 2, 9537, 9560, 3, 2, 2, 2, 9538, 9539, 7, 729,
	2, 2, 9539, 9540, 7, 804, 2, 2, 9540, 9541, 5, 706, 354, 2, 9541, 9542,
	7, 806, 2, 2, 9542, 9543, 7, 779, 2, 2, 9543, 9544, 7, 806, 2, 2, 9544,
	9545, 7, 779, 2, 2, 9545, 9546, 7, 806, 2, 2, 9546, 9547, 5, 706, 354,
	2, 9547, 9548, 7, 805, 2, 2, 9548, 9560, 3, 2, 2, 2, 9549, 9560, 7, 315,
	2, 2, 9550, 9560, 7, 340, 2, 2, 9551, 9552, 7, 168, 2, 2, 9552, 9553, 7,
	804, 2, 2, 9553, 9554, 5, 706, 354, 2, 9554, 9555, 7, 806, 2, 2, 9555,
	9556, 5, 706, 354, 2, 9556, 9557, 7, 805, 2, 2, 9557, 9560, 3, 2, 2, 2,
	9558, 9560, 5, 812, 407, 2, 9559, 9436, 3, 2, 2, 2, 9559, 9437, 3, 2, 2,
	2, 9559, 9438, 3, 2, 2, 2, 9559, 9439, 3, 2, 2, 2, 9559, 9446, 3, 2, 2,
	2, 9559, 9450, 3, 2, 2, 2, 9559, 9457, 3, 2, 2, 2, 9559, 9468, 3, 2, 2,
	2, 9559, 9472, 3, 2, 2, 2, 9559, 9477, 3, 2, 2, 2, 9559, 9478, 3, 2, 2,
	2, 9559, 9479, 3, 2, 2, 2, 9559, 9488, 3, 2, 2, 2, 9559, 9497, 3, 2, 2,
	2, 9559, 9504, 3, 2, 2, 2, 9559, 9511, 3, 2, 2, 2, 9559, 9514, 3, 2, 2,
	2, 9559, 9517, 3, 2, 2, 2, 9559, 9530, 3, 2, 2, 2, 9559, 9531, 3, 2, 2,
	2, 9559, 9538, 3, 2, 2, 2, 9559, 9549, 3, 2, 2, 2, 9559, 9550, 3, 2, 2,
	2, 9559, 9551, 3, 2, 2, 2, 9559, 9558, 3, 2, 2, 2, 9560, 811, 3, 2, 2,
	2, 9561, 9567, 5, 814, 408, 2, 9562, 9567, 5, 816, 409, 2, 9563, 9567,
	5, 818, 410, 2, 9564, 9567, 5, 820, 411, 2, 9565, 9567, 5, 822, 412, 2,
	9566, 9561, 3, 2, 2, 2, 9566, 9562, 3, 2, 2, 2, 9566, 9563, 3, 2, 2, 2,
	9566, 9564, 3, 2, 2, 2, 9566, 9565, 3, 2, 2, 2, 9567, 813, 3, 2, 2, 2,
	9568, 9573, 7, 778, 2, 2, 9569, 9573, 7, 780, 2, 2, 9570, 9573, 7, 114,
	2, 2, 9571, 9573, 5, 816, 409, 2, 9572, 9568, 3, 2, 2, 2, 9572, 9569, 3,
	2, 2, 2, 9572, 9570, 3, 2, 2, 2, 9572, 9571, 3, 2, 2, 2, 9573, 9574, 3,
	2, 2, 2, 9574, 9575, 7, 799, 2, 2, 9575, 9576, 7, 761, 2, 2, 9576, 9577,
	7, 804, 2, 2, 9577, 9578, 7, 783, 2, 2, 9578, 9579, 7, 806, 2, 2, 9579,
	9580, 7, 783, 2, 2, 9580, 9612, 7, 805, 2, 2, 9581, 9586, 7, 778, 2, 2,
	9582, 9586, 7, 780, 2, 2, 9583, 9586, 7, 114, 2, 2, 9584, 9586, 5, 816,
	409, 2, 9585, 9581, 3, 2, 2, 2, 9585, 9582, 3, 2, 2, 2, 9585, 9583, 3,
	2, 2, 2, 9585, 9584, 3, 2, 2, 2, 9586, 9587, 3, 2, 2, 2, 9587, 9588, 7,
	799, 2, 2, 9588, 9589, 7, 688, 2, 2, 9589, 9590, 7, 799, 2, 2, 9590, 9591,
	7, 761, 2, 2, 9591, 9592, 7, 804, 2, 2, 9592, 9593, 7, 783, 2, 2, 9593,
	9594, 7, 806, 2, 2, 9594, 9595, 7, 783, 2, 2, 9595, 9612, 7, 805, 2, 2,
	9596, 9601, 7, 778, 2, 2, 9597, 9601, 7, 780, 2, 2, 9598, 9601, 7, 114,
	2, 2, 9599, 9601, 5, 816, 409, 2, 9600, 9596, 3, 2, 2, 2, 9600, 9597, 3,
	2, 2, 2, 9600, 9598, 3, 2, 2, 2, 9600, 9599, 3, 2, 2, 2, 9601, 9602, 3,
	2, 2, 2, 9602, 9603, 7, 799, 2, 2, 9603, 9604, 7, 241, 2, 2, 9604, 9605,
	7, 799, 2, 2, 9605, 9606, 7, 761, 2, 2, 9606, 9607, 7, 804, 2, 2, 9607,
	9608, 7, 783, 2, 2, 9608, 9609, 7, 806, 2, 2, 9609, 9610, 7, 783, 2, 2,
	9610, 9612, 7, 805, 2, 2, 9611, 9572, 3, 2, 2, 2, 9611, 9585, 3, 2, 2,
	2, 9611, 9600, 3, 2, 2, 2, 9612, 815, 3, 2, 2, 2, 9613, 9617, 7, 778, 2,
	2, 9614, 9617, 7, 780, 2, 2, 9615, 9617, 5, 886, 444, 2, 9616, 9613, 3,
	2, 2, 2, 9616, 9614, 3, 2, 2, 2, 9616, 9615, 3, 2, 2, 2, 9617, 9618, 3,
	2, 2, 2, 9618, 9619, 7, 799, 2, 2, 9619, 9620, 7, 652, 2, 2, 9620, 9621,
	7, 804, 2, 2, 9621, 9622, 7, 783, 2, 2, 9622, 9636, 7, 805, 2, 2, 9623,
	9627, 7, 778, 2, 2, 9624, 9627, 7, 780, 2, 2, 9625, 9627, 5, 886, 444,
	2, 9626, 9623, 3, 2, 2, 2, 9626, 9624, 3, 2, 2, 2, 9626, 9625, 3, 2, 2,
	2, 9627, 9628, 3, 2, 2, 2, 9628, 9629, 7, 799, 2, 2, 9629, 9630, 7, 688,
	2, 2, 9630, 9631, 7, 799, 2, 2, 9631, 9632, 7, 652, 2, 2, 9632, 9633, 7,
	804, 2, 2, 9633, 9634, 7, 783, 2, 2, 9634, 9636, 7, 805, 2, 2, 9635, 9616,
	3, 2, 2, 2, 9635, 9626, 3, 2, 2, 2, 9636, 817, 3, 2, 2, 2, 9637, 9638,
	9, 119, 2, 2, 9638, 9639, 7, 799, 2, 2, 9639, 9640, 7, 496, 2, 2, 9640,
	9641, 7, 804, 2, 2, 9641, 9642, 7, 783, 2, 2, 9642, 9643, 7, 805, 2, 2,
	9643, 819, 3, 2, 2, 2, 9644, 9645, 9, 119, 2, 2, 9645, 9646, 7, 799, 2,
	2, 9646, 9647, 7, 595, 2, 2, 9647, 9648, 7, 804, 2, 2, 9648, 9649, 7, 783,
	2, 2, 9649, 9650, 7, 805, 2, 2, 9650, 821, 3, 2, 2, 2, 9651, 9652, 9, 119,
	2, 2, 9652, 9653, 7, 799, 2, 2, 9653, 9654, 7, 606, 2, 2, 9654, 9655, 7,
	804, 2, 2, 9655, 9656, 7, 783, 2, 2, 9656, 9657, 7, 805, 2, 2, 9657, 823,
	3, 2, 2, 2, 9658, 9659, 7, 375, 2, 2, 9659, 9660, 5, 706, 354, 2, 9660,
	9661, 7, 347, 2, 2, 9661, 9662, 5, 706, 354, 2, 9662, 825, 3, 2, 2, 2,
	9663, 9664, 7, 375, 2, 2, 9664, 9665, 5, 728, 365, 2, 9665, 9666, 7, 347,
	2, 2, 9666, 9667, 5, 706, 354, 2, 9667, 827, 3, 2, 2, 2, 9668, 9670, 7,
	15, 2, 2, 9669, 9668, 3, 2, 2, 2, 9669, 9670, 3, 2, 2, 2, 9670, 9671, 3,
	2, 2, 2, 9671, 9672, 5, 844, 423, 2, 9672, 829, 3, 2, 2, 2, 9673, 9675,
	7, 15, 2, 2, 9674, 9673, 3, 2, 2, 2, 9674, 9675, 3, 2, 2, 2, 9675, 9676,
	3, 2, 2, 2, 9676, 9677, 5, 832, 417, 2, 9677, 831, 3, 2, 2, 2, 9678, 9680,
	5, 940, 471, 2, 9679, 9681, 5, 834, 418, 2, 9680, 9679, 3, 2, 2, 2, 9680,
	9681, 3, 2, 2, 2, 9681, 833, 3, 2, 2, 2, 9682, 9684, 7, 379, 2, 2, 9683,
	9682, 3, 2, 2, 2, 9683, 9684, 3, 2, 2, 2, 9684, 9685, 3, 2, 2, 2, 9685,
	9686, 7, 804, 2, 2, 9686, 9693, 5, 838, 420, 2, 9687, 9689, 7, 806, 2,
	2, 9688, 9687, 3, 2, 2, 2, 9688, 9689, 3, 2, 2, 2, 9689, 9690, 3, 2, 2,
	2, 9690, 9692, 5, 838, 420, 2, 9691, 9688, 3, 2, 2, 2, 9692, 9695, 3, 2,
	2, 2, 9693, 9691, 3, 2, 2, 2, 9693, 9694, 3, 2, 2, 2, 9694, 9696, 3, 2,
	2, 2, 9695, 9693, 3, 2, 2, 2, 9696, 9697, 7, 805, 2, 2, 9697, 835, 3, 2,
	2, 2, 9698, 9699, 7, 379, 2, 2, 9699, 9700, 7, 804, 2, 2, 9700, 9707, 5,
	838, 420, 2, 9701, 9703, 7, 806, 2, 2, 9702, 9701, 3, 2, 2, 2, 9702, 9703,
	3, 2, 2, 2, 9703, 9704, 3, 2, 2, 2, 9704, 9706, 5, 838, 420, 2, 9705, 9702,
	3, 2, 2, 2, 9706, 9709, 3, 2, 2, 2, 9707, 9705, 3, 2, 2, 2, 9707, 9708,
	3, 2, 2, 2, 9708, 9710, 3, 2, 2, 2, 9709, 9707, 3, 2, 2, 2, 9710, 9711,
	7, 805, 2, 2, 9711, 837, 3, 2, 2, 2, 9712, 9714, 7, 605, 2, 2, 9713, 9712,
	3, 2, 2, 2, 9713, 9714, 3, 2, 2, 2, 9714, 9753, 3, 2, 2, 2, 9715, 9716,
	7, 157, 2, 2, 9716, 9717, 7, 804, 2, 2, 9717, 9722, 5, 840, 421, 2, 9718,
	9719, 7, 806, 2, 2, 9719, 9721, 5, 840, 421, 2, 9720, 9718, 3, 2, 2, 2,
	9721, 9724, 3, 2, 2, 2, 9722, 9720, 3, 2, 2, 2, 9722, 9723, 3, 2, 2, 2,
	9723, 9725, 3, 2, 2, 2, 9724, 9722, 3, 2, 2, 2, 9725, 9726, 7, 805, 2,
	2, 9726, 9754, 3, 2, 2, 2, 9727, 9728, 7, 157, 2, 2, 9728, 9729, 7, 787,
	2, 2, 9729, 9754, 5, 840, 421, 2, 9730, 9745, 7, 134, 2, 2, 9731, 9732,
	7, 804, 2, 2, 9732, 9733, 5, 840, 421, 2, 9733, 9734, 7, 804, 2, 2, 9734,
	9739, 7, 780, 2, 2, 9735, 9736, 7, 806, 2, 2, 9736, 9738, 7, 780, 2, 2,
	9737, 9735, 3, 2, 2, 2, 9738, 9741, 3, 2, 2, 2, 9739, 9737, 3, 2, 2, 2,
	9739, 9740, 3, 2, 2, 2, 9740, 9742, 3, 2, 2, 2, 9741, 9739, 3, 2, 2, 2,
	9742, 9743, 7, 805, 2, 2, 9743, 9744, 7, 805, 2, 2, 9744, 9746, 3, 2, 2,
	2, 9745, 9731, 3, 2, 2, 2, 9745, 9746, 3, 2, 2, 2, 9746, 9754, 3, 2, 2,
	2, 9747, 9754, 7, 708, 2, 2, 9748, 9754, 7, 717, 2, 2, 9749, 9750, 7, 718,
	2, 2, 9750, 9751, 7, 787, 2, 2, 9751, 9754, 7, 779, 2, 2, 9752, 9754, 7,
	780, 2, 2, 9753, 9715, 3, 2, 2, 2, 9753, 9727, 3, 2, 2, 2, 9753, 9730,
	3, 2, 2, 2, 9753, 9747, 3, 2, 2, 2, 9753, 9748, 3, 2, 2, 2, 9753, 9749,
	3, 2, 2, 2, 9753, 9752, 3, 2, 2, 2, 9754, 839, 3, 2, 2, 2, 9755, 9758,
	5, 940, 471, 2, 9756, 9758, 7, 779, 2, 2, 9757, 9755, 3, 2, 2, 2, 9757,
	9756, 3, 2, 2, 2, 9758, 841, 3, 2, 2, 2, 9759, 9760, 7, 804, 2, 2, 9760,
	9765, 5, 844, 423, 2, 9761, 9762, 7, 806, 2, 2, 9762, 9764, 5, 844, 423,
	2, 9763, 9761, 3, 2, 2, 2, 9764, 9767, 3, 2, 2, 2, 9765, 9763, 3, 2, 2,
	2, 9765, 9766, 3, 2, 2, 2, 9766, 9768, 3, 2, 2, 2, 9767, 9765, 3, 2, 2,
	2, 9768, 9769, 7, 805, 2, 2, 9769, 843, 3, 2, 2, 2, 9770, 9773, 5, 940,
	471, 2, 9771, 9773, 7, 783, 2, 2, 9772, 9770, 3, 2, 2, 2, 9772, 9771, 3,
	2, 2, 2, 9773, 845, 3, 2, 2, 2, 9774, 9775, 7, 369, 2, 2, 9775, 9776, 7,
	804, 2, 2, 9776, 9777, 5, 848, 425, 2, 9777, 9785, 7, 805, 2, 2, 9778,
	9779, 7, 806, 2, 2, 9779, 9780, 7, 804, 2, 2, 9780, 9781, 5, 848, 425,
	2, 9781, 9782, 7, 805, 2, 2, 9782, 9784, 3, 2, 2, 2, 9783, 9778, 3, 2,
	2, 2, 9784, 9787, 3, 2, 2, 2, 9785, 9783, 3, 2, 2, 2, 9785, 9786, 3, 2,
	2, 2, 9786, 847, 3, 2, 2, 2, 9787, 9785, 3, 2, 2, 2, 9788, 9793, 5, 706,
	354, 2, 9789, 9790, 7, 806, 2, 2, 9790, 9792, 5, 706, 354, 2, 9791, 9789,
	3, 2, 2, 2, 9792, 9795, 3, 2, 2, 2, 9793, 9791, 3, 2, 2, 2, 9793, 9794,
	3, 2, 2, 2, 9794, 849, 3, 2, 2, 2, 9795, 9793, 3, 2, 2, 2, 9796, 9797,
	9, 120, 2, 2, 9797, 9798, 7, 804, 2, 2, 9798, 9799, 7, 805, 2, 2, 9799,
	9807, 5, 858, 430, 2, 9800, 9801, 7, 613, 2, 2, 9801, 9802, 7, 804, 2,
	2, 9802, 9803, 5, 706, 354, 2, 9803, 9804, 7, 805, 2, 2, 9804, 9805, 5,
	858, 430, 2, 9805, 9807, 3, 2, 2, 2, 9806, 9796, 3, 2, 2, 2, 9806, 9800,
	3, 2, 2, 2, 9807, 851, 3, 2, 2, 2, 9808, 9809, 9, 121, 2, 2, 9809, 9810,
	7, 804, 2, 2, 9810, 9811, 5, 856, 429, 2, 9811, 9813, 7, 805, 2, 2, 9812,
	9814, 5, 858, 430, 2, 9813, 9812, 3, 2, 2, 2, 9813, 9814, 3, 2, 2, 2, 9814,
	9841, 3, 2, 2, 2, 9815, 9816, 9, 122, 2, 2, 9816, 9819, 7, 804, 2, 2, 9817,
	9820, 7, 809, 2, 2, 9818, 9820, 5, 856, 429, 2, 9819, 9817, 3, 2, 2, 2,
	9819, 9818, 3, 2, 2, 2, 9820, 9821, 3, 2, 2, 2, 9821, 9823, 7, 805, 2,
	2, 9822, 9824, 5, 858, 430, 2, 9823, 9822, 3, 2, 2, 2, 9823, 9824, 3, 2,
	2, 2, 9824, 9841, 3, 2, 2, 2, 9825, 9826, 7, 437, 2, 2, 9826, 9827, 7,
	804, 2, 2, 9827, 9828, 5, 856, 429, 2, 9828, 9829, 7, 805, 2, 2, 9829,
	9841, 3, 2, 2, 2, 9830, 9831, 7, 526, 2, 2, 9831, 9832, 7, 804, 2, 2, 9832,
	9833, 5, 706, 354, 2, 9833, 9834, 7, 805, 2, 2, 9834, 9841, 3, 2, 2, 2,
	9835, 9836, 7, 527, 2, 2, 9836, 9837, 7, 804, 2, 2, 9837, 9838, 5, 848,
	425, 2, 9838, 9839, 7, 805, 2, 2, 9839, 9841, 3, 2, 2, 2, 9840, 9808, 3,
	2, 2, 2, 9840, 9815, 3, 2, 2, 2, 9840, 9825, 3, 2, 2, 2, 9840, 9830, 3,
	2, 2, 2, 9840, 9835, 3, 2, 2, 2, 9841, 853, 3, 2, 2, 2, 9842, 9843, 9,
	123, 2, 2, 9843, 9844, 7, 804, 2, 2, 9844, 9845, 5, 706, 354, 2, 9845,
	9846, 7, 805, 2, 2, 9846, 9847, 5, 858, 430, 2, 9847, 9863, 3, 2, 2, 2,
	9848, 9849, 9, 124, 2, 2, 9849, 9850, 7, 804, 2, 2, 9850, 9857, 5, 706,
	354, 2, 9851, 9852, 7, 806, 2, 2, 9852, 9855, 5, 706, 354, 2, 9853, 9854,
	7, 806, 2, 2, 9854, 9856, 5, 706, 354, 2, 9855, 9853, 3, 2, 2, 2, 9855,
	9856, 3, 2, 2, 2, 9856, 9858, 3, 2, 2, 2, 9857, 9851, 3, 2, 2, 2, 9857,
	9858, 3, 2, 2, 2, 9858, 9859, 3, 2, 2, 2, 9859, 9860, 7, 805, 2, 2, 9860,
	9861, 5, 858, 430, 2, 9861, 9863, 3, 2, 2, 2, 9862, 9842, 3, 2, 2, 2, 9862,
	9848, 3, 2, 2, 2, 9863, 855, 3, 2, 2, 2, 9864, 9866, 9, 106, 2, 2, 9865,
	9864, 3, 2, 2, 2, 9865, 9866, 3, 2, 2, 2, 9866, 9867, 3, 2, 2, 2, 9867,
	9868, 5, 706, 354, 2, 9868, 857, 3, 2, 2, 2, 9869, 9870, 7, 239, 2, 2,
	9870, 9874, 7, 804, 2, 2, 9871, 9872, 7, 631, 2, 2, 9872, 9873, 7, 37,
	2, 2, 9873, 9875, 5, 848, 425, 2, 9874, 9871, 3, 2, 2, 2, 9874, 9875, 3,
	2, 2, 2, 9875, 9877, 3, 2, 2, 2, 9876, 9878, 5, 748, 375, 2, 9877, 9876,
	3, 2, 2, 2, 9877, 9878, 3, 2, 2, 2, 9878, 9880, 3, 2, 2, 2, 9879, 9881,
	5, 860, 431, 2, 9880, 9879, 3, 2, 2, 2, 9880, 9881, 3, 2, 2, 2, 9881, 9882,
	3, 2, 2, 2, 9882, 9883, 7, 805, 2, 2, 9883, 859, 3, 2, 2, 2, 9884, 9885,
	9, 125, 2, 2, 9885, 9886, 5, 862, 432, 2, 9886, 861, 3, 2, 2, 2, 9887,
	9894, 5, 866, 434, 2, 9888, 9889, 7, 28, 2, 2, 9889, 9890, 5, 864, 433,
	2, 9890, 9891, 7, 10, 2, 2, 9891, 9892, 5, 864, 433, 2, 9892, 9894, 3,
	2, 2, 2, 9893, 9887, 3, 2, 2, 2, 9893, 9888, 3, 2, 2, 2, 9894, 863, 3,
	2, 2, 2, 9895, 9898, 5, 866, 434, 2, 9896, 9898, 5, 868, 435, 2, 9897,
	9895, 3, 2, 2, 2, 9897, 9896, 3, 2, 2, 2, 9898, 865, 3, 2, 2, 2, 9899,
	9900, 7, 754, 2, 2, 9900, 9906, 7, 638, 2, 2, 9901, 9902, 7, 779, 2, 2,
	9902, 9906, 7, 638, 2, 2, 9903, 9904, 7, 74, 2, 2, 9904, 9906, 7, 688,
	2, 2, 9905, 9899, 3, 2, 2, 2, 9905, 9901, 3, 2, 2, 2, 9905, 9903, 3, 2,
	2, 2, 9906, 867, 3, 2, 2, 2, 9907, 9908, 7, 754, 2, 2, 9908, 9912, 7, 513,
	2, 2, 9909, 9910, 7, 779, 2, 2, 9910, 9912, 7, 513, 2, 2, 9911, 9907, 3,
	2, 2, 2, 9911, 9909, 3, 2, 2, 2, 9912, 869, 3, 2, 2, 2, 9913, 9914, 7,
	509, 2, 2, 9914, 9919, 5, 872, 437, 2, 9915, 9916, 7, 806, 2, 2, 9916,
	9918, 5, 872, 437, 2, 9917, 9915, 3, 2, 2, 2, 9918, 9921, 3, 2, 2, 2, 9919,
	9917, 3, 2, 2, 2, 9919, 9920, 3, 2, 2, 2, 9920, 9948, 3, 2, 2, 2, 9921,
	9919, 3, 2, 2, 2, 9922, 9923, 7, 469, 2, 2, 9923, 9926, 7, 787, 2, 2, 9924,
	9927, 5, 940, 471, 2, 9925, 9927, 7, 783, 2, 2, 9926, 9924, 3, 2, 2, 2,
	9926, 9925, 3, 2, 2, 2, 9927, 9948, 3, 2, 2, 2, 9928, 9929, 7, 468, 2,
	2, 9929, 9932, 7, 787, 2, 2, 9930, 9933, 5, 940, 471, 2, 9931, 9933, 7,
	783, 2, 2, 9932, 9930, 3, 2, 2, 2, 9932, 9931, 3, 2, 2, 2, 9933, 9948,
	3, 2, 2, 2, 9934, 9935, 7, 599, 2, 2, 9935, 9936, 7, 787, 2, 2, 9936, 9948,
	9, 8, 2, 2, 9937, 9938, 7, 745, 2, 2, 9938, 9939, 7, 787, 2, 2, 9939, 9948,
	9, 8, 2, 2, 9940, 9941, 7, 751, 2, 2, 9941, 9942, 7, 787, 2, 2, 9942, 9948,
	7, 779, 2, 2, 9943, 9944, 7, 464, 2, 2, 9944, 9948, 9, 8, 2, 2, 9945, 9946,
	7, 748, 2, 2, 9946, 9948, 9, 8, 2, 2, 9947, 9913, 3, 2, 2, 2, 9947, 9922,
	3, 2, 2, 2, 9947, 9928, 3, 2, 2, 2, 9947, 9934, 3, 2, 2, 2, 9947, 9937,
	3, 2, 2, 2, 9947, 9940, 3, 2, 2, 2, 9947, 9943, 3, 2, 2, 2, 9947, 9945,
	3, 2, 2, 2, 9948, 871, 3, 2, 2, 2, 9949, 9956, 7, 804, 2, 2, 9950, 9951,
	7, 607, 2, 2, 9951, 9952, 7, 787, 2, 2, 9952, 9957, 9, 126, 2, 2, 9953,
	9954, 7, 480, 2, 2, 9954, 9955, 7, 787, 2, 2, 9955, 9957, 7, 783, 2, 2,
	9956, 9950, 3, 2, 2, 2, 9956, 9953, 3, 2, 2, 2, 9957, 9958, 3, 2, 2, 2,
	9958, 9959, 7, 805, 2, 2, 9959, 873, 3, 2, 2, 2, 9960, 9963, 5, 876, 439,
	2, 9961, 9963, 5, 878, 440, 2, 9962, 9960, 3, 2, 2, 2, 9962, 9961, 3, 2,
	2, 2, 9963, 875, 3, 2, 2, 2, 9964, 9965, 7, 506, 2, 2, 9965, 9968, 5, 940,
	471, 2, 9966, 9967, 7, 62, 2, 2, 9967, 9969, 7, 509, 2, 2, 9968, 9966,
	3, 2, 2, 2, 9968, 9969, 3, 2, 2, 2, 9969, 9971, 3, 2, 2, 2, 9970, 9972,
	7, 89, 2, 2, 9971, 9970, 3, 2, 2, 2, 9971, 9972, 3, 2, 2, 2, 9972, 9975,
	3, 2, 2, 2, 9973, 9974, 7, 62, 2, 2, 9974, 9976, 7, 589, 2, 2, 9975, 9973,
	3, 2, 2, 2, 9975, 9976, 3, 2, 2, 2, 9976, 9977, 3, 2, 2, 2, 9977, 9982,
	5, 878, 440, 2, 9978, 9979, 7, 806, 2, 2, 9979, 9981, 5, 878, 440, 2, 9980,
	9978, 3, 2, 2, 2, 9981, 9984, 3, 2, 2, 2, 9982, 9980, 3, 2, 2, 2, 9982,
	9983, 3, 2, 2, 2, 9983, 877, 3, 2, 2, 2, 9984, 9982, 3, 2, 2, 2, 9985,
	9986, 7, 804, 2, 2, 9986, 9987, 7, 598, 2, 2, 9987, 9990, 7, 787, 2, 2,
	9988, 9991, 5, 940, 471, 2, 9989, 9991, 7, 783, 2, 2, 9990, 9988, 3, 2,
	2, 2, 9990, 9989, 3, 2, 2, 2, 9991, 9993, 3, 2, 2, 2, 9992, 9994, 7, 806,
	2, 2, 9993, 9992, 3, 2, 2, 2, 9993, 9994, 3, 2, 2, 2, 9994, 9995, 3, 2,
	2, 2, 9995, 9996, 7, 130, 2, 2, 9996, 9997, 7, 787, 2, 2, 9997, 9999, 7,
	783, 2, 2, 9998, 10000, 7, 806, 2, 2, 9999, 9998, 3, 2, 2, 2, 9999, 10000,
	3, 2, 2, 2, 10000, 10007, 3, 2, 2, 2, 10001, 10002, 7, 715, 2, 2, 10002,
	10003, 7, 787, 2, 2, 10003, 10005, 5, 948, 475, 2, 10004, 10006, 7, 806,
	2, 2, 10005, 10004, 3, 2, 2, 2, 10005, 10006, 3, 2, 2, 2, 10006, 10008,
	3, 2, 2, 2, 10007, 10001, 3, 2, 2, 2, 10007, 10008, 3, 2, 2, 2, 10008,
	10018, 3, 2, 2, 2, 10009, 10010, 7, 585, 2, 2, 10010, 10013, 7, 787, 2,
	2, 10011, 10014, 5, 948, 475, 2, 10012, 10014, 7, 757, 2, 2, 10013, 10011,
	3, 2, 2, 2, 10013, 10012, 3, 2, 2, 2, 10014, 10016, 3, 2, 2, 2, 10015,
	10017, 7, 806, 2, 2, 10016, 10015, 3, 2, 2, 2, 10016, 10017, 3, 2, 2, 2,
	10017, 10019, 3, 2, 2, 2, 10018, 10009, 3, 2, 2, 2, 10018, 10019, 3, 2,
	2, 2, 10019, 10026, 3, 2, 2, 2, 10020, 10021, 7, 507, 2, 2, 10021, 10022,
	7, 787, 2, 2, 10022, 10024, 5, 948, 475, 2, 10023, 10025, 7, 806, 2, 2,
	10024, 10023, 3, 2, 2, 2, 10024, 10025, 3, 2, 2, 2, 10025, 10027, 3, 2,
	2, 2, 10026, 10020, 3, 2, 2, 2, 10026, 10027, 3, 2, 2, 2, 10027, 10028,
	3, 2, 2, 2, 10028, 10029, 7, 805, 2, 2, 10029, 879, 3, 2, 2, 2, 10030,
	10031, 5, 940, 471, 2, 10031, 10032, 7, 799, 2, 2, 10032, 10033, 5, 940,
	471, 2, 10033, 10034, 7, 799, 2, 2, 10034, 10035, 5, 940, 471, 2, 10035,
	10036, 7, 799, 2, 2, 10036, 10048, 3, 2, 2, 2, 10037, 10038, 5, 940, 471,
	2, 10038, 10040, 7, 799, 2, 2, 10039, 10041, 5, 940, 471, 2, 10040, 10039,
	3, 2, 2, 2, 10040, 10041, 3, 2, 2, 2, 10041, 10042, 3, 2, 2, 2, 10042,
	10043, 7, 799, 2, 2, 10043, 10048, 3, 2, 2, 2, 10044, 10045, 5, 940, 471,
	2, 10045, 10046, 7, 799, 2, 2, 10046, 10048, 3, 2, 2, 2, 10047, 10030,
	3, 2, 2, 2, 10047, 10037, 3, 2, 2, 2, 10047, 10044, 3, 2, 2, 2, 10047,
	10048, 3, 2, 2, 2, 10048, 10049, 3, 2, 2, 2, 10049, 10050, 5, 940, 471,
	2, 10050, 881, 3, 2, 2, 2, 10051, 10057, 5, 940, 471, 2, 10052, 10053,
	5, 940, 471, 2, 10053, 10054, 7, 799, 2, 2, 10054, 10055, 5, 940, 471,
	2, 10055, 10057, 3, 2, 2, 2, 10056, 10051, 3, 2, 2, 2, 10056, 10052, 3,
	2, 2, 2, 10057, 883, 3, 2, 2, 2, 10058, 10064, 5, 940, 471, 2, 10059, 10060,
	5, 940, 471, 2, 10060, 10061, 7, 799, 2, 2, 10061, 10062, 5, 940, 471,
	2, 10062, 10064, 3, 2, 2, 2, 10063, 10058, 3, 2, 2, 2, 10063, 10059, 3,
	2, 2, 2, 10064, 885, 3, 2, 2, 2, 10065, 10066, 5, 940, 471, 2, 10066, 10067,
	7, 799, 2, 2, 10067, 10068, 5, 940, 471, 2, 10068, 10069, 7, 799, 2, 2,
	10069, 10070, 5, 940, 471, 2, 10070, 10071, 7, 799, 2, 2, 10071, 10083,
	3, 2, 2, 2, 10072, 10073, 5, 940, 471, 2, 10073, 10075, 7, 799, 2, 2, 10074,
	10076, 5, 940, 471, 2, 10075, 10074, 3, 2, 2, 2, 10075, 10076, 3, 2, 2,
	2, 10076, 10077, 3, 2, 2, 2, 10077, 10078, 7, 799, 2, 2, 10078, 10083,
	3, 2, 2, 2, 10079, 10080, 5, 940, 471, 2, 10080, 10081, 7, 799, 2, 2, 10081,
	10083, 3, 2, 2, 2, 10082, 10065, 3, 2, 2, 2, 10082, 10072, 3, 2, 2, 2,
	10082, 10079, 3, 2, 2, 2, 10082, 10083, 3, 2, 2, 2, 10083, 10084, 3, 2,
	2, 2, 10084, 10085, 5, 940, 471, 2, 10085, 887, 3, 2, 2, 2, 10086, 10087,
	5, 940, 471, 2, 10087, 10089, 7, 799, 2, 2, 10088, 10090, 5, 940, 471,
	2, 10089, 10088, 3, 2, 2, 2, 10089, 10090, 3, 2, 2, 2, 10090, 10091, 3,
	2, 2, 2, 10091, 10092, 7, 799, 2, 2, 10092, 10097, 3, 2, 2, 2, 10093, 10094,
	5, 940, 471, 2, 10094, 10095, 7, 799, 2, 2, 10095, 10097, 3, 2, 2, 2, 10096,
	10086, 3, 2, 2, 2, 10096, 10093, 3, 2, 2, 2, 10096, 10097, 3, 2, 2, 2,
	10097, 10098, 3, 2, 2, 2, 10098, 10113, 5, 940, 471, 2, 10099, 10100, 5,
	940, 471, 2, 10100, 10102, 7, 799, 2, 2, 10101, 10103, 5, 940, 471, 2,
	10102, 10101, 3, 2, 2, 2, 10102, 10103, 3, 2, 2, 2, 10103, 10104, 3, 2,
	2, 2, 10104, 10105, 7, 799, 2, 2, 10105, 10110, 3, 2, 2, 2, 10106, 10107,
	5, 940, 471, 2, 10107, 10108, 7, 799, 2, 2, 10108, 10110, 3, 2, 2, 2, 10109,
	10099, 3, 2, 2, 2, 10109, 10106, 3, 2, 2, 2, 10109, 10110, 3, 2, 2, 2,
	10110, 10111, 3, 2, 2, 2, 10111, 10113, 7, 31, 2, 2, 10112, 10096, 3, 2,
	2, 2, 10112, 10109, 3, 2, 2, 2, 10113, 889, 3, 2, 2, 2, 10114, 10115, 5,
	940, 471, 2, 10115, 10116, 7, 799, 2, 2, 10116, 10118, 3, 2, 2, 2, 10117,
	10114, 3, 2, 2, 2, 10117, 10118, 3, 2, 2, 2, 10118, 10119, 3, 2, 2, 2,
	10119, 10120, 5, 940, 471, 2, 10120, 891, 3, 2, 2, 2, 10121, 10122, 5,
	940, 471, 2, 10122, 10124, 7, 799, 2, 2, 10123, 10125, 5, 940, 471, 2,
	10124, 10123, 3, 2, 2, 2, 10124, 10125, 3, 2, 2, 2, 10125, 10126, 3, 2,
	2, 2, 10126, 10127, 7, 799, 2, 2, 10127, 10132, 3, 2, 2, 2, 10128, 10129,
	5, 940, 471, 2, 10129, 10130, 7, 799, 2, 2, 10130, 10132, 3, 2, 2, 2, 10131,
	10121, 3, 2, 2, 2, 10131, 10128, 3, 2, 2, 2, 10131, 10132, 3, 2, 2, 2,
	10132, 10133, 3, 2, 2, 2, 10133, 10134, 5, 940, 471, 2, 10134, 893, 3,
	2, 2, 2, 10135, 10138, 5, 886, 444, 2, 10136, 10138, 7, 778, 2, 2, 10137,
	10135, 3, 2, 2, 2, 10137, 10136, 3, 2, 2, 2, 10138, 895, 3, 2, 2, 2, 10139,
	10140, 5, 888, 445, 2, 10140, 10141, 7, 799, 2, 2, 10141, 10143, 3, 2,
	2, 2, 10142, 10139, 3, 2, 2, 2, 10142, 10143, 3, 2, 2, 2, 10143, 10144,
	3, 2, 2, 2, 10144, 10188, 5, 940, 471, 2, 10145, 10146, 5, 888, 445, 2,
	10146, 10147, 7, 799, 2, 2, 10147, 10149, 3, 2, 2, 2, 10148, 10145, 3,
	2, 2, 2, 10148, 10149, 3, 2, 2, 2, 10149, 10150, 3, 2, 2, 2, 10150, 10188,
	7, 442, 2, 2, 10151, 10152, 5, 888, 445, 2, 10152, 10153, 7, 799, 2, 2,
	10153, 10155, 3, 2, 2, 2, 10154, 10151, 3, 2, 2, 2, 10154, 10155, 3, 2,
	2, 2, 10155, 10156, 3, 2, 2, 2, 10156, 10188, 7, 722, 2, 2, 10157, 10158,
	5, 888, 445, 2, 10158, 10159, 7, 799, 2, 2, 10159, 10161, 3, 2, 2, 2, 10160,
	10157, 3, 2, 2, 2, 10160, 10161, 3, 2, 2, 2, 10161, 10162, 3, 2, 2, 2,
	10162, 10188, 7, 653, 2, 2, 10163, 10164, 5, 888, 445, 2, 10164, 10165,
	7, 799, 2, 2, 10165, 10167, 3, 2, 2, 2, 10166, 10163, 3, 2, 2, 2, 10166,
	10167, 3, 2, 2, 2, 10167, 10168, 3, 2, 2, 2, 10168, 10188, 7, 406, 2, 2,
	10169, 10170, 5, 888, 445, 2, 10170, 10171, 7, 799, 2, 2, 10171, 10173,
	3, 2, 2, 2, 10172, 10169, 3, 2, 2, 2, 10172, 10173, 3, 2, 2, 2, 10173,
	10174, 3, 2, 2, 2, 10174, 10188, 7, 403, 2, 2, 10175, 10176, 5, 888, 445,
	2, 10176, 10177, 7, 799, 2, 2, 10177, 10179, 3, 2, 2, 2, 10178, 10175,
	3, 2, 2, 2, 10178, 10179, 3, 2, 2, 2, 10179, 10180, 3, 2, 2, 2, 10180,
	10188, 7, 402, 2, 2, 10181, 10182, 5, 888, 445, 2, 10182, 10183, 7, 799,
	2, 2, 10183, 10185, 3, 2, 2, 2, 10184, 10181, 3, 2, 2, 2, 10184, 10185,
	3, 2, 2, 2, 10185, 10186, 3, 2, 2, 2, 10186, 10188, 7, 400, 2, 2, 10187,
	10142, 3, 2, 2, 2, 10187, 10148, 3, 2, 2, 2, 10187, 10154, 3, 2, 2, 2,
	10187, 10160, 3, 2, 2, 2, 10187, 10166, 3, 2, 2, 2, 10187, 10172, 3, 2,
	2, 2, 10187, 10178, 3, 2, 2, 2, 10187, 10184, 3, 2, 2, 2, 10188, 897, 3,
	2, 2, 2, 10189, 10191, 5, 940, 471, 2, 10190, 10192, 9, 112, 2, 2, 10191,
	10190, 3, 2, 2, 2, 10191, 10192, 3, 2, 2, 2, 10192, 10200, 3, 2, 2, 2,
	10193, 10194, 7, 806, 2, 2, 10194, 10196, 5, 940, 471, 2, 10195, 10197,
	9, 112, 2, 2, 10196, 10195, 3, 2, 2, 2, 10196, 10197, 3, 2, 2, 2, 10197,
	10199, 3, 2, 2, 2, 10198, 10193, 3, 2, 2, 2, 10199, 10202, 3, 2, 2, 2,
	10200, 10198, 3, 2, 2, 2, 10200, 10201, 3, 2, 2, 2, 10201, 899, 3, 2, 2,
	2, 10202, 10200, 3, 2, 2, 2, 10203, 10208, 5, 940, 471, 2, 10204, 10205,
	7, 806, 2, 2, 10205, 10207, 5, 940, 471, 2, 10206, 10204, 3, 2, 2, 2, 10207,
	10210, 3, 2, 2, 2, 10208, 10206, 3, 2, 2, 2, 10208, 10209, 3, 2, 2, 2,
	10209, 901, 3, 2, 2, 2, 10210, 10208, 3, 2, 2, 2, 10211, 10214, 5, 940,
	471, 2, 10212, 10214, 7, 778, 2, 2, 10213, 10211, 3, 2, 2, 2, 10213, 10212,
	3, 2, 2, 2, 10214, 903, 3, 2, 2, 2, 10215, 10216, 9, 8, 2, 2, 10216, 905,
	3, 2, 2, 2, 10217, 10218, 9, 127, 2, 2, 10218, 907, 3, 2, 2, 2, 10219,
	10221, 7, 219, 2, 2, 10220, 10219, 3, 2, 2, 2, 10220, 10221, 3, 2, 2, 2,
	10221, 10222, 3, 2, 2, 2, 10222, 10223, 7, 222, 2, 2, 10223, 909, 3, 2,
	2, 2, 10224, 10232, 5, 908, 455, 2, 10225, 10226, 7, 89, 2, 2, 10226, 10229,
	5, 716, 359, 2, 10227, 10228, 7, 379, 2, 2, 10228, 10230, 7, 369, 2, 2,
	10229, 10227, 3, 2, 2, 2, 10229, 10230, 3, 2, 2, 2, 10230, 10232, 3, 2,
	2, 2, 10231, 10224, 3, 2, 2, 2, 10231, 10225, 3, 2, 2, 2, 10232, 911, 3,
	2, 2, 2, 10233, 10239, 5, 892, 447, 2, 10234, 10239, 7, 286, 2, 2, 10235,
	10239, 7, 176, 2, 2, 10236, 10239, 7, 423, 2, 2, 10237, 10239, 7, 436,
	2, 2, 10238, 10233, 3, 2, 2, 2, 10238, 10234, 3, 2, 2, 2, 10238, 10235,
	3, 2, 2, 2, 10238, 10236, 3, 2, 2, 2, 10238, 10237, 3, 2, 2, 2, 10239,
	913, 3, 2, 2, 2, 10240, 10241, 7, 27, 2, 2, 10241, 10242, 7, 69, 2, 2,
	10242, 10243, 7, 741, 2, 2, 10243, 10244, 7, 804, 2, 2, 10244, 10245, 7,
	778, 2, 2, 10245, 10246, 7, 805, 2, 2, 10246, 10247, 7, 743, 2, 2, 10247,
	10248, 7, 787, 2, 2, 10248, 10250, 5, 446, 224, 2, 10249, 10251, 7, 807,
	2, 2, 10250, 10249, 3, 2, 2, 2, 10250, 10251, 3, 2, 2, 2, 10251, 915, 3,
	2, 2, 2, 10252, 10253, 7, 27, 2, 2, 10253, 10255, 7, 479, 2, 2, 10254,
	10256, 7, 69, 2, 2, 10255, 10254, 3, 2, 2, 2, 10255, 10256, 3, 2, 2, 2,
	10256, 10257, 3, 2, 2, 2, 10257, 10258, 7, 778, 2, 2, 10258, 10259, 7,
	139, 2, 2, 10259, 10260, 7, 311, 2, 2, 10260, 10261, 5, 920, 461, 2, 10261,
	10262, 7, 348, 2, 2, 10262, 10263, 7, 311, 2, 2, 10263, 10266, 5, 920,
	461, 2, 10264, 10265, 7, 806, 2, 2, 10265, 10267, 7, 783, 2, 2, 10266,
	10264, 3, 2, 2, 2, 10266, 10267, 3, 2, 2, 2, 10267, 10268, 3, 2, 2, 2,
	10268, 10269, 7, 228, 2, 2, 10269, 10270, 7, 67, 2, 2, 10270, 10293, 5,
	918, 460, 2, 10271, 10278, 7, 379, 2, 2, 10272, 10273, 9, 128, 2, 2, 10273,
	10274, 7, 787, 2, 2, 10274, 10276, 7, 778, 2, 2, 10275, 10277, 7, 806,
	2, 2, 10276, 10275, 3, 2, 2, 2, 10276, 10277, 3, 2, 2, 2, 10277, 10279,
	3, 2, 2, 2, 10278, 10272, 3, 2, 2, 2, 10278, 10279, 3, 2, 2, 2, 10279,
	10286, 3, 2, 2, 2, 10280, 10281, 7, 178, 2, 2, 10281, 10282, 7, 787, 2,
	2, 10282, 10284, 9, 2, 2, 2, 10283, 10285, 7, 806, 2, 2, 10284, 10283,
	3, 2, 2, 2, 10284, 10285, 3, 2, 2, 2, 10285, 10287, 3, 2, 2, 2, 10286,
	10280, 3, 2, 2, 2, 10286, 10287, 3, 2, 2, 2, 10287, 10291, 3, 2, 2, 2,
	10288, 10289, 7, 492, 2, 2, 10289, 10290, 7, 787, 2, 2, 10290, 10292, 9,
	8, 2, 2, 10291, 10288, 3, 2, 2, 2, 10291, 10292, 3, 2, 2, 2, 10292, 10294,
	3, 2, 2, 2, 10293, 10271, 3, 2, 2, 2, 10293, 10294, 3, 2, 2, 2, 10294,
	10296, 3, 2, 2, 2, 10295, 10297, 7, 807, 2, 2, 10296, 10295, 3, 2, 2, 2,
	10296, 10297, 3, 2, 2, 2, 10297, 917, 3, 2, 2, 2, 10298, 10301, 5, 940,
	471, 2, 10299, 10301, 5, 706, 354, 2, 10300, 10298, 3, 2, 2, 2, 10300,
	10299, 3, 2, 2, 2, 10301, 919, 3, 2, 2, 2, 10302, 10305, 5, 940, 471, 2,
	10303, 10305, 5, 706, 354, 2, 10304, 10302, 3, 2, 2, 2, 10304, 10303, 3,
	2, 2, 2, 10305, 921, 3, 2, 2, 2, 10306, 10307, 7, 108, 2, 2, 10307, 10308,
	7, 69, 2, 2, 10308, 10310, 7, 778, 2, 2, 10309, 10311, 7, 807, 2, 2, 10310,
	10309, 3, 2, 2, 2, 10310, 10311, 3, 2, 2, 2, 10311, 10324, 3, 2, 2, 2,
	10312, 10319, 7, 379, 2, 2, 10313, 10314, 7, 112, 2, 2, 10314, 10315, 7,
	787, 2, 2, 10315, 10316, 9, 3, 2, 2, 10316, 10317, 7, 477, 2, 2, 10317,
	10318, 7, 787, 2, 2, 10318, 10320, 9, 3, 2, 2, 10319, 10313, 3, 2, 2, 2,
	10319, 10320, 3, 2, 2, 2, 10320, 10322, 3, 2, 2, 2, 10321, 10323, 7, 438,
	2, 2, 10322, 10321, 3, 2, 2, 2, 10322, 10323, 3, 2, 2, 2, 10323, 10325,
	3, 2, 2, 2, 10324, 10312, 3, 2, 2, 2, 10324, 10325, 3, 2, 2, 2, 10325,
	923, 3, 2, 2, 2, 10326, 10328, 7, 374, 2, 2, 10327, 10326, 3, 2, 2, 2,
	10327, 10328, 3, 2, 2, 2, 10328, 10329, 3, 2, 2, 2, 10329, 10330, 7, 804,
	2, 2, 10330, 10331, 5, 926, 464, 2, 10331, 10337, 7, 805, 2, 2, 10332,
	10334, 7, 806, 2, 2, 10333, 10332, 3, 2, 2, 2, 10333, 10334, 3, 2, 2, 2,
	10334, 10335, 3, 2, 2, 2, 10335, 10336, 7, 743, 2, 2, 10336, 10338, 5,
	446, 224, 2, 10337, 10333, 3, 2, 2, 2, 10337, 10338, 3, 2, 2, 2, 10338,
	10340, 3, 2, 2, 2, 10339, 10341, 7, 807, 2, 2, 10340, 10339, 3, 2, 2, 2,
	10340, 10341, 3, 2, 2, 2, 10341, 925, 3, 2, 2, 2, 10342, 10343, 7, 142,
	2, 2, 10343, 10344, 7, 69, 2, 2, 10344, 10345, 7, 146, 2, 2, 10345, 10346,
	9, 3, 2, 2, 10346, 10347, 7, 139, 2, 2, 10347, 10349, 5, 928, 465, 2, 10348,
	10350, 7, 807, 2, 2, 10349, 10348, 3, 2, 2, 2, 10349, 10350, 3, 2, 2, 2,
	10350, 927, 3, 2, 2, 2, 10351, 10352, 5, 940, 471, 2, 10352, 10353, 7,
	799, 2, 2, 10353, 10354, 5, 940, 471, 2, 10354, 10355, 7, 799, 2, 2, 10355,
	10356, 5, 940, 471, 2, 10356, 10359, 3, 2, 2, 2, 10357, 10359, 5, 940,
	471, 2, 10358, 10351, 3, 2, 2, 2, 10358, 10357, 3, 2, 2, 2, 10359, 929,
	3, 2, 2, 2, 10360, 10361, 7, 706, 2, 2, 10361, 10362, 7, 228, 2, 2, 10362,
	10363, 7, 69, 2, 2, 10363, 10364, 9, 3, 2, 2, 10364, 10365, 7, 587, 2,
	2, 10365, 10366, 7, 752, 2, 2, 10366, 10370, 5, 706, 354, 2, 10367, 10368,
	7, 804, 2, 2, 10368, 10369, 9, 3, 2, 2, 10369, 10371, 7, 805, 2, 2, 10370,
	10367, 3, 2, 2, 2, 10370, 10371, 3, 2, 2, 2, 10371, 10373, 3, 2, 2, 2,
	10372, 10374, 7, 807, 2, 2, 10373, 10372, 3, 2, 2, 2, 10373, 10374, 3,
	2, 2, 2, 10374, 931, 3, 2, 2, 2, 10375, 10377, 5, 940, 471, 2, 10376, 10378,
	7, 150, 2, 2, 10377, 10376, 3, 2, 2, 2, 10377, 10378, 3, 2, 2, 2, 10378,
	10386, 3, 2, 2, 2, 10379, 10380, 7, 804, 2, 2, 10380, 10383, 9, 129, 2,
	2, 10381, 10382, 7, 806, 2, 2, 10382, 10384, 7, 779, 2, 2, 10383, 10381,
	3, 2, 2, 2, 10383, 10384, 3, 2, 2, 2, 10384, 10385, 3, 2, 2, 2, 10385,
	10387, 7, 805, 2, 2, 10386, 10379, 3, 2, 2, 2, 10386, 10387, 3, 2, 2, 2,
	10387, 10393, 3, 2, 2, 2, 10388, 10393, 7, 545, 2, 2, 10389, 10393, 7,
	742, 2, 2, 10390, 10393, 7, 716, 2, 2, 10391, 10393, 7, 421, 2, 2, 10392,
	10375, 3, 2, 2, 2, 10392, 10388, 3, 2, 2, 2, 10392, 10389, 3, 2, 2, 2,
	10392, 10390, 3, 2, 2, 2, 10392, 10391, 3, 2, 2, 2, 10393, 933, 3, 2, 2,
	2, 10394, 10398, 7, 222, 2, 2, 10395, 10398, 7, 89, 2, 2, 10396, 10398,
	5, 936, 469, 2, 10397, 10394, 3, 2, 2, 2, 10397, 10395, 3, 2, 2, 2, 10397,
	10396, 3, 2, 2, 2, 10398, 935, 3, 2, 2, 2, 10399, 10415, 7, 783, 2, 2,
	10400, 10415, 7, 784, 2, 2, 10401, 10403, 5, 938, 470, 2, 10402, 10401,
	3, 2, 2, 2, 10402, 10403, 3, 2, 2, 2, 10403, 10404, 3, 2, 2, 2, 10404,
	10415, 7, 779, 2, 2, 10405, 10407, 5, 938, 470, 2, 10406, 10405, 3, 2,
	2, 2, 10406, 10407, 3, 2, 2, 2, 10407, 10408, 3, 2, 2, 2, 10408, 10415,
	9, 107, 2, 2, 10409, 10411, 5, 938, 470, 2, 10410, 10409, 3, 2, 2, 2, 10410,
	10411, 3, 2, 2, 2, 10411, 10412, 3, 2, 2, 2, 10412, 10413, 7, 803, 2, 2,
	10413, 10415, 9, 130, 2, 2, 10414, 10399, 3, 2, 2, 2, 10414, 10400, 3,
	2, 2, 2, 10414, 10402, 3, 2, 2, 2, 10414, 10406, 3, 2, 2, 2, 10414, 10410,
	3, 2, 2, 2, 10415, 937, 3, 2, 2, 2, 10416, 10417, 9, 104, 2, 2, 10417,
	939, 3, 2, 2, 2, 10418, 10422, 5, 942, 472, 2, 10419, 10422, 7, 775, 2,
	2, 10420, 10422, 7, 777, 2, 2, 10421, 10418, 3, 2, 2, 2, 10421, 10419,
	3, 2, 2, 2, 10421, 10420, 3, 2, 2, 2, 10422, 941, 3, 2, 2, 2, 10423, 10424,
	9, 131, 2, 2, 10424, 943, 3, 2, 2, 2, 10425, 10441, 7, 787, 2, 2, 10426,
	10441, 7, 788, 2, 2, 10427, 10441, 7, 789, 2, 2, 10428, 10429, 7, 789,
	2, 2, 10429, 10441, 7, 787, 2, 2, 10430, 10431, 7, 788, 2, 2, 10431, 10441,
	7, 787, 2, 2, 10432, 10433, 7, 789, 2, 2, 10433, 10441, 7, 788, 2, 2, 10434,
	10435, 7, 790, 2, 2, 10435, 10441, 7, 787, 2, 2, 10436, 10437, 7, 790,
	2, 2, 10437, 10441, 7, 788, 2, 2, 10438, 10439, 7, 790, 2, 2, 10439, 10441,
	7, 789, 2, 2, 10440, 10425, 3, 2, 2, 2, 10440, 10426, 3, 2, 2, 2, 10440,
	10427, 3, 2, 2, 2, 10440, 10428, 3, 2, 2, 2, 10440, 10430, 3, 2, 2, 2,
	10440, 10432, 3, 2, 2, 2, 10440, 10434, 3, 2, 2, 2, 10440, 10436, 3, 2,
	2, 2, 10440, 10438, 3, 2, 2, 2, 10441, 945, 3, 2, 2, 2, 10442, 10443, 9,
	132, 2, 2, 10443, 947, 3, 2, 2, 2, 10444, 10446, 7, 779, 2, 2, 10445, 10447,
	9, 133, 2, 2, 10446, 10445, 3, 2, 2, 2, 10446, 10447, 3, 2, 2, 2, 10447,
	949, 3, 2, 2, 2, 1474, 953, 962, 967, 971, 980, 987, 1146, 1153, 1167,
	1171, 1174, 1178, 1182, 1186, 1191, 1196, 1198, 1202, 1205, 1212, 1215,
	1224, 1227, 1238, 1241, 1246, 1251, 1254, 1259, 1263, 1266, 1270, 1273,
	1276, 1283, 1287, 1289, 1294, 1307, 1313, 1316, 1332, 1340, 1345, 1348,
	1353, 1356, 1361, 1369, 1374, 1377, 1382, 1388, 1393, 1410, 1413, 1416,
	1419, 1424, 1433, 1448, 1465, 1476, 1482, 1497, 1512, 1521, 1525, 1530,
	1536, 1542, 1545, 1550, 1555, 1563, 1573, 1592, 1600, 1613, 1615, 1627,
	1629, 1636, 1645, 1651, 1660, 1675, 1685, 1695, 1735, 1758, 1794, 1812,
	1815, 1820, 1823, 1828, 1831, 1836, 1839, 1844, 1847, 1855, 1858, 1866,
	1879, 1890, 1895, 1899, 1905, 1928, 1940, 1951, 1956, 1960, 1966, 1968,
	1981, 2004, 2011, 2020, 2025, 2028, 2033, 2036, 2041, 2046, 2074, 2081,
	2086, 2093, 2095, 2106, 2112, 2127, 2141, 2144, 2146, 2151, 2155, 2158,
	2160, 2166, 2169, 2171, 2177, 2179, 2201, 2209, 2217, 2219, 2221, 2230,
	2251, 2264, 2279, 2283, 2318, 2321, 2326, 2344, 2347, 2352, 2378, 2392,
	2397, 2405, 2410, 2417, 2438, 2475, 2480, 2499, 2511, 2514, 2519, 2522,
	2528, 2543, 2548, 2556, 2559, 2564, 2569, 2572, 2596, 2603, 2608, 2613,
	2618, 2620, 2627, 2640, 2646, 2651, 2659, 2675, 2682, 2687, 2692, 2695,
	2701, 2707, 2712, 2717, 2722, 2725, 2731, 2737, 2744, 2749, 2757, 2763,
	2767, 2771, 2800, 2813, 2819, 2829, 2832, 2852, 2856, 2860, 2865, 2880,
	2887, 2896, 2904, 2907, 2912, 2917, 2925, 2931, 2935, 2941, 2946, 2950,
	2957, 2965, 2973, 2982, 2987, 2991, 2994, 2998, 3004, 3009, 3017, 3025,
	3031, 3037, 3040, 3045, 3048, 3055, 3057, 3060, 3066, 3069, 3074, 3077,
	3082, 3085, 3090, 3093, 3098, 3101, 3104, 3107, 3114, 3118, 3125, 3132,
	3138, 3151, 3155, 3160, 3170, 3179, 3183, 3195, 3201, 3206, 3208, 3228,
	3232, 3240, 3249, 3255, 3261, 3269, 3271, 3281, 3285, 3288, 3292, 3297,
	3303, 3306, 3310, 3318, 3320, 3323, 3331, 3339, 3346, 3353, 3355, 3357,
	3362, 3368, 3371, 3373, 3375, 3378, 3383, 3386, 3391, 3406, 3413, 3420,
	3422, 3424, 3429, 3435, 3438, 3440, 3442, 3445, 3450, 3453, 3458, 3471,
	3476, 3485, 3490, 3496, 3500, 3504, 3521, 3523, 3533, 3538, 3540, 3544,
	3550, 3558, 3563, 3566, 3574, 3577, 3582, 3587, 3592, 3597, 3602, 3607,
	3611, 3616, 3627, 3632, 3635, 3638, 3643, 3646, 3651, 3654, 3659, 3662,
	3667, 3670, 3675, 3678, 3683, 3689, 3694, 3697, 3702, 3709, 3711, 3717,
	3726, 3731, 3733, 3745, 3751, 3763, 3766, 3771, 3773, 3783, 3788, 3790,
	3794, 3800, 3818, 3820, 3835, 3853, 3861, 3871, 3887, 3908, 3919, 3925,
	3934, 3943, 3949, 3958, 3963, 3966, 3971, 3974, 3979, 3982, 3990, 3996,
	4000, 4007, 4013, 4017, 4020, 4022, 4025, 4030, 4033, 4038, 4041, 4046,
	4049, 4054, 4057, 4072, 4083, 4095, 4102, 4109, 4113, 4118, 4121, 4126,
	4129, 4134, 4137, 4146, 4153, 4168, 4172, 4177, 4188, 4198, 4210, 4216,
	4218, 4226, 4235, 4240, 4251, 4254, 4258, 4266, 4270, 4274, 4282, 4287,
	4295, 4300, 4304, 4306, 4311, 4320, 4323, 4328, 4335, 4341, 4343, 4348,
	4354, 4360, 4365, 4371, 4378, 4383, 4388, 4393, 4396, 4400, 4404, 4408,
	4412, 4417, 4421, 4425, 4435, 4441, 4448, 4451, 4457, 4463, 4468, 4470,
	4476, 4478, 4483, 4489, 4495, 4500, 4502, 4506, 4510, 4513, 4527, 4532,
	4536, 4549, 4552, 4554, 4562, 4572, 4578, 4585, 4588, 4594, 4600, 4605,
	4607, 4613, 4615, 4620, 4626, 4632, 4638, 4643, 4645, 4649, 4653, 4656,
	4670, 4675, 4679, 4692, 4695, 4697, 4705, 4716, 4725, 4734, 4745, 4754,
	4763, 4775, 4779, 4784, 4786, 4788, 4793, 4797, 4802, 4804, 4806, 4820,
	4825, 4847, 4869, 4874, 4887, 4895, 4915, 4918, 4924, 4932, 4939, 4944,
	4948, 4952, 4955, 4962, 4980, 4982, 5002, 5010, 5015, 5033, 5048, 5050,
	5057, 5064, 5069, 5074, 5080, 5085, 5087, 5094, 5100, 5106, 5109, 5115,
	5125, 5128, 5135, 5138, 5143, 5145, 5153, 5157, 5163, 5168, 5170, 5173,
	5180, 5186, 5193, 5196, 5202, 5207, 5209, 5212, 5220, 5226, 5233, 5236,
	5242, 5247, 5249, 5257, 5265, 5271, 5276, 5278, 5288, 5293, 5303, 5309,
	5321, 5323, 5330, 5336, 5342, 5348, 5353, 5355, 5362, 5370, 5376, 5390,
	5392, 5395, 5400, 5402, 5414, 5420, 5434, 5436, 5439, 5444, 5447, 5452,
	5454, 5463, 5470, 5476, 5479, 5484, 5491, 5493, 5499, 5501, 5506, 5511,
	5514, 5519, 5522, 5527, 5530, 5537, 5539, 5542, 5548, 5551, 5554, 5557,
	5563, 5567, 5575, 5582, 5588, 5590, 5601, 5606, 5612, 5616, 5626, 5634,
	5646, 5649, 5657, 5659, 5662, 5666, 5669, 5679, 5685, 5693, 5697, 5701,
	5710, 5716, 5720, 5723, 5734, 5738, 5745, 5750, 5753, 5761, 5763, 5766,
	5770, 5773, 5777, 5784, 5788, 5790, 5792, 5795, 5798, 5801, 5807, 5810,
	5818, 5820, 5823, 5827, 5830, 5836, 5839, 5843, 5846, 5849, 5856, 5859,
	5866, 5872, 5876, 5886, 5889, 5892, 5896, 5899, 5902, 5905, 5909, 5912,
	5920, 5922, 5926, 5929, 5937, 5941, 5945, 5952, 5956, 5958, 5960, 5963,
	5966, 5969, 5977, 5983, 5989, 5991, 5995, 5998, 6003, 6008, 6011, 6019,
	6023, 6030, 6033, 6042, 6045, 6049, 6057, 6060, 6064, 6067, 6081, 6085,
	6088, 6092, 6095, 6100, 6103, 6109, 6112, 6119, 6123, 6125, 6133, 6136,
	6140, 6147, 6152, 6155, 6167, 6170, 6176, 6183, 6188, 6193, 6200, 6207,
	6210, 6218, 6226, 6229, 6237, 6248, 6251, 6261, 6268, 6273, 6276, 6286,
	6289, 6292, 6306, 6309, 6312, 6318, 6332, 6335, 6338, 6344, 6350, 6358,
	6361, 6365, 6369, 6372, 6377, 6391, 6407, 6411, 6417, 6419, 6422, 6430,
	6436, 6442, 6447, 6450, 6459, 6471, 6479, 6482, 6489, 6492, 6537, 6540,
	6546, 6558, 6560, 6563, 6588, 6599, 6607, 6618, 6623, 6626, 6634, 6644,
	6651, 6658, 6660, 6672, 6683, 6687, 6692, 6695, 6697, 6700, 6712, 6714,
	6716, 6719, 6724, 6727, 6732, 6742, 6746, 6751, 6754, 6756, 6759, 6771,
	6773, 6775, 6778, 6784, 6794, 6814, 6820, 6845, 6847, 6873, 6879, 6890,
	6898, 6901, 6915, 6923, 6930, 6953, 6966, 6972, 6979, 6987, 6990, 6993,
	7002, 7012, 7019, 7023, 7027, 7033, 7040, 7044, 7050, 7057, 7064, 7067,
	7073, 7080, 7084, 7089, 7094, 7099, 7107, 7111, 7117, 7124, 7128, 7137,
	7145, 7151, 7157, 7174, 7178, 7186, 7190, 7198, 7202, 7207, 7211, 7218,
	7224, 7226, 7230, 7234, 7238, 7242, 7248, 7252, 7254, 7261, 7268, 7271,
	7274, 7281, 7286, 7291, 7295, 7301, 7305, 7307, 7312, 7317, 7321, 7326,
	7332, 7336, 7340, 7342, 7346, 7350, 7354, 7358, 7364, 7367, 7373, 7377,
	7381, 7387, 7393, 7395, 7398, 7402, 7406, 7410, 7416, 7419, 7425, 7431,
	7434, 7440, 7443, 7449, 7452, 7456, 7460, 7464, 7469, 7472, 7476, 7480,
	7497, 7499, 7501, 7504, 7511, 7516, 7520, 7526, 7530, 7532, 7537, 7542,
	7546, 7551, 7557, 7561, 7565, 7567, 7571, 7575, 7579, 7583, 7589, 7592,
	7598, 7602, 7606, 7612, 7618, 7620, 7623, 7627, 7631, 7635, 7641, 7644,
	7650, 7656, 7659, 7665, 7668, 7674, 7677, 7681, 7685, 7689, 7694, 7697,
	7701, 7705, 7711, 7714, 7718, 7735, 7737, 7739, 7742, 7756, 7762, 7770,
	7777, 7779, 7782, 7814, 7818, 7825, 7828, 7831, 7840, 7845, 7850, 7853,
	7855, 7859, 7863, 7866, 7870, 7876, 7881, 7888, 7890, 7894, 7902, 7908,
	7912, 7915, 7924, 7927, 7933, 7940, 7945, 7953, 7958, 7970, 7972, 7983,
	7990, 8000, 8023, 8036, 8052, 8057, 8064, 8067, 8071, 8073, 8090, 8105,
	8113, 8122, 8130, 8139, 8150, 8154, 8156, 8158, 8164, 8169, 8176, 8189,
	8191, 8193, 8196, 8199, 8206, 8209, 8215, 8220, 8222, 8225, 8231, 8239,
	8241, 8244, 8248, 8251, 8257, 8260, 8264, 8267, 8273, 8276, 8278, 8282,
	8287, 8295, 8299, 8302, 8307, 8315, 8320, 8330, 8341, 8346, 8351, 8357,
	8361, 8364, 8368, 8372, 8380, 8385, 8387, 8390, 8395, 8400, 8405, 8408,
	8411, 8417, 8425, 8433, 8436, 8439, 8443, 8448, 8451, 8457, 8461, 8467,
	8475, 8481, 8483, 8486, 8501, 8504, 8506, 8517, 8528, 8537, 8547, 8557,
	8559, 8561, 8564, 8567, 8578, 8580, 8582, 8585, 8590, 8601, 8610, 8613,
	8616, 8625, 8628, 8631, 8638, 8641, 8655, 8658, 8665, 8681, 8685, 8695,
	8714, 8716, 8723, 8730, 8734, 8742, 8746, 8750, 8756, 8766, 8776, 8783,
	8790, 8799, 8806, 8813, 8822, 8826, 8836, 8843, 8851, 8859, 8863, 8885,
	8894, 8900, 8906, 8912, 8922, 8929, 8934, 8939, 8943, 8950, 8954, 8957,
	8962, 8966, 8970, 8975, 8982, 8985, 8989, 8994, 8998, 9007, 9014, 9023,
	9035, 9037, 9044, 9050, 9055, 9060, 9063, 9070, 9081, 9115, 9131, 9138,
	9140, 9147, 9156, 9166, 9171, 9178, 9181, 9188, 9195, 9198, 9200, 9204,
	9210, 9216, 9223, 9231, 9237, 9242, 9246, 9250, 9255, 9257, 9264, 9268,
	9275, 9277, 9284, 9286, 9295, 9303, 9310, 9316, 9327, 9331, 9333, 9336,
	9360, 9385, 9390, 9410, 9414, 9418, 9434, 9442, 9464, 9522, 9526, 9559,
	9566, 9572, 9585, 9600, 9611, 9616, 9626, 9635, 9669, 9674, 9680, 9683,
	9688, 9693, 9702, 9707, 9713, 9722, 9739, 9745, 9753, 9757, 9765, 9772,
	9785, 9793, 9806, 9813, 9819, 9823, 9840, 9855, 9857, 9862, 9865, 9874,
	9877, 9880, 9893, 9897, 9905, 9911, 9919, 9926, 9932, 9947, 9956, 9962,
	9968, 9971, 9975, 9982, 9990, 9993, 9999, 10005, 10007, 10013, 10016, 10018,
	10024, 10026, 10040, 10047, 10056, 10063, 10075, 10082, 10089, 10096, 10102,
	10109, 10112, 10117, 10124, 10131, 10137, 10142, 10148, 10154, 10160, 10166,
	10172, 10178, 10184, 10187, 10191, 10196, 10200, 10208, 10213, 10220, 10229,
	10231, 10238, 10250, 10255, 10266, 10276, 10278, 10284, 10286, 10291, 10293,
	10296, 10300, 10304, 10310, 10319, 10322, 10324, 10327, 10333, 10337, 10340,
	10349, 10358, 10370, 10373, 10377, 10383, 10386, 10392, 10397, 10402, 10406,
	10410, 10414, 10421, 10440, 10446,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'",
	"'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", "'AND'", "'ANONYMOUS'", "'ANY'",
	"'APPEND'", "'APPLICATION'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'",
	"'AUTHORIZATION'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'",
	"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", "'BEFORE'", "'BEGIN'",
	"'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", "'BREAK'",
	"'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BY'", "'CACHE'", "'CALLED'",
	"'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", "'CHANGES'", "'CHECK'",
	"'CHECKPOINT'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'",
	"'CLOSE'", "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'",
	"'COMPRESSION'", "'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", "'CONSTRAINT'",
	"'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", "'CONTINUE'",
	"'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'",
	"", "'COPY_ONLY'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'",
	"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'",
	"'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE'",
	"'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", "'DECLARE'", "'DEFAULT'",
	"'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", "'DENY'", "'DESC'",
	"'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", "'DISTRIBUTED'",
	"'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", "'ELSE'",
	"'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", "'ERROR'",
	"'EVENT'", "", "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'",
	"", "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'",
	"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'",
	"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", "'FOR'",
	"'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", "'FREETEXT'",
	"'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", "'GOTO'",
	"'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", "'HEALTHCHECKTIMEOUT'",
	"'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", "'IF'", "'IN'", "'INCLUDE'",
	"'INCREMENT'", "'INDEX'", "'INFINITE'", "'INIT'", "'INNER'", "'INSERT'",
	"'INSTEAD'", "'INTERSECT'", "'INTO'", "", "", "'IS'", "'ISNULL'", "'JOIN'",
	"'KERBEROS'", "'KEY'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'KILL'",
	"'LANGUAGE'", "'LEFT'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", "'LINENO'",
	"'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", "'LOAD'", "'LOCAL_SERVICE_NAME'",
	"'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'",
	"'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'",
	"'MEDIADESCRIPTION'", "'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'",
	"'MERGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", "'MINVALUE'",
	"'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", "'NEGOTIATE'", "'NOCHECK'",
	"'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", "'NONE'", "'NOREWIND'", "'NOSKIP'",
	"'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", "'NOT'",
	"'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", "'OF'", "'OFF'", "'OFFSETS'",
	"'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", "'OPEN'", "'OPENDATASOURCE'",
	"'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'",
	"'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'",
	"'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", "'PER_NODE'",
	"'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", "'PRECISION'", "'PREDICATE'",
	"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PROCESS'", "'PUBLIC'",
	"'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", "'READ_WRITE_FILEGROUPS'",
	"'RECONFIGURE'", "'REFERENCES'", "'REGENERATE'", "'RELATED_CONVERSATION'",
	"'RELATED_CONVERSATION_GROUP'", "'REPLICATION'", "'REQUIRED'", "'RESET'",
	"'RESTART'", "'RESTORE'", "'RESTRICT'", "'RESUME'", "'RETAINDAYS'", "'RETURN'",
	"'RETURNS'", "'REVERT'", "'REVOKE'", "'REWIND'", "'RIGHT'", "'ROLLBACK'",
	"'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'",
	"'RSA_3072'", "'RSA_4096'", "'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", "'SCHEDULER'",
	"'SCHEMA'", "'SCHEME'", "'SECURITY'", "'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'",
	"'SEMANTICSIMILARITYDETAILSTABLE'", "'SEMANTICSIMILARITYTABLE'", "'SEQUENCE'",
	"'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'",
	"'SESSION_USER'", "'SET'", "'SETUSER'", "'SHUTDOWN'", "'SID'", "'SKIP'",
	"'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", "'SQLDUMPERFLAGS'",
	"'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", "'STATISTICS'", "'STATE'", "'STATS'",
	"'START'", "'STARTED'", "'STARTUP_STATE'", "'STOP'", "'STOPPED'", "'STOP_ON_ERROR'",
	"'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", "'TABLE'", "'TABLESAMPLE'",
	"'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'",
	"'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", "'TRANSFER'", "'TRIGGER'",
	"'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", "'UNIQUE'", "'UNLOCK'",
	"'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", "'URL'", "'USE'",
	"'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", "'VIEW'",
	"'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOWS'",
	"'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", "'ABSOLUTE'",
	"'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVE'", "'ACTIVATION'", "'ADDRESS'",
	"'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", "'AGGREGATE'",
	"'ALGORITHM'", "'ALLOWED'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", "'ALLOW_SNAPSHOT_ISOLATION'",
	"'ANSI_NULLS'", "'ANSI_NULL_DEFAULT'", "'ANSI_PADDING'", "'ANSI_WARNINGS'",
	"'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", "'ASSEMBLY'", "'AUDIT'",
	"'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'",
	"'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", "'AUTO_UPDATE_STATISTICS_ASYNC'",
	"'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", "'BEGIN_DIALOG'", "'BIGINT'",
	"'BINARY BASE64'", "'BINARY_CHECKSUM'", "'BINDING'", "'BLOB_STORAGE'",
	"'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", "'CALLER'", "", "'CAP_CPU_PERCENT'",
	"'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHECKSUM'",
	"'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", "'COLUMN_MASTER_KEY'", "'COMMITTED'",
	"'COMPATIBILITY_LEVEL'", "'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'",
	"'CONTROL'", "'COOKIE'", "'COUNT'", "'COUNTER'", "'COUNT_BIG'", "'CPU'",
	"'CREATE_NEW'", "'CREATION_DISPOSITION'", "'CREDENTIAL'", "'CRYPTOGRAPHIC'",
	"'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", "'DATEADD'", "'DATEDIFF'",
	"'DATENAME'", "'DATEPART'", "'DATE_CORRELATION_OPTIMIZATION'", "'DAYS'",
	"'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", "", "'DEFAULT_FULLTEXT_LANGUAGE'",
	"'DEFAULT_LANGUAGE'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'",
	"'DEPENDENTS'", "'DES'", "'DESX'", "'DESCRIPTION'", "'DHCP'", "'DIALOG'",
	"'DIRECTORY_NAME'", "'DISABLE'", "'DISABLED'", "'DISABLE_BROKER'", "",
	"'DOCUMENT'", "'DYNAMIC'", "'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'",
	"'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'",
	"'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", "'FAILOVER_MODE'",
	"'FAILURE'", "'FAILURE_CONDITION_LEVEL'", "'FAIL_OPERATION'", "'FAST'",
	"'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", "'FILESTREAM'",
	"'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", "'FORCED'",
	"'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'",
	"'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", "'GLOBAL'", "'GO'",
	"'GROUPING'", "'GROUPING_ID'", "'GROUP_MAX_REQUESTS'", "'HADR'", "'HASH'",
	"'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", "'HOURS'",
	"'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", "'IMMEDIATE'",
	"'IMPERSONATE'", "'IMPORTANCE'", "'INCREMENTAL'", "'INITIATOR'", "'INPUT'",
	"'INSENSITIVE'", "'INSERTED'", "'INT'", "'IP'", "'ISOLATION'", "'KB'",
	"'KEEP'", "'KEEPFIXED'", "'KEYSET'", "'KEYS'", "'KEY_SOURCE'", "'LAG'",
	"'LAST'", "'LAST_VALUE'", "'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'",
	"'LISTENER_URL'", "'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", "'LOCK_ESCALATION'",
	"'LOGIN'", "'LOOP'", "'LOW'", "'MANUAL'", "'MARK'", "'MAX'", "'MAX_CPU_PERCENT'",
	"'MIN_CPU_PERCENT'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MIN_IOPS_PER_VOLUME'",
	"'MAX_MEMORY_PERCENT'", "'MIN_MEMORY_PERCENT'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'",
	"'MAX_ROLLOVER_FILES'", "'MAXDOP'", "'MAX_DOP'", "'MAXRECURSION'", "'MAXSIZE'",
	"'MEDIUM'", "'MESSAGE'", "'MB'", "'MEMORY_OPTIMIZED_DATA'", "'MIN'", "'MINUTES'",
	"'MIRROR_ADDRESS'", "'MIN_ACTIVE_ROWVERSION'", "'MIXED_PAGE_ALLOCATION'",
	"'MODIFY'", "'MOVE'", "'MULTI_USER'", "'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'",
	"'NEW_BROKER'", "'NEW_PASSWORD'", "'NEXT'", "'NOCOUNT'", "'NOEXPAND'",
	"'NODES'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NO'", "'NORECOVERY'",
	"'NO_TRUNCATE'", "'NO_WAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'",
	"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'",
	"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", "'OWNER'",
	"'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", "'PARTNER'",
	"'PATH'", "'POOL'", "'POISON_MESSAGE_HANDLING'", "'PORT'", "'PRECEDING'",
	"'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", "'PRIVATE'",
	"'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", "'PROVIDER'",
	"'PROVIDER_KEY_NAME'", "'QUEUE'", "'QUEUE_DELAY'", "'QUERY'", "'QUOTED_IDENTIFIER'",
	"'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", "'READONLY'", "'READ_COMMITTED_SNAPSHOT'",
	"'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", "'READ_WRITE'", "'REBUILD'",
	"'RECOMPILE'", "'RECEIVE'", "'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'",
	"'REMOVE'", "'REORGANIZE'", "'REPLICA'", "'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'",
	"'REMOTE'", "'REMOTE_SERVICE_NAME'", "'REPEATABLE'", "'REQUEST_MAX_MEMORY_GRANT_PERCENT'",
	"'REQUEST_MAX_CPU_TIME_SEC'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", "'RESERVE_DISK_SPACE'",
	"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'",
	"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROWGUID'", "'ROWS'", "'ROW_NUMBER'",
	"'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'",
	"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'",
	"'SECRET'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", "'SEND'", "'SENT'",
	"'SERIALIZABLE'", "'SESSION_TIMEOUT'", "'SETERROR'", "'SHOWPLAN'", "'SIGNATURE'",
	"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'",
	"'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'",
	"'STOPLIST'", "'SUBJECT'", "'SUSPEND'", "'STANDBY'", "'STUFF'", "'SUM'",
	"'SYMMETRIC'", "'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'",
	"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMER'", "'TINYINT'",
	"'TIMEOUT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", "'TRIPLE_DES'",
	"'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", "'TWO_DIGIT_YEAR_CUTOFF'",
	"'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNKNOWN'",
	"'UNLIMITED'", "'USING'", "'VALIDATION'", "'VALID_XML'", "'VALUE'", "'VAR'",
	"'VARP'", "'VIEWS'", "'VIEW_METADATA'", "'WELL_FORMED_XML'", "'WORK'",
	"'WORKLOAD'", "'XML'", "'XMLNAMESPACES'", "'$ACTION'", "", "", "", "",
	"'''", "", "", "", "", "", "", "", "", "", "", "'='", "'>'", "'<'", "'!'",
	"'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'.'",
	"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'",
	"'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'",
}
var symbolicNames = []string{
	"", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS",
	"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND",
	"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION",
	"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE",
	"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE",
	"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK",
	"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE",
	"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", "CLASSIFIER_FUNCTION",
	"CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", "COLUMN", "COMPRESSION",
	"COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", "CONTAINMENT", "CONTAINS",
	"CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", "CONTRACT",
	"CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", "CROSS",
	"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
	"CURSOR", "CYCLE", "DATA", "DATA_COMPRESSION", "DATA_SOURCE", "DATABASE",
	"DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DEFAULT_DATABASE",
	"DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", "DIFFERENTIAL",
	"DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", "DOUBLE_FORWARD_SLASH",
	"DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", "END", "ENDPOINT", "ERRLVL",
	"ESCAPE", "ERROR", "EVENT", "EVENTDATA", "EVENT_RETENTION_MODE", "EXCEPT",
	"EXECUTABLE_FILE", "EXECUTE", "EXISTS", "EXPIREDATE", "EXIT", "EXTENSION",
	"EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN",
	"FETCH", "FILE", "FILENAME", "FILLFACTOR", "FILE_SNAPSHOT", "FOR", "FORCESEEK",
	"FORCE_SERVICE_ALLOW_DATA_LOSS", "FOREIGN", "FREETEXT", "FREETEXTTABLE",
	"FROM", "FULL", "FUNCTION", "GET", "GOTO", "GOVERNOR", "GRANT", "GROUP",
	"HAVING", "HASHED", "HEALTHCHECKTIMEOUT", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT",
	"IF", "IN", "INCLUDE", "INCREMENT", "INDEX", "INFINITE", "INIT", "INNER",
	"INSERT", "INSTEAD", "INTERSECT", "INTO", "IPV4_ADDR", "IPV6_ADDR", "IS",
	"ISNULL", "JOIN", "KERBEROS", "KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME",
	"KILL", "LANGUAGE", "LEFT", "LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX",
	"LISTENER_IP", "LISTENER_PORT", "LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED",
	"MASTER", "MAX_MEMORY", "MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY",
	"MAX_EVENT_SIZE", "MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION",
	"MEDIANAME", "MEMBER", "MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING",
	"MESSAGE_FORWARD_SIZE", "MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL",
	"NEGOTIATE", "NOCHECK", "NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND",
	"NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS",
	"NOT", "NOTIFICATION", "NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS",
	"OLD_PASSWORD", "ON", "ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY",
	"OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE",
	"PARAM_NODE", "PARTIAL", "PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU",
	"PER_DB", "PER_NODE", "PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION",
	"PREDICATE", "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC",
	"PYTHON", "R", "RAISERROR", "RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS",
	"RECONFIGURE", "REFERENCES", "REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP",
	"REPLICATION", "REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME",
	"RETAINDAYS", "RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT",
	"ROLLBACK", "ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048",
	"RSA_3072", "RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER",
	"SCHEMA", "SCHEME", "SECURITY", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE",
	"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SEQUENCE",
	"SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", "SESSION_USER",
	"SET", "SETUSER", "SHUTDOWN", "SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME",
	"SOURCE", "SPECIFICATION", "SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH",
	"SQLDUMPERTIMEOUT", "STATISTICS", "STATE", "STATS", "START", "STARTED",
	"STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", "SUPPORTED", "SYSTEM",
	"SYSTEM_USER", "TABLE", "TABLESAMPLE", "TAPE", "TARGET", "TCP", "TEXTSIZE",
	"THEN", "TO", "TOP", "TRACK_CAUSALITY", "TRAN", "TRANSACTION", "TRANSFER",
	"TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", "UNION", "UNIQUE", "UNLOCK",
	"UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", "URL", "USE", "USED", "USER",
	"VALUES", "VARYING", "VERBOSELOGGING", "VIEW", "VISIBILITY", "WAITFOR",
	"WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", "WITHIN", "WITHOUT", "WITNESS",
	"WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVE", "ACTIVATION",
	"ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", "AGGREGATE",
	"ALGORITHM", "ALLOWED", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION",
	"ANSI_NULLS", "ANSI_NULL_DEFAULT", "ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG",
	"APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP",
	"AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS",
	"AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", "AVG", "BACKUP_PRIORITY",
	"BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", "BINARY_CHECKSUM", "BINDING",
	"BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", "BULK_LOGGED", "CALLER", "CAST",
	"CAP_CPU_PERCENT", "CATALOG", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING",
	"CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", "COLUMN_MASTER_KEY",
	"COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL",
	"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNTER", "COUNT_BIG", "CPU",
	"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT",
	"CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DATE_CORRELATION_OPTIMIZATION",
	"DAYS", "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE",
	"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY",
	"DELETED", "DENSE_RANK", "DEPENDENTS", "DES", "DESX", "DESCRIPTION", "DHCP",
	"DIALOG", "DIRECTORY_NAME", "DISABLE", "DISABLED", "DISABLE_BROKER", "DISK_DRIVE",
	"DOCUMENT", "DYNAMIC", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER",
	"ENCRYPTED_VALUE", "ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS",
	"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAILOVER_MODE",
	"FAILURE", "FAILURE_CONDITION_LEVEL", "FAIL_OPERATION", "FAST", "FAST_FORWARD",
	"FILEGROUP", "FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST",
	"FIRST_VALUE", "FOLLOWING", "FORCE", "FORCED", "FORCE_FAILOVER_ALLOW_DATA_LOSS",
	"FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", "GETUTCDATE",
	"GLOBAL", "GO", "GROUPING", "GROUPING_ID", "GROUP_MAX_REQUESTS", "HADR",
	"HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", "HOURS",
	"IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE",
	"IMPERSONATE", "IMPORTANCE", "INCREMENTAL", "INITIATOR", "INPUT", "INSENSITIVE",
	"INSERTED", "INT", "IP", "ISOLATION", "KB", "KEEP", "KEEPFIXED", "KEYSET",
	"KEYS", "KEY_SOURCE", "LAG", "LAST", "LAST_VALUE", "LEAD", "LEVEL", "LIST",
	"LISTENER", "LISTENER_URL", "LOB_COMPACTION", "LOCAL", "LOCATION", "LOCK_ESCALATION",
	"LOGIN", "LOOP", "LOW", "MANUAL", "MARK", "MAX", "MAX_CPU_PERCENT", "MIN_CPU_PERCENT",
	"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MIN_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT",
	"MIN_MEMORY_PERCENT", "MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES",
	"MAXDOP", "MAX_DOP", "MAXRECURSION", "MAXSIZE", "MEDIUM", "MESSAGE", "MB",
	"MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", "MIRROR_ADDRESS", "MIN_ACTIVE_ROWVERSION",
	"MIXED_PAGE_ALLOCATION", "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS",
	"NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", "NEXT", "NOCOUNT", "NOEXPAND",
	"NODES", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO", "NORECOVERY", "NO_TRUNCATE",
	"NO_WAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT",
	"OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING",
	"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION",
	"PARTITION", "PARTITIONS", "PARTNER", "PATH", "POOL", "POISON_MESSAGE_HANDLING",
	"PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL",
	"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER",
	"PROVIDER_KEY_NAME", "QUEUE", "QUEUE_DELAY", "QUERY", "QUOTED_IDENTIFIER",
	"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READONLY", "READ_COMMITTED_SNAPSHOT",
	"READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", "REBUILD", "RECOMPILE",
	"RECEIVE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOVE", "REORGANIZE",
	"REPLICA", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "REMOTE", "REMOTE_SERVICE_NAME",
	"REPEATABLE", "REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MAX_CPU_TIME_SEC",
	"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION",
	"RESTRICTED_USER", "RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROWGUID",
	"ROWS", "ROW_NUMBER", "SAMPLE", "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS",
	"SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", "SECRET",
	"SECURITY_LOG", "SEEDING_MODE", "SELF", "SEND", "SENT", "SERIALIZABLE",
	"SESSION_TIMEOUT", "SETERROR", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER",
	"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "START_DATE",
	"STATIC", "STATS_STREAM", "STATUS", "STDEV", "STDEVP", "STOPLIST", "SUBJECT",
	"SUSPEND", "STANDBY", "STUFF", "SUM", "SYMMETRIC", "SYNCHRONOUS_COMMIT",
	"SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW",
	"TIES", "TIME", "TIMER", "TINYINT", "TIMEOUT", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS",
	"TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF",
	"TYPE", "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED",
	"USING", "VALIDATION", "VALID_XML", "VALUE", "VAR", "VARP", "VIEWS", "VIEW_METADATA",
	"WELL_FORMED_XML", "WORK", "WORKLOAD", "XML", "XMLNAMESPACES", "DOLLAR_ACTION",
	"SPACE", "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE",
	"SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT",
	"STRING", "BINARY", "FLOAT", "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION",
	"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN",
	"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "DOT", "UNDERLINE", "AT", "SHARP",
	"DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR",
	"DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR",
	"IPV4_OCTECT",
}

var ruleNames = []string{
	"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause",
	"backup_statement", "cfl_statement", "block_statement", "break_statement",
	"continue_statement", "goto_statement", "return_statement", "if_statement",
	"throw_statement", "throw_error_number", "throw_message", "throw_state",
	"try_catch_statement", "waitfor_statement", "while_statement", "print_statement",
	"raiseerror_statement", "empty_statement", "another_statement", "alter_application_role",
	"create_application_role", "drop_aggregate", "drop_application_role", "alter_assembly",
	"alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause",
	"alter_assembly_from_clause_start", "alter_assembly_drop_clause", "alter_assembly_drop_multiple_files",
	"alter_assembly_drop", "alter_assembly_add_clause", "alter_asssembly_add_clause_start",
	"alter_assembly_client_file_clause", "alter_assembly_file_name", "alter_assembly_file_bits",
	"alter_assembly_as", "alter_assembly_with_clause", "alter_assembly_with",
	"client_assembly_specifier", "assembly_option", "network_file_share", "network_computer",
	"network_file_start", "file_path", "file_directory_path_separator", "local_file",
	"local_drive", "multiple_local_files", "multiple_local_file_start", "create_assembly",
	"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start",
	"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option",
	"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization",
	"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start",
	"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw",
	"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database",
	"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group",
	"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options",
	"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate",
	"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate",
	"drop_column_encryption_key", "drop_column_master_key", "drop_contract",
	"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification",
	"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source",
	"drop_external_file_format", "drop_external_library", "drop_external_resource_pool",
	"drop_external_table", "drop_event_notifications", "drop_event_session",
	"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist",
	"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function",
	"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", "drop_resource_pool",
	"drop_db_role", "drop_route", "drop_rule", "drop_schema", "drop_search_property_list",
	"drop_security_policy", "drop_sequence", "drop_server_audit", "drop_server_audit_specification",
	"drop_server_role", "drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw",
	"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group",
	"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "truncate_table",
	"create_column_master_key", "alter_credential", "create_credential", "alter_cryptographic_provider",
	"create_cryptographic_provider", "create_event_notification", "create_or_alter_event_session",
	"event_session_predicate_expression", "event_session_predicate_factor",
	"event_session_predicate_leaf", "alter_external_data_source", "alter_external_library",
	"create_external_library", "alter_external_resource_pool", "create_external_resource_pool",
	"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist",
	"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server",
	"alter_login_azure_sql", "create_login_azure_sql", "alter_login_azure_sql_dw_and_pdw",
	"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server",
	"alter_master_key_azure_sql", "create_master_key_azure_sql", "alter_message_type",
	"alter_partition_function", "alter_partition_scheme", "alter_remote_service_binding",
	"create_remote_service_binding", "create_resource_pool", "alter_resource_governor",
	"alter_db_role", "create_db_role", "create_route", "create_rule", "alter_schema_sql",
	"create_schema", "create_schema_azure_sql_dw_and_pdw", "alter_schema_azure_sql_dw_and_pdw",
	"create_search_property_list", "create_security_policy", "alter_sequence",
	"create_sequence", "alter_server_audit", "create_server_audit", "alter_server_audit_specification",
	"create_server_audit_specification", "alter_server_configuration", "alter_server_role",
	"create_server_role", "alter_server_role_pdw", "alter_service", "create_service",
	"alter_service_master_key", "alter_symmetric_key", "create_symmetric_key",
	"create_synonym", "alter_user", "create_user", "create_user_azure_sql_dw",
	"alter_user_azure_sql", "alter_workload_group", "create_workload_group",
	"create_xml_schema_collection", "create_queue", "queue_settings", "alter_queue",
	"queue_action", "queue_rebuild_options", "create_contract", "conversation_statement",
	"message_statement", "merge_statement", "merge_matched", "merge_not_matched",
	"delete_statement", "delete_statement_from", "insert_statement", "insert_statement_value",
	"receive_statement", "select_statement", "time", "update_statement", "output_clause",
	"output_dml_list_elem", "output_column_name", "create_database", "create_index",
	"create_or_alter_procedure", "create_or_alter_trigger", "create_or_alter_dml_trigger",
	"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger",
	"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select",
	"func_body_returns_table", "func_body_returns_scalar", "procedure_param",
	"procedure_option", "function_option", "create_statistics", "create_table",
	"table_options", "create_view", "view_attribute", "alter_table", "alter_database",
	"database_optionspec", "auto_option", "change_tracking_option", "change_tracking_option_list",
	"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option",
	"mirroring_set_option", "mirroring_partner", "mirroring_witness", "witness_partner_equal",
	"partner_option", "witness_option", "witness_server", "partner_server",
	"mirroring_host_port_seperator", "partner_server_tcp_prefix", "port_number",
	"host", "date_correlation_optimization_option", "db_encryption_option",
	"db_state_option", "db_update_option", "db_user_access_option", "delayed_durability_option",
	"external_access_option", "hadr_options", "mixed_page_allocation_option",
	"parameterization_option", "recovery_option", "service_broker_option",
	"snapshot_option", "sql_option", "target_recovery_time_option", "termination",
	"drop_index", "drop_relational_or_xml_or_spatial_index", "drop_backward_compatible_index",
	"drop_procedure", "drop_trigger", "drop_dml_trigger", "drop_ddl_trigger",
	"drop_function", "drop_statistics", "drop_table", "drop_view", "create_type",
	"drop_type", "rowset_function_limited", "openquery", "opendatasource",
	"declare_statement", "cursor_statement", "backup_database", "backup_log",
	"backup_certificate", "backup_master_key", "backup_service_master_key",
	"execute_statement", "execute_statement_arg", "execute_var_string", "security_statement",
	"create_certificate", "existing_keys", "private_key_options", "generate_new_keys",
	"date_options", "open_key", "close_key", "create_key", "key_options", "algorithm",
	"encryption_mechanism", "decryption_mechanism", "grant_permission", "set_statement",
	"transaction_statement", "go_statement", "use_statement", "dbcc_clause",
	"dbcc_options", "execute_clause", "declare_local", "table_type_definition",
	"xml_type_definition", "xml_schema_collection", "column_def_table_constraints",
	"column_def_table_constraint", "column_definition", "column_constraint",
	"table_constraint", "on_delete", "on_update", "index_options", "index_option",
	"declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial",
	"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "primitive_expression",
	"case_expression", "unary_operator_expression", "bracket_expression", "constant_expression",
	"subquery", "with_expression", "common_table_expression", "update_elem",
	"search_condition_list", "search_condition", "search_condition_and", "search_condition_not",
	"predicate", "query_expression", "sql_union", "query_specification", "top_clause",
	"top_percent", "top_count", "order_by_clause", "for_clause", "xml_common_directives",
	"order_by_expression", "group_by_item", "option_clause", "option", "optimize_for_arg",
	"select_list", "udt_method_arguments", "asterisk", "column_elem", "udt_elem",
	"expression_elem", "select_list_elem", "table_sources", "table_source",
	"table_source_item_joined", "table_source_item", "open_xml", "schema_declaration",
	"column_declaration", "change_table", "join_part", "pivot_clause", "unpivot_clause",
	"full_column_name_list", "table_name_with_hint", "rowset_function", "bulk_option",
	"derived_table", "function_call", "xml_data_type_methods", "value_method",
	"query_method", "exist_method", "modify_method", "nodes_method", "switch_section",
	"switch_search_condition_section", "as_column_alias", "as_table_alias",
	"table_alias", "with_table_hints", "insert_with_table_hints", "table_hint",
	"index_value", "column_alias_list", "column_alias", "table_value_constructor",
	"expression_list", "ranking_windowed_function", "aggregate_windowed_function",
	"analytic_windowed_function", "all_distinct_expression", "over_clause",
	"row_or_range_clause", "window_frame_extent", "window_frame_bound", "window_frame_preceding",
	"window_frame_following", "create_database_option", "database_filestream_option",
	"database_file_spec", "file_group", "file_spec", "entity_name", "entity_name_for_azure_dw",
	"entity_name_for_parallel_dw", "full_table_name", "table_name", "simple_name",
	"func_proc_name", "ddl_object", "full_column_name", "column_name_list_with_order",
	"column_name_list", "cursor_name", "on_off", "clustered", "null_notnull",
	"null_or_default", "scalar_function_name", "begin_conversation_timer",
	"begin_conversation_dialog", "contract_name", "service_name", "end_conversation",
	"waitfor_conversation", "get_conversation", "queue_id", "send_conversation",
	"data_type", "default_value", "constant", "sign", "id", "simple_id", "comparison_operator",
	"assignment_operator", "file_size",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type TSqlParser struct {
	*antlr.BaseParser
}

func NewTSqlParser(input antlr.TokenStream) *TSqlParser {
	this := new(TSqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "TSqlParser.g4"

	return this
}

// TSqlParser tokens.
const (
	TSqlParserEOF                                         = antlr.TokenEOF
	TSqlParserADD                                         = 1
	TSqlParserAES                                         = 2
	TSqlParserALL                                         = 3
	TSqlParserALLOW_CONNECTIONS                           = 4
	TSqlParserALLOW_MULTIPLE_EVENT_LOSS                   = 5
	TSqlParserALLOW_SINGLE_EVENT_LOSS                     = 6
	TSqlParserALTER                                       = 7
	TSqlParserAND                                         = 8
	TSqlParserANONYMOUS                                   = 9
	TSqlParserANY                                         = 10
	TSqlParserAPPEND                                      = 11
	TSqlParserAPPLICATION                                 = 12
	TSqlParserAS                                          = 13
	TSqlParserASC                                         = 14
	TSqlParserASYMMETRIC                                  = 15
	TSqlParserASYNCHRONOUS_COMMIT                         = 16
	TSqlParserAUTHORIZATION                               = 17
	TSqlParserAUTHENTICATION                              = 18
	TSqlParserAUTOMATED_BACKUP_PREFERENCE                 = 19
	TSqlParserAUTOMATIC                                   = 20
	TSqlParserAVAILABILITY_MODE                           = 21
	TSqlParserBACKSLASH                                   = 22
	TSqlParserBACKUP                                      = 23
	TSqlParserBEFORE                                      = 24
	TSqlParserBEGIN                                       = 25
	TSqlParserBETWEEN                                     = 26
	TSqlParserBLOCK                                       = 27
	TSqlParserBLOCKSIZE                                   = 28
	TSqlParserBLOCKING_HIERARCHY                          = 29
	TSqlParserBREAK                                       = 30
	TSqlParserBROWSE                                      = 31
	TSqlParserBUFFER                                      = 32
	TSqlParserBUFFERCOUNT                                 = 33
	TSqlParserBULK                                        = 34
	TSqlParserBY                                          = 35
	TSqlParserCACHE                                       = 36
	TSqlParserCALLED                                      = 37
	TSqlParserCASCADE                                     = 38
	TSqlParserCASE                                        = 39
	TSqlParserCERTIFICATE                                 = 40
	TSqlParserCHANGETABLE                                 = 41
	TSqlParserCHANGES                                     = 42
	TSqlParserCHECK                                       = 43
	TSqlParserCHECKPOINT                                  = 44
	TSqlParserCHECK_POLICY                                = 45
	TSqlParserCHECK_EXPIRATION                            = 46
	TSqlParserCLASSIFIER_FUNCTION                         = 47
	TSqlParserCLOSE                                       = 48
	TSqlParserCLUSTER                                     = 49
	TSqlParserCLUSTERED                                   = 50
	TSqlParserCOALESCE                                    = 51
	TSqlParserCOLLATE                                     = 52
	TSqlParserCOLUMN                                      = 53
	TSqlParserCOMPRESSION                                 = 54
	TSqlParserCOMMIT                                      = 55
	TSqlParserCOMPUTE                                     = 56
	TSqlParserCONFIGURATION                               = 57
	TSqlParserCONSTRAINT                                  = 58
	TSqlParserCONTAINMENT                                 = 59
	TSqlParserCONTAINS                                    = 60
	TSqlParserCONTAINSTABLE                               = 61
	TSqlParserCONTEXT                                     = 62
	TSqlParserCONTINUE                                    = 63
	TSqlParserCONTINUE_AFTER_ERROR                        = 64
	TSqlParserCONTRACT                                    = 65
	TSqlParserCONTRACT_NAME                               = 66
	TSqlParserCONVERSATION                                = 67
	TSqlParserCONVERT                                     = 68
	TSqlParserCOPY_ONLY                                   = 69
	TSqlParserCREATE                                      = 70
	TSqlParserCROSS                                       = 71
	TSqlParserCURRENT                                     = 72
	TSqlParserCURRENT_DATE                                = 73
	TSqlParserCURRENT_TIME                                = 74
	TSqlParserCURRENT_TIMESTAMP                           = 75
	TSqlParserCURRENT_USER                                = 76
	TSqlParserCURSOR                                      = 77
	TSqlParserCYCLE                                       = 78
	TSqlParserDATA                                        = 79
	TSqlParserDATA_COMPRESSION                            = 80
	TSqlParserDATA_SOURCE                                 = 81
	TSqlParserDATABASE                                    = 82
	TSqlParserDATABASE_MIRRORING                          = 83
	TSqlParserDBCC                                        = 84
	TSqlParserDEALLOCATE                                  = 85
	TSqlParserDECLARE                                     = 86
	TSqlParserDEFAULT                                     = 87
	TSqlParserDEFAULT_DATABASE                            = 88
	TSqlParserDEFAULT_SCHEMA                              = 89
	TSqlParserDELETE                                      = 90
	TSqlParserDENY                                        = 91
	TSqlParserDESC                                        = 92
	TSqlParserDIAGNOSTICS                                 = 93
	TSqlParserDIFFERENTIAL                                = 94
	TSqlParserDISK                                        = 95
	TSqlParserDISTINCT                                    = 96
	TSqlParserDISTRIBUTED                                 = 97
	TSqlParserDOUBLE                                      = 98
	TSqlParserDOUBLE_BACK_SLASH                           = 99
	TSqlParserDOUBLE_FORWARD_SLASH                        = 100
	TSqlParserDROP                                        = 101
	TSqlParserDTC_SUPPORT                                 = 102
	TSqlParserDUMP                                        = 103
	TSqlParserELSE                                        = 104
	TSqlParserENABLED                                     = 105
	TSqlParserEND                                         = 106
	TSqlParserENDPOINT                                    = 107
	TSqlParserERRLVL                                      = 108
	TSqlParserESCAPE                                      = 109
	TSqlParserERROR                                       = 110
	TSqlParserEVENT                                       = 111
	TSqlParserEVENTDATA                                   = 112
	TSqlParserEVENT_RETENTION_MODE                        = 113
	TSqlParserEXCEPT                                      = 114
	TSqlParserEXECUTABLE_FILE                             = 115
	TSqlParserEXECUTE                                     = 116
	TSqlParserEXISTS                                      = 117
	TSqlParserEXPIREDATE                                  = 118
	TSqlParserEXIT                                        = 119
	TSqlParserEXTENSION                                   = 120
	TSqlParserEXTERNAL                                    = 121
	TSqlParserEXTERNAL_ACCESS                             = 122
	TSqlParserFAILOVER                                    = 123
	TSqlParserFAILURECONDITIONLEVEL                       = 124
	TSqlParserFAN_IN                                      = 125
	TSqlParserFETCH                                       = 126
	TSqlParserFILE                                        = 127
	TSqlParserFILENAME                                    = 128
	TSqlParserFILLFACTOR                                  = 129
	TSqlParserFILE_SNAPSHOT                               = 130
	TSqlParserFOR                                         = 131
	TSqlParserFORCESEEK                                   = 132
	TSqlParserFORCE_SERVICE_ALLOW_DATA_LOSS               = 133
	TSqlParserFOREIGN                                     = 134
	TSqlParserFREETEXT                                    = 135
	TSqlParserFREETEXTTABLE                               = 136
	TSqlParserFROM                                        = 137
	TSqlParserFULL                                        = 138
	TSqlParserFUNCTION                                    = 139
	TSqlParserGET                                         = 140
	TSqlParserGOTO                                        = 141
	TSqlParserGOVERNOR                                    = 142
	TSqlParserGRANT                                       = 143
	TSqlParserGROUP                                       = 144
	TSqlParserHAVING                                      = 145
	TSqlParserHASHED                                      = 146
	TSqlParserHEALTHCHECKTIMEOUT                          = 147
	TSqlParserIDENTITY                                    = 148
	TSqlParserIDENTITYCOL                                 = 149
	TSqlParserIDENTITY_INSERT                             = 150
	TSqlParserIF                                          = 151
	TSqlParserIN                                          = 152
	TSqlParserINCLUDE                                     = 153
	TSqlParserINCREMENT                                   = 154
	TSqlParserINDEX                                       = 155
	TSqlParserINFINITE                                    = 156
	TSqlParserINIT                                        = 157
	TSqlParserINNER                                       = 158
	TSqlParserINSERT                                      = 159
	TSqlParserINSTEAD                                     = 160
	TSqlParserINTERSECT                                   = 161
	TSqlParserINTO                                        = 162
	TSqlParserIPV4_ADDR                                   = 163
	TSqlParserIPV6_ADDR                                   = 164
	TSqlParserIS                                          = 165
	TSqlParserISNULL                                      = 166
	TSqlParserJOIN                                        = 167
	TSqlParserKERBEROS                                    = 168
	TSqlParserKEY                                         = 169
	TSqlParserKEY_PATH                                    = 170
	TSqlParserKEY_STORE_PROVIDER_NAME                     = 171
	TSqlParserKILL                                        = 172
	TSqlParserLANGUAGE                                    = 173
	TSqlParserLEFT                                        = 174
	TSqlParserLIBRARY                                     = 175
	TSqlParserLIFETIME                                    = 176
	TSqlParserLIKE                                        = 177
	TSqlParserLINENO                                      = 178
	TSqlParserLINUX                                       = 179
	TSqlParserLISTENER_IP                                 = 180
	TSqlParserLISTENER_PORT                               = 181
	TSqlParserLOAD                                        = 182
	TSqlParserLOCAL_SERVICE_NAME                          = 183
	TSqlParserLOG                                         = 184
	TSqlParserMATCHED                                     = 185
	TSqlParserMASTER                                      = 186
	TSqlParserMAX_MEMORY                                  = 187
	TSqlParserMAXTRANSFER                                 = 188
	TSqlParserMAXVALUE                                    = 189
	TSqlParserMAX_DISPATCH_LATENCY                        = 190
	TSqlParserMAX_EVENT_SIZE                              = 191
	TSqlParserMAX_SIZE                                    = 192
	TSqlParserMAX_OUTSTANDING_IO_PER_VOLUME               = 193
	TSqlParserMEDIADESCRIPTION                            = 194
	TSqlParserMEDIANAME                                   = 195
	TSqlParserMEMBER                                      = 196
	TSqlParserMEMORY_PARTITION_MODE                       = 197
	TSqlParserMERGE                                       = 198
	TSqlParserMESSAGE_FORWARDING                          = 199
	TSqlParserMESSAGE_FORWARD_SIZE                        = 200
	TSqlParserMINVALUE                                    = 201
	TSqlParserMIRROR                                      = 202
	TSqlParserMUST_CHANGE                                 = 203
	TSqlParserNATIONAL                                    = 204
	TSqlParserNEGOTIATE                                   = 205
	TSqlParserNOCHECK                                     = 206
	TSqlParserNOFORMAT                                    = 207
	TSqlParserNOINIT                                      = 208
	TSqlParserNONCLUSTERED                                = 209
	TSqlParserNONE                                        = 210
	TSqlParserNOREWIND                                    = 211
	TSqlParserNOSKIP                                      = 212
	TSqlParserNOUNLOAD                                    = 213
	TSqlParserNO_CHECKSUM                                 = 214
	TSqlParserNO_COMPRESSION                              = 215
	TSqlParserNO_EVENT_LOSS                               = 216
	TSqlParserNOT                                         = 217
	TSqlParserNOTIFICATION                                = 218
	TSqlParserNTLM                                        = 219
	TSqlParserNULL                                        = 220
	TSqlParserNULLIF                                      = 221
	TSqlParserOF                                          = 222
	TSqlParserOFF                                         = 223
	TSqlParserOFFSETS                                     = 224
	TSqlParserOLD_PASSWORD                                = 225
	TSqlParserON                                          = 226
	TSqlParserON_FAILURE                                  = 227
	TSqlParserOPEN                                        = 228
	TSqlParserOPENDATASOURCE                              = 229
	TSqlParserOPENQUERY                                   = 230
	TSqlParserOPENROWSET                                  = 231
	TSqlParserOPENXML                                     = 232
	TSqlParserOPTION                                      = 233
	TSqlParserOR                                          = 234
	TSqlParserORDER                                       = 235
	TSqlParserOUTER                                       = 236
	TSqlParserOVER                                        = 237
	TSqlParserPAGE                                        = 238
	TSqlParserPARAM_NODE                                  = 239
	TSqlParserPARTIAL                                     = 240
	TSqlParserPASSWORD                                    = 241
	TSqlParserPERCENT                                     = 242
	TSqlParserPERMISSION_SET                              = 243
	TSqlParserPER_CPU                                     = 244
	TSqlParserPER_DB                                      = 245
	TSqlParserPER_NODE                                    = 246
	TSqlParserPIVOT                                       = 247
	TSqlParserPLAN                                        = 248
	TSqlParserPLATFORM                                    = 249
	TSqlParserPOLICY                                      = 250
	TSqlParserPRECISION                                   = 251
	TSqlParserPREDICATE                                   = 252
	TSqlParserPRIMARY                                     = 253
	TSqlParserPRINT                                       = 254
	TSqlParserPROC                                        = 255
	TSqlParserPROCEDURE                                   = 256
	TSqlParserPROCESS                                     = 257
	TSqlParserPUBLIC                                      = 258
	TSqlParserPYTHON                                      = 259
	TSqlParserR                                           = 260
	TSqlParserRAISERROR                                   = 261
	TSqlParserRAW                                         = 262
	TSqlParserREAD                                        = 263
	TSqlParserREADTEXT                                    = 264
	TSqlParserREAD_WRITE_FILEGROUPS                       = 265
	TSqlParserRECONFIGURE                                 = 266
	TSqlParserREFERENCES                                  = 267
	TSqlParserREGENERATE                                  = 268
	TSqlParserRELATED_CONVERSATION                        = 269
	TSqlParserRELATED_CONVERSATION_GROUP                  = 270
	TSqlParserREPLICATION                                 = 271
	TSqlParserREQUIRED                                    = 272
	TSqlParserRESET                                       = 273
	TSqlParserRESTART                                     = 274
	TSqlParserRESTORE                                     = 275
	TSqlParserRESTRICT                                    = 276
	TSqlParserRESUME                                      = 277
	TSqlParserRETAINDAYS                                  = 278
	TSqlParserRETURN                                      = 279
	TSqlParserRETURNS                                     = 280
	TSqlParserREVERT                                      = 281
	TSqlParserREVOKE                                      = 282
	TSqlParserREWIND                                      = 283
	TSqlParserRIGHT                                       = 284
	TSqlParserROLLBACK                                    = 285
	TSqlParserROLE                                        = 286
	TSqlParserROWCOUNT                                    = 287
	TSqlParserROWGUIDCOL                                  = 288
	TSqlParserRSA_512                                     = 289
	TSqlParserRSA_1024                                    = 290
	TSqlParserRSA_2048                                    = 291
	TSqlParserRSA_3072                                    = 292
	TSqlParserRSA_4096                                    = 293
	TSqlParserSAFETY                                      = 294
	TSqlParserRULE                                        = 295
	TSqlParserSAFE                                        = 296
	TSqlParserSAVE                                        = 297
	TSqlParserSCHEDULER                                   = 298
	TSqlParserSCHEMA                                      = 299
	TSqlParserSCHEME                                      = 300
	TSqlParserSECURITY                                    = 301
	TSqlParserSECURITYAUDIT                               = 302
	TSqlParserSELECT                                      = 303
	TSqlParserSEMANTICKEYPHRASETABLE                      = 304
	TSqlParserSEMANTICSIMILARITYDETAILSTABLE              = 305
	TSqlParserSEMANTICSIMILARITYTABLE                     = 306
	TSqlParserSEQUENCE                                    = 307
	TSqlParserSERVER                                      = 308
	TSqlParserSERVICE                                     = 309
	TSqlParserSERVICE_BROKER                              = 310
	TSqlParserSERVICE_NAME                                = 311
	TSqlParserSESSION                                     = 312
	TSqlParserSESSION_USER                                = 313
	TSqlParserSET                                         = 314
	TSqlParserSETUSER                                     = 315
	TSqlParserSHUTDOWN                                    = 316
	TSqlParserSID                                         = 317
	TSqlParserSKIP_KEYWORD                                = 318
	TSqlParserSOFTNUMA                                    = 319
	TSqlParserSOME                                        = 320
	TSqlParserSOURCE                                      = 321
	TSqlParserSPECIFICATION                               = 322
	TSqlParserSPLIT                                       = 323
	TSqlParserSQLDUMPERFLAGS                              = 324
	TSqlParserSQLDUMPERPATH                               = 325
	TSqlParserSQLDUMPERTIMEOUT                            = 326
	TSqlParserSTATISTICS                                  = 327
	TSqlParserSTATE                                       = 328
	TSqlParserSTATS                                       = 329
	TSqlParserSTART                                       = 330
	TSqlParserSTARTED                                     = 331
	TSqlParserSTARTUP_STATE                               = 332
	TSqlParserSTOP                                        = 333
	TSqlParserSTOPPED                                     = 334
	TSqlParserSTOP_ON_ERROR                               = 335
	TSqlParserSUPPORTED                                   = 336
	TSqlParserSYSTEM                                      = 337
	TSqlParserSYSTEM_USER                                 = 338
	TSqlParserTABLE                                       = 339
	TSqlParserTABLESAMPLE                                 = 340
	TSqlParserTAPE                                        = 341
	TSqlParserTARGET                                      = 342
	TSqlParserTCP                                         = 343
	TSqlParserTEXTSIZE                                    = 344
	TSqlParserTHEN                                        = 345
	TSqlParserTO                                          = 346
	TSqlParserTOP                                         = 347
	TSqlParserTRACK_CAUSALITY                             = 348
	TSqlParserTRAN                                        = 349
	TSqlParserTRANSACTION                                 = 350
	TSqlParserTRANSFER                                    = 351
	TSqlParserTRIGGER                                     = 352
	TSqlParserTRUNCATE                                    = 353
	TSqlParserTSEQUAL                                     = 354
	TSqlParserUNCHECKED                                   = 355
	TSqlParserUNION                                       = 356
	TSqlParserUNIQUE                                      = 357
	TSqlParserUNLOCK                                      = 358
	TSqlParserUNPIVOT                                     = 359
	TSqlParserUNSAFE                                      = 360
	TSqlParserUPDATE                                      = 361
	TSqlParserUPDATETEXT                                  = 362
	TSqlParserURL                                         = 363
	TSqlParserUSE                                         = 364
	TSqlParserUSED                                        = 365
	TSqlParserUSER                                        = 366
	TSqlParserVALUES                                      = 367
	TSqlParserVARYING                                     = 368
	TSqlParserVERBOSELOGGING                              = 369
	TSqlParserVIEW                                        = 370
	TSqlParserVISIBILITY                                  = 371
	TSqlParserWAITFOR                                     = 372
	TSqlParserWHEN                                        = 373
	TSqlParserWHERE                                       = 374
	TSqlParserWHILE                                       = 375
	TSqlParserWINDOWS                                     = 376
	TSqlParserWITH                                        = 377
	TSqlParserWITHIN                                      = 378
	TSqlParserWITHOUT                                     = 379
	TSqlParserWITNESS                                     = 380
	TSqlParserWRITETEXT                                   = 381
	TSqlParserABSOLUTE                                    = 382
	TSqlParserACCENT_SENSITIVITY                          = 383
	TSqlParserACTION                                      = 384
	TSqlParserACTIVE                                      = 385
	TSqlParserACTIVATION                                  = 386
	TSqlParserADDRESS                                     = 387
	TSqlParserAES_128                                     = 388
	TSqlParserAES_192                                     = 389
	TSqlParserAES_256                                     = 390
	TSqlParserAFFINITY                                    = 391
	TSqlParserAFTER                                       = 392
	TSqlParserAGGREGATE                                   = 393
	TSqlParserALGORITHM                                   = 394
	TSqlParserALLOWED                                     = 395
	TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS         = 396
	TSqlParserALLOW_SNAPSHOT_ISOLATION                    = 397
	TSqlParserANSI_NULLS                                  = 398
	TSqlParserANSI_NULL_DEFAULT                           = 399
	TSqlParserANSI_PADDING                                = 400
	TSqlParserANSI_WARNINGS                               = 401
	TSqlParserAPPLICATION_LOG                             = 402
	TSqlParserAPPLY                                       = 403
	TSqlParserARITHABORT                                  = 404
	TSqlParserASSEMBLY                                    = 405
	TSqlParserAUDIT                                       = 406
	TSqlParserAUDIT_GUID                                  = 407
	TSqlParserAUTO                                        = 408
	TSqlParserAUTO_CLEANUP                                = 409
	TSqlParserAUTO_CLOSE                                  = 410
	TSqlParserAUTO_CREATE_STATISTICS                      = 411
	TSqlParserAUTO_SHRINK                                 = 412
	TSqlParserAUTO_UPDATE_STATISTICS                      = 413
	TSqlParserAUTO_UPDATE_STATISTICS_ASYNC                = 414
	TSqlParserAVAILABILITY                                = 415
	TSqlParserAVG                                         = 416
	TSqlParserBACKUP_PRIORITY                             = 417
	TSqlParserBEGIN_DIALOG                                = 418
	TSqlParserBIGINT                                      = 419
	TSqlParserBINARY_BASE64                               = 420
	TSqlParserBINARY_CHECKSUM                             = 421
	TSqlParserBINDING                                     = 422
	TSqlParserBLOB_STORAGE                                = 423
	TSqlParserBROKER                                      = 424
	TSqlParserBROKER_INSTANCE                             = 425
	TSqlParserBULK_LOGGED                                 = 426
	TSqlParserCALLER                                      = 427
	TSqlParserCAST                                        = 428
	TSqlParserCAP_CPU_PERCENT                             = 429
	TSqlParserCATALOG                                     = 430
	TSqlParserCATCH                                       = 431
	TSqlParserCHANGE_RETENTION                            = 432
	TSqlParserCHANGE_TRACKING                             = 433
	TSqlParserCHECKSUM                                    = 434
	TSqlParserCHECKSUM_AGG                                = 435
	TSqlParserCLEANUP                                     = 436
	TSqlParserCOLLECTION                                  = 437
	TSqlParserCOLUMN_MASTER_KEY                           = 438
	TSqlParserCOMMITTED                                   = 439
	TSqlParserCOMPATIBILITY_LEVEL                         = 440
	TSqlParserCONCAT                                      = 441
	TSqlParserCONCAT_NULL_YIELDS_NULL                     = 442
	TSqlParserCONTENT                                     = 443
	TSqlParserCONTROL                                     = 444
	TSqlParserCOOKIE                                      = 445
	TSqlParserCOUNT                                       = 446
	TSqlParserCOUNTER                                     = 447
	TSqlParserCOUNT_BIG                                   = 448
	TSqlParserCPU                                         = 449
	TSqlParserCREATE_NEW                                  = 450
	TSqlParserCREATION_DISPOSITION                        = 451
	TSqlParserCREDENTIAL                                  = 452
	TSqlParserCRYPTOGRAPHIC                               = 453
	TSqlParserCURSOR_CLOSE_ON_COMMIT                      = 454
	TSqlParserCURSOR_DEFAULT                              = 455
	TSqlParserDATEADD                                     = 456
	TSqlParserDATEDIFF                                    = 457
	TSqlParserDATENAME                                    = 458
	TSqlParserDATEPART                                    = 459
	TSqlParserDATE_CORRELATION_OPTIMIZATION               = 460
	TSqlParserDAYS                                        = 461
	TSqlParserDB_CHAINING                                 = 462
	TSqlParserDB_FAILOVER                                 = 463
	TSqlParserDECRYPTION                                  = 464
	TSqlParserDEFAULT_DOUBLE_QUOTE                        = 465
	TSqlParserDEFAULT_FULLTEXT_LANGUAGE                   = 466
	TSqlParserDEFAULT_LANGUAGE                            = 467
	TSqlParserDELAY                                       = 468
	TSqlParserDELAYED_DURABILITY                          = 469
	TSqlParserDELETED                                     = 470
	TSqlParserDENSE_RANK                                  = 471
	TSqlParserDEPENDENTS                                  = 472
	TSqlParserDES                                         = 473
	TSqlParserDESX                                        = 474
	TSqlParserDESCRIPTION                                 = 475
	TSqlParserDHCP                                        = 476
	TSqlParserDIALOG                                      = 477
	TSqlParserDIRECTORY_NAME                              = 478
	TSqlParserDISABLE                                     = 479
	TSqlParserDISABLED                                    = 480
	TSqlParserDISABLE_BROKER                              = 481
	TSqlParserDISK_DRIVE                                  = 482
	TSqlParserDOCUMENT                                    = 483
	TSqlParserDYNAMIC                                     = 484
	TSqlParserEMERGENCY                                   = 485
	TSqlParserEMPTY                                       = 486
	TSqlParserENABLE                                      = 487
	TSqlParserENABLE_BROKER                               = 488
	TSqlParserENCRYPTED_VALUE                             = 489
	TSqlParserENCRYPTION                                  = 490
	TSqlParserENDPOINT_URL                                = 491
	TSqlParserERROR_BROKER_CONVERSATIONS                  = 492
	TSqlParserEXECUTABLE                                  = 493
	TSqlParserEXIST                                       = 494
	TSqlParserEXPAND                                      = 495
	TSqlParserEXPIRY_DATE                                 = 496
	TSqlParserEXPLICIT                                    = 497
	TSqlParserFAILOVER_MODE                               = 498
	TSqlParserFAILURE                                     = 499
	TSqlParserFAILURE_CONDITION_LEVEL                     = 500
	TSqlParserFAIL_OPERATION                              = 501
	TSqlParserFAST                                        = 502
	TSqlParserFAST_FORWARD                                = 503
	TSqlParserFILEGROUP                                   = 504
	TSqlParserFILEGROWTH                                  = 505
	TSqlParserFILEPATH                                    = 506
	TSqlParserFILESTREAM                                  = 507
	TSqlParserFILTER                                      = 508
	TSqlParserFIRST                                       = 509
	TSqlParserFIRST_VALUE                                 = 510
	TSqlParserFOLLOWING                                   = 511
	TSqlParserFORCE                                       = 512
	TSqlParserFORCED                                      = 513
	TSqlParserFORCE_FAILOVER_ALLOW_DATA_LOSS              = 514
	TSqlParserFORMAT                                      = 515
	TSqlParserFORWARD_ONLY                                = 516
	TSqlParserFULLSCAN                                    = 517
	TSqlParserFULLTEXT                                    = 518
	TSqlParserGB                                          = 519
	TSqlParserGETDATE                                     = 520
	TSqlParserGETUTCDATE                                  = 521
	TSqlParserGLOBAL                                      = 522
	TSqlParserGO                                          = 523
	TSqlParserGROUPING                                    = 524
	TSqlParserGROUPING_ID                                 = 525
	TSqlParserGROUP_MAX_REQUESTS                          = 526
	TSqlParserHADR                                        = 527
	TSqlParserHASH                                        = 528
	TSqlParserHEALTH_CHECK_TIMEOUT                        = 529
	TSqlParserHIGH                                        = 530
	TSqlParserHONOR_BROKER_PRIORITY                       = 531
	TSqlParserHOURS                                       = 532
	TSqlParserIDENTITY_VALUE                              = 533
	TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX       = 534
	TSqlParserIMMEDIATE                                   = 535
	TSqlParserIMPERSONATE                                 = 536
	TSqlParserIMPORTANCE                                  = 537
	TSqlParserINCREMENTAL                                 = 538
	TSqlParserINITIATOR                                   = 539
	TSqlParserINPUT                                       = 540
	TSqlParserINSENSITIVE                                 = 541
	TSqlParserINSERTED                                    = 542
	TSqlParserINT                                         = 543
	TSqlParserIP                                          = 544
	TSqlParserISOLATION                                   = 545
	TSqlParserKB                                          = 546
	TSqlParserKEEP                                        = 547
	TSqlParserKEEPFIXED                                   = 548
	TSqlParserKEYSET                                      = 549
	TSqlParserKEYS                                        = 550
	TSqlParserKEY_SOURCE                                  = 551
	TSqlParserLAG                                         = 552
	TSqlParserLAST                                        = 553
	TSqlParserLAST_VALUE                                  = 554
	TSqlParserLEAD                                        = 555
	TSqlParserLEVEL                                       = 556
	TSqlParserLIST                                        = 557
	TSqlParserLISTENER                                    = 558
	TSqlParserLISTENER_URL                                = 559
	TSqlParserLOB_COMPACTION                              = 560
	TSqlParserLOCAL                                       = 561
	TSqlParserLOCATION                                    = 562
	TSqlParserLOCK_ESCALATION                             = 563
	TSqlParserLOGIN                                       = 564
	TSqlParserLOOP                                        = 565
	TSqlParserLOW                                         = 566
	TSqlParserMANUAL                                      = 567
	TSqlParserMARK                                        = 568
	TSqlParserMAX                                         = 569
	TSqlParserMAX_CPU_PERCENT                             = 570
	TSqlParserMIN_CPU_PERCENT                             = 571
	TSqlParserMAX_FILES                                   = 572
	TSqlParserMAX_IOPS_PER_VOLUME                         = 573
	TSqlParserMIN_IOPS_PER_VOLUME                         = 574
	TSqlParserMAX_MEMORY_PERCENT                          = 575
	TSqlParserMIN_MEMORY_PERCENT                          = 576
	TSqlParserMAX_PROCESSES                               = 577
	TSqlParserMAX_QUEUE_READERS                           = 578
	TSqlParserMAX_ROLLOVER_FILES                          = 579
	TSqlParserMAXDOP                                      = 580
	TSqlParserMAX_DOP                                     = 581
	TSqlParserMAXRECURSION                                = 582
	TSqlParserMAXSIZE                                     = 583
	TSqlParserMEDIUM                                      = 584
	TSqlParserMESSAGE                                     = 585
	TSqlParserMB                                          = 586
	TSqlParserMEMORY_OPTIMIZED_DATA                       = 587
	TSqlParserMIN                                         = 588
	TSqlParserMINUTES                                     = 589
	TSqlParserMIRROR_ADDRESS                              = 590
	TSqlParserMIN_ACTIVE_ROWVERSION                       = 591
	TSqlParserMIXED_PAGE_ALLOCATION                       = 592
	TSqlParserMODIFY                                      = 593
	TSqlParserMOVE                                        = 594
	TSqlParserMULTI_USER                                  = 595
	TSqlParserNAME                                        = 596
	TSqlParserNESTED_TRIGGERS                             = 597
	TSqlParserNEW_ACCOUNT                                 = 598
	TSqlParserNEW_BROKER                                  = 599
	TSqlParserNEW_PASSWORD                                = 600
	TSqlParserNEXT                                        = 601
	TSqlParserNOCOUNT                                     = 602
	TSqlParserNOEXPAND                                    = 603
	TSqlParserNODES                                       = 604
	TSqlParserNON_TRANSACTED_ACCESS                       = 605
	TSqlParserNORECOMPUTE                                 = 606
	TSqlParserNO                                          = 607
	TSqlParserNORECOVERY                                  = 608
	TSqlParserNO_TRUNCATE                                 = 609
	TSqlParserNO_WAIT                                     = 610
	TSqlParserNTILE                                       = 611
	TSqlParserNUMANODE                                    = 612
	TSqlParserNUMBER                                      = 613
	TSqlParserNUMERIC_ROUNDABORT                          = 614
	TSqlParserOBJECT                                      = 615
	TSqlParserOFFLINE                                     = 616
	TSqlParserOFFSET                                      = 617
	TSqlParserOLD_ACCOUNT                                 = 618
	TSqlParserONLINE                                      = 619
	TSqlParserONLY                                        = 620
	TSqlParserOPEN_EXISTING                               = 621
	TSqlParserOPTIMISTIC                                  = 622
	TSqlParserOPTIMIZE                                    = 623
	TSqlParserOUT                                         = 624
	TSqlParserOUTPUT                                      = 625
	TSqlParserOWNER                                       = 626
	TSqlParserPAGE_VERIFY                                 = 627
	TSqlParserPARAMETERIZATION                            = 628
	TSqlParserPARTITION                                   = 629
	TSqlParserPARTITIONS                                  = 630
	TSqlParserPARTNER                                     = 631
	TSqlParserPATH                                        = 632
	TSqlParserPOOL                                        = 633
	TSqlParserPOISON_MESSAGE_HANDLING                     = 634
	TSqlParserPORT                                        = 635
	TSqlParserPRECEDING                                   = 636
	TSqlParserPRIMARY_ROLE                                = 637
	TSqlParserPRIOR                                       = 638
	TSqlParserPRIORITY                                    = 639
	TSqlParserPRIORITY_LEVEL                              = 640
	TSqlParserPRIVATE                                     = 641
	TSqlParserPRIVATE_KEY                                 = 642
	TSqlParserPRIVILEGES                                  = 643
	TSqlParserPROCEDURE_NAME                              = 644
	TSqlParserPROPERTY                                    = 645
	TSqlParserPROVIDER                                    = 646
	TSqlParserPROVIDER_KEY_NAME                           = 647
	TSqlParserQUEUE                                       = 648
	TSqlParserQUEUE_DELAY                                 = 649
	TSqlParserQUERY                                       = 650
	TSqlParserQUOTED_IDENTIFIER                           = 651
	TSqlParserRANGE                                       = 652
	TSqlParserRANK                                        = 653
	TSqlParserRC2                                         = 654
	TSqlParserRC4                                         = 655
	TSqlParserRC4_128                                     = 656
	TSqlParserREADONLY                                    = 657
	TSqlParserREAD_COMMITTED_SNAPSHOT                     = 658
	TSqlParserREAD_ONLY                                   = 659
	TSqlParserREAD_ONLY_ROUTING_LIST                      = 660
	TSqlParserREAD_WRITE                                  = 661
	TSqlParserREBUILD                                     = 662
	TSqlParserRECOMPILE                                   = 663
	TSqlParserRECEIVE                                     = 664
	TSqlParserRECOVERY                                    = 665
	TSqlParserRECURSIVE_TRIGGERS                          = 666
	TSqlParserRELATIVE                                    = 667
	TSqlParserREMOVE                                      = 668
	TSqlParserREORGANIZE                                  = 669
	TSqlParserREPLICA                                     = 670
	TSqlParserREQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = 671
	TSqlParserREMOTE                                      = 672
	TSqlParserREMOTE_SERVICE_NAME                         = 673
	TSqlParserREPEATABLE                                  = 674
	TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT            = 675
	TSqlParserREQUEST_MAX_CPU_TIME_SEC                    = 676
	TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC            = 677
	TSqlParserRESERVE_DISK_SPACE                          = 678
	TSqlParserRESOURCE                                    = 679
	TSqlParserRESOURCE_MANAGER_LOCATION                   = 680
	TSqlParserRESTRICTED_USER                             = 681
	TSqlParserRETENTION                                   = 682
	TSqlParserROBUST                                      = 683
	TSqlParserROOT                                        = 684
	TSqlParserROUTE                                       = 685
	TSqlParserROW                                         = 686
	TSqlParserROWGUID                                     = 687
	TSqlParserROWS                                        = 688
	TSqlParserROW_NUMBER                                  = 689
	TSqlParserSAMPLE                                      = 690
	TSqlParserSCHEMABINDING                               = 691
	TSqlParserSCOPED                                      = 692
	TSqlParserSCROLL                                      = 693
	TSqlParserSCROLL_LOCKS                                = 694
	TSqlParserSEARCH                                      = 695
	TSqlParserSECONDARY                                   = 696
	TSqlParserSECONDARY_ONLY                              = 697
	TSqlParserSECONDARY_ROLE                              = 698
	TSqlParserSECONDS                                     = 699
	TSqlParserSECRET                                      = 700
	TSqlParserSECURITY_LOG                                = 701
	TSqlParserSEEDING_MODE                                = 702
	TSqlParserSELF                                        = 703
	TSqlParserSEND                                        = 704
	TSqlParserSENT                                        = 705
	TSqlParserSERIALIZABLE                                = 706
	TSqlParserSESSION_TIMEOUT                             = 707
	TSqlParserSETERROR                                    = 708
	TSqlParserSHOWPLAN                                    = 709
	TSqlParserSIGNATURE                                   = 710
	TSqlParserSIMPLE                                      = 711
	TSqlParserSINGLE_USER                                 = 712
	TSqlParserSIZE                                        = 713
	TSqlParserSMALLINT                                    = 714
	TSqlParserSNAPSHOT                                    = 715
	TSqlParserSPATIAL_WINDOW_MAX_CELLS                    = 716
	TSqlParserSTART_DATE                                  = 717
	TSqlParserSTATIC                                      = 718
	TSqlParserSTATS_STREAM                                = 719
	TSqlParserSTATUS                                      = 720
	TSqlParserSTDEV                                       = 721
	TSqlParserSTDEVP                                      = 722
	TSqlParserSTOPLIST                                    = 723
	TSqlParserSUBJECT                                     = 724
	TSqlParserSUSPEND                                     = 725
	TSqlParserSTANDBY                                     = 726
	TSqlParserSTUFF                                       = 727
	TSqlParserSUM                                         = 728
	TSqlParserSYMMETRIC                                   = 729
	TSqlParserSYNCHRONOUS_COMMIT                          = 730
	TSqlParserSYNONYM                                     = 731
	TSqlParserTAKE                                        = 732
	TSqlParserTARGET_RECOVERY_TIME                        = 733
	TSqlParserTB                                          = 734
	TSqlParserTEXTIMAGE_ON                                = 735
	TSqlParserTHROW                                       = 736
	TSqlParserTIES                                        = 737
	TSqlParserTIME                                        = 738
	TSqlParserTIMER                                       = 739
	TSqlParserTINYINT                                     = 740
	TSqlParserTIMEOUT                                     = 741
	TSqlParserTORN_PAGE_DETECTION                         = 742
	TSqlParserTRANSFORM_NOISE_WORDS                       = 743
	TSqlParserTRIPLE_DES                                  = 744
	TSqlParserTRIPLE_DES_3KEY                             = 745
	TSqlParserTRUSTWORTHY                                 = 746
	TSqlParserTRY                                         = 747
	TSqlParserTSQL                                        = 748
	TSqlParserTWO_DIGIT_YEAR_CUTOFF                       = 749
	TSqlParserTYPE                                        = 750
	TSqlParserTYPE_WARNING                                = 751
	TSqlParserUNBOUNDED                                   = 752
	TSqlParserUNCOMMITTED                                 = 753
	TSqlParserUNKNOWN                                     = 754
	TSqlParserUNLIMITED                                   = 755
	TSqlParserUSING                                       = 756
	TSqlParserVALIDATION                                  = 757
	TSqlParserVALID_XML                                   = 758
	TSqlParserVALUE                                       = 759
	TSqlParserVAR                                         = 760
	TSqlParserVARP                                        = 761
	TSqlParserVIEWS                                       = 762
	TSqlParserVIEW_METADATA                               = 763
	TSqlParserWELL_FORMED_XML                             = 764
	TSqlParserWORK                                        = 765
	TSqlParserWORKLOAD                                    = 766
	TSqlParserXML                                         = 767
	TSqlParserXMLNAMESPACES                               = 768
	TSqlParserDOLLAR_ACTION                               = 769
	TSqlParserSPACE                                       = 770
	TSqlParserCOMMENT                                     = 771
	TSqlParserLINE_COMMENT                                = 772
	TSqlParserDOUBLE_QUOTE_ID                             = 773
	TSqlParserSINGLE_QUOTE                                = 774
	TSqlParserSQUARE_BRACKET_ID                           = 775
	TSqlParserLOCAL_ID                                    = 776
	TSqlParserDECIMAL                                     = 777
	TSqlParserID                                          = 778
	TSqlParserQUOTED_URL                                  = 779
	TSqlParserQUOTED_HOST_AND_PORT                        = 780
	TSqlParserSTRING                                      = 781
	TSqlParserBINARY                                      = 782
	TSqlParserFLOAT                                       = 783
	TSqlParserREAL                                        = 784
	TSqlParserEQUAL                                       = 785
	TSqlParserGREATER                                     = 786
	TSqlParserLESS                                        = 787
	TSqlParserEXCLAMATION                                 = 788
	TSqlParserPLUS_ASSIGN                                 = 789
	TSqlParserMINUS_ASSIGN                                = 790
	TSqlParserMULT_ASSIGN                                 = 791
	TSqlParserDIV_ASSIGN                                  = 792
	TSqlParserMOD_ASSIGN                                  = 793
	TSqlParserAND_ASSIGN                                  = 794
	TSqlParserXOR_ASSIGN                                  = 795
	TSqlParserOR_ASSIGN                                   = 796
	TSqlParserDOT                                         = 797
	TSqlParserUNDERLINE                                   = 798
	TSqlParserAT                                          = 799
	TSqlParserSHARP                                       = 800
	TSqlParserDOLLAR                                      = 801
	TSqlParserLR_BRACKET                                  = 802
	TSqlParserRR_BRACKET                                  = 803
	TSqlParserCOMMA                                       = 804
	TSqlParserSEMI                                        = 805
	TSqlParserCOLON                                       = 806
	TSqlParserSTAR                                        = 807
	TSqlParserDIVIDE                                      = 808
	TSqlParserMODULE                                      = 809
	TSqlParserPLUS                                        = 810
	TSqlParserMINUS                                       = 811
	TSqlParserBIT_NOT                                     = 812
	TSqlParserBIT_OR                                      = 813
	TSqlParserBIT_AND                                     = 814
	TSqlParserBIT_XOR                                     = 815
	TSqlParserIPV4_OCTECT                                 = 816
)

// TSqlParser rules.
const (
	TSqlParserRULE_tsql_file                               = 0
	TSqlParserRULE_batch                                   = 1
	TSqlParserRULE_sql_clauses                             = 2
	TSqlParserRULE_sql_clause                              = 3
	TSqlParserRULE_dml_clause                              = 4
	TSqlParserRULE_ddl_clause                              = 5
	TSqlParserRULE_backup_statement                        = 6
	TSqlParserRULE_cfl_statement                           = 7
	TSqlParserRULE_block_statement                         = 8
	TSqlParserRULE_break_statement                         = 9
	TSqlParserRULE_continue_statement                      = 10
	TSqlParserRULE_goto_statement                          = 11
	TSqlParserRULE_return_statement                        = 12
	TSqlParserRULE_if_statement                            = 13
	TSqlParserRULE_throw_statement                         = 14
	TSqlParserRULE_throw_error_number                      = 15
	TSqlParserRULE_throw_message                           = 16
	TSqlParserRULE_throw_state                             = 17
	TSqlParserRULE_try_catch_statement                     = 18
	TSqlParserRULE_waitfor_statement                       = 19
	TSqlParserRULE_while_statement                         = 20
	TSqlParserRULE_print_statement                         = 21
	TSqlParserRULE_raiseerror_statement                    = 22
	TSqlParserRULE_empty_statement                         = 23
	TSqlParserRULE_another_statement                       = 24
	TSqlParserRULE_alter_application_role                  = 25
	TSqlParserRULE_create_application_role                 = 26
	TSqlParserRULE_drop_aggregate                          = 27
	TSqlParserRULE_drop_application_role                   = 28
	TSqlParserRULE_alter_assembly                          = 29
	TSqlParserRULE_alter_assembly_start                    = 30
	TSqlParserRULE_alter_assembly_clause                   = 31
	TSqlParserRULE_alter_assembly_from_clause              = 32
	TSqlParserRULE_alter_assembly_from_clause_start        = 33
	TSqlParserRULE_alter_assembly_drop_clause              = 34
	TSqlParserRULE_alter_assembly_drop_multiple_files      = 35
	TSqlParserRULE_alter_assembly_drop                     = 36
	TSqlParserRULE_alter_assembly_add_clause               = 37
	TSqlParserRULE_alter_asssembly_add_clause_start        = 38
	TSqlParserRULE_alter_assembly_client_file_clause       = 39
	TSqlParserRULE_alter_assembly_file_name                = 40
	TSqlParserRULE_alter_assembly_file_bits                = 41
	TSqlParserRULE_alter_assembly_as                       = 42
	TSqlParserRULE_alter_assembly_with_clause              = 43
	TSqlParserRULE_alter_assembly_with                     = 44
	TSqlParserRULE_client_assembly_specifier               = 45
	TSqlParserRULE_assembly_option                         = 46
	TSqlParserRULE_network_file_share                      = 47
	TSqlParserRULE_network_computer                        = 48
	TSqlParserRULE_network_file_start                      = 49
	TSqlParserRULE_file_path                               = 50
	TSqlParserRULE_file_directory_path_separator           = 51
	TSqlParserRULE_local_file                              = 52
	TSqlParserRULE_local_drive                             = 53
	TSqlParserRULE_multiple_local_files                    = 54
	TSqlParserRULE_multiple_local_file_start               = 55
	TSqlParserRULE_create_assembly                         = 56
	TSqlParserRULE_drop_assembly                           = 57
	TSqlParserRULE_alter_asymmetric_key                    = 58
	TSqlParserRULE_alter_asymmetric_key_start              = 59
	TSqlParserRULE_asymmetric_key_option                   = 60
	TSqlParserRULE_asymmetric_key_option_start             = 61
	TSqlParserRULE_asymmetric_key_password_change_option   = 62
	TSqlParserRULE_create_asymmetric_key                   = 63
	TSqlParserRULE_drop_asymmetric_key                     = 64
	TSqlParserRULE_alter_authorization                     = 65
	TSqlParserRULE_authorization_grantee                   = 66
	TSqlParserRULE_entity_to                               = 67
	TSqlParserRULE_colon_colon                             = 68
	TSqlParserRULE_alter_authorization_start               = 69
	TSqlParserRULE_alter_authorization_for_sql_database    = 70
	TSqlParserRULE_alter_authorization_for_azure_dw        = 71
	TSqlParserRULE_alter_authorization_for_parallel_dw     = 72
	TSqlParserRULE_class_type                              = 73
	TSqlParserRULE_class_type_for_sql_database             = 74
	TSqlParserRULE_class_type_for_azure_dw                 = 75
	TSqlParserRULE_class_type_for_parallel_dw              = 76
	TSqlParserRULE_drop_availability_group                 = 77
	TSqlParserRULE_alter_availability_group                = 78
	TSqlParserRULE_alter_availability_group_start          = 79
	TSqlParserRULE_alter_availability_group_options        = 80
	TSqlParserRULE_create_or_alter_broker_priority         = 81
	TSqlParserRULE_drop_broker_priority                    = 82
	TSqlParserRULE_alter_certificate                       = 83
	TSqlParserRULE_alter_column_encryption_key             = 84
	TSqlParserRULE_create_column_encryption_key            = 85
	TSqlParserRULE_drop_certificate                        = 86
	TSqlParserRULE_drop_column_encryption_key              = 87
	TSqlParserRULE_drop_column_master_key                  = 88
	TSqlParserRULE_drop_contract                           = 89
	TSqlParserRULE_drop_credential                         = 90
	TSqlParserRULE_drop_cryptograhic_provider              = 91
	TSqlParserRULE_drop_database                           = 92
	TSqlParserRULE_drop_database_audit_specification       = 93
	TSqlParserRULE_drop_database_scoped_credential         = 94
	TSqlParserRULE_drop_default                            = 95
	TSqlParserRULE_drop_endpoint                           = 96
	TSqlParserRULE_drop_external_data_source               = 97
	TSqlParserRULE_drop_external_file_format               = 98
	TSqlParserRULE_drop_external_library                   = 99
	TSqlParserRULE_drop_external_resource_pool             = 100
	TSqlParserRULE_drop_external_table                     = 101
	TSqlParserRULE_drop_event_notifications                = 102
	TSqlParserRULE_drop_event_session                      = 103
	TSqlParserRULE_drop_fulltext_catalog                   = 104
	TSqlParserRULE_drop_fulltext_index                     = 105
	TSqlParserRULE_drop_fulltext_stoplist                  = 106
	TSqlParserRULE_drop_login                              = 107
	TSqlParserRULE_drop_master_key                         = 108
	TSqlParserRULE_drop_message_type                       = 109
	TSqlParserRULE_drop_partition_function                 = 110
	TSqlParserRULE_drop_partition_scheme                   = 111
	TSqlParserRULE_drop_queue                              = 112
	TSqlParserRULE_drop_remote_service_binding             = 113
	TSqlParserRULE_drop_resource_pool                      = 114
	TSqlParserRULE_drop_db_role                            = 115
	TSqlParserRULE_drop_route                              = 116
	TSqlParserRULE_drop_rule                               = 117
	TSqlParserRULE_drop_schema                             = 118
	TSqlParserRULE_drop_search_property_list               = 119
	TSqlParserRULE_drop_security_policy                    = 120
	TSqlParserRULE_drop_sequence                           = 121
	TSqlParserRULE_drop_server_audit                       = 122
	TSqlParserRULE_drop_server_audit_specification         = 123
	TSqlParserRULE_drop_server_role                        = 124
	TSqlParserRULE_drop_service                            = 125
	TSqlParserRULE_drop_signature                          = 126
	TSqlParserRULE_drop_statistics_name_azure_dw_and_pdw   = 127
	TSqlParserRULE_drop_symmetric_key                      = 128
	TSqlParserRULE_drop_synonym                            = 129
	TSqlParserRULE_drop_user                               = 130
	TSqlParserRULE_drop_workload_group                     = 131
	TSqlParserRULE_drop_xml_schema_collection              = 132
	TSqlParserRULE_disable_trigger                         = 133
	TSqlParserRULE_enable_trigger                          = 134
	TSqlParserRULE_truncate_table                          = 135
	TSqlParserRULE_create_column_master_key                = 136
	TSqlParserRULE_alter_credential                        = 137
	TSqlParserRULE_create_credential                       = 138
	TSqlParserRULE_alter_cryptographic_provider            = 139
	TSqlParserRULE_create_cryptographic_provider           = 140
	TSqlParserRULE_create_event_notification               = 141
	TSqlParserRULE_create_or_alter_event_session           = 142
	TSqlParserRULE_event_session_predicate_expression      = 143
	TSqlParserRULE_event_session_predicate_factor          = 144
	TSqlParserRULE_event_session_predicate_leaf            = 145
	TSqlParserRULE_alter_external_data_source              = 146
	TSqlParserRULE_alter_external_library                  = 147
	TSqlParserRULE_create_external_library                 = 148
	TSqlParserRULE_alter_external_resource_pool            = 149
	TSqlParserRULE_create_external_resource_pool           = 150
	TSqlParserRULE_alter_fulltext_catalog                  = 151
	TSqlParserRULE_create_fulltext_catalog                 = 152
	TSqlParserRULE_alter_fulltext_stoplist                 = 153
	TSqlParserRULE_create_fulltext_stoplist                = 154
	TSqlParserRULE_alter_login_sql_server                  = 155
	TSqlParserRULE_create_login_sql_server                 = 156
	TSqlParserRULE_alter_login_azure_sql                   = 157
	TSqlParserRULE_create_login_azure_sql                  = 158
	TSqlParserRULE_alter_login_azure_sql_dw_and_pdw        = 159
	TSqlParserRULE_create_login_pdw                        = 160
	TSqlParserRULE_alter_master_key_sql_server             = 161
	TSqlParserRULE_create_master_key_sql_server            = 162
	TSqlParserRULE_alter_master_key_azure_sql              = 163
	TSqlParserRULE_create_master_key_azure_sql             = 164
	TSqlParserRULE_alter_message_type                      = 165
	TSqlParserRULE_alter_partition_function                = 166
	TSqlParserRULE_alter_partition_scheme                  = 167
	TSqlParserRULE_alter_remote_service_binding            = 168
	TSqlParserRULE_create_remote_service_binding           = 169
	TSqlParserRULE_create_resource_pool                    = 170
	TSqlParserRULE_alter_resource_governor                 = 171
	TSqlParserRULE_alter_db_role                           = 172
	TSqlParserRULE_create_db_role                          = 173
	TSqlParserRULE_create_route                            = 174
	TSqlParserRULE_create_rule                             = 175
	TSqlParserRULE_alter_schema_sql                        = 176
	TSqlParserRULE_create_schema                           = 177
	TSqlParserRULE_create_schema_azure_sql_dw_and_pdw      = 178
	TSqlParserRULE_alter_schema_azure_sql_dw_and_pdw       = 179
	TSqlParserRULE_create_search_property_list             = 180
	TSqlParserRULE_create_security_policy                  = 181
	TSqlParserRULE_alter_sequence                          = 182
	TSqlParserRULE_create_sequence                         = 183
	TSqlParserRULE_alter_server_audit                      = 184
	TSqlParserRULE_create_server_audit                     = 185
	TSqlParserRULE_alter_server_audit_specification        = 186
	TSqlParserRULE_create_server_audit_specification       = 187
	TSqlParserRULE_alter_server_configuration              = 188
	TSqlParserRULE_alter_server_role                       = 189
	TSqlParserRULE_create_server_role                      = 190
	TSqlParserRULE_alter_server_role_pdw                   = 191
	TSqlParserRULE_alter_service                           = 192
	TSqlParserRULE_create_service                          = 193
	TSqlParserRULE_alter_service_master_key                = 194
	TSqlParserRULE_alter_symmetric_key                     = 195
	TSqlParserRULE_create_symmetric_key                    = 196
	TSqlParserRULE_create_synonym                          = 197
	TSqlParserRULE_alter_user                              = 198
	TSqlParserRULE_create_user                             = 199
	TSqlParserRULE_create_user_azure_sql_dw                = 200
	TSqlParserRULE_alter_user_azure_sql                    = 201
	TSqlParserRULE_alter_workload_group                    = 202
	TSqlParserRULE_create_workload_group                   = 203
	TSqlParserRULE_create_xml_schema_collection            = 204
	TSqlParserRULE_create_queue                            = 205
	TSqlParserRULE_queue_settings                          = 206
	TSqlParserRULE_alter_queue                             = 207
	TSqlParserRULE_queue_action                            = 208
	TSqlParserRULE_queue_rebuild_options                   = 209
	TSqlParserRULE_create_contract                         = 210
	TSqlParserRULE_conversation_statement                  = 211
	TSqlParserRULE_message_statement                       = 212
	TSqlParserRULE_merge_statement                         = 213
	TSqlParserRULE_merge_matched                           = 214
	TSqlParserRULE_merge_not_matched                       = 215
	TSqlParserRULE_delete_statement                        = 216
	TSqlParserRULE_delete_statement_from                   = 217
	TSqlParserRULE_insert_statement                        = 218
	TSqlParserRULE_insert_statement_value                  = 219
	TSqlParserRULE_receive_statement                       = 220
	TSqlParserRULE_select_statement                        = 221
	TSqlParserRULE_time                                    = 222
	TSqlParserRULE_update_statement                        = 223
	TSqlParserRULE_output_clause                           = 224
	TSqlParserRULE_output_dml_list_elem                    = 225
	TSqlParserRULE_output_column_name                      = 226
	TSqlParserRULE_create_database                         = 227
	TSqlParserRULE_create_index                            = 228
	TSqlParserRULE_create_or_alter_procedure               = 229
	TSqlParserRULE_create_or_alter_trigger                 = 230
	TSqlParserRULE_create_or_alter_dml_trigger             = 231
	TSqlParserRULE_dml_trigger_option                      = 232
	TSqlParserRULE_dml_trigger_operation                   = 233
	TSqlParserRULE_create_or_alter_ddl_trigger             = 234
	TSqlParserRULE_ddl_trigger_operation                   = 235
	TSqlParserRULE_create_or_alter_function                = 236
	TSqlParserRULE_func_body_returns_select                = 237
	TSqlParserRULE_func_body_returns_table                 = 238
	TSqlParserRULE_func_body_returns_scalar                = 239
	TSqlParserRULE_procedure_param                         = 240
	TSqlParserRULE_procedure_option                        = 241
	TSqlParserRULE_function_option                         = 242
	TSqlParserRULE_create_statistics                       = 243
	TSqlParserRULE_create_table                            = 244
	TSqlParserRULE_table_options                           = 245
	TSqlParserRULE_create_view                             = 246
	TSqlParserRULE_view_attribute                          = 247
	TSqlParserRULE_alter_table                             = 248
	TSqlParserRULE_alter_database                          = 249
	TSqlParserRULE_database_optionspec                     = 250
	TSqlParserRULE_auto_option                             = 251
	TSqlParserRULE_change_tracking_option                  = 252
	TSqlParserRULE_change_tracking_option_list             = 253
	TSqlParserRULE_containment_option                      = 254
	TSqlParserRULE_cursor_option                           = 255
	TSqlParserRULE_alter_endpoint                          = 256
	TSqlParserRULE_database_mirroring_option               = 257
	TSqlParserRULE_mirroring_set_option                    = 258
	TSqlParserRULE_mirroring_partner                       = 259
	TSqlParserRULE_mirroring_witness                       = 260
	TSqlParserRULE_witness_partner_equal                   = 261
	TSqlParserRULE_partner_option                          = 262
	TSqlParserRULE_witness_option                          = 263
	TSqlParserRULE_witness_server                          = 264
	TSqlParserRULE_partner_server                          = 265
	TSqlParserRULE_mirroring_host_port_seperator           = 266
	TSqlParserRULE_partner_server_tcp_prefix               = 267
	TSqlParserRULE_port_number                             = 268
	TSqlParserRULE_host                                    = 269
	TSqlParserRULE_date_correlation_optimization_option    = 270
	TSqlParserRULE_db_encryption_option                    = 271
	TSqlParserRULE_db_state_option                         = 272
	TSqlParserRULE_db_update_option                        = 273
	TSqlParserRULE_db_user_access_option                   = 274
	TSqlParserRULE_delayed_durability_option               = 275
	TSqlParserRULE_external_access_option                  = 276
	TSqlParserRULE_hadr_options                            = 277
	TSqlParserRULE_mixed_page_allocation_option            = 278
	TSqlParserRULE_parameterization_option                 = 279
	TSqlParserRULE_recovery_option                         = 280
	TSqlParserRULE_service_broker_option                   = 281
	TSqlParserRULE_snapshot_option                         = 282
	TSqlParserRULE_sql_option                              = 283
	TSqlParserRULE_target_recovery_time_option             = 284
	TSqlParserRULE_termination                             = 285
	TSqlParserRULE_drop_index                              = 286
	TSqlParserRULE_drop_relational_or_xml_or_spatial_index = 287
	TSqlParserRULE_drop_backward_compatible_index          = 288
	TSqlParserRULE_drop_procedure                          = 289
	TSqlParserRULE_drop_trigger                            = 290
	TSqlParserRULE_drop_dml_trigger                        = 291
	TSqlParserRULE_drop_ddl_trigger                        = 292
	TSqlParserRULE_drop_function                           = 293
	TSqlParserRULE_drop_statistics                         = 294
	TSqlParserRULE_drop_table                              = 295
	TSqlParserRULE_drop_view                               = 296
	TSqlParserRULE_create_type                             = 297
	TSqlParserRULE_drop_type                               = 298
	TSqlParserRULE_rowset_function_limited                 = 299
	TSqlParserRULE_openquery                               = 300
	TSqlParserRULE_opendatasource                          = 301
	TSqlParserRULE_declare_statement                       = 302
	TSqlParserRULE_cursor_statement                        = 303
	TSqlParserRULE_backup_database                         = 304
	TSqlParserRULE_backup_log                              = 305
	TSqlParserRULE_backup_certificate                      = 306
	TSqlParserRULE_backup_master_key                       = 307
	TSqlParserRULE_backup_service_master_key               = 308
	TSqlParserRULE_execute_statement                       = 309
	TSqlParserRULE_execute_statement_arg                   = 310
	TSqlParserRULE_execute_var_string                      = 311
	TSqlParserRULE_security_statement                      = 312
	TSqlParserRULE_create_certificate                      = 313
	TSqlParserRULE_existing_keys                           = 314
	TSqlParserRULE_private_key_options                     = 315
	TSqlParserRULE_generate_new_keys                       = 316
	TSqlParserRULE_date_options                            = 317
	TSqlParserRULE_open_key                                = 318
	TSqlParserRULE_close_key                               = 319
	TSqlParserRULE_create_key                              = 320
	TSqlParserRULE_key_options                             = 321
	TSqlParserRULE_algorithm                               = 322
	TSqlParserRULE_encryption_mechanism                    = 323
	TSqlParserRULE_decryption_mechanism                    = 324
	TSqlParserRULE_grant_permission                        = 325
	TSqlParserRULE_set_statement                           = 326
	TSqlParserRULE_transaction_statement                   = 327
	TSqlParserRULE_go_statement                            = 328
	TSqlParserRULE_use_statement                           = 329
	TSqlParserRULE_dbcc_clause                             = 330
	TSqlParserRULE_dbcc_options                            = 331
	TSqlParserRULE_execute_clause                          = 332
	TSqlParserRULE_declare_local                           = 333
	TSqlParserRULE_table_type_definition                   = 334
	TSqlParserRULE_xml_type_definition                     = 335
	TSqlParserRULE_xml_schema_collection                   = 336
	TSqlParserRULE_column_def_table_constraints            = 337
	TSqlParserRULE_column_def_table_constraint             = 338
	TSqlParserRULE_column_definition                       = 339
	TSqlParserRULE_column_constraint                       = 340
	TSqlParserRULE_table_constraint                        = 341
	TSqlParserRULE_on_delete                               = 342
	TSqlParserRULE_on_update                               = 343
	TSqlParserRULE_index_options                           = 344
	TSqlParserRULE_index_option                            = 345
	TSqlParserRULE_declare_cursor                          = 346
	TSqlParserRULE_declare_set_cursor_common               = 347
	TSqlParserRULE_declare_set_cursor_common_partial       = 348
	TSqlParserRULE_fetch_cursor                            = 349
	TSqlParserRULE_set_special                             = 350
	TSqlParserRULE_constant_LOCAL_ID                       = 351
	TSqlParserRULE_expression                              = 352
	TSqlParserRULE_primitive_expression                    = 353
	TSqlParserRULE_case_expression                         = 354
	TSqlParserRULE_unary_operator_expression               = 355
	TSqlParserRULE_bracket_expression                      = 356
	TSqlParserRULE_constant_expression                     = 357
	TSqlParserRULE_subquery                                = 358
	TSqlParserRULE_with_expression                         = 359
	TSqlParserRULE_common_table_expression                 = 360
	TSqlParserRULE_update_elem                             = 361
	TSqlParserRULE_search_condition_list                   = 362
	TSqlParserRULE_search_condition                        = 363
	TSqlParserRULE_search_condition_and                    = 364
	TSqlParserRULE_search_condition_not                    = 365
	TSqlParserRULE_predicate                               = 366
	TSqlParserRULE_query_expression                        = 367
	TSqlParserRULE_sql_union                               = 368
	TSqlParserRULE_query_specification                     = 369
	TSqlParserRULE_top_clause                              = 370
	TSqlParserRULE_top_percent                             = 371
	TSqlParserRULE_top_count                               = 372
	TSqlParserRULE_order_by_clause                         = 373
	TSqlParserRULE_for_clause                              = 374
	TSqlParserRULE_xml_common_directives                   = 375
	TSqlParserRULE_order_by_expression                     = 376
	TSqlParserRULE_group_by_item                           = 377
	TSqlParserRULE_option_clause                           = 378
	TSqlParserRULE_option                                  = 379
	TSqlParserRULE_optimize_for_arg                        = 380
	TSqlParserRULE_select_list                             = 381
	TSqlParserRULE_udt_method_arguments                    = 382
	TSqlParserRULE_asterisk                                = 383
	TSqlParserRULE_column_elem                             = 384
	TSqlParserRULE_udt_elem                                = 385
	TSqlParserRULE_expression_elem                         = 386
	TSqlParserRULE_select_list_elem                        = 387
	TSqlParserRULE_table_sources                           = 388
	TSqlParserRULE_table_source                            = 389
	TSqlParserRULE_table_source_item_joined                = 390
	TSqlParserRULE_table_source_item                       = 391
	TSqlParserRULE_open_xml                                = 392
	TSqlParserRULE_schema_declaration                      = 393
	TSqlParserRULE_column_declaration                      = 394
	TSqlParserRULE_change_table                            = 395
	TSqlParserRULE_join_part                               = 396
	TSqlParserRULE_pivot_clause                            = 397
	TSqlParserRULE_unpivot_clause                          = 398
	TSqlParserRULE_full_column_name_list                   = 399
	TSqlParserRULE_table_name_with_hint                    = 400
	TSqlParserRULE_rowset_function                         = 401
	TSqlParserRULE_bulk_option                             = 402
	TSqlParserRULE_derived_table                           = 403
	TSqlParserRULE_function_call                           = 404
	TSqlParserRULE_xml_data_type_methods                   = 405
	TSqlParserRULE_value_method                            = 406
	TSqlParserRULE_query_method                            = 407
	TSqlParserRULE_exist_method                            = 408
	TSqlParserRULE_modify_method                           = 409
	TSqlParserRULE_nodes_method                            = 410
	TSqlParserRULE_switch_section                          = 411
	TSqlParserRULE_switch_search_condition_section         = 412
	TSqlParserRULE_as_column_alias                         = 413
	TSqlParserRULE_as_table_alias                          = 414
	TSqlParserRULE_table_alias                             = 415
	TSqlParserRULE_with_table_hints                        = 416
	TSqlParserRULE_insert_with_table_hints                 = 417
	TSqlParserRULE_table_hint                              = 418
	TSqlParserRULE_index_value                             = 419
	TSqlParserRULE_column_alias_list                       = 420
	TSqlParserRULE_column_alias                            = 421
	TSqlParserRULE_table_value_constructor                 = 422
	TSqlParserRULE_expression_list                         = 423
	TSqlParserRULE_ranking_windowed_function               = 424
	TSqlParserRULE_aggregate_windowed_function             = 425
	TSqlParserRULE_analytic_windowed_function              = 426
	TSqlParserRULE_all_distinct_expression                 = 427
	TSqlParserRULE_over_clause                             = 428
	TSqlParserRULE_row_or_range_clause                     = 429
	TSqlParserRULE_window_frame_extent                     = 430
	TSqlParserRULE_window_frame_bound                      = 431
	TSqlParserRULE_window_frame_preceding                  = 432
	TSqlParserRULE_window_frame_following                  = 433
	TSqlParserRULE_create_database_option                  = 434
	TSqlParserRULE_database_filestream_option              = 435
	TSqlParserRULE_database_file_spec                      = 436
	TSqlParserRULE_file_group                              = 437
	TSqlParserRULE_file_spec                               = 438
	TSqlParserRULE_entity_name                             = 439
	TSqlParserRULE_entity_name_for_azure_dw                = 440
	TSqlParserRULE_entity_name_for_parallel_dw             = 441
	TSqlParserRULE_full_table_name                         = 442
	TSqlParserRULE_table_name                              = 443
	TSqlParserRULE_simple_name                             = 444
	TSqlParserRULE_func_proc_name                          = 445
	TSqlParserRULE_ddl_object                              = 446
	TSqlParserRULE_full_column_name                        = 447
	TSqlParserRULE_column_name_list_with_order             = 448
	TSqlParserRULE_column_name_list                        = 449
	TSqlParserRULE_cursor_name                             = 450
	TSqlParserRULE_on_off                                  = 451
	TSqlParserRULE_clustered                               = 452
	TSqlParserRULE_null_notnull                            = 453
	TSqlParserRULE_null_or_default                         = 454
	TSqlParserRULE_scalar_function_name                    = 455
	TSqlParserRULE_begin_conversation_timer                = 456
	TSqlParserRULE_begin_conversation_dialog               = 457
	TSqlParserRULE_contract_name                           = 458
	TSqlParserRULE_service_name                            = 459
	TSqlParserRULE_end_conversation                        = 460
	TSqlParserRULE_waitfor_conversation                    = 461
	TSqlParserRULE_get_conversation                        = 462
	TSqlParserRULE_queue_id                                = 463
	TSqlParserRULE_send_conversation                       = 464
	TSqlParserRULE_data_type                               = 465
	TSqlParserRULE_default_value                           = 466
	TSqlParserRULE_constant                                = 467
	TSqlParserRULE_sign                                    = 468
	TSqlParserRULE_id                                      = 469
	TSqlParserRULE_simple_id                               = 470
	TSqlParserRULE_comparison_operator                     = 471
	TSqlParserRULE_assignment_operator                     = 472
	TSqlParserRULE_file_size                               = 473
)

// ITsql_fileContext is an interface to support dynamic dispatch.
type ITsql_fileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTsql_fileContext differentiates from other interfaces.
	IsTsql_fileContext()
}

type Tsql_fileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTsql_fileContext() *Tsql_fileContext {
	var p = new(Tsql_fileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_tsql_file
	return p
}

func (*Tsql_fileContext) IsTsql_fileContext() {}

func NewTsql_fileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tsql_fileContext {
	var p = new(Tsql_fileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_tsql_file

	return p
}

func (s *Tsql_fileContext) GetParser() antlr.Parser { return s.parser }

func (s *Tsql_fileContext) EOF() antlr.TerminalNode {
	return s.GetToken(TSqlParserEOF, 0)
}

func (s *Tsql_fileContext) AllBatch() []IBatchContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBatchContext)(nil)).Elem())
	var tst = make([]IBatchContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBatchContext)
		}
	}

	return tst
}

func (s *Tsql_fileContext) Batch(i int) IBatchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBatchContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBatchContext)
}

func (s *Tsql_fileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tsql_fileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tsql_fileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTsql_file(s)
	}
}

func (s *Tsql_fileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTsql_file(s)
	}
}

func (s *Tsql_fileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTsql_file(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Tsql_file() (localctx ITsql_fileContext) {
	localctx = NewTsql_fileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, TSqlParserRULE_tsql_file)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(951)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<TSqlParserALTER)|(1<<TSqlParserBACKUP)|(1<<TSqlParserBEGIN)|(1<<TSqlParserBREAK))) != 0) || (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(TSqlParserCALLED-37))|(1<<(TSqlParserCLOSE-37))|(1<<(TSqlParserCOMMIT-37))|(1<<(TSqlParserCONTINUE-37)))) != 0) || (((_la-70)&-(0x1f+1)) == 0 && ((1<<uint((_la-70)))&((1<<(TSqlParserCREATE-70))|(1<<(TSqlParserDATA_COMPRESSION-70))|(1<<(TSqlParserDBCC-70))|(1<<(TSqlParserDEALLOCATE-70))|(1<<(TSqlParserDECLARE-70))|(1<<(TSqlParserDELETE-70))|(1<<(TSqlParserDROP-70)))) != 0) || (((_la-106)&-(0x1f+1)) == 0 && ((1<<uint((_la-106)))&((1<<(TSqlParserEND-106))|(1<<(TSqlParserEVENTDATA-106))|(1<<(TSqlParserEXECUTE-106))|(1<<(TSqlParserFETCH-106))|(1<<(TSqlParserFILENAME-106))|(1<<(TSqlParserFILLFACTOR-106))|(1<<(TSqlParserFORCESEEK-106)))) != 0) || (((_la-140)&-(0x1f+1)) == 0 && ((1<<uint((_la-140)))&((1<<(TSqlParserGET-140))|(1<<(TSqlParserGOTO-140))|(1<<(TSqlParserGRANT-140))|(1<<(TSqlParserIF-140))|(1<<(TSqlParserINSERT-140))|(1<<(TSqlParserKEY-140)))) != 0) || (((_la-186)&-(0x1f+1)) == 0 && ((1<<uint((_la-186)))&((1<<(TSqlParserMASTER-186))|(1<<(TSqlParserMAX_MEMORY-186))|(1<<(TSqlParserMERGE-186)))) != 0) || (((_la-224)&-(0x1f+1)) == 0 && ((1<<uint((_la-224)))&((1<<(TSqlParserOFFSETS-224))|(1<<(TSqlParserOPEN-224))|(1<<(TSqlParserPAGE-224))|(1<<(TSqlParserPRINT-224)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAISERROR-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserREVERT-258))|(1<<(TSqlParserROLLBACK-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSAVE-294))|(1<<(TSqlParserSELECT-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSET-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || (((_la-328)&-(0x1f+1)) == 0 && ((1<<uint((_la-328)))&((1<<(TSqlParserSTATE-328))|(1<<(TSqlParserTARGET-328))|(1<<(TSqlParserTRUNCATE-328)))) != 0) || (((_la-361)&-(0x1f+1)) == 0 && ((1<<uint((_la-361)))&((1<<(TSqlParserUPDATE-361))|(1<<(TSqlParserUSE-361))|(1<<(TSqlParserWAITFOR-361))|(1<<(TSqlParserWHILE-361))|(1<<(TSqlParserWITH-361))|(1<<(TSqlParserABSOLUTE-361))|(1<<(TSqlParserACTIVE-361))|(1<<(TSqlParserADDRESS-361)))) != 0) || (((_la-403)&-(0x1f+1)) == 0 && ((1<<uint((_la-403)))&((1<<(TSqlParserAPPLY-403))|(1<<(TSqlParserAUTO-403))|(1<<(TSqlParserAVAILABILITY-403))|(1<<(TSqlParserAVG-403))|(1<<(TSqlParserCALLER-403))|(1<<(TSqlParserCAST-403))|(1<<(TSqlParserCATCH-403)))) != 0) || (((_la-435)&-(0x1f+1)) == 0 && ((1<<uint((_la-435)))&((1<<(TSqlParserCHECKSUM_AGG-435))|(1<<(TSqlParserCOMMITTED-435))|(1<<(TSqlParserCONCAT-435))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-435))|(1<<(TSqlParserCONTROL-435))|(1<<(TSqlParserCOOKIE-435))|(1<<(TSqlParserCOUNT-435))|(1<<(TSqlParserCOUNTER-435))|(1<<(TSqlParserCOUNT_BIG-435)))) != 0) || (((_la-468)&-(0x1f+1)) == 0 && ((1<<uint((_la-468)))&((1<<(TSqlParserDELAY-468))|(1<<(TSqlParserDELETED-468))|(1<<(TSqlParserDENSE_RANK-468))|(1<<(TSqlParserDISABLE-468))|(1<<(TSqlParserDYNAMIC-468))|(1<<(TSqlParserENABLE-468))|(1<<(TSqlParserENCRYPTION-468))|(1<<(TSqlParserEXPAND-468)))) != 0) || (((_la-502)&-(0x1f+1)) == 0 && ((1<<uint((_la-502)))&((1<<(TSqlParserFAST-502))|(1<<(TSqlParserFAST_FORWARD-502))|(1<<(TSqlParserFIRST-502))|(1<<(TSqlParserFOLLOWING-502))|(1<<(TSqlParserFORCE-502))|(1<<(TSqlParserFORCED-502))|(1<<(TSqlParserFORWARD_ONLY-502))|(1<<(TSqlParserFULLSCAN-502))|(1<<(TSqlParserGLOBAL-502))|(1<<(TSqlParserGROUPING-502))|(1<<(TSqlParserGROUPING_ID-502))|(1<<(TSqlParserHASH-502)))) != 0) || (((_la-534)&-(0x1f+1)) == 0 && ((1<<uint((_la-534)))&((1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-534))|(1<<(TSqlParserIMPERSONATE-534))|(1<<(TSqlParserINPUT-534))|(1<<(TSqlParserINSENSITIVE-534))|(1<<(TSqlParserINSERTED-534))|(1<<(TSqlParserISOLATION-534))|(1<<(TSqlParserKEEP-534))|(1<<(TSqlParserKEEPFIXED-534))|(1<<(TSqlParserKEYSET-534))|(1<<(TSqlParserLAST-534))|(1<<(TSqlParserLEVEL-534))|(1<<(TSqlParserLOCAL-534))|(1<<(TSqlParserLOCATION-534))|(1<<(TSqlParserLOCK_ESCALATION-534))|(1<<(TSqlParserLOGIN-534))|(1<<(TSqlParserLOOP-534)))) != 0) || (((_la-568)&-(0x1f+1)) == 0 && ((1<<uint((_la-568)))&((1<<(TSqlParserMARK-568))|(1<<(TSqlParserMAX-568))|(1<<(TSqlParserMAX_ROLLOVER_FILES-568))|(1<<(TSqlParserMAXDOP-568))|(1<<(TSqlParserMAXRECURSION-568))|(1<<(TSqlParserMIN-568))|(1<<(TSqlParserMODIFY-568))|(1<<(TSqlParserNAME-568)))) != 0) || (((_la-601)&-(0x1f+1)) == 0 && ((1<<uint((_la-601)))&((1<<(TSqlParserNEXT-601))|(1<<(TSqlParserNOCOUNT-601))|(1<<(TSqlParserNOEXPAND-601))|(1<<(TSqlParserNORECOMPUTE-601))|(1<<(TSqlParserNTILE-601))|(1<<(TSqlParserNUMBER-601))|(1<<(TSqlParserOFFSET-601))|(1<<(TSqlParserONLINE-601))|(1<<(TSqlParserONLY-601))|(1<<(TSqlParserOPTIMISTIC-601))|(1<<(TSqlParserOPTIMIZE-601))|(1<<(TSqlParserOUT-601))|(1<<(TSqlParserOUTPUT-601))|(1<<(TSqlParserOWNER-601))|(1<<(TSqlParserPARAMETERIZATION-601))|(1<<(TSqlParserPARTITION-601))|(1<<(TSqlParserPATH-601)))) != 0) || (((_la-636)&-(0x1f+1)) == 0 && ((1<<uint((_la-636)))&((1<<(TSqlParserPRECEDING-636))|(1<<(TSqlParserPRIOR-636))|(1<<(TSqlParserPRIVILEGES-636))|(1<<(TSqlParserRANGE-636))|(1<<(TSqlParserRANK-636))|(1<<(TSqlParserREADONLY-636))|(1<<(TSqlParserREAD_ONLY-636))|(1<<(TSqlParserRECOMPILE-636))|(1<<(TSqlParserRELATIVE-636)))) != 0) || (((_la-672)&-(0x1f+1)) == 0 && ((1<<uint((_la-672)))&((1<<(TSqlParserREMOTE-672))|(1<<(TSqlParserREPEATABLE-672))|(1<<(TSqlParserROBUST-672))|(1<<(TSqlParserROOT-672))|(1<<(TSqlParserROW-672))|(1<<(TSqlParserROWGUID-672))|(1<<(TSqlParserROWS-672))|(1<<(TSqlParserROW_NUMBER-672))|(1<<(TSqlParserSAMPLE-672))|(1<<(TSqlParserSCHEMABINDING-672))|(1<<(TSqlParserSCROLL-672))|(1<<(TSqlParserSCROLL_LOCKS-672))|(1<<(TSqlParserSELF-672)))) != 0) || (((_la-704)&-(0x1f+1)) == 0 && ((1<<uint((_la-704)))&((1<<(TSqlParserSEND-704))|(1<<(TSqlParserSERIALIZABLE-704))|(1<<(TSqlParserSIMPLE-704))|(1<<(TSqlParserSIZE-704))|(1<<(TSqlParserSNAPSHOT-704))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-704))|(1<<(TSqlParserSTATIC-704))|(1<<(TSqlParserSTATS_STREAM-704))|(1<<(TSqlParserSTDEV-704))|(1<<(TSqlParserSTDEVP-704))|(1<<(TSqlParserSUM-704))|(1<<(TSqlParserTEXTIMAGE_ON-704)))) != 0) || (((_la-736)&-(0x1f+1)) == 0 && ((1<<uint((_la-736)))&((1<<(TSqlParserTHROW-736))|(1<<(TSqlParserTIES-736))|(1<<(TSqlParserTIME-736))|(1<<(TSqlParserTRY-736))|(1<<(TSqlParserTYPE-736))|(1<<(TSqlParserTYPE_WARNING-736))|(1<<(TSqlParserUNBOUNDED-736))|(1<<(TSqlParserUNCOMMITTED-736))|(1<<(TSqlParserUNKNOWN-736))|(1<<(TSqlParserUSING-736))|(1<<(TSqlParserVALUE-736))|(1<<(TSqlParserVAR-736))|(1<<(TSqlParserVARP-736))|(1<<(TSqlParserVIEWS-736))|(1<<(TSqlParserVIEW_METADATA-736))|(1<<(TSqlParserWORK-736))|(1<<(TSqlParserXML-736)))) != 0) || (((_la-768)&-(0x1f+1)) == 0 && ((1<<uint((_la-768)))&((1<<(TSqlParserXMLNAMESPACES-768))|(1<<(TSqlParserDOUBLE_QUOTE_ID-768))|(1<<(TSqlParserSQUARE_BRACKET_ID-768))|(1<<(TSqlParserID-768)))) != 0) || _la == TSqlParserLR_BRACKET || _la == TSqlParserSEMI {
		{
			p.SetState(948)
			p.Batch()
		}

		p.SetState(953)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(954)
		p.Match(TSqlParserEOF)
	}

	return localctx
}

// IBatchContext is an interface to support dynamic dispatch.
type IBatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBatchContext differentiates from other interfaces.
	IsBatchContext()
}

type BatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBatchContext() *BatchContext {
	var p = new(BatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_batch
	return p
}

func (*BatchContext) IsBatchContext() {}

func NewBatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BatchContext {
	var p = new(BatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_batch

	return p
}

func (s *BatchContext) GetParser() antlr.Parser { return s.parser }

func (s *BatchContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *BatchContext) AllGo_statement() []IGo_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGo_statementContext)(nil)).Elem())
	var tst = make([]IGo_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGo_statementContext)
		}
	}

	return tst
}

func (s *BatchContext) Go_statement(i int) IGo_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGo_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGo_statementContext)
}

func (s *BatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBatch(s)
	}
}

func (s *BatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBatch(s)
	}
}

func (s *BatchContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBatch(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Batch() (localctx IBatchContext) {
	localctx = NewBatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, TSqlParserRULE_batch)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(956)
		p.Sql_clauses()
	}
	p.SetState(960)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserGO {
		{
			p.SetState(957)
			p.Go_statement()
		}

		p.SetState(962)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISql_clausesContext is an interface to support dynamic dispatch.
type ISql_clausesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clausesContext differentiates from other interfaces.
	IsSql_clausesContext()
}

type Sql_clausesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clausesContext() *Sql_clausesContext {
	var p = new(Sql_clausesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_sql_clauses
	return p
}

func (*Sql_clausesContext) IsSql_clausesContext() {}

func NewSql_clausesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clausesContext {
	var p = new(Sql_clausesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_sql_clauses

	return p
}

func (s *Sql_clausesContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clausesContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *Sql_clausesContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *Sql_clausesContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSEMI)
}

func (s *Sql_clausesContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSEMI, i)
}

func (s *Sql_clausesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clausesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clausesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSql_clauses(s)
	}
}

func (s *Sql_clausesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSql_clauses(s)
	}
}

func (s *Sql_clausesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSql_clauses(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Sql_clauses() (localctx ISql_clausesContext) {
	localctx = NewSql_clausesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, TSqlParserRULE_sql_clauses)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(967)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(963)
				p.Sql_clause()
			}
			p.SetState(965)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(964)
					p.Match(TSqlParserSEMI)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(969)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_clauseContext is an interface to support dynamic dispatch.
type ISql_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_clauseContext differentiates from other interfaces.
	IsSql_clauseContext()
}

type Sql_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_clauseContext() *Sql_clauseContext {
	var p = new(Sql_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_sql_clause
	return p
}

func (*Sql_clauseContext) IsSql_clauseContext() {}

func NewSql_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_clauseContext {
	var p = new(Sql_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_sql_clause

	return p
}

func (s *Sql_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_clauseContext) Dml_clause() IDml_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDml_clauseContext)
}

func (s *Sql_clauseContext) Ddl_clause() IDdl_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_clauseContext)
}

func (s *Sql_clauseContext) Cfl_statement() ICfl_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICfl_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICfl_statementContext)
}

func (s *Sql_clauseContext) Dbcc_clause() IDbcc_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbcc_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbcc_clauseContext)
}

func (s *Sql_clauseContext) Empty_statement() IEmpty_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmpty_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmpty_statementContext)
}

func (s *Sql_clauseContext) Another_statement() IAnother_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnother_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnother_statementContext)
}

func (s *Sql_clauseContext) Backup_statement() IBackup_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_statementContext)
}

func (s *Sql_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSql_clause(s)
	}
}

func (s *Sql_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSql_clause(s)
	}
}

func (s *Sql_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSql_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Sql_clause() (localctx ISql_clauseContext) {
	localctx = NewSql_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, TSqlParserRULE_sql_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(971)
			p.Dml_clause()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(972)
			p.Ddl_clause()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(973)
			p.Cfl_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(974)
			p.Dbcc_clause()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(975)
			p.Empty_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(976)
			p.Another_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(977)
			p.Backup_statement()
		}

	}

	return localctx
}

// IDml_clauseContext is an interface to support dynamic dispatch.
type IDml_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_clauseContext differentiates from other interfaces.
	IsDml_clauseContext()
}

type Dml_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_clauseContext() *Dml_clauseContext {
	var p = new(Dml_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_dml_clause
	return p
}

func (*Dml_clauseContext) IsDml_clauseContext() {}

func NewDml_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_clauseContext {
	var p = new(Dml_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_dml_clause

	return p
}

func (s *Dml_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_clauseContext) Merge_statement() IMerge_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMerge_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMerge_statementContext)
}

func (s *Dml_clauseContext) Delete_statement() IDelete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_clauseContext) Insert_statement() IInsert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_clauseContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Dml_clauseContext) Update_statement() IUpdate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDml_clause(s)
	}
}

func (s *Dml_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDml_clause(s)
	}
}

func (s *Dml_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDml_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Dml_clause() (localctx IDml_clauseContext) {
	localctx = NewDml_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, TSqlParserRULE_dml_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(985)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(980)
			p.Merge_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(981)
			p.Delete_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(982)
			p.Insert_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(983)
			p.Select_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(984)
			p.Update_statement()
		}

	}

	return localctx
}

// IDdl_clauseContext is an interface to support dynamic dispatch.
type IDdl_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_clauseContext differentiates from other interfaces.
	IsDdl_clauseContext()
}

type Ddl_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_clauseContext() *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_ddl_clause
	return p
}

func (*Ddl_clauseContext) IsDdl_clauseContext() {}

func NewDdl_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_clauseContext {
	var p = new(Ddl_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_ddl_clause

	return p
}

func (s *Ddl_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_clauseContext) Alter_application_role() IAlter_application_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_application_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_application_roleContext)
}

func (s *Ddl_clauseContext) Alter_assembly() IAlter_assemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assemblyContext)
}

func (s *Ddl_clauseContext) Alter_asymmetric_key() IAlter_asymmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_asymmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_asymmetric_keyContext)
}

func (s *Ddl_clauseContext) Alter_authorization() IAlter_authorizationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorizationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorizationContext)
}

func (s *Ddl_clauseContext) Alter_authorization_for_azure_dw() IAlter_authorization_for_azure_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_for_azure_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_for_azure_dwContext)
}

func (s *Ddl_clauseContext) Alter_authorization_for_parallel_dw() IAlter_authorization_for_parallel_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_for_parallel_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_for_parallel_dwContext)
}

func (s *Ddl_clauseContext) Alter_authorization_for_sql_database() IAlter_authorization_for_sql_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_for_sql_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_for_sql_databaseContext)
}

func (s *Ddl_clauseContext) Alter_availability_group() IAlter_availability_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_availability_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_availability_groupContext)
}

func (s *Ddl_clauseContext) Alter_certificate() IAlter_certificateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_certificateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_certificateContext)
}

func (s *Ddl_clauseContext) Alter_column_encryption_key() IAlter_column_encryption_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_column_encryption_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_column_encryption_keyContext)
}

func (s *Ddl_clauseContext) Alter_credential() IAlter_credentialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_credentialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_credentialContext)
}

func (s *Ddl_clauseContext) Alter_cryptographic_provider() IAlter_cryptographic_providerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_cryptographic_providerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_cryptographic_providerContext)
}

func (s *Ddl_clauseContext) Alter_database() IAlter_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_databaseContext)
}

func (s *Ddl_clauseContext) Alter_db_role() IAlter_db_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_db_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_db_roleContext)
}

func (s *Ddl_clauseContext) Alter_endpoint() IAlter_endpointContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_endpointContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_endpointContext)
}

func (s *Ddl_clauseContext) Create_or_alter_event_session() ICreate_or_alter_event_sessionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_event_sessionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_event_sessionContext)
}

func (s *Ddl_clauseContext) Alter_external_data_source() IAlter_external_data_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_external_data_sourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_external_data_sourceContext)
}

func (s *Ddl_clauseContext) Alter_external_library() IAlter_external_libraryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_external_libraryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_external_libraryContext)
}

func (s *Ddl_clauseContext) Alter_external_resource_pool() IAlter_external_resource_poolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_external_resource_poolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_external_resource_poolContext)
}

func (s *Ddl_clauseContext) Alter_fulltext_catalog() IAlter_fulltext_catalogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_fulltext_catalogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_fulltext_catalogContext)
}

func (s *Ddl_clauseContext) Alter_fulltext_stoplist() IAlter_fulltext_stoplistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_fulltext_stoplistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_fulltext_stoplistContext)
}

func (s *Ddl_clauseContext) Alter_login_azure_sql() IAlter_login_azure_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_login_azure_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_login_azure_sqlContext)
}

func (s *Ddl_clauseContext) Alter_login_azure_sql_dw_and_pdw() IAlter_login_azure_sql_dw_and_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_login_azure_sql_dw_and_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_login_azure_sql_dw_and_pdwContext)
}

func (s *Ddl_clauseContext) Alter_login_sql_server() IAlter_login_sql_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_login_sql_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_login_sql_serverContext)
}

func (s *Ddl_clauseContext) Alter_master_key_azure_sql() IAlter_master_key_azure_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_master_key_azure_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_master_key_azure_sqlContext)
}

func (s *Ddl_clauseContext) Alter_master_key_sql_server() IAlter_master_key_sql_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_master_key_sql_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_master_key_sql_serverContext)
}

func (s *Ddl_clauseContext) Alter_message_type() IAlter_message_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_message_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_message_typeContext)
}

func (s *Ddl_clauseContext) Alter_partition_function() IAlter_partition_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_partition_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_partition_functionContext)
}

func (s *Ddl_clauseContext) Alter_partition_scheme() IAlter_partition_schemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_partition_schemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_partition_schemeContext)
}

func (s *Ddl_clauseContext) Alter_remote_service_binding() IAlter_remote_service_bindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_remote_service_bindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_remote_service_bindingContext)
}

func (s *Ddl_clauseContext) Alter_resource_governor() IAlter_resource_governorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_resource_governorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_resource_governorContext)
}

func (s *Ddl_clauseContext) Alter_schema_azure_sql_dw_and_pdw() IAlter_schema_azure_sql_dw_and_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_schema_azure_sql_dw_and_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_schema_azure_sql_dw_and_pdwContext)
}

func (s *Ddl_clauseContext) Alter_schema_sql() IAlter_schema_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_schema_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_schema_sqlContext)
}

func (s *Ddl_clauseContext) Alter_sequence() IAlter_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_sequenceContext)
}

func (s *Ddl_clauseContext) Alter_server_audit() IAlter_server_auditContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_auditContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_auditContext)
}

func (s *Ddl_clauseContext) Alter_server_audit_specification() IAlter_server_audit_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_audit_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_audit_specificationContext)
}

func (s *Ddl_clauseContext) Alter_server_configuration() IAlter_server_configurationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_configurationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_configurationContext)
}

func (s *Ddl_clauseContext) Alter_server_role() IAlter_server_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_roleContext)
}

func (s *Ddl_clauseContext) Alter_server_role_pdw() IAlter_server_role_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_server_role_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_server_role_pdwContext)
}

func (s *Ddl_clauseContext) Alter_service() IAlter_serviceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_serviceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_serviceContext)
}

func (s *Ddl_clauseContext) Alter_service_master_key() IAlter_service_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_service_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_service_master_keyContext)
}

func (s *Ddl_clauseContext) Alter_symmetric_key() IAlter_symmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_symmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_symmetric_keyContext)
}

func (s *Ddl_clauseContext) Alter_table() IAlter_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tableContext)
}

func (s *Ddl_clauseContext) Alter_user() IAlter_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_userContext)
}

func (s *Ddl_clauseContext) Alter_user_azure_sql() IAlter_user_azure_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_user_azure_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_user_azure_sqlContext)
}

func (s *Ddl_clauseContext) Alter_workload_group() IAlter_workload_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_workload_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_workload_groupContext)
}

func (s *Ddl_clauseContext) Create_application_role() ICreate_application_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_application_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_application_roleContext)
}

func (s *Ddl_clauseContext) Create_assembly() ICreate_assemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_assemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_assemblyContext)
}

func (s *Ddl_clauseContext) Create_asymmetric_key() ICreate_asymmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_asymmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_asymmetric_keyContext)
}

func (s *Ddl_clauseContext) Create_column_encryption_key() ICreate_column_encryption_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_column_encryption_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_column_encryption_keyContext)
}

func (s *Ddl_clauseContext) Create_column_master_key() ICreate_column_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_column_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_column_master_keyContext)
}

func (s *Ddl_clauseContext) Create_credential() ICreate_credentialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_credentialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_credentialContext)
}

func (s *Ddl_clauseContext) Create_cryptographic_provider() ICreate_cryptographic_providerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_cryptographic_providerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_cryptographic_providerContext)
}

func (s *Ddl_clauseContext) Create_database() ICreate_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_databaseContext)
}

func (s *Ddl_clauseContext) Create_db_role() ICreate_db_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_db_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_db_roleContext)
}

func (s *Ddl_clauseContext) Create_event_notification() ICreate_event_notificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_event_notificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_event_notificationContext)
}

func (s *Ddl_clauseContext) Create_external_library() ICreate_external_libraryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_external_libraryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_external_libraryContext)
}

func (s *Ddl_clauseContext) Create_external_resource_pool() ICreate_external_resource_poolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_external_resource_poolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_external_resource_poolContext)
}

func (s *Ddl_clauseContext) Create_fulltext_catalog() ICreate_fulltext_catalogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fulltext_catalogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fulltext_catalogContext)
}

func (s *Ddl_clauseContext) Create_fulltext_stoplist() ICreate_fulltext_stoplistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_fulltext_stoplistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_fulltext_stoplistContext)
}

func (s *Ddl_clauseContext) Create_index() ICreate_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_indexContext)
}

func (s *Ddl_clauseContext) Create_login_azure_sql() ICreate_login_azure_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_login_azure_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_login_azure_sqlContext)
}

func (s *Ddl_clauseContext) Create_login_pdw() ICreate_login_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_login_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_login_pdwContext)
}

func (s *Ddl_clauseContext) Create_login_sql_server() ICreate_login_sql_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_login_sql_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_login_sql_serverContext)
}

func (s *Ddl_clauseContext) Create_master_key_azure_sql() ICreate_master_key_azure_sqlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_master_key_azure_sqlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_master_key_azure_sqlContext)
}

func (s *Ddl_clauseContext) Create_master_key_sql_server() ICreate_master_key_sql_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_master_key_sql_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_master_key_sql_serverContext)
}

func (s *Ddl_clauseContext) Create_or_alter_broker_priority() ICreate_or_alter_broker_priorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_broker_priorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_broker_priorityContext)
}

func (s *Ddl_clauseContext) Create_or_alter_function() ICreate_or_alter_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_functionContext)
}

func (s *Ddl_clauseContext) Create_or_alter_procedure() ICreate_or_alter_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_procedureContext)
}

func (s *Ddl_clauseContext) Create_or_alter_trigger() ICreate_or_alter_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_triggerContext)
}

func (s *Ddl_clauseContext) Create_remote_service_binding() ICreate_remote_service_bindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_remote_service_bindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_remote_service_bindingContext)
}

func (s *Ddl_clauseContext) Create_resource_pool() ICreate_resource_poolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_resource_poolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_resource_poolContext)
}

func (s *Ddl_clauseContext) Create_route() ICreate_routeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_routeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_routeContext)
}

func (s *Ddl_clauseContext) Create_rule() ICreate_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_ruleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_ruleContext)
}

func (s *Ddl_clauseContext) Create_schema() ICreate_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_schemaContext)
}

func (s *Ddl_clauseContext) Create_schema_azure_sql_dw_and_pdw() ICreate_schema_azure_sql_dw_and_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_schema_azure_sql_dw_and_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_schema_azure_sql_dw_and_pdwContext)
}

func (s *Ddl_clauseContext) Create_search_property_list() ICreate_search_property_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_search_property_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_search_property_listContext)
}

func (s *Ddl_clauseContext) Create_security_policy() ICreate_security_policyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_security_policyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_security_policyContext)
}

func (s *Ddl_clauseContext) Create_sequence() ICreate_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_sequenceContext)
}

func (s *Ddl_clauseContext) Create_server_audit() ICreate_server_auditContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_server_auditContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_server_auditContext)
}

func (s *Ddl_clauseContext) Create_server_audit_specification() ICreate_server_audit_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_server_audit_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_server_audit_specificationContext)
}

func (s *Ddl_clauseContext) Create_server_role() ICreate_server_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_server_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_server_roleContext)
}

func (s *Ddl_clauseContext) Create_service() ICreate_serviceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_serviceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_serviceContext)
}

func (s *Ddl_clauseContext) Create_statistics() ICreate_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_statisticsContext)
}

func (s *Ddl_clauseContext) Create_symmetric_key() ICreate_symmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_symmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_symmetric_keyContext)
}

func (s *Ddl_clauseContext) Create_synonym() ICreate_synonymContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_synonymContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_synonymContext)
}

func (s *Ddl_clauseContext) Create_table() ICreate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Ddl_clauseContext) Create_type() ICreate_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_typeContext)
}

func (s *Ddl_clauseContext) Create_user() ICreate_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_userContext)
}

func (s *Ddl_clauseContext) Create_user_azure_sql_dw() ICreate_user_azure_sql_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_user_azure_sql_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_user_azure_sql_dwContext)
}

func (s *Ddl_clauseContext) Create_view() ICreate_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Ddl_clauseContext) Create_workload_group() ICreate_workload_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_workload_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_workload_groupContext)
}

func (s *Ddl_clauseContext) Create_xml_schema_collection() ICreate_xml_schema_collectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_xml_schema_collectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_xml_schema_collectionContext)
}

func (s *Ddl_clauseContext) Drop_aggregate() IDrop_aggregateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_aggregateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_aggregateContext)
}

func (s *Ddl_clauseContext) Drop_application_role() IDrop_application_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_application_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_application_roleContext)
}

func (s *Ddl_clauseContext) Drop_assembly() IDrop_assemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_assemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_assemblyContext)
}

func (s *Ddl_clauseContext) Drop_asymmetric_key() IDrop_asymmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_asymmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_asymmetric_keyContext)
}

func (s *Ddl_clauseContext) Drop_availability_group() IDrop_availability_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_availability_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_availability_groupContext)
}

func (s *Ddl_clauseContext) Drop_broker_priority() IDrop_broker_priorityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_broker_priorityContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_broker_priorityContext)
}

func (s *Ddl_clauseContext) Drop_certificate() IDrop_certificateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_certificateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_certificateContext)
}

func (s *Ddl_clauseContext) Drop_column_encryption_key() IDrop_column_encryption_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_column_encryption_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_column_encryption_keyContext)
}

func (s *Ddl_clauseContext) Drop_column_master_key() IDrop_column_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_column_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_column_master_keyContext)
}

func (s *Ddl_clauseContext) Drop_contract() IDrop_contractContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_contractContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_contractContext)
}

func (s *Ddl_clauseContext) Drop_credential() IDrop_credentialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_credentialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_credentialContext)
}

func (s *Ddl_clauseContext) Drop_cryptograhic_provider() IDrop_cryptograhic_providerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_cryptograhic_providerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_cryptograhic_providerContext)
}

func (s *Ddl_clauseContext) Drop_database() IDrop_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_databaseContext)
}

func (s *Ddl_clauseContext) Drop_database_audit_specification() IDrop_database_audit_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_database_audit_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_database_audit_specificationContext)
}

func (s *Ddl_clauseContext) Drop_database_scoped_credential() IDrop_database_scoped_credentialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_database_scoped_credentialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_database_scoped_credentialContext)
}

func (s *Ddl_clauseContext) Drop_db_role() IDrop_db_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_db_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_db_roleContext)
}

func (s *Ddl_clauseContext) Drop_default() IDrop_defaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_defaultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_defaultContext)
}

func (s *Ddl_clauseContext) Drop_endpoint() IDrop_endpointContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_endpointContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_endpointContext)
}

func (s *Ddl_clauseContext) Drop_event_notifications() IDrop_event_notificationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_event_notificationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_event_notificationsContext)
}

func (s *Ddl_clauseContext) Drop_event_session() IDrop_event_sessionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_event_sessionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_event_sessionContext)
}

func (s *Ddl_clauseContext) Drop_external_data_source() IDrop_external_data_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_external_data_sourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_external_data_sourceContext)
}

func (s *Ddl_clauseContext) Drop_external_file_format() IDrop_external_file_formatContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_external_file_formatContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_external_file_formatContext)
}

func (s *Ddl_clauseContext) Drop_external_library() IDrop_external_libraryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_external_libraryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_external_libraryContext)
}

func (s *Ddl_clauseContext) Drop_external_resource_pool() IDrop_external_resource_poolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_external_resource_poolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_external_resource_poolContext)
}

func (s *Ddl_clauseContext) Drop_external_table() IDrop_external_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_external_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_external_tableContext)
}

func (s *Ddl_clauseContext) Drop_fulltext_catalog() IDrop_fulltext_catalogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_fulltext_catalogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_fulltext_catalogContext)
}

func (s *Ddl_clauseContext) Drop_fulltext_index() IDrop_fulltext_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_fulltext_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_fulltext_indexContext)
}

func (s *Ddl_clauseContext) Drop_fulltext_stoplist() IDrop_fulltext_stoplistContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_fulltext_stoplistContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_fulltext_stoplistContext)
}

func (s *Ddl_clauseContext) Drop_function() IDrop_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_functionContext)
}

func (s *Ddl_clauseContext) Drop_index() IDrop_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_indexContext)
}

func (s *Ddl_clauseContext) Drop_login() IDrop_loginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_loginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_loginContext)
}

func (s *Ddl_clauseContext) Drop_master_key() IDrop_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_master_keyContext)
}

func (s *Ddl_clauseContext) Drop_message_type() IDrop_message_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_message_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_message_typeContext)
}

func (s *Ddl_clauseContext) Drop_partition_function() IDrop_partition_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_partition_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_partition_functionContext)
}

func (s *Ddl_clauseContext) Drop_partition_scheme() IDrop_partition_schemeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_partition_schemeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_partition_schemeContext)
}

func (s *Ddl_clauseContext) Drop_procedure() IDrop_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_procedureContext)
}

func (s *Ddl_clauseContext) Drop_queue() IDrop_queueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_queueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_queueContext)
}

func (s *Ddl_clauseContext) Drop_remote_service_binding() IDrop_remote_service_bindingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_remote_service_bindingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_remote_service_bindingContext)
}

func (s *Ddl_clauseContext) Drop_resource_pool() IDrop_resource_poolContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_resource_poolContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_resource_poolContext)
}

func (s *Ddl_clauseContext) Drop_route() IDrop_routeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_routeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_routeContext)
}

func (s *Ddl_clauseContext) Drop_rule() IDrop_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_ruleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_ruleContext)
}

func (s *Ddl_clauseContext) Drop_schema() IDrop_schemaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_schemaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_schemaContext)
}

func (s *Ddl_clauseContext) Drop_search_property_list() IDrop_search_property_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_search_property_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_search_property_listContext)
}

func (s *Ddl_clauseContext) Drop_security_policy() IDrop_security_policyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_security_policyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_security_policyContext)
}

func (s *Ddl_clauseContext) Drop_sequence() IDrop_sequenceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_sequenceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_sequenceContext)
}

func (s *Ddl_clauseContext) Drop_server_audit() IDrop_server_auditContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_server_auditContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_server_auditContext)
}

func (s *Ddl_clauseContext) Drop_server_audit_specification() IDrop_server_audit_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_server_audit_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_server_audit_specificationContext)
}

func (s *Ddl_clauseContext) Drop_server_role() IDrop_server_roleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_server_roleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_server_roleContext)
}

func (s *Ddl_clauseContext) Drop_service() IDrop_serviceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_serviceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_serviceContext)
}

func (s *Ddl_clauseContext) Drop_signature() IDrop_signatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_signatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_signatureContext)
}

func (s *Ddl_clauseContext) Drop_statistics() IDrop_statisticsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statisticsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statisticsContext)
}

func (s *Ddl_clauseContext) Drop_statistics_name_azure_dw_and_pdw() IDrop_statistics_name_azure_dw_and_pdwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_statistics_name_azure_dw_and_pdwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_statistics_name_azure_dw_and_pdwContext)
}

func (s *Ddl_clauseContext) Drop_symmetric_key() IDrop_symmetric_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_symmetric_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_symmetric_keyContext)
}

func (s *Ddl_clauseContext) Drop_synonym() IDrop_synonymContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_synonymContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_synonymContext)
}

func (s *Ddl_clauseContext) Drop_table() IDrop_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tableContext)
}

func (s *Ddl_clauseContext) Drop_trigger() IDrop_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_triggerContext)
}

func (s *Ddl_clauseContext) Drop_type() IDrop_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_typeContext)
}

func (s *Ddl_clauseContext) Drop_user() IDrop_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_userContext)
}

func (s *Ddl_clauseContext) Drop_view() IDrop_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_viewContext)
}

func (s *Ddl_clauseContext) Drop_workload_group() IDrop_workload_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_workload_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_workload_groupContext)
}

func (s *Ddl_clauseContext) Drop_xml_schema_collection() IDrop_xml_schema_collectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_xml_schema_collectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_xml_schema_collectionContext)
}

func (s *Ddl_clauseContext) Disable_trigger() IDisable_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDisable_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDisable_triggerContext)
}

func (s *Ddl_clauseContext) Enable_trigger() IEnable_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnable_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnable_triggerContext)
}

func (s *Ddl_clauseContext) Truncate_table() ITruncate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncate_tableContext)
}

func (s *Ddl_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDdl_clause(s)
	}
}

func (s *Ddl_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDdl_clause(s)
	}
}

func (s *Ddl_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDdl_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Ddl_clause() (localctx IDdl_clauseContext) {
	localctx = NewDdl_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, TSqlParserRULE_ddl_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1144)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(987)
			p.Alter_application_role()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(988)
			p.Alter_assembly()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(989)
			p.Alter_asymmetric_key()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(990)
			p.Alter_authorization()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(991)
			p.Alter_authorization_for_azure_dw()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(992)
			p.Alter_authorization_for_parallel_dw()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(993)
			p.Alter_authorization_for_sql_database()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(994)
			p.Alter_availability_group()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(995)
			p.Alter_certificate()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(996)
			p.Alter_column_encryption_key()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(997)
			p.Alter_credential()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(998)
			p.Alter_cryptographic_provider()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(999)
			p.Alter_database()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1000)
			p.Alter_db_role()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1001)
			p.Alter_endpoint()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1002)
			p.Create_or_alter_event_session()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1003)
			p.Alter_external_data_source()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1004)
			p.Alter_external_library()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1005)
			p.Alter_external_resource_pool()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1006)
			p.Alter_fulltext_catalog()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1007)
			p.Alter_fulltext_stoplist()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1008)
			p.Alter_login_azure_sql()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1009)
			p.Alter_login_azure_sql_dw_and_pdw()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1010)
			p.Alter_login_sql_server()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1011)
			p.Alter_master_key_azure_sql()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(1012)
			p.Alter_master_key_sql_server()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(1013)
			p.Alter_message_type()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(1014)
			p.Alter_partition_function()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(1015)
			p.Alter_partition_scheme()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(1016)
			p.Alter_remote_service_binding()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(1017)
			p.Alter_resource_governor()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(1018)
			p.Alter_schema_azure_sql_dw_and_pdw()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(1019)
			p.Alter_schema_sql()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(1020)
			p.Alter_sequence()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(1021)
			p.Alter_server_audit()
		}

	case 36:
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(1022)
			p.Alter_server_audit_specification()
		}

	case 37:
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(1023)
			p.Alter_server_configuration()
		}

	case 38:
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(1024)
			p.Alter_server_role()
		}

	case 39:
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(1025)
			p.Alter_server_role_pdw()
		}

	case 40:
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(1026)
			p.Alter_service()
		}

	case 41:
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(1027)
			p.Alter_service_master_key()
		}

	case 42:
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(1028)
			p.Alter_symmetric_key()
		}

	case 43:
		p.EnterOuterAlt(localctx, 43)
		{
			p.SetState(1029)
			p.Alter_table()
		}

	case 44:
		p.EnterOuterAlt(localctx, 44)
		{
			p.SetState(1030)
			p.Alter_user()
		}

	case 45:
		p.EnterOuterAlt(localctx, 45)
		{
			p.SetState(1031)
			p.Alter_user_azure_sql()
		}

	case 46:
		p.EnterOuterAlt(localctx, 46)
		{
			p.SetState(1032)
			p.Alter_workload_group()
		}

	case 47:
		p.EnterOuterAlt(localctx, 47)
		{
			p.SetState(1033)
			p.Create_application_role()
		}

	case 48:
		p.EnterOuterAlt(localctx, 48)
		{
			p.SetState(1034)
			p.Create_assembly()
		}

	case 49:
		p.EnterOuterAlt(localctx, 49)
		{
			p.SetState(1035)
			p.Create_asymmetric_key()
		}

	case 50:
		p.EnterOuterAlt(localctx, 50)
		{
			p.SetState(1036)
			p.Create_column_encryption_key()
		}

	case 51:
		p.EnterOuterAlt(localctx, 51)
		{
			p.SetState(1037)
			p.Create_column_master_key()
		}

	case 52:
		p.EnterOuterAlt(localctx, 52)
		{
			p.SetState(1038)
			p.Create_credential()
		}

	case 53:
		p.EnterOuterAlt(localctx, 53)
		{
			p.SetState(1039)
			p.Create_cryptographic_provider()
		}

	case 54:
		p.EnterOuterAlt(localctx, 54)
		{
			p.SetState(1040)
			p.Create_database()
		}

	case 55:
		p.EnterOuterAlt(localctx, 55)
		{
			p.SetState(1041)
			p.Create_db_role()
		}

	case 56:
		p.EnterOuterAlt(localctx, 56)
		{
			p.SetState(1042)
			p.Create_event_notification()
		}

	case 57:
		p.EnterOuterAlt(localctx, 57)
		{
			p.SetState(1043)
			p.Create_external_library()
		}

	case 58:
		p.EnterOuterAlt(localctx, 58)
		{
			p.SetState(1044)
			p.Create_external_resource_pool()
		}

	case 59:
		p.EnterOuterAlt(localctx, 59)
		{
			p.SetState(1045)
			p.Create_fulltext_catalog()
		}

	case 60:
		p.EnterOuterAlt(localctx, 60)
		{
			p.SetState(1046)
			p.Create_fulltext_stoplist()
		}

	case 61:
		p.EnterOuterAlt(localctx, 61)
		{
			p.SetState(1047)
			p.Create_index()
		}

	case 62:
		p.EnterOuterAlt(localctx, 62)
		{
			p.SetState(1048)
			p.Create_login_azure_sql()
		}

	case 63:
		p.EnterOuterAlt(localctx, 63)
		{
			p.SetState(1049)
			p.Create_login_pdw()
		}

	case 64:
		p.EnterOuterAlt(localctx, 64)
		{
			p.SetState(1050)
			p.Create_login_sql_server()
		}

	case 65:
		p.EnterOuterAlt(localctx, 65)
		{
			p.SetState(1051)
			p.Create_master_key_azure_sql()
		}

	case 66:
		p.EnterOuterAlt(localctx, 66)
		{
			p.SetState(1052)
			p.Create_master_key_sql_server()
		}

	case 67:
		p.EnterOuterAlt(localctx, 67)
		{
			p.SetState(1053)
			p.Create_or_alter_broker_priority()
		}

	case 68:
		p.EnterOuterAlt(localctx, 68)
		{
			p.SetState(1054)
			p.Create_or_alter_function()
		}

	case 69:
		p.EnterOuterAlt(localctx, 69)
		{
			p.SetState(1055)
			p.Create_or_alter_procedure()
		}

	case 70:
		p.EnterOuterAlt(localctx, 70)
		{
			p.SetState(1056)
			p.Create_or_alter_trigger()
		}

	case 71:
		p.EnterOuterAlt(localctx, 71)
		{
			p.SetState(1057)
			p.Create_remote_service_binding()
		}

	case 72:
		p.EnterOuterAlt(localctx, 72)
		{
			p.SetState(1058)
			p.Create_resource_pool()
		}

	case 73:
		p.EnterOuterAlt(localctx, 73)
		{
			p.SetState(1059)
			p.Create_route()
		}

	case 74:
		p.EnterOuterAlt(localctx, 74)
		{
			p.SetState(1060)
			p.Create_rule()
		}

	case 75:
		p.EnterOuterAlt(localctx, 75)
		{
			p.SetState(1061)
			p.Create_schema()
		}

	case 76:
		p.EnterOuterAlt(localctx, 76)
		{
			p.SetState(1062)
			p.Create_schema_azure_sql_dw_and_pdw()
		}

	case 77:
		p.EnterOuterAlt(localctx, 77)
		{
			p.SetState(1063)
			p.Create_search_property_list()
		}

	case 78:
		p.EnterOuterAlt(localctx, 78)
		{
			p.SetState(1064)
			p.Create_security_policy()
		}

	case 79:
		p.EnterOuterAlt(localctx, 79)
		{
			p.SetState(1065)
			p.Create_sequence()
		}

	case 80:
		p.EnterOuterAlt(localctx, 80)
		{
			p.SetState(1066)
			p.Create_server_audit()
		}

	case 81:
		p.EnterOuterAlt(localctx, 81)
		{
			p.SetState(1067)
			p.Create_server_audit_specification()
		}

	case 82:
		p.EnterOuterAlt(localctx, 82)
		{
			p.SetState(1068)
			p.Create_server_role()
		}

	case 83:
		p.EnterOuterAlt(localctx, 83)
		{
			p.SetState(1069)
			p.Create_service()
		}

	case 84:
		p.EnterOuterAlt(localctx, 84)
		{
			p.SetState(1070)
			p.Create_statistics()
		}

	case 85:
		p.EnterOuterAlt(localctx, 85)
		{
			p.SetState(1071)
			p.Create_symmetric_key()
		}

	case 86:
		p.EnterOuterAlt(localctx, 86)
		{
			p.SetState(1072)
			p.Create_synonym()
		}

	case 87:
		p.EnterOuterAlt(localctx, 87)
		{
			p.SetState(1073)
			p.Create_table()
		}

	case 88:
		p.EnterOuterAlt(localctx, 88)
		{
			p.SetState(1074)
			p.Create_type()
		}

	case 89:
		p.EnterOuterAlt(localctx, 89)
		{
			p.SetState(1075)
			p.Create_user()
		}

	case 90:
		p.EnterOuterAlt(localctx, 90)
		{
			p.SetState(1076)
			p.Create_user_azure_sql_dw()
		}

	case 91:
		p.EnterOuterAlt(localctx, 91)
		{
			p.SetState(1077)
			p.Create_view()
		}

	case 92:
		p.EnterOuterAlt(localctx, 92)
		{
			p.SetState(1078)
			p.Create_workload_group()
		}

	case 93:
		p.EnterOuterAlt(localctx, 93)
		{
			p.SetState(1079)
			p.Create_xml_schema_collection()
		}

	case 94:
		p.EnterOuterAlt(localctx, 94)
		{
			p.SetState(1080)
			p.Drop_aggregate()
		}

	case 95:
		p.EnterOuterAlt(localctx, 95)
		{
			p.SetState(1081)
			p.Drop_application_role()
		}

	case 96:
		p.EnterOuterAlt(localctx, 96)
		{
			p.SetState(1082)
			p.Drop_assembly()
		}

	case 97:
		p.EnterOuterAlt(localctx, 97)
		{
			p.SetState(1083)
			p.Drop_asymmetric_key()
		}

	case 98:
		p.EnterOuterAlt(localctx, 98)
		{
			p.SetState(1084)
			p.Drop_availability_group()
		}

	case 99:
		p.EnterOuterAlt(localctx, 99)
		{
			p.SetState(1085)
			p.Drop_broker_priority()
		}

	case 100:
		p.EnterOuterAlt(localctx, 100)
		{
			p.SetState(1086)
			p.Drop_certificate()
		}

	case 101:
		p.EnterOuterAlt(localctx, 101)
		{
			p.SetState(1087)
			p.Drop_column_encryption_key()
		}

	case 102:
		p.EnterOuterAlt(localctx, 102)
		{
			p.SetState(1088)
			p.Drop_column_master_key()
		}

	case 103:
		p.EnterOuterAlt(localctx, 103)
		{
			p.SetState(1089)
			p.Drop_contract()
		}

	case 104:
		p.EnterOuterAlt(localctx, 104)
		{
			p.SetState(1090)
			p.Drop_credential()
		}

	case 105:
		p.EnterOuterAlt(localctx, 105)
		{
			p.SetState(1091)
			p.Drop_cryptograhic_provider()
		}

	case 106:
		p.EnterOuterAlt(localctx, 106)
		{
			p.SetState(1092)
			p.Drop_database()
		}

	case 107:
		p.EnterOuterAlt(localctx, 107)
		{
			p.SetState(1093)
			p.Drop_database_audit_specification()
		}

	case 108:
		p.EnterOuterAlt(localctx, 108)
		{
			p.SetState(1094)
			p.Drop_database_scoped_credential()
		}

	case 109:
		p.EnterOuterAlt(localctx, 109)
		{
			p.SetState(1095)
			p.Drop_db_role()
		}

	case 110:
		p.EnterOuterAlt(localctx, 110)
		{
			p.SetState(1096)
			p.Drop_default()
		}

	case 111:
		p.EnterOuterAlt(localctx, 111)
		{
			p.SetState(1097)
			p.Drop_endpoint()
		}

	case 112:
		p.EnterOuterAlt(localctx, 112)
		{
			p.SetState(1098)
			p.Drop_event_notifications()
		}

	case 113:
		p.EnterOuterAlt(localctx, 113)
		{
			p.SetState(1099)
			p.Drop_event_session()
		}

	case 114:
		p.EnterOuterAlt(localctx, 114)
		{
			p.SetState(1100)
			p.Drop_external_data_source()
		}

	case 115:
		p.EnterOuterAlt(localctx, 115)
		{
			p.SetState(1101)
			p.Drop_external_file_format()
		}

	case 116:
		p.EnterOuterAlt(localctx, 116)
		{
			p.SetState(1102)
			p.Drop_external_library()
		}

	case 117:
		p.EnterOuterAlt(localctx, 117)
		{
			p.SetState(1103)
			p.Drop_external_resource_pool()
		}

	case 118:
		p.EnterOuterAlt(localctx, 118)
		{
			p.SetState(1104)
			p.Drop_external_table()
		}

	case 119:
		p.EnterOuterAlt(localctx, 119)
		{
			p.SetState(1105)
			p.Drop_fulltext_catalog()
		}

	case 120:
		p.EnterOuterAlt(localctx, 120)
		{
			p.SetState(1106)
			p.Drop_fulltext_index()
		}

	case 121:
		p.EnterOuterAlt(localctx, 121)
		{
			p.SetState(1107)
			p.Drop_fulltext_stoplist()
		}

	case 122:
		p.EnterOuterAlt(localctx, 122)
		{
			p.SetState(1108)
			p.Drop_function()
		}

	case 123:
		p.EnterOuterAlt(localctx, 123)
		{
			p.SetState(1109)
			p.Drop_index()
		}

	case 124:
		p.EnterOuterAlt(localctx, 124)
		{
			p.SetState(1110)
			p.Drop_login()
		}

	case 125:
		p.EnterOuterAlt(localctx, 125)
		{
			p.SetState(1111)
			p.Drop_master_key()
		}

	case 126:
		p.EnterOuterAlt(localctx, 126)
		{
			p.SetState(1112)
			p.Drop_message_type()
		}

	case 127:
		p.EnterOuterAlt(localctx, 127)
		{
			p.SetState(1113)
			p.Drop_partition_function()
		}

	case 128:
		p.EnterOuterAlt(localctx, 128)
		{
			p.SetState(1114)
			p.Drop_partition_scheme()
		}

	case 129:
		p.EnterOuterAlt(localctx, 129)
		{
			p.SetState(1115)
			p.Drop_procedure()
		}

	case 130:
		p.EnterOuterAlt(localctx, 130)
		{
			p.SetState(1116)
			p.Drop_queue()
		}

	case 131:
		p.EnterOuterAlt(localctx, 131)
		{
			p.SetState(1117)
			p.Drop_remote_service_binding()
		}

	case 132:
		p.EnterOuterAlt(localctx, 132)
		{
			p.SetState(1118)
			p.Drop_resource_pool()
		}

	case 133:
		p.EnterOuterAlt(localctx, 133)
		{
			p.SetState(1119)
			p.Drop_route()
		}

	case 134:
		p.EnterOuterAlt(localctx, 134)
		{
			p.SetState(1120)
			p.Drop_rule()
		}

	case 135:
		p.EnterOuterAlt(localctx, 135)
		{
			p.SetState(1121)
			p.Drop_schema()
		}

	case 136:
		p.EnterOuterAlt(localctx, 136)
		{
			p.SetState(1122)
			p.Drop_search_property_list()
		}

	case 137:
		p.EnterOuterAlt(localctx, 137)
		{
			p.SetState(1123)
			p.Drop_security_policy()
		}

	case 138:
		p.EnterOuterAlt(localctx, 138)
		{
			p.SetState(1124)
			p.Drop_sequence()
		}

	case 139:
		p.EnterOuterAlt(localctx, 139)
		{
			p.SetState(1125)
			p.Drop_server_audit()
		}

	case 140:
		p.EnterOuterAlt(localctx, 140)
		{
			p.SetState(1126)
			p.Drop_server_audit_specification()
		}

	case 141:
		p.EnterOuterAlt(localctx, 141)
		{
			p.SetState(1127)
			p.Drop_server_role()
		}

	case 142:
		p.EnterOuterAlt(localctx, 142)
		{
			p.SetState(1128)
			p.Drop_service()
		}

	case 143:
		p.EnterOuterAlt(localctx, 143)
		{
			p.SetState(1129)
			p.Drop_signature()
		}

	case 144:
		p.EnterOuterAlt(localctx, 144)
		{
			p.SetState(1130)
			p.Drop_statistics()
		}

	case 145:
		p.EnterOuterAlt(localctx, 145)
		{
			p.SetState(1131)
			p.Drop_statistics_name_azure_dw_and_pdw()
		}

	case 146:
		p.EnterOuterAlt(localctx, 146)
		{
			p.SetState(1132)
			p.Drop_symmetric_key()
		}

	case 147:
		p.EnterOuterAlt(localctx, 147)
		{
			p.SetState(1133)
			p.Drop_synonym()
		}

	case 148:
		p.EnterOuterAlt(localctx, 148)
		{
			p.SetState(1134)
			p.Drop_table()
		}

	case 149:
		p.EnterOuterAlt(localctx, 149)
		{
			p.SetState(1135)
			p.Drop_trigger()
		}

	case 150:
		p.EnterOuterAlt(localctx, 150)
		{
			p.SetState(1136)
			p.Drop_type()
		}

	case 151:
		p.EnterOuterAlt(localctx, 151)
		{
			p.SetState(1137)
			p.Drop_user()
		}

	case 152:
		p.EnterOuterAlt(localctx, 152)
		{
			p.SetState(1138)
			p.Drop_view()
		}

	case 153:
		p.EnterOuterAlt(localctx, 153)
		{
			p.SetState(1139)
			p.Drop_workload_group()
		}

	case 154:
		p.EnterOuterAlt(localctx, 154)
		{
			p.SetState(1140)
			p.Drop_xml_schema_collection()
		}

	case 155:
		p.EnterOuterAlt(localctx, 155)
		{
			p.SetState(1141)
			p.Disable_trigger()
		}

	case 156:
		p.EnterOuterAlt(localctx, 156)
		{
			p.SetState(1142)
			p.Enable_trigger()
		}

	case 157:
		p.EnterOuterAlt(localctx, 157)
		{
			p.SetState(1143)
			p.Truncate_table()
		}

	}

	return localctx
}

// IBackup_statementContext is an interface to support dynamic dispatch.
type IBackup_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBackup_statementContext differentiates from other interfaces.
	IsBackup_statementContext()
}

type Backup_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBackup_statementContext() *Backup_statementContext {
	var p = new(Backup_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_statement
	return p
}

func (*Backup_statementContext) IsBackup_statementContext() {}

func NewBackup_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_statementContext {
	var p = new(Backup_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_statement

	return p
}

func (s *Backup_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_statementContext) Backup_database() IBackup_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_databaseContext)
}

func (s *Backup_statementContext) Backup_log() IBackup_logContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_logContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_logContext)
}

func (s *Backup_statementContext) Backup_certificate() IBackup_certificateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_certificateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_certificateContext)
}

func (s *Backup_statementContext) Backup_master_key() IBackup_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_master_keyContext)
}

func (s *Backup_statementContext) Backup_service_master_key() IBackup_service_master_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBackup_service_master_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBackup_service_master_keyContext)
}

func (s *Backup_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_statement(s)
	}
}

func (s *Backup_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_statement(s)
	}
}

func (s *Backup_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_statement() (localctx IBackup_statementContext) {
	localctx = NewBackup_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, TSqlParserRULE_backup_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1146)
			p.Backup_database()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1147)
			p.Backup_log()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1148)
			p.Backup_certificate()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1149)
			p.Backup_master_key()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1150)
			p.Backup_service_master_key()
		}

	}

	return localctx
}

// ICfl_statementContext is an interface to support dynamic dispatch.
type ICfl_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCfl_statementContext differentiates from other interfaces.
	IsCfl_statementContext()
}

type Cfl_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCfl_statementContext() *Cfl_statementContext {
	var p = new(Cfl_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_cfl_statement
	return p
}

func (*Cfl_statementContext) IsCfl_statementContext() {}

func NewCfl_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cfl_statementContext {
	var p = new(Cfl_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_cfl_statement

	return p
}

func (s *Cfl_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cfl_statementContext) Block_statement() IBlock_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_statementContext)
}

func (s *Cfl_statementContext) Break_statement() IBreak_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreak_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreak_statementContext)
}

func (s *Cfl_statementContext) Continue_statement() IContinue_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_statementContext)
}

func (s *Cfl_statementContext) Goto_statement() IGoto_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_statementContext)
}

func (s *Cfl_statementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *Cfl_statementContext) Return_statement() IReturn_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *Cfl_statementContext) Throw_statement() IThrow_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_statementContext)
}

func (s *Cfl_statementContext) Try_catch_statement() ITry_catch_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITry_catch_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITry_catch_statementContext)
}

func (s *Cfl_statementContext) Waitfor_statement() IWaitfor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaitfor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaitfor_statementContext)
}

func (s *Cfl_statementContext) While_statement() IWhile_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhile_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhile_statementContext)
}

func (s *Cfl_statementContext) Print_statement() IPrint_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrint_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrint_statementContext)
}

func (s *Cfl_statementContext) Raiseerror_statement() IRaiseerror_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRaiseerror_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRaiseerror_statementContext)
}

func (s *Cfl_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cfl_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cfl_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCfl_statement(s)
	}
}

func (s *Cfl_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCfl_statement(s)
	}
}

func (s *Cfl_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCfl_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Cfl_statement() (localctx ICfl_statementContext) {
	localctx = NewCfl_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, TSqlParserRULE_cfl_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1165)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1153)
			p.Block_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1154)
			p.Break_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1155)
			p.Continue_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1156)
			p.Goto_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1157)
			p.If_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1158)
			p.Return_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1159)
			p.Throw_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1160)
			p.Try_catch_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1161)
			p.Waitfor_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1162)
			p.While_statement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1163)
			p.Print_statement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1164)
			p.Raiseerror_statement()
		}

	}

	return localctx
}

// IBlock_statementContext is an interface to support dynamic dispatch.
type IBlock_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_statementContext differentiates from other interfaces.
	IsBlock_statementContext()
}

type Block_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_statementContext() *Block_statementContext {
	var p = new(Block_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_block_statement
	return p
}

func (*Block_statementContext) IsBlock_statementContext() {}

func NewBlock_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_statementContext {
	var p = new(Block_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_block_statement

	return p
}

func (s *Block_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Block_statementContext) END() antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, 0)
}

func (s *Block_statementContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Block_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBlock_statement(s)
	}
}

func (s *Block_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBlock_statement(s)
	}
}

func (s *Block_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBlock_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Block_statement() (localctx IBlock_statementContext) {
	localctx = NewBlock_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, TSqlParserRULE_block_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1167)
		p.Match(TSqlParserBEGIN)
	}
	p.SetState(1169)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1168)
			p.Match(TSqlParserSEMI)
		}

	}
	p.SetState(1172)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1171)
			p.Sql_clauses()
		}

	}
	{
		p.SetState(1174)
		p.Match(TSqlParserEND)
	}
	p.SetState(1176)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1175)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IBreak_statementContext is an interface to support dynamic dispatch.
type IBreak_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreak_statementContext differentiates from other interfaces.
	IsBreak_statementContext()
}

type Break_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreak_statementContext() *Break_statementContext {
	var p = new(Break_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_break_statement
	return p
}

func (*Break_statementContext) IsBreak_statementContext() {}

func NewBreak_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Break_statementContext {
	var p = new(Break_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_break_statement

	return p
}

func (s *Break_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Break_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(TSqlParserBREAK, 0)
}

func (s *Break_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Break_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Break_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBreak_statement(s)
	}
}

func (s *Break_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBreak_statement(s)
	}
}

func (s *Break_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBreak_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Break_statement() (localctx IBreak_statementContext) {
	localctx = NewBreak_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, TSqlParserRULE_break_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1178)
		p.Match(TSqlParserBREAK)
	}
	p.SetState(1180)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1179)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IContinue_statementContext is an interface to support dynamic dispatch.
type IContinue_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinue_statementContext differentiates from other interfaces.
	IsContinue_statementContext()
}

type Continue_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_statementContext() *Continue_statementContext {
	var p = new(Continue_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_continue_statement
	return p
}

func (*Continue_statementContext) IsContinue_statementContext() {}

func NewContinue_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_statementContext {
	var p = new(Continue_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_continue_statement

	return p
}

func (s *Continue_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE, 0)
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

func (s *Continue_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitContinue_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Continue_statement() (localctx IContinue_statementContext) {
	localctx = NewContinue_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, TSqlParserRULE_continue_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1182)
		p.Match(TSqlParserCONTINUE)
	}
	p.SetState(1184)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1183)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IGoto_statementContext is an interface to support dynamic dispatch.
type IGoto_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoto_statementContext differentiates from other interfaces.
	IsGoto_statementContext()
}

type Goto_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoto_statementContext() *Goto_statementContext {
	var p = new(Goto_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_goto_statement
	return p
}

func (*Goto_statementContext) IsGoto_statementContext() {}

func NewGoto_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Goto_statementContext {
	var p = new(Goto_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_goto_statement

	return p
}

func (s *Goto_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Goto_statementContext) GOTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserGOTO, 0)
}

func (s *Goto_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Goto_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Goto_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGoto_statement(s)
	}
}

func (s *Goto_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGoto_statement(s)
	}
}

func (s *Goto_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGoto_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Goto_statement() (localctx IGoto_statementContext) {
	localctx = NewGoto_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, TSqlParserRULE_goto_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1196)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserGOTO:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1186)
			p.Match(TSqlParserGOTO)
		}
		{
			p.SetState(1187)
			p.Id()
		}
		p.SetState(1189)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1188)
				p.Match(TSqlParserSEMI)
			}

		}

	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1191)
			p.Id()
		}
		{
			p.SetState(1192)
			p.Match(TSqlParserCOLON)
		}
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1193)
				p.Match(TSqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_return_statement
	return p
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURN, 0)
}

func (s *Return_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (s *Return_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitReturn_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Return_statement() (localctx IReturn_statementContext) {
	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, TSqlParserRULE_return_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1198)
		p.Match(TSqlParserRETURN)
	}
	p.SetState(1200)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1199)
			p.expression(0)
		}

	}
	p.SetState(1203)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1202)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *If_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *If_statementContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *If_statementContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserELSE, 0)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (s *If_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitIf_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, TSqlParserRULE_if_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1205)
		p.Match(TSqlParserIF)
	}
	{
		p.SetState(1206)
		p.Search_condition()
	}
	{
		p.SetState(1207)
		p.Sql_clause()
	}
	p.SetState(1210)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1208)
			p.Match(TSqlParserELSE)
		}
		{
			p.SetState(1209)
			p.Sql_clause()
		}

	}
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1212)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IThrow_statementContext is an interface to support dynamic dispatch.
type IThrow_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_statementContext differentiates from other interfaces.
	IsThrow_statementContext()
}

type Throw_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_statementContext() *Throw_statementContext {
	var p = new(Throw_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_throw_statement
	return p
}

func (*Throw_statementContext) IsThrow_statementContext() {}

func NewThrow_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_statementContext {
	var p = new(Throw_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_throw_statement

	return p
}

func (s *Throw_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_statementContext) THROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserTHROW, 0)
}

func (s *Throw_statementContext) Throw_error_number() IThrow_error_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_error_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_error_numberContext)
}

func (s *Throw_statementContext) Throw_message() IThrow_messageContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_messageContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_messageContext)
}

func (s *Throw_statementContext) Throw_state() IThrow_stateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_stateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_stateContext)
}

func (s *Throw_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterThrow_statement(s)
	}
}

func (s *Throw_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitThrow_statement(s)
	}
}

func (s *Throw_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitThrow_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Throw_statement() (localctx IThrow_statementContext) {
	localctx = NewThrow_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, TSqlParserRULE_throw_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1215)
		p.Match(TSqlParserTHROW)
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLOCAL_ID || _la == TSqlParserDECIMAL {
		{
			p.SetState(1216)
			p.Throw_error_number()
		}
		{
			p.SetState(1217)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(1218)
			p.Throw_message()
		}
		{
			p.SetState(1219)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(1220)
			p.Throw_state()
		}

	}
	p.SetState(1225)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1224)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IThrow_error_numberContext is an interface to support dynamic dispatch.
type IThrow_error_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_error_numberContext differentiates from other interfaces.
	IsThrow_error_numberContext()
}

type Throw_error_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_error_numberContext() *Throw_error_numberContext {
	var p = new(Throw_error_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_throw_error_number
	return p
}

func (*Throw_error_numberContext) IsThrow_error_numberContext() {}

func NewThrow_error_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_error_numberContext {
	var p = new(Throw_error_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_throw_error_number

	return p
}

func (s *Throw_error_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_error_numberContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Throw_error_numberContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Throw_error_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_error_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_error_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterThrow_error_number(s)
	}
}

func (s *Throw_error_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitThrow_error_number(s)
	}
}

func (s *Throw_error_numberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitThrow_error_number(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Throw_error_number() (localctx IThrow_error_numberContext) {
	localctx = NewThrow_error_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, TSqlParserRULE_throw_error_number)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1227)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserDECIMAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IThrow_messageContext is an interface to support dynamic dispatch.
type IThrow_messageContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_messageContext differentiates from other interfaces.
	IsThrow_messageContext()
}

type Throw_messageContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_messageContext() *Throw_messageContext {
	var p = new(Throw_messageContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_throw_message
	return p
}

func (*Throw_messageContext) IsThrow_messageContext() {}

func NewThrow_messageContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_messageContext {
	var p = new(Throw_messageContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_throw_message

	return p
}

func (s *Throw_messageContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_messageContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Throw_messageContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Throw_messageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_messageContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_messageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterThrow_message(s)
	}
}

func (s *Throw_messageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitThrow_message(s)
	}
}

func (s *Throw_messageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitThrow_message(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Throw_message() (localctx IThrow_messageContext) {
	localctx = NewThrow_messageContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, TSqlParserRULE_throw_message)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1229)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IThrow_stateContext is an interface to support dynamic dispatch.
type IThrow_stateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_stateContext differentiates from other interfaces.
	IsThrow_stateContext()
}

type Throw_stateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_stateContext() *Throw_stateContext {
	var p = new(Throw_stateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_throw_state
	return p
}

func (*Throw_stateContext) IsThrow_stateContext() {}

func NewThrow_stateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_stateContext {
	var p = new(Throw_stateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_throw_state

	return p
}

func (s *Throw_stateContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_stateContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Throw_stateContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Throw_stateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_stateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_stateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterThrow_state(s)
	}
}

func (s *Throw_stateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitThrow_state(s)
	}
}

func (s *Throw_stateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitThrow_state(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Throw_state() (localctx IThrow_stateContext) {
	localctx = NewThrow_stateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, TSqlParserRULE_throw_state)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1231)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserDECIMAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITry_catch_statementContext is an interface to support dynamic dispatch.
type ITry_catch_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTry_clauses returns the try_clauses rule contexts.
	GetTry_clauses() ISql_clausesContext

	// GetCatch_clauses returns the catch_clauses rule contexts.
	GetCatch_clauses() ISql_clausesContext

	// SetTry_clauses sets the try_clauses rule contexts.
	SetTry_clauses(ISql_clausesContext)

	// SetCatch_clauses sets the catch_clauses rule contexts.
	SetCatch_clauses(ISql_clausesContext)

	// IsTry_catch_statementContext differentiates from other interfaces.
	IsTry_catch_statementContext()
}

type Try_catch_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	try_clauses   ISql_clausesContext
	catch_clauses ISql_clausesContext
}

func NewEmptyTry_catch_statementContext() *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_try_catch_statement
	return p
}

func (*Try_catch_statementContext) IsTry_catch_statementContext() {}

func NewTry_catch_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Try_catch_statementContext {
	var p = new(Try_catch_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_try_catch_statement

	return p
}

func (s *Try_catch_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Try_catch_statementContext) GetTry_clauses() ISql_clausesContext { return s.try_clauses }

func (s *Try_catch_statementContext) GetCatch_clauses() ISql_clausesContext { return s.catch_clauses }

func (s *Try_catch_statementContext) SetTry_clauses(v ISql_clausesContext) { s.try_clauses = v }

func (s *Try_catch_statementContext) SetCatch_clauses(v ISql_clausesContext) { s.catch_clauses = v }

func (s *Try_catch_statementContext) AllBEGIN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBEGIN)
}

func (s *Try_catch_statementContext) BEGIN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, i)
}

func (s *Try_catch_statementContext) AllTRY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTRY)
}

func (s *Try_catch_statementContext) TRY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTRY, i)
}

func (s *Try_catch_statementContext) AllEND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEND)
}

func (s *Try_catch_statementContext) END(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, i)
}

func (s *Try_catch_statementContext) AllCATCH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCATCH)
}

func (s *Try_catch_statementContext) CATCH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCATCH, i)
}

func (s *Try_catch_statementContext) AllSql_clauses() []ISql_clausesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem())
	var tst = make([]ISql_clausesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clausesContext)
		}
	}

	return tst
}

func (s *Try_catch_statementContext) Sql_clauses(i int) ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Try_catch_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_catch_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Try_catch_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTry_catch_statement(s)
	}
}

func (s *Try_catch_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTry_catch_statement(s)
	}
}

func (s *Try_catch_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTry_catch_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Try_catch_statement() (localctx ITry_catch_statementContext) {
	localctx = NewTry_catch_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, TSqlParserRULE_try_catch_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1233)
		p.Match(TSqlParserBEGIN)
	}
	{
		p.SetState(1234)
		p.Match(TSqlParserTRY)
	}
	p.SetState(1236)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1235)
			p.Match(TSqlParserSEMI)
		}

	}
	p.SetState(1239)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1238)

			var _x = p.Sql_clauses()

			localctx.(*Try_catch_statementContext).try_clauses = _x
		}

	}
	{
		p.SetState(1241)
		p.Match(TSqlParserEND)
	}
	{
		p.SetState(1242)
		p.Match(TSqlParserTRY)
	}
	p.SetState(1244)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSEMI {
		{
			p.SetState(1243)
			p.Match(TSqlParserSEMI)
		}

	}
	{
		p.SetState(1246)
		p.Match(TSqlParserBEGIN)
	}
	{
		p.SetState(1247)
		p.Match(TSqlParserCATCH)
	}
	p.SetState(1249)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1248)
			p.Match(TSqlParserSEMI)
		}

	}
	p.SetState(1252)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1251)

			var _x = p.Sql_clauses()

			localctx.(*Try_catch_statementContext).catch_clauses = _x
		}

	}
	{
		p.SetState(1254)
		p.Match(TSqlParserEND)
	}
	{
		p.SetState(1255)
		p.Match(TSqlParserCATCH)
	}
	p.SetState(1257)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1256)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IWaitfor_statementContext is an interface to support dynamic dispatch.
type IWaitfor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWaitfor_statementContext differentiates from other interfaces.
	IsWaitfor_statementContext()
}

type Waitfor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWaitfor_statementContext() *Waitfor_statementContext {
	var p = new(Waitfor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_waitfor_statement
	return p
}

func (*Waitfor_statementContext) IsWaitfor_statementContext() {}

func NewWaitfor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Waitfor_statementContext {
	var p = new(Waitfor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_waitfor_statement

	return p
}

func (s *Waitfor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Waitfor_statementContext) WAITFOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserWAITFOR, 0)
}

func (s *Waitfor_statementContext) Receive_statement() IReceive_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceive_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceive_statementContext)
}

func (s *Waitfor_statementContext) Time() ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Waitfor_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Waitfor_statementContext) DELAY() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELAY, 0)
}

func (s *Waitfor_statementContext) TIME() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIME, 0)
}

func (s *Waitfor_statementContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIMEOUT, 0)
}

func (s *Waitfor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Waitfor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Waitfor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWaitfor_statement(s)
	}
}

func (s *Waitfor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWaitfor_statement(s)
	}
}

func (s *Waitfor_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWaitfor_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Waitfor_statement() (localctx IWaitfor_statementContext) {
	localctx = NewWaitfor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, TSqlParserRULE_waitfor_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1259)
		p.Match(TSqlParserWAITFOR)
	}
	p.SetState(1261)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1260)
			p.Receive_statement()
		}

	}
	p.SetState(1264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(1263)
			p.Match(TSqlParserCOMMA)
		}

	}
	p.SetState(1268)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		p.SetState(1266)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDELAY || _la == TSqlParserTIME || _la == TSqlParserTIMEOUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1267)
			p.Time()
		}

	}
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1270)
			p.expression(0)
		}

	}
	p.SetState(1274)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1273)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IWhile_statementContext is an interface to support dynamic dispatch.
type IWhile_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhile_statementContext differentiates from other interfaces.
	IsWhile_statementContext()
}

type While_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhile_statementContext() *While_statementContext {
	var p = new(While_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_while_statement
	return p
}

func (*While_statementContext) IsWhile_statementContext() {}

func NewWhile_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *While_statementContext {
	var p = new(While_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_while_statement

	return p
}

func (s *While_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *While_statementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHILE, 0)
}

func (s *While_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *While_statementContext) Sql_clause() ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *While_statementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(TSqlParserBREAK, 0)
}

func (s *While_statementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE, 0)
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

func (s *While_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWhile_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) While_statement() (localctx IWhile_statementContext) {
	localctx = NewWhile_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, TSqlParserRULE_while_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1276)
		p.Match(TSqlParserWHILE)
	}
	{
		p.SetState(1277)
		p.Search_condition()
	}
	p.SetState(1287)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1278)
			p.Sql_clause()
		}

	case 2:
		{
			p.SetState(1279)
			p.Match(TSqlParserBREAK)
		}
		p.SetState(1281)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1280)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		{
			p.SetState(1283)
			p.Match(TSqlParserCONTINUE)
		}
		p.SetState(1285)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1284)
				p.Match(TSqlParserSEMI)
			}

		}

	}

	return localctx
}

// IPrint_statementContext is an interface to support dynamic dispatch.
type IPrint_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrint_statementContext differentiates from other interfaces.
	IsPrint_statementContext()
}

type Print_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrint_statementContext() *Print_statementContext {
	var p = new(Print_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_print_statement
	return p
}

func (*Print_statementContext) IsPrint_statementContext() {}

func NewPrint_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Print_statementContext {
	var p = new(Print_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_print_statement

	return p
}

func (s *Print_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Print_statementContext) PRINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRINT, 0)
}

func (s *Print_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Print_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Print_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Print_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPrint_statement(s)
	}
}

func (s *Print_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPrint_statement(s)
	}
}

func (s *Print_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPrint_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Print_statement() (localctx IPrint_statementContext) {
	localctx = NewPrint_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, TSqlParserRULE_print_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1289)
		p.Match(TSqlParserPRINT)
	}
	{
		p.SetState(1290)
		p.expression(0)
	}
	p.SetState(1292)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1291)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IRaiseerror_statementContext is an interface to support dynamic dispatch.
type IRaiseerror_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMsg returns the msg token.
	GetMsg() antlr.Token

	// SetMsg sets the msg token.
	SetMsg(antlr.Token)

	// GetSeverity returns the severity rule contexts.
	GetSeverity() IConstant_LOCAL_IDContext

	// GetState returns the state rule contexts.
	GetState() IConstant_LOCAL_IDContext

	// SetSeverity sets the severity rule contexts.
	SetSeverity(IConstant_LOCAL_IDContext)

	// SetState sets the state rule contexts.
	SetState(IConstant_LOCAL_IDContext)

	// IsRaiseerror_statementContext differentiates from other interfaces.
	IsRaiseerror_statementContext()
}

type Raiseerror_statementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	msg      antlr.Token
	severity IConstant_LOCAL_IDContext
	state    IConstant_LOCAL_IDContext
}

func NewEmptyRaiseerror_statementContext() *Raiseerror_statementContext {
	var p = new(Raiseerror_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_raiseerror_statement
	return p
}

func (*Raiseerror_statementContext) IsRaiseerror_statementContext() {}

func NewRaiseerror_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Raiseerror_statementContext {
	var p = new(Raiseerror_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_raiseerror_statement

	return p
}

func (s *Raiseerror_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Raiseerror_statementContext) GetMsg() antlr.Token { return s.msg }

func (s *Raiseerror_statementContext) SetMsg(v antlr.Token) { s.msg = v }

func (s *Raiseerror_statementContext) GetSeverity() IConstant_LOCAL_IDContext { return s.severity }

func (s *Raiseerror_statementContext) GetState() IConstant_LOCAL_IDContext { return s.state }

func (s *Raiseerror_statementContext) SetSeverity(v IConstant_LOCAL_IDContext) { s.severity = v }

func (s *Raiseerror_statementContext) SetState(v IConstant_LOCAL_IDContext) { s.state = v }

func (s *Raiseerror_statementContext) RAISERROR() antlr.TerminalNode {
	return s.GetToken(TSqlParserRAISERROR, 0)
}

func (s *Raiseerror_statementContext) AllConstant_LOCAL_ID() []IConstant_LOCAL_IDContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem())
	var tst = make([]IConstant_LOCAL_IDContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_LOCAL_IDContext)
		}
	}

	return tst
}

func (s *Raiseerror_statementContext) Constant_LOCAL_ID(i int) IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Raiseerror_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Raiseerror_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Raiseerror_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Raiseerror_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Raiseerror_statementContext) LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOG, 0)
}

func (s *Raiseerror_statementContext) SETERROR() antlr.TerminalNode {
	return s.GetToken(TSqlParserSETERROR, 0)
}

func (s *Raiseerror_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Raiseerror_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Raiseerror_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRaiseerror_statement(s)
	}
}

func (s *Raiseerror_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRaiseerror_statement(s)
	}
}

func (s *Raiseerror_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRaiseerror_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Raiseerror_statement() (localctx IRaiseerror_statementContext) {
	localctx = NewRaiseerror_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, TSqlParserRULE_raiseerror_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1294)
		p.Match(TSqlParserRAISERROR)
	}
	{
		p.SetState(1295)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(1296)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Raiseerror_statementContext).msg = _lt

	_la = p.GetTokenStream().LA(1)

	if !(((_la-776)&-(0x1f+1)) == 0 && ((1<<uint((_la-776)))&((1<<(TSqlParserLOCAL_ID-776))|(1<<(TSqlParserDECIMAL-776))|(1<<(TSqlParserSTRING-776)))) != 0) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Raiseerror_statementContext).msg = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(1297)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(1298)

		var _x = p.Constant_LOCAL_ID()

		localctx.(*Raiseerror_statementContext).severity = _x
	}
	{
		p.SetState(1299)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(1300)

		var _x = p.Constant_LOCAL_ID()

		localctx.(*Raiseerror_statementContext).state = _x
	}
	p.SetState(1305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(1301)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(1302)
			p.Constant_LOCAL_ID()
		}

		p.SetState(1307)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1308)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(1311)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1309)
			p.Match(TSqlParserWITH)
		}
		p.SetState(1310)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserLOG || _la == TSqlParserSETERROR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1314)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1313)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IEmpty_statementContext is an interface to support dynamic dispatch.
type IEmpty_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmpty_statementContext differentiates from other interfaces.
	IsEmpty_statementContext()
}

type Empty_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmpty_statementContext() *Empty_statementContext {
	var p = new(Empty_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_empty_statement
	return p
}

func (*Empty_statementContext) IsEmpty_statementContext() {}

func NewEmpty_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Empty_statementContext {
	var p = new(Empty_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_empty_statement

	return p
}

func (s *Empty_statementContext) GetParser() antlr.Parser { return s.parser }
func (s *Empty_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Empty_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Empty_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEmpty_statement(s)
	}
}

func (s *Empty_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEmpty_statement(s)
	}
}

func (s *Empty_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEmpty_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Empty_statement() (localctx IEmpty_statementContext) {
	localctx = NewEmpty_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, TSqlParserRULE_empty_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1316)
		p.Match(TSqlParserSEMI)
	}

	return localctx
}

// IAnother_statementContext is an interface to support dynamic dispatch.
type IAnother_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnother_statementContext differentiates from other interfaces.
	IsAnother_statementContext()
}

type Another_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnother_statementContext() *Another_statementContext {
	var p = new(Another_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_another_statement
	return p
}

func (*Another_statementContext) IsAnother_statementContext() {}

func NewAnother_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Another_statementContext {
	var p = new(Another_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_another_statement

	return p
}

func (s *Another_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Another_statementContext) Declare_statement() IDeclare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_statementContext)
}

func (s *Another_statementContext) Cursor_statement() ICursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_statementContext)
}

func (s *Another_statementContext) Conversation_statement() IConversation_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversation_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversation_statementContext)
}

func (s *Another_statementContext) Create_contract() ICreate_contractContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_contractContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_contractContext)
}

func (s *Another_statementContext) Create_queue() ICreate_queueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_queueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_queueContext)
}

func (s *Another_statementContext) Alter_queue() IAlter_queueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_queueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_queueContext)
}

func (s *Another_statementContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Another_statementContext) Message_statement() IMessage_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMessage_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMessage_statementContext)
}

func (s *Another_statementContext) Security_statement() ISecurity_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISecurity_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISecurity_statementContext)
}

func (s *Another_statementContext) Set_statement() ISet_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Another_statementContext) Transaction_statement() ITransaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_statementContext)
}

func (s *Another_statementContext) Use_statement() IUse_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUse_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUse_statementContext)
}

func (s *Another_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Another_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Another_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAnother_statement(s)
	}
}

func (s *Another_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAnother_statement(s)
	}
}

func (s *Another_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAnother_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Another_statement() (localctx IAnother_statementContext) {
	localctx = NewAnother_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, TSqlParserRULE_another_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1330)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1318)
			p.Declare_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1319)
			p.Cursor_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1320)
			p.Conversation_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1321)
			p.Create_contract()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1322)
			p.Create_queue()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1323)
			p.Alter_queue()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1324)
			p.Execute_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1325)
			p.Message_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1326)
			p.Security_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1327)
			p.Set_statement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1328)
			p.Transaction_statement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1329)
			p.Use_statement()
		}

	}

	return localctx
}

// IAlter_application_roleContext is an interface to support dynamic dispatch.
type IAlter_application_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetApplication_role_password returns the application_role_password token.
	GetApplication_role_password() antlr.Token

	// SetApplication_role_password sets the application_role_password token.
	SetApplication_role_password(antlr.Token)

	// GetAppliction_role returns the appliction_role rule contexts.
	GetAppliction_role() IIdContext

	// GetNew_application_role_name returns the new_application_role_name rule contexts.
	GetNew_application_role_name() IIdContext

	// GetApp_role_default_schema returns the app_role_default_schema rule contexts.
	GetApp_role_default_schema() IIdContext

	// SetAppliction_role sets the appliction_role rule contexts.
	SetAppliction_role(IIdContext)

	// SetNew_application_role_name sets the new_application_role_name rule contexts.
	SetNew_application_role_name(IIdContext)

	// SetApp_role_default_schema sets the app_role_default_schema rule contexts.
	SetApp_role_default_schema(IIdContext)

	// IsAlter_application_roleContext differentiates from other interfaces.
	IsAlter_application_roleContext()
}

type Alter_application_roleContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	appliction_role           IIdContext
	new_application_role_name IIdContext
	application_role_password antlr.Token
	app_role_default_schema   IIdContext
}

func NewEmptyAlter_application_roleContext() *Alter_application_roleContext {
	var p = new(Alter_application_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_application_role
	return p
}

func (*Alter_application_roleContext) IsAlter_application_roleContext() {}

func NewAlter_application_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_application_roleContext {
	var p = new(Alter_application_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_application_role

	return p
}

func (s *Alter_application_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_application_roleContext) GetApplication_role_password() antlr.Token {
	return s.application_role_password
}

func (s *Alter_application_roleContext) SetApplication_role_password(v antlr.Token) {
	s.application_role_password = v
}

func (s *Alter_application_roleContext) GetAppliction_role() IIdContext { return s.appliction_role }

func (s *Alter_application_roleContext) GetNew_application_role_name() IIdContext {
	return s.new_application_role_name
}

func (s *Alter_application_roleContext) GetApp_role_default_schema() IIdContext {
	return s.app_role_default_schema
}

func (s *Alter_application_roleContext) SetAppliction_role(v IIdContext) { s.appliction_role = v }

func (s *Alter_application_roleContext) SetNew_application_role_name(v IIdContext) {
	s.new_application_role_name = v
}

func (s *Alter_application_roleContext) SetApp_role_default_schema(v IIdContext) {
	s.app_role_default_schema = v
}

func (s *Alter_application_roleContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_application_roleContext) APPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLICATION, 0)
}

func (s *Alter_application_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Alter_application_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_application_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_application_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_application_roleContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_application_roleContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_application_roleContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_application_roleContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_application_roleContext) DEFAULT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, 0)
}

func (s *Alter_application_roleContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_application_roleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_application_roleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_application_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_application_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_application_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_application_role(s)
	}
}

func (s *Alter_application_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_application_role(s)
	}
}

func (s *Alter_application_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_application_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_application_role() (localctx IAlter_application_roleContext) {
	localctx = NewAlter_application_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, TSqlParserRULE_alter_application_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1332)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(1333)
		p.Match(TSqlParserAPPLICATION)
	}
	{
		p.SetState(1334)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(1335)

		var _x = p.Id()

		localctx.(*Alter_application_roleContext).appliction_role = _x
	}
	{
		p.SetState(1336)
		p.Match(TSqlParserWITH)
	}
	p.SetState(1343)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
		p.SetState(1338)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1337)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(1340)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(1341)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1342)

			var _x = p.Id()

			localctx.(*Alter_application_roleContext).new_application_role_name = _x
		}

	}
	p.SetState(1351)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
		p.SetState(1346)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1345)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(1348)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(1349)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1350)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_application_roleContext).application_role_password = _m
		}

	}
	p.SetState(1359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDEFAULT_SCHEMA || _la == TSqlParserCOMMA {
		p.SetState(1354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1353)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(1356)
			p.Match(TSqlParserDEFAULT_SCHEMA)
		}
		{
			p.SetState(1357)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1358)

			var _x = p.Id()

			localctx.(*Alter_application_roleContext).app_role_default_schema = _x
		}

	}

	return localctx
}

// ICreate_application_roleContext is an interface to support dynamic dispatch.
type ICreate_application_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetApplication_role_password returns the application_role_password token.
	GetApplication_role_password() antlr.Token

	// SetApplication_role_password sets the application_role_password token.
	SetApplication_role_password(antlr.Token)

	// GetAppliction_role returns the appliction_role rule contexts.
	GetAppliction_role() IIdContext

	// GetApp_role_default_schema returns the app_role_default_schema rule contexts.
	GetApp_role_default_schema() IIdContext

	// SetAppliction_role sets the appliction_role rule contexts.
	SetAppliction_role(IIdContext)

	// SetApp_role_default_schema sets the app_role_default_schema rule contexts.
	SetApp_role_default_schema(IIdContext)

	// IsCreate_application_roleContext differentiates from other interfaces.
	IsCreate_application_roleContext()
}

type Create_application_roleContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	appliction_role           IIdContext
	application_role_password antlr.Token
	app_role_default_schema   IIdContext
}

func NewEmptyCreate_application_roleContext() *Create_application_roleContext {
	var p = new(Create_application_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_application_role
	return p
}

func (*Create_application_roleContext) IsCreate_application_roleContext() {}

func NewCreate_application_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_application_roleContext {
	var p = new(Create_application_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_application_role

	return p
}

func (s *Create_application_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_application_roleContext) GetApplication_role_password() antlr.Token {
	return s.application_role_password
}

func (s *Create_application_roleContext) SetApplication_role_password(v antlr.Token) {
	s.application_role_password = v
}

func (s *Create_application_roleContext) GetAppliction_role() IIdContext { return s.appliction_role }

func (s *Create_application_roleContext) GetApp_role_default_schema() IIdContext {
	return s.app_role_default_schema
}

func (s *Create_application_roleContext) SetAppliction_role(v IIdContext) { s.appliction_role = v }

func (s *Create_application_roleContext) SetApp_role_default_schema(v IIdContext) {
	s.app_role_default_schema = v
}

func (s *Create_application_roleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_application_roleContext) APPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLICATION, 0)
}

func (s *Create_application_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Create_application_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_application_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_application_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_application_roleContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_application_roleContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_application_roleContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_application_roleContext) DEFAULT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, 0)
}

func (s *Create_application_roleContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_application_roleContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_application_roleContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_application_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_application_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_application_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_application_role(s)
	}
}

func (s *Create_application_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_application_role(s)
	}
}

func (s *Create_application_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_application_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_application_role() (localctx ICreate_application_roleContext) {
	localctx = NewCreate_application_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, TSqlParserRULE_create_application_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1361)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(1362)
		p.Match(TSqlParserAPPLICATION)
	}
	{
		p.SetState(1363)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(1364)

		var _x = p.Id()

		localctx.(*Create_application_roleContext).appliction_role = _x
	}
	{
		p.SetState(1365)
		p.Match(TSqlParserWITH)
	}
	p.SetState(1372)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
		p.SetState(1367)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1366)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(1369)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(1370)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1371)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_application_roleContext).application_role_password = _m
		}

	}
	p.SetState(1380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDEFAULT_SCHEMA || _la == TSqlParserCOMMA {
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1374)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(1377)
			p.Match(TSqlParserDEFAULT_SCHEMA)
		}
		{
			p.SetState(1378)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1379)

			var _x = p.Id()

			localctx.(*Create_application_roleContext).app_role_default_schema = _x
		}

	}

	return localctx
}

// IDrop_aggregateContext is an interface to support dynamic dispatch.
type IDrop_aggregateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetAggregate_name returns the aggregate_name rule contexts.
	GetAggregate_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetAggregate_name sets the aggregate_name rule contexts.
	SetAggregate_name(IIdContext)

	// IsDrop_aggregateContext differentiates from other interfaces.
	IsDrop_aggregateContext()
}

type Drop_aggregateContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	schema_name    IIdContext
	aggregate_name IIdContext
}

func NewEmptyDrop_aggregateContext() *Drop_aggregateContext {
	var p = new(Drop_aggregateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_aggregate
	return p
}

func (*Drop_aggregateContext) IsDrop_aggregateContext() {}

func NewDrop_aggregateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_aggregateContext {
	var p = new(Drop_aggregateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_aggregate

	return p
}

func (s *Drop_aggregateContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_aggregateContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_aggregateContext) GetAggregate_name() IIdContext { return s.aggregate_name }

func (s *Drop_aggregateContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_aggregateContext) SetAggregate_name(v IIdContext) { s.aggregate_name = v }

func (s *Drop_aggregateContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_aggregateContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserAGGREGATE, 0)
}

func (s *Drop_aggregateContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_aggregateContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_aggregateContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_aggregateContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_aggregateContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_aggregateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_aggregateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_aggregateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_aggregate(s)
	}
}

func (s *Drop_aggregateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_aggregate(s)
	}
}

func (s *Drop_aggregateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_aggregate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_aggregate() (localctx IDrop_aggregateContext) {
	localctx = NewDrop_aggregateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, TSqlParserRULE_drop_aggregate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1382)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(1383)
		p.Match(TSqlParserAGGREGATE)
	}
	p.SetState(1386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(1384)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(1385)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(1391)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1388)

			var _x = p.Id()

			localctx.(*Drop_aggregateContext).schema_name = _x
		}
		{
			p.SetState(1389)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(1393)

		var _x = p.Id()

		localctx.(*Drop_aggregateContext).aggregate_name = _x
	}

	return localctx
}

// IDrop_application_roleContext is an interface to support dynamic dispatch.
type IDrop_application_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRolename returns the rolename rule contexts.
	GetRolename() IIdContext

	// SetRolename sets the rolename rule contexts.
	SetRolename(IIdContext)

	// IsDrop_application_roleContext differentiates from other interfaces.
	IsDrop_application_roleContext()
}

type Drop_application_roleContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	rolename IIdContext
}

func NewEmptyDrop_application_roleContext() *Drop_application_roleContext {
	var p = new(Drop_application_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_application_role
	return p
}

func (*Drop_application_roleContext) IsDrop_application_roleContext() {}

func NewDrop_application_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_application_roleContext {
	var p = new(Drop_application_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_application_role

	return p
}

func (s *Drop_application_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_application_roleContext) GetRolename() IIdContext { return s.rolename }

func (s *Drop_application_roleContext) SetRolename(v IIdContext) { s.rolename = v }

func (s *Drop_application_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_application_roleContext) APPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLICATION, 0)
}

func (s *Drop_application_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Drop_application_roleContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_application_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_application_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_application_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_application_role(s)
	}
}

func (s *Drop_application_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_application_role(s)
	}
}

func (s *Drop_application_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_application_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_application_role() (localctx IDrop_application_roleContext) {
	localctx = NewDrop_application_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, TSqlParserRULE_drop_application_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1395)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(1396)
		p.Match(TSqlParserAPPLICATION)
	}
	{
		p.SetState(1397)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(1398)

		var _x = p.Id()

		localctx.(*Drop_application_roleContext).rolename = _x
	}

	return localctx
}

// IAlter_assemblyContext is an interface to support dynamic dispatch.
type IAlter_assemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAssembly_name returns the assembly_name rule contexts.
	GetAssembly_name() IIdContext

	// SetAssembly_name sets the assembly_name rule contexts.
	SetAssembly_name(IIdContext)

	// IsAlter_assemblyContext differentiates from other interfaces.
	IsAlter_assemblyContext()
}

type Alter_assemblyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	assembly_name IIdContext
}

func NewEmptyAlter_assemblyContext() *Alter_assemblyContext {
	var p = new(Alter_assemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly
	return p
}

func (*Alter_assemblyContext) IsAlter_assemblyContext() {}

func NewAlter_assemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assemblyContext {
	var p = new(Alter_assemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly

	return p
}

func (s *Alter_assemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assemblyContext) GetAssembly_name() IIdContext { return s.assembly_name }

func (s *Alter_assemblyContext) SetAssembly_name(v IIdContext) { s.assembly_name = v }

func (s *Alter_assemblyContext) Alter_assembly_start() IAlter_assembly_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_startContext)
}

func (s *Alter_assemblyContext) Alter_assembly_clause() IAlter_assembly_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_clauseContext)
}

func (s *Alter_assemblyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_assemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assemblyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly(s)
	}
}

func (s *Alter_assemblyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly(s)
	}
}

func (s *Alter_assemblyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly() (localctx IAlter_assemblyContext) {
	localctx = NewAlter_assemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, TSqlParserRULE_alter_assembly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1400)
		p.Alter_assembly_start()
	}
	{
		p.SetState(1401)

		var _x = p.Id()

		localctx.(*Alter_assemblyContext).assembly_name = _x
	}
	{
		p.SetState(1402)
		p.Alter_assembly_clause()
	}

	return localctx
}

// IAlter_assembly_startContext is an interface to support dynamic dispatch.
type IAlter_assembly_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_startContext differentiates from other interfaces.
	IsAlter_assembly_startContext()
}

type Alter_assembly_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_startContext() *Alter_assembly_startContext {
	var p = new(Alter_assembly_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_start
	return p
}

func (*Alter_assembly_startContext) IsAlter_assembly_startContext() {}

func NewAlter_assembly_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_startContext {
	var p = new(Alter_assembly_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_start

	return p
}

func (s *Alter_assembly_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_startContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_assembly_startContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Alter_assembly_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_start(s)
	}
}

func (s *Alter_assembly_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_start(s)
	}
}

func (s *Alter_assembly_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_start() (localctx IAlter_assembly_startContext) {
	localctx = NewAlter_assembly_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, TSqlParserRULE_alter_assembly_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1404)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(1405)
		p.Match(TSqlParserASSEMBLY)
	}

	return localctx
}

// IAlter_assembly_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_clauseContext differentiates from other interfaces.
	IsAlter_assembly_clauseContext()
}

type Alter_assembly_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_clauseContext() *Alter_assembly_clauseContext {
	var p = new(Alter_assembly_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_clause
	return p
}

func (*Alter_assembly_clauseContext) IsAlter_assembly_clauseContext() {}

func NewAlter_assembly_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_clauseContext {
	var p = new(Alter_assembly_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_clause

	return p
}

func (s *Alter_assembly_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_clauseContext) Alter_assembly_from_clause() IAlter_assembly_from_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_from_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_from_clauseContext)
}

func (s *Alter_assembly_clauseContext) Alter_assembly_with_clause() IAlter_assembly_with_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_with_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_with_clauseContext)
}

func (s *Alter_assembly_clauseContext) Alter_assembly_drop_clause() IAlter_assembly_drop_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_drop_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_drop_clauseContext)
}

func (s *Alter_assembly_clauseContext) Alter_assembly_add_clause() IAlter_assembly_add_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_add_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_add_clauseContext)
}

func (s *Alter_assembly_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_clause(s)
	}
}

func (s *Alter_assembly_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_clause(s)
	}
}

func (s *Alter_assembly_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_clause() (localctx IAlter_assembly_clauseContext) {
	localctx = NewAlter_assembly_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, TSqlParserRULE_alter_assembly_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1408)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(1407)
			p.Alter_assembly_from_clause()
		}

	}
	p.SetState(1411)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1410)
			p.Alter_assembly_with_clause()
		}

	}
	p.SetState(1414)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1413)
			p.Alter_assembly_drop_clause()
		}

	}
	p.SetState(1417)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserADD {
		{
			p.SetState(1416)
			p.Alter_assembly_add_clause()
		}

	}

	return localctx
}

// IAlter_assembly_from_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_from_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_from_clauseContext differentiates from other interfaces.
	IsAlter_assembly_from_clauseContext()
}

type Alter_assembly_from_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_from_clauseContext() *Alter_assembly_from_clauseContext {
	var p = new(Alter_assembly_from_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_from_clause
	return p
}

func (*Alter_assembly_from_clauseContext) IsAlter_assembly_from_clauseContext() {}

func NewAlter_assembly_from_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_from_clauseContext {
	var p = new(Alter_assembly_from_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_from_clause

	return p
}

func (s *Alter_assembly_from_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_from_clauseContext) Alter_assembly_from_clause_start() IAlter_assembly_from_clause_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_from_clause_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_from_clause_startContext)
}

func (s *Alter_assembly_from_clauseContext) Client_assembly_specifier() IClient_assembly_specifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClient_assembly_specifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClient_assembly_specifierContext)
}

func (s *Alter_assembly_from_clauseContext) Alter_assembly_file_bits() IAlter_assembly_file_bitsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_file_bitsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_file_bitsContext)
}

func (s *Alter_assembly_from_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_from_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_from_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_from_clause(s)
	}
}

func (s *Alter_assembly_from_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_from_clause(s)
	}
}

func (s *Alter_assembly_from_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_from_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_from_clause() (localctx IAlter_assembly_from_clauseContext) {
	localctx = NewAlter_assembly_from_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, TSqlParserRULE_alter_assembly_from_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1419)
		p.Alter_assembly_from_clause_start()
	}
	p.SetState(1422)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDOUBLE_BACK_SLASH, TSqlParserDISK_DRIVE, TSqlParserSTRING:
		{
			p.SetState(1420)
			p.Client_assembly_specifier()
		}

	case TSqlParserAS:
		{
			p.SetState(1421)
			p.Alter_assembly_file_bits()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_assembly_from_clause_startContext is an interface to support dynamic dispatch.
type IAlter_assembly_from_clause_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_from_clause_startContext differentiates from other interfaces.
	IsAlter_assembly_from_clause_startContext()
}

type Alter_assembly_from_clause_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_from_clause_startContext() *Alter_assembly_from_clause_startContext {
	var p = new(Alter_assembly_from_clause_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_from_clause_start
	return p
}

func (*Alter_assembly_from_clause_startContext) IsAlter_assembly_from_clause_startContext() {}

func NewAlter_assembly_from_clause_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_from_clause_startContext {
	var p = new(Alter_assembly_from_clause_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_from_clause_start

	return p
}

func (s *Alter_assembly_from_clause_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_from_clause_startContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Alter_assembly_from_clause_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_from_clause_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_from_clause_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_from_clause_start(s)
	}
}

func (s *Alter_assembly_from_clause_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_from_clause_start(s)
	}
}

func (s *Alter_assembly_from_clause_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_from_clause_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_from_clause_start() (localctx IAlter_assembly_from_clause_startContext) {
	localctx = NewAlter_assembly_from_clause_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, TSqlParserRULE_alter_assembly_from_clause_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1424)
		p.Match(TSqlParserFROM)
	}

	return localctx
}

// IAlter_assembly_drop_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_drop_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_drop_clauseContext differentiates from other interfaces.
	IsAlter_assembly_drop_clauseContext()
}

type Alter_assembly_drop_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_drop_clauseContext() *Alter_assembly_drop_clauseContext {
	var p = new(Alter_assembly_drop_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop_clause
	return p
}

func (*Alter_assembly_drop_clauseContext) IsAlter_assembly_drop_clauseContext() {}

func NewAlter_assembly_drop_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_drop_clauseContext {
	var p = new(Alter_assembly_drop_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop_clause

	return p
}

func (s *Alter_assembly_drop_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_drop_clauseContext) Alter_assembly_drop() IAlter_assembly_dropContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_dropContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_dropContext)
}

func (s *Alter_assembly_drop_clauseContext) Alter_assembly_drop_multiple_files() IAlter_assembly_drop_multiple_filesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_drop_multiple_filesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_drop_multiple_filesContext)
}

func (s *Alter_assembly_drop_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_drop_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_drop_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_drop_clause(s)
	}
}

func (s *Alter_assembly_drop_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_drop_clause(s)
	}
}

func (s *Alter_assembly_drop_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_drop_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_drop_clause() (localctx IAlter_assembly_drop_clauseContext) {
	localctx = NewAlter_assembly_drop_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, TSqlParserRULE_alter_assembly_drop_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1426)
		p.Alter_assembly_drop()
	}
	{
		p.SetState(1427)
		p.Alter_assembly_drop_multiple_files()
	}

	return localctx
}

// IAlter_assembly_drop_multiple_filesContext is an interface to support dynamic dispatch.
type IAlter_assembly_drop_multiple_filesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_drop_multiple_filesContext differentiates from other interfaces.
	IsAlter_assembly_drop_multiple_filesContext()
}

type Alter_assembly_drop_multiple_filesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_drop_multiple_filesContext() *Alter_assembly_drop_multiple_filesContext {
	var p = new(Alter_assembly_drop_multiple_filesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop_multiple_files
	return p
}

func (*Alter_assembly_drop_multiple_filesContext) IsAlter_assembly_drop_multiple_filesContext() {}

func NewAlter_assembly_drop_multiple_filesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_drop_multiple_filesContext {
	var p = new(Alter_assembly_drop_multiple_filesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop_multiple_files

	return p
}

func (s *Alter_assembly_drop_multiple_filesContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_drop_multiple_filesContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Alter_assembly_drop_multiple_filesContext) Multiple_local_files() IMultiple_local_filesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiple_local_filesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiple_local_filesContext)
}

func (s *Alter_assembly_drop_multiple_filesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_drop_multiple_filesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_drop_multiple_filesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_drop_multiple_files(s)
	}
}

func (s *Alter_assembly_drop_multiple_filesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_drop_multiple_files(s)
	}
}

func (s *Alter_assembly_drop_multiple_filesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_drop_multiple_files(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_drop_multiple_files() (localctx IAlter_assembly_drop_multiple_filesContext) {
	localctx = NewAlter_assembly_drop_multiple_filesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, TSqlParserRULE_alter_assembly_drop_multiple_files)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1431)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1429)
			p.Match(TSqlParserALL)
		}

	case TSqlParserDISK_DRIVE, TSqlParserSINGLE_QUOTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1430)
			p.Multiple_local_files()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_assembly_dropContext is an interface to support dynamic dispatch.
type IAlter_assembly_dropContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_dropContext differentiates from other interfaces.
	IsAlter_assembly_dropContext()
}

type Alter_assembly_dropContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_dropContext() *Alter_assembly_dropContext {
	var p = new(Alter_assembly_dropContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop
	return p
}

func (*Alter_assembly_dropContext) IsAlter_assembly_dropContext() {}

func NewAlter_assembly_dropContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_dropContext {
	var p = new(Alter_assembly_dropContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_drop

	return p
}

func (s *Alter_assembly_dropContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_dropContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_assembly_dropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_dropContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_dropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_drop(s)
	}
}

func (s *Alter_assembly_dropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_drop(s)
	}
}

func (s *Alter_assembly_dropContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_drop(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_drop() (localctx IAlter_assembly_dropContext) {
	localctx = NewAlter_assembly_dropContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, TSqlParserRULE_alter_assembly_drop)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1433)
		p.Match(TSqlParserDROP)
	}

	return localctx
}

// IAlter_assembly_add_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_add_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_add_clauseContext differentiates from other interfaces.
	IsAlter_assembly_add_clauseContext()
}

type Alter_assembly_add_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_add_clauseContext() *Alter_assembly_add_clauseContext {
	var p = new(Alter_assembly_add_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_add_clause
	return p
}

func (*Alter_assembly_add_clauseContext) IsAlter_assembly_add_clauseContext() {}

func NewAlter_assembly_add_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_add_clauseContext {
	var p = new(Alter_assembly_add_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_add_clause

	return p
}

func (s *Alter_assembly_add_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_add_clauseContext) Alter_asssembly_add_clause_start() IAlter_asssembly_add_clause_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_asssembly_add_clause_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_asssembly_add_clause_startContext)
}

func (s *Alter_assembly_add_clauseContext) Alter_assembly_client_file_clause() IAlter_assembly_client_file_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_client_file_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_client_file_clauseContext)
}

func (s *Alter_assembly_add_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_add_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_add_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_add_clause(s)
	}
}

func (s *Alter_assembly_add_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_add_clause(s)
	}
}

func (s *Alter_assembly_add_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_add_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_add_clause() (localctx IAlter_assembly_add_clauseContext) {
	localctx = NewAlter_assembly_add_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, TSqlParserRULE_alter_assembly_add_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1435)
		p.Alter_asssembly_add_clause_start()
	}
	{
		p.SetState(1436)
		p.Alter_assembly_client_file_clause()
	}

	return localctx
}

// IAlter_asssembly_add_clause_startContext is an interface to support dynamic dispatch.
type IAlter_asssembly_add_clause_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_asssembly_add_clause_startContext differentiates from other interfaces.
	IsAlter_asssembly_add_clause_startContext()
}

type Alter_asssembly_add_clause_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_asssembly_add_clause_startContext() *Alter_asssembly_add_clause_startContext {
	var p = new(Alter_asssembly_add_clause_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_asssembly_add_clause_start
	return p
}

func (*Alter_asssembly_add_clause_startContext) IsAlter_asssembly_add_clause_startContext() {}

func NewAlter_asssembly_add_clause_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_asssembly_add_clause_startContext {
	var p = new(Alter_asssembly_add_clause_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_asssembly_add_clause_start

	return p
}

func (s *Alter_asssembly_add_clause_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_asssembly_add_clause_startContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_asssembly_add_clause_startContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Alter_asssembly_add_clause_startContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Alter_asssembly_add_clause_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_asssembly_add_clause_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_asssembly_add_clause_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_asssembly_add_clause_start(s)
	}
}

func (s *Alter_asssembly_add_clause_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_asssembly_add_clause_start(s)
	}
}

func (s *Alter_asssembly_add_clause_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_asssembly_add_clause_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_asssembly_add_clause_start() (localctx IAlter_asssembly_add_clause_startContext) {
	localctx = NewAlter_asssembly_add_clause_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, TSqlParserRULE_alter_asssembly_add_clause_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1438)
		p.Match(TSqlParserADD)
	}
	{
		p.SetState(1439)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(1440)
		p.Match(TSqlParserFROM)
	}

	return localctx
}

// IAlter_assembly_client_file_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_client_file_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_client_file_clauseContext differentiates from other interfaces.
	IsAlter_assembly_client_file_clauseContext()
}

type Alter_assembly_client_file_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_client_file_clauseContext() *Alter_assembly_client_file_clauseContext {
	var p = new(Alter_assembly_client_file_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_client_file_clause
	return p
}

func (*Alter_assembly_client_file_clauseContext) IsAlter_assembly_client_file_clauseContext() {}

func NewAlter_assembly_client_file_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_client_file_clauseContext {
	var p = new(Alter_assembly_client_file_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_client_file_clause

	return p
}

func (s *Alter_assembly_client_file_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_client_file_clauseContext) Alter_assembly_file_name() IAlter_assembly_file_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_file_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_file_nameContext)
}

func (s *Alter_assembly_client_file_clauseContext) Alter_assembly_as() IAlter_assembly_asContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_asContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_asContext)
}

func (s *Alter_assembly_client_file_clauseContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_assembly_client_file_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_client_file_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_client_file_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_client_file_clause(s)
	}
}

func (s *Alter_assembly_client_file_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_client_file_clause(s)
	}
}

func (s *Alter_assembly_client_file_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_client_file_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_client_file_clause() (localctx IAlter_assembly_client_file_clauseContext) {
	localctx = NewAlter_assembly_client_file_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, TSqlParserRULE_alter_assembly_client_file_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1442)
		p.Alter_assembly_file_name()
	}
	p.SetState(1446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(1443)
			p.Alter_assembly_as()
		}
		{
			p.SetState(1444)
			p.Id()
		}

	}

	return localctx
}

// IAlter_assembly_file_nameContext is an interface to support dynamic dispatch.
type IAlter_assembly_file_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_file_nameContext differentiates from other interfaces.
	IsAlter_assembly_file_nameContext()
}

type Alter_assembly_file_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_file_nameContext() *Alter_assembly_file_nameContext {
	var p = new(Alter_assembly_file_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_file_name
	return p
}

func (*Alter_assembly_file_nameContext) IsAlter_assembly_file_nameContext() {}

func NewAlter_assembly_file_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_file_nameContext {
	var p = new(Alter_assembly_file_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_file_name

	return p
}

func (s *Alter_assembly_file_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_file_nameContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_assembly_file_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_file_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_file_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_file_name(s)
	}
}

func (s *Alter_assembly_file_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_file_name(s)
	}
}

func (s *Alter_assembly_file_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_file_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_file_name() (localctx IAlter_assembly_file_nameContext) {
	localctx = NewAlter_assembly_file_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, TSqlParserRULE_alter_assembly_file_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1448)
		p.Match(TSqlParserSTRING)
	}

	return localctx
}

// IAlter_assembly_file_bitsContext is an interface to support dynamic dispatch.
type IAlter_assembly_file_bitsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_file_bitsContext differentiates from other interfaces.
	IsAlter_assembly_file_bitsContext()
}

type Alter_assembly_file_bitsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_file_bitsContext() *Alter_assembly_file_bitsContext {
	var p = new(Alter_assembly_file_bitsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_file_bits
	return p
}

func (*Alter_assembly_file_bitsContext) IsAlter_assembly_file_bitsContext() {}

func NewAlter_assembly_file_bitsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_file_bitsContext {
	var p = new(Alter_assembly_file_bitsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_file_bits

	return p
}

func (s *Alter_assembly_file_bitsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_file_bitsContext) Alter_assembly_as() IAlter_assembly_asContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_asContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_asContext)
}

func (s *Alter_assembly_file_bitsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_assembly_file_bitsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_file_bitsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_file_bitsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_file_bits(s)
	}
}

func (s *Alter_assembly_file_bitsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_file_bits(s)
	}
}

func (s *Alter_assembly_file_bitsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_file_bits(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_file_bits() (localctx IAlter_assembly_file_bitsContext) {
	localctx = NewAlter_assembly_file_bitsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, TSqlParserRULE_alter_assembly_file_bits)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1450)
		p.Alter_assembly_as()
	}
	{
		p.SetState(1451)
		p.Id()
	}

	return localctx
}

// IAlter_assembly_asContext is an interface to support dynamic dispatch.
type IAlter_assembly_asContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_asContext differentiates from other interfaces.
	IsAlter_assembly_asContext()
}

type Alter_assembly_asContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_asContext() *Alter_assembly_asContext {
	var p = new(Alter_assembly_asContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_as
	return p
}

func (*Alter_assembly_asContext) IsAlter_assembly_asContext() {}

func NewAlter_assembly_asContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_asContext {
	var p = new(Alter_assembly_asContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_as

	return p
}

func (s *Alter_assembly_asContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_asContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Alter_assembly_asContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_asContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_asContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_as(s)
	}
}

func (s *Alter_assembly_asContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_as(s)
	}
}

func (s *Alter_assembly_asContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_as(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_as() (localctx IAlter_assembly_asContext) {
	localctx = NewAlter_assembly_asContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, TSqlParserRULE_alter_assembly_as)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1453)
		p.Match(TSqlParserAS)
	}

	return localctx
}

// IAlter_assembly_with_clauseContext is an interface to support dynamic dispatch.
type IAlter_assembly_with_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_with_clauseContext differentiates from other interfaces.
	IsAlter_assembly_with_clauseContext()
}

type Alter_assembly_with_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_with_clauseContext() *Alter_assembly_with_clauseContext {
	var p = new(Alter_assembly_with_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_with_clause
	return p
}

func (*Alter_assembly_with_clauseContext) IsAlter_assembly_with_clauseContext() {}

func NewAlter_assembly_with_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_with_clauseContext {
	var p = new(Alter_assembly_with_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_with_clause

	return p
}

func (s *Alter_assembly_with_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_with_clauseContext) Alter_assembly_with() IAlter_assembly_withContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_assembly_withContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_assembly_withContext)
}

func (s *Alter_assembly_with_clauseContext) Assembly_option() IAssembly_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssembly_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssembly_optionContext)
}

func (s *Alter_assembly_with_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_with_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_with_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_with_clause(s)
	}
}

func (s *Alter_assembly_with_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_with_clause(s)
	}
}

func (s *Alter_assembly_with_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_with_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_with_clause() (localctx IAlter_assembly_with_clauseContext) {
	localctx = NewAlter_assembly_with_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, TSqlParserRULE_alter_assembly_with_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1455)
		p.Alter_assembly_with()
	}
	{
		p.SetState(1456)
		p.assembly_option(0)
	}

	return localctx
}

// IAlter_assembly_withContext is an interface to support dynamic dispatch.
type IAlter_assembly_withContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_assembly_withContext differentiates from other interfaces.
	IsAlter_assembly_withContext()
}

type Alter_assembly_withContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_assembly_withContext() *Alter_assembly_withContext {
	var p = new(Alter_assembly_withContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_assembly_with
	return p
}

func (*Alter_assembly_withContext) IsAlter_assembly_withContext() {}

func NewAlter_assembly_withContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_assembly_withContext {
	var p = new(Alter_assembly_withContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_assembly_with

	return p
}

func (s *Alter_assembly_withContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_assembly_withContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_assembly_withContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_assembly_withContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_assembly_withContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_assembly_with(s)
	}
}

func (s *Alter_assembly_withContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_assembly_with(s)
	}
}

func (s *Alter_assembly_withContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_assembly_with(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_assembly_with() (localctx IAlter_assembly_withContext) {
	localctx = NewAlter_assembly_withContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, TSqlParserRULE_alter_assembly_with)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1458)
		p.Match(TSqlParserWITH)
	}

	return localctx
}

// IClient_assembly_specifierContext is an interface to support dynamic dispatch.
type IClient_assembly_specifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClient_assembly_specifierContext differentiates from other interfaces.
	IsClient_assembly_specifierContext()
}

type Client_assembly_specifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClient_assembly_specifierContext() *Client_assembly_specifierContext {
	var p = new(Client_assembly_specifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_client_assembly_specifier
	return p
}

func (*Client_assembly_specifierContext) IsClient_assembly_specifierContext() {}

func NewClient_assembly_specifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Client_assembly_specifierContext {
	var p = new(Client_assembly_specifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_client_assembly_specifier

	return p
}

func (s *Client_assembly_specifierContext) GetParser() antlr.Parser { return s.parser }

func (s *Client_assembly_specifierContext) Network_file_share() INetwork_file_shareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INetwork_file_shareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INetwork_file_shareContext)
}

func (s *Client_assembly_specifierContext) Local_file() ILocal_fileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_fileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_fileContext)
}

func (s *Client_assembly_specifierContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Client_assembly_specifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Client_assembly_specifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Client_assembly_specifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClient_assembly_specifier(s)
	}
}

func (s *Client_assembly_specifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClient_assembly_specifier(s)
	}
}

func (s *Client_assembly_specifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClient_assembly_specifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Client_assembly_specifier() (localctx IClient_assembly_specifierContext) {
	localctx = NewClient_assembly_specifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, TSqlParserRULE_client_assembly_specifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1463)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDOUBLE_BACK_SLASH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1460)
			p.Network_file_share()
		}

	case TSqlParserDISK_DRIVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1461)
			p.Local_file()
		}

	case TSqlParserSTRING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1462)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssembly_optionContext is an interface to support dynamic dispatch.
type IAssembly_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssembly_optionContext differentiates from other interfaces.
	IsAssembly_optionContext()
}

type Assembly_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssembly_optionContext() *Assembly_optionContext {
	var p = new(Assembly_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_assembly_option
	return p
}

func (*Assembly_optionContext) IsAssembly_optionContext() {}

func NewAssembly_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assembly_optionContext {
	var p = new(Assembly_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_assembly_option

	return p
}

func (s *Assembly_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Assembly_optionContext) PERMISSION_SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERMISSION_SET, 0)
}

func (s *Assembly_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Assembly_optionContext) SAFE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAFE, 0)
}

func (s *Assembly_optionContext) EXTERNAL_ACCESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL_ACCESS, 0)
}

func (s *Assembly_optionContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNSAFE, 0)
}

func (s *Assembly_optionContext) VISIBILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserVISIBILITY, 0)
}

func (s *Assembly_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Assembly_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Assembly_optionContext) UNCHECKED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNCHECKED, 0)
}

func (s *Assembly_optionContext) DATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA, 0)
}

func (s *Assembly_optionContext) Assembly_option() IAssembly_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssembly_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssembly_optionContext)
}

func (s *Assembly_optionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Assembly_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assembly_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assembly_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAssembly_option(s)
	}
}

func (s *Assembly_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAssembly_option(s)
	}
}

func (s *Assembly_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAssembly_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Assembly_option() (localctx IAssembly_optionContext) {
	return p.assembly_option(0)
}

func (p *TSqlParser) assembly_option(_p int) (localctx IAssembly_optionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAssembly_optionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAssembly_optionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 92
	p.EnterRecursionRule(localctx, 92, TSqlParserRULE_assembly_option, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1474)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserPERMISSION_SET:
		{
			p.SetState(1466)
			p.Match(TSqlParserPERMISSION_SET)
		}
		{
			p.SetState(1467)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(1468)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserEXTERNAL_ACCESS || _la == TSqlParserSAFE || _la == TSqlParserUNSAFE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserVISIBILITY:
		{
			p.SetState(1469)
			p.Match(TSqlParserVISIBILITY)
		}
		{
			p.SetState(1470)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(1471)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserUNCHECKED:
		{
			p.SetState(1472)
			p.Match(TSqlParserUNCHECKED)
		}
		{
			p.SetState(1473)
			p.Match(TSqlParserDATA)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1480)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAssembly_optionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_assembly_option)
			p.SetState(1476)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1477)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(1482)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext())
	}

	return localctx
}

// INetwork_file_shareContext is an interface to support dynamic dispatch.
type INetwork_file_shareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNetwork_file_shareContext differentiates from other interfaces.
	IsNetwork_file_shareContext()
}

type Network_file_shareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNetwork_file_shareContext() *Network_file_shareContext {
	var p = new(Network_file_shareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_network_file_share
	return p
}

func (*Network_file_shareContext) IsNetwork_file_shareContext() {}

func NewNetwork_file_shareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Network_file_shareContext {
	var p = new(Network_file_shareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_network_file_share

	return p
}

func (s *Network_file_shareContext) GetParser() antlr.Parser { return s.parser }

func (s *Network_file_shareContext) Network_file_start() INetwork_file_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INetwork_file_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INetwork_file_startContext)
}

func (s *Network_file_shareContext) Network_computer() INetwork_computerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INetwork_computerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INetwork_computerContext)
}

func (s *Network_file_shareContext) File_path() IFile_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_pathContext)
}

func (s *Network_file_shareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Network_file_shareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Network_file_shareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNetwork_file_share(s)
	}
}

func (s *Network_file_shareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNetwork_file_share(s)
	}
}

func (s *Network_file_shareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNetwork_file_share(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Network_file_share() (localctx INetwork_file_shareContext) {
	localctx = NewNetwork_file_shareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, TSqlParserRULE_network_file_share)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1483)
		p.Network_file_start()
	}
	{
		p.SetState(1484)
		p.Network_computer()
	}
	{
		p.SetState(1485)
		p.File_path()
	}

	return localctx
}

// INetwork_computerContext is an interface to support dynamic dispatch.
type INetwork_computerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComputer_name returns the computer_name rule contexts.
	GetComputer_name() IIdContext

	// SetComputer_name sets the computer_name rule contexts.
	SetComputer_name(IIdContext)

	// IsNetwork_computerContext differentiates from other interfaces.
	IsNetwork_computerContext()
}

type Network_computerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	computer_name IIdContext
}

func NewEmptyNetwork_computerContext() *Network_computerContext {
	var p = new(Network_computerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_network_computer
	return p
}

func (*Network_computerContext) IsNetwork_computerContext() {}

func NewNetwork_computerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Network_computerContext {
	var p = new(Network_computerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_network_computer

	return p
}

func (s *Network_computerContext) GetParser() antlr.Parser { return s.parser }

func (s *Network_computerContext) GetComputer_name() IIdContext { return s.computer_name }

func (s *Network_computerContext) SetComputer_name(v IIdContext) { s.computer_name = v }

func (s *Network_computerContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Network_computerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Network_computerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Network_computerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNetwork_computer(s)
	}
}

func (s *Network_computerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNetwork_computer(s)
	}
}

func (s *Network_computerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNetwork_computer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Network_computer() (localctx INetwork_computerContext) {
	localctx = NewNetwork_computerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, TSqlParserRULE_network_computer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1487)

		var _x = p.Id()

		localctx.(*Network_computerContext).computer_name = _x
	}

	return localctx
}

// INetwork_file_startContext is an interface to support dynamic dispatch.
type INetwork_file_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNetwork_file_startContext differentiates from other interfaces.
	IsNetwork_file_startContext()
}

type Network_file_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNetwork_file_startContext() *Network_file_startContext {
	var p = new(Network_file_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_network_file_start
	return p
}

func (*Network_file_startContext) IsNetwork_file_startContext() {}

func NewNetwork_file_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Network_file_startContext {
	var p = new(Network_file_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_network_file_start

	return p
}

func (s *Network_file_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Network_file_startContext) DOUBLE_BACK_SLASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOUBLE_BACK_SLASH, 0)
}

func (s *Network_file_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Network_file_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Network_file_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNetwork_file_start(s)
	}
}

func (s *Network_file_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNetwork_file_start(s)
	}
}

func (s *Network_file_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNetwork_file_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Network_file_start() (localctx INetwork_file_startContext) {
	localctx = NewNetwork_file_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, TSqlParserRULE_network_file_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1489)
		p.Match(TSqlParserDOUBLE_BACK_SLASH)
	}

	return localctx
}

// IFile_pathContext is an interface to support dynamic dispatch.
type IFile_pathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_pathContext differentiates from other interfaces.
	IsFile_pathContext()
}

type File_pathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_pathContext() *File_pathContext {
	var p = new(File_pathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_file_path
	return p
}

func (*File_pathContext) IsFile_pathContext() {}

func NewFile_pathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_pathContext {
	var p = new(File_pathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_file_path

	return p
}

func (s *File_pathContext) GetParser() antlr.Parser { return s.parser }

func (s *File_pathContext) File_directory_path_separator() IFile_directory_path_separatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_directory_path_separatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_directory_path_separatorContext)
}

func (s *File_pathContext) File_path() IFile_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_pathContext)
}

func (s *File_pathContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *File_pathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_pathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_pathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFile_path(s)
	}
}

func (s *File_pathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFile_path(s)
	}
}

func (s *File_pathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFile_path(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) File_path() (localctx IFile_pathContext) {
	localctx = NewFile_pathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, TSqlParserRULE_file_path)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1495)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserBACKSLASH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1491)
			p.File_directory_path_separator()
		}
		{
			p.SetState(1492)
			p.File_path()
		}

	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1494)
			p.Id()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFile_directory_path_separatorContext is an interface to support dynamic dispatch.
type IFile_directory_path_separatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_directory_path_separatorContext differentiates from other interfaces.
	IsFile_directory_path_separatorContext()
}

type File_directory_path_separatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_directory_path_separatorContext() *File_directory_path_separatorContext {
	var p = new(File_directory_path_separatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_file_directory_path_separator
	return p
}

func (*File_directory_path_separatorContext) IsFile_directory_path_separatorContext() {}

func NewFile_directory_path_separatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_directory_path_separatorContext {
	var p = new(File_directory_path_separatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_file_directory_path_separator

	return p
}

func (s *File_directory_path_separatorContext) GetParser() antlr.Parser { return s.parser }
func (s *File_directory_path_separatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_directory_path_separatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_directory_path_separatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFile_directory_path_separator(s)
	}
}

func (s *File_directory_path_separatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFile_directory_path_separator(s)
	}
}

func (s *File_directory_path_separatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFile_directory_path_separator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) File_directory_path_separator() (localctx IFile_directory_path_separatorContext) {
	localctx = NewFile_directory_path_separatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, TSqlParserRULE_file_directory_path_separator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1497)
		p.Match(TSqlParserBACKSLASH)
	}

	return localctx
}

// ILocal_fileContext is an interface to support dynamic dispatch.
type ILocal_fileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLocal_fileContext differentiates from other interfaces.
	IsLocal_fileContext()
}

type Local_fileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocal_fileContext() *Local_fileContext {
	var p = new(Local_fileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_local_file
	return p
}

func (*Local_fileContext) IsLocal_fileContext() {}

func NewLocal_fileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Local_fileContext {
	var p = new(Local_fileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_local_file

	return p
}

func (s *Local_fileContext) GetParser() antlr.Parser { return s.parser }

func (s *Local_fileContext) Local_drive() ILocal_driveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_driveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_driveContext)
}

func (s *Local_fileContext) File_path() IFile_pathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_pathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_pathContext)
}

func (s *Local_fileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Local_fileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Local_fileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterLocal_file(s)
	}
}

func (s *Local_fileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitLocal_file(s)
	}
}

func (s *Local_fileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitLocal_file(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Local_file() (localctx ILocal_fileContext) {
	localctx = NewLocal_fileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, TSqlParserRULE_local_file)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1499)
		p.Local_drive()
	}
	{
		p.SetState(1500)
		p.File_path()
	}

	return localctx
}

// ILocal_driveContext is an interface to support dynamic dispatch.
type ILocal_driveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLocal_driveContext differentiates from other interfaces.
	IsLocal_driveContext()
}

type Local_driveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLocal_driveContext() *Local_driveContext {
	var p = new(Local_driveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_local_drive
	return p
}

func (*Local_driveContext) IsLocal_driveContext() {}

func NewLocal_driveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Local_driveContext {
	var p = new(Local_driveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_local_drive

	return p
}

func (s *Local_driveContext) GetParser() antlr.Parser { return s.parser }

func (s *Local_driveContext) DISK_DRIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISK_DRIVE, 0)
}

func (s *Local_driveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Local_driveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Local_driveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterLocal_drive(s)
	}
}

func (s *Local_driveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitLocal_drive(s)
	}
}

func (s *Local_driveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitLocal_drive(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Local_drive() (localctx ILocal_driveContext) {
	localctx = NewLocal_driveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, TSqlParserRULE_local_drive)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1502)
		p.Match(TSqlParserDISK_DRIVE)
	}

	return localctx
}

// IMultiple_local_filesContext is an interface to support dynamic dispatch.
type IMultiple_local_filesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiple_local_filesContext differentiates from other interfaces.
	IsMultiple_local_filesContext()
}

type Multiple_local_filesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiple_local_filesContext() *Multiple_local_filesContext {
	var p = new(Multiple_local_filesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_multiple_local_files
	return p
}

func (*Multiple_local_filesContext) IsMultiple_local_filesContext() {}

func NewMultiple_local_filesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiple_local_filesContext {
	var p = new(Multiple_local_filesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_multiple_local_files

	return p
}

func (s *Multiple_local_filesContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiple_local_filesContext) Multiple_local_file_start() IMultiple_local_file_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiple_local_file_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiple_local_file_startContext)
}

func (s *Multiple_local_filesContext) Local_file() ILocal_fileContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILocal_fileContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILocal_fileContext)
}

func (s *Multiple_local_filesContext) SINGLE_QUOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSINGLE_QUOTE, 0)
}

func (s *Multiple_local_filesContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Multiple_local_filesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiple_local_filesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiple_local_filesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMultiple_local_files(s)
	}
}

func (s *Multiple_local_filesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMultiple_local_files(s)
	}
}

func (s *Multiple_local_filesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMultiple_local_files(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Multiple_local_files() (localctx IMultiple_local_filesContext) {
	localctx = NewMultiple_local_filesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, TSqlParserRULE_multiple_local_files)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1510)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSINGLE_QUOTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1504)
			p.Multiple_local_file_start()
		}
		{
			p.SetState(1505)
			p.Local_file()
		}
		{
			p.SetState(1506)
			p.Match(TSqlParserSINGLE_QUOTE)
		}
		{
			p.SetState(1507)
			p.Match(TSqlParserCOMMA)
		}

	case TSqlParserDISK_DRIVE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1509)
			p.Local_file()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMultiple_local_file_startContext is an interface to support dynamic dispatch.
type IMultiple_local_file_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiple_local_file_startContext differentiates from other interfaces.
	IsMultiple_local_file_startContext()
}

type Multiple_local_file_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiple_local_file_startContext() *Multiple_local_file_startContext {
	var p = new(Multiple_local_file_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_multiple_local_file_start
	return p
}

func (*Multiple_local_file_startContext) IsMultiple_local_file_startContext() {}

func NewMultiple_local_file_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiple_local_file_startContext {
	var p = new(Multiple_local_file_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_multiple_local_file_start

	return p
}

func (s *Multiple_local_file_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiple_local_file_startContext) SINGLE_QUOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSINGLE_QUOTE, 0)
}

func (s *Multiple_local_file_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiple_local_file_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiple_local_file_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMultiple_local_file_start(s)
	}
}

func (s *Multiple_local_file_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMultiple_local_file_start(s)
	}
}

func (s *Multiple_local_file_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMultiple_local_file_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Multiple_local_file_start() (localctx IMultiple_local_file_startContext) {
	localctx = NewMultiple_local_file_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, TSqlParserRULE_multiple_local_file_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1512)
		p.Match(TSqlParserSINGLE_QUOTE)
	}

	return localctx
}

// ICreate_assemblyContext is an interface to support dynamic dispatch.
type ICreate_assemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAssembly_name returns the assembly_name rule contexts.
	GetAssembly_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetAssembly_name sets the assembly_name rule contexts.
	SetAssembly_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_assemblyContext differentiates from other interfaces.
	IsCreate_assemblyContext()
}

type Create_assemblyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	assembly_name IIdContext
	owner_name    IIdContext
}

func NewEmptyCreate_assemblyContext() *Create_assemblyContext {
	var p = new(Create_assemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_assembly
	return p
}

func (*Create_assemblyContext) IsCreate_assemblyContext() {}

func NewCreate_assemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_assemblyContext {
	var p = new(Create_assemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_assembly

	return p
}

func (s *Create_assemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_assemblyContext) GetAssembly_name() IIdContext { return s.assembly_name }

func (s *Create_assemblyContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_assemblyContext) SetAssembly_name(v IIdContext) { s.assembly_name = v }

func (s *Create_assemblyContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_assemblyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_assemblyContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Create_assemblyContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_assemblyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_assemblyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_assemblyContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_assemblyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_assemblyContext) PERMISSION_SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERMISSION_SET, 0)
}

func (s *Create_assemblyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_assemblyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_assemblyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_assemblyContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBINARY)
}

func (s *Create_assemblyContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, i)
}

func (s *Create_assemblyContext) SAFE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAFE, 0)
}

func (s *Create_assemblyContext) EXTERNAL_ACCESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL_ACCESS, 0)
}

func (s *Create_assemblyContext) UNSAFE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNSAFE, 0)
}

func (s *Create_assemblyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_assemblyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_assemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_assemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_assemblyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_assembly(s)
	}
}

func (s *Create_assemblyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_assembly(s)
	}
}

func (s *Create_assemblyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_assembly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_assembly() (localctx ICreate_assemblyContext) {
	localctx = NewCreate_assemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, TSqlParserRULE_create_assembly)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1514)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(1515)
		p.Match(TSqlParserASSEMBLY)
	}
	{
		p.SetState(1516)

		var _x = p.Id()

		localctx.(*Create_assemblyContext).assembly_name = _x
	}
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(1517)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(1518)

			var _x = p.Id()

			localctx.(*Create_assemblyContext).owner_name = _x
		}

	}
	{
		p.SetState(1521)
		p.Match(TSqlParserFROM)
	}
	p.SetState(1526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-781)&-(0x1f+1)) == 0 && ((1<<uint((_la-781)))&((1<<(TSqlParserSTRING-781))|(1<<(TSqlParserBINARY-781))|(1<<(TSqlParserCOMMA-781)))) != 0) {
		p.SetState(1523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(1522)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(1525)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserSTRING || _la == TSqlParserBINARY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

		p.SetState(1528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1534)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1530)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(1531)
			p.Match(TSqlParserPERMISSION_SET)
		}
		{
			p.SetState(1532)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(1533)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserEXTERNAL_ACCESS || _la == TSqlParserSAFE || _la == TSqlParserUNSAFE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IDrop_assemblyContext is an interface to support dynamic dispatch.
type IDrop_assemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAssembly_name returns the assembly_name rule contexts.
	GetAssembly_name() IIdContext

	// SetAssembly_name sets the assembly_name rule contexts.
	SetAssembly_name(IIdContext)

	// IsDrop_assemblyContext differentiates from other interfaces.
	IsDrop_assemblyContext()
}

type Drop_assemblyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	assembly_name IIdContext
}

func NewEmptyDrop_assemblyContext() *Drop_assemblyContext {
	var p = new(Drop_assemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_assembly
	return p
}

func (*Drop_assemblyContext) IsDrop_assemblyContext() {}

func NewDrop_assemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_assemblyContext {
	var p = new(Drop_assemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_assembly

	return p
}

func (s *Drop_assemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_assemblyContext) GetAssembly_name() IIdContext { return s.assembly_name }

func (s *Drop_assemblyContext) SetAssembly_name(v IIdContext) { s.assembly_name = v }

func (s *Drop_assemblyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_assemblyContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Drop_assemblyContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_assemblyContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_assemblyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Drop_assemblyContext) NO() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, 0)
}

func (s *Drop_assemblyContext) DEPENDENTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEPENDENTS, 0)
}

func (s *Drop_assemblyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_assemblyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_assemblyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Drop_assemblyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Drop_assemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_assemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_assemblyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_assembly(s)
	}
}

func (s *Drop_assemblyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_assembly(s)
	}
}

func (s *Drop_assemblyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_assembly(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_assembly() (localctx IDrop_assemblyContext) {
	localctx = NewDrop_assemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, TSqlParserRULE_drop_assembly)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1536)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(1537)
		p.Match(TSqlParserASSEMBLY)
	}
	p.SetState(1540)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(1538)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(1539)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(1546)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1543)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1542)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1545)

				var _x = p.Id()

				localctx.(*Drop_assemblyContext).assembly_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1548)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext())
	}
	p.SetState(1553)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1550)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(1551)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(1552)
			p.Match(TSqlParserDEPENDENTS)
		}

	}

	return localctx
}

// IAlter_asymmetric_keyContext is an interface to support dynamic dispatch.
type IAlter_asymmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAsym_Key_Name returns the Asym_Key_Name rule contexts.
	GetAsym_Key_Name() IIdContext

	// SetAsym_Key_Name sets the Asym_Key_Name rule contexts.
	SetAsym_Key_Name(IIdContext)

	// IsAlter_asymmetric_keyContext differentiates from other interfaces.
	IsAlter_asymmetric_keyContext()
}

type Alter_asymmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	Asym_Key_Name IIdContext
}

func NewEmptyAlter_asymmetric_keyContext() *Alter_asymmetric_keyContext {
	var p = new(Alter_asymmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_asymmetric_key
	return p
}

func (*Alter_asymmetric_keyContext) IsAlter_asymmetric_keyContext() {}

func NewAlter_asymmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_asymmetric_keyContext {
	var p = new(Alter_asymmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_asymmetric_key

	return p
}

func (s *Alter_asymmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_asymmetric_keyContext) GetAsym_Key_Name() IIdContext { return s.Asym_Key_Name }

func (s *Alter_asymmetric_keyContext) SetAsym_Key_Name(v IIdContext) { s.Asym_Key_Name = v }

func (s *Alter_asymmetric_keyContext) Alter_asymmetric_key_start() IAlter_asymmetric_key_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_asymmetric_key_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_asymmetric_key_startContext)
}

func (s *Alter_asymmetric_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_asymmetric_keyContext) Asymmetric_key_option() IAsymmetric_key_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsymmetric_key_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsymmetric_key_optionContext)
}

func (s *Alter_asymmetric_keyContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Alter_asymmetric_keyContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE, 0)
}

func (s *Alter_asymmetric_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_asymmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_asymmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_asymmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_asymmetric_key(s)
	}
}

func (s *Alter_asymmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_asymmetric_key(s)
	}
}

func (s *Alter_asymmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_asymmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_asymmetric_key() (localctx IAlter_asymmetric_keyContext) {
	localctx = NewAlter_asymmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, TSqlParserRULE_alter_asymmetric_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1555)
		p.Alter_asymmetric_key_start()
	}
	{
		p.SetState(1556)

		var _x = p.Id()

		localctx.(*Alter_asymmetric_keyContext).Asym_Key_Name = _x
	}
	p.SetState(1561)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserWITH:
		{
			p.SetState(1557)
			p.Asymmetric_key_option()
		}

	case TSqlParserREMOVE:
		{
			p.SetState(1558)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(1559)
			p.Match(TSqlParserPRIVATE)
		}
		{
			p.SetState(1560)
			p.Match(TSqlParserKEY)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_asymmetric_key_startContext is an interface to support dynamic dispatch.
type IAlter_asymmetric_key_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_asymmetric_key_startContext differentiates from other interfaces.
	IsAlter_asymmetric_key_startContext()
}

type Alter_asymmetric_key_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_asymmetric_key_startContext() *Alter_asymmetric_key_startContext {
	var p = new(Alter_asymmetric_key_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_asymmetric_key_start
	return p
}

func (*Alter_asymmetric_key_startContext) IsAlter_asymmetric_key_startContext() {}

func NewAlter_asymmetric_key_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_asymmetric_key_startContext {
	var p = new(Alter_asymmetric_key_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_asymmetric_key_start

	return p
}

func (s *Alter_asymmetric_key_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_asymmetric_key_startContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_asymmetric_key_startContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Alter_asymmetric_key_startContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_asymmetric_key_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_asymmetric_key_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_asymmetric_key_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_asymmetric_key_start(s)
	}
}

func (s *Alter_asymmetric_key_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_asymmetric_key_start(s)
	}
}

func (s *Alter_asymmetric_key_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_asymmetric_key_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_asymmetric_key_start() (localctx IAlter_asymmetric_key_startContext) {
	localctx = NewAlter_asymmetric_key_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, TSqlParserRULE_alter_asymmetric_key_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1563)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(1564)
		p.Match(TSqlParserASYMMETRIC)
	}
	{
		p.SetState(1565)
		p.Match(TSqlParserKEY)
	}

	return localctx
}

// IAsymmetric_key_optionContext is an interface to support dynamic dispatch.
type IAsymmetric_key_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsymmetric_key_optionContext differentiates from other interfaces.
	IsAsymmetric_key_optionContext()
}

type Asymmetric_key_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsymmetric_key_optionContext() *Asymmetric_key_optionContext {
	var p = new(Asymmetric_key_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_asymmetric_key_option
	return p
}

func (*Asymmetric_key_optionContext) IsAsymmetric_key_optionContext() {}

func NewAsymmetric_key_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asymmetric_key_optionContext {
	var p = new(Asymmetric_key_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_asymmetric_key_option

	return p
}

func (s *Asymmetric_key_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Asymmetric_key_optionContext) Asymmetric_key_option_start() IAsymmetric_key_option_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsymmetric_key_option_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsymmetric_key_option_startContext)
}

func (s *Asymmetric_key_optionContext) AllAsymmetric_key_password_change_option() []IAsymmetric_key_password_change_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAsymmetric_key_password_change_optionContext)(nil)).Elem())
	var tst = make([]IAsymmetric_key_password_change_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAsymmetric_key_password_change_optionContext)
		}
	}

	return tst
}

func (s *Asymmetric_key_optionContext) Asymmetric_key_password_change_option(i int) IAsymmetric_key_password_change_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsymmetric_key_password_change_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAsymmetric_key_password_change_optionContext)
}

func (s *Asymmetric_key_optionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Asymmetric_key_optionContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Asymmetric_key_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asymmetric_key_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asymmetric_key_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAsymmetric_key_option(s)
	}
}

func (s *Asymmetric_key_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAsymmetric_key_option(s)
	}
}

func (s *Asymmetric_key_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAsymmetric_key_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Asymmetric_key_option() (localctx IAsymmetric_key_optionContext) {
	localctx = NewAsymmetric_key_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, TSqlParserRULE_asymmetric_key_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1567)
		p.Asymmetric_key_option_start()
	}
	{
		p.SetState(1568)
		p.Asymmetric_key_password_change_option()
	}
	p.SetState(1571)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(1569)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(1570)
			p.Asymmetric_key_password_change_option()
		}

	}
	{
		p.SetState(1573)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IAsymmetric_key_option_startContext is an interface to support dynamic dispatch.
type IAsymmetric_key_option_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsymmetric_key_option_startContext differentiates from other interfaces.
	IsAsymmetric_key_option_startContext()
}

type Asymmetric_key_option_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsymmetric_key_option_startContext() *Asymmetric_key_option_startContext {
	var p = new(Asymmetric_key_option_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_asymmetric_key_option_start
	return p
}

func (*Asymmetric_key_option_startContext) IsAsymmetric_key_option_startContext() {}

func NewAsymmetric_key_option_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asymmetric_key_option_startContext {
	var p = new(Asymmetric_key_option_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_asymmetric_key_option_start

	return p
}

func (s *Asymmetric_key_option_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Asymmetric_key_option_startContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Asymmetric_key_option_startContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE, 0)
}

func (s *Asymmetric_key_option_startContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Asymmetric_key_option_startContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Asymmetric_key_option_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asymmetric_key_option_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asymmetric_key_option_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAsymmetric_key_option_start(s)
	}
}

func (s *Asymmetric_key_option_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAsymmetric_key_option_start(s)
	}
}

func (s *Asymmetric_key_option_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAsymmetric_key_option_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Asymmetric_key_option_start() (localctx IAsymmetric_key_option_startContext) {
	localctx = NewAsymmetric_key_option_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, TSqlParserRULE_asymmetric_key_option_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1575)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(1576)
		p.Match(TSqlParserPRIVATE)
	}
	{
		p.SetState(1577)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(1578)
		p.Match(TSqlParserLR_BRACKET)
	}

	return localctx
}

// IAsymmetric_key_password_change_optionContext is an interface to support dynamic dispatch.
type IAsymmetric_key_password_change_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsymmetric_key_password_change_optionContext differentiates from other interfaces.
	IsAsymmetric_key_password_change_optionContext()
}

type Asymmetric_key_password_change_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsymmetric_key_password_change_optionContext() *Asymmetric_key_password_change_optionContext {
	var p = new(Asymmetric_key_password_change_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_asymmetric_key_password_change_option
	return p
}

func (*Asymmetric_key_password_change_optionContext) IsAsymmetric_key_password_change_optionContext() {
}

func NewAsymmetric_key_password_change_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Asymmetric_key_password_change_optionContext {
	var p = new(Asymmetric_key_password_change_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_asymmetric_key_password_change_option

	return p
}

func (s *Asymmetric_key_password_change_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Asymmetric_key_password_change_optionContext) DECRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECRYPTION, 0)
}

func (s *Asymmetric_key_password_change_optionContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Asymmetric_key_password_change_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Asymmetric_key_password_change_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Asymmetric_key_password_change_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Asymmetric_key_password_change_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Asymmetric_key_password_change_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Asymmetric_key_password_change_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Asymmetric_key_password_change_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAsymmetric_key_password_change_option(s)
	}
}

func (s *Asymmetric_key_password_change_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAsymmetric_key_password_change_option(s)
	}
}

func (s *Asymmetric_key_password_change_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAsymmetric_key_password_change_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Asymmetric_key_password_change_option() (localctx IAsymmetric_key_password_change_optionContext) {
	localctx = NewAsymmetric_key_password_change_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, TSqlParserRULE_asymmetric_key_password_change_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1590)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDECRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1580)
			p.Match(TSqlParserDECRYPTION)
		}
		{
			p.SetState(1581)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(1582)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(1583)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1584)
			p.Match(TSqlParserSTRING)
		}

	case TSqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1585)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(1586)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(1587)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(1588)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1589)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_asymmetric_keyContext is an interface to support dynamic dispatch.
type ICreate_asymmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider_key_name returns the provider_key_name token.
	GetProvider_key_name() antlr.Token

	// GetAsymmetric_key_password returns the asymmetric_key_password token.
	GetAsymmetric_key_password() antlr.Token

	// SetProvider_key_name sets the provider_key_name token.
	SetProvider_key_name(antlr.Token)

	// SetAsymmetric_key_password sets the asymmetric_key_password token.
	SetAsymmetric_key_password(antlr.Token)

	// GetAsym_Key_Nam returns the Asym_Key_Nam rule contexts.
	GetAsym_Key_Nam() IIdContext

	// GetDatabase_principal_name returns the database_principal_name rule contexts.
	GetDatabase_principal_name() IIdContext

	// GetAssembly_Name returns the Assembly_Name rule contexts.
	GetAssembly_Name() IIdContext

	// GetProvider_Name returns the Provider_Name rule contexts.
	GetProvider_Name() IIdContext

	// SetAsym_Key_Nam sets the Asym_Key_Nam rule contexts.
	SetAsym_Key_Nam(IIdContext)

	// SetDatabase_principal_name sets the database_principal_name rule contexts.
	SetDatabase_principal_name(IIdContext)

	// SetAssembly_Name sets the Assembly_Name rule contexts.
	SetAssembly_Name(IIdContext)

	// SetProvider_Name sets the Provider_Name rule contexts.
	SetProvider_Name(IIdContext)

	// IsCreate_asymmetric_keyContext differentiates from other interfaces.
	IsCreate_asymmetric_keyContext()
}

type Create_asymmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	Asym_Key_Nam            IIdContext
	database_principal_name IIdContext
	Assembly_Name           IIdContext
	Provider_Name           IIdContext
	provider_key_name       antlr.Token
	asymmetric_key_password antlr.Token
}

func NewEmptyCreate_asymmetric_keyContext() *Create_asymmetric_keyContext {
	var p = new(Create_asymmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_asymmetric_key
	return p
}

func (*Create_asymmetric_keyContext) IsCreate_asymmetric_keyContext() {}

func NewCreate_asymmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_asymmetric_keyContext {
	var p = new(Create_asymmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_asymmetric_key

	return p
}

func (s *Create_asymmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_asymmetric_keyContext) GetProvider_key_name() antlr.Token { return s.provider_key_name }

func (s *Create_asymmetric_keyContext) GetAsymmetric_key_password() antlr.Token {
	return s.asymmetric_key_password
}

func (s *Create_asymmetric_keyContext) SetProvider_key_name(v antlr.Token) { s.provider_key_name = v }

func (s *Create_asymmetric_keyContext) SetAsymmetric_key_password(v antlr.Token) {
	s.asymmetric_key_password = v
}

func (s *Create_asymmetric_keyContext) GetAsym_Key_Nam() IIdContext { return s.Asym_Key_Nam }

func (s *Create_asymmetric_keyContext) GetDatabase_principal_name() IIdContext {
	return s.database_principal_name
}

func (s *Create_asymmetric_keyContext) GetAssembly_Name() IIdContext { return s.Assembly_Name }

func (s *Create_asymmetric_keyContext) GetProvider_Name() IIdContext { return s.Provider_Name }

func (s *Create_asymmetric_keyContext) SetAsym_Key_Nam(v IIdContext) { s.Asym_Key_Nam = v }

func (s *Create_asymmetric_keyContext) SetDatabase_principal_name(v IIdContext) {
	s.database_principal_name = v
}

func (s *Create_asymmetric_keyContext) SetAssembly_Name(v IIdContext) { s.Assembly_Name = v }

func (s *Create_asymmetric_keyContext) SetProvider_Name(v IIdContext) { s.Provider_Name = v }

func (s *Create_asymmetric_keyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_asymmetric_keyContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Create_asymmetric_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_asymmetric_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_asymmetric_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_asymmetric_keyContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_asymmetric_keyContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_asymmetric_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_asymmetric_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Create_asymmetric_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Create_asymmetric_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_asymmetric_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_asymmetric_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_asymmetric_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_asymmetric_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_asymmetric_keyContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Create_asymmetric_keyContext) EXECUTABLE_FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTABLE_FILE, 0)
}

func (s *Create_asymmetric_keyContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Create_asymmetric_keyContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_asymmetric_keyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, 0)
}

func (s *Create_asymmetric_keyContext) PROVIDER_KEY_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER_KEY_NAME, 0)
}

func (s *Create_asymmetric_keyContext) CREATION_DISPOSITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATION_DISPOSITION, 0)
}

func (s *Create_asymmetric_keyContext) RSA_4096() antlr.TerminalNode {
	return s.GetToken(TSqlParserRSA_4096, 0)
}

func (s *Create_asymmetric_keyContext) RSA_3072() antlr.TerminalNode {
	return s.GetToken(TSqlParserRSA_3072, 0)
}

func (s *Create_asymmetric_keyContext) RSA_2048() antlr.TerminalNode {
	return s.GetToken(TSqlParserRSA_2048, 0)
}

func (s *Create_asymmetric_keyContext) RSA_1024() antlr.TerminalNode {
	return s.GetToken(TSqlParserRSA_1024, 0)
}

func (s *Create_asymmetric_keyContext) RSA_512() antlr.TerminalNode {
	return s.GetToken(TSqlParserRSA_512, 0)
}

func (s *Create_asymmetric_keyContext) CREATE_NEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE_NEW, 0)
}

func (s *Create_asymmetric_keyContext) OPEN_EXISTING() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPEN_EXISTING, 0)
}

func (s *Create_asymmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_asymmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_asymmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_asymmetric_key(s)
	}
}

func (s *Create_asymmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_asymmetric_key(s)
	}
}

func (s *Create_asymmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_asymmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_asymmetric_key() (localctx ICreate_asymmetric_keyContext) {
	localctx = NewCreate_asymmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, TSqlParserRULE_create_asymmetric_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1592)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(1593)
		p.Match(TSqlParserASYMMETRIC)
	}
	{
		p.SetState(1594)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(1595)

		var _x = p.Id()

		localctx.(*Create_asymmetric_keyContext).Asym_Key_Nam = _x
	}
	p.SetState(1598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(1596)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(1597)

			var _x = p.Id()

			localctx.(*Create_asymmetric_keyContext).database_principal_name = _x
		}

	}
	p.SetState(1613)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(1600)
			p.Match(TSqlParserFROM)
		}
		p.SetState(1611)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserFILE:
			{
				p.SetState(1601)
				p.Match(TSqlParserFILE)
			}
			{
				p.SetState(1602)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1603)
				p.Match(TSqlParserSTRING)
			}

		case TSqlParserEXECUTABLE_FILE:
			{
				p.SetState(1604)
				p.Match(TSqlParserEXECUTABLE_FILE)
			}
			{
				p.SetState(1605)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1606)
				p.Match(TSqlParserSTRING)
			}

		case TSqlParserASSEMBLY:
			{
				p.SetState(1607)
				p.Match(TSqlParserASSEMBLY)
			}
			{
				p.SetState(1608)

				var _x = p.Id()

				localctx.(*Create_asymmetric_keyContext).Assembly_Name = _x
			}

		case TSqlParserPROVIDER:
			{
				p.SetState(1609)
				p.Match(TSqlParserPROVIDER)
			}
			{
				p.SetState(1610)

				var _x = p.Id()

				localctx.(*Create_asymmetric_keyContext).Provider_Name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(1627)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1615)
			p.Match(TSqlParserWITH)
		}
		p.SetState(1625)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserALGORITHM:
			{
				p.SetState(1616)
				p.Match(TSqlParserALGORITHM)
			}
			{
				p.SetState(1617)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1618)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-289)&-(0x1f+1)) == 0 && ((1<<uint((_la-289)))&((1<<(TSqlParserRSA_512-289))|(1<<(TSqlParserRSA_1024-289))|(1<<(TSqlParserRSA_2048-289))|(1<<(TSqlParserRSA_3072-289))|(1<<(TSqlParserRSA_4096-289)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserPROVIDER_KEY_NAME:
			{
				p.SetState(1619)
				p.Match(TSqlParserPROVIDER_KEY_NAME)
			}
			{
				p.SetState(1620)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1621)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_asymmetric_keyContext).provider_key_name = _m
			}

		case TSqlParserCREATION_DISPOSITION:
			{
				p.SetState(1622)
				p.Match(TSqlParserCREATION_DISPOSITION)
			}
			{
				p.SetState(1623)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1624)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserCREATE_NEW || _la == TSqlParserOPEN_EXISTING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(1634)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1629)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(1630)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(1631)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(1632)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(1633)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_asymmetric_keyContext).asymmetric_key_password = _m
		}

	}

	return localctx
}

// IDrop_asymmetric_keyContext is an interface to support dynamic dispatch.
type IDrop_asymmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsDrop_asymmetric_keyContext differentiates from other interfaces.
	IsDrop_asymmetric_keyContext()
}

type Drop_asymmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	key_name IIdContext
}

func NewEmptyDrop_asymmetric_keyContext() *Drop_asymmetric_keyContext {
	var p = new(Drop_asymmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_asymmetric_key
	return p
}

func (*Drop_asymmetric_keyContext) IsDrop_asymmetric_keyContext() {}

func NewDrop_asymmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_asymmetric_keyContext {
	var p = new(Drop_asymmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_asymmetric_key

	return p
}

func (s *Drop_asymmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_asymmetric_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Drop_asymmetric_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Drop_asymmetric_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_asymmetric_keyContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Drop_asymmetric_keyContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Drop_asymmetric_keyContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Drop_asymmetric_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_asymmetric_keyContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Drop_asymmetric_keyContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Drop_asymmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_asymmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_asymmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_asymmetric_key(s)
	}
}

func (s *Drop_asymmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_asymmetric_key(s)
	}
}

func (s *Drop_asymmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_asymmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_asymmetric_key() (localctx IDrop_asymmetric_keyContext) {
	localctx = NewDrop_asymmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, TSqlParserRULE_drop_asymmetric_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1636)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(1637)
		p.Match(TSqlParserASYMMETRIC)
	}
	{
		p.SetState(1638)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(1639)

		var _x = p.Id()

		localctx.(*Drop_asymmetric_keyContext).key_name = _x
	}
	p.SetState(1643)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserREMOVE {
		{
			p.SetState(1640)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(1641)
			p.Match(TSqlParserPROVIDER)
		}
		{
			p.SetState(1642)
			p.Match(TSqlParserKEY)
		}

	}

	return localctx
}

// IAlter_authorizationContext is an interface to support dynamic dispatch.
type IAlter_authorizationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEntity returns the entity rule contexts.
	GetEntity() IEntity_nameContext

	// SetEntity sets the entity rule contexts.
	SetEntity(IEntity_nameContext)

	// IsAlter_authorizationContext differentiates from other interfaces.
	IsAlter_authorizationContext()
}

type Alter_authorizationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	entity IEntity_nameContext
}

func NewEmptyAlter_authorizationContext() *Alter_authorizationContext {
	var p = new(Alter_authorizationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_authorization
	return p
}

func (*Alter_authorizationContext) IsAlter_authorizationContext() {}

func NewAlter_authorizationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_authorizationContext {
	var p = new(Alter_authorizationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_authorization

	return p
}

func (s *Alter_authorizationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_authorizationContext) GetEntity() IEntity_nameContext { return s.entity }

func (s *Alter_authorizationContext) SetEntity(v IEntity_nameContext) { s.entity = v }

func (s *Alter_authorizationContext) Alter_authorization_start() IAlter_authorization_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_startContext)
}

func (s *Alter_authorizationContext) Entity_to() IEntity_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_toContext)
}

func (s *Alter_authorizationContext) Authorization_grantee() IAuthorization_granteeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorization_granteeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorization_granteeContext)
}

func (s *Alter_authorizationContext) Entity_name() IEntity_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_nameContext)
}

func (s *Alter_authorizationContext) Class_type() IClass_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_typeContext)
}

func (s *Alter_authorizationContext) Colon_colon() IColon_colonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColon_colonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColon_colonContext)
}

func (s *Alter_authorizationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_authorizationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_authorizationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_authorization(s)
	}
}

func (s *Alter_authorizationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_authorization(s)
	}
}

func (s *Alter_authorizationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_authorization(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_authorization() (localctx IAlter_authorizationContext) {
	localctx = NewAlter_authorizationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, TSqlParserRULE_alter_authorization)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1645)
		p.Alter_authorization_start()
	}
	p.SetState(1649)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1646)
			p.Class_type()
		}
		{
			p.SetState(1647)
			p.Colon_colon()
		}

	}
	{
		p.SetState(1651)

		var _x = p.Entity_name()

		localctx.(*Alter_authorizationContext).entity = _x
	}
	{
		p.SetState(1652)
		p.Entity_to()
	}
	{
		p.SetState(1653)
		p.Authorization_grantee()
	}

	return localctx
}

// IAuthorization_granteeContext is an interface to support dynamic dispatch.
type IAuthorization_granteeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPrincipal_name returns the principal_name rule contexts.
	GetPrincipal_name() IIdContext

	// SetPrincipal_name sets the principal_name rule contexts.
	SetPrincipal_name(IIdContext)

	// IsAuthorization_granteeContext differentiates from other interfaces.
	IsAuthorization_granteeContext()
}

type Authorization_granteeContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	principal_name IIdContext
}

func NewEmptyAuthorization_granteeContext() *Authorization_granteeContext {
	var p = new(Authorization_granteeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_authorization_grantee
	return p
}

func (*Authorization_granteeContext) IsAuthorization_granteeContext() {}

func NewAuthorization_granteeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Authorization_granteeContext {
	var p = new(Authorization_granteeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_authorization_grantee

	return p
}

func (s *Authorization_granteeContext) GetParser() antlr.Parser { return s.parser }

func (s *Authorization_granteeContext) GetPrincipal_name() IIdContext { return s.principal_name }

func (s *Authorization_granteeContext) SetPrincipal_name(v IIdContext) { s.principal_name = v }

func (s *Authorization_granteeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Authorization_granteeContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Authorization_granteeContext) OWNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOWNER, 0)
}

func (s *Authorization_granteeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Authorization_granteeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Authorization_granteeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAuthorization_grantee(s)
	}
}

func (s *Authorization_granteeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAuthorization_grantee(s)
	}
}

func (s *Authorization_granteeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAuthorization_grantee(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Authorization_grantee() (localctx IAuthorization_granteeContext) {
	localctx = NewAuthorization_granteeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, TSqlParserRULE_authorization_grantee)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1658)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1655)

			var _x = p.Id()

			localctx.(*Authorization_granteeContext).principal_name = _x
		}

	case TSqlParserSCHEMA:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1656)
			p.Match(TSqlParserSCHEMA)
		}
		{
			p.SetState(1657)
			p.Match(TSqlParserOWNER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEntity_toContext is an interface to support dynamic dispatch.
type IEntity_toContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEntity_toContext differentiates from other interfaces.
	IsEntity_toContext()
}

type Entity_toContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEntity_toContext() *Entity_toContext {
	var p = new(Entity_toContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_entity_to
	return p
}

func (*Entity_toContext) IsEntity_toContext() {}

func NewEntity_toContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Entity_toContext {
	var p = new(Entity_toContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_entity_to

	return p
}

func (s *Entity_toContext) GetParser() antlr.Parser { return s.parser }

func (s *Entity_toContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Entity_toContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Entity_toContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Entity_toContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEntity_to(s)
	}
}

func (s *Entity_toContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEntity_to(s)
	}
}

func (s *Entity_toContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEntity_to(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Entity_to() (localctx IEntity_toContext) {
	localctx = NewEntity_toContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, TSqlParserRULE_entity_to)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1660)
		p.Match(TSqlParserTO)
	}

	return localctx
}

// IColon_colonContext is an interface to support dynamic dispatch.
type IColon_colonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColon_colonContext differentiates from other interfaces.
	IsColon_colonContext()
}

type Colon_colonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColon_colonContext() *Colon_colonContext {
	var p = new(Colon_colonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_colon_colon
	return p
}

func (*Colon_colonContext) IsColon_colonContext() {}

func NewColon_colonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Colon_colonContext {
	var p = new(Colon_colonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_colon_colon

	return p
}

func (s *Colon_colonContext) GetParser() antlr.Parser { return s.parser }

func (s *Colon_colonContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOLON)
}

func (s *Colon_colonContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, i)
}

func (s *Colon_colonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Colon_colonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Colon_colonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColon_colon(s)
	}
}

func (s *Colon_colonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColon_colon(s)
	}
}

func (s *Colon_colonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColon_colon(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Colon_colon() (localctx IColon_colonContext) {
	localctx = NewColon_colonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, TSqlParserRULE_colon_colon)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1662)
		p.Match(TSqlParserCOLON)
	}
	{
		p.SetState(1663)
		p.Match(TSqlParserCOLON)
	}

	return localctx
}

// IAlter_authorization_startContext is an interface to support dynamic dispatch.
type IAlter_authorization_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_authorization_startContext differentiates from other interfaces.
	IsAlter_authorization_startContext()
}

type Alter_authorization_startContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_authorization_startContext() *Alter_authorization_startContext {
	var p = new(Alter_authorization_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_authorization_start
	return p
}

func (*Alter_authorization_startContext) IsAlter_authorization_startContext() {}

func NewAlter_authorization_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_authorization_startContext {
	var p = new(Alter_authorization_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_authorization_start

	return p
}

func (s *Alter_authorization_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_authorization_startContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_authorization_startContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Alter_authorization_startContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_authorization_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_authorization_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_authorization_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_authorization_start(s)
	}
}

func (s *Alter_authorization_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_authorization_start(s)
	}
}

func (s *Alter_authorization_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_authorization_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_authorization_start() (localctx IAlter_authorization_startContext) {
	localctx = NewAlter_authorization_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, TSqlParserRULE_alter_authorization_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1665)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(1666)
		p.Match(TSqlParserAUTHORIZATION)
	}
	{
		p.SetState(1667)
		p.Match(TSqlParserON)
	}

	return localctx
}

// IAlter_authorization_for_sql_databaseContext is an interface to support dynamic dispatch.
type IAlter_authorization_for_sql_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEntity returns the entity rule contexts.
	GetEntity() IEntity_nameContext

	// SetEntity sets the entity rule contexts.
	SetEntity(IEntity_nameContext)

	// IsAlter_authorization_for_sql_databaseContext differentiates from other interfaces.
	IsAlter_authorization_for_sql_databaseContext()
}

type Alter_authorization_for_sql_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	entity IEntity_nameContext
}

func NewEmptyAlter_authorization_for_sql_databaseContext() *Alter_authorization_for_sql_databaseContext {
	var p = new(Alter_authorization_for_sql_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_sql_database
	return p
}

func (*Alter_authorization_for_sql_databaseContext) IsAlter_authorization_for_sql_databaseContext() {}

func NewAlter_authorization_for_sql_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_authorization_for_sql_databaseContext {
	var p = new(Alter_authorization_for_sql_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_sql_database

	return p
}

func (s *Alter_authorization_for_sql_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_authorization_for_sql_databaseContext) GetEntity() IEntity_nameContext { return s.entity }

func (s *Alter_authorization_for_sql_databaseContext) SetEntity(v IEntity_nameContext) { s.entity = v }

func (s *Alter_authorization_for_sql_databaseContext) Alter_authorization_start() IAlter_authorization_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_startContext)
}

func (s *Alter_authorization_for_sql_databaseContext) Entity_to() IEntity_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_toContext)
}

func (s *Alter_authorization_for_sql_databaseContext) Authorization_grantee() IAuthorization_granteeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorization_granteeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorization_granteeContext)
}

func (s *Alter_authorization_for_sql_databaseContext) Entity_name() IEntity_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_nameContext)
}

func (s *Alter_authorization_for_sql_databaseContext) Class_type_for_sql_database() IClass_type_for_sql_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_type_for_sql_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_type_for_sql_databaseContext)
}

func (s *Alter_authorization_for_sql_databaseContext) Colon_colon() IColon_colonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColon_colonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColon_colonContext)
}

func (s *Alter_authorization_for_sql_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_authorization_for_sql_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_authorization_for_sql_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_authorization_for_sql_database(s)
	}
}

func (s *Alter_authorization_for_sql_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_authorization_for_sql_database(s)
	}
}

func (s *Alter_authorization_for_sql_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_authorization_for_sql_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_authorization_for_sql_database() (localctx IAlter_authorization_for_sql_databaseContext) {
	localctx = NewAlter_authorization_for_sql_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, TSqlParserRULE_alter_authorization_for_sql_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1669)
		p.Alter_authorization_start()
	}
	p.SetState(1673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1670)
			p.Class_type_for_sql_database()
		}
		{
			p.SetState(1671)
			p.Colon_colon()
		}

	}
	{
		p.SetState(1675)

		var _x = p.Entity_name()

		localctx.(*Alter_authorization_for_sql_databaseContext).entity = _x
	}
	{
		p.SetState(1676)
		p.Entity_to()
	}
	{
		p.SetState(1677)
		p.Authorization_grantee()
	}

	return localctx
}

// IAlter_authorization_for_azure_dwContext is an interface to support dynamic dispatch.
type IAlter_authorization_for_azure_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEntity returns the entity rule contexts.
	GetEntity() IEntity_name_for_azure_dwContext

	// SetEntity sets the entity rule contexts.
	SetEntity(IEntity_name_for_azure_dwContext)

	// IsAlter_authorization_for_azure_dwContext differentiates from other interfaces.
	IsAlter_authorization_for_azure_dwContext()
}

type Alter_authorization_for_azure_dwContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	entity IEntity_name_for_azure_dwContext
}

func NewEmptyAlter_authorization_for_azure_dwContext() *Alter_authorization_for_azure_dwContext {
	var p = new(Alter_authorization_for_azure_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_azure_dw
	return p
}

func (*Alter_authorization_for_azure_dwContext) IsAlter_authorization_for_azure_dwContext() {}

func NewAlter_authorization_for_azure_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_authorization_for_azure_dwContext {
	var p = new(Alter_authorization_for_azure_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_azure_dw

	return p
}

func (s *Alter_authorization_for_azure_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_authorization_for_azure_dwContext) GetEntity() IEntity_name_for_azure_dwContext {
	return s.entity
}

func (s *Alter_authorization_for_azure_dwContext) SetEntity(v IEntity_name_for_azure_dwContext) {
	s.entity = v
}

func (s *Alter_authorization_for_azure_dwContext) Alter_authorization_start() IAlter_authorization_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_startContext)
}

func (s *Alter_authorization_for_azure_dwContext) Entity_to() IEntity_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_toContext)
}

func (s *Alter_authorization_for_azure_dwContext) Authorization_grantee() IAuthorization_granteeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorization_granteeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorization_granteeContext)
}

func (s *Alter_authorization_for_azure_dwContext) Entity_name_for_azure_dw() IEntity_name_for_azure_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_name_for_azure_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_name_for_azure_dwContext)
}

func (s *Alter_authorization_for_azure_dwContext) Class_type_for_azure_dw() IClass_type_for_azure_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_type_for_azure_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_type_for_azure_dwContext)
}

func (s *Alter_authorization_for_azure_dwContext) Colon_colon() IColon_colonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColon_colonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColon_colonContext)
}

func (s *Alter_authorization_for_azure_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_authorization_for_azure_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_authorization_for_azure_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_authorization_for_azure_dw(s)
	}
}

func (s *Alter_authorization_for_azure_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_authorization_for_azure_dw(s)
	}
}

func (s *Alter_authorization_for_azure_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_authorization_for_azure_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_authorization_for_azure_dw() (localctx IAlter_authorization_for_azure_dwContext) {
	localctx = NewAlter_authorization_for_azure_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, TSqlParserRULE_alter_authorization_for_azure_dw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1679)
		p.Alter_authorization_start()
	}
	p.SetState(1683)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSCHEMA || _la == TSqlParserOBJECT {
		{
			p.SetState(1680)
			p.Class_type_for_azure_dw()
		}
		{
			p.SetState(1681)
			p.Colon_colon()
		}

	}
	{
		p.SetState(1685)

		var _x = p.Entity_name_for_azure_dw()

		localctx.(*Alter_authorization_for_azure_dwContext).entity = _x
	}
	{
		p.SetState(1686)
		p.Entity_to()
	}
	{
		p.SetState(1687)
		p.Authorization_grantee()
	}

	return localctx
}

// IAlter_authorization_for_parallel_dwContext is an interface to support dynamic dispatch.
type IAlter_authorization_for_parallel_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEntity returns the entity rule contexts.
	GetEntity() IEntity_name_for_parallel_dwContext

	// SetEntity sets the entity rule contexts.
	SetEntity(IEntity_name_for_parallel_dwContext)

	// IsAlter_authorization_for_parallel_dwContext differentiates from other interfaces.
	IsAlter_authorization_for_parallel_dwContext()
}

type Alter_authorization_for_parallel_dwContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	entity IEntity_name_for_parallel_dwContext
}

func NewEmptyAlter_authorization_for_parallel_dwContext() *Alter_authorization_for_parallel_dwContext {
	var p = new(Alter_authorization_for_parallel_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_parallel_dw
	return p
}

func (*Alter_authorization_for_parallel_dwContext) IsAlter_authorization_for_parallel_dwContext() {}

func NewAlter_authorization_for_parallel_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_authorization_for_parallel_dwContext {
	var p = new(Alter_authorization_for_parallel_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_authorization_for_parallel_dw

	return p
}

func (s *Alter_authorization_for_parallel_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_authorization_for_parallel_dwContext) GetEntity() IEntity_name_for_parallel_dwContext {
	return s.entity
}

func (s *Alter_authorization_for_parallel_dwContext) SetEntity(v IEntity_name_for_parallel_dwContext) {
	s.entity = v
}

func (s *Alter_authorization_for_parallel_dwContext) Alter_authorization_start() IAlter_authorization_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_authorization_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_authorization_startContext)
}

func (s *Alter_authorization_for_parallel_dwContext) Entity_to() IEntity_toContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_toContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_toContext)
}

func (s *Alter_authorization_for_parallel_dwContext) Authorization_grantee() IAuthorization_granteeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuthorization_granteeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuthorization_granteeContext)
}

func (s *Alter_authorization_for_parallel_dwContext) Entity_name_for_parallel_dw() IEntity_name_for_parallel_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEntity_name_for_parallel_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEntity_name_for_parallel_dwContext)
}

func (s *Alter_authorization_for_parallel_dwContext) Class_type_for_parallel_dw() IClass_type_for_parallel_dwContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClass_type_for_parallel_dwContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClass_type_for_parallel_dwContext)
}

func (s *Alter_authorization_for_parallel_dwContext) Colon_colon() IColon_colonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColon_colonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColon_colonContext)
}

func (s *Alter_authorization_for_parallel_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_authorization_for_parallel_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_authorization_for_parallel_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_authorization_for_parallel_dw(s)
	}
}

func (s *Alter_authorization_for_parallel_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_authorization_for_parallel_dw(s)
	}
}

func (s *Alter_authorization_for_parallel_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_authorization_for_parallel_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_authorization_for_parallel_dw() (localctx IAlter_authorization_for_parallel_dwContext) {
	localctx = NewAlter_authorization_for_parallel_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, TSqlParserRULE_alter_authorization_for_parallel_dw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1689)
		p.Alter_authorization_start()
	}
	p.SetState(1693)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDATABASE || _la == TSqlParserSCHEMA || _la == TSqlParserOBJECT {
		{
			p.SetState(1690)
			p.Class_type_for_parallel_dw()
		}
		{
			p.SetState(1691)
			p.Colon_colon()
		}

	}
	{
		p.SetState(1695)

		var _x = p.Entity_name_for_parallel_dw()

		localctx.(*Alter_authorization_for_parallel_dwContext).entity = _x
	}
	{
		p.SetState(1696)
		p.Entity_to()
	}
	{
		p.SetState(1697)
		p.Authorization_grantee()
	}

	return localctx
}

// IClass_typeContext is an interface to support dynamic dispatch.
type IClass_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_typeContext differentiates from other interfaces.
	IsClass_typeContext()
}

type Class_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_typeContext() *Class_typeContext {
	var p = new(Class_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_class_type
	return p
}

func (*Class_typeContext) IsClass_typeContext() {}

func NewClass_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_typeContext {
	var p = new(Class_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_class_type

	return p
}

func (s *Class_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_typeContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Class_typeContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Class_typeContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Class_typeContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Class_typeContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Class_typeContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Class_typeContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Class_typeContext) CONTRACT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTRACT, 0)
}

func (s *Class_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Class_typeContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Class_typeContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserENDPOINT, 0)
}

func (s *Class_typeContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Class_typeContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATALOG, 0)
}

func (s *Class_typeContext) STOPLIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPLIST, 0)
}

func (s *Class_typeContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE, 0)
}

func (s *Class_typeContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Class_typeContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Class_typeContext) BINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINDING, 0)
}

func (s *Class_typeContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Class_typeContext) ROUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROUTE, 0)
}

func (s *Class_typeContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Class_typeContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEARCH, 0)
}

func (s *Class_typeContext) PROPERTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROPERTY, 0)
}

func (s *Class_typeContext) LIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIST, 0)
}

func (s *Class_typeContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Class_typeContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Class_typeContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Class_typeContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Class_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClass_type(s)
	}
}

func (s *Class_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClass_type(s)
	}
}

func (s *Class_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClass_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Class_type() (localctx IClass_typeContext) {
	localctx = NewClass_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, TSqlParserRULE_class_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1733)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1699)
			p.Match(TSqlParserOBJECT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1700)
			p.Match(TSqlParserASSEMBLY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1701)
			p.Match(TSqlParserASYMMETRIC)
		}
		{
			p.SetState(1702)
			p.Match(TSqlParserKEY)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1703)
			p.Match(TSqlParserAVAILABILITY)
		}
		{
			p.SetState(1704)
			p.Match(TSqlParserGROUP)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1705)
			p.Match(TSqlParserCERTIFICATE)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1706)
			p.Match(TSqlParserCONTRACT)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1707)
			p.Match(TSqlParserTYPE)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1708)
			p.Match(TSqlParserDATABASE)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1709)
			p.Match(TSqlParserENDPOINT)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1710)
			p.Match(TSqlParserFULLTEXT)
		}
		{
			p.SetState(1711)
			p.Match(TSqlParserCATALOG)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1712)
			p.Match(TSqlParserFULLTEXT)
		}
		{
			p.SetState(1713)
			p.Match(TSqlParserSTOPLIST)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1714)
			p.Match(TSqlParserMESSAGE)
		}
		{
			p.SetState(1715)
			p.Match(TSqlParserTYPE)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1716)
			p.Match(TSqlParserREMOTE)
		}
		{
			p.SetState(1717)
			p.Match(TSqlParserSERVICE)
		}
		{
			p.SetState(1718)
			p.Match(TSqlParserBINDING)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1719)
			p.Match(TSqlParserROLE)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1720)
			p.Match(TSqlParserROUTE)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1721)
			p.Match(TSqlParserSCHEMA)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1722)
			p.Match(TSqlParserSEARCH)
		}
		{
			p.SetState(1723)
			p.Match(TSqlParserPROPERTY)
		}
		{
			p.SetState(1724)
			p.Match(TSqlParserLIST)
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1725)
			p.Match(TSqlParserSERVER)
		}
		{
			p.SetState(1726)
			p.Match(TSqlParserROLE)
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1727)
			p.Match(TSqlParserSERVICE)
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1728)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(1729)
			p.Match(TSqlParserKEY)
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1730)
			p.Match(TSqlParserXML)
		}
		{
			p.SetState(1731)
			p.Match(TSqlParserSCHEMA)
		}
		{
			p.SetState(1732)
			p.Match(TSqlParserCOLLECTION)
		}

	}

	return localctx
}

// IClass_type_for_sql_databaseContext is an interface to support dynamic dispatch.
type IClass_type_for_sql_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_type_for_sql_databaseContext differentiates from other interfaces.
	IsClass_type_for_sql_databaseContext()
}

type Class_type_for_sql_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_type_for_sql_databaseContext() *Class_type_for_sql_databaseContext {
	var p = new(Class_type_for_sql_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_class_type_for_sql_database
	return p
}

func (*Class_type_for_sql_databaseContext) IsClass_type_for_sql_databaseContext() {}

func NewClass_type_for_sql_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_type_for_sql_databaseContext {
	var p = new(Class_type_for_sql_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_class_type_for_sql_database

	return p
}

func (s *Class_type_for_sql_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_type_for_sql_databaseContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Class_type_for_sql_databaseContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Class_type_for_sql_databaseContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Class_type_for_sql_databaseContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Class_type_for_sql_databaseContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Class_type_for_sql_databaseContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Class_type_for_sql_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Class_type_for_sql_databaseContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Class_type_for_sql_databaseContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATALOG, 0)
}

func (s *Class_type_for_sql_databaseContext) STOPLIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPLIST, 0)
}

func (s *Class_type_for_sql_databaseContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Class_type_for_sql_databaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Class_type_for_sql_databaseContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEARCH, 0)
}

func (s *Class_type_for_sql_databaseContext) PROPERTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROPERTY, 0)
}

func (s *Class_type_for_sql_databaseContext) LIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIST, 0)
}

func (s *Class_type_for_sql_databaseContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Class_type_for_sql_databaseContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Class_type_for_sql_databaseContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Class_type_for_sql_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_type_for_sql_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_type_for_sql_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClass_type_for_sql_database(s)
	}
}

func (s *Class_type_for_sql_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClass_type_for_sql_database(s)
	}
}

func (s *Class_type_for_sql_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClass_type_for_sql_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Class_type_for_sql_database() (localctx IClass_type_for_sql_databaseContext) {
	localctx = NewClass_type_for_sql_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, TSqlParserRULE_class_type_for_sql_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1756)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1735)
			p.Match(TSqlParserOBJECT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1736)
			p.Match(TSqlParserASSEMBLY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1737)
			p.Match(TSqlParserASYMMETRIC)
		}
		{
			p.SetState(1738)
			p.Match(TSqlParserKEY)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1739)
			p.Match(TSqlParserCERTIFICATE)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1740)
			p.Match(TSqlParserTYPE)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1741)
			p.Match(TSqlParserDATABASE)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1742)
			p.Match(TSqlParserFULLTEXT)
		}
		{
			p.SetState(1743)
			p.Match(TSqlParserCATALOG)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1744)
			p.Match(TSqlParserFULLTEXT)
		}
		{
			p.SetState(1745)
			p.Match(TSqlParserSTOPLIST)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1746)
			p.Match(TSqlParserROLE)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1747)
			p.Match(TSqlParserSCHEMA)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1748)
			p.Match(TSqlParserSEARCH)
		}
		{
			p.SetState(1749)
			p.Match(TSqlParserPROPERTY)
		}
		{
			p.SetState(1750)
			p.Match(TSqlParserLIST)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1751)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(1752)
			p.Match(TSqlParserKEY)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1753)
			p.Match(TSqlParserXML)
		}
		{
			p.SetState(1754)
			p.Match(TSqlParserSCHEMA)
		}
		{
			p.SetState(1755)
			p.Match(TSqlParserCOLLECTION)
		}

	}

	return localctx
}

// IClass_type_for_azure_dwContext is an interface to support dynamic dispatch.
type IClass_type_for_azure_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_type_for_azure_dwContext differentiates from other interfaces.
	IsClass_type_for_azure_dwContext()
}

type Class_type_for_azure_dwContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_type_for_azure_dwContext() *Class_type_for_azure_dwContext {
	var p = new(Class_type_for_azure_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_class_type_for_azure_dw
	return p
}

func (*Class_type_for_azure_dwContext) IsClass_type_for_azure_dwContext() {}

func NewClass_type_for_azure_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_type_for_azure_dwContext {
	var p = new(Class_type_for_azure_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_class_type_for_azure_dw

	return p
}

func (s *Class_type_for_azure_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_type_for_azure_dwContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Class_type_for_azure_dwContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Class_type_for_azure_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_type_for_azure_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_type_for_azure_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClass_type_for_azure_dw(s)
	}
}

func (s *Class_type_for_azure_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClass_type_for_azure_dw(s)
	}
}

func (s *Class_type_for_azure_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClass_type_for_azure_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Class_type_for_azure_dw() (localctx IClass_type_for_azure_dwContext) {
	localctx = NewClass_type_for_azure_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, TSqlParserRULE_class_type_for_azure_dw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1758)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserSCHEMA || _la == TSqlParserOBJECT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IClass_type_for_parallel_dwContext is an interface to support dynamic dispatch.
type IClass_type_for_parallel_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClass_type_for_parallel_dwContext differentiates from other interfaces.
	IsClass_type_for_parallel_dwContext()
}

type Class_type_for_parallel_dwContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClass_type_for_parallel_dwContext() *Class_type_for_parallel_dwContext {
	var p = new(Class_type_for_parallel_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_class_type_for_parallel_dw
	return p
}

func (*Class_type_for_parallel_dwContext) IsClass_type_for_parallel_dwContext() {}

func NewClass_type_for_parallel_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Class_type_for_parallel_dwContext {
	var p = new(Class_type_for_parallel_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_class_type_for_parallel_dw

	return p
}

func (s *Class_type_for_parallel_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Class_type_for_parallel_dwContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Class_type_for_parallel_dwContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Class_type_for_parallel_dwContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Class_type_for_parallel_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Class_type_for_parallel_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Class_type_for_parallel_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClass_type_for_parallel_dw(s)
	}
}

func (s *Class_type_for_parallel_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClass_type_for_parallel_dw(s)
	}
}

func (s *Class_type_for_parallel_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClass_type_for_parallel_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Class_type_for_parallel_dw() (localctx IClass_type_for_parallel_dwContext) {
	localctx = NewClass_type_for_parallel_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, TSqlParserRULE_class_type_for_parallel_dw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1760)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserDATABASE || _la == TSqlParserSCHEMA || _la == TSqlParserOBJECT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDrop_availability_groupContext is an interface to support dynamic dispatch.
type IDrop_availability_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGroup_name returns the group_name rule contexts.
	GetGroup_name() IIdContext

	// SetGroup_name sets the group_name rule contexts.
	SetGroup_name(IIdContext)

	// IsDrop_availability_groupContext differentiates from other interfaces.
	IsDrop_availability_groupContext()
}

type Drop_availability_groupContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	group_name IIdContext
}

func NewEmptyDrop_availability_groupContext() *Drop_availability_groupContext {
	var p = new(Drop_availability_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_availability_group
	return p
}

func (*Drop_availability_groupContext) IsDrop_availability_groupContext() {}

func NewDrop_availability_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_availability_groupContext {
	var p = new(Drop_availability_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_availability_group

	return p
}

func (s *Drop_availability_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_availability_groupContext) GetGroup_name() IIdContext { return s.group_name }

func (s *Drop_availability_groupContext) SetGroup_name(v IIdContext) { s.group_name = v }

func (s *Drop_availability_groupContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_availability_groupContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Drop_availability_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Drop_availability_groupContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_availability_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_availability_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_availability_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_availability_group(s)
	}
}

func (s *Drop_availability_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_availability_group(s)
	}
}

func (s *Drop_availability_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_availability_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_availability_group() (localctx IDrop_availability_groupContext) {
	localctx = NewDrop_availability_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, TSqlParserRULE_drop_availability_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1762)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(1763)
		p.Match(TSqlParserAVAILABILITY)
	}
	{
		p.SetState(1764)
		p.Match(TSqlParserGROUP)
	}
	{
		p.SetState(1765)

		var _x = p.Id()

		localctx.(*Drop_availability_groupContext).group_name = _x
	}

	return localctx
}

// IAlter_availability_groupContext is an interface to support dynamic dispatch.
type IAlter_availability_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_availability_groupContext differentiates from other interfaces.
	IsAlter_availability_groupContext()
}

type Alter_availability_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_availability_groupContext() *Alter_availability_groupContext {
	var p = new(Alter_availability_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_availability_group
	return p
}

func (*Alter_availability_groupContext) IsAlter_availability_groupContext() {}

func NewAlter_availability_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_availability_groupContext {
	var p = new(Alter_availability_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_availability_group

	return p
}

func (s *Alter_availability_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_availability_groupContext) Alter_availability_group_start() IAlter_availability_group_startContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_availability_group_startContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_availability_group_startContext)
}

func (s *Alter_availability_groupContext) Alter_availability_group_options() IAlter_availability_group_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_availability_group_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_availability_group_optionsContext)
}

func (s *Alter_availability_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_availability_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_availability_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_availability_group(s)
	}
}

func (s *Alter_availability_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_availability_group(s)
	}
}

func (s *Alter_availability_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_availability_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_availability_group() (localctx IAlter_availability_groupContext) {
	localctx = NewAlter_availability_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, TSqlParserRULE_alter_availability_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1767)
		p.Alter_availability_group_start()
	}
	{
		p.SetState(1768)
		p.Alter_availability_group_options()
	}

	return localctx
}

// IAlter_availability_group_startContext is an interface to support dynamic dispatch.
type IAlter_availability_group_startContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGroup_name returns the group_name rule contexts.
	GetGroup_name() IIdContext

	// SetGroup_name sets the group_name rule contexts.
	SetGroup_name(IIdContext)

	// IsAlter_availability_group_startContext differentiates from other interfaces.
	IsAlter_availability_group_startContext()
}

type Alter_availability_group_startContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	group_name IIdContext
}

func NewEmptyAlter_availability_group_startContext() *Alter_availability_group_startContext {
	var p = new(Alter_availability_group_startContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_availability_group_start
	return p
}

func (*Alter_availability_group_startContext) IsAlter_availability_group_startContext() {}

func NewAlter_availability_group_startContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_availability_group_startContext {
	var p = new(Alter_availability_group_startContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_availability_group_start

	return p
}

func (s *Alter_availability_group_startContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_availability_group_startContext) GetGroup_name() IIdContext { return s.group_name }

func (s *Alter_availability_group_startContext) SetGroup_name(v IIdContext) { s.group_name = v }

func (s *Alter_availability_group_startContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_availability_group_startContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Alter_availability_group_startContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Alter_availability_group_startContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_availability_group_startContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_availability_group_startContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_availability_group_startContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_availability_group_start(s)
	}
}

func (s *Alter_availability_group_startContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_availability_group_start(s)
	}
}

func (s *Alter_availability_group_startContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_availability_group_start(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_availability_group_start() (localctx IAlter_availability_group_startContext) {
	localctx = NewAlter_availability_group_startContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, TSqlParserRULE_alter_availability_group_start)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1770)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(1771)
		p.Match(TSqlParserAVAILABILITY)
	}
	{
		p.SetState(1772)
		p.Match(TSqlParserGROUP)
	}
	{
		p.SetState(1773)

		var _x = p.Id()

		localctx.(*Alter_availability_group_startContext).group_name = _x
	}

	return localctx
}

// IAlter_availability_group_optionsContext is an interface to support dynamic dispatch.
type IAlter_availability_group_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMilliseconds returns the milliseconds token.
	GetMilliseconds() antlr.Token

	// GetServer_instance returns the server_instance token.
	GetServer_instance() antlr.Token

	// GetSession_timeout returns the session_timeout token.
	GetSession_timeout() antlr.Token

	// GetAg_name returns the ag_name token.
	GetAg_name() antlr.Token

	// GetAg_name_modified returns the ag_name_modified token.
	GetAg_name_modified() antlr.Token

	// GetListener_name returns the listener_name token.
	GetListener_name() antlr.Token

	// SetMilliseconds sets the milliseconds token.
	SetMilliseconds(antlr.Token)

	// SetServer_instance sets the server_instance token.
	SetServer_instance(antlr.Token)

	// SetSession_timeout sets the session_timeout token.
	SetSession_timeout(antlr.Token)

	// SetAg_name sets the ag_name token.
	SetAg_name(antlr.Token)

	// SetAg_name_modified sets the ag_name_modified token.
	SetAg_name_modified(antlr.Token)

	// SetListener_name sets the listener_name token.
	SetListener_name(antlr.Token)

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// IsAlter_availability_group_optionsContext differentiates from other interfaces.
	IsAlter_availability_group_optionsContext()
}

type Alter_availability_group_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	milliseconds     antlr.Token
	database_name    IIdContext
	server_instance  antlr.Token
	session_timeout  antlr.Token
	ag_name          antlr.Token
	ag_name_modified antlr.Token
	listener_name    antlr.Token
}

func NewEmptyAlter_availability_group_optionsContext() *Alter_availability_group_optionsContext {
	var p = new(Alter_availability_group_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_availability_group_options
	return p
}

func (*Alter_availability_group_optionsContext) IsAlter_availability_group_optionsContext() {}

func NewAlter_availability_group_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_availability_group_optionsContext {
	var p = new(Alter_availability_group_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_availability_group_options

	return p
}

func (s *Alter_availability_group_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_availability_group_optionsContext) GetMilliseconds() antlr.Token { return s.milliseconds }

func (s *Alter_availability_group_optionsContext) GetServer_instance() antlr.Token {
	return s.server_instance
}

func (s *Alter_availability_group_optionsContext) GetSession_timeout() antlr.Token {
	return s.session_timeout
}

func (s *Alter_availability_group_optionsContext) GetAg_name() antlr.Token { return s.ag_name }

func (s *Alter_availability_group_optionsContext) GetAg_name_modified() antlr.Token {
	return s.ag_name_modified
}

func (s *Alter_availability_group_optionsContext) GetListener_name() antlr.Token {
	return s.listener_name
}

func (s *Alter_availability_group_optionsContext) SetMilliseconds(v antlr.Token) { s.milliseconds = v }

func (s *Alter_availability_group_optionsContext) SetServer_instance(v antlr.Token) {
	s.server_instance = v
}

func (s *Alter_availability_group_optionsContext) SetSession_timeout(v antlr.Token) {
	s.session_timeout = v
}

func (s *Alter_availability_group_optionsContext) SetAg_name(v antlr.Token) { s.ag_name = v }

func (s *Alter_availability_group_optionsContext) SetAg_name_modified(v antlr.Token) {
	s.ag_name_modified = v
}

func (s *Alter_availability_group_optionsContext) SetListener_name(v antlr.Token) { s.listener_name = v }

func (s *Alter_availability_group_optionsContext) GetDatabase_name() IIdContext {
	return s.database_name
}

func (s *Alter_availability_group_optionsContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Alter_availability_group_optionsContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Alter_availability_group_optionsContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Alter_availability_group_optionsContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Alter_availability_group_optionsContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_availability_group_optionsContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_availability_group_optionsContext) AUTOMATED_BACKUP_PREFERENCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTOMATED_BACKUP_PREFERENCE, 0)
}

func (s *Alter_availability_group_optionsContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_availability_group_optionsContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_availability_group_optionsContext) FAILURE_CONDITION_LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILURE_CONDITION_LEVEL, 0)
}

func (s *Alter_availability_group_optionsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Alter_availability_group_optionsContext) HEALTH_CHECK_TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserHEALTH_CHECK_TIMEOUT, 0)
}

func (s *Alter_availability_group_optionsContext) DB_FAILOVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserDB_FAILOVER, 0)
}

func (s *Alter_availability_group_optionsContext) REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0)
}

func (s *Alter_availability_group_optionsContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIMARY, 0)
}

func (s *Alter_availability_group_optionsContext) SECONDARY_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECONDARY_ONLY, 0)
}

func (s *Alter_availability_group_optionsContext) SECONDARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECONDARY, 0)
}

func (s *Alter_availability_group_optionsContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Alter_availability_group_optionsContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_availability_group_optionsContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_availability_group_optionsContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_availability_group_optionsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Alter_availability_group_optionsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_availability_group_optionsContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Alter_availability_group_optionsContext) REPLICA() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICA, 0)
}

func (s *Alter_availability_group_optionsContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_availability_group_optionsContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_availability_group_optionsContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserWITH)
}

func (s *Alter_availability_group_optionsContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, i)
}

func (s *Alter_availability_group_optionsContext) ENDPOINT_URL() antlr.TerminalNode {
	return s.GetToken(TSqlParserENDPOINT_URL, 0)
}

func (s *Alter_availability_group_optionsContext) AllAVAILABILITY_MODE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAVAILABILITY_MODE)
}

func (s *Alter_availability_group_optionsContext) AVAILABILITY_MODE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY_MODE, i)
}

func (s *Alter_availability_group_optionsContext) AllFAILOVER_MODE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFAILOVER_MODE)
}

func (s *Alter_availability_group_optionsContext) FAILOVER_MODE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILOVER_MODE, i)
}

func (s *Alter_availability_group_optionsContext) AllSEEDING_MODE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSEEDING_MODE)
}

func (s *Alter_availability_group_optionsContext) SEEDING_MODE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSEEDING_MODE, i)
}

func (s *Alter_availability_group_optionsContext) BACKUP_PRIORITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP_PRIORITY, 0)
}

func (s *Alter_availability_group_optionsContext) PRIMARY_ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIMARY_ROLE, 0)
}

func (s *Alter_availability_group_optionsContext) AllALLOW_CONNECTIONS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALLOW_CONNECTIONS)
}

func (s *Alter_availability_group_optionsContext) ALLOW_CONNECTIONS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_CONNECTIONS, i)
}

func (s *Alter_availability_group_optionsContext) SECONDARY_ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECONDARY_ROLE, 0)
}

func (s *Alter_availability_group_optionsContext) AllSYNCHRONOUS_COMMIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSYNCHRONOUS_COMMIT)
}

func (s *Alter_availability_group_optionsContext) SYNCHRONOUS_COMMIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSYNCHRONOUS_COMMIT, i)
}

func (s *Alter_availability_group_optionsContext) AllASYNCHRONOUS_COMMIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserASYNCHRONOUS_COMMIT)
}

func (s *Alter_availability_group_optionsContext) ASYNCHRONOUS_COMMIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserASYNCHRONOUS_COMMIT, i)
}

func (s *Alter_availability_group_optionsContext) AllAUTOMATIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAUTOMATIC)
}

func (s *Alter_availability_group_optionsContext) AUTOMATIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTOMATIC, i)
}

func (s *Alter_availability_group_optionsContext) AllMANUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMANUAL)
}

func (s *Alter_availability_group_optionsContext) MANUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMANUAL, i)
}

func (s *Alter_availability_group_optionsContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_WRITE, 0)
}

func (s *Alter_availability_group_optionsContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Alter_availability_group_optionsContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY, 0)
}

func (s *Alter_availability_group_optionsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_availability_group_optionsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_availability_group_optionsContext) READ_ONLY_ROUTING_LIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY_ROUTING_LIST, 0)
}

func (s *Alter_availability_group_optionsContext) NO() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, 0)
}

func (s *Alter_availability_group_optionsContext) SESSION_TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSESSION_TIMEOUT, 0)
}

func (s *Alter_availability_group_optionsContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Alter_availability_group_optionsContext) JOIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserJOIN, 0)
}

func (s *Alter_availability_group_optionsContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Alter_availability_group_optionsContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Alter_availability_group_optionsContext) AllLISTENER_URL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLISTENER_URL)
}

func (s *Alter_availability_group_optionsContext) LISTENER_URL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLISTENER_URL, i)
}

func (s *Alter_availability_group_optionsContext) GRANT() antlr.TerminalNode {
	return s.GetToken(TSqlParserGRANT, 0)
}

func (s *Alter_availability_group_optionsContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Alter_availability_group_optionsContext) ANY() antlr.TerminalNode {
	return s.GetToken(TSqlParserANY, 0)
}

func (s *Alter_availability_group_optionsContext) DENY() antlr.TerminalNode {
	return s.GetToken(TSqlParserDENY, 0)
}

func (s *Alter_availability_group_optionsContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILOVER, 0)
}

func (s *Alter_availability_group_optionsContext) FORCE_FAILOVER_ALLOW_DATA_LOSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE_FAILOVER_ALLOW_DATA_LOSS, 0)
}

func (s *Alter_availability_group_optionsContext) LISTENER() antlr.TerminalNode {
	return s.GetToken(TSqlParserLISTENER, 0)
}

func (s *Alter_availability_group_optionsContext) DHCP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDHCP, 0)
}

func (s *Alter_availability_group_optionsContext) IP() antlr.TerminalNode {
	return s.GetToken(TSqlParserIP, 0)
}

func (s *Alter_availability_group_optionsContext) AllIPV4_ADDR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserIPV4_ADDR)
}

func (s *Alter_availability_group_optionsContext) IPV4_ADDR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserIPV4_ADDR, i)
}

func (s *Alter_availability_group_optionsContext) PORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPORT, 0)
}

func (s *Alter_availability_group_optionsContext) AllIPV6_ADDR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserIPV6_ADDR)
}

func (s *Alter_availability_group_optionsContext) IPV6_ADDR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserIPV6_ADDR, i)
}

func (s *Alter_availability_group_optionsContext) RESTART() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESTART, 0)
}

func (s *Alter_availability_group_optionsContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFFLINE, 0)
}

func (s *Alter_availability_group_optionsContext) DTC_SUPPORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDTC_SUPPORT, 0)
}

func (s *Alter_availability_group_optionsContext) PER_DB() antlr.TerminalNode {
	return s.GetToken(TSqlParserPER_DB, 0)
}

func (s *Alter_availability_group_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_availability_group_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_availability_group_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_availability_group_options(s)
	}
}

func (s *Alter_availability_group_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_availability_group_options(s)
	}
}

func (s *Alter_availability_group_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_availability_group_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_availability_group_options() (localctx IAlter_availability_group_optionsContext) {
	localctx = NewAlter_availability_group_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, TSqlParserRULE_alter_availability_group_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2125)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1775)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(1776)
			p.Match(TSqlParserLR_BRACKET)
		}

		p.SetState(1792)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserAUTOMATED_BACKUP_PREFERENCE:
			{
				p.SetState(1777)
				p.Match(TSqlParserAUTOMATED_BACKUP_PREFERENCE)
			}
			{
				p.SetState(1778)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1779)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserNONE || _la == TSqlParserPRIMARY || _la == TSqlParserSECONDARY || _la == TSqlParserSECONDARY_ONLY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserFAILURE_CONDITION_LEVEL:
			{
				p.SetState(1780)
				p.Match(TSqlParserFAILURE_CONDITION_LEVEL)
			}
			{
				p.SetState(1781)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1782)
				p.Match(TSqlParserDECIMAL)
			}

		case TSqlParserHEALTH_CHECK_TIMEOUT:
			{
				p.SetState(1783)
				p.Match(TSqlParserHEALTH_CHECK_TIMEOUT)
			}
			{
				p.SetState(1784)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1785)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Alter_availability_group_optionsContext).milliseconds = _m
			}

		case TSqlParserDB_FAILOVER:
			{
				p.SetState(1786)
				p.Match(TSqlParserDB_FAILOVER)
			}
			{
				p.SetState(1787)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1788)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserREQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			{
				p.SetState(1789)
				p.Match(TSqlParserREQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT)
			}
			{
				p.SetState(1790)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1791)
				p.Match(TSqlParserDECIMAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1794)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1795)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(1796)
			p.Match(TSqlParserDATABASE)
		}
		{
			p.SetState(1797)

			var _x = p.Id()

			localctx.(*Alter_availability_group_optionsContext).database_name = _x
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1798)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(1799)
			p.Match(TSqlParserDATABASE)
		}
		{
			p.SetState(1800)

			var _x = p.Id()

			localctx.(*Alter_availability_group_optionsContext).database_name = _x
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1801)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(1802)
			p.Match(TSqlParserREPLICA)
		}
		{
			p.SetState(1803)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(1804)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_availability_group_optionsContext).server_instance = _m
		}

		{
			p.SetState(1805)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(1806)
			p.Match(TSqlParserLR_BRACKET)
		}

		p.SetState(1810)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserENDPOINT_URL {
			{
				p.SetState(1807)
				p.Match(TSqlParserENDPOINT_URL)
			}
			{
				p.SetState(1808)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1809)
				p.Match(TSqlParserSTRING)
			}

		}
		p.SetState(1818)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
			p.SetState(1813)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1812)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1815)
				p.Match(TSqlParserAVAILABILITY_MODE)
			}
			{
				p.SetState(1816)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1817)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserASYNCHRONOUS_COMMIT || _la == TSqlParserSYNCHRONOUS_COMMIT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(1826)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) == 1 {
			p.SetState(1821)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1820)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1823)
				p.Match(TSqlParserFAILOVER_MODE)
			}
			{
				p.SetState(1824)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1825)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(1834)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
			p.SetState(1829)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1828)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1831)
				p.Match(TSqlParserSEEDING_MODE)
			}
			{
				p.SetState(1832)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1833)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(1842)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) == 1 {
			p.SetState(1837)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1836)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1839)
				p.Match(TSqlParserBACKUP_PRIORITY)
			}
			{
				p.SetState(1840)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1841)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(1853)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
			p.SetState(1845)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1844)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1847)
				p.Match(TSqlParserPRIMARY_ROLE)
			}
			{
				p.SetState(1848)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(1849)
				p.Match(TSqlParserALLOW_CONNECTIONS)
			}
			{
				p.SetState(1850)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1851)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserALL || _la == TSqlParserREAD_WRITE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1852)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(1864)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserSECONDARY_ROLE || _la == TSqlParserCOMMA {
			p.SetState(1856)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1855)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1858)
				p.Match(TSqlParserSECONDARY_ROLE)
			}
			{
				p.SetState(1859)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(1860)
				p.Match(TSqlParserALLOW_CONNECTIONS)
			}
			{
				p.SetState(1861)
				p.Match(TSqlParserEQUAL)
			}

			{
				p.SetState(1862)
				p.Match(TSqlParserREAD_ONLY)
			}

			{
				p.SetState(1863)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

		{
			p.SetState(1866)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1867)
			p.Match(TSqlParserSECONDARY_ROLE)
		}
		{
			p.SetState(1868)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserALLOW_CONNECTIONS:
			{
				p.SetState(1869)
				p.Match(TSqlParserALLOW_CONNECTIONS)
			}
			{
				p.SetState(1870)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1871)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserALL || _la == TSqlParserNO || _la == TSqlParserREAD_ONLY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserREAD_ONLY_ROUTING_LIST:
			{
				p.SetState(1872)
				p.Match(TSqlParserREAD_ONLY_ROUTING_LIST)
			}
			{
				p.SetState(1873)
				p.Match(TSqlParserEQUAL)
			}

			{
				p.SetState(1874)
				p.Match(TSqlParserLR_BRACKET)
			}

			{
				p.SetState(1875)
				p.Match(TSqlParserSTRING)
			}

			{
				p.SetState(1876)
				p.Match(TSqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1879)
			p.Match(TSqlParserPRIMARY_ROLE)
		}
		{
			p.SetState(1880)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(1903)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserALLOW_CONNECTIONS:
			{
				p.SetState(1881)
				p.Match(TSqlParserALLOW_CONNECTIONS)
			}
			{
				p.SetState(1882)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1883)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserALL || _la == TSqlParserNO || _la == TSqlParserREAD_ONLY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserREAD_ONLY_ROUTING_LIST:
			{
				p.SetState(1884)
				p.Match(TSqlParserREAD_ONLY_ROUTING_LIST)
			}
			{
				p.SetState(1885)
				p.Match(TSqlParserEQUAL)
			}

			{
				p.SetState(1886)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(1897)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING, TSqlParserRR_BRACKET, TSqlParserCOMMA:
				p.SetState(1893)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == TSqlParserSTRING || _la == TSqlParserCOMMA {
					p.SetState(1888)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(1887)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(1890)
						p.Match(TSqlParserSTRING)
					}

					p.SetState(1895)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case TSqlParserNONE:
				{
					p.SetState(1896)
					p.Match(TSqlParserNONE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(1899)
				p.Match(TSqlParserRR_BRACKET)
			}

		case TSqlParserSESSION_TIMEOUT:
			{
				p.SetState(1900)
				p.Match(TSqlParserSESSION_TIMEOUT)
			}
			{
				p.SetState(1901)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1902)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Alter_availability_group_optionsContext).session_timeout = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1905)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(1906)
			p.Match(TSqlParserREPLICA)
		}
		{
			p.SetState(1907)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(1908)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_availability_group_optionsContext).server_instance = _m
		}
		p.SetState(1966)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserWITH:
			{
				p.SetState(1909)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(1910)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(1926)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserENDPOINT_URL:
				{
					p.SetState(1911)
					p.Match(TSqlParserENDPOINT_URL)
				}
				{
					p.SetState(1912)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(1913)
					p.Match(TSqlParserSTRING)
				}

			case TSqlParserAVAILABILITY_MODE:
				{
					p.SetState(1914)
					p.Match(TSqlParserAVAILABILITY_MODE)
				}
				{
					p.SetState(1915)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(1916)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserASYNCHRONOUS_COMMIT || _la == TSqlParserSYNCHRONOUS_COMMIT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserFAILOVER_MODE:
				{
					p.SetState(1917)
					p.Match(TSqlParserFAILOVER_MODE)
				}
				{
					p.SetState(1918)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(1919)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserSEEDING_MODE:
				{
					p.SetState(1920)
					p.Match(TSqlParserSEEDING_MODE)
				}
				{
					p.SetState(1921)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(1922)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserBACKUP_PRIORITY:
				{
					p.SetState(1923)
					p.Match(TSqlParserBACKUP_PRIORITY)
				}
				{
					p.SetState(1924)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(1925)
					p.Match(TSqlParserDECIMAL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case TSqlParserSECONDARY_ROLE:
			{
				p.SetState(1928)
				p.Match(TSqlParserSECONDARY_ROLE)
			}
			{
				p.SetState(1929)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(1938)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserALLOW_CONNECTIONS:
				{
					p.SetState(1930)
					p.Match(TSqlParserALLOW_CONNECTIONS)
				}
				{
					p.SetState(1931)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(1932)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserALL || _la == TSqlParserNO || _la == TSqlParserREAD_ONLY) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserREAD_ONLY_ROUTING_LIST:
				{
					p.SetState(1933)
					p.Match(TSqlParserREAD_ONLY_ROUTING_LIST)
				}
				{
					p.SetState(1934)
					p.Match(TSqlParserEQUAL)
				}

				{
					p.SetState(1935)
					p.Match(TSqlParserLR_BRACKET)
				}

				{
					p.SetState(1936)
					p.Match(TSqlParserSTRING)
				}

				{
					p.SetState(1937)
					p.Match(TSqlParserRR_BRACKET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case TSqlParserPRIMARY_ROLE:
			{
				p.SetState(1940)
				p.Match(TSqlParserPRIMARY_ROLE)
			}
			{
				p.SetState(1941)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(1964)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserALLOW_CONNECTIONS:
				{
					p.SetState(1942)
					p.Match(TSqlParserALLOW_CONNECTIONS)
				}
				{
					p.SetState(1943)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(1944)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserALL || _la == TSqlParserNO || _la == TSqlParserREAD_ONLY) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserREAD_ONLY_ROUTING_LIST:
				{
					p.SetState(1945)
					p.Match(TSqlParserREAD_ONLY_ROUTING_LIST)
				}
				{
					p.SetState(1946)
					p.Match(TSqlParserEQUAL)
				}

				{
					p.SetState(1947)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(1958)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserSTRING, TSqlParserRR_BRACKET, TSqlParserCOMMA:
					p.SetState(1954)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == TSqlParserSTRING || _la == TSqlParserCOMMA {
						p.SetState(1949)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(1948)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(1951)
							p.Match(TSqlParserSTRING)
						}

						p.SetState(1956)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				case TSqlParserNONE:
					{
						p.SetState(1957)
						p.Match(TSqlParserNONE)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(1960)
					p.Match(TSqlParserRR_BRACKET)
				}

			case TSqlParserSESSION_TIMEOUT:
				{
					p.SetState(1961)
					p.Match(TSqlParserSESSION_TIMEOUT)
				}
				{
					p.SetState(1962)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(1963)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_availability_group_optionsContext).session_timeout = _m
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(1968)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1969)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(1970)
			p.Match(TSqlParserREPLICA)
		}
		{
			p.SetState(1971)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(1972)
			p.Match(TSqlParserSTRING)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1973)
			p.Match(TSqlParserJOIN)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1974)
			p.Match(TSqlParserJOIN)
		}
		{
			p.SetState(1975)
			p.Match(TSqlParserAVAILABILITY)
		}
		{
			p.SetState(1976)
			p.Match(TSqlParserGROUP)
		}
		{
			p.SetState(1977)
			p.Match(TSqlParserON)
		}
		p.SetState(2000)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserSTRING || _la == TSqlParserCOMMA {
			p.SetState(1979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(1978)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(1981)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_availability_group_optionsContext).ag_name = _m
			}
			{
				p.SetState(1982)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(1983)
				p.Match(TSqlParserLR_BRACKET)
			}

			{
				p.SetState(1984)
				p.Match(TSqlParserLISTENER_URL)
			}
			{
				p.SetState(1985)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1986)
				p.Match(TSqlParserSTRING)
			}
			{
				p.SetState(1987)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(1988)
				p.Match(TSqlParserAVAILABILITY_MODE)
			}
			{
				p.SetState(1989)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1990)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserASYNCHRONOUS_COMMIT || _la == TSqlParserSYNCHRONOUS_COMMIT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1991)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(1992)
				p.Match(TSqlParserFAILOVER_MODE)
			}
			{
				p.SetState(1993)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(1994)
				p.Match(TSqlParserMANUAL)
			}
			{
				p.SetState(1995)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(1996)
				p.Match(TSqlParserSEEDING_MODE)
			}
			{
				p.SetState(1997)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(1998)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(1999)
				p.Match(TSqlParserRR_BRACKET)
			}

			p.SetState(2002)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2004)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(2005)
			p.Match(TSqlParserAVAILABILITY)
		}
		{
			p.SetState(2006)
			p.Match(TSqlParserGROUP)
		}
		{
			p.SetState(2007)
			p.Match(TSqlParserON)
		}
		p.SetState(2042)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserSTRING || _la == TSqlParserCOMMA {
			p.SetState(2009)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2008)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2011)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_availability_group_optionsContext).ag_name_modified = _m
			}
			{
				p.SetState(2012)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(2013)
				p.Match(TSqlParserLR_BRACKET)
			}

			{
				p.SetState(2014)
				p.Match(TSqlParserLISTENER_URL)
			}
			{
				p.SetState(2015)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(2016)
				p.Match(TSqlParserSTRING)
			}
			p.SetState(2023)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
				p.SetState(2018)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2017)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(2020)
					p.Match(TSqlParserAVAILABILITY_MODE)
				}
				{
					p.SetState(2021)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(2022)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserASYNCHRONOUS_COMMIT || _la == TSqlParserSYNCHRONOUS_COMMIT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			p.SetState(2031)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 123, p.GetParserRuleContext()) == 1 {
				p.SetState(2026)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2025)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(2028)
					p.Match(TSqlParserFAILOVER_MODE)
				}
				{
					p.SetState(2029)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(2030)
					p.Match(TSqlParserMANUAL)
				}

			}
			p.SetState(2039)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserSEEDING_MODE || _la == TSqlParserCOMMA {
				p.SetState(2034)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2033)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(2036)
					p.Match(TSqlParserSEEDING_MODE)
				}
				{
					p.SetState(2037)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(2038)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserAUTOMATIC || _la == TSqlParserMANUAL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			{
				p.SetState(2041)
				p.Match(TSqlParserRR_BRACKET)
			}

			p.SetState(2044)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2046)
			p.Match(TSqlParserGRANT)
		}
		{
			p.SetState(2047)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(2048)
			p.Match(TSqlParserANY)
		}
		{
			p.SetState(2049)
			p.Match(TSqlParserDATABASE)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2050)
			p.Match(TSqlParserDENY)
		}
		{
			p.SetState(2051)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(2052)
			p.Match(TSqlParserANY)
		}
		{
			p.SetState(2053)
			p.Match(TSqlParserDATABASE)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2054)
			p.Match(TSqlParserFAILOVER)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2055)
			p.Match(TSqlParserFORCE_FAILOVER_ALLOW_DATA_LOSS)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2056)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(2057)
			p.Match(TSqlParserLISTENER)
		}
		{
			p.SetState(2058)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_availability_group_optionsContext).listener_name = _m
		}
		{
			p.SetState(2059)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(2093)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(2060)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(2061)
				p.Match(TSqlParserDHCP)
			}

			{
				p.SetState(2062)
				p.Match(TSqlParserON)
			}
			{
				p.SetState(2063)
				p.Match(TSqlParserLR_BRACKET)
			}

			{
				p.SetState(2064)
				p.Match(TSqlParserIPV4_ADDR)
			}
			{
				p.SetState(2065)
				p.Match(TSqlParserIPV4_ADDR)
			}

			{
				p.SetState(2067)
				p.Match(TSqlParserRR_BRACKET)
			}

		case 2:
			{
				p.SetState(2068)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(2069)
				p.Match(TSqlParserIP)
			}
			{
				p.SetState(2070)
				p.Match(TSqlParserLR_BRACKET)
			}

			p.SetState(2082)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == TSqlParserLR_BRACKET || _la == TSqlParserCOMMA {
				p.SetState(2072)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2071)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(2074)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(2079)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserIPV4_ADDR:
					{
						p.SetState(2075)
						p.Match(TSqlParserIPV4_ADDR)
					}
					{
						p.SetState(2076)
						p.Match(TSqlParserCOMMA)
					}
					{
						p.SetState(2077)
						p.Match(TSqlParserIPV4_ADDR)
					}

				case TSqlParserIPV6_ADDR:
					{
						p.SetState(2078)
						p.Match(TSqlParserIPV6_ADDR)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				{
					p.SetState(2081)
					p.Match(TSqlParserRR_BRACKET)
				}

				p.SetState(2084)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2086)
				p.Match(TSqlParserRR_BRACKET)
			}
			p.SetState(2091)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2087)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(2088)
					p.Match(TSqlParserPORT)
				}
				{
					p.SetState(2089)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(2090)
					p.Match(TSqlParserDECIMAL)
				}

			}

		}
		{
			p.SetState(2095)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2096)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(2097)
			p.Match(TSqlParserLISTENER)
		}
		p.SetState(2110)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserADD:
			{
				p.SetState(2098)
				p.Match(TSqlParserADD)
			}
			{
				p.SetState(2099)
				p.Match(TSqlParserIP)
			}
			{
				p.SetState(2100)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(2104)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserIPV4_ADDR:
				{
					p.SetState(2101)
					p.Match(TSqlParserIPV4_ADDR)
				}
				{
					p.SetState(2102)
					p.Match(TSqlParserIPV4_ADDR)
				}

			case TSqlParserIPV6_ADDR:
				{
					p.SetState(2103)
					p.Match(TSqlParserIPV6_ADDR)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			{
				p.SetState(2106)
				p.Match(TSqlParserRR_BRACKET)
			}

		case TSqlParserPORT:
			{
				p.SetState(2107)
				p.Match(TSqlParserPORT)
			}
			{
				p.SetState(2108)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(2109)
				p.Match(TSqlParserDECIMAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2112)
			p.Match(TSqlParserRESTART)
		}
		{
			p.SetState(2113)
			p.Match(TSqlParserLISTENER)
		}
		{
			p.SetState(2114)
			p.Match(TSqlParserSTRING)
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2115)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(2116)
			p.Match(TSqlParserLISTENER)
		}
		{
			p.SetState(2117)
			p.Match(TSqlParserSTRING)
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2118)
			p.Match(TSqlParserOFFLINE)
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2119)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(2120)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(2121)
			p.Match(TSqlParserDTC_SUPPORT)
		}
		{
			p.SetState(2122)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2123)
			p.Match(TSqlParserPER_DB)
		}
		{
			p.SetState(2124)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICreate_or_alter_broker_priorityContext is an interface to support dynamic dispatch.
type ICreate_or_alter_broker_priorityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRemoteServiceName returns the RemoteServiceName token.
	GetRemoteServiceName() antlr.Token

	// GetPriorityValue returns the PriorityValue token.
	GetPriorityValue() antlr.Token

	// SetRemoteServiceName sets the RemoteServiceName token.
	SetRemoteServiceName(antlr.Token)

	// SetPriorityValue sets the PriorityValue token.
	SetPriorityValue(antlr.Token)

	// GetConversationPriorityName returns the ConversationPriorityName rule contexts.
	GetConversationPriorityName() IIdContext

	// SetConversationPriorityName sets the ConversationPriorityName rule contexts.
	SetConversationPriorityName(IIdContext)

	// IsCreate_or_alter_broker_priorityContext differentiates from other interfaces.
	IsCreate_or_alter_broker_priorityContext()
}

type Create_or_alter_broker_priorityContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	ConversationPriorityName IIdContext
	RemoteServiceName        antlr.Token
	PriorityValue            antlr.Token
}

func NewEmptyCreate_or_alter_broker_priorityContext() *Create_or_alter_broker_priorityContext {
	var p = new(Create_or_alter_broker_priorityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_broker_priority
	return p
}

func (*Create_or_alter_broker_priorityContext) IsCreate_or_alter_broker_priorityContext() {}

func NewCreate_or_alter_broker_priorityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_broker_priorityContext {
	var p = new(Create_or_alter_broker_priorityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_broker_priority

	return p
}

func (s *Create_or_alter_broker_priorityContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_broker_priorityContext) GetRemoteServiceName() antlr.Token {
	return s.RemoteServiceName
}

func (s *Create_or_alter_broker_priorityContext) GetPriorityValue() antlr.Token {
	return s.PriorityValue
}

func (s *Create_or_alter_broker_priorityContext) SetRemoteServiceName(v antlr.Token) {
	s.RemoteServiceName = v
}

func (s *Create_or_alter_broker_priorityContext) SetPriorityValue(v antlr.Token) { s.PriorityValue = v }

func (s *Create_or_alter_broker_priorityContext) GetConversationPriorityName() IIdContext {
	return s.ConversationPriorityName
}

func (s *Create_or_alter_broker_priorityContext) SetConversationPriorityName(v IIdContext) {
	s.ConversationPriorityName = v
}

func (s *Create_or_alter_broker_priorityContext) BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserBROKER, 0)
}

func (s *Create_or_alter_broker_priorityContext) PRIORITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIORITY, 0)
}

func (s *Create_or_alter_broker_priorityContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_or_alter_broker_priorityContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *Create_or_alter_broker_priorityContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Create_or_alter_broker_priorityContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_or_alter_broker_priorityContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_or_alter_broker_priorityContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_broker_priorityContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_broker_priorityContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_or_alter_broker_priorityContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_or_alter_broker_priorityContext) CONTRACT_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTRACT_NAME, 0)
}

func (s *Create_or_alter_broker_priorityContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_or_alter_broker_priorityContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_or_alter_broker_priorityContext) LOCAL_SERVICE_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_SERVICE_NAME, 0)
}

func (s *Create_or_alter_broker_priorityContext) REMOTE_SERVICE_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE_SERVICE_NAME, 0)
}

func (s *Create_or_alter_broker_priorityContext) PRIORITY_LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIORITY_LEVEL, 0)
}

func (s *Create_or_alter_broker_priorityContext) AllANY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserANY)
}

func (s *Create_or_alter_broker_priorityContext) ANY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserANY, i)
}

func (s *Create_or_alter_broker_priorityContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Create_or_alter_broker_priorityContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_or_alter_broker_priorityContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_or_alter_broker_priorityContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_or_alter_broker_priorityContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Create_or_alter_broker_priorityContext) DOUBLE_FORWARD_SLASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOUBLE_FORWARD_SLASH, 0)
}

func (s *Create_or_alter_broker_priorityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_broker_priorityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_broker_priorityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_broker_priority(s)
	}
}

func (s *Create_or_alter_broker_priorityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_broker_priority(s)
	}
}

func (s *Create_or_alter_broker_priorityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_broker_priority(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_broker_priority() (localctx ICreate_or_alter_broker_priorityContext) {
	localctx = NewCreate_or_alter_broker_priorityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, TSqlParserRULE_create_or_alter_broker_priority)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2127)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserALTER || _la == TSqlParserCREATE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2128)
		p.Match(TSqlParserBROKER)
	}
	{
		p.SetState(2129)
		p.Match(TSqlParserPRIORITY)
	}
	{
		p.SetState(2130)

		var _x = p.Id()

		localctx.(*Create_or_alter_broker_priorityContext).ConversationPriorityName = _x
	}
	{
		p.SetState(2131)
		p.Match(TSqlParserFOR)
	}
	{
		p.SetState(2132)
		p.Match(TSqlParserCONVERSATION)
	}
	{
		p.SetState(2133)
		p.Match(TSqlParserSET)
	}
	{
		p.SetState(2134)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(2144)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONTRACT_NAME {
		{
			p.SetState(2135)
			p.Match(TSqlParserCONTRACT_NAME)
		}
		{
			p.SetState(2136)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(2139)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(2137)
				p.Id()
			}

		case TSqlParserANY:
			{
				p.SetState(2138)
				p.Match(TSqlParserANY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2142)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2141)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(2158)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLOCAL_SERVICE_NAME {
		{
			p.SetState(2146)
			p.Match(TSqlParserLOCAL_SERVICE_NAME)
		}
		{
			p.SetState(2147)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(2153)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserDOUBLE_FORWARD_SLASH, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			p.SetState(2149)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserDOUBLE_FORWARD_SLASH {
				{
					p.SetState(2148)
					p.Match(TSqlParserDOUBLE_FORWARD_SLASH)
				}

			}
			{
				p.SetState(2151)
				p.Id()
			}

		case TSqlParserANY:
			{
				p.SetState(2152)
				p.Match(TSqlParserANY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2155)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(2169)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserREMOTE_SERVICE_NAME {
		{
			p.SetState(2160)
			p.Match(TSqlParserREMOTE_SERVICE_NAME)
		}
		{
			p.SetState(2161)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(2164)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSTRING:
			{
				p.SetState(2162)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_or_alter_broker_priorityContext).RemoteServiceName = _m
			}

		case TSqlParserANY:
			{
				p.SetState(2163)
				p.Match(TSqlParserANY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(2167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2166)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(2177)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserPRIORITY_LEVEL {
		{
			p.SetState(2171)
			p.Match(TSqlParserPRIORITY_LEVEL)
		}
		{
			p.SetState(2172)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(2175)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserDECIMAL:
			{
				p.SetState(2173)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Create_or_alter_broker_priorityContext).PriorityValue = _m
			}

		case TSqlParserDEFAULT:
			{
				p.SetState(2174)
				p.Match(TSqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(2179)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IDrop_broker_priorityContext is an interface to support dynamic dispatch.
type IDrop_broker_priorityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversationPriorityName returns the ConversationPriorityName rule contexts.
	GetConversationPriorityName() IIdContext

	// SetConversationPriorityName sets the ConversationPriorityName rule contexts.
	SetConversationPriorityName(IIdContext)

	// IsDrop_broker_priorityContext differentiates from other interfaces.
	IsDrop_broker_priorityContext()
}

type Drop_broker_priorityContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	ConversationPriorityName IIdContext
}

func NewEmptyDrop_broker_priorityContext() *Drop_broker_priorityContext {
	var p = new(Drop_broker_priorityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_broker_priority
	return p
}

func (*Drop_broker_priorityContext) IsDrop_broker_priorityContext() {}

func NewDrop_broker_priorityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_broker_priorityContext {
	var p = new(Drop_broker_priorityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_broker_priority

	return p
}

func (s *Drop_broker_priorityContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_broker_priorityContext) GetConversationPriorityName() IIdContext {
	return s.ConversationPriorityName
}

func (s *Drop_broker_priorityContext) SetConversationPriorityName(v IIdContext) {
	s.ConversationPriorityName = v
}

func (s *Drop_broker_priorityContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_broker_priorityContext) BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserBROKER, 0)
}

func (s *Drop_broker_priorityContext) PRIORITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIORITY, 0)
}

func (s *Drop_broker_priorityContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_broker_priorityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_broker_priorityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_broker_priorityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_broker_priority(s)
	}
}

func (s *Drop_broker_priorityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_broker_priority(s)
	}
}

func (s *Drop_broker_priorityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_broker_priority(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_broker_priority() (localctx IDrop_broker_priorityContext) {
	localctx = NewDrop_broker_priorityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, TSqlParserRULE_drop_broker_priority)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2181)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2182)
		p.Match(TSqlParserBROKER)
	}
	{
		p.SetState(2183)
		p.Match(TSqlParserPRIORITY)
	}
	{
		p.SetState(2184)

		var _x = p.Id()

		localctx.(*Drop_broker_priorityContext).ConversationPriorityName = _x
	}

	return localctx
}

// IAlter_certificateContext is an interface to support dynamic dispatch.
type IAlter_certificateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// IsAlter_certificateContext differentiates from other interfaces.
	IsAlter_certificateContext()
}

type Alter_certificateContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	certificate_name IIdContext
}

func NewEmptyAlter_certificateContext() *Alter_certificateContext {
	var p = new(Alter_certificateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_certificate
	return p
}

func (*Alter_certificateContext) IsAlter_certificateContext() {}

func NewAlter_certificateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_certificateContext {
	var p = new(Alter_certificateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_certificate

	return p
}

func (s *Alter_certificateContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_certificateContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Alter_certificateContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Alter_certificateContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_certificateContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Alter_certificateContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_certificateContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Alter_certificateContext) PRIVATE_KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE_KEY, 0)
}

func (s *Alter_certificateContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_certificateContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE, 0)
}

func (s *Alter_certificateContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_certificateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_certificateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_certificateContext) ACTIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTIVE, 0)
}

func (s *Alter_certificateContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Alter_certificateContext) BEGIN_DIALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN_DIALOG, 0)
}

func (s *Alter_certificateContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_certificateContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_certificateContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_certificateContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_certificateContext) AllFILE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILE)
}

func (s *Alter_certificateContext) FILE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, i)
}

func (s *Alter_certificateContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_certificateContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_certificateContext) AllDECRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECRYPTION)
}

func (s *Alter_certificateContext) DECRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECRYPTION, i)
}

func (s *Alter_certificateContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBY)
}

func (s *Alter_certificateContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, i)
}

func (s *Alter_certificateContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPASSWORD)
}

func (s *Alter_certificateContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, i)
}

func (s *Alter_certificateContext) AllENCRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTION)
}

func (s *Alter_certificateContext) ENCRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, i)
}

func (s *Alter_certificateContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_certificateContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_certificateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_certificateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_certificateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_certificate(s)
	}
}

func (s *Alter_certificateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_certificate(s)
	}
}

func (s *Alter_certificateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_certificate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_certificate() (localctx IAlter_certificateContext) {
	localctx = NewAlter_certificateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, TSqlParserRULE_alter_certificate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2186)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(2187)
		p.Match(TSqlParserCERTIFICATE)
	}
	{
		p.SetState(2188)

		var _x = p.Id()

		localctx.(*Alter_certificateContext).certificate_name = _x
	}
	p.SetState(2228)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(2189)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(2190)
			p.Match(TSqlParserPRIVATE_KEY)
		}

	case 2:
		{
			p.SetState(2191)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(2192)
			p.Match(TSqlParserPRIVATE)
		}
		{
			p.SetState(2193)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(2194)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(2217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserFILE || _la == TSqlParserDECRYPTION || _la == TSqlParserENCRYPTION {
			p.SetState(2217)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserFILE:
				{
					p.SetState(2195)
					p.Match(TSqlParserFILE)
				}
				{
					p.SetState(2196)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(2197)
					p.Match(TSqlParserSTRING)
				}
				p.SetState(2199)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2198)
						p.Match(TSqlParserCOMMA)
					}

				}

			case TSqlParserDECRYPTION:
				{
					p.SetState(2201)
					p.Match(TSqlParserDECRYPTION)
				}
				{
					p.SetState(2202)
					p.Match(TSqlParserBY)
				}
				{
					p.SetState(2203)
					p.Match(TSqlParserPASSWORD)
				}
				{
					p.SetState(2204)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(2205)
					p.Match(TSqlParserSTRING)
				}
				p.SetState(2207)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2206)
						p.Match(TSqlParserCOMMA)
					}

				}

			case TSqlParserENCRYPTION:
				{
					p.SetState(2209)
					p.Match(TSqlParserENCRYPTION)
				}
				{
					p.SetState(2210)
					p.Match(TSqlParserBY)
				}
				{
					p.SetState(2211)
					p.Match(TSqlParserPASSWORD)
				}
				{
					p.SetState(2212)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(2213)
					p.Match(TSqlParserSTRING)
				}
				p.SetState(2215)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(2214)
						p.Match(TSqlParserCOMMA)
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2219)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2221)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 3:
		{
			p.SetState(2222)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(2223)
			p.Match(TSqlParserACTIVE)
		}
		{
			p.SetState(2224)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(2225)
			p.Match(TSqlParserBEGIN_DIALOG)
		}
		{
			p.SetState(2226)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(2227)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IAlter_column_encryption_keyContext is an interface to support dynamic dispatch.
type IAlter_column_encryption_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgorithm_name returns the algorithm_name token.
	GetAlgorithm_name() antlr.Token

	// SetAlgorithm_name sets the algorithm_name token.
	SetAlgorithm_name(antlr.Token)

	// GetColumn_encryption_key returns the column_encryption_key rule contexts.
	GetColumn_encryption_key() IIdContext

	// GetColumn_master_key_name returns the column_master_key_name rule contexts.
	GetColumn_master_key_name() IIdContext

	// SetColumn_encryption_key sets the column_encryption_key rule contexts.
	SetColumn_encryption_key(IIdContext)

	// SetColumn_master_key_name sets the column_master_key_name rule contexts.
	SetColumn_master_key_name(IIdContext)

	// IsAlter_column_encryption_keyContext differentiates from other interfaces.
	IsAlter_column_encryption_keyContext()
}

type Alter_column_encryption_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	column_encryption_key  IIdContext
	column_master_key_name IIdContext
	algorithm_name         antlr.Token
}

func NewEmptyAlter_column_encryption_keyContext() *Alter_column_encryption_keyContext {
	var p = new(Alter_column_encryption_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_column_encryption_key
	return p
}

func (*Alter_column_encryption_keyContext) IsAlter_column_encryption_keyContext() {}

func NewAlter_column_encryption_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_column_encryption_keyContext {
	var p = new(Alter_column_encryption_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_column_encryption_key

	return p
}

func (s *Alter_column_encryption_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_column_encryption_keyContext) GetAlgorithm_name() antlr.Token { return s.algorithm_name }

func (s *Alter_column_encryption_keyContext) SetAlgorithm_name(v antlr.Token) { s.algorithm_name = v }

func (s *Alter_column_encryption_keyContext) GetColumn_encryption_key() IIdContext {
	return s.column_encryption_key
}

func (s *Alter_column_encryption_keyContext) GetColumn_master_key_name() IIdContext {
	return s.column_master_key_name
}

func (s *Alter_column_encryption_keyContext) SetColumn_encryption_key(v IIdContext) {
	s.column_encryption_key = v
}

func (s *Alter_column_encryption_keyContext) SetColumn_master_key_name(v IIdContext) {
	s.column_master_key_name = v
}

func (s *Alter_column_encryption_keyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_column_encryption_keyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Alter_column_encryption_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Alter_column_encryption_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_column_encryption_keyContext) VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUE, 0)
}

func (s *Alter_column_encryption_keyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_column_encryption_keyContext) COLUMN_MASTER_KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN_MASTER_KEY, 0)
}

func (s *Alter_column_encryption_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_column_encryption_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_column_encryption_keyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_column_encryption_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_column_encryption_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_column_encryption_keyContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_column_encryption_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_column_encryption_keyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_column_encryption_keyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_column_encryption_keyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, 0)
}

func (s *Alter_column_encryption_keyContext) ENCRYPTED_VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTED_VALUE, 0)
}

func (s *Alter_column_encryption_keyContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Alter_column_encryption_keyContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_column_encryption_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_column_encryption_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_column_encryption_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_column_encryption_key(s)
	}
}

func (s *Alter_column_encryption_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_column_encryption_key(s)
	}
}

func (s *Alter_column_encryption_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_column_encryption_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_column_encryption_key() (localctx IAlter_column_encryption_keyContext) {
	localctx = NewAlter_column_encryption_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, TSqlParserRULE_alter_column_encryption_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2230)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(2231)
		p.Match(TSqlParserCOLUMN)
	}
	{
		p.SetState(2232)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(2233)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2234)

		var _x = p.Id()

		localctx.(*Alter_column_encryption_keyContext).column_encryption_key = _x
	}
	p.SetState(2235)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2236)
		p.Match(TSqlParserVALUE)
	}
	{
		p.SetState(2237)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(2238)
		p.Match(TSqlParserCOLUMN_MASTER_KEY)
	}
	{
		p.SetState(2239)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2240)

		var _x = p.Id()

		localctx.(*Alter_column_encryption_keyContext).column_master_key_name = _x
	}
	p.SetState(2249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(2241)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(2242)
			p.Match(TSqlParserALGORITHM)
		}
		{
			p.SetState(2243)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2244)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_column_encryption_keyContext).algorithm_name = _m
		}
		{
			p.SetState(2245)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(2246)
			p.Match(TSqlParserENCRYPTED_VALUE)
		}
		{
			p.SetState(2247)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2248)
			p.Match(TSqlParserBINARY)
		}

	}
	{
		p.SetState(2251)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ICreate_column_encryption_keyContext is an interface to support dynamic dispatch.
type ICreate_column_encryption_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlgorithm_name returns the algorithm_name token.
	GetAlgorithm_name() antlr.Token

	// GetEncrypted_value returns the encrypted_value token.
	GetEncrypted_value() antlr.Token

	// SetAlgorithm_name sets the algorithm_name token.
	SetAlgorithm_name(antlr.Token)

	// SetEncrypted_value sets the encrypted_value token.
	SetEncrypted_value(antlr.Token)

	// GetColumn_encryption_key returns the column_encryption_key rule contexts.
	GetColumn_encryption_key() IIdContext

	// GetColumn_master_key_name returns the column_master_key_name rule contexts.
	GetColumn_master_key_name() IIdContext

	// SetColumn_encryption_key sets the column_encryption_key rule contexts.
	SetColumn_encryption_key(IIdContext)

	// SetColumn_master_key_name sets the column_master_key_name rule contexts.
	SetColumn_master_key_name(IIdContext)

	// IsCreate_column_encryption_keyContext differentiates from other interfaces.
	IsCreate_column_encryption_keyContext()
}

type Create_column_encryption_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	column_encryption_key  IIdContext
	column_master_key_name IIdContext
	algorithm_name         antlr.Token
	encrypted_value        antlr.Token
}

func NewEmptyCreate_column_encryption_keyContext() *Create_column_encryption_keyContext {
	var p = new(Create_column_encryption_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_column_encryption_key
	return p
}

func (*Create_column_encryption_keyContext) IsCreate_column_encryption_keyContext() {}

func NewCreate_column_encryption_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_column_encryption_keyContext {
	var p = new(Create_column_encryption_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_column_encryption_key

	return p
}

func (s *Create_column_encryption_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_column_encryption_keyContext) GetAlgorithm_name() antlr.Token { return s.algorithm_name }

func (s *Create_column_encryption_keyContext) GetEncrypted_value() antlr.Token {
	return s.encrypted_value
}

func (s *Create_column_encryption_keyContext) SetAlgorithm_name(v antlr.Token) { s.algorithm_name = v }

func (s *Create_column_encryption_keyContext) SetEncrypted_value(v antlr.Token) { s.encrypted_value = v }

func (s *Create_column_encryption_keyContext) GetColumn_encryption_key() IIdContext {
	return s.column_encryption_key
}

func (s *Create_column_encryption_keyContext) GetColumn_master_key_name() IIdContext {
	return s.column_master_key_name
}

func (s *Create_column_encryption_keyContext) SetColumn_encryption_key(v IIdContext) {
	s.column_encryption_key = v
}

func (s *Create_column_encryption_keyContext) SetColumn_master_key_name(v IIdContext) {
	s.column_master_key_name = v
}

func (s *Create_column_encryption_keyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_column_encryption_keyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Create_column_encryption_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Create_column_encryption_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_column_encryption_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_column_encryption_keyContext) VALUES() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUES, 0)
}

func (s *Create_column_encryption_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_column_encryption_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_column_encryption_keyContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_column_encryption_keyContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_column_encryption_keyContext) AllCOLUMN_MASTER_KEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOLUMN_MASTER_KEY)
}

func (s *Create_column_encryption_keyContext) COLUMN_MASTER_KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN_MASTER_KEY, i)
}

func (s *Create_column_encryption_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_column_encryption_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_column_encryption_keyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_column_encryption_keyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_column_encryption_keyContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALGORITHM)
}

func (s *Create_column_encryption_keyContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, i)
}

func (s *Create_column_encryption_keyContext) AllENCRYPTED_VALUE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTED_VALUE)
}

func (s *Create_column_encryption_keyContext) ENCRYPTED_VALUE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTED_VALUE, i)
}

func (s *Create_column_encryption_keyContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_column_encryption_keyContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_column_encryption_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_column_encryption_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_column_encryption_keyContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBINARY)
}

func (s *Create_column_encryption_keyContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, i)
}

func (s *Create_column_encryption_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_column_encryption_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_column_encryption_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_column_encryption_key(s)
	}
}

func (s *Create_column_encryption_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_column_encryption_key(s)
	}
}

func (s *Create_column_encryption_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_column_encryption_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_column_encryption_key() (localctx ICreate_column_encryption_keyContext) {
	localctx = NewCreate_column_encryption_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, TSqlParserRULE_create_column_encryption_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2253)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(2254)
		p.Match(TSqlParserCOLUMN)
	}
	{
		p.SetState(2255)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(2256)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2257)

		var _x = p.Id()

		localctx.(*Create_column_encryption_keyContext).column_encryption_key = _x
	}
	{
		p.SetState(2258)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(2259)
		p.Match(TSqlParserVALUES)
	}
	p.SetState(2279)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(2260)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(2262)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2261)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2264)
				p.Match(TSqlParserCOLUMN_MASTER_KEY)
			}
			{
				p.SetState(2265)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(2266)

				var _x = p.Id()

				localctx.(*Create_column_encryption_keyContext).column_master_key_name = _x
			}
			{
				p.SetState(2267)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(2268)
				p.Match(TSqlParserALGORITHM)
			}
			{
				p.SetState(2269)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(2270)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_column_encryption_keyContext).algorithm_name = _m
			}
			{
				p.SetState(2271)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(2272)
				p.Match(TSqlParserENCRYPTED_VALUE)
			}
			{
				p.SetState(2273)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(2274)

				var _m = p.Match(TSqlParserBINARY)

				localctx.(*Create_column_encryption_keyContext).encrypted_value = _m
			}
			{
				p.SetState(2275)
				p.Match(TSqlParserRR_BRACKET)
			}
			p.SetState(2277)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2276)
					p.Match(TSqlParserCOMMA)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2281)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext())
	}

	return localctx
}

// IDrop_certificateContext is an interface to support dynamic dispatch.
type IDrop_certificateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// IsDrop_certificateContext differentiates from other interfaces.
	IsDrop_certificateContext()
}

type Drop_certificateContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	certificate_name IIdContext
}

func NewEmptyDrop_certificateContext() *Drop_certificateContext {
	var p = new(Drop_certificateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_certificate
	return p
}

func (*Drop_certificateContext) IsDrop_certificateContext() {}

func NewDrop_certificateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_certificateContext {
	var p = new(Drop_certificateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_certificate

	return p
}

func (s *Drop_certificateContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_certificateContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Drop_certificateContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Drop_certificateContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_certificateContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Drop_certificateContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_certificateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_certificateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_certificateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_certificate(s)
	}
}

func (s *Drop_certificateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_certificate(s)
	}
}

func (s *Drop_certificateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_certificate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_certificate() (localctx IDrop_certificateContext) {
	localctx = NewDrop_certificateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, TSqlParserRULE_drop_certificate)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2283)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2284)
		p.Match(TSqlParserCERTIFICATE)
	}
	{
		p.SetState(2285)

		var _x = p.Id()

		localctx.(*Drop_certificateContext).certificate_name = _x
	}

	return localctx
}

// IDrop_column_encryption_keyContext is an interface to support dynamic dispatch.
type IDrop_column_encryption_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsDrop_column_encryption_keyContext differentiates from other interfaces.
	IsDrop_column_encryption_keyContext()
}

type Drop_column_encryption_keyContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	key_name IIdContext
}

func NewEmptyDrop_column_encryption_keyContext() *Drop_column_encryption_keyContext {
	var p = new(Drop_column_encryption_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_column_encryption_key
	return p
}

func (*Drop_column_encryption_keyContext) IsDrop_column_encryption_keyContext() {}

func NewDrop_column_encryption_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_column_encryption_keyContext {
	var p = new(Drop_column_encryption_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_column_encryption_key

	return p
}

func (s *Drop_column_encryption_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_column_encryption_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Drop_column_encryption_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Drop_column_encryption_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_column_encryption_keyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Drop_column_encryption_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Drop_column_encryption_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Drop_column_encryption_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_column_encryption_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_column_encryption_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_column_encryption_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_column_encryption_key(s)
	}
}

func (s *Drop_column_encryption_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_column_encryption_key(s)
	}
}

func (s *Drop_column_encryption_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_column_encryption_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_column_encryption_key() (localctx IDrop_column_encryption_keyContext) {
	localctx = NewDrop_column_encryption_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, TSqlParserRULE_drop_column_encryption_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2287)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2288)
		p.Match(TSqlParserCOLUMN)
	}
	{
		p.SetState(2289)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(2290)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2291)

		var _x = p.Id()

		localctx.(*Drop_column_encryption_keyContext).key_name = _x
	}

	return localctx
}

// IDrop_column_master_keyContext is an interface to support dynamic dispatch.
type IDrop_column_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsDrop_column_master_keyContext differentiates from other interfaces.
	IsDrop_column_master_keyContext()
}

type Drop_column_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	key_name IIdContext
}

func NewEmptyDrop_column_master_keyContext() *Drop_column_master_keyContext {
	var p = new(Drop_column_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_column_master_key
	return p
}

func (*Drop_column_master_keyContext) IsDrop_column_master_keyContext() {}

func NewDrop_column_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_column_master_keyContext {
	var p = new(Drop_column_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_column_master_key

	return p
}

func (s *Drop_column_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_column_master_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Drop_column_master_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Drop_column_master_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_column_master_keyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Drop_column_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Drop_column_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Drop_column_master_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_column_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_column_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_column_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_column_master_key(s)
	}
}

func (s *Drop_column_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_column_master_key(s)
	}
}

func (s *Drop_column_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_column_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_column_master_key() (localctx IDrop_column_master_keyContext) {
	localctx = NewDrop_column_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, TSqlParserRULE_drop_column_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2293)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2294)
		p.Match(TSqlParserCOLUMN)
	}
	{
		p.SetState(2295)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(2296)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2297)

		var _x = p.Id()

		localctx.(*Drop_column_master_keyContext).key_name = _x
	}

	return localctx
}

// IDrop_contractContext is an interface to support dynamic dispatch.
type IDrop_contractContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropped_contract_name returns the dropped_contract_name rule contexts.
	GetDropped_contract_name() IIdContext

	// SetDropped_contract_name sets the dropped_contract_name rule contexts.
	SetDropped_contract_name(IIdContext)

	// IsDrop_contractContext differentiates from other interfaces.
	IsDrop_contractContext()
}

type Drop_contractContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	dropped_contract_name IIdContext
}

func NewEmptyDrop_contractContext() *Drop_contractContext {
	var p = new(Drop_contractContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_contract
	return p
}

func (*Drop_contractContext) IsDrop_contractContext() {}

func NewDrop_contractContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_contractContext {
	var p = new(Drop_contractContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_contract

	return p
}

func (s *Drop_contractContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_contractContext) GetDropped_contract_name() IIdContext { return s.dropped_contract_name }

func (s *Drop_contractContext) SetDropped_contract_name(v IIdContext) { s.dropped_contract_name = v }

func (s *Drop_contractContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_contractContext) CONTRACT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTRACT, 0)
}

func (s *Drop_contractContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_contractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_contractContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_contractContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_contract(s)
	}
}

func (s *Drop_contractContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_contract(s)
	}
}

func (s *Drop_contractContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_contract(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_contract() (localctx IDrop_contractContext) {
	localctx = NewDrop_contractContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, TSqlParserRULE_drop_contract)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2299)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2300)
		p.Match(TSqlParserCONTRACT)
	}
	{
		p.SetState(2301)

		var _x = p.Id()

		localctx.(*Drop_contractContext).dropped_contract_name = _x
	}

	return localctx
}

// IDrop_credentialContext is an interface to support dynamic dispatch.
type IDrop_credentialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// IsDrop_credentialContext differentiates from other interfaces.
	IsDrop_credentialContext()
}

type Drop_credentialContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	credential_name IIdContext
}

func NewEmptyDrop_credentialContext() *Drop_credentialContext {
	var p = new(Drop_credentialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_credential
	return p
}

func (*Drop_credentialContext) IsDrop_credentialContext() {}

func NewDrop_credentialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_credentialContext {
	var p = new(Drop_credentialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_credential

	return p
}

func (s *Drop_credentialContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_credentialContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Drop_credentialContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Drop_credentialContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_credentialContext) CREDENTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, 0)
}

func (s *Drop_credentialContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_credentialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_credentialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_credentialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_credential(s)
	}
}

func (s *Drop_credentialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_credential(s)
	}
}

func (s *Drop_credentialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_credential(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_credential() (localctx IDrop_credentialContext) {
	localctx = NewDrop_credentialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, TSqlParserRULE_drop_credential)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2303)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2304)
		p.Match(TSqlParserCREDENTIAL)
	}
	{
		p.SetState(2305)

		var _x = p.Id()

		localctx.(*Drop_credentialContext).credential_name = _x
	}

	return localctx
}

// IDrop_cryptograhic_providerContext is an interface to support dynamic dispatch.
type IDrop_cryptograhic_providerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider_name returns the provider_name rule contexts.
	GetProvider_name() IIdContext

	// SetProvider_name sets the provider_name rule contexts.
	SetProvider_name(IIdContext)

	// IsDrop_cryptograhic_providerContext differentiates from other interfaces.
	IsDrop_cryptograhic_providerContext()
}

type Drop_cryptograhic_providerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	provider_name IIdContext
}

func NewEmptyDrop_cryptograhic_providerContext() *Drop_cryptograhic_providerContext {
	var p = new(Drop_cryptograhic_providerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_cryptograhic_provider
	return p
}

func (*Drop_cryptograhic_providerContext) IsDrop_cryptograhic_providerContext() {}

func NewDrop_cryptograhic_providerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_cryptograhic_providerContext {
	var p = new(Drop_cryptograhic_providerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_cryptograhic_provider

	return p
}

func (s *Drop_cryptograhic_providerContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_cryptograhic_providerContext) GetProvider_name() IIdContext { return s.provider_name }

func (s *Drop_cryptograhic_providerContext) SetProvider_name(v IIdContext) { s.provider_name = v }

func (s *Drop_cryptograhic_providerContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_cryptograhic_providerContext) CRYPTOGRAPHIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserCRYPTOGRAPHIC, 0)
}

func (s *Drop_cryptograhic_providerContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Drop_cryptograhic_providerContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_cryptograhic_providerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_cryptograhic_providerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_cryptograhic_providerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_cryptograhic_provider(s)
	}
}

func (s *Drop_cryptograhic_providerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_cryptograhic_provider(s)
	}
}

func (s *Drop_cryptograhic_providerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_cryptograhic_provider(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_cryptograhic_provider() (localctx IDrop_cryptograhic_providerContext) {
	localctx = NewDrop_cryptograhic_providerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, TSqlParserRULE_drop_cryptograhic_provider)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2307)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2308)
		p.Match(TSqlParserCRYPTOGRAPHIC)
	}
	{
		p.SetState(2309)
		p.Match(TSqlParserPROVIDER)
	}
	{
		p.SetState(2310)

		var _x = p.Id()

		localctx.(*Drop_cryptograhic_providerContext).provider_name = _x
	}

	return localctx
}

// IDrop_databaseContext is an interface to support dynamic dispatch.
type IDrop_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name_or_database_snapshot_name returns the database_name_or_database_snapshot_name rule contexts.
	GetDatabase_name_or_database_snapshot_name() IIdContext

	// SetDatabase_name_or_database_snapshot_name sets the database_name_or_database_snapshot_name rule contexts.
	SetDatabase_name_or_database_snapshot_name(IIdContext)

	// IsDrop_databaseContext differentiates from other interfaces.
	IsDrop_databaseContext()
}

type Drop_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser                                  antlr.Parser
	database_name_or_database_snapshot_name IIdContext
}

func NewEmptyDrop_databaseContext() *Drop_databaseContext {
	var p = new(Drop_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_database
	return p
}

func (*Drop_databaseContext) IsDrop_databaseContext() {}

func NewDrop_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_databaseContext {
	var p = new(Drop_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_database

	return p
}

func (s *Drop_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_databaseContext) GetDatabase_name_or_database_snapshot_name() IIdContext {
	return s.database_name_or_database_snapshot_name
}

func (s *Drop_databaseContext) SetDatabase_name_or_database_snapshot_name(v IIdContext) {
	s.database_name_or_database_snapshot_name = v
}

func (s *Drop_databaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Drop_databaseContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_databaseContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_databaseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Drop_databaseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Drop_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_database(s)
	}
}

func (s *Drop_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_database(s)
	}
}

func (s *Drop_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_database() (localctx IDrop_databaseContext) {
	localctx = NewDrop_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, TSqlParserRULE_drop_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2312)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2313)
		p.Match(TSqlParserDATABASE)
	}
	p.SetState(2316)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2314)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2315)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(2322)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(2319)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2318)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2321)

				var _x = p.Id()

				localctx.(*Drop_databaseContext).database_name_or_database_snapshot_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2324)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext())
	}

	return localctx
}

// IDrop_database_audit_specificationContext is an interface to support dynamic dispatch.
type IDrop_database_audit_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAudit_specification_name returns the audit_specification_name rule contexts.
	GetAudit_specification_name() IIdContext

	// SetAudit_specification_name sets the audit_specification_name rule contexts.
	SetAudit_specification_name(IIdContext)

	// IsDrop_database_audit_specificationContext differentiates from other interfaces.
	IsDrop_database_audit_specificationContext()
}

type Drop_database_audit_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	audit_specification_name IIdContext
}

func NewEmptyDrop_database_audit_specificationContext() *Drop_database_audit_specificationContext {
	var p = new(Drop_database_audit_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_database_audit_specification
	return p
}

func (*Drop_database_audit_specificationContext) IsDrop_database_audit_specificationContext() {}

func NewDrop_database_audit_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_database_audit_specificationContext {
	var p = new(Drop_database_audit_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_database_audit_specification

	return p
}

func (s *Drop_database_audit_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_database_audit_specificationContext) GetAudit_specification_name() IIdContext {
	return s.audit_specification_name
}

func (s *Drop_database_audit_specificationContext) SetAudit_specification_name(v IIdContext) {
	s.audit_specification_name = v
}

func (s *Drop_database_audit_specificationContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_database_audit_specificationContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Drop_database_audit_specificationContext) AUDIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, 0)
}

func (s *Drop_database_audit_specificationContext) SPECIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPECIFICATION, 0)
}

func (s *Drop_database_audit_specificationContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_database_audit_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_database_audit_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_database_audit_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_database_audit_specification(s)
	}
}

func (s *Drop_database_audit_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_database_audit_specification(s)
	}
}

func (s *Drop_database_audit_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_database_audit_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_database_audit_specification() (localctx IDrop_database_audit_specificationContext) {
	localctx = NewDrop_database_audit_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, TSqlParserRULE_drop_database_audit_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2326)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2327)
		p.Match(TSqlParserDATABASE)
	}
	{
		p.SetState(2328)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(2329)
		p.Match(TSqlParserSPECIFICATION)
	}
	{
		p.SetState(2330)

		var _x = p.Id()

		localctx.(*Drop_database_audit_specificationContext).audit_specification_name = _x
	}

	return localctx
}

// IDrop_database_scoped_credentialContext is an interface to support dynamic dispatch.
type IDrop_database_scoped_credentialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// IsDrop_database_scoped_credentialContext differentiates from other interfaces.
	IsDrop_database_scoped_credentialContext()
}

type Drop_database_scoped_credentialContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	credential_name IIdContext
}

func NewEmptyDrop_database_scoped_credentialContext() *Drop_database_scoped_credentialContext {
	var p = new(Drop_database_scoped_credentialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_database_scoped_credential
	return p
}

func (*Drop_database_scoped_credentialContext) IsDrop_database_scoped_credentialContext() {}

func NewDrop_database_scoped_credentialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_database_scoped_credentialContext {
	var p = new(Drop_database_scoped_credentialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_database_scoped_credential

	return p
}

func (s *Drop_database_scoped_credentialContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_database_scoped_credentialContext) GetCredential_name() IIdContext {
	return s.credential_name
}

func (s *Drop_database_scoped_credentialContext) SetCredential_name(v IIdContext) {
	s.credential_name = v
}

func (s *Drop_database_scoped_credentialContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_database_scoped_credentialContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Drop_database_scoped_credentialContext) SCOPED() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCOPED, 0)
}

func (s *Drop_database_scoped_credentialContext) CREDENTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, 0)
}

func (s *Drop_database_scoped_credentialContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_database_scoped_credentialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_database_scoped_credentialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_database_scoped_credentialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_database_scoped_credential(s)
	}
}

func (s *Drop_database_scoped_credentialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_database_scoped_credential(s)
	}
}

func (s *Drop_database_scoped_credentialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_database_scoped_credential(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_database_scoped_credential() (localctx IDrop_database_scoped_credentialContext) {
	localctx = NewDrop_database_scoped_credentialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, TSqlParserRULE_drop_database_scoped_credential)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2332)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2333)
		p.Match(TSqlParserDATABASE)
	}
	{
		p.SetState(2334)
		p.Match(TSqlParserSCOPED)
	}
	{
		p.SetState(2335)
		p.Match(TSqlParserCREDENTIAL)
	}
	{
		p.SetState(2336)

		var _x = p.Id()

		localctx.(*Drop_database_scoped_credentialContext).credential_name = _x
	}

	return localctx
}

// IDrop_defaultContext is an interface to support dynamic dispatch.
type IDrop_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetDefault_name returns the default_name rule contexts.
	GetDefault_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetDefault_name sets the default_name rule contexts.
	SetDefault_name(IIdContext)

	// IsDrop_defaultContext differentiates from other interfaces.
	IsDrop_defaultContext()
}

type Drop_defaultContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	schema_name  IIdContext
	default_name IIdContext
}

func NewEmptyDrop_defaultContext() *Drop_defaultContext {
	var p = new(Drop_defaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_default
	return p
}

func (*Drop_defaultContext) IsDrop_defaultContext() {}

func NewDrop_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_defaultContext {
	var p = new(Drop_defaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_default

	return p
}

func (s *Drop_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_defaultContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_defaultContext) GetDefault_name() IIdContext { return s.default_name }

func (s *Drop_defaultContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_defaultContext) SetDefault_name(v IIdContext) { s.default_name = v }

func (s *Drop_defaultContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_defaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Drop_defaultContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_defaultContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_defaultContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_defaultContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_defaultContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Drop_defaultContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_default(s)
	}
}

func (s *Drop_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_default(s)
	}
}

func (s *Drop_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_default() (localctx IDrop_defaultContext) {
	localctx = NewDrop_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, TSqlParserRULE_drop_default)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2338)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2339)
		p.Match(TSqlParserDEFAULT)
	}
	p.SetState(2342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2340)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2341)
			p.Match(TSqlParserEXISTS)
		}

	}

	p.SetState(2345)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(2344)
			p.Match(TSqlParserCOMMA)
		}

	}
	p.SetState(2350)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2347)

			var _x = p.Id()

			localctx.(*Drop_defaultContext).schema_name = _x
		}
		{
			p.SetState(2348)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2352)

		var _x = p.Id()

		localctx.(*Drop_defaultContext).default_name = _x
	}

	return localctx
}

// IDrop_endpointContext is an interface to support dynamic dispatch.
type IDrop_endpointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEndPointName returns the endPointName rule contexts.
	GetEndPointName() IIdContext

	// SetEndPointName sets the endPointName rule contexts.
	SetEndPointName(IIdContext)

	// IsDrop_endpointContext differentiates from other interfaces.
	IsDrop_endpointContext()
}

type Drop_endpointContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	endPointName IIdContext
}

func NewEmptyDrop_endpointContext() *Drop_endpointContext {
	var p = new(Drop_endpointContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_endpoint
	return p
}

func (*Drop_endpointContext) IsDrop_endpointContext() {}

func NewDrop_endpointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_endpointContext {
	var p = new(Drop_endpointContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_endpoint

	return p
}

func (s *Drop_endpointContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_endpointContext) GetEndPointName() IIdContext { return s.endPointName }

func (s *Drop_endpointContext) SetEndPointName(v IIdContext) { s.endPointName = v }

func (s *Drop_endpointContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_endpointContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserENDPOINT, 0)
}

func (s *Drop_endpointContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_endpointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_endpointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_endpointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_endpoint(s)
	}
}

func (s *Drop_endpointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_endpoint(s)
	}
}

func (s *Drop_endpointContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_endpoint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_endpoint() (localctx IDrop_endpointContext) {
	localctx = NewDrop_endpointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, TSqlParserRULE_drop_endpoint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2354)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2355)
		p.Match(TSqlParserENDPOINT)
	}
	{
		p.SetState(2356)

		var _x = p.Id()

		localctx.(*Drop_endpointContext).endPointName = _x
	}

	return localctx
}

// IDrop_external_data_sourceContext is an interface to support dynamic dispatch.
type IDrop_external_data_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExternal_data_source_name returns the external_data_source_name rule contexts.
	GetExternal_data_source_name() IIdContext

	// SetExternal_data_source_name sets the external_data_source_name rule contexts.
	SetExternal_data_source_name(IIdContext)

	// IsDrop_external_data_sourceContext differentiates from other interfaces.
	IsDrop_external_data_sourceContext()
}

type Drop_external_data_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	external_data_source_name IIdContext
}

func NewEmptyDrop_external_data_sourceContext() *Drop_external_data_sourceContext {
	var p = new(Drop_external_data_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_external_data_source
	return p
}

func (*Drop_external_data_sourceContext) IsDrop_external_data_sourceContext() {}

func NewDrop_external_data_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_data_sourceContext {
	var p = new(Drop_external_data_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_external_data_source

	return p
}

func (s *Drop_external_data_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_data_sourceContext) GetExternal_data_source_name() IIdContext {
	return s.external_data_source_name
}

func (s *Drop_external_data_sourceContext) SetExternal_data_source_name(v IIdContext) {
	s.external_data_source_name = v
}

func (s *Drop_external_data_sourceContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_external_data_sourceContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Drop_external_data_sourceContext) DATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA, 0)
}

func (s *Drop_external_data_sourceContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSOURCE, 0)
}

func (s *Drop_external_data_sourceContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_external_data_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_data_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_external_data_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_external_data_source(s)
	}
}

func (s *Drop_external_data_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_external_data_source(s)
	}
}

func (s *Drop_external_data_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_external_data_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_external_data_source() (localctx IDrop_external_data_sourceContext) {
	localctx = NewDrop_external_data_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, TSqlParserRULE_drop_external_data_source)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2358)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2359)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(2360)
		p.Match(TSqlParserDATA)
	}
	{
		p.SetState(2361)
		p.Match(TSqlParserSOURCE)
	}
	{
		p.SetState(2362)

		var _x = p.Id()

		localctx.(*Drop_external_data_sourceContext).external_data_source_name = _x
	}

	return localctx
}

// IDrop_external_file_formatContext is an interface to support dynamic dispatch.
type IDrop_external_file_formatContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExternal_file_format_name returns the external_file_format_name rule contexts.
	GetExternal_file_format_name() IIdContext

	// SetExternal_file_format_name sets the external_file_format_name rule contexts.
	SetExternal_file_format_name(IIdContext)

	// IsDrop_external_file_formatContext differentiates from other interfaces.
	IsDrop_external_file_formatContext()
}

type Drop_external_file_formatContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	external_file_format_name IIdContext
}

func NewEmptyDrop_external_file_formatContext() *Drop_external_file_formatContext {
	var p = new(Drop_external_file_formatContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_external_file_format
	return p
}

func (*Drop_external_file_formatContext) IsDrop_external_file_formatContext() {}

func NewDrop_external_file_formatContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_file_formatContext {
	var p = new(Drop_external_file_formatContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_external_file_format

	return p
}

func (s *Drop_external_file_formatContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_file_formatContext) GetExternal_file_format_name() IIdContext {
	return s.external_file_format_name
}

func (s *Drop_external_file_formatContext) SetExternal_file_format_name(v IIdContext) {
	s.external_file_format_name = v
}

func (s *Drop_external_file_formatContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_external_file_formatContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Drop_external_file_formatContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Drop_external_file_formatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORMAT, 0)
}

func (s *Drop_external_file_formatContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_external_file_formatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_file_formatContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_external_file_formatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_external_file_format(s)
	}
}

func (s *Drop_external_file_formatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_external_file_format(s)
	}
}

func (s *Drop_external_file_formatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_external_file_format(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_external_file_format() (localctx IDrop_external_file_formatContext) {
	localctx = NewDrop_external_file_formatContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, TSqlParserRULE_drop_external_file_format)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2364)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2365)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(2366)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(2367)
		p.Match(TSqlParserFORMAT)
	}
	{
		p.SetState(2368)

		var _x = p.Id()

		localctx.(*Drop_external_file_formatContext).external_file_format_name = _x
	}

	return localctx
}

// IDrop_external_libraryContext is an interface to support dynamic dispatch.
type IDrop_external_libraryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLibrary_name returns the library_name rule contexts.
	GetLibrary_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetLibrary_name sets the library_name rule contexts.
	SetLibrary_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsDrop_external_libraryContext differentiates from other interfaces.
	IsDrop_external_libraryContext()
}

type Drop_external_libraryContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	library_name IIdContext
	owner_name   IIdContext
}

func NewEmptyDrop_external_libraryContext() *Drop_external_libraryContext {
	var p = new(Drop_external_libraryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_external_library
	return p
}

func (*Drop_external_libraryContext) IsDrop_external_libraryContext() {}

func NewDrop_external_libraryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_libraryContext {
	var p = new(Drop_external_libraryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_external_library

	return p
}

func (s *Drop_external_libraryContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_libraryContext) GetLibrary_name() IIdContext { return s.library_name }

func (s *Drop_external_libraryContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Drop_external_libraryContext) SetLibrary_name(v IIdContext) { s.library_name = v }

func (s *Drop_external_libraryContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Drop_external_libraryContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_external_libraryContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Drop_external_libraryContext) LIBRARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIBRARY, 0)
}

func (s *Drop_external_libraryContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_external_libraryContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_external_libraryContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Drop_external_libraryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_libraryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_external_libraryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_external_library(s)
	}
}

func (s *Drop_external_libraryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_external_library(s)
	}
}

func (s *Drop_external_libraryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_external_library(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_external_library() (localctx IDrop_external_libraryContext) {
	localctx = NewDrop_external_libraryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, TSqlParserRULE_drop_external_library)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2370)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2371)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(2372)
		p.Match(TSqlParserLIBRARY)
	}
	{
		p.SetState(2373)

		var _x = p.Id()

		localctx.(*Drop_external_libraryContext).library_name = _x
	}
	p.SetState(2376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(2374)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(2375)

			var _x = p.Id()

			localctx.(*Drop_external_libraryContext).owner_name = _x
		}

	}

	return localctx
}

// IDrop_external_resource_poolContext is an interface to support dynamic dispatch.
type IDrop_external_resource_poolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPool_name returns the pool_name rule contexts.
	GetPool_name() IIdContext

	// SetPool_name sets the pool_name rule contexts.
	SetPool_name(IIdContext)

	// IsDrop_external_resource_poolContext differentiates from other interfaces.
	IsDrop_external_resource_poolContext()
}

type Drop_external_resource_poolContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	pool_name IIdContext
}

func NewEmptyDrop_external_resource_poolContext() *Drop_external_resource_poolContext {
	var p = new(Drop_external_resource_poolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_external_resource_pool
	return p
}

func (*Drop_external_resource_poolContext) IsDrop_external_resource_poolContext() {}

func NewDrop_external_resource_poolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_resource_poolContext {
	var p = new(Drop_external_resource_poolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_external_resource_pool

	return p
}

func (s *Drop_external_resource_poolContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_resource_poolContext) GetPool_name() IIdContext { return s.pool_name }

func (s *Drop_external_resource_poolContext) SetPool_name(v IIdContext) { s.pool_name = v }

func (s *Drop_external_resource_poolContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_external_resource_poolContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Drop_external_resource_poolContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Drop_external_resource_poolContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Drop_external_resource_poolContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_external_resource_poolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_resource_poolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_external_resource_poolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_external_resource_pool(s)
	}
}

func (s *Drop_external_resource_poolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_external_resource_pool(s)
	}
}

func (s *Drop_external_resource_poolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_external_resource_pool(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_external_resource_pool() (localctx IDrop_external_resource_poolContext) {
	localctx = NewDrop_external_resource_poolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, TSqlParserRULE_drop_external_resource_pool)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2378)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2379)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(2380)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(2381)
		p.Match(TSqlParserPOOL)
	}
	{
		p.SetState(2382)

		var _x = p.Id()

		localctx.(*Drop_external_resource_poolContext).pool_name = _x
	}

	return localctx
}

// IDrop_external_tableContext is an interface to support dynamic dispatch.
type IDrop_external_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsDrop_external_tableContext differentiates from other interfaces.
	IsDrop_external_tableContext()
}

type Drop_external_tableContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	database_name IIdContext
	schema_name   IIdContext
	table         IIdContext
}

func NewEmptyDrop_external_tableContext() *Drop_external_tableContext {
	var p = new(Drop_external_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_external_table
	return p
}

func (*Drop_external_tableContext) IsDrop_external_tableContext() {}

func NewDrop_external_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_external_tableContext {
	var p = new(Drop_external_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_external_table

	return p
}

func (s *Drop_external_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_external_tableContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Drop_external_tableContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_external_tableContext) GetTable() IIdContext { return s.table }

func (s *Drop_external_tableContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Drop_external_tableContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_external_tableContext) SetTable(v IIdContext) { s.table = v }

func (s *Drop_external_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_external_tableContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Drop_external_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Drop_external_tableContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_external_tableContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_external_tableContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Drop_external_tableContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Drop_external_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_external_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_external_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_external_table(s)
	}
}

func (s *Drop_external_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_external_table(s)
	}
}

func (s *Drop_external_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_external_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_external_table() (localctx IDrop_external_tableContext) {
	localctx = NewDrop_external_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, TSqlParserRULE_drop_external_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2384)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2385)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(2386)
		p.Match(TSqlParserTABLE)
	}
	p.SetState(2390)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2387)

			var _x = p.Id()

			localctx.(*Drop_external_tableContext).database_name = _x
		}
		{
			p.SetState(2388)
			p.Match(TSqlParserDOT)
		}

	}
	p.SetState(2395)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2392)

			var _x = p.Id()

			localctx.(*Drop_external_tableContext).schema_name = _x
		}
		{
			p.SetState(2393)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2397)

		var _x = p.Id()

		localctx.(*Drop_external_tableContext).table = _x
	}

	return localctx
}

// IDrop_event_notificationsContext is an interface to support dynamic dispatch.
type IDrop_event_notificationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNotification_name returns the notification_name rule contexts.
	GetNotification_name() IIdContext

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// SetNotification_name sets the notification_name rule contexts.
	SetNotification_name(IIdContext)

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// IsDrop_event_notificationsContext differentiates from other interfaces.
	IsDrop_event_notificationsContext()
}

type Drop_event_notificationsContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	notification_name IIdContext
	queue_name        IIdContext
}

func NewEmptyDrop_event_notificationsContext() *Drop_event_notificationsContext {
	var p = new(Drop_event_notificationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_event_notifications
	return p
}

func (*Drop_event_notificationsContext) IsDrop_event_notificationsContext() {}

func NewDrop_event_notificationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_event_notificationsContext {
	var p = new(Drop_event_notificationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_event_notifications

	return p
}

func (s *Drop_event_notificationsContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_event_notificationsContext) GetNotification_name() IIdContext {
	return s.notification_name
}

func (s *Drop_event_notificationsContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Drop_event_notificationsContext) SetNotification_name(v IIdContext) { s.notification_name = v }

func (s *Drop_event_notificationsContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Drop_event_notificationsContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_event_notificationsContext) EVENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENT, 0)
}

func (s *Drop_event_notificationsContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOTIFICATION, 0)
}

func (s *Drop_event_notificationsContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Drop_event_notificationsContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_event_notificationsContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Drop_event_notificationsContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Drop_event_notificationsContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_event_notificationsContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_event_notificationsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Drop_event_notificationsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Drop_event_notificationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_event_notificationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_event_notificationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_event_notifications(s)
	}
}

func (s *Drop_event_notificationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_event_notifications(s)
	}
}

func (s *Drop_event_notificationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_event_notifications(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_event_notifications() (localctx IDrop_event_notificationsContext) {
	localctx = NewDrop_event_notificationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, TSqlParserRULE_drop_event_notifications)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2399)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2400)
		p.Match(TSqlParserEVENT)
	}
	{
		p.SetState(2401)
		p.Match(TSqlParserNOTIFICATION)
	}
	p.SetState(2406)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
		p.SetState(2403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2402)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(2405)

			var _x = p.Id()

			localctx.(*Drop_event_notificationsContext).notification_name = _x
		}

		p.SetState(2408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2410)
		p.Match(TSqlParserON)
	}
	p.SetState(2415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSERVER:
		{
			p.SetState(2411)
			p.Match(TSqlParserSERVER)
		}

	case TSqlParserDATABASE:
		{
			p.SetState(2412)
			p.Match(TSqlParserDATABASE)
		}

	case TSqlParserQUEUE:
		{
			p.SetState(2413)
			p.Match(TSqlParserQUEUE)
		}
		{
			p.SetState(2414)

			var _x = p.Id()

			localctx.(*Drop_event_notificationsContext).queue_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDrop_event_sessionContext is an interface to support dynamic dispatch.
type IDrop_event_sessionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEvent_session_name returns the event_session_name rule contexts.
	GetEvent_session_name() IIdContext

	// SetEvent_session_name sets the event_session_name rule contexts.
	SetEvent_session_name(IIdContext)

	// IsDrop_event_sessionContext differentiates from other interfaces.
	IsDrop_event_sessionContext()
}

type Drop_event_sessionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	event_session_name IIdContext
}

func NewEmptyDrop_event_sessionContext() *Drop_event_sessionContext {
	var p = new(Drop_event_sessionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_event_session
	return p
}

func (*Drop_event_sessionContext) IsDrop_event_sessionContext() {}

func NewDrop_event_sessionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_event_sessionContext {
	var p = new(Drop_event_sessionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_event_session

	return p
}

func (s *Drop_event_sessionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_event_sessionContext) GetEvent_session_name() IIdContext { return s.event_session_name }

func (s *Drop_event_sessionContext) SetEvent_session_name(v IIdContext) { s.event_session_name = v }

func (s *Drop_event_sessionContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_event_sessionContext) EVENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENT, 0)
}

func (s *Drop_event_sessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSESSION, 0)
}

func (s *Drop_event_sessionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Drop_event_sessionContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_event_sessionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_event_sessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_event_sessionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_event_sessionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_event_session(s)
	}
}

func (s *Drop_event_sessionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_event_session(s)
	}
}

func (s *Drop_event_sessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_event_session(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_event_session() (localctx IDrop_event_sessionContext) {
	localctx = NewDrop_event_sessionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, TSqlParserRULE_drop_event_session)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2417)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2418)
		p.Match(TSqlParserEVENT)
	}
	{
		p.SetState(2419)
		p.Match(TSqlParserSESSION)
	}
	{
		p.SetState(2420)

		var _x = p.Id()

		localctx.(*Drop_event_sessionContext).event_session_name = _x
	}
	{
		p.SetState(2421)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(2422)
		p.Match(TSqlParserSERVER)
	}

	return localctx
}

// IDrop_fulltext_catalogContext is an interface to support dynamic dispatch.
type IDrop_fulltext_catalogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCatalog_name returns the catalog_name rule contexts.
	GetCatalog_name() IIdContext

	// SetCatalog_name sets the catalog_name rule contexts.
	SetCatalog_name(IIdContext)

	// IsDrop_fulltext_catalogContext differentiates from other interfaces.
	IsDrop_fulltext_catalogContext()
}

type Drop_fulltext_catalogContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	catalog_name IIdContext
}

func NewEmptyDrop_fulltext_catalogContext() *Drop_fulltext_catalogContext {
	var p = new(Drop_fulltext_catalogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_fulltext_catalog
	return p
}

func (*Drop_fulltext_catalogContext) IsDrop_fulltext_catalogContext() {}

func NewDrop_fulltext_catalogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_fulltext_catalogContext {
	var p = new(Drop_fulltext_catalogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_fulltext_catalog

	return p
}

func (s *Drop_fulltext_catalogContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_fulltext_catalogContext) GetCatalog_name() IIdContext { return s.catalog_name }

func (s *Drop_fulltext_catalogContext) SetCatalog_name(v IIdContext) { s.catalog_name = v }

func (s *Drop_fulltext_catalogContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_fulltext_catalogContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Drop_fulltext_catalogContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATALOG, 0)
}

func (s *Drop_fulltext_catalogContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_fulltext_catalogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_fulltext_catalogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_fulltext_catalogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_fulltext_catalog(s)
	}
}

func (s *Drop_fulltext_catalogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_fulltext_catalog(s)
	}
}

func (s *Drop_fulltext_catalogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_fulltext_catalog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_fulltext_catalog() (localctx IDrop_fulltext_catalogContext) {
	localctx = NewDrop_fulltext_catalogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, TSqlParserRULE_drop_fulltext_catalog)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2424)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2425)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(2426)
		p.Match(TSqlParserCATALOG)
	}
	{
		p.SetState(2427)

		var _x = p.Id()

		localctx.(*Drop_fulltext_catalogContext).catalog_name = _x
	}

	return localctx
}

// IDrop_fulltext_indexContext is an interface to support dynamic dispatch.
type IDrop_fulltext_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsDrop_fulltext_indexContext differentiates from other interfaces.
	IsDrop_fulltext_indexContext()
}

type Drop_fulltext_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IIdContext
	table  IIdContext
}

func NewEmptyDrop_fulltext_indexContext() *Drop_fulltext_indexContext {
	var p = new(Drop_fulltext_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_fulltext_index
	return p
}

func (*Drop_fulltext_indexContext) IsDrop_fulltext_indexContext() {}

func NewDrop_fulltext_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_fulltext_indexContext {
	var p = new(Drop_fulltext_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_fulltext_index

	return p
}

func (s *Drop_fulltext_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_fulltext_indexContext) GetSchema() IIdContext { return s.schema }

func (s *Drop_fulltext_indexContext) GetTable() IIdContext { return s.table }

func (s *Drop_fulltext_indexContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Drop_fulltext_indexContext) SetTable(v IIdContext) { s.table = v }

func (s *Drop_fulltext_indexContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_fulltext_indexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Drop_fulltext_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserINDEX, 0)
}

func (s *Drop_fulltext_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Drop_fulltext_indexContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_fulltext_indexContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_fulltext_indexContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_fulltext_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_fulltext_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_fulltext_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_fulltext_index(s)
	}
}

func (s *Drop_fulltext_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_fulltext_index(s)
	}
}

func (s *Drop_fulltext_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_fulltext_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_fulltext_index() (localctx IDrop_fulltext_indexContext) {
	localctx = NewDrop_fulltext_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, TSqlParserRULE_drop_fulltext_index)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2429)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2430)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(2431)
		p.Match(TSqlParserINDEX)
	}
	{
		p.SetState(2432)
		p.Match(TSqlParserON)
	}
	p.SetState(2436)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2433)

			var _x = p.Id()

			localctx.(*Drop_fulltext_indexContext).schema = _x
		}
		{
			p.SetState(2434)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2438)

		var _x = p.Id()

		localctx.(*Drop_fulltext_indexContext).table = _x
	}

	return localctx
}

// IDrop_fulltext_stoplistContext is an interface to support dynamic dispatch.
type IDrop_fulltext_stoplistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStoplist_name returns the stoplist_name rule contexts.
	GetStoplist_name() IIdContext

	// SetStoplist_name sets the stoplist_name rule contexts.
	SetStoplist_name(IIdContext)

	// IsDrop_fulltext_stoplistContext differentiates from other interfaces.
	IsDrop_fulltext_stoplistContext()
}

type Drop_fulltext_stoplistContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	stoplist_name IIdContext
}

func NewEmptyDrop_fulltext_stoplistContext() *Drop_fulltext_stoplistContext {
	var p = new(Drop_fulltext_stoplistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_fulltext_stoplist
	return p
}

func (*Drop_fulltext_stoplistContext) IsDrop_fulltext_stoplistContext() {}

func NewDrop_fulltext_stoplistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_fulltext_stoplistContext {
	var p = new(Drop_fulltext_stoplistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_fulltext_stoplist

	return p
}

func (s *Drop_fulltext_stoplistContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_fulltext_stoplistContext) GetStoplist_name() IIdContext { return s.stoplist_name }

func (s *Drop_fulltext_stoplistContext) SetStoplist_name(v IIdContext) { s.stoplist_name = v }

func (s *Drop_fulltext_stoplistContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_fulltext_stoplistContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Drop_fulltext_stoplistContext) STOPLIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPLIST, 0)
}

func (s *Drop_fulltext_stoplistContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_fulltext_stoplistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_fulltext_stoplistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_fulltext_stoplistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_fulltext_stoplist(s)
	}
}

func (s *Drop_fulltext_stoplistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_fulltext_stoplist(s)
	}
}

func (s *Drop_fulltext_stoplistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_fulltext_stoplist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_fulltext_stoplist() (localctx IDrop_fulltext_stoplistContext) {
	localctx = NewDrop_fulltext_stoplistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, TSqlParserRULE_drop_fulltext_stoplist)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2440)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2441)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(2442)
		p.Match(TSqlParserSTOPLIST)
	}
	{
		p.SetState(2443)

		var _x = p.Id()

		localctx.(*Drop_fulltext_stoplistContext).stoplist_name = _x
	}

	return localctx
}

// IDrop_loginContext is an interface to support dynamic dispatch.
type IDrop_loginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// IsDrop_loginContext differentiates from other interfaces.
	IsDrop_loginContext()
}

type Drop_loginContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	login_name IIdContext
}

func NewEmptyDrop_loginContext() *Drop_loginContext {
	var p = new(Drop_loginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_login
	return p
}

func (*Drop_loginContext) IsDrop_loginContext() {}

func NewDrop_loginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_loginContext {
	var p = new(Drop_loginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_login

	return p
}

func (s *Drop_loginContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_loginContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Drop_loginContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Drop_loginContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_loginContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Drop_loginContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_loginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_loginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_loginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_login(s)
	}
}

func (s *Drop_loginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_login(s)
	}
}

func (s *Drop_loginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_login(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_login() (localctx IDrop_loginContext) {
	localctx = NewDrop_loginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, TSqlParserRULE_drop_login)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2445)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2446)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(2447)

		var _x = p.Id()

		localctx.(*Drop_loginContext).login_name = _x
	}

	return localctx
}

// IDrop_master_keyContext is an interface to support dynamic dispatch.
type IDrop_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_master_keyContext differentiates from other interfaces.
	IsDrop_master_keyContext()
}

type Drop_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_master_keyContext() *Drop_master_keyContext {
	var p = new(Drop_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_master_key
	return p
}

func (*Drop_master_keyContext) IsDrop_master_keyContext() {}

func NewDrop_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_master_keyContext {
	var p = new(Drop_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_master_key

	return p
}

func (s *Drop_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_master_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Drop_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Drop_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_master_key(s)
	}
}

func (s *Drop_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_master_key(s)
	}
}

func (s *Drop_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_master_key() (localctx IDrop_master_keyContext) {
	localctx = NewDrop_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, TSqlParserRULE_drop_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2449)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2450)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(2451)
		p.Match(TSqlParserKEY)
	}

	return localctx
}

// IDrop_message_typeContext is an interface to support dynamic dispatch.
type IDrop_message_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMessage_type_name returns the message_type_name rule contexts.
	GetMessage_type_name() IIdContext

	// SetMessage_type_name sets the message_type_name rule contexts.
	SetMessage_type_name(IIdContext)

	// IsDrop_message_typeContext differentiates from other interfaces.
	IsDrop_message_typeContext()
}

type Drop_message_typeContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	message_type_name IIdContext
}

func NewEmptyDrop_message_typeContext() *Drop_message_typeContext {
	var p = new(Drop_message_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_message_type
	return p
}

func (*Drop_message_typeContext) IsDrop_message_typeContext() {}

func NewDrop_message_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_message_typeContext {
	var p = new(Drop_message_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_message_type

	return p
}

func (s *Drop_message_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_message_typeContext) GetMessage_type_name() IIdContext { return s.message_type_name }

func (s *Drop_message_typeContext) SetMessage_type_name(v IIdContext) { s.message_type_name = v }

func (s *Drop_message_typeContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_message_typeContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE, 0)
}

func (s *Drop_message_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Drop_message_typeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_message_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_message_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_message_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_message_type(s)
	}
}

func (s *Drop_message_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_message_type(s)
	}
}

func (s *Drop_message_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_message_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_message_type() (localctx IDrop_message_typeContext) {
	localctx = NewDrop_message_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, TSqlParserRULE_drop_message_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2453)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2454)
		p.Match(TSqlParserMESSAGE)
	}
	{
		p.SetState(2455)
		p.Match(TSqlParserTYPE)
	}
	{
		p.SetState(2456)

		var _x = p.Id()

		localctx.(*Drop_message_typeContext).message_type_name = _x
	}

	return localctx
}

// IDrop_partition_functionContext is an interface to support dynamic dispatch.
type IDrop_partition_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition_function_name returns the partition_function_name rule contexts.
	GetPartition_function_name() IIdContext

	// SetPartition_function_name sets the partition_function_name rule contexts.
	SetPartition_function_name(IIdContext)

	// IsDrop_partition_functionContext differentiates from other interfaces.
	IsDrop_partition_functionContext()
}

type Drop_partition_functionContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	partition_function_name IIdContext
}

func NewEmptyDrop_partition_functionContext() *Drop_partition_functionContext {
	var p = new(Drop_partition_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_partition_function
	return p
}

func (*Drop_partition_functionContext) IsDrop_partition_functionContext() {}

func NewDrop_partition_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_partition_functionContext {
	var p = new(Drop_partition_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_partition_function

	return p
}

func (s *Drop_partition_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_partition_functionContext) GetPartition_function_name() IIdContext {
	return s.partition_function_name
}

func (s *Drop_partition_functionContext) SetPartition_function_name(v IIdContext) {
	s.partition_function_name = v
}

func (s *Drop_partition_functionContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_partition_functionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Drop_partition_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserFUNCTION, 0)
}

func (s *Drop_partition_functionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_partition_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_partition_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_partition_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_partition_function(s)
	}
}

func (s *Drop_partition_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_partition_function(s)
	}
}

func (s *Drop_partition_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_partition_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_partition_function() (localctx IDrop_partition_functionContext) {
	localctx = NewDrop_partition_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, TSqlParserRULE_drop_partition_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2458)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2459)
		p.Match(TSqlParserPARTITION)
	}
	{
		p.SetState(2460)
		p.Match(TSqlParserFUNCTION)
	}
	{
		p.SetState(2461)

		var _x = p.Id()

		localctx.(*Drop_partition_functionContext).partition_function_name = _x
	}

	return localctx
}

// IDrop_partition_schemeContext is an interface to support dynamic dispatch.
type IDrop_partition_schemeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition_scheme_name returns the partition_scheme_name rule contexts.
	GetPartition_scheme_name() IIdContext

	// SetPartition_scheme_name sets the partition_scheme_name rule contexts.
	SetPartition_scheme_name(IIdContext)

	// IsDrop_partition_schemeContext differentiates from other interfaces.
	IsDrop_partition_schemeContext()
}

type Drop_partition_schemeContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	partition_scheme_name IIdContext
}

func NewEmptyDrop_partition_schemeContext() *Drop_partition_schemeContext {
	var p = new(Drop_partition_schemeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_partition_scheme
	return p
}

func (*Drop_partition_schemeContext) IsDrop_partition_schemeContext() {}

func NewDrop_partition_schemeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_partition_schemeContext {
	var p = new(Drop_partition_schemeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_partition_scheme

	return p
}

func (s *Drop_partition_schemeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_partition_schemeContext) GetPartition_scheme_name() IIdContext {
	return s.partition_scheme_name
}

func (s *Drop_partition_schemeContext) SetPartition_scheme_name(v IIdContext) {
	s.partition_scheme_name = v
}

func (s *Drop_partition_schemeContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_partition_schemeContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Drop_partition_schemeContext) SCHEME() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEME, 0)
}

func (s *Drop_partition_schemeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_partition_schemeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_partition_schemeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_partition_schemeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_partition_scheme(s)
	}
}

func (s *Drop_partition_schemeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_partition_scheme(s)
	}
}

func (s *Drop_partition_schemeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_partition_scheme(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_partition_scheme() (localctx IDrop_partition_schemeContext) {
	localctx = NewDrop_partition_schemeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, TSqlParserRULE_drop_partition_scheme)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2463)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2464)
		p.Match(TSqlParserPARTITION)
	}
	{
		p.SetState(2465)
		p.Match(TSqlParserSCHEME)
	}
	{
		p.SetState(2466)

		var _x = p.Id()

		localctx.(*Drop_partition_schemeContext).partition_scheme_name = _x
	}

	return localctx
}

// IDrop_queueContext is an interface to support dynamic dispatch.
type IDrop_queueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// IsDrop_queueContext differentiates from other interfaces.
	IsDrop_queueContext()
}

type Drop_queueContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	database_name IIdContext
	schema_name   IIdContext
	queue_name    IIdContext
}

func NewEmptyDrop_queueContext() *Drop_queueContext {
	var p = new(Drop_queueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_queue
	return p
}

func (*Drop_queueContext) IsDrop_queueContext() {}

func NewDrop_queueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_queueContext {
	var p = new(Drop_queueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_queue

	return p
}

func (s *Drop_queueContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_queueContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Drop_queueContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_queueContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Drop_queueContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Drop_queueContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_queueContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Drop_queueContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_queueContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Drop_queueContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_queueContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_queueContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Drop_queueContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Drop_queueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_queueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_queueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_queue(s)
	}
}

func (s *Drop_queueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_queue(s)
	}
}

func (s *Drop_queueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_queue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_queue() (localctx IDrop_queueContext) {
	localctx = NewDrop_queueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, TSqlParserRULE_drop_queue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2468)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2469)
		p.Match(TSqlParserQUEUE)
	}
	p.SetState(2473)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 170, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2470)

			var _x = p.Id()

			localctx.(*Drop_queueContext).database_name = _x
		}
		{
			p.SetState(2471)
			p.Match(TSqlParserDOT)
		}

	}
	p.SetState(2478)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2475)

			var _x = p.Id()

			localctx.(*Drop_queueContext).schema_name = _x
		}
		{
			p.SetState(2476)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2480)

		var _x = p.Id()

		localctx.(*Drop_queueContext).queue_name = _x
	}

	return localctx
}

// IDrop_remote_service_bindingContext is an interface to support dynamic dispatch.
type IDrop_remote_service_bindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBinding_name returns the binding_name rule contexts.
	GetBinding_name() IIdContext

	// SetBinding_name sets the binding_name rule contexts.
	SetBinding_name(IIdContext)

	// IsDrop_remote_service_bindingContext differentiates from other interfaces.
	IsDrop_remote_service_bindingContext()
}

type Drop_remote_service_bindingContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	binding_name IIdContext
}

func NewEmptyDrop_remote_service_bindingContext() *Drop_remote_service_bindingContext {
	var p = new(Drop_remote_service_bindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_remote_service_binding
	return p
}

func (*Drop_remote_service_bindingContext) IsDrop_remote_service_bindingContext() {}

func NewDrop_remote_service_bindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_remote_service_bindingContext {
	var p = new(Drop_remote_service_bindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_remote_service_binding

	return p
}

func (s *Drop_remote_service_bindingContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_remote_service_bindingContext) GetBinding_name() IIdContext { return s.binding_name }

func (s *Drop_remote_service_bindingContext) SetBinding_name(v IIdContext) { s.binding_name = v }

func (s *Drop_remote_service_bindingContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_remote_service_bindingContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Drop_remote_service_bindingContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Drop_remote_service_bindingContext) BINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINDING, 0)
}

func (s *Drop_remote_service_bindingContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_remote_service_bindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_remote_service_bindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_remote_service_bindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_remote_service_binding(s)
	}
}

func (s *Drop_remote_service_bindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_remote_service_binding(s)
	}
}

func (s *Drop_remote_service_bindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_remote_service_binding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_remote_service_binding() (localctx IDrop_remote_service_bindingContext) {
	localctx = NewDrop_remote_service_bindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, TSqlParserRULE_drop_remote_service_binding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2482)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2483)
		p.Match(TSqlParserREMOTE)
	}
	{
		p.SetState(2484)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(2485)
		p.Match(TSqlParserBINDING)
	}
	{
		p.SetState(2486)

		var _x = p.Id()

		localctx.(*Drop_remote_service_bindingContext).binding_name = _x
	}

	return localctx
}

// IDrop_resource_poolContext is an interface to support dynamic dispatch.
type IDrop_resource_poolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPool_name returns the pool_name rule contexts.
	GetPool_name() IIdContext

	// SetPool_name sets the pool_name rule contexts.
	SetPool_name(IIdContext)

	// IsDrop_resource_poolContext differentiates from other interfaces.
	IsDrop_resource_poolContext()
}

type Drop_resource_poolContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	pool_name IIdContext
}

func NewEmptyDrop_resource_poolContext() *Drop_resource_poolContext {
	var p = new(Drop_resource_poolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_resource_pool
	return p
}

func (*Drop_resource_poolContext) IsDrop_resource_poolContext() {}

func NewDrop_resource_poolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_resource_poolContext {
	var p = new(Drop_resource_poolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_resource_pool

	return p
}

func (s *Drop_resource_poolContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_resource_poolContext) GetPool_name() IIdContext { return s.pool_name }

func (s *Drop_resource_poolContext) SetPool_name(v IIdContext) { s.pool_name = v }

func (s *Drop_resource_poolContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_resource_poolContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Drop_resource_poolContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Drop_resource_poolContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_resource_poolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_resource_poolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_resource_poolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_resource_pool(s)
	}
}

func (s *Drop_resource_poolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_resource_pool(s)
	}
}

func (s *Drop_resource_poolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_resource_pool(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_resource_pool() (localctx IDrop_resource_poolContext) {
	localctx = NewDrop_resource_poolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, TSqlParserRULE_drop_resource_pool)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2488)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2489)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(2490)
		p.Match(TSqlParserPOOL)
	}
	{
		p.SetState(2491)

		var _x = p.Id()

		localctx.(*Drop_resource_poolContext).pool_name = _x
	}

	return localctx
}

// IDrop_db_roleContext is an interface to support dynamic dispatch.
type IDrop_db_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole_name returns the role_name rule contexts.
	GetRole_name() IIdContext

	// SetRole_name sets the role_name rule contexts.
	SetRole_name(IIdContext)

	// IsDrop_db_roleContext differentiates from other interfaces.
	IsDrop_db_roleContext()
}

type Drop_db_roleContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	role_name IIdContext
}

func NewEmptyDrop_db_roleContext() *Drop_db_roleContext {
	var p = new(Drop_db_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_db_role
	return p
}

func (*Drop_db_roleContext) IsDrop_db_roleContext() {}

func NewDrop_db_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_db_roleContext {
	var p = new(Drop_db_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_db_role

	return p
}

func (s *Drop_db_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_db_roleContext) GetRole_name() IIdContext { return s.role_name }

func (s *Drop_db_roleContext) SetRole_name(v IIdContext) { s.role_name = v }

func (s *Drop_db_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_db_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Drop_db_roleContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_db_roleContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_db_roleContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_db_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_db_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_db_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_db_role(s)
	}
}

func (s *Drop_db_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_db_role(s)
	}
}

func (s *Drop_db_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_db_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_db_role() (localctx IDrop_db_roleContext) {
	localctx = NewDrop_db_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, TSqlParserRULE_drop_db_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2493)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2494)
		p.Match(TSqlParserROLE)
	}
	p.SetState(2497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2495)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2496)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(2499)

		var _x = p.Id()

		localctx.(*Drop_db_roleContext).role_name = _x
	}

	return localctx
}

// IDrop_routeContext is an interface to support dynamic dispatch.
type IDrop_routeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRoute_name returns the route_name rule contexts.
	GetRoute_name() IIdContext

	// SetRoute_name sets the route_name rule contexts.
	SetRoute_name(IIdContext)

	// IsDrop_routeContext differentiates from other interfaces.
	IsDrop_routeContext()
}

type Drop_routeContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	route_name IIdContext
}

func NewEmptyDrop_routeContext() *Drop_routeContext {
	var p = new(Drop_routeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_route
	return p
}

func (*Drop_routeContext) IsDrop_routeContext() {}

func NewDrop_routeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_routeContext {
	var p = new(Drop_routeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_route

	return p
}

func (s *Drop_routeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_routeContext) GetRoute_name() IIdContext { return s.route_name }

func (s *Drop_routeContext) SetRoute_name(v IIdContext) { s.route_name = v }

func (s *Drop_routeContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_routeContext) ROUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROUTE, 0)
}

func (s *Drop_routeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_routeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_routeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_routeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_route(s)
	}
}

func (s *Drop_routeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_route(s)
	}
}

func (s *Drop_routeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_route(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_route() (localctx IDrop_routeContext) {
	localctx = NewDrop_routeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, TSqlParserRULE_drop_route)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2501)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2502)
		p.Match(TSqlParserROUTE)
	}
	{
		p.SetState(2503)

		var _x = p.Id()

		localctx.(*Drop_routeContext).route_name = _x
	}

	return localctx
}

// IDrop_ruleContext is an interface to support dynamic dispatch.
type IDrop_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetRule_name returns the rule_name rule contexts.
	GetRule_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetRule_name sets the rule_name rule contexts.
	SetRule_name(IIdContext)

	// IsDrop_ruleContext differentiates from other interfaces.
	IsDrop_ruleContext()
}

type Drop_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
	rule_name   IIdContext
}

func NewEmptyDrop_ruleContext() *Drop_ruleContext {
	var p = new(Drop_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_rule
	return p
}

func (*Drop_ruleContext) IsDrop_ruleContext() {}

func NewDrop_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_ruleContext {
	var p = new(Drop_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_rule

	return p
}

func (s *Drop_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_ruleContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_ruleContext) GetRule_name() IIdContext { return s.rule_name }

func (s *Drop_ruleContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_ruleContext) SetRule_name(v IIdContext) { s.rule_name = v }

func (s *Drop_ruleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_ruleContext) RULE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRULE, 0)
}

func (s *Drop_ruleContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_ruleContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_ruleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_ruleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_ruleContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Drop_ruleContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_rule(s)
	}
}

func (s *Drop_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_rule(s)
	}
}

func (s *Drop_ruleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_rule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_rule() (localctx IDrop_ruleContext) {
	localctx = NewDrop_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, TSqlParserRULE_drop_rule)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2505)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2506)
		p.Match(TSqlParserRULE)
	}
	p.SetState(2509)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2507)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2508)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(2520)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		p.SetState(2512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2511)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(2517)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2514)

				var _x = p.Id()

				localctx.(*Drop_ruleContext).schema_name = _x
			}
			{
				p.SetState(2515)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(2519)

			var _x = p.Id()

			localctx.(*Drop_ruleContext).rule_name = _x
		}

	}

	return localctx
}

// IDrop_schemaContext is an interface to support dynamic dispatch.
type IDrop_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// IsDrop_schemaContext differentiates from other interfaces.
	IsDrop_schemaContext()
}

type Drop_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
}

func NewEmptyDrop_schemaContext() *Drop_schemaContext {
	var p = new(Drop_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_schema
	return p
}

func (*Drop_schemaContext) IsDrop_schemaContext() {}

func NewDrop_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_schemaContext {
	var p = new(Drop_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_schema

	return p
}

func (s *Drop_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_schemaContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_schemaContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_schemaContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_schemaContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Drop_schemaContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_schemaContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_schemaContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_schema(s)
	}
}

func (s *Drop_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_schema(s)
	}
}

func (s *Drop_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_schema() (localctx IDrop_schemaContext) {
	localctx = NewDrop_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, TSqlParserRULE_drop_schema)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2522)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2523)
		p.Match(TSqlParserSCHEMA)
	}
	p.SetState(2526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2524)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2525)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(2528)

		var _x = p.Id()

		localctx.(*Drop_schemaContext).schema_name = _x
	}

	return localctx
}

// IDrop_search_property_listContext is an interface to support dynamic dispatch.
type IDrop_search_property_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProperty_list_name returns the property_list_name rule contexts.
	GetProperty_list_name() IIdContext

	// SetProperty_list_name sets the property_list_name rule contexts.
	SetProperty_list_name(IIdContext)

	// IsDrop_search_property_listContext differentiates from other interfaces.
	IsDrop_search_property_listContext()
}

type Drop_search_property_listContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	property_list_name IIdContext
}

func NewEmptyDrop_search_property_listContext() *Drop_search_property_listContext {
	var p = new(Drop_search_property_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_search_property_list
	return p
}

func (*Drop_search_property_listContext) IsDrop_search_property_listContext() {}

func NewDrop_search_property_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_search_property_listContext {
	var p = new(Drop_search_property_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_search_property_list

	return p
}

func (s *Drop_search_property_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_search_property_listContext) GetProperty_list_name() IIdContext {
	return s.property_list_name
}

func (s *Drop_search_property_listContext) SetProperty_list_name(v IIdContext) {
	s.property_list_name = v
}

func (s *Drop_search_property_listContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_search_property_listContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEARCH, 0)
}

func (s *Drop_search_property_listContext) PROPERTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROPERTY, 0)
}

func (s *Drop_search_property_listContext) LIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIST, 0)
}

func (s *Drop_search_property_listContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_search_property_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_search_property_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_search_property_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_search_property_list(s)
	}
}

func (s *Drop_search_property_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_search_property_list(s)
	}
}

func (s *Drop_search_property_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_search_property_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_search_property_list() (localctx IDrop_search_property_listContext) {
	localctx = NewDrop_search_property_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, TSqlParserRULE_drop_search_property_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2530)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2531)
		p.Match(TSqlParserSEARCH)
	}
	{
		p.SetState(2532)
		p.Match(TSqlParserPROPERTY)
	}
	{
		p.SetState(2533)
		p.Match(TSqlParserLIST)
	}
	{
		p.SetState(2534)

		var _x = p.Id()

		localctx.(*Drop_search_property_listContext).property_list_name = _x
	}

	return localctx
}

// IDrop_security_policyContext is an interface to support dynamic dispatch.
type IDrop_security_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetSecurity_policy_name returns the security_policy_name rule contexts.
	GetSecurity_policy_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetSecurity_policy_name sets the security_policy_name rule contexts.
	SetSecurity_policy_name(IIdContext)

	// IsDrop_security_policyContext differentiates from other interfaces.
	IsDrop_security_policyContext()
}

type Drop_security_policyContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	schema_name          IIdContext
	security_policy_name IIdContext
}

func NewEmptyDrop_security_policyContext() *Drop_security_policyContext {
	var p = new(Drop_security_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_security_policy
	return p
}

func (*Drop_security_policyContext) IsDrop_security_policyContext() {}

func NewDrop_security_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_security_policyContext {
	var p = new(Drop_security_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_security_policy

	return p
}

func (s *Drop_security_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_security_policyContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_security_policyContext) GetSecurity_policy_name() IIdContext {
	return s.security_policy_name
}

func (s *Drop_security_policyContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_security_policyContext) SetSecurity_policy_name(v IIdContext) {
	s.security_policy_name = v
}

func (s *Drop_security_policyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_security_policyContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECURITY, 0)
}

func (s *Drop_security_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOLICY, 0)
}

func (s *Drop_security_policyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_security_policyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_security_policyContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_security_policyContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_security_policyContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_security_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_security_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_security_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_security_policy(s)
	}
}

func (s *Drop_security_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_security_policy(s)
	}
}

func (s *Drop_security_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_security_policy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_security_policy() (localctx IDrop_security_policyContext) {
	localctx = NewDrop_security_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, TSqlParserRULE_drop_security_policy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2536)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2537)
		p.Match(TSqlParserSECURITY)
	}
	{
		p.SetState(2538)
		p.Match(TSqlParserPOLICY)
	}
	p.SetState(2541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2539)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2540)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(2546)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2543)

			var _x = p.Id()

			localctx.(*Drop_security_policyContext).schema_name = _x
		}
		{
			p.SetState(2544)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2548)

		var _x = p.Id()

		localctx.(*Drop_security_policyContext).security_policy_name = _x
	}

	return localctx
}

// IDrop_sequenceContext is an interface to support dynamic dispatch.
type IDrop_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetSequence_name returns the sequence_name rule contexts.
	GetSequence_name() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetSequence_name sets the sequence_name rule contexts.
	SetSequence_name(IIdContext)

	// IsDrop_sequenceContext differentiates from other interfaces.
	IsDrop_sequenceContext()
}

type Drop_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	database_name IIdContext
	schema_name   IIdContext
	sequence_name IIdContext
}

func NewEmptyDrop_sequenceContext() *Drop_sequenceContext {
	var p = new(Drop_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_sequence
	return p
}

func (*Drop_sequenceContext) IsDrop_sequenceContext() {}

func NewDrop_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_sequenceContext {
	var p = new(Drop_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_sequence

	return p
}

func (s *Drop_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_sequenceContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Drop_sequenceContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_sequenceContext) GetSequence_name() IIdContext { return s.sequence_name }

func (s *Drop_sequenceContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Drop_sequenceContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_sequenceContext) SetSequence_name(v IIdContext) { s.sequence_name = v }

func (s *Drop_sequenceContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEQUENCE, 0)
}

func (s *Drop_sequenceContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_sequenceContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_sequenceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_sequenceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_sequenceContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Drop_sequenceContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Drop_sequenceContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Drop_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_sequence(s)
	}
}

func (s *Drop_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_sequence(s)
	}
}

func (s *Drop_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_sequence() (localctx IDrop_sequenceContext) {
	localctx = NewDrop_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, TSqlParserRULE_drop_sequence)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2550)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2551)
		p.Match(TSqlParserSEQUENCE)
	}
	p.SetState(2554)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2552)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2553)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(2570)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
		p.SetState(2557)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2556)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(2562)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2559)

				var _x = p.Id()

				localctx.(*Drop_sequenceContext).database_name = _x
			}
			{
				p.SetState(2560)
				p.Match(TSqlParserDOT)
			}

		}
		p.SetState(2567)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2564)

				var _x = p.Id()

				localctx.(*Drop_sequenceContext).schema_name = _x
			}
			{
				p.SetState(2565)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(2569)

			var _x = p.Id()

			localctx.(*Drop_sequenceContext).sequence_name = _x
		}

	}

	return localctx
}

// IDrop_server_auditContext is an interface to support dynamic dispatch.
type IDrop_server_auditContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAudit_name returns the audit_name rule contexts.
	GetAudit_name() IIdContext

	// SetAudit_name sets the audit_name rule contexts.
	SetAudit_name(IIdContext)

	// IsDrop_server_auditContext differentiates from other interfaces.
	IsDrop_server_auditContext()
}

type Drop_server_auditContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	audit_name IIdContext
}

func NewEmptyDrop_server_auditContext() *Drop_server_auditContext {
	var p = new(Drop_server_auditContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_server_audit
	return p
}

func (*Drop_server_auditContext) IsDrop_server_auditContext() {}

func NewDrop_server_auditContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_server_auditContext {
	var p = new(Drop_server_auditContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_server_audit

	return p
}

func (s *Drop_server_auditContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_server_auditContext) GetAudit_name() IIdContext { return s.audit_name }

func (s *Drop_server_auditContext) SetAudit_name(v IIdContext) { s.audit_name = v }

func (s *Drop_server_auditContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_server_auditContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_server_auditContext) AUDIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, 0)
}

func (s *Drop_server_auditContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_server_auditContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_server_auditContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_server_auditContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_server_audit(s)
	}
}

func (s *Drop_server_auditContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_server_audit(s)
	}
}

func (s *Drop_server_auditContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_server_audit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_server_audit() (localctx IDrop_server_auditContext) {
	localctx = NewDrop_server_auditContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, TSqlParserRULE_drop_server_audit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2572)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2573)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(2574)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(2575)

		var _x = p.Id()

		localctx.(*Drop_server_auditContext).audit_name = _x
	}

	return localctx
}

// IDrop_server_audit_specificationContext is an interface to support dynamic dispatch.
type IDrop_server_audit_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAudit_specification_name returns the audit_specification_name rule contexts.
	GetAudit_specification_name() IIdContext

	// SetAudit_specification_name sets the audit_specification_name rule contexts.
	SetAudit_specification_name(IIdContext)

	// IsDrop_server_audit_specificationContext differentiates from other interfaces.
	IsDrop_server_audit_specificationContext()
}

type Drop_server_audit_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	audit_specification_name IIdContext
}

func NewEmptyDrop_server_audit_specificationContext() *Drop_server_audit_specificationContext {
	var p = new(Drop_server_audit_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_server_audit_specification
	return p
}

func (*Drop_server_audit_specificationContext) IsDrop_server_audit_specificationContext() {}

func NewDrop_server_audit_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_server_audit_specificationContext {
	var p = new(Drop_server_audit_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_server_audit_specification

	return p
}

func (s *Drop_server_audit_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_server_audit_specificationContext) GetAudit_specification_name() IIdContext {
	return s.audit_specification_name
}

func (s *Drop_server_audit_specificationContext) SetAudit_specification_name(v IIdContext) {
	s.audit_specification_name = v
}

func (s *Drop_server_audit_specificationContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_server_audit_specificationContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_server_audit_specificationContext) AUDIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, 0)
}

func (s *Drop_server_audit_specificationContext) SPECIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPECIFICATION, 0)
}

func (s *Drop_server_audit_specificationContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_server_audit_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_server_audit_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_server_audit_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_server_audit_specification(s)
	}
}

func (s *Drop_server_audit_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_server_audit_specification(s)
	}
}

func (s *Drop_server_audit_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_server_audit_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_server_audit_specification() (localctx IDrop_server_audit_specificationContext) {
	localctx = NewDrop_server_audit_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, TSqlParserRULE_drop_server_audit_specification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2577)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2578)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(2579)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(2580)
		p.Match(TSqlParserSPECIFICATION)
	}
	{
		p.SetState(2581)

		var _x = p.Id()

		localctx.(*Drop_server_audit_specificationContext).audit_specification_name = _x
	}

	return localctx
}

// IDrop_server_roleContext is an interface to support dynamic dispatch.
type IDrop_server_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole_name returns the role_name rule contexts.
	GetRole_name() IIdContext

	// SetRole_name sets the role_name rule contexts.
	SetRole_name(IIdContext)

	// IsDrop_server_roleContext differentiates from other interfaces.
	IsDrop_server_roleContext()
}

type Drop_server_roleContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	role_name IIdContext
}

func NewEmptyDrop_server_roleContext() *Drop_server_roleContext {
	var p = new(Drop_server_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_server_role
	return p
}

func (*Drop_server_roleContext) IsDrop_server_roleContext() {}

func NewDrop_server_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_server_roleContext {
	var p = new(Drop_server_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_server_role

	return p
}

func (s *Drop_server_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_server_roleContext) GetRole_name() IIdContext { return s.role_name }

func (s *Drop_server_roleContext) SetRole_name(v IIdContext) { s.role_name = v }

func (s *Drop_server_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_server_roleContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_server_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Drop_server_roleContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_server_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_server_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_server_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_server_role(s)
	}
}

func (s *Drop_server_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_server_role(s)
	}
}

func (s *Drop_server_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_server_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_server_role() (localctx IDrop_server_roleContext) {
	localctx = NewDrop_server_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, TSqlParserRULE_drop_server_role)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2583)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2584)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(2585)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(2586)

		var _x = p.Id()

		localctx.(*Drop_server_roleContext).role_name = _x
	}

	return localctx
}

// IDrop_serviceContext is an interface to support dynamic dispatch.
type IDrop_serviceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDropped_service_name returns the dropped_service_name rule contexts.
	GetDropped_service_name() IIdContext

	// SetDropped_service_name sets the dropped_service_name rule contexts.
	SetDropped_service_name(IIdContext)

	// IsDrop_serviceContext differentiates from other interfaces.
	IsDrop_serviceContext()
}

type Drop_serviceContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	dropped_service_name IIdContext
}

func NewEmptyDrop_serviceContext() *Drop_serviceContext {
	var p = new(Drop_serviceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_service
	return p
}

func (*Drop_serviceContext) IsDrop_serviceContext() {}

func NewDrop_serviceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_serviceContext {
	var p = new(Drop_serviceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_service

	return p
}

func (s *Drop_serviceContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_serviceContext) GetDropped_service_name() IIdContext { return s.dropped_service_name }

func (s *Drop_serviceContext) SetDropped_service_name(v IIdContext) { s.dropped_service_name = v }

func (s *Drop_serviceContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_serviceContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Drop_serviceContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_serviceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_serviceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_serviceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_service(s)
	}
}

func (s *Drop_serviceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_service(s)
	}
}

func (s *Drop_serviceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_service(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_service() (localctx IDrop_serviceContext) {
	localctx = NewDrop_serviceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, TSqlParserRULE_drop_service)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2588)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2589)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(2590)

		var _x = p.Id()

		localctx.(*Drop_serviceContext).dropped_service_name = _x
	}

	return localctx
}

// IDrop_signatureContext is an interface to support dynamic dispatch.
type IDrop_signatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetModule_name returns the module_name rule contexts.
	GetModule_name() IIdContext

	// GetCert_name returns the cert_name rule contexts.
	GetCert_name() IIdContext

	// GetAsym_key_name returns the Asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetModule_name sets the module_name rule contexts.
	SetModule_name(IIdContext)

	// SetCert_name sets the cert_name rule contexts.
	SetCert_name(IIdContext)

	// SetAsym_key_name sets the Asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// IsDrop_signatureContext differentiates from other interfaces.
	IsDrop_signatureContext()
}

type Drop_signatureContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	schema_name   IIdContext
	module_name   IIdContext
	cert_name     IIdContext
	Asym_key_name IIdContext
}

func NewEmptyDrop_signatureContext() *Drop_signatureContext {
	var p = new(Drop_signatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_signature
	return p
}

func (*Drop_signatureContext) IsDrop_signatureContext() {}

func NewDrop_signatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_signatureContext {
	var p = new(Drop_signatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_signature

	return p
}

func (s *Drop_signatureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_signatureContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Drop_signatureContext) GetModule_name() IIdContext { return s.module_name }

func (s *Drop_signatureContext) GetCert_name() IIdContext { return s.cert_name }

func (s *Drop_signatureContext) GetAsym_key_name() IIdContext { return s.Asym_key_name }

func (s *Drop_signatureContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_signatureContext) SetModule_name(v IIdContext) { s.module_name = v }

func (s *Drop_signatureContext) SetCert_name(v IIdContext) { s.cert_name = v }

func (s *Drop_signatureContext) SetAsym_key_name(v IIdContext) { s.Asym_key_name = v }

func (s *Drop_signatureContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_signatureContext) SIGNATURE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIGNATURE, 0)
}

func (s *Drop_signatureContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Drop_signatureContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Drop_signatureContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_signatureContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_signatureContext) COUNTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNTER, 0)
}

func (s *Drop_signatureContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_signatureContext) AllCERTIFICATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCERTIFICATE)
}

func (s *Drop_signatureContext) CERTIFICATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, i)
}

func (s *Drop_signatureContext) AllASYMMETRIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserASYMMETRIC)
}

func (s *Drop_signatureContext) ASYMMETRIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, i)
}

func (s *Drop_signatureContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Drop_signatureContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Drop_signatureContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Drop_signatureContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Drop_signatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_signatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_signatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_signature(s)
	}
}

func (s *Drop_signatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_signature(s)
	}
}

func (s *Drop_signatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_signature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_signature() (localctx IDrop_signatureContext) {
	localctx = NewDrop_signatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, TSqlParserRULE_drop_signature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2592)
		p.Match(TSqlParserDROP)
	}
	p.SetState(2594)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOUNTER {
		{
			p.SetState(2593)
			p.Match(TSqlParserCOUNTER)
		}

	}
	{
		p.SetState(2596)
		p.Match(TSqlParserSIGNATURE)
	}
	{
		p.SetState(2597)
		p.Match(TSqlParserFROM)
	}
	p.SetState(2601)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2598)

			var _x = p.Id()

			localctx.(*Drop_signatureContext).schema_name = _x
		}
		{
			p.SetState(2599)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2603)

		var _x = p.Id()

		localctx.(*Drop_signatureContext).module_name = _x
	}
	{
		p.SetState(2604)
		p.Match(TSqlParserBY)
	}
	p.SetState(2616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserASYMMETRIC || _la == TSqlParserCERTIFICATE || _la == TSqlParserCOMMA {
		p.SetState(2616)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) {
		case 1:
			p.SetState(2606)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2605)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2608)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(2609)

				var _x = p.Id()

				localctx.(*Drop_signatureContext).cert_name = _x
			}

		case 2:
			p.SetState(2611)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2610)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2613)
				p.Match(TSqlParserASYMMETRIC)
			}
			{
				p.SetState(2614)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(2615)

				var _x = p.Id()

				localctx.(*Drop_signatureContext).Asym_key_name = _x
			}

		}

		p.SetState(2618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDrop_statistics_name_azure_dw_and_pdwContext is an interface to support dynamic dispatch.
type IDrop_statistics_name_azure_dw_and_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// GetStatistics_name returns the statistics_name rule contexts.
	GetStatistics_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// SetStatistics_name sets the statistics_name rule contexts.
	SetStatistics_name(IIdContext)

	// IsDrop_statistics_name_azure_dw_and_pdwContext differentiates from other interfaces.
	IsDrop_statistics_name_azure_dw_and_pdwContext()
}

type Drop_statistics_name_azure_dw_and_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	schema_name     IIdContext
	object_name     IIdContext
	statistics_name IIdContext
}

func NewEmptyDrop_statistics_name_azure_dw_and_pdwContext() *Drop_statistics_name_azure_dw_and_pdwContext {
	var p = new(Drop_statistics_name_azure_dw_and_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_statistics_name_azure_dw_and_pdw
	return p
}

func (*Drop_statistics_name_azure_dw_and_pdwContext) IsDrop_statistics_name_azure_dw_and_pdwContext() {
}

func NewDrop_statistics_name_azure_dw_and_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statistics_name_azure_dw_and_pdwContext {
	var p = new(Drop_statistics_name_azure_dw_and_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_statistics_name_azure_dw_and_pdw

	return p
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statistics_name_azure_dw_and_pdwContext) GetSchema_name() IIdContext {
	return s.schema_name
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) GetObject_name() IIdContext {
	return s.object_name
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) GetStatistics_name() IIdContext {
	return s.statistics_name
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Drop_statistics_name_azure_dw_and_pdwContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Drop_statistics_name_azure_dw_and_pdwContext) SetStatistics_name(v IIdContext) {
	s.statistics_name = v
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATISTICS, 0)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_statistics_name_azure_dw_and_pdw(s)
	}
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_statistics_name_azure_dw_and_pdw(s)
	}
}

func (s *Drop_statistics_name_azure_dw_and_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_statistics_name_azure_dw_and_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_statistics_name_azure_dw_and_pdw() (localctx IDrop_statistics_name_azure_dw_and_pdwContext) {
	localctx = NewDrop_statistics_name_azure_dw_and_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, TSqlParserRULE_drop_statistics_name_azure_dw_and_pdw)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2620)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2621)
		p.Match(TSqlParserSTATISTICS)
	}
	p.SetState(2625)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2622)

			var _x = p.Id()

			localctx.(*Drop_statistics_name_azure_dw_and_pdwContext).schema_name = _x
		}
		{
			p.SetState(2623)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2627)

		var _x = p.Id()

		localctx.(*Drop_statistics_name_azure_dw_and_pdwContext).object_name = _x
	}
	{
		p.SetState(2628)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(2629)

		var _x = p.Id()

		localctx.(*Drop_statistics_name_azure_dw_and_pdwContext).statistics_name = _x
	}

	return localctx
}

// IDrop_symmetric_keyContext is an interface to support dynamic dispatch.
type IDrop_symmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSymmetric_key_name returns the symmetric_key_name rule contexts.
	GetSymmetric_key_name() IIdContext

	// SetSymmetric_key_name sets the symmetric_key_name rule contexts.
	SetSymmetric_key_name(IIdContext)

	// IsDrop_symmetric_keyContext differentiates from other interfaces.
	IsDrop_symmetric_keyContext()
}

type Drop_symmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	symmetric_key_name IIdContext
}

func NewEmptyDrop_symmetric_keyContext() *Drop_symmetric_keyContext {
	var p = new(Drop_symmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_symmetric_key
	return p
}

func (*Drop_symmetric_keyContext) IsDrop_symmetric_keyContext() {}

func NewDrop_symmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_symmetric_keyContext {
	var p = new(Drop_symmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_symmetric_key

	return p
}

func (s *Drop_symmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_symmetric_keyContext) GetSymmetric_key_name() IIdContext { return s.symmetric_key_name }

func (s *Drop_symmetric_keyContext) SetSymmetric_key_name(v IIdContext) { s.symmetric_key_name = v }

func (s *Drop_symmetric_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_symmetric_keyContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Drop_symmetric_keyContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Drop_symmetric_keyContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Drop_symmetric_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_symmetric_keyContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Drop_symmetric_keyContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Drop_symmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_symmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_symmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_symmetric_key(s)
	}
}

func (s *Drop_symmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_symmetric_key(s)
	}
}

func (s *Drop_symmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_symmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_symmetric_key() (localctx IDrop_symmetric_keyContext) {
	localctx = NewDrop_symmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, TSqlParserRULE_drop_symmetric_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2631)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2632)
		p.Match(TSqlParserSYMMETRIC)
	}
	{
		p.SetState(2633)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2634)

		var _x = p.Id()

		localctx.(*Drop_symmetric_keyContext).symmetric_key_name = _x
	}
	p.SetState(2638)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserREMOVE {
		{
			p.SetState(2635)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(2636)
			p.Match(TSqlParserPROVIDER)
		}
		{
			p.SetState(2637)
			p.Match(TSqlParserKEY)
		}

	}

	return localctx
}

// IDrop_synonymContext is an interface to support dynamic dispatch.
type IDrop_synonymContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetSynonym_name returns the synonym_name rule contexts.
	GetSynonym_name() IIdContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetSynonym_name sets the synonym_name rule contexts.
	SetSynonym_name(IIdContext)

	// IsDrop_synonymContext differentiates from other interfaces.
	IsDrop_synonymContext()
}

type Drop_synonymContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	schema       IIdContext
	synonym_name IIdContext
}

func NewEmptyDrop_synonymContext() *Drop_synonymContext {
	var p = new(Drop_synonymContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_synonym
	return p
}

func (*Drop_synonymContext) IsDrop_synonymContext() {}

func NewDrop_synonymContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_synonymContext {
	var p = new(Drop_synonymContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_synonym

	return p
}

func (s *Drop_synonymContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_synonymContext) GetSchema() IIdContext { return s.schema }

func (s *Drop_synonymContext) GetSynonym_name() IIdContext { return s.synonym_name }

func (s *Drop_synonymContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Drop_synonymContext) SetSynonym_name(v IIdContext) { s.synonym_name = v }

func (s *Drop_synonymContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_synonymContext) SYNONYM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYNONYM, 0)
}

func (s *Drop_synonymContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_synonymContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_synonymContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_synonymContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_synonymContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_synonymContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_synonymContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_synonymContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_synonym(s)
	}
}

func (s *Drop_synonymContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_synonym(s)
	}
}

func (s *Drop_synonymContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_synonym(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_synonym() (localctx IDrop_synonymContext) {
	localctx = NewDrop_synonymContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, TSqlParserRULE_drop_synonym)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2640)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2641)
		p.Match(TSqlParserSYNONYM)
	}
	p.SetState(2644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2642)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2643)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(2649)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2646)

			var _x = p.Id()

			localctx.(*Drop_synonymContext).schema = _x
		}
		{
			p.SetState(2647)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2651)

		var _x = p.Id()

		localctx.(*Drop_synonymContext).synonym_name = _x
	}

	return localctx
}

// IDrop_userContext is an interface to support dynamic dispatch.
type IDrop_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// IsDrop_userContext differentiates from other interfaces.
	IsDrop_userContext()
}

type Drop_userContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	user_name IIdContext
}

func NewEmptyDrop_userContext() *Drop_userContext {
	var p = new(Drop_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_user
	return p
}

func (*Drop_userContext) IsDrop_userContext() {}

func NewDrop_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_userContext {
	var p = new(Drop_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_user

	return p
}

func (s *Drop_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_userContext) GetUser_name() IIdContext { return s.user_name }

func (s *Drop_userContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Drop_userContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_userContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Drop_userContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_userContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_userContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_user(s)
	}
}

func (s *Drop_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_user(s)
	}
}

func (s *Drop_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_user(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_user() (localctx IDrop_userContext) {
	localctx = NewDrop_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, TSqlParserRULE_drop_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2653)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2654)
		p.Match(TSqlParserUSER)
	}
	p.SetState(2657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(2655)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(2656)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(2659)

		var _x = p.Id()

		localctx.(*Drop_userContext).user_name = _x
	}

	return localctx
}

// IDrop_workload_groupContext is an interface to support dynamic dispatch.
type IDrop_workload_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetGroup_name returns the group_name rule contexts.
	GetGroup_name() IIdContext

	// SetGroup_name sets the group_name rule contexts.
	SetGroup_name(IIdContext)

	// IsDrop_workload_groupContext differentiates from other interfaces.
	IsDrop_workload_groupContext()
}

type Drop_workload_groupContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	group_name IIdContext
}

func NewEmptyDrop_workload_groupContext() *Drop_workload_groupContext {
	var p = new(Drop_workload_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_workload_group
	return p
}

func (*Drop_workload_groupContext) IsDrop_workload_groupContext() {}

func NewDrop_workload_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_workload_groupContext {
	var p = new(Drop_workload_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_workload_group

	return p
}

func (s *Drop_workload_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_workload_groupContext) GetGroup_name() IIdContext { return s.group_name }

func (s *Drop_workload_groupContext) SetGroup_name(v IIdContext) { s.group_name = v }

func (s *Drop_workload_groupContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_workload_groupContext) WORKLOAD() antlr.TerminalNode {
	return s.GetToken(TSqlParserWORKLOAD, 0)
}

func (s *Drop_workload_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Drop_workload_groupContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_workload_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_workload_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_workload_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_workload_group(s)
	}
}

func (s *Drop_workload_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_workload_group(s)
	}
}

func (s *Drop_workload_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_workload_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_workload_group() (localctx IDrop_workload_groupContext) {
	localctx = NewDrop_workload_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, TSqlParserRULE_drop_workload_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2661)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2662)
		p.Match(TSqlParserWORKLOAD)
	}
	{
		p.SetState(2663)
		p.Match(TSqlParserGROUP)
	}
	{
		p.SetState(2664)

		var _x = p.Id()

		localctx.(*Drop_workload_groupContext).group_name = _x
	}

	return localctx
}

// IDrop_xml_schema_collectionContext is an interface to support dynamic dispatch.
type IDrop_xml_schema_collectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRelational_schema returns the relational_schema rule contexts.
	GetRelational_schema() IIdContext

	// GetSql_identifier returns the sql_identifier rule contexts.
	GetSql_identifier() IIdContext

	// SetRelational_schema sets the relational_schema rule contexts.
	SetRelational_schema(IIdContext)

	// SetSql_identifier sets the sql_identifier rule contexts.
	SetSql_identifier(IIdContext)

	// IsDrop_xml_schema_collectionContext differentiates from other interfaces.
	IsDrop_xml_schema_collectionContext()
}

type Drop_xml_schema_collectionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	relational_schema IIdContext
	sql_identifier    IIdContext
}

func NewEmptyDrop_xml_schema_collectionContext() *Drop_xml_schema_collectionContext {
	var p = new(Drop_xml_schema_collectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_xml_schema_collection
	return p
}

func (*Drop_xml_schema_collectionContext) IsDrop_xml_schema_collectionContext() {}

func NewDrop_xml_schema_collectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_xml_schema_collectionContext {
	var p = new(Drop_xml_schema_collectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_xml_schema_collection

	return p
}

func (s *Drop_xml_schema_collectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_xml_schema_collectionContext) GetRelational_schema() IIdContext {
	return s.relational_schema
}

func (s *Drop_xml_schema_collectionContext) GetSql_identifier() IIdContext { return s.sql_identifier }

func (s *Drop_xml_schema_collectionContext) SetRelational_schema(v IIdContext) {
	s.relational_schema = v
}

func (s *Drop_xml_schema_collectionContext) SetSql_identifier(v IIdContext) { s.sql_identifier = v }

func (s *Drop_xml_schema_collectionContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_xml_schema_collectionContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Drop_xml_schema_collectionContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Drop_xml_schema_collectionContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Drop_xml_schema_collectionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_xml_schema_collectionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_xml_schema_collectionContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Drop_xml_schema_collectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_xml_schema_collectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_xml_schema_collectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_xml_schema_collection(s)
	}
}

func (s *Drop_xml_schema_collectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_xml_schema_collection(s)
	}
}

func (s *Drop_xml_schema_collectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_xml_schema_collection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_xml_schema_collection() (localctx IDrop_xml_schema_collectionContext) {
	localctx = NewDrop_xml_schema_collectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, TSqlParserRULE_drop_xml_schema_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2666)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(2667)
		p.Match(TSqlParserXML)
	}
	{
		p.SetState(2668)
		p.Match(TSqlParserSCHEMA)
	}
	{
		p.SetState(2669)
		p.Match(TSqlParserCOLLECTION)
	}
	p.SetState(2673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2670)

			var _x = p.Id()

			localctx.(*Drop_xml_schema_collectionContext).relational_schema = _x
		}
		{
			p.SetState(2671)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2675)

		var _x = p.Id()

		localctx.(*Drop_xml_schema_collectionContext).sql_identifier = _x
	}

	return localctx
}

// IDisable_triggerContext is an interface to support dynamic dispatch.
type IDisable_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetTrigger_name returns the trigger_name rule contexts.
	GetTrigger_name() IIdContext

	// GetSchema_id returns the schema_id rule contexts.
	GetSchema_id() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetTrigger_name sets the trigger_name rule contexts.
	SetTrigger_name(IIdContext)

	// SetSchema_id sets the schema_id rule contexts.
	SetSchema_id(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// IsDisable_triggerContext differentiates from other interfaces.
	IsDisable_triggerContext()
}

type Disable_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	schema_name  IIdContext
	trigger_name IIdContext
	schema_id    IIdContext
	object_name  IIdContext
}

func NewEmptyDisable_triggerContext() *Disable_triggerContext {
	var p = new(Disable_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_disable_trigger
	return p
}

func (*Disable_triggerContext) IsDisable_triggerContext() {}

func NewDisable_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Disable_triggerContext {
	var p = new(Disable_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_disable_trigger

	return p
}

func (s *Disable_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Disable_triggerContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Disable_triggerContext) GetTrigger_name() IIdContext { return s.trigger_name }

func (s *Disable_triggerContext) GetSchema_id() IIdContext { return s.schema_id }

func (s *Disable_triggerContext) GetObject_name() IIdContext { return s.object_name }

func (s *Disable_triggerContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Disable_triggerContext) SetTrigger_name(v IIdContext) { s.trigger_name = v }

func (s *Disable_triggerContext) SetSchema_id(v IIdContext) { s.schema_id = v }

func (s *Disable_triggerContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Disable_triggerContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Disable_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Disable_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Disable_triggerContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALL)
}

func (s *Disable_triggerContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, i)
}

func (s *Disable_triggerContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Disable_triggerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Disable_triggerContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Disable_triggerContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Disable_triggerContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Disable_triggerContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Disable_triggerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Disable_triggerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Disable_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Disable_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Disable_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDisable_trigger(s)
	}
}

func (s *Disable_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDisable_trigger(s)
	}
}

func (s *Disable_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDisable_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Disable_trigger() (localctx IDisable_triggerContext) {
	localctx = NewDisable_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, TSqlParserRULE_disable_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2677)
		p.Match(TSqlParserDISABLE)
	}
	{
		p.SetState(2678)
		p.Match(TSqlParserTRIGGER)
	}
	p.SetState(2693)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserCOMMA:
		p.SetState(2688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(2680)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2679)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(2685)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 198, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2682)

					var _x = p.Id()

					localctx.(*Disable_triggerContext).schema_name = _x
				}
				{
					p.SetState(2683)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(2687)

				var _x = p.Id()

				localctx.(*Disable_triggerContext).trigger_name = _x
			}

			p.SetState(2690)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case TSqlParserALL:
		{
			p.SetState(2692)
			p.Match(TSqlParserALL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2695)
		p.Match(TSqlParserON)
	}
	p.SetState(2705)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.SetState(2699)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2696)

				var _x = p.Id()

				localctx.(*Disable_triggerContext).schema_id = _x
			}
			{
				p.SetState(2697)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(2701)

			var _x = p.Id()

			localctx.(*Disable_triggerContext).object_name = _x
		}

	case TSqlParserDATABASE:
		{
			p.SetState(2702)
			p.Match(TSqlParserDATABASE)
		}

	case TSqlParserALL:
		{
			p.SetState(2703)
			p.Match(TSqlParserALL)
		}
		{
			p.SetState(2704)
			p.Match(TSqlParserSERVER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEnable_triggerContext is an interface to support dynamic dispatch.
type IEnable_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetTrigger_name returns the trigger_name rule contexts.
	GetTrigger_name() IIdContext

	// GetSchema_id returns the schema_id rule contexts.
	GetSchema_id() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetTrigger_name sets the trigger_name rule contexts.
	SetTrigger_name(IIdContext)

	// SetSchema_id sets the schema_id rule contexts.
	SetSchema_id(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// IsEnable_triggerContext differentiates from other interfaces.
	IsEnable_triggerContext()
}

type Enable_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	schema_name  IIdContext
	trigger_name IIdContext
	schema_id    IIdContext
	object_name  IIdContext
}

func NewEmptyEnable_triggerContext() *Enable_triggerContext {
	var p = new(Enable_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_enable_trigger
	return p
}

func (*Enable_triggerContext) IsEnable_triggerContext() {}

func NewEnable_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Enable_triggerContext {
	var p = new(Enable_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_enable_trigger

	return p
}

func (s *Enable_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Enable_triggerContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Enable_triggerContext) GetTrigger_name() IIdContext { return s.trigger_name }

func (s *Enable_triggerContext) GetSchema_id() IIdContext { return s.schema_id }

func (s *Enable_triggerContext) GetObject_name() IIdContext { return s.object_name }

func (s *Enable_triggerContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Enable_triggerContext) SetTrigger_name(v IIdContext) { s.trigger_name = v }

func (s *Enable_triggerContext) SetSchema_id(v IIdContext) { s.schema_id = v }

func (s *Enable_triggerContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Enable_triggerContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE, 0)
}

func (s *Enable_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Enable_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Enable_triggerContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALL)
}

func (s *Enable_triggerContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, i)
}

func (s *Enable_triggerContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Enable_triggerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Enable_triggerContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Enable_triggerContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Enable_triggerContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Enable_triggerContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Enable_triggerContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Enable_triggerContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Enable_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Enable_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Enable_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEnable_trigger(s)
	}
}

func (s *Enable_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEnable_trigger(s)
	}
}

func (s *Enable_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEnable_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Enable_trigger() (localctx IEnable_triggerContext) {
	localctx = NewEnable_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, TSqlParserRULE_enable_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2707)
		p.Match(TSqlParserENABLE)
	}
	{
		p.SetState(2708)
		p.Match(TSqlParserTRIGGER)
	}
	p.SetState(2723)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserCOMMA:
		p.SetState(2718)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(2710)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2709)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(2715)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2712)

					var _x = p.Id()

					localctx.(*Enable_triggerContext).schema_name = _x
				}
				{
					p.SetState(2713)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(2717)

				var _x = p.Id()

				localctx.(*Enable_triggerContext).trigger_name = _x
			}

			p.SetState(2720)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case TSqlParserALL:
		{
			p.SetState(2722)
			p.Match(TSqlParserALL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(2725)
		p.Match(TSqlParserON)
	}
	p.SetState(2735)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.SetState(2729)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2726)

				var _x = p.Id()

				localctx.(*Enable_triggerContext).schema_id = _x
			}
			{
				p.SetState(2727)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(2731)

			var _x = p.Id()

			localctx.(*Enable_triggerContext).object_name = _x
		}

	case TSqlParserDATABASE:
		{
			p.SetState(2732)
			p.Match(TSqlParserDATABASE)
		}

	case TSqlParserALL:
		{
			p.SetState(2733)
			p.Match(TSqlParserALL)
		}
		{
			p.SetState(2734)
			p.Match(TSqlParserSERVER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITruncate_tableContext is an interface to support dynamic dispatch.
type ITruncate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsTruncate_tableContext differentiates from other interfaces.
	IsTruncate_tableContext()
}

type Truncate_tableContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	database_name IIdContext
	schema_name   IIdContext
	table         IIdContext
}

func NewEmptyTruncate_tableContext() *Truncate_tableContext {
	var p = new(Truncate_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_truncate_table
	return p
}

func (*Truncate_tableContext) IsTruncate_tableContext() {}

func NewTruncate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_tableContext {
	var p = new(Truncate_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_truncate_table

	return p
}

func (s *Truncate_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_tableContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Truncate_tableContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Truncate_tableContext) GetTable() IIdContext { return s.table }

func (s *Truncate_tableContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Truncate_tableContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Truncate_tableContext) SetTable(v IIdContext) { s.table = v }

func (s *Truncate_tableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRUNCATE, 0)
}

func (s *Truncate_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Truncate_tableContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Truncate_tableContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Truncate_tableContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Truncate_tableContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Truncate_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Truncate_tableContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Truncate_tableContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Truncate_tableContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITIONS, 0)
}

func (s *Truncate_tableContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Truncate_tableContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Truncate_tableContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Truncate_tableContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Truncate_tableContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Truncate_tableContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Truncate_tableContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Truncate_tableContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Truncate_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Truncate_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTruncate_table(s)
	}
}

func (s *Truncate_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTruncate_table(s)
	}
}

func (s *Truncate_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTruncate_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Truncate_table() (localctx ITruncate_tableContext) {
	localctx = NewTruncate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, TSqlParserRULE_truncate_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2737)
		p.Match(TSqlParserTRUNCATE)
	}
	{
		p.SetState(2738)
		p.Match(TSqlParserTABLE)
	}
	p.SetState(2742)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2739)

			var _x = p.Id()

			localctx.(*Truncate_tableContext).database_name = _x
		}
		{
			p.SetState(2740)
			p.Match(TSqlParserDOT)
		}

	}
	p.SetState(2747)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 210, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2744)

			var _x = p.Id()

			localctx.(*Truncate_tableContext).schema_name = _x
		}
		{
			p.SetState(2745)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(2749)

		var _x = p.Id()

		localctx.(*Truncate_tableContext).table = _x
	}
	p.SetState(2769)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2750)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(2751)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(2752)
			p.Match(TSqlParserPARTITIONS)
		}
		{
			p.SetState(2753)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(2763)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserDECIMAL || _la == TSqlParserCOMMA {
			p.SetState(2755)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2754)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(2761)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(2757)
					p.Match(TSqlParserDECIMAL)
				}

			case 2:
				{
					p.SetState(2758)
					p.Match(TSqlParserDECIMAL)
				}
				{
					p.SetState(2759)
					p.Match(TSqlParserTO)
				}
				{
					p.SetState(2760)
					p.Match(TSqlParserDECIMAL)
				}

			}

			p.SetState(2765)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2767)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(2768)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICreate_column_master_keyContext is an interface to support dynamic dispatch.
type ICreate_column_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_store_provider_name returns the key_store_provider_name token.
	GetKey_store_provider_name() antlr.Token

	// GetKey_path returns the key_path token.
	GetKey_path() antlr.Token

	// SetKey_store_provider_name sets the key_store_provider_name token.
	SetKey_store_provider_name(antlr.Token)

	// SetKey_path sets the key_path token.
	SetKey_path(antlr.Token)

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsCreate_column_master_keyContext differentiates from other interfaces.
	IsCreate_column_master_keyContext()
}

type Create_column_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	key_name                IIdContext
	key_store_provider_name antlr.Token
	key_path                antlr.Token
}

func NewEmptyCreate_column_master_keyContext() *Create_column_master_keyContext {
	var p = new(Create_column_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_column_master_key
	return p
}

func (*Create_column_master_keyContext) IsCreate_column_master_keyContext() {}

func NewCreate_column_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_column_master_keyContext {
	var p = new(Create_column_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_column_master_key

	return p
}

func (s *Create_column_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_column_master_keyContext) GetKey_store_provider_name() antlr.Token {
	return s.key_store_provider_name
}

func (s *Create_column_master_keyContext) GetKey_path() antlr.Token { return s.key_path }

func (s *Create_column_master_keyContext) SetKey_store_provider_name(v antlr.Token) {
	s.key_store_provider_name = v
}

func (s *Create_column_master_keyContext) SetKey_path(v antlr.Token) { s.key_path = v }

func (s *Create_column_master_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Create_column_master_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Create_column_master_keyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_column_master_keyContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Create_column_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Create_column_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_column_master_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_column_master_keyContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_column_master_keyContext) KEY_STORE_PROVIDER_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY_STORE_PROVIDER_NAME, 0)
}

func (s *Create_column_master_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_column_master_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_column_master_keyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Create_column_master_keyContext) KEY_PATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY_PATH, 0)
}

func (s *Create_column_master_keyContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_column_master_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_column_master_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_column_master_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_column_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_column_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_column_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_column_master_key(s)
	}
}

func (s *Create_column_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_column_master_key(s)
	}
}

func (s *Create_column_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_column_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_column_master_key() (localctx ICreate_column_master_keyContext) {
	localctx = NewCreate_column_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, TSqlParserRULE_create_column_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2771)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(2772)
		p.Match(TSqlParserCOLUMN)
	}
	{
		p.SetState(2773)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(2774)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(2775)

		var _x = p.Id()

		localctx.(*Create_column_master_keyContext).key_name = _x
	}
	{
		p.SetState(2776)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(2777)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(2778)
		p.Match(TSqlParserKEY_STORE_PROVIDER_NAME)
	}
	{
		p.SetState(2779)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2780)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_column_master_keyContext).key_store_provider_name = _m
	}
	{
		p.SetState(2781)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(2782)
		p.Match(TSqlParserKEY_PATH)
	}
	{
		p.SetState(2783)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2784)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_column_master_keyContext).key_path = _m
	}
	{
		p.SetState(2785)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IAlter_credentialContext is an interface to support dynamic dispatch.
type IAlter_credentialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentity_name returns the identity_name token.
	GetIdentity_name() antlr.Token

	// GetSecret returns the secret token.
	GetSecret() antlr.Token

	// SetIdentity_name sets the identity_name token.
	SetIdentity_name(antlr.Token)

	// SetSecret sets the secret token.
	SetSecret(antlr.Token)

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// IsAlter_credentialContext differentiates from other interfaces.
	IsAlter_credentialContext()
}

type Alter_credentialContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	credential_name IIdContext
	identity_name   antlr.Token
	secret          antlr.Token
}

func NewEmptyAlter_credentialContext() *Alter_credentialContext {
	var p = new(Alter_credentialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_credential
	return p
}

func (*Alter_credentialContext) IsAlter_credentialContext() {}

func NewAlter_credentialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_credentialContext {
	var p = new(Alter_credentialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_credential

	return p
}

func (s *Alter_credentialContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_credentialContext) GetIdentity_name() antlr.Token { return s.identity_name }

func (s *Alter_credentialContext) GetSecret() antlr.Token { return s.secret }

func (s *Alter_credentialContext) SetIdentity_name(v antlr.Token) { s.identity_name = v }

func (s *Alter_credentialContext) SetSecret(v antlr.Token) { s.secret = v }

func (s *Alter_credentialContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Alter_credentialContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Alter_credentialContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_credentialContext) CREDENTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, 0)
}

func (s *Alter_credentialContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_credentialContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *Alter_credentialContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_credentialContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_credentialContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_credentialContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_credentialContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_credentialContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Alter_credentialContext) SECRET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECRET, 0)
}

func (s *Alter_credentialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_credentialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_credentialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_credential(s)
	}
}

func (s *Alter_credentialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_credential(s)
	}
}

func (s *Alter_credentialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_credential(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_credential() (localctx IAlter_credentialContext) {
	localctx = NewAlter_credentialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, TSqlParserRULE_alter_credential)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2787)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(2788)
		p.Match(TSqlParserCREDENTIAL)
	}
	{
		p.SetState(2789)

		var _x = p.Id()

		localctx.(*Alter_credentialContext).credential_name = _x
	}
	{
		p.SetState(2790)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(2791)
		p.Match(TSqlParserIDENTITY)
	}
	{
		p.SetState(2792)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2793)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Alter_credentialContext).identity_name = _m
	}
	p.SetState(2798)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(2794)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(2795)
			p.Match(TSqlParserSECRET)
		}
		{
			p.SetState(2796)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2797)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_credentialContext).secret = _m
		}

	}

	return localctx
}

// ICreate_credentialContext is an interface to support dynamic dispatch.
type ICreate_credentialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIdentity_name returns the identity_name token.
	GetIdentity_name() antlr.Token

	// GetSecret returns the secret token.
	GetSecret() antlr.Token

	// SetIdentity_name sets the identity_name token.
	SetIdentity_name(antlr.Token)

	// SetSecret sets the secret token.
	SetSecret(antlr.Token)

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// GetCryptographic_provider_name returns the cryptographic_provider_name rule contexts.
	GetCryptographic_provider_name() IIdContext

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// SetCryptographic_provider_name sets the cryptographic_provider_name rule contexts.
	SetCryptographic_provider_name(IIdContext)

	// IsCreate_credentialContext differentiates from other interfaces.
	IsCreate_credentialContext()
}

type Create_credentialContext struct {
	*antlr.BaseParserRuleContext
	parser                      antlr.Parser
	credential_name             IIdContext
	identity_name               antlr.Token
	secret                      antlr.Token
	cryptographic_provider_name IIdContext
}

func NewEmptyCreate_credentialContext() *Create_credentialContext {
	var p = new(Create_credentialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_credential
	return p
}

func (*Create_credentialContext) IsCreate_credentialContext() {}

func NewCreate_credentialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_credentialContext {
	var p = new(Create_credentialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_credential

	return p
}

func (s *Create_credentialContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_credentialContext) GetIdentity_name() antlr.Token { return s.identity_name }

func (s *Create_credentialContext) GetSecret() antlr.Token { return s.secret }

func (s *Create_credentialContext) SetIdentity_name(v antlr.Token) { s.identity_name = v }

func (s *Create_credentialContext) SetSecret(v antlr.Token) { s.secret = v }

func (s *Create_credentialContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Create_credentialContext) GetCryptographic_provider_name() IIdContext {
	return s.cryptographic_provider_name
}

func (s *Create_credentialContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Create_credentialContext) SetCryptographic_provider_name(v IIdContext) {
	s.cryptographic_provider_name = v
}

func (s *Create_credentialContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_credentialContext) CREDENTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, 0)
}

func (s *Create_credentialContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_credentialContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *Create_credentialContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_credentialContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_credentialContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_credentialContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_credentialContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_credentialContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_credentialContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Create_credentialContext) SECRET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECRET, 0)
}

func (s *Create_credentialContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_credentialContext) CRYPTOGRAPHIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserCRYPTOGRAPHIC, 0)
}

func (s *Create_credentialContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_credentialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_credentialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_credentialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_credential(s)
	}
}

func (s *Create_credentialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_credential(s)
	}
}

func (s *Create_credentialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_credential(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_credential() (localctx ICreate_credentialContext) {
	localctx = NewCreate_credentialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, TSqlParserRULE_create_credential)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2800)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(2801)
		p.Match(TSqlParserCREDENTIAL)
	}
	{
		p.SetState(2802)

		var _x = p.Id()

		localctx.(*Create_credentialContext).credential_name = _x
	}
	{
		p.SetState(2803)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(2804)
		p.Match(TSqlParserIDENTITY)
	}
	{
		p.SetState(2805)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2806)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_credentialContext).identity_name = _m
	}
	p.SetState(2811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(2807)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(2808)
			p.Match(TSqlParserSECRET)
		}
		{
			p.SetState(2809)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2810)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_credentialContext).secret = _m
		}

	}
	p.SetState(2817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(2813)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(2814)
			p.Match(TSqlParserCRYPTOGRAPHIC)
		}
		{
			p.SetState(2815)
			p.Match(TSqlParserPROVIDER)
		}
		{
			p.SetState(2816)

			var _x = p.Id()

			localctx.(*Create_credentialContext).cryptographic_provider_name = _x
		}

	}

	return localctx
}

// IAlter_cryptographic_providerContext is an interface to support dynamic dispatch.
type IAlter_cryptographic_providerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCrypto_provider_ddl_file returns the crypto_provider_ddl_file token.
	GetCrypto_provider_ddl_file() antlr.Token

	// SetCrypto_provider_ddl_file sets the crypto_provider_ddl_file token.
	SetCrypto_provider_ddl_file(antlr.Token)

	// GetProvider_name returns the provider_name rule contexts.
	GetProvider_name() IIdContext

	// SetProvider_name sets the provider_name rule contexts.
	SetProvider_name(IIdContext)

	// IsAlter_cryptographic_providerContext differentiates from other interfaces.
	IsAlter_cryptographic_providerContext()
}

type Alter_cryptographic_providerContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	provider_name            IIdContext
	crypto_provider_ddl_file antlr.Token
}

func NewEmptyAlter_cryptographic_providerContext() *Alter_cryptographic_providerContext {
	var p = new(Alter_cryptographic_providerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_cryptographic_provider
	return p
}

func (*Alter_cryptographic_providerContext) IsAlter_cryptographic_providerContext() {}

func NewAlter_cryptographic_providerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_cryptographic_providerContext {
	var p = new(Alter_cryptographic_providerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_cryptographic_provider

	return p
}

func (s *Alter_cryptographic_providerContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_cryptographic_providerContext) GetCrypto_provider_ddl_file() antlr.Token {
	return s.crypto_provider_ddl_file
}

func (s *Alter_cryptographic_providerContext) SetCrypto_provider_ddl_file(v antlr.Token) {
	s.crypto_provider_ddl_file = v
}

func (s *Alter_cryptographic_providerContext) GetProvider_name() IIdContext { return s.provider_name }

func (s *Alter_cryptographic_providerContext) SetProvider_name(v IIdContext) { s.provider_name = v }

func (s *Alter_cryptographic_providerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_cryptographic_providerContext) CRYPTOGRAPHIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserCRYPTOGRAPHIC, 0)
}

func (s *Alter_cryptographic_providerContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Alter_cryptographic_providerContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_cryptographic_providerContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Alter_cryptographic_providerContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Alter_cryptographic_providerContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_cryptographic_providerContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_cryptographic_providerContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE, 0)
}

func (s *Alter_cryptographic_providerContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_cryptographic_providerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_cryptographic_providerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_cryptographic_providerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_cryptographic_provider(s)
	}
}

func (s *Alter_cryptographic_providerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_cryptographic_provider(s)
	}
}

func (s *Alter_cryptographic_providerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_cryptographic_provider(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_cryptographic_provider() (localctx IAlter_cryptographic_providerContext) {
	localctx = NewAlter_cryptographic_providerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, TSqlParserRULE_alter_cryptographic_provider)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2819)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(2820)
		p.Match(TSqlParserCRYPTOGRAPHIC)
	}
	{
		p.SetState(2821)
		p.Match(TSqlParserPROVIDER)
	}
	{
		p.SetState(2822)

		var _x = p.Id()

		localctx.(*Alter_cryptographic_providerContext).provider_name = _x
	}
	p.SetState(2827)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(2823)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(2824)
			p.Match(TSqlParserFILE)
		}
		{
			p.SetState(2825)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(2826)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_cryptographic_providerContext).crypto_provider_ddl_file = _m
		}

	}
	p.SetState(2830)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext()) == 1 {
		p.SetState(2829)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDISABLE || _la == TSqlParserENABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ICreate_cryptographic_providerContext is an interface to support dynamic dispatch.
type ICreate_cryptographic_providerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPath_of_DLL returns the path_of_DLL token.
	GetPath_of_DLL() antlr.Token

	// SetPath_of_DLL sets the path_of_DLL token.
	SetPath_of_DLL(antlr.Token)

	// GetProvider_name returns the provider_name rule contexts.
	GetProvider_name() IIdContext

	// SetProvider_name sets the provider_name rule contexts.
	SetProvider_name(IIdContext)

	// IsCreate_cryptographic_providerContext differentiates from other interfaces.
	IsCreate_cryptographic_providerContext()
}

type Create_cryptographic_providerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	provider_name IIdContext
	path_of_DLL   antlr.Token
}

func NewEmptyCreate_cryptographic_providerContext() *Create_cryptographic_providerContext {
	var p = new(Create_cryptographic_providerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_cryptographic_provider
	return p
}

func (*Create_cryptographic_providerContext) IsCreate_cryptographic_providerContext() {}

func NewCreate_cryptographic_providerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_cryptographic_providerContext {
	var p = new(Create_cryptographic_providerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_cryptographic_provider

	return p
}

func (s *Create_cryptographic_providerContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_cryptographic_providerContext) GetPath_of_DLL() antlr.Token { return s.path_of_DLL }

func (s *Create_cryptographic_providerContext) SetPath_of_DLL(v antlr.Token) { s.path_of_DLL = v }

func (s *Create_cryptographic_providerContext) GetProvider_name() IIdContext { return s.provider_name }

func (s *Create_cryptographic_providerContext) SetProvider_name(v IIdContext) { s.provider_name = v }

func (s *Create_cryptographic_providerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_cryptographic_providerContext) CRYPTOGRAPHIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserCRYPTOGRAPHIC, 0)
}

func (s *Create_cryptographic_providerContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_cryptographic_providerContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_cryptographic_providerContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Create_cryptographic_providerContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_cryptographic_providerContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_cryptographic_providerContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_cryptographic_providerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_cryptographic_providerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_cryptographic_providerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_cryptographic_provider(s)
	}
}

func (s *Create_cryptographic_providerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_cryptographic_provider(s)
	}
}

func (s *Create_cryptographic_providerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_cryptographic_provider(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_cryptographic_provider() (localctx ICreate_cryptographic_providerContext) {
	localctx = NewCreate_cryptographic_providerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, TSqlParserRULE_create_cryptographic_provider)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2832)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(2833)
		p.Match(TSqlParserCRYPTOGRAPHIC)
	}
	{
		p.SetState(2834)
		p.Match(TSqlParserPROVIDER)
	}
	{
		p.SetState(2835)

		var _x = p.Id()

		localctx.(*Create_cryptographic_providerContext).provider_name = _x
	}
	{
		p.SetState(2836)
		p.Match(TSqlParserFROM)
	}
	{
		p.SetState(2837)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(2838)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(2839)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_cryptographic_providerContext).path_of_DLL = _m
	}

	return localctx
}

// ICreate_event_notificationContext is an interface to support dynamic dispatch.
type ICreate_event_notificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBroker_service returns the broker_service token.
	GetBroker_service() antlr.Token

	// GetBroker_service_specifier_or_current_database returns the broker_service_specifier_or_current_database token.
	GetBroker_service_specifier_or_current_database() antlr.Token

	// SetBroker_service sets the broker_service token.
	SetBroker_service(antlr.Token)

	// SetBroker_service_specifier_or_current_database sets the broker_service_specifier_or_current_database token.
	SetBroker_service_specifier_or_current_database(antlr.Token)

	// GetEvent_notification_name returns the event_notification_name rule contexts.
	GetEvent_notification_name() IIdContext

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// GetEvent_type_or_group returns the event_type_or_group rule contexts.
	GetEvent_type_or_group() IIdContext

	// SetEvent_notification_name sets the event_notification_name rule contexts.
	SetEvent_notification_name(IIdContext)

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// SetEvent_type_or_group sets the event_type_or_group rule contexts.
	SetEvent_type_or_group(IIdContext)

	// IsCreate_event_notificationContext differentiates from other interfaces.
	IsCreate_event_notificationContext()
}

type Create_event_notificationContext struct {
	*antlr.BaseParserRuleContext
	parser                                       antlr.Parser
	event_notification_name                      IIdContext
	queue_name                                   IIdContext
	event_type_or_group                          IIdContext
	broker_service                               antlr.Token
	broker_service_specifier_or_current_database antlr.Token
}

func NewEmptyCreate_event_notificationContext() *Create_event_notificationContext {
	var p = new(Create_event_notificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_event_notification
	return p
}

func (*Create_event_notificationContext) IsCreate_event_notificationContext() {}

func NewCreate_event_notificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_event_notificationContext {
	var p = new(Create_event_notificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_event_notification

	return p
}

func (s *Create_event_notificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_event_notificationContext) GetBroker_service() antlr.Token { return s.broker_service }

func (s *Create_event_notificationContext) GetBroker_service_specifier_or_current_database() antlr.Token {
	return s.broker_service_specifier_or_current_database
}

func (s *Create_event_notificationContext) SetBroker_service(v antlr.Token) { s.broker_service = v }

func (s *Create_event_notificationContext) SetBroker_service_specifier_or_current_database(v antlr.Token) {
	s.broker_service_specifier_or_current_database = v
}

func (s *Create_event_notificationContext) GetEvent_notification_name() IIdContext {
	return s.event_notification_name
}

func (s *Create_event_notificationContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Create_event_notificationContext) GetEvent_type_or_group() IIdContext {
	return s.event_type_or_group
}

func (s *Create_event_notificationContext) SetEvent_notification_name(v IIdContext) {
	s.event_notification_name = v
}

func (s *Create_event_notificationContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Create_event_notificationContext) SetEvent_type_or_group(v IIdContext) {
	s.event_type_or_group = v
}

func (s *Create_event_notificationContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_event_notificationContext) EVENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENT, 0)
}

func (s *Create_event_notificationContext) NOTIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOTIFICATION, 0)
}

func (s *Create_event_notificationContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_event_notificationContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_event_notificationContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Create_event_notificationContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Create_event_notificationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_event_notificationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_event_notificationContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_event_notificationContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_event_notificationContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_event_notificationContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_event_notificationContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Create_event_notificationContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Create_event_notificationContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Create_event_notificationContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_event_notificationContext) FAN_IN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAN_IN, 0)
}

func (s *Create_event_notificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_event_notificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_event_notificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_event_notification(s)
	}
}

func (s *Create_event_notificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_event_notification(s)
	}
}

func (s *Create_event_notificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_event_notification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_event_notification() (localctx ICreate_event_notificationContext) {
	localctx = NewCreate_event_notificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, TSqlParserRULE_create_event_notification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2841)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(2842)
		p.Match(TSqlParserEVENT)
	}
	{
		p.SetState(2843)
		p.Match(TSqlParserNOTIFICATION)
	}
	{
		p.SetState(2844)

		var _x = p.Id()

		localctx.(*Create_event_notificationContext).event_notification_name = _x
	}
	{
		p.SetState(2845)
		p.Match(TSqlParserON)
	}
	p.SetState(2850)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSERVER:
		{
			p.SetState(2846)
			p.Match(TSqlParserSERVER)
		}

	case TSqlParserDATABASE:
		{
			p.SetState(2847)
			p.Match(TSqlParserDATABASE)
		}

	case TSqlParserQUEUE:
		{
			p.SetState(2848)
			p.Match(TSqlParserQUEUE)
		}
		{
			p.SetState(2849)

			var _x = p.Id()

			localctx.(*Create_event_notificationContext).queue_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(2852)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(2853)
			p.Match(TSqlParserFAN_IN)
		}

	}
	{
		p.SetState(2856)
		p.Match(TSqlParserFOR)
	}
	p.SetState(2861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
		p.SetState(2858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(2857)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(2860)

			var _x = p.Id()

			localctx.(*Create_event_notificationContext).event_type_or_group = _x
		}

		p.SetState(2863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2865)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(2866)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(2867)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_event_notificationContext).broker_service = _m
	}
	{
		p.SetState(2868)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(2869)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_event_notificationContext).broker_service_specifier_or_current_database = _m
	}

	return localctx
}

// ICreate_or_alter_event_sessionContext is an interface to support dynamic dispatch.
type ICreate_or_alter_event_sessionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMax_memory returns the max_memory token.
	GetMax_memory() antlr.Token

	// GetMax_dispatch_latency_seconds returns the max_dispatch_latency_seconds token.
	GetMax_dispatch_latency_seconds() antlr.Token

	// GetMax_event_size returns the max_event_size token.
	GetMax_event_size() antlr.Token

	// SetMax_memory sets the max_memory token.
	SetMax_memory(antlr.Token)

	// SetMax_dispatch_latency_seconds sets the max_dispatch_latency_seconds token.
	SetMax_dispatch_latency_seconds(antlr.Token)

	// SetMax_event_size sets the max_event_size token.
	SetMax_event_size(antlr.Token)

	// GetEvent_session_name returns the event_session_name rule contexts.
	GetEvent_session_name() IIdContext

	// GetEvent_module_guid returns the event_module_guid rule contexts.
	GetEvent_module_guid() IIdContext

	// GetEvent_package_name returns the event_package_name rule contexts.
	GetEvent_package_name() IIdContext

	// GetEvent_name returns the event_name rule contexts.
	GetEvent_name() IIdContext

	// GetEvent_customizable_attributue returns the event_customizable_attributue rule contexts.
	GetEvent_customizable_attributue() IIdContext

	// GetAction_name returns the action_name rule contexts.
	GetAction_name() IIdContext

	// GetTarget_name returns the target_name rule contexts.
	GetTarget_name() IIdContext

	// GetTarget_parameter_name returns the target_parameter_name rule contexts.
	GetTarget_parameter_name() IIdContext

	// SetEvent_session_name sets the event_session_name rule contexts.
	SetEvent_session_name(IIdContext)

	// SetEvent_module_guid sets the event_module_guid rule contexts.
	SetEvent_module_guid(IIdContext)

	// SetEvent_package_name sets the event_package_name rule contexts.
	SetEvent_package_name(IIdContext)

	// SetEvent_name sets the event_name rule contexts.
	SetEvent_name(IIdContext)

	// SetEvent_customizable_attributue sets the event_customizable_attributue rule contexts.
	SetEvent_customizable_attributue(IIdContext)

	// SetAction_name sets the action_name rule contexts.
	SetAction_name(IIdContext)

	// SetTarget_name sets the target_name rule contexts.
	SetTarget_name(IIdContext)

	// SetTarget_parameter_name sets the target_parameter_name rule contexts.
	SetTarget_parameter_name(IIdContext)

	// IsCreate_or_alter_event_sessionContext differentiates from other interfaces.
	IsCreate_or_alter_event_sessionContext()
}

type Create_or_alter_event_sessionContext struct {
	*antlr.BaseParserRuleContext
	parser                        antlr.Parser
	event_session_name            IIdContext
	event_module_guid             IIdContext
	event_package_name            IIdContext
	event_name                    IIdContext
	event_customizable_attributue IIdContext
	action_name                   IIdContext
	target_name                   IIdContext
	target_parameter_name         IIdContext
	max_memory                    antlr.Token
	max_dispatch_latency_seconds  antlr.Token
	max_event_size                antlr.Token
}

func NewEmptyCreate_or_alter_event_sessionContext() *Create_or_alter_event_sessionContext {
	var p = new(Create_or_alter_event_sessionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_event_session
	return p
}

func (*Create_or_alter_event_sessionContext) IsCreate_or_alter_event_sessionContext() {}

func NewCreate_or_alter_event_sessionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_event_sessionContext {
	var p = new(Create_or_alter_event_sessionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_event_session

	return p
}

func (s *Create_or_alter_event_sessionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_event_sessionContext) GetMax_memory() antlr.Token { return s.max_memory }

func (s *Create_or_alter_event_sessionContext) GetMax_dispatch_latency_seconds() antlr.Token {
	return s.max_dispatch_latency_seconds
}

func (s *Create_or_alter_event_sessionContext) GetMax_event_size() antlr.Token {
	return s.max_event_size
}

func (s *Create_or_alter_event_sessionContext) SetMax_memory(v antlr.Token) { s.max_memory = v }

func (s *Create_or_alter_event_sessionContext) SetMax_dispatch_latency_seconds(v antlr.Token) {
	s.max_dispatch_latency_seconds = v
}

func (s *Create_or_alter_event_sessionContext) SetMax_event_size(v antlr.Token) { s.max_event_size = v }

func (s *Create_or_alter_event_sessionContext) GetEvent_session_name() IIdContext {
	return s.event_session_name
}

func (s *Create_or_alter_event_sessionContext) GetEvent_module_guid() IIdContext {
	return s.event_module_guid
}

func (s *Create_or_alter_event_sessionContext) GetEvent_package_name() IIdContext {
	return s.event_package_name
}

func (s *Create_or_alter_event_sessionContext) GetEvent_name() IIdContext { return s.event_name }

func (s *Create_or_alter_event_sessionContext) GetEvent_customizable_attributue() IIdContext {
	return s.event_customizable_attributue
}

func (s *Create_or_alter_event_sessionContext) GetAction_name() IIdContext { return s.action_name }

func (s *Create_or_alter_event_sessionContext) GetTarget_name() IIdContext { return s.target_name }

func (s *Create_or_alter_event_sessionContext) GetTarget_parameter_name() IIdContext {
	return s.target_parameter_name
}

func (s *Create_or_alter_event_sessionContext) SetEvent_session_name(v IIdContext) {
	s.event_session_name = v
}

func (s *Create_or_alter_event_sessionContext) SetEvent_module_guid(v IIdContext) {
	s.event_module_guid = v
}

func (s *Create_or_alter_event_sessionContext) SetEvent_package_name(v IIdContext) {
	s.event_package_name = v
}

func (s *Create_or_alter_event_sessionContext) SetEvent_name(v IIdContext) { s.event_name = v }

func (s *Create_or_alter_event_sessionContext) SetEvent_customizable_attributue(v IIdContext) {
	s.event_customizable_attributue = v
}

func (s *Create_or_alter_event_sessionContext) SetAction_name(v IIdContext) { s.action_name = v }

func (s *Create_or_alter_event_sessionContext) SetTarget_name(v IIdContext) { s.target_name = v }

func (s *Create_or_alter_event_sessionContext) SetTarget_parameter_name(v IIdContext) {
	s.target_parameter_name = v
}

func (s *Create_or_alter_event_sessionContext) AllEVENT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEVENT)
}

func (s *Create_or_alter_event_sessionContext) EVENT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENT, i)
}

func (s *Create_or_alter_event_sessionContext) SESSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSESSION, 0)
}

func (s *Create_or_alter_event_sessionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_or_alter_event_sessionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_or_alter_event_sessionContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Create_or_alter_event_sessionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_event_sessionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_event_sessionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_or_alter_event_sessionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_or_alter_event_sessionContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserADD)
}

func (s *Create_or_alter_event_sessionContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, i)
}

func (s *Create_or_alter_event_sessionContext) AllDROP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDROP)
}

func (s *Create_or_alter_event_sessionContext) DROP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, i)
}

func (s *Create_or_alter_event_sessionContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Create_or_alter_event_sessionContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Create_or_alter_event_sessionContext) AllTARGET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTARGET)
}

func (s *Create_or_alter_event_sessionContext) TARGET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTARGET, i)
}

func (s *Create_or_alter_event_sessionContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_or_alter_event_sessionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_or_alter_event_sessionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_or_alter_event_sessionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_or_alter_event_sessionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_or_alter_event_sessionContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Create_or_alter_event_sessionContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_or_alter_event_sessionContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_or_alter_event_sessionContext) START() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTART, 0)
}

func (s *Create_or_alter_event_sessionContext) STOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOP, 0)
}

func (s *Create_or_alter_event_sessionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_or_alter_event_sessionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_or_alter_event_sessionContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSET)
}

func (s *Create_or_alter_event_sessionContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, i)
}

func (s *Create_or_alter_event_sessionContext) MAX_MEMORY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_MEMORY, 0)
}

func (s *Create_or_alter_event_sessionContext) EVENT_RETENTION_MODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENT_RETENTION_MODE, 0)
}

func (s *Create_or_alter_event_sessionContext) MAX_DISPATCH_LATENCY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_DISPATCH_LATENCY, 0)
}

func (s *Create_or_alter_event_sessionContext) MAX_EVENT_SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_EVENT_SIZE, 0)
}

func (s *Create_or_alter_event_sessionContext) MEMORY_PARTITION_MODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMEMORY_PARTITION_MODE, 0)
}

func (s *Create_or_alter_event_sessionContext) TRACK_CAUSALITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRACK_CAUSALITY, 0)
}

func (s *Create_or_alter_event_sessionContext) STARTUP_STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTARTUP_STATE, 0)
}

func (s *Create_or_alter_event_sessionContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_or_alter_event_sessionContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_or_alter_event_sessionContext) AllKB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKB)
}

func (s *Create_or_alter_event_sessionContext) KB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKB, i)
}

func (s *Create_or_alter_event_sessionContext) AllMB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMB)
}

func (s *Create_or_alter_event_sessionContext) MB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMB, i)
}

func (s *Create_or_alter_event_sessionContext) ALLOW_SINGLE_EVENT_LOSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_SINGLE_EVENT_LOSS, 0)
}

func (s *Create_or_alter_event_sessionContext) ALLOW_MULTIPLE_EVENT_LOSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_MULTIPLE_EVENT_LOSS, 0)
}

func (s *Create_or_alter_event_sessionContext) NO_EVENT_LOSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_EVENT_LOSS, 0)
}

func (s *Create_or_alter_event_sessionContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Create_or_alter_event_sessionContext) PER_NODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPER_NODE, 0)
}

func (s *Create_or_alter_event_sessionContext) PER_CPU() antlr.TerminalNode {
	return s.GetToken(TSqlParserPER_CPU, 0)
}

func (s *Create_or_alter_event_sessionContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Create_or_alter_event_sessionContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Create_or_alter_event_sessionContext) SECONDS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECONDS, 0)
}

func (s *Create_or_alter_event_sessionContext) INFINITE() antlr.TerminalNode {
	return s.GetToken(TSqlParserINFINITE, 0)
}

func (s *Create_or_alter_event_sessionContext) AllACTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserACTION)
}

func (s *Create_or_alter_event_sessionContext) ACTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserACTION, i)
}

func (s *Create_or_alter_event_sessionContext) AllWHERE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserWHERE)
}

func (s *Create_or_alter_event_sessionContext) WHERE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, i)
}

func (s *Create_or_alter_event_sessionContext) AllEvent_session_predicate_expression() []IEvent_session_predicate_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_session_predicate_expressionContext)(nil)).Elem())
	var tst = make([]IEvent_session_predicate_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_session_predicate_expressionContext)
		}
	}

	return tst
}

func (s *Create_or_alter_event_sessionContext) Event_session_predicate_expression(i int) IEvent_session_predicate_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_session_predicate_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_session_predicate_expressionContext)
}

func (s *Create_or_alter_event_sessionContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_or_alter_event_sessionContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_or_alter_event_sessionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_event_sessionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_event_sessionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_event_session(s)
	}
}

func (s *Create_or_alter_event_sessionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_event_session(s)
	}
}

func (s *Create_or_alter_event_sessionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_event_session(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_event_session() (localctx ICreate_or_alter_event_sessionContext) {
	localctx = NewCreate_or_alter_event_sessionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, TSqlParserRULE_create_or_alter_event_session)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2871)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserALTER || _la == TSqlParserCREATE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2872)
		p.Match(TSqlParserEVENT)
	}
	{
		p.SetState(2873)
		p.Match(TSqlParserSESSION)
	}
	{
		p.SetState(2874)

		var _x = p.Id()

		localctx.(*Create_or_alter_event_sessionContext).event_session_name = _x
	}
	{
		p.SetState(2875)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(2876)
		p.Match(TSqlParserSERVER)
	}
	p.SetState(2944)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2878)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2877)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2880)
				p.Match(TSqlParserADD)
			}
			{
				p.SetState(2881)
				p.Match(TSqlParserEVENT)
			}

			p.SetState(2885)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2882)

					var _x = p.Id()

					localctx.(*Create_or_alter_event_sessionContext).event_module_guid = _x
				}
				{
					p.SetState(2883)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(2887)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_package_name = _x
			}
			{
				p.SetState(2888)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(2889)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_name = _x
			}

			p.SetState(2939)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(2891)
						p.Match(TSqlParserLR_BRACKET)
					}
					p.SetState(2905)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserSET {
						{
							p.SetState(2892)
							p.Match(TSqlParserSET)
						}
						p.SetState(2902)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						for _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
							p.SetState(2894)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(2893)
									p.Match(TSqlParserCOMMA)
								}

							}
							{
								p.SetState(2896)

								var _x = p.Id()

								localctx.(*Create_or_alter_event_sessionContext).event_customizable_attributue = _x
							}
							{
								p.SetState(2897)
								p.Match(TSqlParserEQUAL)
							}
							p.SetState(2898)
							_la = p.GetTokenStream().LA(1)

							if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
								p.GetErrorHandler().RecoverInline(p)
							} else {
								p.GetErrorHandler().ReportMatch(p)
								p.Consume()
							}

							p.SetState(2904)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)
						}

					}
					p.SetState(2927)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for ok := true; ok; ok = _la == TSqlParserACTION {
						{
							p.SetState(2907)
							p.Match(TSqlParserACTION)
						}
						{
							p.SetState(2908)
							p.Match(TSqlParserLR_BRACKET)
						}
						p.SetState(2921)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
							p.SetState(2910)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(2909)
									p.Match(TSqlParserCOMMA)
								}

							}
							p.SetState(2915)
							p.GetErrorHandler().Sync(p)

							if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext()) == 1 {
								{
									p.SetState(2912)

									var _x = p.Id()

									localctx.(*Create_or_alter_event_sessionContext).event_module_guid = _x
								}
								{
									p.SetState(2913)
									p.Match(TSqlParserDOT)
								}

							}
							{
								p.SetState(2917)

								var _x = p.Id()

								localctx.(*Create_or_alter_event_sessionContext).event_package_name = _x
							}
							{
								p.SetState(2918)
								p.Match(TSqlParserDOT)
							}
							{
								p.SetState(2919)

								var _x = p.Id()

								localctx.(*Create_or_alter_event_sessionContext).action_name = _x
							}

							p.SetState(2923)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)
						}
						{
							p.SetState(2925)
							p.Match(TSqlParserRR_BRACKET)
						}

						p.SetState(2929)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}
					p.SetState(2933)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserWHERE {
						{
							p.SetState(2931)
							p.Match(TSqlParserWHERE)
						}
						{
							p.SetState(2932)
							p.Event_session_predicate_expression()
						}

					}
					{
						p.SetState(2935)
						p.Match(TSqlParserRR_BRACKET)
					}

				}
				p.SetState(2941)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())
			}

		}
		p.SetState(2946)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext())
	}
	p.SetState(2963)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(2948)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(2947)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(2950)
				p.Match(TSqlParserDROP)
			}
			{
				p.SetState(2951)
				p.Match(TSqlParserEVENT)
			}
			p.SetState(2955)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 237, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(2952)

					var _x = p.Id()

					localctx.(*Create_or_alter_event_sessionContext).event_module_guid = _x
				}
				{
					p.SetState(2953)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(2957)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_package_name = _x
			}
			{
				p.SetState(2958)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(2959)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_name = _x
			}

		}
		p.SetState(2965)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext())
	}
	p.SetState(3007)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserADD {
		{
			p.SetState(2966)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(2967)
			p.Match(TSqlParserTARGET)
		}
		p.SetState(2971)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2968)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_module_guid = _x
			}
			{
				p.SetState(2969)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(2973)

			var _x = p.Id()

			localctx.(*Create_or_alter_event_sessionContext).event_package_name = _x
		}
		{
			p.SetState(2974)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(2975)

			var _x = p.Id()

			localctx.(*Create_or_alter_event_sessionContext).target_name = _x
		}

		p.SetState(3002)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2977)
					p.Match(TSqlParserLR_BRACKET)
				}
				{
					p.SetState(2978)
					p.Match(TSqlParserSET)
				}
				p.SetState(2994)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
					p.SetState(2980)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(2979)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(2982)

						var _x = p.Id()

						localctx.(*Create_or_alter_event_sessionContext).target_parameter_name = _x
					}
					{
						p.SetState(2983)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(2992)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL, TSqlParserLR_BRACKET:
						p.SetState(2985)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserLR_BRACKET {
							{
								p.SetState(2984)
								p.Match(TSqlParserLR_BRACKET)
							}

						}
						{
							p.SetState(2987)
							p.Match(TSqlParserDECIMAL)
						}
						p.SetState(2989)
						p.GetErrorHandler().Sync(p)

						if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
							{
								p.SetState(2988)
								p.Match(TSqlParserRR_BRACKET)
							}

						}

					case TSqlParserSTRING:
						{
							p.SetState(2991)
							p.Match(TSqlParserSTRING)
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

					p.SetState(2996)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2998)
					p.Match(TSqlParserRR_BRACKET)
				}

			}
			p.SetState(3004)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext())
		}

		p.SetState(3009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3023)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3010)
				p.Match(TSqlParserDROP)
			}
			{
				p.SetState(3011)
				p.Match(TSqlParserTARGET)
			}
			p.SetState(3015)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 247, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3012)

					var _x = p.Id()

					localctx.(*Create_or_alter_event_sessionContext).event_module_guid = _x
				}
				{
					p.SetState(3013)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(3017)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).event_package_name = _x
			}
			{
				p.SetState(3018)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(3019)

				var _x = p.Id()

				localctx.(*Create_or_alter_event_sessionContext).target_name = _x
			}

		}
		p.SetState(3025)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())
	}
	p.SetState(3091)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3026)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3027)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(3035)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 250, p.GetParserRuleContext()) == 1 {
			p.SetState(3029)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3028)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3031)
				p.Match(TSqlParserMAX_MEMORY)
			}
			{
				p.SetState(3032)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3033)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Create_or_alter_event_sessionContext).max_memory = _m
			}
			p.SetState(3034)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserKB || _la == TSqlParserMB) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3043)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 252, p.GetParserRuleContext()) == 1 {
			p.SetState(3038)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3037)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3040)
				p.Match(TSqlParserEVENT_RETENTION_MODE)
			}
			{
				p.SetState(3041)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3042)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserALLOW_MULTIPLE_EVENT_LOSS || _la == TSqlParserALLOW_SINGLE_EVENT_LOSS || _la == TSqlParserNO_EVENT_LOSS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3055)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext()) == 1 {
			p.SetState(3046)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3045)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3048)
				p.Match(TSqlParserMAX_DISPATCH_LATENCY)
			}
			{
				p.SetState(3049)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3053)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserDECIMAL:
				{
					p.SetState(3050)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_or_alter_event_sessionContext).max_dispatch_latency_seconds = _m
				}
				{
					p.SetState(3051)
					p.Match(TSqlParserSECONDS)
				}

			case TSqlParserINFINITE:
				{
					p.SetState(3052)
					p.Match(TSqlParserINFINITE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(3064)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) == 1 {
			p.SetState(3058)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3057)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3060)
				p.Match(TSqlParserMAX_EVENT_SIZE)
			}
			{
				p.SetState(3061)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3062)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Create_or_alter_event_sessionContext).max_event_size = _m
			}
			p.SetState(3063)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserKB || _la == TSqlParserMB) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3072)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext()) == 1 {
			p.SetState(3067)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3066)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3069)
				p.Match(TSqlParserMEMORY_PARTITION_MODE)
			}
			{
				p.SetState(3070)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3071)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserNONE || _la == TSqlParserPER_CPU || _la == TSqlParserPER_NODE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3080)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext()) == 1 {
			p.SetState(3075)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3074)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3077)
				p.Match(TSqlParserTRACK_CAUSALITY)
			}
			{
				p.SetState(3078)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3079)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserSTARTUP_STATE || _la == TSqlParserCOMMA {
			p.SetState(3083)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3082)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3085)
				p.Match(TSqlParserSTARTUP_STATE)
			}
			{
				p.SetState(3086)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3087)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(3090)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(3096)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3093)
			p.Match(TSqlParserSTATE)
		}
		{
			p.SetState(3094)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3095)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserSTART || _la == TSqlParserSTOP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IEvent_session_predicate_expressionContext is an interface to support dynamic dispatch.
type IEvent_session_predicate_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_session_predicate_expressionContext differentiates from other interfaces.
	IsEvent_session_predicate_expressionContext()
}

type Event_session_predicate_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_session_predicate_expressionContext() *Event_session_predicate_expressionContext {
	var p = new(Event_session_predicate_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_event_session_predicate_expression
	return p
}

func (*Event_session_predicate_expressionContext) IsEvent_session_predicate_expressionContext() {}

func NewEvent_session_predicate_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_session_predicate_expressionContext {
	var p = new(Event_session_predicate_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_event_session_predicate_expression

	return p
}

func (s *Event_session_predicate_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_session_predicate_expressionContext) AllEvent_session_predicate_factor() []IEvent_session_predicate_factorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_session_predicate_factorContext)(nil)).Elem())
	var tst = make([]IEvent_session_predicate_factorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_session_predicate_factorContext)
		}
	}

	return tst
}

func (s *Event_session_predicate_expressionContext) Event_session_predicate_factor(i int) IEvent_session_predicate_factorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_session_predicate_factorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_session_predicate_factorContext)
}

func (s *Event_session_predicate_expressionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Event_session_predicate_expressionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Event_session_predicate_expressionContext) AllEvent_session_predicate_expression() []IEvent_session_predicate_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_session_predicate_expressionContext)(nil)).Elem())
	var tst = make([]IEvent_session_predicate_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_session_predicate_expressionContext)
		}
	}

	return tst
}

func (s *Event_session_predicate_expressionContext) Event_session_predicate_expression(i int) IEvent_session_predicate_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_session_predicate_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_session_predicate_expressionContext)
}

func (s *Event_session_predicate_expressionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Event_session_predicate_expressionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Event_session_predicate_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Event_session_predicate_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Event_session_predicate_expressionContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOT)
}

func (s *Event_session_predicate_expressionContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, i)
}

func (s *Event_session_predicate_expressionContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAND)
}

func (s *Event_session_predicate_expressionContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, i)
}

func (s *Event_session_predicate_expressionContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOR)
}

func (s *Event_session_predicate_expressionContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, i)
}

func (s *Event_session_predicate_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_session_predicate_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_session_predicate_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEvent_session_predicate_expression(s)
	}
}

func (s *Event_session_predicate_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEvent_session_predicate_expression(s)
	}
}

func (s *Event_session_predicate_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEvent_session_predicate_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Event_session_predicate_expression() (localctx IEvent_session_predicate_expressionContext) {
	localctx = NewEvent_session_predicate_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, TSqlParserRULE_event_session_predicate_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3114)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserAND || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || (((_la-217)&-(0x1f+1)) == 0 && ((1<<uint((_la-217)))&((1<<(TSqlParserNOT-217))|(1<<(TSqlParserOFFSETS-217))|(1<<(TSqlParserOR-217))|(1<<(TSqlParserPAGE-217)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserLR_BRACKET || _la == TSqlParserCOMMA {
		p.SetState(3099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3098)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(3102)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAND || _la == TSqlParserOR {
			p.SetState(3101)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserAND || _la == TSqlParserOR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(3104)
				p.Match(TSqlParserNOT)
			}

		}
		p.SetState(3112)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3107)
				p.Event_session_predicate_factor()
			}

		case 2:
			{
				p.SetState(3108)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(3109)
				p.Event_session_predicate_expression()
			}
			{
				p.SetState(3110)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

		p.SetState(3116)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEvent_session_predicate_factorContext is an interface to support dynamic dispatch.
type IEvent_session_predicate_factorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_session_predicate_factorContext differentiates from other interfaces.
	IsEvent_session_predicate_factorContext()
}

type Event_session_predicate_factorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_session_predicate_factorContext() *Event_session_predicate_factorContext {
	var p = new(Event_session_predicate_factorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_event_session_predicate_factor
	return p
}

func (*Event_session_predicate_factorContext) IsEvent_session_predicate_factorContext() {}

func NewEvent_session_predicate_factorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_session_predicate_factorContext {
	var p = new(Event_session_predicate_factorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_event_session_predicate_factor

	return p
}

func (s *Event_session_predicate_factorContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_session_predicate_factorContext) Event_session_predicate_leaf() IEvent_session_predicate_leafContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_session_predicate_leafContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_session_predicate_leafContext)
}

func (s *Event_session_predicate_factorContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Event_session_predicate_factorContext) Event_session_predicate_expression() IEvent_session_predicate_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_session_predicate_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_session_predicate_expressionContext)
}

func (s *Event_session_predicate_factorContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Event_session_predicate_factorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_session_predicate_factorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_session_predicate_factorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEvent_session_predicate_factor(s)
	}
}

func (s *Event_session_predicate_factorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEvent_session_predicate_factor(s)
	}
}

func (s *Event_session_predicate_factorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEvent_session_predicate_factor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Event_session_predicate_factor() (localctx IEvent_session_predicate_factorContext) {
	localctx = NewEvent_session_predicate_factorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, TSqlParserRULE_event_session_predicate_factor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3123)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3118)
			p.Event_session_predicate_leaf()
		}

	case TSqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3119)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(3120)
			p.Event_session_predicate_expression()
		}
		{
			p.SetState(3121)
			p.Match(TSqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEvent_session_predicate_leafContext is an interface to support dynamic dispatch.
type IEvent_session_predicate_leafContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEvent_field_name returns the event_field_name rule contexts.
	GetEvent_field_name() IIdContext

	// GetEvent_module_guid returns the event_module_guid rule contexts.
	GetEvent_module_guid() IIdContext

	// GetEvent_package_name returns the event_package_name rule contexts.
	GetEvent_package_name() IIdContext

	// GetPredicate_source_name returns the predicate_source_name rule contexts.
	GetPredicate_source_name() IIdContext

	// GetPredicate_compare_name returns the predicate_compare_name rule contexts.
	GetPredicate_compare_name() IIdContext

	// SetEvent_field_name sets the event_field_name rule contexts.
	SetEvent_field_name(IIdContext)

	// SetEvent_module_guid sets the event_module_guid rule contexts.
	SetEvent_module_guid(IIdContext)

	// SetEvent_package_name sets the event_package_name rule contexts.
	SetEvent_package_name(IIdContext)

	// SetPredicate_source_name sets the predicate_source_name rule contexts.
	SetPredicate_source_name(IIdContext)

	// SetPredicate_compare_name sets the predicate_compare_name rule contexts.
	SetPredicate_compare_name(IIdContext)

	// IsEvent_session_predicate_leafContext differentiates from other interfaces.
	IsEvent_session_predicate_leafContext()
}

type Event_session_predicate_leafContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	event_field_name       IIdContext
	event_module_guid      IIdContext
	event_package_name     IIdContext
	predicate_source_name  IIdContext
	predicate_compare_name IIdContext
}

func NewEmptyEvent_session_predicate_leafContext() *Event_session_predicate_leafContext {
	var p = new(Event_session_predicate_leafContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_event_session_predicate_leaf
	return p
}

func (*Event_session_predicate_leafContext) IsEvent_session_predicate_leafContext() {}

func NewEvent_session_predicate_leafContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_session_predicate_leafContext {
	var p = new(Event_session_predicate_leafContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_event_session_predicate_leaf

	return p
}

func (s *Event_session_predicate_leafContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_session_predicate_leafContext) GetEvent_field_name() IIdContext {
	return s.event_field_name
}

func (s *Event_session_predicate_leafContext) GetEvent_module_guid() IIdContext {
	return s.event_module_guid
}

func (s *Event_session_predicate_leafContext) GetEvent_package_name() IIdContext {
	return s.event_package_name
}

func (s *Event_session_predicate_leafContext) GetPredicate_source_name() IIdContext {
	return s.predicate_source_name
}

func (s *Event_session_predicate_leafContext) GetPredicate_compare_name() IIdContext {
	return s.predicate_compare_name
}

func (s *Event_session_predicate_leafContext) SetEvent_field_name(v IIdContext) {
	s.event_field_name = v
}

func (s *Event_session_predicate_leafContext) SetEvent_module_guid(v IIdContext) {
	s.event_module_guid = v
}

func (s *Event_session_predicate_leafContext) SetEvent_package_name(v IIdContext) {
	s.event_package_name = v
}

func (s *Event_session_predicate_leafContext) SetPredicate_source_name(v IIdContext) {
	s.predicate_source_name = v
}

func (s *Event_session_predicate_leafContext) SetPredicate_compare_name(v IIdContext) {
	s.predicate_compare_name = v
}

func (s *Event_session_predicate_leafContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Event_session_predicate_leafContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Event_session_predicate_leafContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Event_session_predicate_leafContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Event_session_predicate_leafContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Event_session_predicate_leafContext) GREATER() antlr.TerminalNode {
	return s.GetToken(TSqlParserGREATER, 0)
}

func (s *Event_session_predicate_leafContext) LESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserLESS, 0)
}

func (s *Event_session_predicate_leafContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Event_session_predicate_leafContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Event_session_predicate_leafContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXCLAMATION, 0)
}

func (s *Event_session_predicate_leafContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Event_session_predicate_leafContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Event_session_predicate_leafContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Event_session_predicate_leafContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_session_predicate_leafContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_session_predicate_leafContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEvent_session_predicate_leaf(s)
	}
}

func (s *Event_session_predicate_leafContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEvent_session_predicate_leaf(s)
	}
}

func (s *Event_session_predicate_leafContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEvent_session_predicate_leaf(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Event_session_predicate_leaf() (localctx IEvent_session_predicate_leafContext) {
	localctx = NewEvent_session_predicate_leafContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, TSqlParserRULE_event_session_predicate_leaf)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3181)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3153)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3125)

				var _x = p.Id()

				localctx.(*Event_session_predicate_leafContext).event_field_name = _x
			}

		case 2:
			p.SetState(3136)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3126)

					var _x = p.Id()

					localctx.(*Event_session_predicate_leafContext).event_field_name = _x
				}

			case 2:
				p.SetState(3130)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(3127)

						var _x = p.Id()

						localctx.(*Event_session_predicate_leafContext).event_module_guid = _x
					}
					{
						p.SetState(3128)
						p.Match(TSqlParserDOT)
					}

				}
				{
					p.SetState(3132)

					var _x = p.Id()

					localctx.(*Event_session_predicate_leafContext).event_package_name = _x
				}
				{
					p.SetState(3133)
					p.Match(TSqlParserDOT)
				}
				{
					p.SetState(3134)

					var _x = p.Id()

					localctx.(*Event_session_predicate_leafContext).predicate_source_name = _x
				}

			}
			p.SetState(3149)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 274, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(3138)
					p.Match(TSqlParserEQUAL)
				}

			case 2:
				{
					p.SetState(3139)
					p.Match(TSqlParserLESS)
				}
				{
					p.SetState(3140)
					p.Match(TSqlParserGREATER)
				}

			case 3:
				{
					p.SetState(3141)
					p.Match(TSqlParserEXCLAMATION)
				}
				{
					p.SetState(3142)
					p.Match(TSqlParserEQUAL)
				}

			case 4:
				{
					p.SetState(3143)
					p.Match(TSqlParserGREATER)
				}

			case 5:
				{
					p.SetState(3144)
					p.Match(TSqlParserGREATER)
				}
				{
					p.SetState(3145)
					p.Match(TSqlParserEQUAL)
				}

			case 6:
				{
					p.SetState(3146)
					p.Match(TSqlParserLESS)
				}

			case 7:
				{
					p.SetState(3147)
					p.Match(TSqlParserLESS)
				}
				{
					p.SetState(3148)
					p.Match(TSqlParserEQUAL)
				}

			}
			p.SetState(3151)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3158)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3155)

				var _x = p.Id()

				localctx.(*Event_session_predicate_leafContext).event_module_guid = _x
			}
			{
				p.SetState(3156)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(3160)

			var _x = p.Id()

			localctx.(*Event_session_predicate_leafContext).event_package_name = _x
		}
		{
			p.SetState(3161)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(3162)

			var _x = p.Id()

			localctx.(*Event_session_predicate_leafContext).predicate_compare_name = _x
		}
		{
			p.SetState(3163)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(3177)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3164)

				var _x = p.Id()

				localctx.(*Event_session_predicate_leafContext).event_field_name = _x
			}

		case 2:
			p.SetState(3168)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 277, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3165)

					var _x = p.Id()

					localctx.(*Event_session_predicate_leafContext).event_module_guid = _x
				}
				{
					p.SetState(3166)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(3170)

				var _x = p.Id()

				localctx.(*Event_session_predicate_leafContext).event_package_name = _x
			}
			{
				p.SetState(3171)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(3172)

				var _x = p.Id()

				localctx.(*Event_session_predicate_leafContext).predicate_source_name = _x
			}

			{
				p.SetState(3174)
				p.Match(TSqlParserCOMMA)
			}
			p.SetState(3175)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(3179)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_external_data_sourceContext is an interface to support dynamic dispatch.
type IAlter_external_data_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLocation returns the location token.
	GetLocation() antlr.Token

	// GetResource_manager_location returns the resource_manager_location token.
	GetResource_manager_location() antlr.Token

	// SetLocation sets the location token.
	SetLocation(antlr.Token)

	// SetResource_manager_location sets the resource_manager_location token.
	SetResource_manager_location(antlr.Token)

	// GetData_source_name returns the data_source_name rule contexts.
	GetData_source_name() IIdContext

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// SetData_source_name sets the data_source_name rule contexts.
	SetData_source_name(IIdContext)

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// IsAlter_external_data_sourceContext differentiates from other interfaces.
	IsAlter_external_data_sourceContext()
}

type Alter_external_data_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	data_source_name          IIdContext
	location                  antlr.Token
	resource_manager_location antlr.Token
	credential_name           IIdContext
}

func NewEmptyAlter_external_data_sourceContext() *Alter_external_data_sourceContext {
	var p = new(Alter_external_data_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_external_data_source
	return p
}

func (*Alter_external_data_sourceContext) IsAlter_external_data_sourceContext() {}

func NewAlter_external_data_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_external_data_sourceContext {
	var p = new(Alter_external_data_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_external_data_source

	return p
}

func (s *Alter_external_data_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_external_data_sourceContext) GetLocation() antlr.Token { return s.location }

func (s *Alter_external_data_sourceContext) GetResource_manager_location() antlr.Token {
	return s.resource_manager_location
}

func (s *Alter_external_data_sourceContext) SetLocation(v antlr.Token) { s.location = v }

func (s *Alter_external_data_sourceContext) SetResource_manager_location(v antlr.Token) {
	s.resource_manager_location = v
}

func (s *Alter_external_data_sourceContext) GetData_source_name() IIdContext {
	return s.data_source_name
}

func (s *Alter_external_data_sourceContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Alter_external_data_sourceContext) SetData_source_name(v IIdContext) { s.data_source_name = v }

func (s *Alter_external_data_sourceContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Alter_external_data_sourceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_external_data_sourceContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Alter_external_data_sourceContext) DATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA, 0)
}

func (s *Alter_external_data_sourceContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSOURCE, 0)
}

func (s *Alter_external_data_sourceContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Alter_external_data_sourceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_external_data_sourceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_external_data_sourceContext) AllLOCATION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCATION)
}

func (s *Alter_external_data_sourceContext) LOCATION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCATION, i)
}

func (s *Alter_external_data_sourceContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_external_data_sourceContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_external_data_sourceContext) AllRESOURCE_MANAGER_LOCATION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRESOURCE_MANAGER_LOCATION)
}

func (s *Alter_external_data_sourceContext) RESOURCE_MANAGER_LOCATION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE_MANAGER_LOCATION, i)
}

func (s *Alter_external_data_sourceContext) AllCREDENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCREDENTIAL)
}

func (s *Alter_external_data_sourceContext) CREDENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, i)
}

func (s *Alter_external_data_sourceContext) AllQUOTED_URL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserQUOTED_URL)
}

func (s *Alter_external_data_sourceContext) QUOTED_URL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_URL, i)
}

func (s *Alter_external_data_sourceContext) AllQUOTED_HOST_AND_PORT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserQUOTED_HOST_AND_PORT)
}

func (s *Alter_external_data_sourceContext) QUOTED_HOST_AND_PORT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_HOST_AND_PORT, i)
}

func (s *Alter_external_data_sourceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_external_data_sourceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_external_data_sourceContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_external_data_sourceContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_external_data_sourceContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Alter_external_data_sourceContext) BLOB_STORAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOB_STORAGE, 0)
}

func (s *Alter_external_data_sourceContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_external_data_sourceContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_external_data_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_external_data_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_external_data_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_external_data_source(s)
	}
}

func (s *Alter_external_data_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_external_data_source(s)
	}
}

func (s *Alter_external_data_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_external_data_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_external_data_source() (localctx IAlter_external_data_sourceContext) {
	localctx = NewAlter_external_data_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, TSqlParserRULE_alter_external_data_source)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3230)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3183)
			p.Match(TSqlParserALTER)
		}
		{
			p.SetState(3184)
			p.Match(TSqlParserEXTERNAL)
		}
		{
			p.SetState(3185)
			p.Match(TSqlParserDATA)
		}
		{
			p.SetState(3186)
			p.Match(TSqlParserSOURCE)
		}
		{
			p.SetState(3187)

			var _x = p.Id()

			localctx.(*Alter_external_data_sourceContext).data_source_name = _x
		}
		{
			p.SetState(3188)
			p.Match(TSqlParserSET)
		}
		p.SetState(3204)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(3204)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserLOCATION:
					{
						p.SetState(3189)
						p.Match(TSqlParserLOCATION)
					}
					{
						p.SetState(3190)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(3191)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Alter_external_data_sourceContext).location = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserQUOTED_URL || _la == TSqlParserQUOTED_HOST_AND_PORT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Alter_external_data_sourceContext).location = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					p.SetState(3193)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3192)
							p.Match(TSqlParserCOMMA)
						}

					}

				case TSqlParserRESOURCE_MANAGER_LOCATION:
					{
						p.SetState(3195)
						p.Match(TSqlParserRESOURCE_MANAGER_LOCATION)
					}
					{
						p.SetState(3196)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(3197)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*Alter_external_data_sourceContext).resource_manager_location = _lt

					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserQUOTED_URL || _la == TSqlParserQUOTED_HOST_AND_PORT) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*Alter_external_data_sourceContext).resource_manager_location = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					p.SetState(3199)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3198)
							p.Match(TSqlParserCOMMA)
						}

					}

				case TSqlParserCREDENTIAL:
					{
						p.SetState(3201)
						p.Match(TSqlParserCREDENTIAL)
					}
					{
						p.SetState(3202)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(3203)

						var _x = p.Id()

						localctx.(*Alter_external_data_sourceContext).credential_name = _x
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3206)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3208)
			p.Match(TSqlParserALTER)
		}
		{
			p.SetState(3209)
			p.Match(TSqlParserEXTERNAL)
		}
		{
			p.SetState(3210)
			p.Match(TSqlParserDATA)
		}
		{
			p.SetState(3211)
			p.Match(TSqlParserSOURCE)
		}
		{
			p.SetState(3212)

			var _x = p.Id()

			localctx.(*Alter_external_data_sourceContext).data_source_name = _x
		}
		{
			p.SetState(3213)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3214)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(3215)
			p.Match(TSqlParserTYPE)
		}
		{
			p.SetState(3216)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3217)
			p.Match(TSqlParserBLOB_STORAGE)
		}
		{
			p.SetState(3218)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(3219)
			p.Match(TSqlParserLOCATION)
		}
		{
			p.SetState(3220)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3221)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_external_data_sourceContext).location = _m
		}
		p.SetState(3226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3222)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(3223)
				p.Match(TSqlParserCREDENTIAL)
			}
			{
				p.SetState(3224)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3225)

				var _x = p.Id()

				localctx.(*Alter_external_data_sourceContext).credential_name = _x
			}

		}
		{
			p.SetState(3228)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_external_libraryContext is an interface to support dynamic dispatch.
type IAlter_external_libraryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClient_library returns the client_library token.
	GetClient_library() antlr.Token

	// SetClient_library sets the client_library token.
	SetClient_library(antlr.Token)

	// GetLibrary_name returns the library_name rule contexts.
	GetLibrary_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetExternal_data_source_name returns the external_data_source_name rule contexts.
	GetExternal_data_source_name() IIdContext

	// SetLibrary_name sets the library_name rule contexts.
	SetLibrary_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetExternal_data_source_name sets the external_data_source_name rule contexts.
	SetExternal_data_source_name(IIdContext)

	// IsAlter_external_libraryContext differentiates from other interfaces.
	IsAlter_external_libraryContext()
}

type Alter_external_libraryContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	library_name              IIdContext
	owner_name                IIdContext
	client_library            antlr.Token
	external_data_source_name IIdContext
}

func NewEmptyAlter_external_libraryContext() *Alter_external_libraryContext {
	var p = new(Alter_external_libraryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_external_library
	return p
}

func (*Alter_external_libraryContext) IsAlter_external_libraryContext() {}

func NewAlter_external_libraryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_external_libraryContext {
	var p = new(Alter_external_libraryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_external_library

	return p
}

func (s *Alter_external_libraryContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_external_libraryContext) GetClient_library() antlr.Token { return s.client_library }

func (s *Alter_external_libraryContext) SetClient_library(v antlr.Token) { s.client_library = v }

func (s *Alter_external_libraryContext) GetLibrary_name() IIdContext { return s.library_name }

func (s *Alter_external_libraryContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Alter_external_libraryContext) GetExternal_data_source_name() IIdContext {
	return s.external_data_source_name
}

func (s *Alter_external_libraryContext) SetLibrary_name(v IIdContext) { s.library_name = v }

func (s *Alter_external_libraryContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Alter_external_libraryContext) SetExternal_data_source_name(v IIdContext) {
	s.external_data_source_name = v
}

func (s *Alter_external_libraryContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_external_libraryContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Alter_external_libraryContext) LIBRARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIBRARY, 0)
}

func (s *Alter_external_libraryContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_external_libraryContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_external_libraryContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Alter_external_libraryContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_external_libraryContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_external_libraryContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTENT, 0)
}

func (s *Alter_external_libraryContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_external_libraryContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_external_libraryContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_external_libraryContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_external_libraryContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_external_libraryContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Alter_external_libraryContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Alter_external_libraryContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Alter_external_libraryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_external_libraryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_external_libraryContext) PLATFORM() antlr.TerminalNode {
	return s.GetToken(TSqlParserPLATFORM, 0)
}

func (s *Alter_external_libraryContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_external_libraryContext) AllLANGUAGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLANGUAGE)
}

func (s *Alter_external_libraryContext) LANGUAGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLANGUAGE, i)
}

func (s *Alter_external_libraryContext) AllDATA_SOURCE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDATA_SOURCE)
}

func (s *Alter_external_libraryContext) DATA_SOURCE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA_SOURCE, i)
}

func (s *Alter_external_libraryContext) AllR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserR)
}

func (s *Alter_external_libraryContext) R(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserR, i)
}

func (s *Alter_external_libraryContext) AllPYTHON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPYTHON)
}

func (s *Alter_external_libraryContext) PYTHON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPYTHON, i)
}

func (s *Alter_external_libraryContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWINDOWS, 0)
}

func (s *Alter_external_libraryContext) LINUX() antlr.TerminalNode {
	return s.GetToken(TSqlParserLINUX, 0)
}

func (s *Alter_external_libraryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_external_libraryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_external_libraryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_external_library(s)
	}
}

func (s *Alter_external_libraryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_external_library(s)
	}
}

func (s *Alter_external_libraryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_external_library(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_external_library() (localctx IAlter_external_libraryContext) {
	localctx = NewAlter_external_libraryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, TSqlParserRULE_alter_external_library)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3232)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3233)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(3234)
		p.Match(TSqlParserLIBRARY)
	}
	{
		p.SetState(3235)

		var _x = p.Id()

		localctx.(*Alter_external_libraryContext).library_name = _x
	}
	p.SetState(3238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(3236)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(3237)

			var _x = p.Id()

			localctx.(*Alter_external_libraryContext).owner_name = _x
		}

	}
	p.SetState(3240)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserADD || _la == TSqlParserSET) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	{
		p.SetState(3241)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(3242)
		p.Match(TSqlParserCONTENT)
	}
	{
		p.SetState(3243)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(3247)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSTRING:
		{
			p.SetState(3244)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_external_libraryContext).client_library = _m
		}

	case TSqlParserBINARY:
		{
			p.SetState(3245)
			p.Match(TSqlParserBINARY)
		}

	case TSqlParserNONE:
		{
			p.SetState(3246)
			p.Match(TSqlParserNONE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	{
		p.SetState(3249)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(3250)
		p.Match(TSqlParserPLATFORM)
	}
	{
		p.SetState(3251)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(3253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLINUX || _la == TSqlParserWINDOWS {
		p.SetState(3252)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserLINUX || _la == TSqlParserWINDOWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(3255)
		p.Match(TSqlParserRR_BRACKET)
	}

	{
		p.SetState(3257)
		p.Match(TSqlParserWITH)
	}
	p.SetState(3267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserDATA_SOURCE || _la == TSqlParserLANGUAGE || _la == TSqlParserCOMMA {
		p.SetState(3267)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserLANGUAGE, TSqlParserCOMMA:
			p.SetState(3259)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3258)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3261)
				p.Match(TSqlParserLANGUAGE)
			}
			{
				p.SetState(3262)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3263)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserPYTHON || _la == TSqlParserR) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserDATA_SOURCE:
			{
				p.SetState(3264)
				p.Match(TSqlParserDATA_SOURCE)
			}
			{
				p.SetState(3265)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3266)

				var _x = p.Id()

				localctx.(*Alter_external_libraryContext).external_data_source_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(3269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3271)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ICreate_external_libraryContext is an interface to support dynamic dispatch.
type ICreate_external_libraryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClient_library returns the client_library token.
	GetClient_library() antlr.Token

	// SetClient_library sets the client_library token.
	SetClient_library(antlr.Token)

	// GetLibrary_name returns the library_name rule contexts.
	GetLibrary_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetExternal_data_source_name returns the external_data_source_name rule contexts.
	GetExternal_data_source_name() IIdContext

	// SetLibrary_name sets the library_name rule contexts.
	SetLibrary_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetExternal_data_source_name sets the external_data_source_name rule contexts.
	SetExternal_data_source_name(IIdContext)

	// IsCreate_external_libraryContext differentiates from other interfaces.
	IsCreate_external_libraryContext()
}

type Create_external_libraryContext struct {
	*antlr.BaseParserRuleContext
	parser                    antlr.Parser
	library_name              IIdContext
	owner_name                IIdContext
	client_library            antlr.Token
	external_data_source_name IIdContext
}

func NewEmptyCreate_external_libraryContext() *Create_external_libraryContext {
	var p = new(Create_external_libraryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_external_library
	return p
}

func (*Create_external_libraryContext) IsCreate_external_libraryContext() {}

func NewCreate_external_libraryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_libraryContext {
	var p = new(Create_external_libraryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_external_library

	return p
}

func (s *Create_external_libraryContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_libraryContext) GetClient_library() antlr.Token { return s.client_library }

func (s *Create_external_libraryContext) SetClient_library(v antlr.Token) { s.client_library = v }

func (s *Create_external_libraryContext) GetLibrary_name() IIdContext { return s.library_name }

func (s *Create_external_libraryContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_external_libraryContext) GetExternal_data_source_name() IIdContext {
	return s.external_data_source_name
}

func (s *Create_external_libraryContext) SetLibrary_name(v IIdContext) { s.library_name = v }

func (s *Create_external_libraryContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_external_libraryContext) SetExternal_data_source_name(v IIdContext) {
	s.external_data_source_name = v
}

func (s *Create_external_libraryContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_external_libraryContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Create_external_libraryContext) LIBRARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIBRARY, 0)
}

func (s *Create_external_libraryContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_external_libraryContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_external_libraryContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_external_libraryContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_external_libraryContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_external_libraryContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_external_libraryContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_external_libraryContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Create_external_libraryContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Create_external_libraryContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_external_libraryContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_external_libraryContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_external_libraryContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTENT, 0)
}

func (s *Create_external_libraryContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_external_libraryContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_external_libraryContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_external_libraryContext) PLATFORM() antlr.TerminalNode {
	return s.GetToken(TSqlParserPLATFORM, 0)
}

func (s *Create_external_libraryContext) AllLANGUAGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLANGUAGE)
}

func (s *Create_external_libraryContext) LANGUAGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLANGUAGE, i)
}

func (s *Create_external_libraryContext) AllDATA_SOURCE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDATA_SOURCE)
}

func (s *Create_external_libraryContext) DATA_SOURCE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA_SOURCE, i)
}

func (s *Create_external_libraryContext) AllR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserR)
}

func (s *Create_external_libraryContext) R(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserR, i)
}

func (s *Create_external_libraryContext) AllPYTHON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPYTHON)
}

func (s *Create_external_libraryContext) PYTHON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPYTHON, i)
}

func (s *Create_external_libraryContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWINDOWS, 0)
}

func (s *Create_external_libraryContext) LINUX() antlr.TerminalNode {
	return s.GetToken(TSqlParserLINUX, 0)
}

func (s *Create_external_libraryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_libraryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_external_libraryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_external_library(s)
	}
}

func (s *Create_external_libraryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_external_library(s)
	}
}

func (s *Create_external_libraryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_external_library(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_external_library() (localctx ICreate_external_libraryContext) {
	localctx = NewCreate_external_libraryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, TSqlParserRULE_create_external_library)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3273)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3274)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(3275)
		p.Match(TSqlParserLIBRARY)
	}
	{
		p.SetState(3276)

		var _x = p.Id()

		localctx.(*Create_external_libraryContext).library_name = _x
	}
	p.SetState(3279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(3277)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(3278)

			var _x = p.Id()

			localctx.(*Create_external_libraryContext).owner_name = _x
		}

	}
	{
		p.SetState(3281)
		p.Match(TSqlParserFROM)
	}

	p.SetState(3283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(3282)
			p.Match(TSqlParserCOMMA)
		}

	}
	p.SetState(3286)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLR_BRACKET {
		{
			p.SetState(3285)
			p.Match(TSqlParserLR_BRACKET)
		}

	}
	p.SetState(3290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONTENT {
		{
			p.SetState(3288)
			p.Match(TSqlParserCONTENT)
		}
		{
			p.SetState(3289)
			p.Match(TSqlParserEQUAL)
		}

	}
	p.SetState(3295)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSTRING:
		{
			p.SetState(3292)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_external_libraryContext).client_library = _m
		}

	case TSqlParserBINARY:
		{
			p.SetState(3293)
			p.Match(TSqlParserBINARY)
		}

	case TSqlParserNONE:
		{
			p.SetState(3294)
			p.Match(TSqlParserNONE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3304)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(3297)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(3298)
			p.Match(TSqlParserPLATFORM)
		}
		{
			p.SetState(3299)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLINUX || _la == TSqlParserWINDOWS {
			p.SetState(3300)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserLINUX || _la == TSqlParserWINDOWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(3303)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	p.SetState(3321)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3306)
			p.Match(TSqlParserWITH)
		}
		p.SetState(3316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserDATA_SOURCE || _la == TSqlParserLANGUAGE || _la == TSqlParserCOMMA {
			p.SetState(3316)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserLANGUAGE, TSqlParserCOMMA:
				p.SetState(3308)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(3307)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(3310)
					p.Match(TSqlParserLANGUAGE)
				}
				{
					p.SetState(3311)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(3312)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserPYTHON || _la == TSqlParserR) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case TSqlParserDATA_SOURCE:
				{
					p.SetState(3313)
					p.Match(TSqlParserDATA_SOURCE)
				}
				{
					p.SetState(3314)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(3315)

					var _x = p.Id()

					localctx.(*Create_external_libraryContext).external_data_source_name = _x
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3318)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3320)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_external_resource_poolContext is an interface to support dynamic dispatch.
type IAlter_external_resource_poolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMax_cpu_percent returns the max_cpu_percent token.
	GetMax_cpu_percent() antlr.Token

	// GetMax_memory_percent returns the max_memory_percent token.
	GetMax_memory_percent() antlr.Token

	// GetMax_processes returns the max_processes token.
	GetMax_processes() antlr.Token

	// SetMax_cpu_percent sets the max_cpu_percent token.
	SetMax_cpu_percent(antlr.Token)

	// SetMax_memory_percent sets the max_memory_percent token.
	SetMax_memory_percent(antlr.Token)

	// SetMax_processes sets the max_processes token.
	SetMax_processes(antlr.Token)

	// GetPool_name returns the pool_name rule contexts.
	GetPool_name() IIdContext

	// SetPool_name sets the pool_name rule contexts.
	SetPool_name(IIdContext)

	// IsAlter_external_resource_poolContext differentiates from other interfaces.
	IsAlter_external_resource_poolContext()
}

type Alter_external_resource_poolContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	pool_name          IIdContext
	max_cpu_percent    antlr.Token
	max_memory_percent antlr.Token
	max_processes      antlr.Token
}

func NewEmptyAlter_external_resource_poolContext() *Alter_external_resource_poolContext {
	var p = new(Alter_external_resource_poolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_external_resource_pool
	return p
}

func (*Alter_external_resource_poolContext) IsAlter_external_resource_poolContext() {}

func NewAlter_external_resource_poolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_external_resource_poolContext {
	var p = new(Alter_external_resource_poolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_external_resource_pool

	return p
}

func (s *Alter_external_resource_poolContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_external_resource_poolContext) GetMax_cpu_percent() antlr.Token {
	return s.max_cpu_percent
}

func (s *Alter_external_resource_poolContext) GetMax_memory_percent() antlr.Token {
	return s.max_memory_percent
}

func (s *Alter_external_resource_poolContext) GetMax_processes() antlr.Token { return s.max_processes }

func (s *Alter_external_resource_poolContext) SetMax_cpu_percent(v antlr.Token) { s.max_cpu_percent = v }

func (s *Alter_external_resource_poolContext) SetMax_memory_percent(v antlr.Token) {
	s.max_memory_percent = v
}

func (s *Alter_external_resource_poolContext) SetMax_processes(v antlr.Token) { s.max_processes = v }

func (s *Alter_external_resource_poolContext) GetPool_name() IIdContext { return s.pool_name }

func (s *Alter_external_resource_poolContext) SetPool_name(v IIdContext) { s.pool_name = v }

func (s *Alter_external_resource_poolContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_external_resource_poolContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Alter_external_resource_poolContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Alter_external_resource_poolContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Alter_external_resource_poolContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_external_resource_poolContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_external_resource_poolContext) MAX_CPU_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_CPU_PERCENT, 0)
}

func (s *Alter_external_resource_poolContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_external_resource_poolContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_external_resource_poolContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_external_resource_poolContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_external_resource_poolContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_external_resource_poolContext) DEFAULT_DOUBLE_QUOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_DOUBLE_QUOTE, 0)
}

func (s *Alter_external_resource_poolContext) AFFINITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFFINITY, 0)
}

func (s *Alter_external_resource_poolContext) CPU() antlr.TerminalNode {
	return s.GetToken(TSqlParserCPU, 0)
}

func (s *Alter_external_resource_poolContext) NUMANODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMANODE, 0)
}

func (s *Alter_external_resource_poolContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_external_resource_poolContext) MAX_MEMORY_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_MEMORY_PERCENT, 0)
}

func (s *Alter_external_resource_poolContext) MAX_PROCESSES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_PROCESSES, 0)
}

func (s *Alter_external_resource_poolContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Alter_external_resource_poolContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_external_resource_poolContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_external_resource_poolContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Alter_external_resource_poolContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Alter_external_resource_poolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_external_resource_poolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_external_resource_poolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_external_resource_pool(s)
	}
}

func (s *Alter_external_resource_poolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_external_resource_pool(s)
	}
}

func (s *Alter_external_resource_poolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_external_resource_pool(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_external_resource_pool() (localctx IAlter_external_resource_poolContext) {
	localctx = NewAlter_external_resource_poolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, TSqlParserRULE_alter_external_resource_pool)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3323)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3324)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(3325)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(3326)
		p.Match(TSqlParserPOOL)
	}
	p.SetState(3329)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(3327)

			var _x = p.Id()

			localctx.(*Alter_external_resource_poolContext).pool_name = _x
		}

	case TSqlParserDEFAULT_DOUBLE_QUOTE:
		{
			p.SetState(3328)
			p.Match(TSqlParserDEFAULT_DOUBLE_QUOTE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(3331)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(3332)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(3333)
		p.Match(TSqlParserMAX_CPU_PERCENT)
	}
	{
		p.SetState(3334)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(3335)

		var _m = p.Match(TSqlParserDECIMAL)

		localctx.(*Alter_external_resource_poolContext).max_cpu_percent = _m
	}
	p.SetState(3373)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserAFFINITY, TSqlParserCOMMA:
		p.SetState(3337)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3336)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3339)
			p.Match(TSqlParserAFFINITY)
		}
		{
			p.SetState(3340)
			p.Match(TSqlParserCPU)
		}
		{
			p.SetState(3341)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3355)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserAUTO:
			{
				p.SetState(3342)
				p.Match(TSqlParserAUTO)
			}

		case TSqlParserDECIMAL, TSqlParserCOMMA:
			p.SetState(3351)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					p.SetState(3351)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext()) {
					case 1:
						p.SetState(3344)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(3343)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(3346)
							p.Match(TSqlParserDECIMAL)
						}
						{
							p.SetState(3347)
							p.Match(TSqlParserTO)
						}
						{
							p.SetState(3348)
							p.Match(TSqlParserDECIMAL)
						}

					case 2:
						{
							p.SetState(3349)
							p.Match(TSqlParserCOMMA)
						}
						{
							p.SetState(3350)
							p.Match(TSqlParserDECIMAL)
						}

					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(3353)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 307, p.GetParserRuleContext())
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserNUMANODE:
		{
			p.SetState(3357)
			p.Match(TSqlParserNUMANODE)
		}
		{
			p.SetState(3358)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3369)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(3369)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext()) {
				case 1:
					p.SetState(3360)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3359)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(3362)
						p.Match(TSqlParserDECIMAL)
					}
					{
						p.SetState(3363)
						p.Match(TSqlParserTO)
					}
					{
						p.SetState(3364)
						p.Match(TSqlParserDECIMAL)
					}

				case 2:
					p.SetState(3366)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3365)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(3368)
						p.Match(TSqlParserDECIMAL)
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3371)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 312, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3381)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 315, p.GetParserRuleContext()) == 1 {
		p.SetState(3376)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3375)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3378)
			p.Match(TSqlParserMAX_MEMORY_PERCENT)
		}
		{
			p.SetState(3379)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3380)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Alter_external_resource_poolContext).max_memory_percent = _m
		}

	}
	p.SetState(3389)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserMAX_PROCESSES || _la == TSqlParserCOMMA {
		p.SetState(3384)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3383)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3386)
			p.Match(TSqlParserMAX_PROCESSES)
		}
		{
			p.SetState(3387)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3388)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Alter_external_resource_poolContext).max_processes = _m
		}

	}
	{
		p.SetState(3391)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ICreate_external_resource_poolContext is an interface to support dynamic dispatch.
type ICreate_external_resource_poolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMax_cpu_percent returns the max_cpu_percent token.
	GetMax_cpu_percent() antlr.Token

	// GetMax_memory_percent returns the max_memory_percent token.
	GetMax_memory_percent() antlr.Token

	// GetMax_processes returns the max_processes token.
	GetMax_processes() antlr.Token

	// SetMax_cpu_percent sets the max_cpu_percent token.
	SetMax_cpu_percent(antlr.Token)

	// SetMax_memory_percent sets the max_memory_percent token.
	SetMax_memory_percent(antlr.Token)

	// SetMax_processes sets the max_processes token.
	SetMax_processes(antlr.Token)

	// GetPool_name returns the pool_name rule contexts.
	GetPool_name() IIdContext

	// SetPool_name sets the pool_name rule contexts.
	SetPool_name(IIdContext)

	// IsCreate_external_resource_poolContext differentiates from other interfaces.
	IsCreate_external_resource_poolContext()
}

type Create_external_resource_poolContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	pool_name          IIdContext
	max_cpu_percent    antlr.Token
	max_memory_percent antlr.Token
	max_processes      antlr.Token
}

func NewEmptyCreate_external_resource_poolContext() *Create_external_resource_poolContext {
	var p = new(Create_external_resource_poolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_external_resource_pool
	return p
}

func (*Create_external_resource_poolContext) IsCreate_external_resource_poolContext() {}

func NewCreate_external_resource_poolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_external_resource_poolContext {
	var p = new(Create_external_resource_poolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_external_resource_pool

	return p
}

func (s *Create_external_resource_poolContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_external_resource_poolContext) GetMax_cpu_percent() antlr.Token {
	return s.max_cpu_percent
}

func (s *Create_external_resource_poolContext) GetMax_memory_percent() antlr.Token {
	return s.max_memory_percent
}

func (s *Create_external_resource_poolContext) GetMax_processes() antlr.Token { return s.max_processes }

func (s *Create_external_resource_poolContext) SetMax_cpu_percent(v antlr.Token) {
	s.max_cpu_percent = v
}

func (s *Create_external_resource_poolContext) SetMax_memory_percent(v antlr.Token) {
	s.max_memory_percent = v
}

func (s *Create_external_resource_poolContext) SetMax_processes(v antlr.Token) { s.max_processes = v }

func (s *Create_external_resource_poolContext) GetPool_name() IIdContext { return s.pool_name }

func (s *Create_external_resource_poolContext) SetPool_name(v IIdContext) { s.pool_name = v }

func (s *Create_external_resource_poolContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_external_resource_poolContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Create_external_resource_poolContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Create_external_resource_poolContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Create_external_resource_poolContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_external_resource_poolContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_external_resource_poolContext) MAX_CPU_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_CPU_PERCENT, 0)
}

func (s *Create_external_resource_poolContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_external_resource_poolContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_external_resource_poolContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_external_resource_poolContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_external_resource_poolContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_external_resource_poolContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_external_resource_poolContext) AFFINITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFFINITY, 0)
}

func (s *Create_external_resource_poolContext) CPU() antlr.TerminalNode {
	return s.GetToken(TSqlParserCPU, 0)
}

func (s *Create_external_resource_poolContext) NUMANODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMANODE, 0)
}

func (s *Create_external_resource_poolContext) MAX_MEMORY_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_MEMORY_PERCENT, 0)
}

func (s *Create_external_resource_poolContext) MAX_PROCESSES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_PROCESSES, 0)
}

func (s *Create_external_resource_poolContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Create_external_resource_poolContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_external_resource_poolContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_external_resource_poolContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Create_external_resource_poolContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Create_external_resource_poolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_external_resource_poolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_external_resource_poolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_external_resource_pool(s)
	}
}

func (s *Create_external_resource_poolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_external_resource_pool(s)
	}
}

func (s *Create_external_resource_poolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_external_resource_pool(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_external_resource_pool() (localctx ICreate_external_resource_poolContext) {
	localctx = NewCreate_external_resource_poolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, TSqlParserRULE_create_external_resource_pool)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3393)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3394)
		p.Match(TSqlParserEXTERNAL)
	}
	{
		p.SetState(3395)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(3396)
		p.Match(TSqlParserPOOL)
	}
	{
		p.SetState(3397)

		var _x = p.Id()

		localctx.(*Create_external_resource_poolContext).pool_name = _x
	}
	{
		p.SetState(3398)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(3399)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(3400)
		p.Match(TSqlParserMAX_CPU_PERCENT)
	}
	{
		p.SetState(3401)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(3402)

		var _m = p.Match(TSqlParserDECIMAL)

		localctx.(*Create_external_resource_poolContext).max_cpu_percent = _m
	}
	p.SetState(3440)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserAFFINITY, TSqlParserCOMMA:
		p.SetState(3404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3403)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3406)
			p.Match(TSqlParserAFFINITY)
		}
		{
			p.SetState(3407)
			p.Match(TSqlParserCPU)
		}
		{
			p.SetState(3408)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3422)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserAUTO:
			{
				p.SetState(3409)
				p.Match(TSqlParserAUTO)
			}

		case TSqlParserDECIMAL, TSqlParserCOMMA:
			p.SetState(3418)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					p.SetState(3418)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 320, p.GetParserRuleContext()) {
					case 1:
						p.SetState(3411)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(3410)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(3413)
							p.Match(TSqlParserDECIMAL)
						}
						{
							p.SetState(3414)
							p.Match(TSqlParserTO)
						}
						{
							p.SetState(3415)
							p.Match(TSqlParserDECIMAL)
						}

					case 2:
						{
							p.SetState(3416)
							p.Match(TSqlParserCOMMA)
						}
						{
							p.SetState(3417)
							p.Match(TSqlParserDECIMAL)
						}

					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(3420)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 321, p.GetParserRuleContext())
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserNUMANODE:
		{
			p.SetState(3424)
			p.Match(TSqlParserNUMANODE)
		}
		{
			p.SetState(3425)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3436)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(3436)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 325, p.GetParserRuleContext()) {
				case 1:
					p.SetState(3427)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3426)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(3429)
						p.Match(TSqlParserDECIMAL)
					}
					{
						p.SetState(3430)
						p.Match(TSqlParserTO)
					}
					{
						p.SetState(3431)
						p.Match(TSqlParserDECIMAL)
					}

				case 2:
					p.SetState(3433)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3432)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(3435)
						p.Match(TSqlParserDECIMAL)
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3438)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 326, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3448)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 329, p.GetParserRuleContext()) == 1 {
		p.SetState(3443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3442)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3445)
			p.Match(TSqlParserMAX_MEMORY_PERCENT)
		}
		{
			p.SetState(3446)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3447)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Create_external_resource_poolContext).max_memory_percent = _m
		}

	}
	p.SetState(3456)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserMAX_PROCESSES || _la == TSqlParserCOMMA {
		p.SetState(3451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(3450)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(3453)
			p.Match(TSqlParserMAX_PROCESSES)
		}
		{
			p.SetState(3454)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3455)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Create_external_resource_poolContext).max_processes = _m
		}

	}
	{
		p.SetState(3458)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IAlter_fulltext_catalogContext is an interface to support dynamic dispatch.
type IAlter_fulltext_catalogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCatalog_name returns the catalog_name rule contexts.
	GetCatalog_name() IIdContext

	// SetCatalog_name sets the catalog_name rule contexts.
	SetCatalog_name(IIdContext)

	// IsAlter_fulltext_catalogContext differentiates from other interfaces.
	IsAlter_fulltext_catalogContext()
}

type Alter_fulltext_catalogContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	catalog_name IIdContext
}

func NewEmptyAlter_fulltext_catalogContext() *Alter_fulltext_catalogContext {
	var p = new(Alter_fulltext_catalogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_fulltext_catalog
	return p
}

func (*Alter_fulltext_catalogContext) IsAlter_fulltext_catalogContext() {}

func NewAlter_fulltext_catalogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_fulltext_catalogContext {
	var p = new(Alter_fulltext_catalogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_fulltext_catalog

	return p
}

func (s *Alter_fulltext_catalogContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_fulltext_catalogContext) GetCatalog_name() IIdContext { return s.catalog_name }

func (s *Alter_fulltext_catalogContext) SetCatalog_name(v IIdContext) { s.catalog_name = v }

func (s *Alter_fulltext_catalogContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_fulltext_catalogContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Alter_fulltext_catalogContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATALOG, 0)
}

func (s *Alter_fulltext_catalogContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_fulltext_catalogContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(TSqlParserREBUILD, 0)
}

func (s *Alter_fulltext_catalogContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREORGANIZE, 0)
}

func (s *Alter_fulltext_catalogContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Alter_fulltext_catalogContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Alter_fulltext_catalogContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_fulltext_catalogContext) ACCENT_SENSITIVITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserACCENT_SENSITIVITY, 0)
}

func (s *Alter_fulltext_catalogContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_fulltext_catalogContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_fulltext_catalogContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_fulltext_catalogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_fulltext_catalogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_fulltext_catalogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_fulltext_catalog(s)
	}
}

func (s *Alter_fulltext_catalogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_fulltext_catalog(s)
	}
}

func (s *Alter_fulltext_catalogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_fulltext_catalog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_fulltext_catalog() (localctx IAlter_fulltext_catalogContext) {
	localctx = NewAlter_fulltext_catalogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, TSqlParserRULE_alter_fulltext_catalog)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3460)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3461)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(3462)
		p.Match(TSqlParserCATALOG)
	}
	{
		p.SetState(3463)

		var _x = p.Id()

		localctx.(*Alter_fulltext_catalogContext).catalog_name = _x
	}
	p.SetState(3474)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserREBUILD:
		{
			p.SetState(3464)
			p.Match(TSqlParserREBUILD)
		}
		p.SetState(3469)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 332, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3465)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(3466)
				p.Match(TSqlParserACCENT_SENSITIVITY)
			}
			{
				p.SetState(3467)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3468)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case TSqlParserREORGANIZE:
		{
			p.SetState(3471)
			p.Match(TSqlParserREORGANIZE)
		}

	case TSqlParserAS:
		{
			p.SetState(3472)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(3473)
			p.Match(TSqlParserDEFAULT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_fulltext_catalogContext is an interface to support dynamic dispatch.
type ICreate_fulltext_catalogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRootpath returns the rootpath token.
	GetRootpath() antlr.Token

	// SetRootpath sets the rootpath token.
	SetRootpath(antlr.Token)

	// GetCatalog_name returns the catalog_name rule contexts.
	GetCatalog_name() IIdContext

	// GetFilegroup returns the filegroup rule contexts.
	GetFilegroup() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetCatalog_name sets the catalog_name rule contexts.
	SetCatalog_name(IIdContext)

	// SetFilegroup sets the filegroup rule contexts.
	SetFilegroup(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_fulltext_catalogContext differentiates from other interfaces.
	IsCreate_fulltext_catalogContext()
}

type Create_fulltext_catalogContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	catalog_name IIdContext
	filegroup    IIdContext
	rootpath     antlr.Token
	owner_name   IIdContext
}

func NewEmptyCreate_fulltext_catalogContext() *Create_fulltext_catalogContext {
	var p = new(Create_fulltext_catalogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_fulltext_catalog
	return p
}

func (*Create_fulltext_catalogContext) IsCreate_fulltext_catalogContext() {}

func NewCreate_fulltext_catalogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fulltext_catalogContext {
	var p = new(Create_fulltext_catalogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_fulltext_catalog

	return p
}

func (s *Create_fulltext_catalogContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fulltext_catalogContext) GetRootpath() antlr.Token { return s.rootpath }

func (s *Create_fulltext_catalogContext) SetRootpath(v antlr.Token) { s.rootpath = v }

func (s *Create_fulltext_catalogContext) GetCatalog_name() IIdContext { return s.catalog_name }

func (s *Create_fulltext_catalogContext) GetFilegroup() IIdContext { return s.filegroup }

func (s *Create_fulltext_catalogContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_fulltext_catalogContext) SetCatalog_name(v IIdContext) { s.catalog_name = v }

func (s *Create_fulltext_catalogContext) SetFilegroup(v IIdContext) { s.filegroup = v }

func (s *Create_fulltext_catalogContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_fulltext_catalogContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_fulltext_catalogContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Create_fulltext_catalogContext) CATALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATALOG, 0)
}

func (s *Create_fulltext_catalogContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_fulltext_catalogContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_fulltext_catalogContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_fulltext_catalogContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_fulltext_catalogContext) FILEGROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEGROUP, 0)
}

func (s *Create_fulltext_catalogContext) IN() antlr.TerminalNode {
	return s.GetToken(TSqlParserIN, 0)
}

func (s *Create_fulltext_catalogContext) PATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserPATH, 0)
}

func (s *Create_fulltext_catalogContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_fulltext_catalogContext) ACCENT_SENSITIVITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserACCENT_SENSITIVITY, 0)
}

func (s *Create_fulltext_catalogContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_fulltext_catalogContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_fulltext_catalogContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Create_fulltext_catalogContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_fulltext_catalogContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_fulltext_catalogContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_fulltext_catalogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fulltext_catalogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_fulltext_catalogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_fulltext_catalog(s)
	}
}

func (s *Create_fulltext_catalogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_fulltext_catalog(s)
	}
}

func (s *Create_fulltext_catalogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_fulltext_catalog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_fulltext_catalog() (localctx ICreate_fulltext_catalogContext) {
	localctx = NewCreate_fulltext_catalogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, TSqlParserRULE_create_fulltext_catalog)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3476)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3477)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(3478)
		p.Match(TSqlParserCATALOG)
	}
	{
		p.SetState(3479)

		var _x = p.Id()

		localctx.(*Create_fulltext_catalogContext).catalog_name = _x
	}
	p.SetState(3483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserON {
		{
			p.SetState(3480)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(3481)
			p.Match(TSqlParserFILEGROUP)
		}
		{
			p.SetState(3482)

			var _x = p.Id()

			localctx.(*Create_fulltext_catalogContext).filegroup = _x
		}

	}
	p.SetState(3488)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIN {
		{
			p.SetState(3485)
			p.Match(TSqlParserIN)
		}
		{
			p.SetState(3486)
			p.Match(TSqlParserPATH)
		}
		{
			p.SetState(3487)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_fulltext_catalogContext).rootpath = _m
		}

	}
	p.SetState(3494)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3490)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3491)
			p.Match(TSqlParserACCENT_SENSITIVITY)
		}
		{
			p.SetState(3492)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3493)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(3498)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(3496)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(3497)
			p.Match(TSqlParserDEFAULT)
		}

	}
	p.SetState(3502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(3500)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(3501)

			var _x = p.Id()

			localctx.(*Create_fulltext_catalogContext).owner_name = _x
		}

	}

	return localctx
}

// IAlter_fulltext_stoplistContext is an interface to support dynamic dispatch.
type IAlter_fulltext_stoplistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStopword returns the stopword token.
	GetStopword() antlr.Token

	// SetStopword sets the stopword token.
	SetStopword(antlr.Token)

	// GetStoplist_name returns the stoplist_name rule contexts.
	GetStoplist_name() IIdContext

	// SetStoplist_name sets the stoplist_name rule contexts.
	SetStoplist_name(IIdContext)

	// IsAlter_fulltext_stoplistContext differentiates from other interfaces.
	IsAlter_fulltext_stoplistContext()
}

type Alter_fulltext_stoplistContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	stoplist_name IIdContext
	stopword      antlr.Token
}

func NewEmptyAlter_fulltext_stoplistContext() *Alter_fulltext_stoplistContext {
	var p = new(Alter_fulltext_stoplistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_fulltext_stoplist
	return p
}

func (*Alter_fulltext_stoplistContext) IsAlter_fulltext_stoplistContext() {}

func NewAlter_fulltext_stoplistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_fulltext_stoplistContext {
	var p = new(Alter_fulltext_stoplistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_fulltext_stoplist

	return p
}

func (s *Alter_fulltext_stoplistContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_fulltext_stoplistContext) GetStopword() antlr.Token { return s.stopword }

func (s *Alter_fulltext_stoplistContext) SetStopword(v antlr.Token) { s.stopword = v }

func (s *Alter_fulltext_stoplistContext) GetStoplist_name() IIdContext { return s.stoplist_name }

func (s *Alter_fulltext_stoplistContext) SetStoplist_name(v IIdContext) { s.stoplist_name = v }

func (s *Alter_fulltext_stoplistContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_fulltext_stoplistContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Alter_fulltext_stoplistContext) STOPLIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPLIST, 0)
}

func (s *Alter_fulltext_stoplistContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_fulltext_stoplistContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_fulltext_stoplistContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserLANGUAGE, 0)
}

func (s *Alter_fulltext_stoplistContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_fulltext_stoplistContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_fulltext_stoplistContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_fulltext_stoplistContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Alter_fulltext_stoplistContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Alter_fulltext_stoplistContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Alter_fulltext_stoplistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_fulltext_stoplistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_fulltext_stoplistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_fulltext_stoplist(s)
	}
}

func (s *Alter_fulltext_stoplistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_fulltext_stoplist(s)
	}
}

func (s *Alter_fulltext_stoplistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_fulltext_stoplist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_fulltext_stoplist() (localctx IAlter_fulltext_stoplistContext) {
	localctx = NewAlter_fulltext_stoplistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, TSqlParserRULE_alter_fulltext_stoplist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3504)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3505)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(3506)
		p.Match(TSqlParserSTOPLIST)
	}
	{
		p.SetState(3507)

		var _x = p.Id()

		localctx.(*Alter_fulltext_stoplistContext).stoplist_name = _x
	}
	p.SetState(3521)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserADD:
		{
			p.SetState(3508)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(3509)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_fulltext_stoplistContext).stopword = _m
		}
		{
			p.SetState(3510)
			p.Match(TSqlParserLANGUAGE)
		}
		p.SetState(3511)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-777)&-(0x1f+1)) == 0 && ((1<<uint((_la-777)))&((1<<(TSqlParserDECIMAL-777))|(1<<(TSqlParserSTRING-777))|(1<<(TSqlParserBINARY-777)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserDROP:
		{
			p.SetState(3512)
			p.Match(TSqlParserDROP)
		}
		p.SetState(3519)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 339, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3513)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_fulltext_stoplistContext).stopword = _m
			}
			{
				p.SetState(3514)
				p.Match(TSqlParserLANGUAGE)
			}
			p.SetState(3515)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-777)&-(0x1f+1)) == 0 && ((1<<uint((_la-777)))&((1<<(TSqlParserDECIMAL-777))|(1<<(TSqlParserSTRING-777))|(1<<(TSqlParserBINARY-777)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case 2:
			{
				p.SetState(3516)
				p.Match(TSqlParserALL)
			}
			p.SetState(3517)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-777)&-(0x1f+1)) == 0 && ((1<<uint((_la-777)))&((1<<(TSqlParserDECIMAL-777))|(1<<(TSqlParserSTRING-777))|(1<<(TSqlParserBINARY-777)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case 3:
			{
				p.SetState(3518)
				p.Match(TSqlParserALL)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_fulltext_stoplistContext is an interface to support dynamic dispatch.
type ICreate_fulltext_stoplistContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetStoplist_name returns the stoplist_name rule contexts.
	GetStoplist_name() IIdContext

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSource_stoplist_name returns the source_stoplist_name rule contexts.
	GetSource_stoplist_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetStoplist_name sets the stoplist_name rule contexts.
	SetStoplist_name(IIdContext)

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSource_stoplist_name sets the source_stoplist_name rule contexts.
	SetSource_stoplist_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_fulltext_stoplistContext differentiates from other interfaces.
	IsCreate_fulltext_stoplistContext()
}

type Create_fulltext_stoplistContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	stoplist_name        IIdContext
	database_name        IIdContext
	source_stoplist_name IIdContext
	owner_name           IIdContext
}

func NewEmptyCreate_fulltext_stoplistContext() *Create_fulltext_stoplistContext {
	var p = new(Create_fulltext_stoplistContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_fulltext_stoplist
	return p
}

func (*Create_fulltext_stoplistContext) IsCreate_fulltext_stoplistContext() {}

func NewCreate_fulltext_stoplistContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_fulltext_stoplistContext {
	var p = new(Create_fulltext_stoplistContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_fulltext_stoplist

	return p
}

func (s *Create_fulltext_stoplistContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_fulltext_stoplistContext) GetStoplist_name() IIdContext { return s.stoplist_name }

func (s *Create_fulltext_stoplistContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Create_fulltext_stoplistContext) GetSource_stoplist_name() IIdContext {
	return s.source_stoplist_name
}

func (s *Create_fulltext_stoplistContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_fulltext_stoplistContext) SetStoplist_name(v IIdContext) { s.stoplist_name = v }

func (s *Create_fulltext_stoplistContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Create_fulltext_stoplistContext) SetSource_stoplist_name(v IIdContext) {
	s.source_stoplist_name = v
}

func (s *Create_fulltext_stoplistContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_fulltext_stoplistContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_fulltext_stoplistContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLTEXT, 0)
}

func (s *Create_fulltext_stoplistContext) AllSTOPLIST() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTOPLIST)
}

func (s *Create_fulltext_stoplistContext) STOPLIST(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPLIST, i)
}

func (s *Create_fulltext_stoplistContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_fulltext_stoplistContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_fulltext_stoplistContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_fulltext_stoplistContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_fulltext_stoplistContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYSTEM, 0)
}

func (s *Create_fulltext_stoplistContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_fulltext_stoplistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_fulltext_stoplistContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_fulltext_stoplistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_fulltext_stoplist(s)
	}
}

func (s *Create_fulltext_stoplistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_fulltext_stoplist(s)
	}
}

func (s *Create_fulltext_stoplistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_fulltext_stoplist(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_fulltext_stoplist() (localctx ICreate_fulltext_stoplistContext) {
	localctx = NewCreate_fulltext_stoplistContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, TSqlParserRULE_create_fulltext_stoplist)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3523)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3524)
		p.Match(TSqlParserFULLTEXT)
	}
	{
		p.SetState(3525)
		p.Match(TSqlParserSTOPLIST)
	}
	{
		p.SetState(3526)

		var _x = p.Id()

		localctx.(*Create_fulltext_stoplistContext).stoplist_name = _x
	}
	p.SetState(3538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(3527)
			p.Match(TSqlParserFROM)
		}
		p.SetState(3536)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			p.SetState(3531)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(3528)

					var _x = p.Id()

					localctx.(*Create_fulltext_stoplistContext).database_name = _x
				}
				{
					p.SetState(3529)
					p.Match(TSqlParserDOT)
				}

			}
			{
				p.SetState(3533)

				var _x = p.Id()

				localctx.(*Create_fulltext_stoplistContext).source_stoplist_name = _x
			}

		case TSqlParserSYSTEM:
			{
				p.SetState(3534)
				p.Match(TSqlParserSYSTEM)
			}
			{
				p.SetState(3535)
				p.Match(TSqlParserSTOPLIST)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(3542)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(3540)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(3541)

			var _x = p.Id()

			localctx.(*Create_fulltext_stoplistContext).owner_name = _x
		}

	}

	return localctx
}

// IAlter_login_sql_serverContext is an interface to support dynamic dispatch.
type IAlter_login_sql_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetPassword_hash returns the password_hash token.
	GetPassword_hash() antlr.Token

	// GetOld_password returns the old_password token.
	GetOld_password() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetPassword_hash sets the password_hash token.
	SetPassword_hash(antlr.Token)

	// SetOld_password sets the old_password token.
	SetOld_password(antlr.Token)

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// GetDefault_database returns the default_database rule contexts.
	GetDefault_database() IIdContext

	// GetDefault_laguage returns the default_laguage rule contexts.
	GetDefault_laguage() IIdContext

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// SetDefault_database sets the default_database rule contexts.
	SetDefault_database(IIdContext)

	// SetDefault_laguage sets the default_laguage rule contexts.
	SetDefault_laguage(IIdContext)

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// IsAlter_login_sql_serverContext differentiates from other interfaces.
	IsAlter_login_sql_serverContext()
}

type Alter_login_sql_serverContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	login_name       IIdContext
	password         antlr.Token
	password_hash    antlr.Token
	old_password     antlr.Token
	default_database IIdContext
	default_laguage  IIdContext
	credential_name  IIdContext
}

func NewEmptyAlter_login_sql_serverContext() *Alter_login_sql_serverContext {
	var p = new(Alter_login_sql_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_login_sql_server
	return p
}

func (*Alter_login_sql_serverContext) IsAlter_login_sql_serverContext() {}

func NewAlter_login_sql_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_login_sql_serverContext {
	var p = new(Alter_login_sql_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_login_sql_server

	return p
}

func (s *Alter_login_sql_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_login_sql_serverContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_login_sql_serverContext) GetPassword_hash() antlr.Token { return s.password_hash }

func (s *Alter_login_sql_serverContext) GetOld_password() antlr.Token { return s.old_password }

func (s *Alter_login_sql_serverContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_login_sql_serverContext) SetPassword_hash(v antlr.Token) { s.password_hash = v }

func (s *Alter_login_sql_serverContext) SetOld_password(v antlr.Token) { s.old_password = v }

func (s *Alter_login_sql_serverContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Alter_login_sql_serverContext) GetDefault_database() IIdContext { return s.default_database }

func (s *Alter_login_sql_serverContext) GetDefault_laguage() IIdContext { return s.default_laguage }

func (s *Alter_login_sql_serverContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Alter_login_sql_serverContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Alter_login_sql_serverContext) SetDefault_database(v IIdContext) { s.default_database = v }

func (s *Alter_login_sql_serverContext) SetDefault_laguage(v IIdContext) { s.default_laguage = v }

func (s *Alter_login_sql_serverContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Alter_login_sql_serverContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_login_sql_serverContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Alter_login_sql_serverContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_login_sql_serverContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_login_sql_serverContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_login_sql_serverContext) AllCREDENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCREDENTIAL)
}

func (s *Alter_login_sql_serverContext) CREDENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, i)
}

func (s *Alter_login_sql_serverContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_login_sql_serverContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_login_sql_serverContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_PASSWORD, 0)
}

func (s *Alter_login_sql_serverContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_login_sql_serverContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_login_sql_serverContext) DEFAULT_DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_DATABASE, 0)
}

func (s *Alter_login_sql_serverContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, 0)
}

func (s *Alter_login_sql_serverContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_login_sql_serverContext) CHECK_POLICY() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK_POLICY, 0)
}

func (s *Alter_login_sql_serverContext) CHECK_EXPIRATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK_EXPIRATION, 0)
}

func (s *Alter_login_sql_serverContext) NO() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, 0)
}

func (s *Alter_login_sql_serverContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE, 0)
}

func (s *Alter_login_sql_serverContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_login_sql_serverContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_login_sql_serverContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_login_sql_serverContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Alter_login_sql_serverContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Alter_login_sql_serverContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Alter_login_sql_serverContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Alter_login_sql_serverContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_login_sql_serverContext) HASHED() antlr.TerminalNode {
	return s.GetToken(TSqlParserHASHED, 0)
}

func (s *Alter_login_sql_serverContext) AllMUST_CHANGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMUST_CHANGE)
}

func (s *Alter_login_sql_serverContext) MUST_CHANGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMUST_CHANGE, i)
}

func (s *Alter_login_sql_serverContext) AllUNLOCK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUNLOCK)
}

func (s *Alter_login_sql_serverContext) UNLOCK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLOCK, i)
}

func (s *Alter_login_sql_serverContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Alter_login_sql_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_login_sql_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_login_sql_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_login_sql_server(s)
	}
}

func (s *Alter_login_sql_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_login_sql_server(s)
	}
}

func (s *Alter_login_sql_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_login_sql_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_login_sql_server() (localctx IAlter_login_sql_serverContext) {
	localctx = NewAlter_login_sql_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, TSqlParserRULE_alter_login_sql_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3544)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3545)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3546)

		var _x = p.Id()

		localctx.(*Alter_login_sql_serverContext).login_name = _x
	}
	p.SetState(3614)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 358, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3548)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 345, p.GetParserRuleContext()) == 1 {
			p.SetState(3547)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDISABLE || _la == TSqlParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case 2:
		{
			p.SetState(3550)
			p.Match(TSqlParserWITH)
		}
		p.SetState(3564)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPASSWORD {
			{
				p.SetState(3551)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3552)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3556)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING:
				{
					p.SetState(3553)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Alter_login_sql_serverContext).password = _m
				}

			case TSqlParserBINARY:
				{
					p.SetState(3554)

					var _m = p.Match(TSqlParserBINARY)

					localctx.(*Alter_login_sql_serverContext).password_hash = _m
				}
				{
					p.SetState(3555)
					p.Match(TSqlParserHASHED)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3561)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK {
				p.SetState(3558)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

				p.SetState(3563)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(3575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserOLD_PASSWORD {
			{
				p.SetState(3566)
				p.Match(TSqlParserOLD_PASSWORD)
			}
			{
				p.SetState(3567)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3568)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_login_sql_serverContext).old_password = _m
			}
			p.SetState(3572)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK {
				p.SetState(3569)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

				p.SetState(3574)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(3580)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDEFAULT_DATABASE {
			{
				p.SetState(3577)
				p.Match(TSqlParserDEFAULT_DATABASE)
			}
			{
				p.SetState(3578)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3579)

				var _x = p.Id()

				localctx.(*Alter_login_sql_serverContext).default_database = _x
			}

		}
		p.SetState(3585)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDEFAULT_LANGUAGE {
			{
				p.SetState(3582)
				p.Match(TSqlParserDEFAULT_LANGUAGE)
			}
			{
				p.SetState(3583)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3584)

				var _x = p.Id()

				localctx.(*Alter_login_sql_serverContext).default_laguage = _x
			}

		}
		p.SetState(3590)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 353, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3587)
				p.Match(TSqlParserNAME)
			}
			{
				p.SetState(3588)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3589)

				var _x = p.Id()

				localctx.(*Alter_login_sql_serverContext).login_name = _x
			}

		}
		p.SetState(3595)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCHECK_POLICY {
			{
				p.SetState(3592)
				p.Match(TSqlParserCHECK_POLICY)
			}
			{
				p.SetState(3593)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3594)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCHECK_EXPIRATION {
			{
				p.SetState(3597)
				p.Match(TSqlParserCHECK_EXPIRATION)
			}
			{
				p.SetState(3598)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3599)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCREDENTIAL {
			{
				p.SetState(3602)
				p.Match(TSqlParserCREDENTIAL)
			}
			{
				p.SetState(3603)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3604)

				var _x = p.Id()

				localctx.(*Alter_login_sql_serverContext).credential_name = _x
			}

		}
		p.SetState(3609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNO {
			{
				p.SetState(3607)
				p.Match(TSqlParserNO)
			}
			{
				p.SetState(3608)
				p.Match(TSqlParserCREDENTIAL)
			}

		}

	case 3:
		p.SetState(3611)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(3612)
			p.Match(TSqlParserCREDENTIAL)
		}
		{
			p.SetState(3613)

			var _x = p.Id()

			localctx.(*Alter_login_sql_serverContext).credential_name = _x
		}

	}

	return localctx
}

// ICreate_login_sql_serverContext is an interface to support dynamic dispatch.
type ICreate_login_sql_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetPassword_hash returns the password_hash token.
	GetPassword_hash() antlr.Token

	// GetSid returns the sid token.
	GetSid() antlr.Token

	// GetDefault_language returns the default_language token.
	GetDefault_language() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetPassword_hash sets the password_hash token.
	SetPassword_hash(antlr.Token)

	// SetSid sets the sid token.
	SetSid(antlr.Token)

	// SetDefault_language sets the default_language token.
	SetDefault_language(antlr.Token)

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// GetDefault_database returns the default_database rule contexts.
	GetDefault_database() IIdContext

	// GetDefault_laguage returns the default_laguage rule contexts.
	GetDefault_laguage() IIdContext

	// GetCredential_name returns the credential_name rule contexts.
	GetCredential_name() IIdContext

	// GetCertname returns the certname rule contexts.
	GetCertname() IIdContext

	// GetAsym_key_name returns the asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// SetDefault_database sets the default_database rule contexts.
	SetDefault_database(IIdContext)

	// SetDefault_laguage sets the default_laguage rule contexts.
	SetDefault_laguage(IIdContext)

	// SetCredential_name sets the credential_name rule contexts.
	SetCredential_name(IIdContext)

	// SetCertname sets the certname rule contexts.
	SetCertname(IIdContext)

	// SetAsym_key_name sets the asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// IsCreate_login_sql_serverContext differentiates from other interfaces.
	IsCreate_login_sql_serverContext()
}

type Create_login_sql_serverContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	login_name       IIdContext
	password         antlr.Token
	password_hash    antlr.Token
	sid              antlr.Token
	default_database IIdContext
	default_laguage  IIdContext
	credential_name  IIdContext
	default_language antlr.Token
	certname         IIdContext
	asym_key_name    IIdContext
}

func NewEmptyCreate_login_sql_serverContext() *Create_login_sql_serverContext {
	var p = new(Create_login_sql_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_login_sql_server
	return p
}

func (*Create_login_sql_serverContext) IsCreate_login_sql_serverContext() {}

func NewCreate_login_sql_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_login_sql_serverContext {
	var p = new(Create_login_sql_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_login_sql_server

	return p
}

func (s *Create_login_sql_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_login_sql_serverContext) GetPassword() antlr.Token { return s.password }

func (s *Create_login_sql_serverContext) GetPassword_hash() antlr.Token { return s.password_hash }

func (s *Create_login_sql_serverContext) GetSid() antlr.Token { return s.sid }

func (s *Create_login_sql_serverContext) GetDefault_language() antlr.Token { return s.default_language }

func (s *Create_login_sql_serverContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_login_sql_serverContext) SetPassword_hash(v antlr.Token) { s.password_hash = v }

func (s *Create_login_sql_serverContext) SetSid(v antlr.Token) { s.sid = v }

func (s *Create_login_sql_serverContext) SetDefault_language(v antlr.Token) { s.default_language = v }

func (s *Create_login_sql_serverContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Create_login_sql_serverContext) GetDefault_database() IIdContext { return s.default_database }

func (s *Create_login_sql_serverContext) GetDefault_laguage() IIdContext { return s.default_laguage }

func (s *Create_login_sql_serverContext) GetCredential_name() IIdContext { return s.credential_name }

func (s *Create_login_sql_serverContext) GetCertname() IIdContext { return s.certname }

func (s *Create_login_sql_serverContext) GetAsym_key_name() IIdContext { return s.asym_key_name }

func (s *Create_login_sql_serverContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Create_login_sql_serverContext) SetDefault_database(v IIdContext) { s.default_database = v }

func (s *Create_login_sql_serverContext) SetDefault_laguage(v IIdContext) { s.default_laguage = v }

func (s *Create_login_sql_serverContext) SetCredential_name(v IIdContext) { s.credential_name = v }

func (s *Create_login_sql_serverContext) SetCertname(v IIdContext) { s.certname = v }

func (s *Create_login_sql_serverContext) SetAsym_key_name(v IIdContext) { s.asym_key_name = v }

func (s *Create_login_sql_serverContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_login_sql_serverContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Create_login_sql_serverContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_login_sql_serverContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_login_sql_serverContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_login_sql_serverContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_login_sql_serverContext) SID() antlr.TerminalNode {
	return s.GetToken(TSqlParserSID, 0)
}

func (s *Create_login_sql_serverContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_login_sql_serverContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_login_sql_serverContext) DEFAULT_DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_DATABASE, 0)
}

func (s *Create_login_sql_serverContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, 0)
}

func (s *Create_login_sql_serverContext) CHECK_EXPIRATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK_EXPIRATION, 0)
}

func (s *Create_login_sql_serverContext) CHECK_POLICY() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK_POLICY, 0)
}

func (s *Create_login_sql_serverContext) CREDENTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, 0)
}

func (s *Create_login_sql_serverContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBINARY)
}

func (s *Create_login_sql_serverContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, i)
}

func (s *Create_login_sql_serverContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_login_sql_serverContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_login_sql_serverContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Create_login_sql_serverContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Create_login_sql_serverContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWINDOWS, 0)
}

func (s *Create_login_sql_serverContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Create_login_sql_serverContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Create_login_sql_serverContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_login_sql_serverContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_login_sql_serverContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_login_sql_serverContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_login_sql_serverContext) HASHED() antlr.TerminalNode {
	return s.GetToken(TSqlParserHASHED, 0)
}

func (s *Create_login_sql_serverContext) AllMUST_CHANGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMUST_CHANGE)
}

func (s *Create_login_sql_serverContext) MUST_CHANGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMUST_CHANGE, i)
}

func (s *Create_login_sql_serverContext) AllUNLOCK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUNLOCK)
}

func (s *Create_login_sql_serverContext) UNLOCK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLOCK, i)
}

func (s *Create_login_sql_serverContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_login_sql_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_login_sql_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_login_sql_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_login_sql_server(s)
	}
}

func (s *Create_login_sql_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_login_sql_server(s)
	}
}

func (s *Create_login_sql_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_login_sql_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_login_sql_server() (localctx ICreate_login_sql_serverContext) {
	localctx = NewCreate_login_sql_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, TSqlParserRULE_create_login_sql_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3616)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3617)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3618)

		var _x = p.Id()

		localctx.(*Create_login_sql_serverContext).login_name = _x
	}
	p.SetState(3709)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserWITH:
		{
			p.SetState(3619)
			p.Match(TSqlParserWITH)
		}
		p.SetState(3633)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPASSWORD {
			{
				p.SetState(3620)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3621)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3625)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING:
				{
					p.SetState(3622)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Create_login_sql_serverContext).password = _m
				}

			case TSqlParserBINARY:
				{
					p.SetState(3623)

					var _m = p.Match(TSqlParserBINARY)

					localctx.(*Create_login_sql_serverContext).password_hash = _m
				}
				{
					p.SetState(3624)
					p.Match(TSqlParserHASHED)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3630)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK {
				p.SetState(3627)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

				p.SetState(3632)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(3641)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 363, p.GetParserRuleContext()) == 1 {
			p.SetState(3636)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3635)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3638)
				p.Match(TSqlParserSID)
			}
			{
				p.SetState(3639)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3640)

				var _m = p.Match(TSqlParserBINARY)

				localctx.(*Create_login_sql_serverContext).sid = _m
			}

		}
		p.SetState(3649)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 365, p.GetParserRuleContext()) == 1 {
			p.SetState(3644)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3643)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3646)
				p.Match(TSqlParserDEFAULT_DATABASE)
			}
			{
				p.SetState(3647)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3648)

				var _x = p.Id()

				localctx.(*Create_login_sql_serverContext).default_database = _x
			}

		}
		p.SetState(3657)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 367, p.GetParserRuleContext()) == 1 {
			p.SetState(3652)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3651)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3654)
				p.Match(TSqlParserDEFAULT_LANGUAGE)
			}
			{
				p.SetState(3655)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3656)

				var _x = p.Id()

				localctx.(*Create_login_sql_serverContext).default_laguage = _x
			}

		}
		p.SetState(3665)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 369, p.GetParserRuleContext()) == 1 {
			p.SetState(3660)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3659)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3662)
				p.Match(TSqlParserCHECK_EXPIRATION)
			}
			{
				p.SetState(3663)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3664)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3673)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 371, p.GetParserRuleContext()) == 1 {
			p.SetState(3668)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3667)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3670)
				p.Match(TSqlParserCHECK_POLICY)
			}
			{
				p.SetState(3671)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3672)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(3681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCREDENTIAL || _la == TSqlParserCOMMA {
			p.SetState(3676)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3675)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3678)
				p.Match(TSqlParserCREDENTIAL)
			}
			{
				p.SetState(3679)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3680)

				var _x = p.Id()

				localctx.(*Create_login_sql_serverContext).credential_name = _x
			}

		}

	case TSqlParserFROM:
		{
			p.SetState(3683)
			p.Match(TSqlParserFROM)
		}
		p.SetState(3707)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserWINDOWS:
			{
				p.SetState(3684)
				p.Match(TSqlParserWINDOWS)
			}

			{
				p.SetState(3685)
				p.Match(TSqlParserWITH)
			}
			p.SetState(3692)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 375, p.GetParserRuleContext()) == 1 {
				p.SetState(3687)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(3686)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(3689)
					p.Match(TSqlParserDEFAULT_DATABASE)
				}
				{
					p.SetState(3690)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(3691)

					var _x = p.Id()

					localctx.(*Create_login_sql_serverContext).default_database = _x
				}

			}
			p.SetState(3700)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserDEFAULT_LANGUAGE || _la == TSqlParserCOMMA {
				p.SetState(3695)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(3694)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(3697)
					p.Match(TSqlParserDEFAULT_LANGUAGE)
				}
				{
					p.SetState(3698)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(3699)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Create_login_sql_serverContext).default_language = _m
				}

			}

		case TSqlParserCERTIFICATE:
			{
				p.SetState(3702)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(3703)

				var _x = p.Id()

				localctx.(*Create_login_sql_serverContext).certname = _x
			}

		case TSqlParserASYMMETRIC:
			{
				p.SetState(3704)
				p.Match(TSqlParserASYMMETRIC)
			}
			{
				p.SetState(3705)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(3706)

				var _x = p.Id()

				localctx.(*Create_login_sql_serverContext).asym_key_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_login_azure_sqlContext is an interface to support dynamic dispatch.
type IAlter_login_azure_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetOld_password returns the old_password token.
	GetOld_password() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetOld_password sets the old_password token.
	SetOld_password(antlr.Token)

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// IsAlter_login_azure_sqlContext differentiates from other interfaces.
	IsAlter_login_azure_sqlContext()
}

type Alter_login_azure_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	login_name   IIdContext
	password     antlr.Token
	old_password antlr.Token
}

func NewEmptyAlter_login_azure_sqlContext() *Alter_login_azure_sqlContext {
	var p = new(Alter_login_azure_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_login_azure_sql
	return p
}

func (*Alter_login_azure_sqlContext) IsAlter_login_azure_sqlContext() {}

func NewAlter_login_azure_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_login_azure_sqlContext {
	var p = new(Alter_login_azure_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_login_azure_sql

	return p
}

func (s *Alter_login_azure_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_login_azure_sqlContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_login_azure_sqlContext) GetOld_password() antlr.Token { return s.old_password }

func (s *Alter_login_azure_sqlContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_login_azure_sqlContext) SetOld_password(v antlr.Token) { s.old_password = v }

func (s *Alter_login_azure_sqlContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Alter_login_azure_sqlContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Alter_login_azure_sqlContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_login_azure_sqlContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Alter_login_azure_sqlContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_login_azure_sqlContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_login_azure_sqlContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_login_azure_sqlContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_login_azure_sqlContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_login_azure_sqlContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_login_azure_sqlContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_login_azure_sqlContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_login_azure_sqlContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_login_azure_sqlContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE, 0)
}

func (s *Alter_login_azure_sqlContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_login_azure_sqlContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_PASSWORD, 0)
}

func (s *Alter_login_azure_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_login_azure_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_login_azure_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_login_azure_sql(s)
	}
}

func (s *Alter_login_azure_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_login_azure_sql(s)
	}
}

func (s *Alter_login_azure_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_login_azure_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_login_azure_sql() (localctx IAlter_login_azure_sqlContext) {
	localctx = NewAlter_login_azure_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, TSqlParserRULE_alter_login_azure_sql)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3711)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3712)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3713)

		var _x = p.Id()

		localctx.(*Alter_login_azure_sqlContext).login_name = _x
	}
	p.SetState(3731)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 383, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3715)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 380, p.GetParserRuleContext()) == 1 {
			p.SetState(3714)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDISABLE || _la == TSqlParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case 2:
		{
			p.SetState(3717)
			p.Match(TSqlParserWITH)
		}
		p.SetState(3729)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserPASSWORD:
			{
				p.SetState(3718)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3719)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3720)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_login_azure_sqlContext).password = _m
			}
			p.SetState(3724)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserOLD_PASSWORD {
				{
					p.SetState(3721)
					p.Match(TSqlParserOLD_PASSWORD)
				}
				{
					p.SetState(3722)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(3723)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Alter_login_azure_sqlContext).old_password = _m
				}

			}

		case TSqlParserNAME:
			{
				p.SetState(3726)
				p.Match(TSqlParserNAME)
			}
			{
				p.SetState(3727)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3728)

				var _x = p.Id()

				localctx.(*Alter_login_azure_sqlContext).login_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ICreate_login_azure_sqlContext is an interface to support dynamic dispatch.
type ICreate_login_azure_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSid returns the sid token.
	GetSid() antlr.Token

	// SetSid sets the sid token.
	SetSid(antlr.Token)

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// IsCreate_login_azure_sqlContext differentiates from other interfaces.
	IsCreate_login_azure_sqlContext()
}

type Create_login_azure_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	login_name IIdContext
	sid        antlr.Token
}

func NewEmptyCreate_login_azure_sqlContext() *Create_login_azure_sqlContext {
	var p = new(Create_login_azure_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_login_azure_sql
	return p
}

func (*Create_login_azure_sqlContext) IsCreate_login_azure_sqlContext() {}

func NewCreate_login_azure_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_login_azure_sqlContext {
	var p = new(Create_login_azure_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_login_azure_sql

	return p
}

func (s *Create_login_azure_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_login_azure_sqlContext) GetSid() antlr.Token { return s.sid }

func (s *Create_login_azure_sqlContext) SetSid(v antlr.Token) { s.sid = v }

func (s *Create_login_azure_sqlContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Create_login_azure_sqlContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Create_login_azure_sqlContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_login_azure_sqlContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Create_login_azure_sqlContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_login_azure_sqlContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_login_azure_sqlContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_login_azure_sqlContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_login_azure_sqlContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_login_azure_sqlContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_login_azure_sqlContext) SID() antlr.TerminalNode {
	return s.GetToken(TSqlParserSID, 0)
}

func (s *Create_login_azure_sqlContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Create_login_azure_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_login_azure_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_login_azure_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_login_azure_sql(s)
	}
}

func (s *Create_login_azure_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_login_azure_sql(s)
	}
}

func (s *Create_login_azure_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_login_azure_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_login_azure_sql() (localctx ICreate_login_azure_sqlContext) {
	localctx = NewCreate_login_azure_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, TSqlParserRULE_create_login_azure_sql)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3733)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3734)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3735)

		var _x = p.Id()

		localctx.(*Create_login_azure_sqlContext).login_name = _x
	}
	{
		p.SetState(3736)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(3737)
		p.Match(TSqlParserPASSWORD)
	}
	{
		p.SetState(3738)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(3739)
		p.Match(TSqlParserSTRING)
	}
	p.SetState(3743)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 384, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3740)
			p.Match(TSqlParserSID)
		}
		{
			p.SetState(3741)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3742)

			var _m = p.Match(TSqlParserBINARY)

			localctx.(*Create_login_azure_sqlContext).sid = _m
		}

	}

	return localctx
}

// IAlter_login_azure_sql_dw_and_pdwContext is an interface to support dynamic dispatch.
type IAlter_login_azure_sql_dw_and_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetOld_password returns the old_password token.
	GetOld_password() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetOld_password sets the old_password token.
	SetOld_password(antlr.Token)

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// IsAlter_login_azure_sql_dw_and_pdwContext differentiates from other interfaces.
	IsAlter_login_azure_sql_dw_and_pdwContext()
}

type Alter_login_azure_sql_dw_and_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	login_name   IIdContext
	password     antlr.Token
	old_password antlr.Token
}

func NewEmptyAlter_login_azure_sql_dw_and_pdwContext() *Alter_login_azure_sql_dw_and_pdwContext {
	var p = new(Alter_login_azure_sql_dw_and_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_login_azure_sql_dw_and_pdw
	return p
}

func (*Alter_login_azure_sql_dw_and_pdwContext) IsAlter_login_azure_sql_dw_and_pdwContext() {}

func NewAlter_login_azure_sql_dw_and_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_login_azure_sql_dw_and_pdwContext {
	var p = new(Alter_login_azure_sql_dw_and_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_login_azure_sql_dw_and_pdw

	return p
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_login_azure_sql_dw_and_pdwContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_login_azure_sql_dw_and_pdwContext) GetOld_password() antlr.Token { return s.old_password }

func (s *Alter_login_azure_sql_dw_and_pdwContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_login_azure_sql_dw_and_pdwContext) SetOld_password(v antlr.Token) { s.old_password = v }

func (s *Alter_login_azure_sql_dw_and_pdwContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Alter_login_azure_sql_dw_and_pdwContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Alter_login_azure_sql_dw_and_pdwContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_PASSWORD, 0)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) AllMUST_CHANGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMUST_CHANGE)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) MUST_CHANGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMUST_CHANGE, i)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) AllUNLOCK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUNLOCK)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) UNLOCK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLOCK, i)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_login_azure_sql_dw_and_pdw(s)
	}
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_login_azure_sql_dw_and_pdw(s)
	}
}

func (s *Alter_login_azure_sql_dw_and_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_login_azure_sql_dw_and_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_login_azure_sql_dw_and_pdw() (localctx IAlter_login_azure_sql_dw_and_pdwContext) {
	localctx = NewAlter_login_azure_sql_dw_and_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, TSqlParserRULE_alter_login_azure_sql_dw_and_pdw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3745)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3746)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3747)

		var _x = p.Id()

		localctx.(*Alter_login_azure_sql_dw_and_pdwContext).login_name = _x
	}
	p.SetState(3771)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3749)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 385, p.GetParserRuleContext()) == 1 {
			p.SetState(3748)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDISABLE || _la == TSqlParserENABLE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case 2:
		{
			p.SetState(3751)
			p.Match(TSqlParserWITH)
		}
		p.SetState(3769)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserPASSWORD:
			{
				p.SetState(3752)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3753)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3754)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_login_azure_sql_dw_and_pdwContext).password = _m
			}
			p.SetState(3764)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserOLD_PASSWORD {
				{
					p.SetState(3755)
					p.Match(TSqlParserOLD_PASSWORD)
				}
				{
					p.SetState(3756)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(3757)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Alter_login_azure_sql_dw_and_pdwContext).old_password = _m
				}
				p.SetState(3761)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK {
					p.SetState(3758)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserMUST_CHANGE || _la == TSqlParserUNLOCK) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

					p.SetState(3763)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			}

		case TSqlParserNAME:
			{
				p.SetState(3766)
				p.Match(TSqlParserNAME)
			}
			{
				p.SetState(3767)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3768)

				var _x = p.Id()

				localctx.(*Alter_login_azure_sql_dw_and_pdwContext).login_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ICreate_login_pdwContext is an interface to support dynamic dispatch.
type ICreate_login_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetLoginName returns the loginName rule contexts.
	GetLoginName() IIdContext

	// SetLoginName sets the loginName rule contexts.
	SetLoginName(IIdContext)

	// IsCreate_login_pdwContext differentiates from other interfaces.
	IsCreate_login_pdwContext()
}

type Create_login_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	loginName IIdContext
	password  antlr.Token
}

func NewEmptyCreate_login_pdwContext() *Create_login_pdwContext {
	var p = new(Create_login_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_login_pdw
	return p
}

func (*Create_login_pdwContext) IsCreate_login_pdwContext() {}

func NewCreate_login_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_login_pdwContext {
	var p = new(Create_login_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_login_pdw

	return p
}

func (s *Create_login_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_login_pdwContext) GetPassword() antlr.Token { return s.password }

func (s *Create_login_pdwContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_login_pdwContext) GetLoginName() IIdContext { return s.loginName }

func (s *Create_login_pdwContext) SetLoginName(v IIdContext) { s.loginName = v }

func (s *Create_login_pdwContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_login_pdwContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Create_login_pdwContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_login_pdwContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_login_pdwContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_login_pdwContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWINDOWS, 0)
}

func (s *Create_login_pdwContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_login_pdwContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_login_pdwContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_login_pdwContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_login_pdwContext) MUST_CHANGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMUST_CHANGE, 0)
}

func (s *Create_login_pdwContext) CHECK_POLICY() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK_POLICY, 0)
}

func (s *Create_login_pdwContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_login_pdwContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_login_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_login_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_login_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_login_pdw(s)
	}
}

func (s *Create_login_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_login_pdw(s)
	}
}

func (s *Create_login_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_login_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_login_pdw() (localctx ICreate_login_pdwContext) {
	localctx = NewCreate_login_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, TSqlParserRULE_create_login_pdw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3773)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3774)
		p.Match(TSqlParserLOGIN)
	}
	{
		p.SetState(3775)

		var _x = p.Id()

		localctx.(*Create_login_pdwContext).loginName = _x
	}
	p.SetState(3792)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserWITH:
		{
			p.SetState(3776)
			p.Match(TSqlParserWITH)
		}

		{
			p.SetState(3777)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(3778)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3779)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_login_pdwContext).password = _m
		}
		p.SetState(3781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserMUST_CHANGE {
			{
				p.SetState(3780)
				p.Match(TSqlParserMUST_CHANGE)
			}

		}
		p.SetState(3788)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCHECK_POLICY {
			{
				p.SetState(3783)
				p.Match(TSqlParserCHECK_POLICY)
			}
			{
				p.SetState(3784)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(3786)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserOFF || _la == TSqlParserON {
				p.SetState(3785)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserOFF || _la == TSqlParserON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		}

	case TSqlParserFROM:
		{
			p.SetState(3790)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(3791)
			p.Match(TSqlParserWINDOWS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_master_key_sql_serverContext is an interface to support dynamic dispatch.
type IAlter_master_key_sql_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetEncryption_password returns the encryption_password token.
	GetEncryption_password() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetEncryption_password sets the encryption_password token.
	SetEncryption_password(antlr.Token)

	// IsAlter_master_key_sql_serverContext differentiates from other interfaces.
	IsAlter_master_key_sql_serverContext()
}

type Alter_master_key_sql_serverContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	password            antlr.Token
	encryption_password antlr.Token
}

func NewEmptyAlter_master_key_sql_serverContext() *Alter_master_key_sql_serverContext {
	var p = new(Alter_master_key_sql_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_master_key_sql_server
	return p
}

func (*Alter_master_key_sql_serverContext) IsAlter_master_key_sql_serverContext() {}

func NewAlter_master_key_sql_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_master_key_sql_serverContext {
	var p = new(Alter_master_key_sql_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_master_key_sql_server

	return p
}

func (s *Alter_master_key_sql_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_master_key_sql_serverContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_master_key_sql_serverContext) GetEncryption_password() antlr.Token {
	return s.encryption_password
}

func (s *Alter_master_key_sql_serverContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_master_key_sql_serverContext) SetEncryption_password(v antlr.Token) {
	s.encryption_password = v
}

func (s *Alter_master_key_sql_serverContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_master_key_sql_serverContext) AllMASTER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMASTER)
}

func (s *Alter_master_key_sql_serverContext) MASTER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, i)
}

func (s *Alter_master_key_sql_serverContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Alter_master_key_sql_serverContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Alter_master_key_sql_serverContext) REGENERATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREGENERATE, 0)
}

func (s *Alter_master_key_sql_serverContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_master_key_sql_serverContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Alter_master_key_sql_serverContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Alter_master_key_sql_serverContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_master_key_sql_serverContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_master_key_sql_serverContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_master_key_sql_serverContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_master_key_sql_serverContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_master_key_sql_serverContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Alter_master_key_sql_serverContext) FORCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE, 0)
}

func (s *Alter_master_key_sql_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_master_key_sql_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_master_key_sql_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_master_key_sql_server(s)
	}
}

func (s *Alter_master_key_sql_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_master_key_sql_server(s)
	}
}

func (s *Alter_master_key_sql_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_master_key_sql_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_master_key_sql_server() (localctx IAlter_master_key_sql_serverContext) {
	localctx = NewAlter_master_key_sql_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, TSqlParserRULE_alter_master_key_sql_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3794)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3795)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(3796)
		p.Match(TSqlParserKEY)
	}
	p.SetState(3818)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserREGENERATE, TSqlParserFORCE:
		p.SetState(3798)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFORCE {
			{
				p.SetState(3797)
				p.Match(TSqlParserFORCE)
			}

		}
		{
			p.SetState(3800)
			p.Match(TSqlParserREGENERATE)
		}
		{
			p.SetState(3801)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3802)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3803)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(3804)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(3805)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3806)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_master_key_sql_serverContext).password = _m
		}

	case TSqlParserADD, TSqlParserDROP:
		p.SetState(3807)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(3808)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3809)
			p.Match(TSqlParserBY)
		}
		p.SetState(3816)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSERVICE:
			{
				p.SetState(3810)
				p.Match(TSqlParserSERVICE)
			}
			{
				p.SetState(3811)
				p.Match(TSqlParserMASTER)
			}
			{
				p.SetState(3812)
				p.Match(TSqlParserKEY)
			}

		case TSqlParserPASSWORD:
			{
				p.SetState(3813)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3814)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3815)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_master_key_sql_serverContext).encryption_password = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_master_key_sql_serverContext is an interface to support dynamic dispatch.
type ICreate_master_key_sql_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// IsCreate_master_key_sql_serverContext differentiates from other interfaces.
	IsCreate_master_key_sql_serverContext()
}

type Create_master_key_sql_serverContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	password antlr.Token
}

func NewEmptyCreate_master_key_sql_serverContext() *Create_master_key_sql_serverContext {
	var p = new(Create_master_key_sql_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_master_key_sql_server
	return p
}

func (*Create_master_key_sql_serverContext) IsCreate_master_key_sql_serverContext() {}

func NewCreate_master_key_sql_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_master_key_sql_serverContext {
	var p = new(Create_master_key_sql_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_master_key_sql_server

	return p
}

func (s *Create_master_key_sql_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_master_key_sql_serverContext) GetPassword() antlr.Token { return s.password }

func (s *Create_master_key_sql_serverContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_master_key_sql_serverContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_master_key_sql_serverContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Create_master_key_sql_serverContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_master_key_sql_serverContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Create_master_key_sql_serverContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Create_master_key_sql_serverContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_master_key_sql_serverContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_master_key_sql_serverContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_master_key_sql_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_master_key_sql_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_master_key_sql_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_master_key_sql_server(s)
	}
}

func (s *Create_master_key_sql_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_master_key_sql_server(s)
	}
}

func (s *Create_master_key_sql_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_master_key_sql_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_master_key_sql_server() (localctx ICreate_master_key_sql_serverContext) {
	localctx = NewCreate_master_key_sql_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, TSqlParserRULE_create_master_key_sql_server)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3820)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3821)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(3822)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(3823)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(3824)
		p.Match(TSqlParserBY)
	}
	{
		p.SetState(3825)
		p.Match(TSqlParserPASSWORD)
	}
	{
		p.SetState(3826)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(3827)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_master_key_sql_serverContext).password = _m
	}

	return localctx
}

// IAlter_master_key_azure_sqlContext is an interface to support dynamic dispatch.
type IAlter_master_key_azure_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetEncryption_password returns the encryption_password token.
	GetEncryption_password() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetEncryption_password sets the encryption_password token.
	SetEncryption_password(antlr.Token)

	// IsAlter_master_key_azure_sqlContext differentiates from other interfaces.
	IsAlter_master_key_azure_sqlContext()
}

type Alter_master_key_azure_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	password            antlr.Token
	encryption_password antlr.Token
}

func NewEmptyAlter_master_key_azure_sqlContext() *Alter_master_key_azure_sqlContext {
	var p = new(Alter_master_key_azure_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_master_key_azure_sql
	return p
}

func (*Alter_master_key_azure_sqlContext) IsAlter_master_key_azure_sqlContext() {}

func NewAlter_master_key_azure_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_master_key_azure_sqlContext {
	var p = new(Alter_master_key_azure_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_master_key_azure_sql

	return p
}

func (s *Alter_master_key_azure_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_master_key_azure_sqlContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_master_key_azure_sqlContext) GetEncryption_password() antlr.Token {
	return s.encryption_password
}

func (s *Alter_master_key_azure_sqlContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_master_key_azure_sqlContext) SetEncryption_password(v antlr.Token) {
	s.encryption_password = v
}

func (s *Alter_master_key_azure_sqlContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_master_key_azure_sqlContext) AllMASTER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMASTER)
}

func (s *Alter_master_key_azure_sqlContext) MASTER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, i)
}

func (s *Alter_master_key_azure_sqlContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Alter_master_key_azure_sqlContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Alter_master_key_azure_sqlContext) REGENERATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREGENERATE, 0)
}

func (s *Alter_master_key_azure_sqlContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_master_key_azure_sqlContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Alter_master_key_azure_sqlContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Alter_master_key_azure_sqlContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_master_key_azure_sqlContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_master_key_azure_sqlContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_master_key_azure_sqlContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_master_key_azure_sqlContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_master_key_azure_sqlContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Alter_master_key_azure_sqlContext) FORCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE, 0)
}

func (s *Alter_master_key_azure_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_master_key_azure_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_master_key_azure_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_master_key_azure_sql(s)
	}
}

func (s *Alter_master_key_azure_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_master_key_azure_sql(s)
	}
}

func (s *Alter_master_key_azure_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_master_key_azure_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_master_key_azure_sql() (localctx IAlter_master_key_azure_sqlContext) {
	localctx = NewAlter_master_key_azure_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, TSqlParserRULE_alter_master_key_azure_sql)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3829)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3830)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(3831)
		p.Match(TSqlParserKEY)
	}
	p.SetState(3859)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserREGENERATE, TSqlParserFORCE:
		p.SetState(3833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFORCE {
			{
				p.SetState(3832)
				p.Match(TSqlParserFORCE)
			}

		}
		{
			p.SetState(3835)
			p.Match(TSqlParserREGENERATE)
		}
		{
			p.SetState(3836)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3837)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3838)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(3839)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(3840)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3841)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_master_key_azure_sqlContext).password = _m
		}

	case TSqlParserADD:
		{
			p.SetState(3842)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(3843)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3844)
			p.Match(TSqlParserBY)
		}
		p.SetState(3851)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSERVICE:
			{
				p.SetState(3845)
				p.Match(TSqlParserSERVICE)
			}
			{
				p.SetState(3846)
				p.Match(TSqlParserMASTER)
			}
			{
				p.SetState(3847)
				p.Match(TSqlParserKEY)
			}

		case TSqlParserPASSWORD:
			{
				p.SetState(3848)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(3849)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3850)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_master_key_azure_sqlContext).encryption_password = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserDROP:
		{
			p.SetState(3853)
			p.Match(TSqlParserDROP)
		}
		{
			p.SetState(3854)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3855)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(3856)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(3857)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3858)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_master_key_azure_sqlContext).encryption_password = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_master_key_azure_sqlContext is an interface to support dynamic dispatch.
type ICreate_master_key_azure_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// IsCreate_master_key_azure_sqlContext differentiates from other interfaces.
	IsCreate_master_key_azure_sqlContext()
}

type Create_master_key_azure_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	password antlr.Token
}

func NewEmptyCreate_master_key_azure_sqlContext() *Create_master_key_azure_sqlContext {
	var p = new(Create_master_key_azure_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_master_key_azure_sql
	return p
}

func (*Create_master_key_azure_sqlContext) IsCreate_master_key_azure_sqlContext() {}

func NewCreate_master_key_azure_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_master_key_azure_sqlContext {
	var p = new(Create_master_key_azure_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_master_key_azure_sql

	return p
}

func (s *Create_master_key_azure_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_master_key_azure_sqlContext) GetPassword() antlr.Token { return s.password }

func (s *Create_master_key_azure_sqlContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_master_key_azure_sqlContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_master_key_azure_sqlContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Create_master_key_azure_sqlContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_master_key_azure_sqlContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Create_master_key_azure_sqlContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Create_master_key_azure_sqlContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_master_key_azure_sqlContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_master_key_azure_sqlContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_master_key_azure_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_master_key_azure_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_master_key_azure_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_master_key_azure_sql(s)
	}
}

func (s *Create_master_key_azure_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_master_key_azure_sql(s)
	}
}

func (s *Create_master_key_azure_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_master_key_azure_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_master_key_azure_sql() (localctx ICreate_master_key_azure_sqlContext) {
	localctx = NewCreate_master_key_azure_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, TSqlParserRULE_create_master_key_azure_sql)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3861)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3862)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(3863)
		p.Match(TSqlParserKEY)
	}
	p.SetState(3869)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 400, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3864)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(3865)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(3866)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(3867)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3868)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_master_key_azure_sqlContext).password = _m
		}

	}

	return localctx
}

// IAlter_message_typeContext is an interface to support dynamic dispatch.
type IAlter_message_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMessage_type_name returns the message_type_name rule contexts.
	GetMessage_type_name() IIdContext

	// GetSchema_collection_name returns the schema_collection_name rule contexts.
	GetSchema_collection_name() IIdContext

	// SetMessage_type_name sets the message_type_name rule contexts.
	SetMessage_type_name(IIdContext)

	// SetSchema_collection_name sets the schema_collection_name rule contexts.
	SetSchema_collection_name(IIdContext)

	// IsAlter_message_typeContext differentiates from other interfaces.
	IsAlter_message_typeContext()
}

type Alter_message_typeContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	message_type_name      IIdContext
	schema_collection_name IIdContext
}

func NewEmptyAlter_message_typeContext() *Alter_message_typeContext {
	var p = new(Alter_message_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_message_type
	return p
}

func (*Alter_message_typeContext) IsAlter_message_typeContext() {}

func NewAlter_message_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_message_typeContext {
	var p = new(Alter_message_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_message_type

	return p
}

func (s *Alter_message_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_message_typeContext) GetMessage_type_name() IIdContext { return s.message_type_name }

func (s *Alter_message_typeContext) GetSchema_collection_name() IIdContext {
	return s.schema_collection_name
}

func (s *Alter_message_typeContext) SetMessage_type_name(v IIdContext) { s.message_type_name = v }

func (s *Alter_message_typeContext) SetSchema_collection_name(v IIdContext) {
	s.schema_collection_name = v
}

func (s *Alter_message_typeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_message_typeContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE, 0)
}

func (s *Alter_message_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Alter_message_typeContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALIDATION, 0)
}

func (s *Alter_message_typeContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_message_typeContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_message_typeContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_message_typeContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Alter_message_typeContext) EMPTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserEMPTY, 0)
}

func (s *Alter_message_typeContext) WELL_FORMED_XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserWELL_FORMED_XML, 0)
}

func (s *Alter_message_typeContext) VALID_XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALID_XML, 0)
}

func (s *Alter_message_typeContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_message_typeContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Alter_message_typeContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Alter_message_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_message_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_message_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_message_type(s)
	}
}

func (s *Alter_message_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_message_type(s)
	}
}

func (s *Alter_message_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_message_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_message_type() (localctx IAlter_message_typeContext) {
	localctx = NewAlter_message_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, TSqlParserRULE_alter_message_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3871)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3872)
		p.Match(TSqlParserMESSAGE)
	}
	{
		p.SetState(3873)
		p.Match(TSqlParserTYPE)
	}
	{
		p.SetState(3874)

		var _x = p.Id()

		localctx.(*Alter_message_typeContext).message_type_name = _x
	}
	{
		p.SetState(3875)
		p.Match(TSqlParserVALIDATION)
	}
	{
		p.SetState(3876)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(3885)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserNONE:
		{
			p.SetState(3877)
			p.Match(TSqlParserNONE)
		}

	case TSqlParserEMPTY:
		{
			p.SetState(3878)
			p.Match(TSqlParserEMPTY)
		}

	case TSqlParserWELL_FORMED_XML:
		{
			p.SetState(3879)
			p.Match(TSqlParserWELL_FORMED_XML)
		}

	case TSqlParserVALID_XML:
		{
			p.SetState(3880)
			p.Match(TSqlParserVALID_XML)
		}
		{
			p.SetState(3881)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3882)
			p.Match(TSqlParserSCHEMA)
		}
		{
			p.SetState(3883)
			p.Match(TSqlParserCOLLECTION)
		}
		{
			p.SetState(3884)

			var _x = p.Id()

			localctx.(*Alter_message_typeContext).schema_collection_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_partition_functionContext is an interface to support dynamic dispatch.
type IAlter_partition_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition_function_name returns the partition_function_name rule contexts.
	GetPartition_function_name() IIdContext

	// SetPartition_function_name sets the partition_function_name rule contexts.
	SetPartition_function_name(IIdContext)

	// IsAlter_partition_functionContext differentiates from other interfaces.
	IsAlter_partition_functionContext()
}

type Alter_partition_functionContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	partition_function_name IIdContext
}

func NewEmptyAlter_partition_functionContext() *Alter_partition_functionContext {
	var p = new(Alter_partition_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_partition_function
	return p
}

func (*Alter_partition_functionContext) IsAlter_partition_functionContext() {}

func NewAlter_partition_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_partition_functionContext {
	var p = new(Alter_partition_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_partition_function

	return p
}

func (s *Alter_partition_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_partition_functionContext) GetPartition_function_name() IIdContext {
	return s.partition_function_name
}

func (s *Alter_partition_functionContext) SetPartition_function_name(v IIdContext) {
	s.partition_function_name = v
}

func (s *Alter_partition_functionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_partition_functionContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Alter_partition_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserFUNCTION, 0)
}

func (s *Alter_partition_functionContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Alter_partition_functionContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Alter_partition_functionContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_partition_functionContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_partition_functionContext) RANGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRANGE, 0)
}

func (s *Alter_partition_functionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Alter_partition_functionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_partition_functionContext) SPLIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPLIT, 0)
}

func (s *Alter_partition_functionContext) MERGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMERGE, 0)
}

func (s *Alter_partition_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_partition_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_partition_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_partition_function(s)
	}
}

func (s *Alter_partition_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_partition_function(s)
	}
}

func (s *Alter_partition_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_partition_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_partition_function() (localctx IAlter_partition_functionContext) {
	localctx = NewAlter_partition_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, TSqlParserRULE_alter_partition_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3887)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3888)
		p.Match(TSqlParserPARTITION)
	}
	{
		p.SetState(3889)
		p.Match(TSqlParserFUNCTION)
	}
	{
		p.SetState(3890)

		var _x = p.Id()

		localctx.(*Alter_partition_functionContext).partition_function_name = _x
	}
	{
		p.SetState(3891)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(3892)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(3893)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserMERGE || _la == TSqlParserSPLIT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(3894)
		p.Match(TSqlParserRANGE)
	}
	{
		p.SetState(3895)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(3896)
		p.Match(TSqlParserDECIMAL)
	}
	{
		p.SetState(3897)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IAlter_partition_schemeContext is an interface to support dynamic dispatch.
type IAlter_partition_schemeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition_scheme_name returns the partition_scheme_name rule contexts.
	GetPartition_scheme_name() IIdContext

	// GetFile_group_name returns the file_group_name rule contexts.
	GetFile_group_name() IIdContext

	// SetPartition_scheme_name sets the partition_scheme_name rule contexts.
	SetPartition_scheme_name(IIdContext)

	// SetFile_group_name sets the file_group_name rule contexts.
	SetFile_group_name(IIdContext)

	// IsAlter_partition_schemeContext differentiates from other interfaces.
	IsAlter_partition_schemeContext()
}

type Alter_partition_schemeContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	partition_scheme_name IIdContext
	file_group_name       IIdContext
}

func NewEmptyAlter_partition_schemeContext() *Alter_partition_schemeContext {
	var p = new(Alter_partition_schemeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_partition_scheme
	return p
}

func (*Alter_partition_schemeContext) IsAlter_partition_schemeContext() {}

func NewAlter_partition_schemeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_partition_schemeContext {
	var p = new(Alter_partition_schemeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_partition_scheme

	return p
}

func (s *Alter_partition_schemeContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_partition_schemeContext) GetPartition_scheme_name() IIdContext {
	return s.partition_scheme_name
}

func (s *Alter_partition_schemeContext) GetFile_group_name() IIdContext { return s.file_group_name }

func (s *Alter_partition_schemeContext) SetPartition_scheme_name(v IIdContext) {
	s.partition_scheme_name = v
}

func (s *Alter_partition_schemeContext) SetFile_group_name(v IIdContext) { s.file_group_name = v }

func (s *Alter_partition_schemeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_partition_schemeContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Alter_partition_schemeContext) SCHEME() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEME, 0)
}

func (s *Alter_partition_schemeContext) NEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEXT, 0)
}

func (s *Alter_partition_schemeContext) USED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSED, 0)
}

func (s *Alter_partition_schemeContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_partition_schemeContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_partition_schemeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_partition_schemeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_partition_schemeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_partition_scheme(s)
	}
}

func (s *Alter_partition_schemeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_partition_scheme(s)
	}
}

func (s *Alter_partition_schemeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_partition_scheme(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_partition_scheme() (localctx IAlter_partition_schemeContext) {
	localctx = NewAlter_partition_schemeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, TSqlParserRULE_alter_partition_scheme)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3899)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3900)
		p.Match(TSqlParserPARTITION)
	}
	{
		p.SetState(3901)
		p.Match(TSqlParserSCHEME)
	}
	{
		p.SetState(3902)

		var _x = p.Id()

		localctx.(*Alter_partition_schemeContext).partition_scheme_name = _x
	}
	{
		p.SetState(3903)
		p.Match(TSqlParserNEXT)
	}
	{
		p.SetState(3904)
		p.Match(TSqlParserUSED)
	}
	p.SetState(3906)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 402, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3905)

			var _x = p.Id()

			localctx.(*Alter_partition_schemeContext).file_group_name = _x
		}

	}

	return localctx
}

// IAlter_remote_service_bindingContext is an interface to support dynamic dispatch.
type IAlter_remote_service_bindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBinding_name returns the binding_name rule contexts.
	GetBinding_name() IIdContext

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// SetBinding_name sets the binding_name rule contexts.
	SetBinding_name(IIdContext)

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// IsAlter_remote_service_bindingContext differentiates from other interfaces.
	IsAlter_remote_service_bindingContext()
}

type Alter_remote_service_bindingContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	binding_name IIdContext
	user_name    IIdContext
}

func NewEmptyAlter_remote_service_bindingContext() *Alter_remote_service_bindingContext {
	var p = new(Alter_remote_service_bindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_remote_service_binding
	return p
}

func (*Alter_remote_service_bindingContext) IsAlter_remote_service_bindingContext() {}

func NewAlter_remote_service_bindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_remote_service_bindingContext {
	var p = new(Alter_remote_service_bindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_remote_service_binding

	return p
}

func (s *Alter_remote_service_bindingContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_remote_service_bindingContext) GetBinding_name() IIdContext { return s.binding_name }

func (s *Alter_remote_service_bindingContext) GetUser_name() IIdContext { return s.user_name }

func (s *Alter_remote_service_bindingContext) SetBinding_name(v IIdContext) { s.binding_name = v }

func (s *Alter_remote_service_bindingContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Alter_remote_service_bindingContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_remote_service_bindingContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Alter_remote_service_bindingContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Alter_remote_service_bindingContext) BINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINDING, 0)
}

func (s *Alter_remote_service_bindingContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_remote_service_bindingContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_remote_service_bindingContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_remote_service_bindingContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Alter_remote_service_bindingContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_remote_service_bindingContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_remote_service_bindingContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Alter_remote_service_bindingContext) ANONYMOUS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANONYMOUS, 0)
}

func (s *Alter_remote_service_bindingContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_remote_service_bindingContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_remote_service_bindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_remote_service_bindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_remote_service_bindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_remote_service_binding(s)
	}
}

func (s *Alter_remote_service_bindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_remote_service_binding(s)
	}
}

func (s *Alter_remote_service_bindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_remote_service_binding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_remote_service_binding() (localctx IAlter_remote_service_bindingContext) {
	localctx = NewAlter_remote_service_bindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, TSqlParserRULE_alter_remote_service_binding)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3908)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(3909)
		p.Match(TSqlParserREMOTE)
	}
	{
		p.SetState(3910)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(3911)
		p.Match(TSqlParserBINDING)
	}
	{
		p.SetState(3912)

		var _x = p.Id()

		localctx.(*Alter_remote_service_bindingContext).binding_name = _x
	}
	{
		p.SetState(3913)
		p.Match(TSqlParserWITH)
	}
	p.SetState(3917)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserUSER {
		{
			p.SetState(3914)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(3915)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3916)

			var _x = p.Id()

			localctx.(*Alter_remote_service_bindingContext).user_name = _x
		}

	}
	p.SetState(3923)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(3919)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(3920)
			p.Match(TSqlParserANONYMOUS)
		}
		{
			p.SetState(3921)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3922)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ICreate_remote_service_bindingContext is an interface to support dynamic dispatch.
type ICreate_remote_service_bindingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRemote_service_name returns the remote_service_name token.
	GetRemote_service_name() antlr.Token

	// SetRemote_service_name sets the remote_service_name token.
	SetRemote_service_name(antlr.Token)

	// GetBinding_name returns the binding_name rule contexts.
	GetBinding_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// SetBinding_name sets the binding_name rule contexts.
	SetBinding_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// IsCreate_remote_service_bindingContext differentiates from other interfaces.
	IsCreate_remote_service_bindingContext()
}

type Create_remote_service_bindingContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	binding_name        IIdContext
	owner_name          IIdContext
	remote_service_name antlr.Token
	user_name           IIdContext
}

func NewEmptyCreate_remote_service_bindingContext() *Create_remote_service_bindingContext {
	var p = new(Create_remote_service_bindingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_remote_service_binding
	return p
}

func (*Create_remote_service_bindingContext) IsCreate_remote_service_bindingContext() {}

func NewCreate_remote_service_bindingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_remote_service_bindingContext {
	var p = new(Create_remote_service_bindingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_remote_service_binding

	return p
}

func (s *Create_remote_service_bindingContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_remote_service_bindingContext) GetRemote_service_name() antlr.Token {
	return s.remote_service_name
}

func (s *Create_remote_service_bindingContext) SetRemote_service_name(v antlr.Token) {
	s.remote_service_name = v
}

func (s *Create_remote_service_bindingContext) GetBinding_name() IIdContext { return s.binding_name }

func (s *Create_remote_service_bindingContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_remote_service_bindingContext) GetUser_name() IIdContext { return s.user_name }

func (s *Create_remote_service_bindingContext) SetBinding_name(v IIdContext) { s.binding_name = v }

func (s *Create_remote_service_bindingContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_remote_service_bindingContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Create_remote_service_bindingContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_remote_service_bindingContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Create_remote_service_bindingContext) AllSERVICE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVICE)
}

func (s *Create_remote_service_bindingContext) SERVICE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, i)
}

func (s *Create_remote_service_bindingContext) BINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINDING, 0)
}

func (s *Create_remote_service_bindingContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Create_remote_service_bindingContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_remote_service_bindingContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_remote_service_bindingContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_remote_service_bindingContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_remote_service_bindingContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_remote_service_bindingContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Create_remote_service_bindingContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_remote_service_bindingContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_remote_service_bindingContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Create_remote_service_bindingContext) ANONYMOUS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANONYMOUS, 0)
}

func (s *Create_remote_service_bindingContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_remote_service_bindingContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_remote_service_bindingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_remote_service_bindingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_remote_service_bindingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_remote_service_binding(s)
	}
}

func (s *Create_remote_service_bindingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_remote_service_binding(s)
	}
}

func (s *Create_remote_service_bindingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_remote_service_binding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_remote_service_binding() (localctx ICreate_remote_service_bindingContext) {
	localctx = NewCreate_remote_service_bindingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, TSqlParserRULE_create_remote_service_binding)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3925)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3926)
		p.Match(TSqlParserREMOTE)
	}
	{
		p.SetState(3927)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(3928)
		p.Match(TSqlParserBINDING)
	}
	{
		p.SetState(3929)

		var _x = p.Id()

		localctx.(*Create_remote_service_bindingContext).binding_name = _x
	}
	p.SetState(3932)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(3930)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(3931)

			var _x = p.Id()

			localctx.(*Create_remote_service_bindingContext).owner_name = _x
		}

	}
	{
		p.SetState(3934)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(3935)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(3936)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Create_remote_service_bindingContext).remote_service_name = _m
	}
	{
		p.SetState(3937)
		p.Match(TSqlParserWITH)
	}
	p.SetState(3941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserUSER {
		{
			p.SetState(3938)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(3939)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(3940)

			var _x = p.Id()

			localctx.(*Create_remote_service_bindingContext).user_name = _x
		}

	}
	p.SetState(3947)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(3943)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(3944)
			p.Match(TSqlParserANONYMOUS)
		}
		{
			p.SetState(3945)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(3946)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ICreate_resource_poolContext is an interface to support dynamic dispatch.
type ICreate_resource_poolContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPool_name returns the pool_name rule contexts.
	GetPool_name() IIdContext

	// SetPool_name sets the pool_name rule contexts.
	SetPool_name(IIdContext)

	// IsCreate_resource_poolContext differentiates from other interfaces.
	IsCreate_resource_poolContext()
}

type Create_resource_poolContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	pool_name IIdContext
}

func NewEmptyCreate_resource_poolContext() *Create_resource_poolContext {
	var p = new(Create_resource_poolContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_resource_pool
	return p
}

func (*Create_resource_poolContext) IsCreate_resource_poolContext() {}

func NewCreate_resource_poolContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_resource_poolContext {
	var p = new(Create_resource_poolContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_resource_pool

	return p
}

func (s *Create_resource_poolContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_resource_poolContext) GetPool_name() IIdContext { return s.pool_name }

func (s *Create_resource_poolContext) SetPool_name(v IIdContext) { s.pool_name = v }

func (s *Create_resource_poolContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_resource_poolContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Create_resource_poolContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Create_resource_poolContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_resource_poolContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_resource_poolContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_resource_poolContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_resource_poolContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_resource_poolContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_resource_poolContext) MIN_CPU_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN_CPU_PERCENT, 0)
}

func (s *Create_resource_poolContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_resource_poolContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_resource_poolContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_resource_poolContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_resource_poolContext) MAX_CPU_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_CPU_PERCENT, 0)
}

func (s *Create_resource_poolContext) CAP_CPU_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCAP_CPU_PERCENT, 0)
}

func (s *Create_resource_poolContext) AFFINITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFFINITY, 0)
}

func (s *Create_resource_poolContext) SCHEDULER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEDULER, 0)
}

func (s *Create_resource_poolContext) MIN_MEMORY_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN_MEMORY_PERCENT, 0)
}

func (s *Create_resource_poolContext) MAX_MEMORY_PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_MEMORY_PERCENT, 0)
}

func (s *Create_resource_poolContext) MIN_IOPS_PER_VOLUME() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN_IOPS_PER_VOLUME, 0)
}

func (s *Create_resource_poolContext) MAX_IOPS_PER_VOLUME() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_IOPS_PER_VOLUME, 0)
}

func (s *Create_resource_poolContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Create_resource_poolContext) NUMANODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMANODE, 0)
}

func (s *Create_resource_poolContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_resource_poolContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_resource_poolContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Create_resource_poolContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Create_resource_poolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_resource_poolContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_resource_poolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_resource_pool(s)
	}
}

func (s *Create_resource_poolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_resource_pool(s)
	}
}

func (s *Create_resource_poolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_resource_pool(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_resource_pool() (localctx ICreate_resource_poolContext) {
	localctx = NewCreate_resource_poolContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, TSqlParserRULE_create_resource_pool)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3949)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(3950)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(3951)
		p.Match(TSqlParserPOOL)
	}
	{
		p.SetState(3952)

		var _x = p.Id()

		localctx.(*Create_resource_poolContext).pool_name = _x
	}
	p.SetState(4055)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 431, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3953)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(3954)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(3961)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 409, p.GetParserRuleContext()) == 1 {
			p.SetState(3956)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3955)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3958)
				p.Match(TSqlParserMIN_CPU_PERCENT)
			}
			{
				p.SetState(3959)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3960)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(3969)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 411, p.GetParserRuleContext()) == 1 {
			p.SetState(3964)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3963)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3966)
				p.Match(TSqlParserMAX_CPU_PERCENT)
			}
			{
				p.SetState(3967)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3968)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(3977)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 413, p.GetParserRuleContext()) == 1 {
			p.SetState(3972)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3971)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3974)
				p.Match(TSqlParserCAP_CPU_PERCENT)
			}
			{
				p.SetState(3975)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(3976)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(4020)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 422, p.GetParserRuleContext()) == 1 {
			p.SetState(3980)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(3979)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(3982)
				p.Match(TSqlParserAFFINITY)
			}
			{
				p.SetState(3983)
				p.Match(TSqlParserSCHEDULER)
			}
			{
				p.SetState(3984)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4018)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserAUTO:
				{
					p.SetState(3985)
					p.Match(TSqlParserAUTO)
				}

			case TSqlParserLR_BRACKET:
				{
					p.SetState(3986)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(3996)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == TSqlParserDECIMAL || _la == TSqlParserCOMMA {
					p.SetState(3988)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(3987)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(3994)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 416, p.GetParserRuleContext()) {
					case 1:
						{
							p.SetState(3990)
							p.Match(TSqlParserDECIMAL)
						}

					case 2:
						{
							p.SetState(3991)
							p.Match(TSqlParserDECIMAL)
						}
						{
							p.SetState(3992)
							p.Match(TSqlParserTO)
						}
						{
							p.SetState(3993)
							p.Match(TSqlParserDECIMAL)
						}

					}

					p.SetState(3998)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(4000)
					p.Match(TSqlParserRR_BRACKET)
				}

			case TSqlParserNUMANODE:
				{
					p.SetState(4001)
					p.Match(TSqlParserNUMANODE)
				}
				{
					p.SetState(4002)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(4003)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(4013)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == TSqlParserDECIMAL || _la == TSqlParserCOMMA {
					p.SetState(4005)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4004)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(4011)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 419, p.GetParserRuleContext()) {
					case 1:
						{
							p.SetState(4007)
							p.Match(TSqlParserDECIMAL)
						}

					case 2:
						{
							p.SetState(4008)
							p.Match(TSqlParserDECIMAL)
						}
						{
							p.SetState(4009)
							p.Match(TSqlParserTO)
						}
						{
							p.SetState(4010)
							p.Match(TSqlParserDECIMAL)
						}

					}

					p.SetState(4015)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(4017)
					p.Match(TSqlParserRR_BRACKET)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4028)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 424, p.GetParserRuleContext()) == 1 {
			p.SetState(4023)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4022)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(4025)
				p.Match(TSqlParserMIN_MEMORY_PERCENT)
			}
			{
				p.SetState(4026)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4027)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(4036)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 426, p.GetParserRuleContext()) == 1 {
			p.SetState(4031)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4030)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(4033)
				p.Match(TSqlParserMAX_MEMORY_PERCENT)
			}
			{
				p.SetState(4034)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4035)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(4044)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 428, p.GetParserRuleContext()) == 1 {
			p.SetState(4039)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4038)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(4041)
				p.Match(TSqlParserMIN_IOPS_PER_VOLUME)
			}
			{
				p.SetState(4042)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4043)
				p.Match(TSqlParserDECIMAL)
			}

		}
		p.SetState(4052)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserMAX_IOPS_PER_VOLUME || _la == TSqlParserCOMMA {
			p.SetState(4047)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4046)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(4049)
				p.Match(TSqlParserMAX_IOPS_PER_VOLUME)
			}
			{
				p.SetState(4050)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4051)
				p.Match(TSqlParserDECIMAL)
			}

		}
		{
			p.SetState(4054)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_resource_governorContext is an interface to support dynamic dispatch.
type IAlter_resource_governorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMax_outstanding_io_per_volume returns the max_outstanding_io_per_volume token.
	GetMax_outstanding_io_per_volume() antlr.Token

	// SetMax_outstanding_io_per_volume sets the max_outstanding_io_per_volume token.
	SetMax_outstanding_io_per_volume(antlr.Token)

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetFunction_name returns the function_name rule contexts.
	GetFunction_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetFunction_name sets the function_name rule contexts.
	SetFunction_name(IIdContext)

	// IsAlter_resource_governorContext differentiates from other interfaces.
	IsAlter_resource_governorContext()
}

type Alter_resource_governorContext struct {
	*antlr.BaseParserRuleContext
	parser                        antlr.Parser
	schema_name                   IIdContext
	function_name                 IIdContext
	max_outstanding_io_per_volume antlr.Token
}

func NewEmptyAlter_resource_governorContext() *Alter_resource_governorContext {
	var p = new(Alter_resource_governorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_resource_governor
	return p
}

func (*Alter_resource_governorContext) IsAlter_resource_governorContext() {}

func NewAlter_resource_governorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_resource_governorContext {
	var p = new(Alter_resource_governorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_resource_governor

	return p
}

func (s *Alter_resource_governorContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_resource_governorContext) GetMax_outstanding_io_per_volume() antlr.Token {
	return s.max_outstanding_io_per_volume
}

func (s *Alter_resource_governorContext) SetMax_outstanding_io_per_volume(v antlr.Token) {
	s.max_outstanding_io_per_volume = v
}

func (s *Alter_resource_governorContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_resource_governorContext) GetFunction_name() IIdContext { return s.function_name }

func (s *Alter_resource_governorContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_resource_governorContext) SetFunction_name(v IIdContext) { s.function_name = v }

func (s *Alter_resource_governorContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_resource_governorContext) RESOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESOURCE, 0)
}

func (s *Alter_resource_governorContext) GOVERNOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserGOVERNOR, 0)
}

func (s *Alter_resource_governorContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_resource_governorContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_resource_governorContext) CLASSIFIER_FUNCTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLASSIFIER_FUNCTION, 0)
}

func (s *Alter_resource_governorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_resource_governorContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_resource_governorContext) RESET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESET, 0)
}

func (s *Alter_resource_governorContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATISTICS, 0)
}

func (s *Alter_resource_governorContext) MAX_OUTSTANDING_IO_PER_VOLUME() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_OUTSTANDING_IO_PER_VOLUME, 0)
}

func (s *Alter_resource_governorContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_resource_governorContext) RECONFIGURE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECONFIGURE, 0)
}

func (s *Alter_resource_governorContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Alter_resource_governorContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Alter_resource_governorContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Alter_resource_governorContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_resource_governorContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_resource_governorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_resource_governorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_resource_governorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_resource_governor(s)
	}
}

func (s *Alter_resource_governorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_resource_governor(s)
	}
}

func (s *Alter_resource_governorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_resource_governor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_resource_governor() (localctx IAlter_resource_governorContext) {
	localctx = NewAlter_resource_governorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, TSqlParserRULE_alter_resource_governor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4057)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4058)
		p.Match(TSqlParserRESOURCE)
	}
	{
		p.SetState(4059)
		p.Match(TSqlParserGOVERNOR)
	}
	p.SetState(4081)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 433, p.GetParserRuleContext()) {
	case 1:
		p.SetState(4060)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserRECONFIGURE || _la == TSqlParserDISABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 2:
		{
			p.SetState(4061)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4062)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4063)
			p.Match(TSqlParserCLASSIFIER_FUNCTION)
		}
		{
			p.SetState(4064)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4070)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(4065)

				var _x = p.Id()

				localctx.(*Alter_resource_governorContext).schema_name = _x
			}
			{
				p.SetState(4066)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(4067)

				var _x = p.Id()

				localctx.(*Alter_resource_governorContext).function_name = _x
			}

		case TSqlParserNULL:
			{
				p.SetState(4069)
				p.Match(TSqlParserNULL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4072)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 3:
		{
			p.SetState(4073)
			p.Match(TSqlParserRESET)
		}
		{
			p.SetState(4074)
			p.Match(TSqlParserSTATISTICS)
		}

	case 4:
		{
			p.SetState(4075)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4076)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4077)
			p.Match(TSqlParserMAX_OUTSTANDING_IO_PER_VOLUME)
		}
		{
			p.SetState(4078)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4079)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Alter_resource_governorContext).max_outstanding_io_per_volume = _m
		}
		{
			p.SetState(4080)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_db_roleContext is an interface to support dynamic dispatch.
type IAlter_db_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole_name returns the role_name rule contexts.
	GetRole_name() IIdContext

	// GetDatabase_principal returns the database_principal rule contexts.
	GetDatabase_principal() IIdContext

	// GetNew_role_name returns the new_role_name rule contexts.
	GetNew_role_name() IIdContext

	// SetRole_name sets the role_name rule contexts.
	SetRole_name(IIdContext)

	// SetDatabase_principal sets the database_principal rule contexts.
	SetDatabase_principal(IIdContext)

	// SetNew_role_name sets the new_role_name rule contexts.
	SetNew_role_name(IIdContext)

	// IsAlter_db_roleContext differentiates from other interfaces.
	IsAlter_db_roleContext()
}

type Alter_db_roleContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	role_name          IIdContext
	database_principal IIdContext
	new_role_name      IIdContext
}

func NewEmptyAlter_db_roleContext() *Alter_db_roleContext {
	var p = new(Alter_db_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_db_role
	return p
}

func (*Alter_db_roleContext) IsAlter_db_roleContext() {}

func NewAlter_db_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_db_roleContext {
	var p = new(Alter_db_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_db_role

	return p
}

func (s *Alter_db_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_db_roleContext) GetRole_name() IIdContext { return s.role_name }

func (s *Alter_db_roleContext) GetDatabase_principal() IIdContext { return s.database_principal }

func (s *Alter_db_roleContext) GetNew_role_name() IIdContext { return s.new_role_name }

func (s *Alter_db_roleContext) SetRole_name(v IIdContext) { s.role_name = v }

func (s *Alter_db_roleContext) SetDatabase_principal(v IIdContext) { s.database_principal = v }

func (s *Alter_db_roleContext) SetNew_role_name(v IIdContext) { s.new_role_name = v }

func (s *Alter_db_roleContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_db_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Alter_db_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_db_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_db_roleContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMEMBER, 0)
}

func (s *Alter_db_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_db_roleContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_db_roleContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_db_roleContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_db_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_db_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_db_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_db_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_db_role(s)
	}
}

func (s *Alter_db_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_db_role(s)
	}
}

func (s *Alter_db_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_db_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_db_role() (localctx IAlter_db_roleContext) {
	localctx = NewAlter_db_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, TSqlParserRULE_alter_db_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4083)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4084)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(4085)

		var _x = p.Id()

		localctx.(*Alter_db_roleContext).role_name = _x
	}
	p.SetState(4093)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserADD, TSqlParserDROP:
		p.SetState(4086)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4087)
			p.Match(TSqlParserMEMBER)
		}
		{
			p.SetState(4088)

			var _x = p.Id()

			localctx.(*Alter_db_roleContext).database_principal = _x
		}

	case TSqlParserWITH:
		{
			p.SetState(4089)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4090)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(4091)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4092)

			var _x = p.Id()

			localctx.(*Alter_db_roleContext).new_role_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_db_roleContext is an interface to support dynamic dispatch.
type ICreate_db_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRole_name returns the role_name rule contexts.
	GetRole_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetRole_name sets the role_name rule contexts.
	SetRole_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_db_roleContext differentiates from other interfaces.
	IsCreate_db_roleContext()
}

type Create_db_roleContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	role_name  IIdContext
	owner_name IIdContext
}

func NewEmptyCreate_db_roleContext() *Create_db_roleContext {
	var p = new(Create_db_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_db_role
	return p
}

func (*Create_db_roleContext) IsCreate_db_roleContext() {}

func NewCreate_db_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_db_roleContext {
	var p = new(Create_db_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_db_role

	return p
}

func (s *Create_db_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_db_roleContext) GetRole_name() IIdContext { return s.role_name }

func (s *Create_db_roleContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_db_roleContext) SetRole_name(v IIdContext) { s.role_name = v }

func (s *Create_db_roleContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_db_roleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_db_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Create_db_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_db_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_db_roleContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_db_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_db_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_db_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_db_role(s)
	}
}

func (s *Create_db_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_db_role(s)
	}
}

func (s *Create_db_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_db_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_db_role() (localctx ICreate_db_roleContext) {
	localctx = NewCreate_db_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, TSqlParserRULE_create_db_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4095)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4096)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(4097)

		var _x = p.Id()

		localctx.(*Create_db_roleContext).role_name = _x
	}
	p.SetState(4100)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4098)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4099)

			var _x = p.Id()

			localctx.(*Create_db_roleContext).owner_name = _x
		}

	}

	return localctx
}

// ICreate_routeContext is an interface to support dynamic dispatch.
type ICreate_routeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRoute_service_name returns the route_service_name token.
	GetRoute_service_name() antlr.Token

	// GetBroker_instance_identifier returns the broker_instance_identifier token.
	GetBroker_instance_identifier() antlr.Token

	// SetRoute_service_name sets the route_service_name token.
	SetRoute_service_name(antlr.Token)

	// SetBroker_instance_identifier sets the broker_instance_identifier token.
	SetBroker_instance_identifier(antlr.Token)

	// GetRoute_name returns the route_name rule contexts.
	GetRoute_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetRoute_name sets the route_name rule contexts.
	SetRoute_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_routeContext differentiates from other interfaces.
	IsCreate_routeContext()
}

type Create_routeContext struct {
	*antlr.BaseParserRuleContext
	parser                     antlr.Parser
	route_name                 IIdContext
	owner_name                 IIdContext
	route_service_name         antlr.Token
	broker_instance_identifier antlr.Token
}

func NewEmptyCreate_routeContext() *Create_routeContext {
	var p = new(Create_routeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_route
	return p
}

func (*Create_routeContext) IsCreate_routeContext() {}

func NewCreate_routeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_routeContext {
	var p = new(Create_routeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_route

	return p
}

func (s *Create_routeContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_routeContext) GetRoute_service_name() antlr.Token { return s.route_service_name }

func (s *Create_routeContext) GetBroker_instance_identifier() antlr.Token {
	return s.broker_instance_identifier
}

func (s *Create_routeContext) SetRoute_service_name(v antlr.Token) { s.route_service_name = v }

func (s *Create_routeContext) SetBroker_instance_identifier(v antlr.Token) {
	s.broker_instance_identifier = v
}

func (s *Create_routeContext) GetRoute_name() IIdContext { return s.route_name }

func (s *Create_routeContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_routeContext) SetRoute_name(v IIdContext) { s.route_name = v }

func (s *Create_routeContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_routeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_routeContext) ROUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROUTE, 0)
}

func (s *Create_routeContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_routeContext) ADDRESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserADDRESS, 0)
}

func (s *Create_routeContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_routeContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_routeContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_routeContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_routeContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_routeContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_routeContext) AllQUOTED_URL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserQUOTED_URL)
}

func (s *Create_routeContext) QUOTED_URL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_URL, i)
}

func (s *Create_routeContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_routeContext) SERVICE_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE_NAME, 0)
}

func (s *Create_routeContext) BROKER_INSTANCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserBROKER_INSTANCE, 0)
}

func (s *Create_routeContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIFETIME, 0)
}

func (s *Create_routeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Create_routeContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_routeContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_routeContext) MIRROR_ADDRESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIRROR_ADDRESS, 0)
}

func (s *Create_routeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_routeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_routeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_route(s)
	}
}

func (s *Create_routeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_route(s)
	}
}

func (s *Create_routeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_route(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_route() (localctx ICreate_routeContext) {
	localctx = NewCreate_routeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, TSqlParserRULE_create_route)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4102)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4103)
		p.Match(TSqlParserROUTE)
	}
	{
		p.SetState(4104)

		var _x = p.Id()

		localctx.(*Create_routeContext).route_name = _x
	}
	p.SetState(4107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4105)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4106)

			var _x = p.Id()

			localctx.(*Create_routeContext).owner_name = _x
		}

	}
	{
		p.SetState(4109)
		p.Match(TSqlParserWITH)
	}
	p.SetState(4116)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 438, p.GetParserRuleContext()) == 1 {
		p.SetState(4111)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(4110)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(4113)
			p.Match(TSqlParserSERVICE_NAME)
		}
		{
			p.SetState(4114)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4115)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_routeContext).route_service_name = _m
		}

	}
	p.SetState(4124)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext()) == 1 {
		p.SetState(4119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(4118)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(4121)
			p.Match(TSqlParserBROKER_INSTANCE)
		}
		{
			p.SetState(4122)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4123)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_routeContext).broker_instance_identifier = _m
		}

	}
	p.SetState(4132)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) == 1 {
		p.SetState(4127)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(4126)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(4129)
			p.Match(TSqlParserLIFETIME)
		}
		{
			p.SetState(4130)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4131)
			p.Match(TSqlParserDECIMAL)
		}

	}
	p.SetState(4135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(4134)
			p.Match(TSqlParserCOMMA)
		}

	}
	{
		p.SetState(4137)
		p.Match(TSqlParserADDRESS)
	}
	{
		p.SetState(4138)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(4139)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserQUOTED_URL || _la == TSqlParserSTRING) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(4144)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(4140)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(4141)
			p.Match(TSqlParserMIRROR_ADDRESS)
		}
		{
			p.SetState(4142)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4143)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserQUOTED_URL || _la == TSqlParserSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ICreate_ruleContext is an interface to support dynamic dispatch.
type ICreate_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetRule_name returns the rule_name rule contexts.
	GetRule_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetRule_name sets the rule_name rule contexts.
	SetRule_name(IIdContext)

	// IsCreate_ruleContext differentiates from other interfaces.
	IsCreate_ruleContext()
}

type Create_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
	rule_name   IIdContext
}

func NewEmptyCreate_ruleContext() *Create_ruleContext {
	var p = new(Create_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_rule
	return p
}

func (*Create_ruleContext) IsCreate_ruleContext() {}

func NewCreate_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_ruleContext {
	var p = new(Create_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_rule

	return p
}

func (s *Create_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_ruleContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_ruleContext) GetRule_name() IIdContext { return s.rule_name }

func (s *Create_ruleContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_ruleContext) SetRule_name(v IIdContext) { s.rule_name = v }

func (s *Create_ruleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_ruleContext) RULE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRULE, 0)
}

func (s *Create_ruleContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_ruleContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Create_ruleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_ruleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_ruleContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_rule(s)
	}
}

func (s *Create_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_rule(s)
	}
}

func (s *Create_ruleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_rule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_rule() (localctx ICreate_ruleContext) {
	localctx = NewCreate_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, TSqlParserRULE_create_rule)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4146)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4147)
		p.Match(TSqlParserRULE)
	}
	p.SetState(4151)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 445, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4148)

			var _x = p.Id()

			localctx.(*Create_ruleContext).schema_name = _x
		}
		{
			p.SetState(4149)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(4153)

		var _x = p.Id()

		localctx.(*Create_ruleContext).rule_name = _x
	}
	{
		p.SetState(4154)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(4155)
		p.Search_condition()
	}

	return localctx
}

// IAlter_schema_sqlContext is an interface to support dynamic dispatch.
type IAlter_schema_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// IsAlter_schema_sqlContext differentiates from other interfaces.
	IsAlter_schema_sqlContext()
}

type Alter_schema_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
}

func NewEmptyAlter_schema_sqlContext() *Alter_schema_sqlContext {
	var p = new(Alter_schema_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_schema_sql
	return p
}

func (*Alter_schema_sqlContext) IsAlter_schema_sqlContext() {}

func NewAlter_schema_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_schema_sqlContext {
	var p = new(Alter_schema_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_schema_sql

	return p
}

func (s *Alter_schema_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_schema_sqlContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_schema_sqlContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_schema_sqlContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_schema_sqlContext) AllSCHEMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSCHEMA)
}

func (s *Alter_schema_sqlContext) SCHEMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, i)
}

func (s *Alter_schema_sqlContext) TRANSFER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSFER, 0)
}

func (s *Alter_schema_sqlContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_schema_sqlContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_schema_sqlContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOLON)
}

func (s *Alter_schema_sqlContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, i)
}

func (s *Alter_schema_sqlContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Alter_schema_sqlContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Alter_schema_sqlContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Alter_schema_sqlContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Alter_schema_sqlContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Alter_schema_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_schema_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_schema_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_schema_sql(s)
	}
}

func (s *Alter_schema_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_schema_sql(s)
	}
}

func (s *Alter_schema_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_schema_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_schema_sql() (localctx IAlter_schema_sqlContext) {
	localctx = NewAlter_schema_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, TSqlParserRULE_alter_schema_sql)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4157)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4158)
		p.Match(TSqlParserSCHEMA)
	}
	{
		p.SetState(4159)

		var _x = p.Id()

		localctx.(*Alter_schema_sqlContext).schema_name = _x
	}
	{
		p.SetState(4160)
		p.Match(TSqlParserTRANSFER)
	}
	p.SetState(4170)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 447, p.GetParserRuleContext()) == 1 {
		p.SetState(4166)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserOBJECT:
			{
				p.SetState(4161)
				p.Match(TSqlParserOBJECT)
			}

		case TSqlParserTYPE:
			{
				p.SetState(4162)
				p.Match(TSqlParserTYPE)
			}

		case TSqlParserXML:
			{
				p.SetState(4163)
				p.Match(TSqlParserXML)
			}
			{
				p.SetState(4164)
				p.Match(TSqlParserSCHEMA)
			}
			{
				p.SetState(4165)
				p.Match(TSqlParserCOLLECTION)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4168)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(4169)
			p.Match(TSqlParserCOLON)
		}

	}
	{
		p.SetState(4172)
		p.Id()
	}
	p.SetState(4175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDOT {
		{
			p.SetState(4173)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(4174)
			p.Id()
		}

	}

	return localctx
}

// ICreate_schemaContext is an interface to support dynamic dispatch.
type ICreate_schemaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// IsCreate_schemaContext differentiates from other interfaces.
	IsCreate_schemaContext()
}

type Create_schemaContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
	owner_name  IIdContext
	object_name IIdContext
}

func NewEmptyCreate_schemaContext() *Create_schemaContext {
	var p = new(Create_schemaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_schema
	return p
}

func (*Create_schemaContext) IsCreate_schemaContext() {}

func NewCreate_schemaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schemaContext {
	var p = new(Create_schemaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_schema

	return p
}

func (s *Create_schemaContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schemaContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_schemaContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_schemaContext) GetObject_name() IIdContext { return s.object_name }

func (s *Create_schemaContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_schemaContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_schemaContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Create_schemaContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_schemaContext) AllSCHEMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSCHEMA)
}

func (s *Create_schemaContext) SCHEMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, i)
}

func (s *Create_schemaContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_schemaContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_schemaContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_schemaContext) AllCreate_table() []ICreate_tableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem())
	var tst = make([]ICreate_tableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_tableContext)
		}
	}

	return tst
}

func (s *Create_schemaContext) Create_table(i int) ICreate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Create_schemaContext) AllCreate_view() []ICreate_viewContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem())
	var tst = make([]ICreate_viewContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_viewContext)
		}
	}

	return tst
}

func (s *Create_schemaContext) Create_view(i int) ICreate_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Create_schemaContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_schemaContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_schemaContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Create_schemaContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Create_schemaContext) AllREVOKE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREVOKE)
}

func (s *Create_schemaContext) REVOKE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREVOKE, i)
}

func (s *Create_schemaContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFROM)
}

func (s *Create_schemaContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, i)
}

func (s *Create_schemaContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGRANT)
}

func (s *Create_schemaContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGRANT, i)
}

func (s *Create_schemaContext) AllDENY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDENY)
}

func (s *Create_schemaContext) DENY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDENY, i)
}

func (s *Create_schemaContext) AllSELECT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSELECT)
}

func (s *Create_schemaContext) SELECT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSELECT, i)
}

func (s *Create_schemaContext) AllINSERT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserINSERT)
}

func (s *Create_schemaContext) INSERT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, i)
}

func (s *Create_schemaContext) AllDELETE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDELETE)
}

func (s *Create_schemaContext) DELETE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, i)
}

func (s *Create_schemaContext) AllUPDATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUPDATE)
}

func (s *Create_schemaContext) UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, i)
}

func (s *Create_schemaContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOLON)
}

func (s *Create_schemaContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, i)
}

func (s *Create_schemaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schemaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_schemaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_schema(s)
	}
}

func (s *Create_schemaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_schema(s)
	}
}

func (s *Create_schemaContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_schema(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_schema() (localctx ICreate_schemaContext) {
	localctx = NewCreate_schemaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, TSqlParserRULE_create_schema)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4177)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4178)
		p.Match(TSqlParserSCHEMA)
	}
	p.SetState(4186)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 449, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4179)

			var _x = p.Id()

			localctx.(*Create_schemaContext).schema_name = _x
		}

	case 2:
		{
			p.SetState(4180)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4181)

			var _x = p.Id()

			localctx.(*Create_schemaContext).owner_name = _x
		}

	case 3:
		{
			p.SetState(4182)

			var _x = p.Id()

			localctx.(*Create_schemaContext).schema_name = _x
		}
		{
			p.SetState(4183)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4184)

			var _x = p.Id()

			localctx.(*Create_schemaContext).owner_name = _x
		}

	}
	p.SetState(4216)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 453, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(4214)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 452, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(4188)
					p.Create_table()
				}

			case 2:
				{
					p.SetState(4189)
					p.Create_view()
				}

			case 3:
				p.SetState(4190)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDENY || _la == TSqlParserGRANT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				p.SetState(4191)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDELETE || _la == TSqlParserINSERT || _la == TSqlParserSELECT || _la == TSqlParserUPDATE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(4192)
					p.Match(TSqlParserON)
				}
				p.SetState(4196)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserSCHEMA {
					{
						p.SetState(4193)
						p.Match(TSqlParserSCHEMA)
					}
					{
						p.SetState(4194)
						p.Match(TSqlParserCOLON)
					}
					{
						p.SetState(4195)
						p.Match(TSqlParserCOLON)
					}

				}
				{
					p.SetState(4198)

					var _x = p.Id()

					localctx.(*Create_schemaContext).object_name = _x
				}
				{
					p.SetState(4199)
					p.Match(TSqlParserTO)
				}
				{
					p.SetState(4200)

					var _x = p.Id()

					localctx.(*Create_schemaContext).owner_name = _x
				}

			case 4:
				{
					p.SetState(4202)
					p.Match(TSqlParserREVOKE)
				}
				p.SetState(4203)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDELETE || _la == TSqlParserINSERT || _la == TSqlParserSELECT || _la == TSqlParserUPDATE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(4204)
					p.Match(TSqlParserON)
				}
				p.SetState(4208)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserSCHEMA {
					{
						p.SetState(4205)
						p.Match(TSqlParserSCHEMA)
					}
					{
						p.SetState(4206)
						p.Match(TSqlParserCOLON)
					}
					{
						p.SetState(4207)
						p.Match(TSqlParserCOLON)
					}

				}
				{
					p.SetState(4210)

					var _x = p.Id()

					localctx.(*Create_schemaContext).object_name = _x
				}
				{
					p.SetState(4211)
					p.Match(TSqlParserFROM)
				}
				{
					p.SetState(4212)

					var _x = p.Id()

					localctx.(*Create_schemaContext).owner_name = _x
				}

			}

		}
		p.SetState(4218)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 453, p.GetParserRuleContext())
	}

	return localctx
}

// ICreate_schema_azure_sql_dw_and_pdwContext is an interface to support dynamic dispatch.
type ICreate_schema_azure_sql_dw_and_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_schema_azure_sql_dw_and_pdwContext differentiates from other interfaces.
	IsCreate_schema_azure_sql_dw_and_pdwContext()
}

type Create_schema_azure_sql_dw_and_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
	owner_name  IIdContext
}

func NewEmptyCreate_schema_azure_sql_dw_and_pdwContext() *Create_schema_azure_sql_dw_and_pdwContext {
	var p = new(Create_schema_azure_sql_dw_and_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_schema_azure_sql_dw_and_pdw
	return p
}

func (*Create_schema_azure_sql_dw_and_pdwContext) IsCreate_schema_azure_sql_dw_and_pdwContext() {}

func NewCreate_schema_azure_sql_dw_and_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_schema_azure_sql_dw_and_pdwContext {
	var p = new(Create_schema_azure_sql_dw_and_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_schema_azure_sql_dw_and_pdw

	return p
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_schema_azure_sql_dw_and_pdwContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_schema_azure_sql_dw_and_pdwContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_schema_azure_sql_dw_and_pdwContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_schema_azure_sql_dw_and_pdwContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_schema_azure_sql_dw_and_pdwContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_schema_azure_sql_dw_and_pdw(s)
	}
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_schema_azure_sql_dw_and_pdw(s)
	}
}

func (s *Create_schema_azure_sql_dw_and_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_schema_azure_sql_dw_and_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_schema_azure_sql_dw_and_pdw() (localctx ICreate_schema_azure_sql_dw_and_pdwContext) {
	localctx = NewCreate_schema_azure_sql_dw_and_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, TSqlParserRULE_create_schema_azure_sql_dw_and_pdw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4219)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4220)
		p.Match(TSqlParserSCHEMA)
	}
	{
		p.SetState(4221)

		var _x = p.Id()

		localctx.(*Create_schema_azure_sql_dw_and_pdwContext).schema_name = _x
	}
	p.SetState(4224)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4222)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4223)

			var _x = p.Id()

			localctx.(*Create_schema_azure_sql_dw_and_pdwContext).owner_name = _x
		}

	}

	return localctx
}

// IAlter_schema_azure_sql_dw_and_pdwContext is an interface to support dynamic dispatch.
type IAlter_schema_azure_sql_dw_and_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// IsAlter_schema_azure_sql_dw_and_pdwContext differentiates from other interfaces.
	IsAlter_schema_azure_sql_dw_and_pdwContext()
}

type Alter_schema_azure_sql_dw_and_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema_name IIdContext
}

func NewEmptyAlter_schema_azure_sql_dw_and_pdwContext() *Alter_schema_azure_sql_dw_and_pdwContext {
	var p = new(Alter_schema_azure_sql_dw_and_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_schema_azure_sql_dw_and_pdw
	return p
}

func (*Alter_schema_azure_sql_dw_and_pdwContext) IsAlter_schema_azure_sql_dw_and_pdwContext() {}

func NewAlter_schema_azure_sql_dw_and_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_schema_azure_sql_dw_and_pdwContext {
	var p = new(Alter_schema_azure_sql_dw_and_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_schema_azure_sql_dw_and_pdw

	return p
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_schema_azure_sql_dw_and_pdwContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_schema_azure_sql_dw_and_pdwContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_schema_azure_sql_dw_and_pdwContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) TRANSFER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSFER, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) OBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOBJECT, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) AllCOLON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOLON)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) COLON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, i)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_schema_azure_sql_dw_and_pdw(s)
	}
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_schema_azure_sql_dw_and_pdw(s)
	}
}

func (s *Alter_schema_azure_sql_dw_and_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_schema_azure_sql_dw_and_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_schema_azure_sql_dw_and_pdw() (localctx IAlter_schema_azure_sql_dw_and_pdwContext) {
	localctx = NewAlter_schema_azure_sql_dw_and_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, TSqlParserRULE_alter_schema_azure_sql_dw_and_pdw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4226)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4227)
		p.Match(TSqlParserSCHEMA)
	}
	{
		p.SetState(4228)

		var _x = p.Id()

		localctx.(*Alter_schema_azure_sql_dw_and_pdwContext).schema_name = _x
	}
	{
		p.SetState(4229)
		p.Match(TSqlParserTRANSFER)
	}
	p.SetState(4233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOBJECT {
		{
			p.SetState(4230)
			p.Match(TSqlParserOBJECT)
		}
		{
			p.SetState(4231)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(4232)
			p.Match(TSqlParserCOLON)
		}

	}
	{
		p.SetState(4235)
		p.Id()
	}
	p.SetState(4238)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDOT {
		{
			p.SetState(4236)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(4237)
			p.Match(TSqlParserID)
		}

	}

	return localctx
}

// ICreate_search_property_listContext is an interface to support dynamic dispatch.
type ICreate_search_property_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNew_list_name returns the new_list_name rule contexts.
	GetNew_list_name() IIdContext

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSource_list_name returns the source_list_name rule contexts.
	GetSource_list_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// SetNew_list_name sets the new_list_name rule contexts.
	SetNew_list_name(IIdContext)

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSource_list_name sets the source_list_name rule contexts.
	SetSource_list_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// IsCreate_search_property_listContext differentiates from other interfaces.
	IsCreate_search_property_listContext()
}

type Create_search_property_listContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	new_list_name    IIdContext
	database_name    IIdContext
	source_list_name IIdContext
	owner_name       IIdContext
}

func NewEmptyCreate_search_property_listContext() *Create_search_property_listContext {
	var p = new(Create_search_property_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_search_property_list
	return p
}

func (*Create_search_property_listContext) IsCreate_search_property_listContext() {}

func NewCreate_search_property_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_search_property_listContext {
	var p = new(Create_search_property_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_search_property_list

	return p
}

func (s *Create_search_property_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_search_property_listContext) GetNew_list_name() IIdContext { return s.new_list_name }

func (s *Create_search_property_listContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Create_search_property_listContext) GetSource_list_name() IIdContext {
	return s.source_list_name
}

func (s *Create_search_property_listContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_search_property_listContext) SetNew_list_name(v IIdContext) { s.new_list_name = v }

func (s *Create_search_property_listContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Create_search_property_listContext) SetSource_list_name(v IIdContext) { s.source_list_name = v }

func (s *Create_search_property_listContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_search_property_listContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_search_property_listContext) SEARCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEARCH, 0)
}

func (s *Create_search_property_listContext) PROPERTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROPERTY, 0)
}

func (s *Create_search_property_listContext) LIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIST, 0)
}

func (s *Create_search_property_listContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_search_property_listContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_search_property_listContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_search_property_listContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_search_property_listContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_search_property_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_search_property_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_search_property_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_search_property_list(s)
	}
}

func (s *Create_search_property_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_search_property_list(s)
	}
}

func (s *Create_search_property_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_search_property_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_search_property_list() (localctx ICreate_search_property_listContext) {
	localctx = NewCreate_search_property_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, TSqlParserRULE_create_search_property_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4240)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4241)
		p.Match(TSqlParserSEARCH)
	}
	{
		p.SetState(4242)
		p.Match(TSqlParserPROPERTY)
	}
	{
		p.SetState(4243)
		p.Match(TSqlParserLIST)
	}
	{
		p.SetState(4244)

		var _x = p.Id()

		localctx.(*Create_search_property_listContext).new_list_name = _x
	}
	p.SetState(4252)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(4245)
			p.Match(TSqlParserFROM)
		}
		p.SetState(4249)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 457, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4246)

				var _x = p.Id()

				localctx.(*Create_search_property_listContext).database_name = _x
			}
			{
				p.SetState(4247)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(4251)

			var _x = p.Id()

			localctx.(*Create_search_property_listContext).source_list_name = _x
		}

	}
	p.SetState(4256)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4254)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4255)

			var _x = p.Id()

			localctx.(*Create_search_property_listContext).owner_name = _x
		}

	}

	return localctx
}

// ICreate_security_policyContext is an interface to support dynamic dispatch.
type ICreate_security_policyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetSecurity_policy_name returns the security_policy_name rule contexts.
	GetSecurity_policy_name() IIdContext

	// GetTvf_schema_name returns the tvf_schema_name rule contexts.
	GetTvf_schema_name() IIdContext

	// GetSecurity_predicate_function_name returns the security_predicate_function_name rule contexts.
	GetSecurity_predicate_function_name() IIdContext

	// GetColumn_name_or_arguments returns the column_name_or_arguments rule contexts.
	GetColumn_name_or_arguments() IIdContext

	// GetTable_schema_name returns the table_schema_name rule contexts.
	GetTable_schema_name() IIdContext

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetSecurity_policy_name sets the security_policy_name rule contexts.
	SetSecurity_policy_name(IIdContext)

	// SetTvf_schema_name sets the tvf_schema_name rule contexts.
	SetTvf_schema_name(IIdContext)

	// SetSecurity_predicate_function_name sets the security_predicate_function_name rule contexts.
	SetSecurity_predicate_function_name(IIdContext)

	// SetColumn_name_or_arguments sets the column_name_or_arguments rule contexts.
	SetColumn_name_or_arguments(IIdContext)

	// SetTable_schema_name sets the table_schema_name rule contexts.
	SetTable_schema_name(IIdContext)

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsCreate_security_policyContext differentiates from other interfaces.
	IsCreate_security_policyContext()
}

type Create_security_policyContext struct {
	*antlr.BaseParserRuleContext
	parser                           antlr.Parser
	schema_name                      IIdContext
	security_policy_name             IIdContext
	tvf_schema_name                  IIdContext
	security_predicate_function_name IIdContext
	column_name_or_arguments         IIdContext
	table_schema_name                IIdContext
	name                             IIdContext
}

func NewEmptyCreate_security_policyContext() *Create_security_policyContext {
	var p = new(Create_security_policyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_security_policy
	return p
}

func (*Create_security_policyContext) IsCreate_security_policyContext() {}

func NewCreate_security_policyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_security_policyContext {
	var p = new(Create_security_policyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_security_policy

	return p
}

func (s *Create_security_policyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_security_policyContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_security_policyContext) GetSecurity_policy_name() IIdContext {
	return s.security_policy_name
}

func (s *Create_security_policyContext) GetTvf_schema_name() IIdContext { return s.tvf_schema_name }

func (s *Create_security_policyContext) GetSecurity_predicate_function_name() IIdContext {
	return s.security_predicate_function_name
}

func (s *Create_security_policyContext) GetColumn_name_or_arguments() IIdContext {
	return s.column_name_or_arguments
}

func (s *Create_security_policyContext) GetTable_schema_name() IIdContext { return s.table_schema_name }

func (s *Create_security_policyContext) GetName() IIdContext { return s.name }

func (s *Create_security_policyContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_security_policyContext) SetSecurity_policy_name(v IIdContext) {
	s.security_policy_name = v
}

func (s *Create_security_policyContext) SetTvf_schema_name(v IIdContext) { s.tvf_schema_name = v }

func (s *Create_security_policyContext) SetSecurity_predicate_function_name(v IIdContext) {
	s.security_predicate_function_name = v
}

func (s *Create_security_policyContext) SetColumn_name_or_arguments(v IIdContext) {
	s.column_name_or_arguments = v
}

func (s *Create_security_policyContext) SetTable_schema_name(v IIdContext) { s.table_schema_name = v }

func (s *Create_security_policyContext) SetName(v IIdContext) { s.name = v }

func (s *Create_security_policyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_security_policyContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECURITY, 0)
}

func (s *Create_security_policyContext) POLICY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOLICY, 0)
}

func (s *Create_security_policyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_security_policyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_security_policyContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Create_security_policyContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Create_security_policyContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserADD)
}

func (s *Create_security_policyContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, i)
}

func (s *Create_security_policyContext) AllPREDICATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPREDICATE)
}

func (s *Create_security_policyContext) PREDICATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPREDICATE, i)
}

func (s *Create_security_policyContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_security_policyContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_security_policyContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_security_policyContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_security_policyContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_security_policyContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_security_policyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_security_policyContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Create_security_policyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_security_policyContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Create_security_policyContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_security_policyContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Create_security_policyContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Create_security_policyContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Create_security_policyContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_security_policyContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_security_policyContext) AllAFTER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAFTER)
}

func (s *Create_security_policyContext) AFTER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAFTER, i)
}

func (s *Create_security_policyContext) AllBEFORE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBEFORE)
}

func (s *Create_security_policyContext) BEFORE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBEFORE, i)
}

func (s *Create_security_policyContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMABINDING, 0)
}

func (s *Create_security_policyContext) AllFILTER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILTER)
}

func (s *Create_security_policyContext) FILTER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILTER, i)
}

func (s *Create_security_policyContext) AllBLOCK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBLOCK)
}

func (s *Create_security_policyContext) BLOCK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOCK, i)
}

func (s *Create_security_policyContext) AllINSERT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserINSERT)
}

func (s *Create_security_policyContext) INSERT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, i)
}

func (s *Create_security_policyContext) AllUPDATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUPDATE)
}

func (s *Create_security_policyContext) UPDATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, i)
}

func (s *Create_security_policyContext) AllDELETE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDELETE)
}

func (s *Create_security_policyContext) DELETE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, i)
}

func (s *Create_security_policyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_security_policyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_security_policyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_security_policy(s)
	}
}

func (s *Create_security_policyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_security_policy(s)
	}
}

func (s *Create_security_policyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_security_policy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_security_policy() (localctx ICreate_security_policyContext) {
	localctx = NewCreate_security_policyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, TSqlParserRULE_create_security_policy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4258)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4259)
		p.Match(TSqlParserSECURITY)
	}
	{
		p.SetState(4260)
		p.Match(TSqlParserPOLICY)
	}
	p.SetState(4264)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 460, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4261)

			var _x = p.Id()

			localctx.(*Create_security_policyContext).schema_name = _x
		}
		{
			p.SetState(4262)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(4266)

		var _x = p.Id()

		localctx.(*Create_security_policyContext).security_policy_name = _x
	}
	p.SetState(4307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserADD || _la == TSqlParserCOMMA {
		p.SetState(4268)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(4267)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(4270)
			p.Match(TSqlParserADD)
		}
		p.SetState(4272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCK || _la == TSqlParserFILTER {
			p.SetState(4271)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserBLOCK || _la == TSqlParserFILTER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4274)
			p.Match(TSqlParserPREDICATE)
		}
		{
			p.SetState(4275)

			var _x = p.Id()

			localctx.(*Create_security_policyContext).tvf_schema_name = _x
		}
		{
			p.SetState(4276)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(4277)

			var _x = p.Id()

			localctx.(*Create_security_policyContext).security_predicate_function_name = _x
		}
		{
			p.SetState(4278)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(4283)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(4280)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4279)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(4282)

				var _x = p.Id()

				localctx.(*Create_security_policyContext).column_name_or_arguments = _x
			}

			p.SetState(4285)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4287)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(4288)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(4289)

			var _x = p.Id()

			localctx.(*Create_security_policyContext).table_schema_name = _x
		}
		{
			p.SetState(4290)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(4291)

			var _x = p.Id()

			localctx.(*Create_security_policyContext).name = _x
		}
		p.SetState(4304)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(4302)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 467, p.GetParserRuleContext()) {
				case 1:
					p.SetState(4293)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4292)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4295)
						p.Match(TSqlParserAFTER)
					}
					p.SetState(4296)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserINSERT || _la == TSqlParserUPDATE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 2:
					p.SetState(4298)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4297)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4300)
						p.Match(TSqlParserBEFORE)
					}
					p.SetState(4301)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserDELETE || _la == TSqlParserUPDATE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}

			}
			p.SetState(4306)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext())
		}

		p.SetState(4309)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4321)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 471, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4311)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4312)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4313)
			p.Match(TSqlParserSTATE)
		}
		{
			p.SetState(4314)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4315)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(4318)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserSCHEMABINDING {
			{
				p.SetState(4316)
				p.Match(TSqlParserSCHEMABINDING)
			}
			p.SetState(4317)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4320)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(4326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserNOT {
		{
			p.SetState(4323)
			p.Match(TSqlParserNOT)
		}
		{
			p.SetState(4324)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(4325)
			p.Match(TSqlParserREPLICATION)
		}

	}

	return localctx
}

// IAlter_sequenceContext is an interface to support dynamic dispatch.
type IAlter_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSequnce_increment returns the sequnce_increment token.
	GetSequnce_increment() antlr.Token

	// SetSequnce_increment sets the sequnce_increment token.
	SetSequnce_increment(antlr.Token)

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetSequence_name returns the sequence_name rule contexts.
	GetSequence_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetSequence_name sets the sequence_name rule contexts.
	SetSequence_name(IIdContext)

	// IsAlter_sequenceContext differentiates from other interfaces.
	IsAlter_sequenceContext()
}

type Alter_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	schema_name       IIdContext
	sequence_name     IIdContext
	sequnce_increment antlr.Token
}

func NewEmptyAlter_sequenceContext() *Alter_sequenceContext {
	var p = new(Alter_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_sequence
	return p
}

func (*Alter_sequenceContext) IsAlter_sequenceContext() {}

func NewAlter_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_sequenceContext {
	var p = new(Alter_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_sequence

	return p
}

func (s *Alter_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_sequenceContext) GetSequnce_increment() antlr.Token { return s.sequnce_increment }

func (s *Alter_sequenceContext) SetSequnce_increment(v antlr.Token) { s.sequnce_increment = v }

func (s *Alter_sequenceContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_sequenceContext) GetSequence_name() IIdContext { return s.sequence_name }

func (s *Alter_sequenceContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_sequenceContext) SetSequence_name(v IIdContext) { s.sequence_name = v }

func (s *Alter_sequenceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEQUENCE, 0)
}

func (s *Alter_sequenceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_sequenceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_sequenceContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Alter_sequenceContext) RESTART() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESTART, 0)
}

func (s *Alter_sequenceContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINCREMENT, 0)
}

func (s *Alter_sequenceContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Alter_sequenceContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMINVALUE, 0)
}

func (s *Alter_sequenceContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_sequenceContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_sequenceContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO)
}

func (s *Alter_sequenceContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, i)
}

func (s *Alter_sequenceContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXVALUE, 0)
}

func (s *Alter_sequenceContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCYCLE, 0)
}

func (s *Alter_sequenceContext) CACHE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCACHE, 0)
}

func (s *Alter_sequenceContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_sequence(s)
	}
}

func (s *Alter_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_sequence(s)
	}
}

func (s *Alter_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_sequence() (localctx IAlter_sequenceContext) {
	localctx = NewAlter_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, TSqlParserRULE_alter_sequence)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4328)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4329)
		p.Match(TSqlParserSEQUENCE)
	}
	p.SetState(4333)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 473, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4330)

			var _x = p.Id()

			localctx.(*Alter_sequenceContext).schema_name = _x
		}
		{
			p.SetState(4331)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(4335)

		var _x = p.Id()

		localctx.(*Alter_sequenceContext).sequence_name = _x
	}
	p.SetState(4341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserRESTART {
		{
			p.SetState(4336)
			p.Match(TSqlParserRESTART)
		}
		p.SetState(4339)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 474, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4337)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(4338)
				p.Match(TSqlParserDECIMAL)
			}

		}

	}
	p.SetState(4346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINCREMENT {
		{
			p.SetState(4343)
			p.Match(TSqlParserINCREMENT)
		}
		{
			p.SetState(4344)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(4345)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Alter_sequenceContext).sequnce_increment = _m
		}

	}
	p.SetState(4352)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4348)
			p.Match(TSqlParserMINVALUE)
		}
		{
			p.SetState(4349)
			p.Match(TSqlParserDECIMAL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 477, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4350)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4351)
			p.Match(TSqlParserMINVALUE)
		}

	}
	p.SetState(4358)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4354)
			p.Match(TSqlParserMAXVALUE)
		}
		{
			p.SetState(4355)
			p.Match(TSqlParserDECIMAL)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 478, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4356)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4357)
			p.Match(TSqlParserMAXVALUE)
		}

	}
	p.SetState(4363)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4360)
			p.Match(TSqlParserCYCLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4361)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4362)
			p.Match(TSqlParserCYCLE)
		}

	}
	p.SetState(4369)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCACHE:
		{
			p.SetState(4365)
			p.Match(TSqlParserCACHE)
		}
		{
			p.SetState(4366)
			p.Match(TSqlParserDECIMAL)
		}

	case TSqlParserNO:
		{
			p.SetState(4367)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4368)
			p.Match(TSqlParserCACHE)
		}

	case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

	default:
	}

	return localctx
}

// ICreate_sequenceContext is an interface to support dynamic dispatch.
type ICreate_sequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetSequence_name returns the sequence_name rule contexts.
	GetSequence_name() IIdContext

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetSequence_name sets the sequence_name rule contexts.
	SetSequence_name(IIdContext)

	// IsCreate_sequenceContext differentiates from other interfaces.
	IsCreate_sequenceContext()
}

type Create_sequenceContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	schema_name   IIdContext
	sequence_name IIdContext
}

func NewEmptyCreate_sequenceContext() *Create_sequenceContext {
	var p = new(Create_sequenceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_sequence
	return p
}

func (*Create_sequenceContext) IsCreate_sequenceContext() {}

func NewCreate_sequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_sequenceContext {
	var p = new(Create_sequenceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_sequence

	return p
}

func (s *Create_sequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_sequenceContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_sequenceContext) GetSequence_name() IIdContext { return s.sequence_name }

func (s *Create_sequenceContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_sequenceContext) SetSequence_name(v IIdContext) { s.sequence_name = v }

func (s *Create_sequenceContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_sequenceContext) SEQUENCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEQUENCE, 0)
}

func (s *Create_sequenceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_sequenceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_sequenceContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_sequenceContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_sequenceContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_sequenceContext) START() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTART, 0)
}

func (s *Create_sequenceContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_sequenceContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_sequenceContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_sequenceContext) INCREMENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINCREMENT, 0)
}

func (s *Create_sequenceContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Create_sequenceContext) MINVALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMINVALUE, 0)
}

func (s *Create_sequenceContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO)
}

func (s *Create_sequenceContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, i)
}

func (s *Create_sequenceContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXVALUE, 0)
}

func (s *Create_sequenceContext) CYCLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCYCLE, 0)
}

func (s *Create_sequenceContext) CACHE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCACHE, 0)
}

func (s *Create_sequenceContext) MINUS() antlr.TerminalNode {
	return s.GetToken(TSqlParserMINUS, 0)
}

func (s *Create_sequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_sequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_sequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_sequence(s)
	}
}

func (s *Create_sequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_sequence(s)
	}
}

func (s *Create_sequenceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_sequence(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_sequence() (localctx ICreate_sequenceContext) {
	localctx = NewCreate_sequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, TSqlParserRULE_create_sequence)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4371)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4372)
		p.Match(TSqlParserSEQUENCE)
	}
	p.SetState(4376)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 481, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4373)

			var _x = p.Id()

			localctx.(*Create_sequenceContext).schema_name = _x
		}
		{
			p.SetState(4374)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(4378)

		var _x = p.Id()

		localctx.(*Create_sequenceContext).sequence_name = _x
	}
	p.SetState(4381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(4379)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(4380)
			p.Data_type()
		}

	}
	p.SetState(4386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSTART {
		{
			p.SetState(4383)
			p.Match(TSqlParserSTART)
		}
		{
			p.SetState(4384)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4385)
			p.Match(TSqlParserDECIMAL)
		}

	}
	p.SetState(4394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINCREMENT {
		{
			p.SetState(4388)
			p.Match(TSqlParserINCREMENT)
		}
		{
			p.SetState(4389)
			p.Match(TSqlParserBY)
		}
		p.SetState(4391)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserMINUS {
			{
				p.SetState(4390)
				p.Match(TSqlParserMINUS)
			}

		}
		{
			p.SetState(4393)
			p.Match(TSqlParserDECIMAL)
		}

	}
	p.SetState(4402)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 487, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4396)
			p.Match(TSqlParserMINVALUE)
		}
		p.SetState(4398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDECIMAL {
			{
				p.SetState(4397)
				p.Match(TSqlParserDECIMAL)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 487, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4400)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4401)
			p.Match(TSqlParserMINVALUE)
		}

	}
	p.SetState(4410)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4404)
			p.Match(TSqlParserMAXVALUE)
		}
		p.SetState(4406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDECIMAL {
			{
				p.SetState(4405)
				p.Match(TSqlParserDECIMAL)
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 489, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4408)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4409)
			p.Match(TSqlParserMAXVALUE)
		}

	}
	p.SetState(4415)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 490, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4412)
			p.Match(TSqlParserCYCLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 490, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4413)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4414)
			p.Match(TSqlParserCYCLE)
		}

	}
	p.SetState(4423)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCACHE:
		{
			p.SetState(4417)
			p.Match(TSqlParserCACHE)
		}
		p.SetState(4419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDECIMAL {
			{
				p.SetState(4418)
				p.Match(TSqlParserDECIMAL)
			}

		}

	case TSqlParserNO:
		{
			p.SetState(4421)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(4422)
			p.Match(TSqlParserCACHE)
		}

	case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

	default:
	}

	return localctx
}

// IAlter_server_auditContext is an interface to support dynamic dispatch.
type IAlter_server_auditContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFilepath returns the filepath token.
	GetFilepath() antlr.Token

	// GetMax_rollover_files returns the max_rollover_files token.
	GetMax_rollover_files() antlr.Token

	// GetMax_files returns the max_files token.
	GetMax_files() antlr.Token

	// GetQueue_delay returns the queue_delay token.
	GetQueue_delay() antlr.Token

	// SetFilepath sets the filepath token.
	SetFilepath(antlr.Token)

	// SetMax_rollover_files sets the max_rollover_files token.
	SetMax_rollover_files(antlr.Token)

	// SetMax_files sets the max_files token.
	SetMax_files(antlr.Token)

	// SetQueue_delay sets the queue_delay token.
	SetQueue_delay(antlr.Token)

	// GetAudit_name returns the audit_name rule contexts.
	GetAudit_name() IIdContext

	// GetEvent_field_name returns the event_field_name rule contexts.
	GetEvent_field_name() IIdContext

	// GetNew_audit_name returns the new_audit_name rule contexts.
	GetNew_audit_name() IIdContext

	// SetAudit_name sets the audit_name rule contexts.
	SetAudit_name(IIdContext)

	// SetEvent_field_name sets the event_field_name rule contexts.
	SetEvent_field_name(IIdContext)

	// SetNew_audit_name sets the new_audit_name rule contexts.
	SetNew_audit_name(IIdContext)

	// IsAlter_server_auditContext differentiates from other interfaces.
	IsAlter_server_auditContext()
}

type Alter_server_auditContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	audit_name         IIdContext
	filepath           antlr.Token
	max_rollover_files antlr.Token
	max_files          antlr.Token
	queue_delay        antlr.Token
	event_field_name   IIdContext
	new_audit_name     IIdContext
}

func NewEmptyAlter_server_auditContext() *Alter_server_auditContext {
	var p = new(Alter_server_auditContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_server_audit
	return p
}

func (*Alter_server_auditContext) IsAlter_server_auditContext() {}

func NewAlter_server_auditContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_auditContext {
	var p = new(Alter_server_auditContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_server_audit

	return p
}

func (s *Alter_server_auditContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_auditContext) GetFilepath() antlr.Token { return s.filepath }

func (s *Alter_server_auditContext) GetMax_rollover_files() antlr.Token { return s.max_rollover_files }

func (s *Alter_server_auditContext) GetMax_files() antlr.Token { return s.max_files }

func (s *Alter_server_auditContext) GetQueue_delay() antlr.Token { return s.queue_delay }

func (s *Alter_server_auditContext) SetFilepath(v antlr.Token) { s.filepath = v }

func (s *Alter_server_auditContext) SetMax_rollover_files(v antlr.Token) { s.max_rollover_files = v }

func (s *Alter_server_auditContext) SetMax_files(v antlr.Token) { s.max_files = v }

func (s *Alter_server_auditContext) SetQueue_delay(v antlr.Token) { s.queue_delay = v }

func (s *Alter_server_auditContext) GetAudit_name() IIdContext { return s.audit_name }

func (s *Alter_server_auditContext) GetEvent_field_name() IIdContext { return s.event_field_name }

func (s *Alter_server_auditContext) GetNew_audit_name() IIdContext { return s.new_audit_name }

func (s *Alter_server_auditContext) SetAudit_name(v IIdContext) { s.audit_name = v }

func (s *Alter_server_auditContext) SetEvent_field_name(v IIdContext) { s.event_field_name = v }

func (s *Alter_server_auditContext) SetNew_audit_name(v IIdContext) { s.new_audit_name = v }

func (s *Alter_server_auditContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_server_auditContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Alter_server_auditContext) AUDIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, 0)
}

func (s *Alter_server_auditContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_server_auditContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_server_auditContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Alter_server_auditContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Alter_server_auditContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Alter_server_auditContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_server_auditContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_server_auditContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_server_auditContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Alter_server_auditContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_server_auditContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Alter_server_auditContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Alter_server_auditContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_server_auditContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_server_auditContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Alter_server_auditContext) APPLICATION_LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLICATION_LOG, 0)
}

func (s *Alter_server_auditContext) SECURITY_LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECURITY_LOG, 0)
}

func (s *Alter_server_auditContext) AllQUEUE_DELAY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserQUEUE_DELAY)
}

func (s *Alter_server_auditContext) QUEUE_DELAY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE_DELAY, i)
}

func (s *Alter_server_auditContext) AllON_FAILURE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON_FAILURE)
}

func (s *Alter_server_auditContext) ON_FAILURE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON_FAILURE, i)
}

func (s *Alter_server_auditContext) AllSTATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTATE)
}

func (s *Alter_server_auditContext) STATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, i)
}

func (s *Alter_server_auditContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_server_auditContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_server_auditContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_server_auditContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_server_auditContext) AND() antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, 0)
}

func (s *Alter_server_auditContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Alter_server_auditContext) AllCONTINUE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCONTINUE)
}

func (s *Alter_server_auditContext) CONTINUE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE, i)
}

func (s *Alter_server_auditContext) AllSHUTDOWN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSHUTDOWN)
}

func (s *Alter_server_auditContext) SHUTDOWN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSHUTDOWN, i)
}

func (s *Alter_server_auditContext) AllFAIL_OPERATION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFAIL_OPERATION)
}

func (s *Alter_server_auditContext) FAIL_OPERATION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFAIL_OPERATION, i)
}

func (s *Alter_server_auditContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Alter_server_auditContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Alter_server_auditContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Alter_server_auditContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Alter_server_auditContext) GREATER() antlr.TerminalNode {
	return s.GetToken(TSqlParserGREATER, 0)
}

func (s *Alter_server_auditContext) LESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserLESS, 0)
}

func (s *Alter_server_auditContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_server_auditContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_server_auditContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Alter_server_auditContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXCLAMATION, 0)
}

func (s *Alter_server_auditContext) AllFILEPATH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILEPATH)
}

func (s *Alter_server_auditContext) FILEPATH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEPATH, i)
}

func (s *Alter_server_auditContext) AllMAXSIZE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAXSIZE)
}

func (s *Alter_server_auditContext) MAXSIZE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXSIZE, i)
}

func (s *Alter_server_auditContext) AllMAX_ROLLOVER_FILES() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_ROLLOVER_FILES)
}

func (s *Alter_server_auditContext) MAX_ROLLOVER_FILES(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_ROLLOVER_FILES, i)
}

func (s *Alter_server_auditContext) AllMAX_FILES() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_FILES)
}

func (s *Alter_server_auditContext) MAX_FILES(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_FILES, i)
}

func (s *Alter_server_auditContext) AllRESERVE_DISK_SPACE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRESERVE_DISK_SPACE)
}

func (s *Alter_server_auditContext) RESERVE_DISK_SPACE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRESERVE_DISK_SPACE, i)
}

func (s *Alter_server_auditContext) AllUNLIMITED() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUNLIMITED)
}

func (s *Alter_server_auditContext) UNLIMITED(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLIMITED, i)
}

func (s *Alter_server_auditContext) AllMB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMB)
}

func (s *Alter_server_auditContext) MB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMB, i)
}

func (s *Alter_server_auditContext) AllGB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGB)
}

func (s *Alter_server_auditContext) GB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGB, i)
}

func (s *Alter_server_auditContext) AllTB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTB)
}

func (s *Alter_server_auditContext) TB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTB, i)
}

func (s *Alter_server_auditContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_auditContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_auditContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_server_audit(s)
	}
}

func (s *Alter_server_auditContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_server_audit(s)
	}
}

func (s *Alter_server_auditContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_server_audit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_server_audit() (localctx IAlter_server_auditContext) {
	localctx = NewAlter_server_auditContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, TSqlParserRULE_alter_server_audit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4425)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4426)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4427)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(4428)

		var _x = p.Id()

		localctx.(*Alter_server_auditContext).audit_name = _x
	}
	p.SetState(4560)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 517, p.GetParserRuleContext()) {
	case 1:
		p.SetState(4476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserTO {
			{
				p.SetState(4429)
				p.Match(TSqlParserTO)
			}
			p.SetState(4474)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserFILE:
				{
					p.SetState(4430)
					p.Match(TSqlParserFILE)
				}

				{
					p.SetState(4431)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(4468)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == TSqlParserFILEPATH || (((_la-572)&-(0x1f+1)) == 0 && ((1<<uint((_la-572)))&((1<<(TSqlParserMAX_FILES-572))|(1<<(TSqlParserMAX_ROLLOVER_FILES-572))|(1<<(TSqlParserMAXSIZE-572)))) != 0) || _la == TSqlParserRESERVE_DISK_SPACE || _la == TSqlParserCOMMA {
					p.SetState(4466)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 499, p.GetParserRuleContext()) {
					case 1:
						p.SetState(4433)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4432)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4435)
							p.Match(TSqlParserFILEPATH)
						}
						{
							p.SetState(4436)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(4437)

							var _m = p.Match(TSqlParserSTRING)

							localctx.(*Alter_server_auditContext).filepath = _m
						}

					case 2:
						p.SetState(4439)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4438)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4441)
							p.Match(TSqlParserMAXSIZE)
						}
						{
							p.SetState(4442)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4446)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserDECIMAL:
							{
								p.SetState(4443)
								p.Match(TSqlParserDECIMAL)
							}
							p.SetState(4444)
							_la = p.GetTokenStream().LA(1)

							if !(_la == TSqlParserGB || _la == TSqlParserMB || _la == TSqlParserTB) {
								p.GetErrorHandler().RecoverInline(p)
							} else {
								p.GetErrorHandler().ReportMatch(p)
								p.Consume()
							}

						case TSqlParserUNLIMITED:
							{
								p.SetState(4445)
								p.Match(TSqlParserUNLIMITED)
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					case 3:
						p.SetState(4449)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4448)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4451)
							p.Match(TSqlParserMAX_ROLLOVER_FILES)
						}
						{
							p.SetState(4452)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4453)

						var _lt = p.GetTokenStream().LT(1)

						localctx.(*Alter_server_auditContext).max_rollover_files = _lt

						_la = p.GetTokenStream().LA(1)

						if !(_la == TSqlParserUNLIMITED || _la == TSqlParserDECIMAL) {
							var _ri = p.GetErrorHandler().RecoverInline(p)

							localctx.(*Alter_server_auditContext).max_rollover_files = _ri
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					case 4:
						p.SetState(4455)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4454)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4457)
							p.Match(TSqlParserMAX_FILES)
						}
						{
							p.SetState(4458)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(4459)

							var _m = p.Match(TSqlParserDECIMAL)

							localctx.(*Alter_server_auditContext).max_files = _m
						}

					case 5:
						p.SetState(4461)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4460)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4463)
							p.Match(TSqlParserRESERVE_DISK_SPACE)
						}
						{
							p.SetState(4464)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4465)
						_la = p.GetTokenStream().LA(1)

						if !(_la == TSqlParserOFF || _la == TSqlParserON) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					}

					p.SetState(4470)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(4471)
					p.Match(TSqlParserRR_BRACKET)
				}

			case TSqlParserAPPLICATION_LOG:
				{
					p.SetState(4472)
					p.Match(TSqlParserAPPLICATION_LOG)
				}

			case TSqlParserSECURITY_LOG:
				{
					p.SetState(4473)
					p.Match(TSqlParserSECURITY_LOG)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4504)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 508, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4478)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(4479)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(4500)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserON_FAILURE || _la == TSqlParserSTATE || _la == TSqlParserQUEUE_DELAY || _la == TSqlParserCOMMA {
				p.SetState(4498)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) {
				case 1:
					p.SetState(4481)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4480)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4483)
						p.Match(TSqlParserQUEUE_DELAY)
					}
					{
						p.SetState(4484)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(4485)

						var _m = p.Match(TSqlParserDECIMAL)

						localctx.(*Alter_server_auditContext).queue_delay = _m
					}

				case 2:
					p.SetState(4487)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4486)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4489)
						p.Match(TSqlParserON_FAILURE)
					}
					{
						p.SetState(4490)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(4491)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCONTINUE || _la == TSqlParserSHUTDOWN || _la == TSqlParserFAIL_OPERATION) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 3:
					p.SetState(4493)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4492)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4495)
						p.Match(TSqlParserSTATE)
					}
					{
						p.SetState(4496)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(4497)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserOFF || _la == TSqlParserON) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}

				p.SetState(4502)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(4503)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(4552)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserWHERE {
			{
				p.SetState(4506)
				p.Match(TSqlParserWHERE)
			}
			p.SetState(4550)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 515, p.GetParserRuleContext()) {
			case 1:
				p.SetState(4508)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(4507)
						p.Match(TSqlParserCOMMA)
					}

				}

				p.SetState(4511)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserNOT {
					{
						p.SetState(4510)
						p.Match(TSqlParserNOT)
					}

				}

				{
					p.SetState(4513)

					var _x = p.Id()

					localctx.(*Alter_server_auditContext).event_field_name = _x
				}
				p.SetState(4525)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 511, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4514)
						p.Match(TSqlParserEQUAL)
					}

				case 2:
					{
						p.SetState(4515)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4516)
						p.Match(TSqlParserGREATER)
					}

				case 3:
					{
						p.SetState(4517)
						p.Match(TSqlParserEXCLAMATION)
					}
					{
						p.SetState(4518)
						p.Match(TSqlParserEQUAL)
					}

				case 4:
					{
						p.SetState(4519)
						p.Match(TSqlParserGREATER)
					}

				case 5:
					{
						p.SetState(4520)
						p.Match(TSqlParserGREATER)
					}
					{
						p.SetState(4521)
						p.Match(TSqlParserEQUAL)
					}

				case 6:
					{
						p.SetState(4522)
						p.Match(TSqlParserLESS)
					}

				case 7:
					{
						p.SetState(4523)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4524)
						p.Match(TSqlParserEQUAL)
					}

				}
				p.SetState(4527)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case 2:
				p.SetState(4530)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(4529)
						p.Match(TSqlParserCOMMA)
					}

				}
				p.SetState(4532)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserAND || _la == TSqlParserOR) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				p.SetState(4534)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserNOT {
					{
						p.SetState(4533)
						p.Match(TSqlParserNOT)
					}

				}
				p.SetState(4547)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 514, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4536)
						p.Match(TSqlParserEQUAL)
					}

				case 2:
					{
						p.SetState(4537)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4538)
						p.Match(TSqlParserGREATER)
					}

				case 3:
					{
						p.SetState(4539)
						p.Match(TSqlParserEXCLAMATION)
					}
					{
						p.SetState(4540)
						p.Match(TSqlParserEQUAL)
					}

				case 4:
					{
						p.SetState(4541)
						p.Match(TSqlParserGREATER)
					}

				case 5:
					{
						p.SetState(4542)
						p.Match(TSqlParserGREATER)
					}
					{
						p.SetState(4543)
						p.Match(TSqlParserEQUAL)
					}

				case 6:
					{
						p.SetState(4544)
						p.Match(TSqlParserLESS)
					}

				case 7:
					{
						p.SetState(4545)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4546)
						p.Match(TSqlParserEQUAL)
					}

				}
				p.SetState(4549)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		}

	case 2:
		{
			p.SetState(4554)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(4555)
			p.Match(TSqlParserWHERE)
		}

	case 3:
		{
			p.SetState(4556)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(4557)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(4558)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4559)

			var _x = p.Id()

			localctx.(*Alter_server_auditContext).new_audit_name = _x
		}

	}

	return localctx
}

// ICreate_server_auditContext is an interface to support dynamic dispatch.
type ICreate_server_auditContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFilepath returns the filepath token.
	GetFilepath() antlr.Token

	// GetMax_rollover_files returns the max_rollover_files token.
	GetMax_rollover_files() antlr.Token

	// GetMax_files returns the max_files token.
	GetMax_files() antlr.Token

	// GetQueue_delay returns the queue_delay token.
	GetQueue_delay() antlr.Token

	// SetFilepath sets the filepath token.
	SetFilepath(antlr.Token)

	// SetMax_rollover_files sets the max_rollover_files token.
	SetMax_rollover_files(antlr.Token)

	// SetMax_files sets the max_files token.
	SetMax_files(antlr.Token)

	// SetQueue_delay sets the queue_delay token.
	SetQueue_delay(antlr.Token)

	// GetAudit_name returns the audit_name rule contexts.
	GetAudit_name() IIdContext

	// GetAudit_guid returns the audit_guid rule contexts.
	GetAudit_guid() IIdContext

	// GetEvent_field_name returns the event_field_name rule contexts.
	GetEvent_field_name() IIdContext

	// GetNew_audit_name returns the new_audit_name rule contexts.
	GetNew_audit_name() IIdContext

	// SetAudit_name sets the audit_name rule contexts.
	SetAudit_name(IIdContext)

	// SetAudit_guid sets the audit_guid rule contexts.
	SetAudit_guid(IIdContext)

	// SetEvent_field_name sets the event_field_name rule contexts.
	SetEvent_field_name(IIdContext)

	// SetNew_audit_name sets the new_audit_name rule contexts.
	SetNew_audit_name(IIdContext)

	// IsCreate_server_auditContext differentiates from other interfaces.
	IsCreate_server_auditContext()
}

type Create_server_auditContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	audit_name         IIdContext
	filepath           antlr.Token
	max_rollover_files antlr.Token
	max_files          antlr.Token
	queue_delay        antlr.Token
	audit_guid         IIdContext
	event_field_name   IIdContext
	new_audit_name     IIdContext
}

func NewEmptyCreate_server_auditContext() *Create_server_auditContext {
	var p = new(Create_server_auditContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_server_audit
	return p
}

func (*Create_server_auditContext) IsCreate_server_auditContext() {}

func NewCreate_server_auditContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_server_auditContext {
	var p = new(Create_server_auditContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_server_audit

	return p
}

func (s *Create_server_auditContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_server_auditContext) GetFilepath() antlr.Token { return s.filepath }

func (s *Create_server_auditContext) GetMax_rollover_files() antlr.Token { return s.max_rollover_files }

func (s *Create_server_auditContext) GetMax_files() antlr.Token { return s.max_files }

func (s *Create_server_auditContext) GetQueue_delay() antlr.Token { return s.queue_delay }

func (s *Create_server_auditContext) SetFilepath(v antlr.Token) { s.filepath = v }

func (s *Create_server_auditContext) SetMax_rollover_files(v antlr.Token) { s.max_rollover_files = v }

func (s *Create_server_auditContext) SetMax_files(v antlr.Token) { s.max_files = v }

func (s *Create_server_auditContext) SetQueue_delay(v antlr.Token) { s.queue_delay = v }

func (s *Create_server_auditContext) GetAudit_name() IIdContext { return s.audit_name }

func (s *Create_server_auditContext) GetAudit_guid() IIdContext { return s.audit_guid }

func (s *Create_server_auditContext) GetEvent_field_name() IIdContext { return s.event_field_name }

func (s *Create_server_auditContext) GetNew_audit_name() IIdContext { return s.new_audit_name }

func (s *Create_server_auditContext) SetAudit_name(v IIdContext) { s.audit_name = v }

func (s *Create_server_auditContext) SetAudit_guid(v IIdContext) { s.audit_guid = v }

func (s *Create_server_auditContext) SetEvent_field_name(v IIdContext) { s.event_field_name = v }

func (s *Create_server_auditContext) SetNew_audit_name(v IIdContext) { s.new_audit_name = v }

func (s *Create_server_auditContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_server_auditContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Create_server_auditContext) AUDIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, 0)
}

func (s *Create_server_auditContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_server_auditContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_server_auditContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOVE, 0)
}

func (s *Create_server_auditContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Create_server_auditContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Create_server_auditContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Create_server_auditContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_server_auditContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_server_auditContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Create_server_auditContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_server_auditContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_server_auditContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_server_auditContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_server_auditContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_server_auditContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Create_server_auditContext) APPLICATION_LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLICATION_LOG, 0)
}

func (s *Create_server_auditContext) SECURITY_LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECURITY_LOG, 0)
}

func (s *Create_server_auditContext) AllQUEUE_DELAY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserQUEUE_DELAY)
}

func (s *Create_server_auditContext) QUEUE_DELAY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE_DELAY, i)
}

func (s *Create_server_auditContext) AllON_FAILURE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON_FAILURE)
}

func (s *Create_server_auditContext) ON_FAILURE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON_FAILURE, i)
}

func (s *Create_server_auditContext) AllSTATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTATE)
}

func (s *Create_server_auditContext) STATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, i)
}

func (s *Create_server_auditContext) AllAUDIT_GUID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAUDIT_GUID)
}

func (s *Create_server_auditContext) AUDIT_GUID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT_GUID, i)
}

func (s *Create_server_auditContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_server_auditContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_server_auditContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Create_server_auditContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Create_server_auditContext) AND() antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, 0)
}

func (s *Create_server_auditContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Create_server_auditContext) AllCONTINUE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCONTINUE)
}

func (s *Create_server_auditContext) CONTINUE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE, i)
}

func (s *Create_server_auditContext) AllSHUTDOWN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSHUTDOWN)
}

func (s *Create_server_auditContext) SHUTDOWN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSHUTDOWN, i)
}

func (s *Create_server_auditContext) AllFAIL_OPERATION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFAIL_OPERATION)
}

func (s *Create_server_auditContext) FAIL_OPERATION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFAIL_OPERATION, i)
}

func (s *Create_server_auditContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_server_auditContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_server_auditContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Create_server_auditContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Create_server_auditContext) GREATER() antlr.TerminalNode {
	return s.GetToken(TSqlParserGREATER, 0)
}

func (s *Create_server_auditContext) LESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserLESS, 0)
}

func (s *Create_server_auditContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_server_auditContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_server_auditContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Create_server_auditContext) EXCLAMATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXCLAMATION, 0)
}

func (s *Create_server_auditContext) AllFILEPATH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILEPATH)
}

func (s *Create_server_auditContext) FILEPATH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEPATH, i)
}

func (s *Create_server_auditContext) AllMAXSIZE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAXSIZE)
}

func (s *Create_server_auditContext) MAXSIZE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXSIZE, i)
}

func (s *Create_server_auditContext) AllMAX_ROLLOVER_FILES() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_ROLLOVER_FILES)
}

func (s *Create_server_auditContext) MAX_ROLLOVER_FILES(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_ROLLOVER_FILES, i)
}

func (s *Create_server_auditContext) AllMAX_FILES() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_FILES)
}

func (s *Create_server_auditContext) MAX_FILES(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_FILES, i)
}

func (s *Create_server_auditContext) AllRESERVE_DISK_SPACE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRESERVE_DISK_SPACE)
}

func (s *Create_server_auditContext) RESERVE_DISK_SPACE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRESERVE_DISK_SPACE, i)
}

func (s *Create_server_auditContext) AllUNLIMITED() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserUNLIMITED)
}

func (s *Create_server_auditContext) UNLIMITED(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLIMITED, i)
}

func (s *Create_server_auditContext) AllMB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMB)
}

func (s *Create_server_auditContext) MB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMB, i)
}

func (s *Create_server_auditContext) AllGB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGB)
}

func (s *Create_server_auditContext) GB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGB, i)
}

func (s *Create_server_auditContext) AllTB() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTB)
}

func (s *Create_server_auditContext) TB(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTB, i)
}

func (s *Create_server_auditContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_server_auditContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_server_auditContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_server_audit(s)
	}
}

func (s *Create_server_auditContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_server_audit(s)
	}
}

func (s *Create_server_auditContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_server_audit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_server_audit() (localctx ICreate_server_auditContext) {
	localctx = NewCreate_server_auditContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, TSqlParserRULE_create_server_audit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4562)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4563)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4564)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(4565)

		var _x = p.Id()

		localctx.(*Create_server_auditContext).audit_name = _x
	}
	p.SetState(4703)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 543, p.GetParserRuleContext()) {
	case 1:
		p.SetState(4613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserTO {
			{
				p.SetState(4566)
				p.Match(TSqlParserTO)
			}
			p.SetState(4611)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserFILE:
				{
					p.SetState(4567)
					p.Match(TSqlParserFILE)
				}

				{
					p.SetState(4568)
					p.Match(TSqlParserLR_BRACKET)
				}
				p.SetState(4605)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == TSqlParserFILEPATH || (((_la-572)&-(0x1f+1)) == 0 && ((1<<uint((_la-572)))&((1<<(TSqlParserMAX_FILES-572))|(1<<(TSqlParserMAX_ROLLOVER_FILES-572))|(1<<(TSqlParserMAXSIZE-572)))) != 0) || _la == TSqlParserRESERVE_DISK_SPACE || _la == TSqlParserCOMMA {
					p.SetState(4603)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 524, p.GetParserRuleContext()) {
					case 1:
						p.SetState(4570)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4569)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4572)
							p.Match(TSqlParserFILEPATH)
						}
						{
							p.SetState(4573)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(4574)

							var _m = p.Match(TSqlParserSTRING)

							localctx.(*Create_server_auditContext).filepath = _m
						}

					case 2:
						p.SetState(4576)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4575)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4578)
							p.Match(TSqlParserMAXSIZE)
						}
						{
							p.SetState(4579)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4583)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserDECIMAL:
							{
								p.SetState(4580)
								p.Match(TSqlParserDECIMAL)
							}
							p.SetState(4581)
							_la = p.GetTokenStream().LA(1)

							if !(_la == TSqlParserGB || _la == TSqlParserMB || _la == TSqlParserTB) {
								p.GetErrorHandler().RecoverInline(p)
							} else {
								p.GetErrorHandler().ReportMatch(p)
								p.Consume()
							}

						case TSqlParserUNLIMITED:
							{
								p.SetState(4582)
								p.Match(TSqlParserUNLIMITED)
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					case 3:
						p.SetState(4586)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4585)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4588)
							p.Match(TSqlParserMAX_ROLLOVER_FILES)
						}
						{
							p.SetState(4589)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4590)

						var _lt = p.GetTokenStream().LT(1)

						localctx.(*Create_server_auditContext).max_rollover_files = _lt

						_la = p.GetTokenStream().LA(1)

						if !(_la == TSqlParserUNLIMITED || _la == TSqlParserDECIMAL) {
							var _ri = p.GetErrorHandler().RecoverInline(p)

							localctx.(*Create_server_auditContext).max_rollover_files = _ri
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					case 4:
						p.SetState(4592)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4591)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4594)
							p.Match(TSqlParserMAX_FILES)
						}
						{
							p.SetState(4595)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(4596)

							var _m = p.Match(TSqlParserDECIMAL)

							localctx.(*Create_server_auditContext).max_files = _m
						}

					case 5:
						p.SetState(4598)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4597)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4600)
							p.Match(TSqlParserRESERVE_DISK_SPACE)
						}
						{
							p.SetState(4601)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(4602)
						_la = p.GetTokenStream().LA(1)

						if !(_la == TSqlParserOFF || _la == TSqlParserON) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					}

					p.SetState(4607)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(4608)
					p.Match(TSqlParserRR_BRACKET)
				}

			case TSqlParserAPPLICATION_LOG:
				{
					p.SetState(4609)
					p.Match(TSqlParserAPPLICATION_LOG)
				}

			case TSqlParserSECURITY_LOG:
				{
					p.SetState(4610)
					p.Match(TSqlParserSECURITY_LOG)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4647)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 534, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4615)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(4616)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(4643)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserON_FAILURE || _la == TSqlParserSTATE || _la == TSqlParserAUDIT_GUID || _la == TSqlParserQUEUE_DELAY || _la == TSqlParserCOMMA {
				p.SetState(4641)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 532, p.GetParserRuleContext()) {
				case 1:
					p.SetState(4618)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4617)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4620)
						p.Match(TSqlParserQUEUE_DELAY)
					}
					{
						p.SetState(4621)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(4622)

						var _m = p.Match(TSqlParserDECIMAL)

						localctx.(*Create_server_auditContext).queue_delay = _m
					}

				case 2:
					p.SetState(4624)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4623)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4626)
						p.Match(TSqlParserON_FAILURE)
					}
					{
						p.SetState(4627)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(4628)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCONTINUE || _la == TSqlParserSHUTDOWN || _la == TSqlParserFAIL_OPERATION) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 3:
					p.SetState(4630)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4629)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4632)
						p.Match(TSqlParserSTATE)
					}
					{
						p.SetState(4633)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(4634)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserOFF || _la == TSqlParserON) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 4:
					p.SetState(4636)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4635)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4638)
						p.Match(TSqlParserAUDIT_GUID)
					}
					{
						p.SetState(4639)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(4640)

						var _x = p.Id()

						localctx.(*Create_server_auditContext).audit_guid = _x
					}

				}

				p.SetState(4645)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(4646)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(4695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserWHERE {
			{
				p.SetState(4649)
				p.Match(TSqlParserWHERE)
			}
			p.SetState(4693)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 541, p.GetParserRuleContext()) {
			case 1:
				p.SetState(4651)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(4650)
						p.Match(TSqlParserCOMMA)
					}

				}

				p.SetState(4654)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserNOT {
					{
						p.SetState(4653)
						p.Match(TSqlParserNOT)
					}

				}

				{
					p.SetState(4656)

					var _x = p.Id()

					localctx.(*Create_server_auditContext).event_field_name = _x
				}
				p.SetState(4668)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 537, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4657)
						p.Match(TSqlParserEQUAL)
					}

				case 2:
					{
						p.SetState(4658)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4659)
						p.Match(TSqlParserGREATER)
					}

				case 3:
					{
						p.SetState(4660)
						p.Match(TSqlParserEXCLAMATION)
					}
					{
						p.SetState(4661)
						p.Match(TSqlParserEQUAL)
					}

				case 4:
					{
						p.SetState(4662)
						p.Match(TSqlParserGREATER)
					}

				case 5:
					{
						p.SetState(4663)
						p.Match(TSqlParserGREATER)
					}
					{
						p.SetState(4664)
						p.Match(TSqlParserEQUAL)
					}

				case 6:
					{
						p.SetState(4665)
						p.Match(TSqlParserLESS)
					}

				case 7:
					{
						p.SetState(4666)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4667)
						p.Match(TSqlParserEQUAL)
					}

				}
				p.SetState(4670)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case 2:
				p.SetState(4673)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(4672)
						p.Match(TSqlParserCOMMA)
					}

				}
				p.SetState(4675)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserAND || _la == TSqlParserOR) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				p.SetState(4677)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserNOT {
					{
						p.SetState(4676)
						p.Match(TSqlParserNOT)
					}

				}
				p.SetState(4690)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 540, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(4679)
						p.Match(TSqlParserEQUAL)
					}

				case 2:
					{
						p.SetState(4680)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4681)
						p.Match(TSqlParserGREATER)
					}

				case 3:
					{
						p.SetState(4682)
						p.Match(TSqlParserEXCLAMATION)
					}
					{
						p.SetState(4683)
						p.Match(TSqlParserEQUAL)
					}

				case 4:
					{
						p.SetState(4684)
						p.Match(TSqlParserGREATER)
					}

				case 5:
					{
						p.SetState(4685)
						p.Match(TSqlParserGREATER)
					}
					{
						p.SetState(4686)
						p.Match(TSqlParserEQUAL)
					}

				case 6:
					{
						p.SetState(4687)
						p.Match(TSqlParserLESS)
					}

				case 7:
					{
						p.SetState(4688)
						p.Match(TSqlParserLESS)
					}
					{
						p.SetState(4689)
						p.Match(TSqlParserEQUAL)
					}

				}
				p.SetState(4692)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		}

	case 2:
		{
			p.SetState(4697)
			p.Match(TSqlParserREMOVE)
		}
		{
			p.SetState(4698)
			p.Match(TSqlParserWHERE)
		}

	case 3:
		{
			p.SetState(4699)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(4700)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(4701)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4702)

			var _x = p.Id()

			localctx.(*Create_server_auditContext).new_audit_name = _x
		}

	}

	return localctx
}

// IAlter_server_audit_specificationContext is an interface to support dynamic dispatch.
type IAlter_server_audit_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAudit_specification_name returns the audit_specification_name rule contexts.
	GetAudit_specification_name() IIdContext

	// GetAudit_name returns the audit_name rule contexts.
	GetAudit_name() IIdContext

	// GetAudit_action_group_name returns the audit_action_group_name rule contexts.
	GetAudit_action_group_name() IIdContext

	// SetAudit_specification_name sets the audit_specification_name rule contexts.
	SetAudit_specification_name(IIdContext)

	// SetAudit_name sets the audit_name rule contexts.
	SetAudit_name(IIdContext)

	// SetAudit_action_group_name sets the audit_action_group_name rule contexts.
	SetAudit_action_group_name(IIdContext)

	// IsAlter_server_audit_specificationContext differentiates from other interfaces.
	IsAlter_server_audit_specificationContext()
}

type Alter_server_audit_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	audit_specification_name IIdContext
	audit_name               IIdContext
	audit_action_group_name  IIdContext
}

func NewEmptyAlter_server_audit_specificationContext() *Alter_server_audit_specificationContext {
	var p = new(Alter_server_audit_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_server_audit_specification
	return p
}

func (*Alter_server_audit_specificationContext) IsAlter_server_audit_specificationContext() {}

func NewAlter_server_audit_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_audit_specificationContext {
	var p = new(Alter_server_audit_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_server_audit_specification

	return p
}

func (s *Alter_server_audit_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_audit_specificationContext) GetAudit_specification_name() IIdContext {
	return s.audit_specification_name
}

func (s *Alter_server_audit_specificationContext) GetAudit_name() IIdContext { return s.audit_name }

func (s *Alter_server_audit_specificationContext) GetAudit_action_group_name() IIdContext {
	return s.audit_action_group_name
}

func (s *Alter_server_audit_specificationContext) SetAudit_specification_name(v IIdContext) {
	s.audit_specification_name = v
}

func (s *Alter_server_audit_specificationContext) SetAudit_name(v IIdContext) { s.audit_name = v }

func (s *Alter_server_audit_specificationContext) SetAudit_action_group_name(v IIdContext) {
	s.audit_action_group_name = v
}

func (s *Alter_server_audit_specificationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_server_audit_specificationContext) AllSERVER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVER)
}

func (s *Alter_server_audit_specificationContext) SERVER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, i)
}

func (s *Alter_server_audit_specificationContext) AllAUDIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAUDIT)
}

func (s *Alter_server_audit_specificationContext) AUDIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, i)
}

func (s *Alter_server_audit_specificationContext) SPECIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPECIFICATION, 0)
}

func (s *Alter_server_audit_specificationContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_server_audit_specificationContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_server_audit_specificationContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Alter_server_audit_specificationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Alter_server_audit_specificationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Alter_server_audit_specificationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_server_audit_specificationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_server_audit_specificationContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_server_audit_specificationContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Alter_server_audit_specificationContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_server_audit_specificationContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserADD)
}

func (s *Alter_server_audit_specificationContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, i)
}

func (s *Alter_server_audit_specificationContext) AllDROP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDROP)
}

func (s *Alter_server_audit_specificationContext) DROP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, i)
}

func (s *Alter_server_audit_specificationContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_server_audit_specificationContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_server_audit_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_audit_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_audit_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_server_audit_specification(s)
	}
}

func (s *Alter_server_audit_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_server_audit_specification(s)
	}
}

func (s *Alter_server_audit_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_server_audit_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_server_audit_specification() (localctx IAlter_server_audit_specificationContext) {
	localctx = NewAlter_server_audit_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, TSqlParserRULE_alter_server_audit_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4705)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4706)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4707)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(4708)
		p.Match(TSqlParserSPECIFICATION)
	}
	{
		p.SetState(4709)

		var _x = p.Id()

		localctx.(*Alter_server_audit_specificationContext).audit_specification_name = _x
	}
	p.SetState(4714)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(4710)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(4711)
			p.Match(TSqlParserSERVER)
		}
		{
			p.SetState(4712)
			p.Match(TSqlParserAUDIT)
		}
		{
			p.SetState(4713)

			var _x = p.Id()

			localctx.(*Alter_server_audit_specificationContext).audit_name = _x
		}

	}
	p.SetState(4723)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 545, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(4716)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4717)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(4718)

				var _x = p.Id()

				localctx.(*Alter_server_audit_specificationContext).audit_action_group_name = _x
			}
			{
				p.SetState(4719)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(4725)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 545, p.GetParserRuleContext())
	}
	p.SetState(4732)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 546, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4726)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4727)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4728)
			p.Match(TSqlParserSTATE)
		}
		{
			p.SetState(4729)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4730)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4731)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICreate_server_audit_specificationContext is an interface to support dynamic dispatch.
type ICreate_server_audit_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAudit_specification_name returns the audit_specification_name rule contexts.
	GetAudit_specification_name() IIdContext

	// GetAudit_name returns the audit_name rule contexts.
	GetAudit_name() IIdContext

	// GetAudit_action_group_name returns the audit_action_group_name rule contexts.
	GetAudit_action_group_name() IIdContext

	// SetAudit_specification_name sets the audit_specification_name rule contexts.
	SetAudit_specification_name(IIdContext)

	// SetAudit_name sets the audit_name rule contexts.
	SetAudit_name(IIdContext)

	// SetAudit_action_group_name sets the audit_action_group_name rule contexts.
	SetAudit_action_group_name(IIdContext)

	// IsCreate_server_audit_specificationContext differentiates from other interfaces.
	IsCreate_server_audit_specificationContext()
}

type Create_server_audit_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	audit_specification_name IIdContext
	audit_name               IIdContext
	audit_action_group_name  IIdContext
}

func NewEmptyCreate_server_audit_specificationContext() *Create_server_audit_specificationContext {
	var p = new(Create_server_audit_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_server_audit_specification
	return p
}

func (*Create_server_audit_specificationContext) IsCreate_server_audit_specificationContext() {}

func NewCreate_server_audit_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_server_audit_specificationContext {
	var p = new(Create_server_audit_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_server_audit_specification

	return p
}

func (s *Create_server_audit_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_server_audit_specificationContext) GetAudit_specification_name() IIdContext {
	return s.audit_specification_name
}

func (s *Create_server_audit_specificationContext) GetAudit_name() IIdContext { return s.audit_name }

func (s *Create_server_audit_specificationContext) GetAudit_action_group_name() IIdContext {
	return s.audit_action_group_name
}

func (s *Create_server_audit_specificationContext) SetAudit_specification_name(v IIdContext) {
	s.audit_specification_name = v
}

func (s *Create_server_audit_specificationContext) SetAudit_name(v IIdContext) { s.audit_name = v }

func (s *Create_server_audit_specificationContext) SetAudit_action_group_name(v IIdContext) {
	s.audit_action_group_name = v
}

func (s *Create_server_audit_specificationContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_server_audit_specificationContext) AllSERVER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVER)
}

func (s *Create_server_audit_specificationContext) SERVER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, i)
}

func (s *Create_server_audit_specificationContext) AllAUDIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAUDIT)
}

func (s *Create_server_audit_specificationContext) AUDIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAUDIT, i)
}

func (s *Create_server_audit_specificationContext) SPECIFICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPECIFICATION, 0)
}

func (s *Create_server_audit_specificationContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_server_audit_specificationContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_server_audit_specificationContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_server_audit_specificationContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserADD)
}

func (s *Create_server_audit_specificationContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, i)
}

func (s *Create_server_audit_specificationContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Create_server_audit_specificationContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Create_server_audit_specificationContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Create_server_audit_specificationContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Create_server_audit_specificationContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_server_audit_specificationContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Create_server_audit_specificationContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_server_audit_specificationContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_server_audit_specificationContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_server_audit_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_server_audit_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_server_audit_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_server_audit_specification(s)
	}
}

func (s *Create_server_audit_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_server_audit_specification(s)
	}
}

func (s *Create_server_audit_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_server_audit_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_server_audit_specification() (localctx ICreate_server_audit_specificationContext) {
	localctx = NewCreate_server_audit_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, TSqlParserRULE_create_server_audit_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4734)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4735)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4736)
		p.Match(TSqlParserAUDIT)
	}
	{
		p.SetState(4737)
		p.Match(TSqlParserSPECIFICATION)
	}
	{
		p.SetState(4738)

		var _x = p.Id()

		localctx.(*Create_server_audit_specificationContext).audit_specification_name = _x
	}
	p.SetState(4743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(4739)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(4740)
			p.Match(TSqlParserSERVER)
		}
		{
			p.SetState(4741)
			p.Match(TSqlParserAUDIT)
		}
		{
			p.SetState(4742)

			var _x = p.Id()

			localctx.(*Create_server_audit_specificationContext).audit_name = _x
		}

	}
	p.SetState(4752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserADD {
		{
			p.SetState(4745)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(4746)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4747)

			var _x = p.Id()

			localctx.(*Create_server_audit_specificationContext).audit_action_group_name = _x
		}
		{
			p.SetState(4748)
			p.Match(TSqlParserRR_BRACKET)
		}

		p.SetState(4754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4761)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 549, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4755)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4756)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(4757)
			p.Match(TSqlParserSTATE)
		}
		{
			p.SetState(4758)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4759)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4760)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_server_configurationContext is an interface to support dynamic dispatch.
type IAlter_server_configurationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_server_configurationContext differentiates from other interfaces.
	IsAlter_server_configurationContext()
}

type Alter_server_configurationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_server_configurationContext() *Alter_server_configurationContext {
	var p = new(Alter_server_configurationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_server_configuration
	return p
}

func (*Alter_server_configurationContext) IsAlter_server_configurationContext() {}

func NewAlter_server_configurationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_configurationContext {
	var p = new(Alter_server_configurationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_server_configuration

	return p
}

func (s *Alter_server_configurationContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_configurationContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_server_configurationContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Alter_server_configurationContext) CONFIGURATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONFIGURATION, 0)
}

func (s *Alter_server_configurationContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSET)
}

func (s *Alter_server_configurationContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, i)
}

func (s *Alter_server_configurationContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROCESS, 0)
}

func (s *Alter_server_configurationContext) AFFINITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFFINITY, 0)
}

func (s *Alter_server_configurationContext) DIAGNOSTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserDIAGNOSTICS, 0)
}

func (s *Alter_server_configurationContext) LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOG, 0)
}

func (s *Alter_server_configurationContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILOVER, 0)
}

func (s *Alter_server_configurationContext) CLUSTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLUSTER, 0)
}

func (s *Alter_server_configurationContext) PROPERTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROPERTY, 0)
}

func (s *Alter_server_configurationContext) HADR() antlr.TerminalNode {
	return s.GetToken(TSqlParserHADR, 0)
}

func (s *Alter_server_configurationContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTEXT, 0)
}

func (s *Alter_server_configurationContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_server_configurationContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_server_configurationContext) BUFFER() antlr.TerminalNode {
	return s.GetToken(TSqlParserBUFFER, 0)
}

func (s *Alter_server_configurationContext) POOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOOL, 0)
}

func (s *Alter_server_configurationContext) EXTENSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTENSION, 0)
}

func (s *Alter_server_configurationContext) SOFTNUMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSOFTNUMA, 0)
}

func (s *Alter_server_configurationContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_server_configurationContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL, 0)
}

func (s *Alter_server_configurationContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_server_configurationContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Alter_server_configurationContext) CPU() antlr.TerminalNode {
	return s.GetToken(TSqlParserCPU, 0)
}

func (s *Alter_server_configurationContext) NUMANODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMANODE, 0)
}

func (s *Alter_server_configurationContext) PATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserPATH, 0)
}

func (s *Alter_server_configurationContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_SIZE, 0)
}

func (s *Alter_server_configurationContext) MAX_FILES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_FILES, 0)
}

func (s *Alter_server_configurationContext) VERBOSELOGGING() antlr.TerminalNode {
	return s.GetToken(TSqlParserVERBOSELOGGING, 0)
}

func (s *Alter_server_configurationContext) SQLDUMPERFLAGS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSQLDUMPERFLAGS, 0)
}

func (s *Alter_server_configurationContext) SQLDUMPERPATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserSQLDUMPERPATH, 0)
}

func (s *Alter_server_configurationContext) SQLDUMPERTIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSQLDUMPERTIMEOUT, 0)
}

func (s *Alter_server_configurationContext) FAILURECONDITIONLEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILURECONDITIONLEVEL, 0)
}

func (s *Alter_server_configurationContext) HEALTHCHECKTIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserHEALTHCHECKTIMEOUT, 0)
}

func (s *Alter_server_configurationContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_server_configurationContext) FILENAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILENAME, 0)
}

func (s *Alter_server_configurationContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_server_configurationContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_server_configurationContext) SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIZE, 0)
}

func (s *Alter_server_configurationContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_server_configurationContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_server_configurationContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_server_configurationContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Alter_server_configurationContext) KB() antlr.TerminalNode {
	return s.GetToken(TSqlParserKB, 0)
}

func (s *Alter_server_configurationContext) MB() antlr.TerminalNode {
	return s.GetToken(TSqlParserMB, 0)
}

func (s *Alter_server_configurationContext) GB() antlr.TerminalNode {
	return s.GetToken(TSqlParserGB, 0)
}

func (s *Alter_server_configurationContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Alter_server_configurationContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Alter_server_configurationContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Alter_server_configurationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_configurationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_configurationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_server_configuration(s)
	}
}

func (s *Alter_server_configurationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_server_configuration(s)
	}
}

func (s *Alter_server_configurationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_server_configuration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_server_configuration() (localctx IAlter_server_configurationContext) {
	localctx = NewAlter_server_configurationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, TSqlParserRULE_alter_server_configuration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4763)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4764)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4765)
		p.Match(TSqlParserCONFIGURATION)
	}
	{
		p.SetState(4766)
		p.Match(TSqlParserSET)
	}

	p.SetState(4872)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserPROCESS:
		{
			p.SetState(4767)
			p.Match(TSqlParserPROCESS)
		}
		{
			p.SetState(4768)
			p.Match(TSqlParserAFFINITY)
		}
		p.SetState(4804)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCPU:
			{
				p.SetState(4769)
				p.Match(TSqlParserCPU)
			}
			{
				p.SetState(4770)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4786)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserAUTO:
				{
					p.SetState(4771)
					p.Match(TSqlParserAUTO)
				}

			case TSqlParserDECIMAL, TSqlParserCOMMA:
				p.SetState(4782)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == TSqlParserDECIMAL || _la == TSqlParserCOMMA {
					p.SetState(4782)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 552, p.GetParserRuleContext()) {
					case 1:
						p.SetState(4773)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4772)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4775)
							p.Match(TSqlParserDECIMAL)
						}

					case 2:
						p.SetState(4777)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(4776)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(4779)
							p.Match(TSqlParserDECIMAL)
						}
						{
							p.SetState(4780)
							p.Match(TSqlParserTO)
						}
						{
							p.SetState(4781)
							p.Match(TSqlParserDECIMAL)
						}

					}

					p.SetState(4784)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case TSqlParserNUMANODE:
			{
				p.SetState(4788)
				p.Match(TSqlParserNUMANODE)
			}
			{
				p.SetState(4789)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4800)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == TSqlParserDECIMAL || _la == TSqlParserCOMMA {
				p.SetState(4800)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 557, p.GetParserRuleContext()) {
				case 1:
					p.SetState(4791)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4790)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4793)
						p.Match(TSqlParserDECIMAL)
					}

				case 2:
					p.SetState(4795)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(4794)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(4797)
						p.Match(TSqlParserDECIMAL)
					}
					{
						p.SetState(4798)
						p.Match(TSqlParserTO)
					}
					{
						p.SetState(4799)
						p.Match(TSqlParserDECIMAL)
					}

				}

				p.SetState(4802)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserDIAGNOSTICS:
		{
			p.SetState(4806)
			p.Match(TSqlParserDIAGNOSTICS)
		}
		{
			p.SetState(4807)
			p.Match(TSqlParserLOG)
		}
		p.SetState(4823)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserON:
			{
				p.SetState(4808)
				p.Match(TSqlParserON)
			}

		case TSqlParserOFF:
			{
				p.SetState(4809)
				p.Match(TSqlParserOFF)
			}

		case TSqlParserPATH:
			{
				p.SetState(4810)
				p.Match(TSqlParserPATH)
			}
			{
				p.SetState(4811)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4812)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserMAX_SIZE:
			{
				p.SetState(4813)
				p.Match(TSqlParserMAX_SIZE)
			}
			{
				p.SetState(4814)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4818)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserDECIMAL:
				{
					p.SetState(4815)
					p.Match(TSqlParserDECIMAL)
				}
				{
					p.SetState(4816)
					p.Match(TSqlParserMB)
				}

			case TSqlParserDEFAULT:
				{
					p.SetState(4817)
					p.Match(TSqlParserDEFAULT)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case TSqlParserMAX_FILES:
			{
				p.SetState(4820)
				p.Match(TSqlParserMAX_FILES)
			}
			{
				p.SetState(4821)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4822)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserDECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserFAILOVER:
		{
			p.SetState(4825)
			p.Match(TSqlParserFAILOVER)
		}
		{
			p.SetState(4826)
			p.Match(TSqlParserCLUSTER)
		}
		{
			p.SetState(4827)
			p.Match(TSqlParserPROPERTY)
		}
		p.SetState(4845)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserVERBOSELOGGING:
			{
				p.SetState(4828)
				p.Match(TSqlParserVERBOSELOGGING)
			}
			{
				p.SetState(4829)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4830)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserSQLDUMPERFLAGS:
			{
				p.SetState(4831)
				p.Match(TSqlParserSQLDUMPERFLAGS)
			}
			{
				p.SetState(4832)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4833)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserSQLDUMPERPATH:
			{
				p.SetState(4834)
				p.Match(TSqlParserSQLDUMPERPATH)
			}
			{
				p.SetState(4835)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4836)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserSQLDUMPERTIMEOUT:
			{
				p.SetState(4837)
				p.Match(TSqlParserSQLDUMPERTIMEOUT)
			}
			p.SetState(4838)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserFAILURECONDITIONLEVEL:
			{
				p.SetState(4839)
				p.Match(TSqlParserFAILURECONDITIONLEVEL)
			}
			{
				p.SetState(4840)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4841)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserSTRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserHEALTHCHECKTIMEOUT:
			{
				p.SetState(4842)
				p.Match(TSqlParserHEALTHCHECKTIMEOUT)
			}
			{
				p.SetState(4843)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(4844)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDEFAULT || _la == TSqlParserDECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserHADR:
		{
			p.SetState(4847)
			p.Match(TSqlParserHADR)
		}
		{
			p.SetState(4848)
			p.Match(TSqlParserCLUSTER)
		}
		{
			p.SetState(4849)
			p.Match(TSqlParserCONTEXT)
		}
		{
			p.SetState(4850)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(4851)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserLOCAL || _la == TSqlParserSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserBUFFER:
		{
			p.SetState(4852)
			p.Match(TSqlParserBUFFER)
		}
		{
			p.SetState(4853)
			p.Match(TSqlParserPOOL)
		}
		{
			p.SetState(4854)
			p.Match(TSqlParserEXTENSION)
		}
		p.SetState(4867)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserON:
			{
				p.SetState(4855)
				p.Match(TSqlParserON)
			}
			{
				p.SetState(4856)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(4857)
				p.Match(TSqlParserFILENAME)
			}
			{
				p.SetState(4858)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4859)
				p.Match(TSqlParserSTRING)
			}
			{
				p.SetState(4860)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(4861)
				p.Match(TSqlParserSIZE)
			}
			{
				p.SetState(4862)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4863)
				p.Match(TSqlParserDECIMAL)
			}
			p.SetState(4864)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserGB || _la == TSqlParserKB || _la == TSqlParserMB) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4865)
				p.Match(TSqlParserRR_BRACKET)
			}

		case TSqlParserOFF:
			{
				p.SetState(4866)
				p.Match(TSqlParserOFF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserSET:
		{
			p.SetState(4869)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(4870)
			p.Match(TSqlParserSOFTNUMA)
		}
		p.SetState(4871)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_server_roleContext is an interface to support dynamic dispatch.
type IAlter_server_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer_role_name returns the server_role_name rule contexts.
	GetServer_role_name() IIdContext

	// GetServer_principal returns the server_principal rule contexts.
	GetServer_principal() IIdContext

	// GetNew_server_role_name returns the new_server_role_name rule contexts.
	GetNew_server_role_name() IIdContext

	// SetServer_role_name sets the server_role_name rule contexts.
	SetServer_role_name(IIdContext)

	// SetServer_principal sets the server_principal rule contexts.
	SetServer_principal(IIdContext)

	// SetNew_server_role_name sets the new_server_role_name rule contexts.
	SetNew_server_role_name(IIdContext)

	// IsAlter_server_roleContext differentiates from other interfaces.
	IsAlter_server_roleContext()
}

type Alter_server_roleContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	server_role_name     IIdContext
	server_principal     IIdContext
	new_server_role_name IIdContext
}

func NewEmptyAlter_server_roleContext() *Alter_server_roleContext {
	var p = new(Alter_server_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_server_role
	return p
}

func (*Alter_server_roleContext) IsAlter_server_roleContext() {}

func NewAlter_server_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_roleContext {
	var p = new(Alter_server_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_server_role

	return p
}

func (s *Alter_server_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_roleContext) GetServer_role_name() IIdContext { return s.server_role_name }

func (s *Alter_server_roleContext) GetServer_principal() IIdContext { return s.server_principal }

func (s *Alter_server_roleContext) GetNew_server_role_name() IIdContext { return s.new_server_role_name }

func (s *Alter_server_roleContext) SetServer_role_name(v IIdContext) { s.server_role_name = v }

func (s *Alter_server_roleContext) SetServer_principal(v IIdContext) { s.server_principal = v }

func (s *Alter_server_roleContext) SetNew_server_role_name(v IIdContext) { s.new_server_role_name = v }

func (s *Alter_server_roleContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_server_roleContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Alter_server_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Alter_server_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_server_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_server_roleContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMEMBER, 0)
}

func (s *Alter_server_roleContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_server_roleContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_server_roleContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_server_roleContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_server_roleContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_server_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_server_role(s)
	}
}

func (s *Alter_server_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_server_role(s)
	}
}

func (s *Alter_server_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_server_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_server_role() (localctx IAlter_server_roleContext) {
	localctx = NewAlter_server_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, TSqlParserRULE_alter_server_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4874)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4875)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4876)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(4877)

		var _x = p.Id()

		localctx.(*Alter_server_roleContext).server_role_name = _x
	}
	p.SetState(4885)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserADD, TSqlParserDROP:
		p.SetState(4878)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4879)
			p.Match(TSqlParserMEMBER)
		}
		{
			p.SetState(4880)

			var _x = p.Id()

			localctx.(*Alter_server_roleContext).server_principal = _x
		}

	case TSqlParserWITH:
		{
			p.SetState(4881)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(4882)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(4883)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4884)

			var _x = p.Id()

			localctx.(*Alter_server_roleContext).new_server_role_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_server_roleContext is an interface to support dynamic dispatch.
type ICreate_server_roleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer_role returns the server_role rule contexts.
	GetServer_role() IIdContext

	// GetServer_principal returns the server_principal rule contexts.
	GetServer_principal() IIdContext

	// SetServer_role sets the server_role rule contexts.
	SetServer_role(IIdContext)

	// SetServer_principal sets the server_principal rule contexts.
	SetServer_principal(IIdContext)

	// IsCreate_server_roleContext differentiates from other interfaces.
	IsCreate_server_roleContext()
}

type Create_server_roleContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	server_role      IIdContext
	server_principal IIdContext
}

func NewEmptyCreate_server_roleContext() *Create_server_roleContext {
	var p = new(Create_server_roleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_server_role
	return p
}

func (*Create_server_roleContext) IsCreate_server_roleContext() {}

func NewCreate_server_roleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_server_roleContext {
	var p = new(Create_server_roleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_server_role

	return p
}

func (s *Create_server_roleContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_server_roleContext) GetServer_role() IIdContext { return s.server_role }

func (s *Create_server_roleContext) GetServer_principal() IIdContext { return s.server_principal }

func (s *Create_server_roleContext) SetServer_role(v IIdContext) { s.server_role = v }

func (s *Create_server_roleContext) SetServer_principal(v IIdContext) { s.server_principal = v }

func (s *Create_server_roleContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_server_roleContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Create_server_roleContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Create_server_roleContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_server_roleContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_server_roleContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_server_roleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_server_roleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_server_roleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_server_role(s)
	}
}

func (s *Create_server_roleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_server_role(s)
	}
}

func (s *Create_server_roleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_server_role(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_server_role() (localctx ICreate_server_roleContext) {
	localctx = NewCreate_server_roleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, TSqlParserRULE_create_server_role)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4887)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4888)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4889)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(4890)

		var _x = p.Id()

		localctx.(*Create_server_roleContext).server_role = _x
	}
	p.SetState(4893)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4891)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4892)

			var _x = p.Id()

			localctx.(*Create_server_roleContext).server_principal = _x
		}

	}

	return localctx
}

// IAlter_server_role_pdwContext is an interface to support dynamic dispatch.
type IAlter_server_role_pdwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer_role_name returns the server_role_name rule contexts.
	GetServer_role_name() IIdContext

	// GetLogin returns the login rule contexts.
	GetLogin() IIdContext

	// SetServer_role_name sets the server_role_name rule contexts.
	SetServer_role_name(IIdContext)

	// SetLogin sets the login rule contexts.
	SetLogin(IIdContext)

	// IsAlter_server_role_pdwContext differentiates from other interfaces.
	IsAlter_server_role_pdwContext()
}

type Alter_server_role_pdwContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	server_role_name IIdContext
	login            IIdContext
}

func NewEmptyAlter_server_role_pdwContext() *Alter_server_role_pdwContext {
	var p = new(Alter_server_role_pdwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_server_role_pdw
	return p
}

func (*Alter_server_role_pdwContext) IsAlter_server_role_pdwContext() {}

func NewAlter_server_role_pdwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_server_role_pdwContext {
	var p = new(Alter_server_role_pdwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_server_role_pdw

	return p
}

func (s *Alter_server_role_pdwContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_server_role_pdwContext) GetServer_role_name() IIdContext { return s.server_role_name }

func (s *Alter_server_role_pdwContext) GetLogin() IIdContext { return s.login }

func (s *Alter_server_role_pdwContext) SetServer_role_name(v IIdContext) { s.server_role_name = v }

func (s *Alter_server_role_pdwContext) SetLogin(v IIdContext) { s.login = v }

func (s *Alter_server_role_pdwContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_server_role_pdwContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Alter_server_role_pdwContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Alter_server_role_pdwContext) MEMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMEMBER, 0)
}

func (s *Alter_server_role_pdwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_server_role_pdwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_server_role_pdwContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_server_role_pdwContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_server_role_pdwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_server_role_pdwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_server_role_pdwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_server_role_pdw(s)
	}
}

func (s *Alter_server_role_pdwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_server_role_pdw(s)
	}
}

func (s *Alter_server_role_pdwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_server_role_pdw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_server_role_pdw() (localctx IAlter_server_role_pdwContext) {
	localctx = NewAlter_server_role_pdwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, TSqlParserRULE_alter_server_role_pdw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4895)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4896)
		p.Match(TSqlParserSERVER)
	}
	{
		p.SetState(4897)
		p.Match(TSqlParserROLE)
	}
	{
		p.SetState(4898)

		var _x = p.Id()

		localctx.(*Alter_server_role_pdwContext).server_role_name = _x
	}
	p.SetState(4899)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(4900)
		p.Match(TSqlParserMEMBER)
	}
	{
		p.SetState(4901)

		var _x = p.Id()

		localctx.(*Alter_server_role_pdwContext).login = _x
	}

	return localctx
}

// IAlter_serviceContext is an interface to support dynamic dispatch.
type IAlter_serviceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetModified_service_name returns the modified_service_name rule contexts.
	GetModified_service_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// GetModified_contract_name returns the modified_contract_name rule contexts.
	GetModified_contract_name() IIdContext

	// SetModified_service_name sets the modified_service_name rule contexts.
	SetModified_service_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// SetModified_contract_name sets the modified_contract_name rule contexts.
	SetModified_contract_name(IIdContext)

	// IsAlter_serviceContext differentiates from other interfaces.
	IsAlter_serviceContext()
}

type Alter_serviceContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	modified_service_name  IIdContext
	schema_name            IIdContext
	queue_name             IIdContext
	modified_contract_name IIdContext
}

func NewEmptyAlter_serviceContext() *Alter_serviceContext {
	var p = new(Alter_serviceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_service
	return p
}

func (*Alter_serviceContext) IsAlter_serviceContext() {}

func NewAlter_serviceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_serviceContext {
	var p = new(Alter_serviceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_service

	return p
}

func (s *Alter_serviceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_serviceContext) GetModified_service_name() IIdContext { return s.modified_service_name }

func (s *Alter_serviceContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_serviceContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Alter_serviceContext) GetModified_contract_name() IIdContext { return s.modified_contract_name }

func (s *Alter_serviceContext) SetModified_service_name(v IIdContext) { s.modified_service_name = v }

func (s *Alter_serviceContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_serviceContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Alter_serviceContext) SetModified_contract_name(v IIdContext) { s.modified_contract_name = v }

func (s *Alter_serviceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_serviceContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Alter_serviceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_serviceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_serviceContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Alter_serviceContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Alter_serviceContext) AllADD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserADD)
}

func (s *Alter_serviceContext) ADD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, i)
}

func (s *Alter_serviceContext) AllDROP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDROP)
}

func (s *Alter_serviceContext) DROP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, i)
}

func (s *Alter_serviceContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Alter_serviceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_serviceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_serviceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_serviceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_serviceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_service(s)
	}
}

func (s *Alter_serviceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_service(s)
	}
}

func (s *Alter_serviceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_service(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_service() (localctx IAlter_serviceContext) {
	localctx = NewAlter_serviceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, TSqlParserRULE_alter_service)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4903)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4904)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(4905)

		var _x = p.Id()

		localctx.(*Alter_serviceContext).modified_service_name = _x
	}
	p.SetState(4913)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserON {
		{
			p.SetState(4906)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(4907)
			p.Match(TSqlParserQUEUE)
		}

		{
			p.SetState(4908)

			var _x = p.Id()

			localctx.(*Alter_serviceContext).schema_name = _x
		}
		{
			p.SetState(4909)
			p.Match(TSqlParserDOT)
		}

		{
			p.SetState(4911)

			var _x = p.Id()

			localctx.(*Alter_serviceContext).queue_name = _x
		}

	}
	p.SetState(4922)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 569, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(4916)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4915)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(4918)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4919)

				var _x = p.Id()

				localctx.(*Alter_serviceContext).modified_contract_name = _x
			}

		}
		p.SetState(4924)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 569, p.GetParserRuleContext())
	}

	return localctx
}

// ICreate_serviceContext is an interface to support dynamic dispatch.
type ICreate_serviceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCreate_service_name returns the create_service_name rule contexts.
	GetCreate_service_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// SetCreate_service_name sets the create_service_name rule contexts.
	SetCreate_service_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// IsCreate_serviceContext differentiates from other interfaces.
	IsCreate_serviceContext()
}

type Create_serviceContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	create_service_name IIdContext
	owner_name          IIdContext
	schema_name         IIdContext
	queue_name          IIdContext
}

func NewEmptyCreate_serviceContext() *Create_serviceContext {
	var p = new(Create_serviceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_service
	return p
}

func (*Create_serviceContext) IsCreate_serviceContext() {}

func NewCreate_serviceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_serviceContext {
	var p = new(Create_serviceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_service

	return p
}

func (s *Create_serviceContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_serviceContext) GetCreate_service_name() IIdContext { return s.create_service_name }

func (s *Create_serviceContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_serviceContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_serviceContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Create_serviceContext) SetCreate_service_name(v IIdContext) { s.create_service_name = v }

func (s *Create_serviceContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_serviceContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_serviceContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Create_serviceContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_serviceContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Create_serviceContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_serviceContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Create_serviceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_serviceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_serviceContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_serviceContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_serviceContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_serviceContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_serviceContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT)
}

func (s *Create_serviceContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, i)
}

func (s *Create_serviceContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_serviceContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_serviceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_serviceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_serviceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_service(s)
	}
}

func (s *Create_serviceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_service(s)
	}
}

func (s *Create_serviceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_service(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_service() (localctx ICreate_serviceContext) {
	localctx = NewCreate_serviceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, TSqlParserRULE_create_service)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4925)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(4926)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(4927)

		var _x = p.Id()

		localctx.(*Create_serviceContext).create_service_name = _x
	}
	p.SetState(4930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(4928)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(4929)

			var _x = p.Id()

			localctx.(*Create_serviceContext).owner_name = _x
		}

	}
	{
		p.SetState(4932)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(4933)
		p.Match(TSqlParserQUEUE)
	}
	p.SetState(4937)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 571, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4934)

			var _x = p.Id()

			localctx.(*Create_serviceContext).schema_name = _x
		}
		{
			p.SetState(4935)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(4939)

		var _x = p.Id()

		localctx.(*Create_serviceContext).queue_name = _x
	}
	p.SetState(4953)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 575, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4940)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(4948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || _la == TSqlParserDEFAULT || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(4942)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(4941)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(4946)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(4944)
					p.Id()
				}

			case TSqlParserDEFAULT:
				{
					p.SetState(4945)
					p.Match(TSqlParserDEFAULT)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4950)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4952)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_service_master_keyContext is an interface to support dynamic dispatch.
type IAlter_service_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAcold_account_name returns the acold_account_name token.
	GetAcold_account_name() antlr.Token

	// GetOld_password returns the old_password token.
	GetOld_password() antlr.Token

	// GetNew_account_name returns the new_account_name token.
	GetNew_account_name() antlr.Token

	// GetNew_password returns the new_password token.
	GetNew_password() antlr.Token

	// SetAcold_account_name sets the acold_account_name token.
	SetAcold_account_name(antlr.Token)

	// SetOld_password sets the old_password token.
	SetOld_password(antlr.Token)

	// SetNew_account_name sets the new_account_name token.
	SetNew_account_name(antlr.Token)

	// SetNew_password sets the new_password token.
	SetNew_password(antlr.Token)

	// IsAlter_service_master_keyContext differentiates from other interfaces.
	IsAlter_service_master_keyContext()
}

type Alter_service_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	acold_account_name antlr.Token
	old_password       antlr.Token
	new_account_name   antlr.Token
	new_password       antlr.Token
}

func NewEmptyAlter_service_master_keyContext() *Alter_service_master_keyContext {
	var p = new(Alter_service_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_service_master_key
	return p
}

func (*Alter_service_master_keyContext) IsAlter_service_master_keyContext() {}

func NewAlter_service_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_service_master_keyContext {
	var p = new(Alter_service_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_service_master_key

	return p
}

func (s *Alter_service_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_service_master_keyContext) GetAcold_account_name() antlr.Token {
	return s.acold_account_name
}

func (s *Alter_service_master_keyContext) GetOld_password() antlr.Token { return s.old_password }

func (s *Alter_service_master_keyContext) GetNew_account_name() antlr.Token { return s.new_account_name }

func (s *Alter_service_master_keyContext) GetNew_password() antlr.Token { return s.new_password }

func (s *Alter_service_master_keyContext) SetAcold_account_name(v antlr.Token) {
	s.acold_account_name = v
}

func (s *Alter_service_master_keyContext) SetOld_password(v antlr.Token) { s.old_password = v }

func (s *Alter_service_master_keyContext) SetNew_account_name(v antlr.Token) { s.new_account_name = v }

func (s *Alter_service_master_keyContext) SetNew_password(v antlr.Token) { s.new_password = v }

func (s *Alter_service_master_keyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_service_master_keyContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Alter_service_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Alter_service_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_service_master_keyContext) REGENERATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREGENERATE, 0)
}

func (s *Alter_service_master_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_service_master_keyContext) FORCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE, 0)
}

func (s *Alter_service_master_keyContext) OLD_ACCOUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_ACCOUNT, 0)
}

func (s *Alter_service_master_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_service_master_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_service_master_keyContext) COMMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, 0)
}

func (s *Alter_service_master_keyContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_PASSWORD, 0)
}

func (s *Alter_service_master_keyContext) NEW_ACCOUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEW_ACCOUNT, 0)
}

func (s *Alter_service_master_keyContext) NEW_PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEW_PASSWORD, 0)
}

func (s *Alter_service_master_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_service_master_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_service_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_service_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_service_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_service_master_key(s)
	}
}

func (s *Alter_service_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_service_master_key(s)
	}
}

func (s *Alter_service_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_service_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_service_master_key() (localctx IAlter_service_master_keyContext) {
	localctx = NewAlter_service_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, TSqlParserRULE_alter_service_master_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4955)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4956)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(4957)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(4958)
		p.Match(TSqlParserKEY)
	}
	p.SetState(4980)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserREGENERATE, TSqlParserFORCE:
		p.SetState(4960)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFORCE {
			{
				p.SetState(4959)
				p.Match(TSqlParserFORCE)
			}

		}
		{
			p.SetState(4962)
			p.Match(TSqlParserREGENERATE)
		}

	case TSqlParserWITH:
		{
			p.SetState(4963)
			p.Match(TSqlParserWITH)
		}
		p.SetState(4978)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserOLD_ACCOUNT:
			{
				p.SetState(4964)
				p.Match(TSqlParserOLD_ACCOUNT)
			}
			{
				p.SetState(4965)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4966)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_service_master_keyContext).acold_account_name = _m
			}
			{
				p.SetState(4967)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(4968)
				p.Match(TSqlParserOLD_PASSWORD)
			}
			{
				p.SetState(4969)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4970)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_service_master_keyContext).old_password = _m
			}

		case TSqlParserNEW_ACCOUNT:
			{
				p.SetState(4971)
				p.Match(TSqlParserNEW_ACCOUNT)
			}
			{
				p.SetState(4972)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4973)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_service_master_keyContext).new_account_name = _m
			}
			{
				p.SetState(4974)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(4975)
				p.Match(TSqlParserNEW_PASSWORD)
			}
			{
				p.SetState(4976)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(4977)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Alter_service_master_keyContext).new_password = _m
			}

		case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

		default:
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_symmetric_keyContext is an interface to support dynamic dispatch.
type IAlter_symmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// GetSymmetric_key_name returns the symmetric_key_name rule contexts.
	GetSymmetric_key_name() IIdContext

	// GetAsym_key_name returns the Asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// SetSymmetric_key_name sets the symmetric_key_name rule contexts.
	SetSymmetric_key_name(IIdContext)

	// SetAsym_key_name sets the Asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// IsAlter_symmetric_keyContext differentiates from other interfaces.
	IsAlter_symmetric_keyContext()
}

type Alter_symmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	key_name           IIdContext
	certificate_name   IIdContext
	password           antlr.Token
	symmetric_key_name IIdContext
	Asym_key_name      IIdContext
}

func NewEmptyAlter_symmetric_keyContext() *Alter_symmetric_keyContext {
	var p = new(Alter_symmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_symmetric_key
	return p
}

func (*Alter_symmetric_keyContext) IsAlter_symmetric_keyContext() {}

func NewAlter_symmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_symmetric_keyContext {
	var p = new(Alter_symmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_symmetric_key

	return p
}

func (s *Alter_symmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_symmetric_keyContext) GetPassword() antlr.Token { return s.password }

func (s *Alter_symmetric_keyContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Alter_symmetric_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Alter_symmetric_keyContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Alter_symmetric_keyContext) GetSymmetric_key_name() IIdContext { return s.symmetric_key_name }

func (s *Alter_symmetric_keyContext) GetAsym_key_name() IIdContext { return s.Asym_key_name }

func (s *Alter_symmetric_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Alter_symmetric_keyContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Alter_symmetric_keyContext) SetSymmetric_key_name(v IIdContext) { s.symmetric_key_name = v }

func (s *Alter_symmetric_keyContext) SetAsym_key_name(v IIdContext) { s.Asym_key_name = v }

func (s *Alter_symmetric_keyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_symmetric_keyContext) AllSYMMETRIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSYMMETRIC)
}

func (s *Alter_symmetric_keyContext) SYMMETRIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, i)
}

func (s *Alter_symmetric_keyContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Alter_symmetric_keyContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Alter_symmetric_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_symmetric_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_symmetric_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Alter_symmetric_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Alter_symmetric_keyContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_symmetric_keyContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_symmetric_keyContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Alter_symmetric_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Alter_symmetric_keyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Alter_symmetric_keyContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Alter_symmetric_keyContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Alter_symmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_symmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_symmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_symmetric_key(s)
	}
}

func (s *Alter_symmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_symmetric_key(s)
	}
}

func (s *Alter_symmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_symmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_symmetric_key() (localctx IAlter_symmetric_keyContext) {
	localctx = NewAlter_symmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, TSqlParserRULE_alter_symmetric_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4982)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(4983)
		p.Match(TSqlParserSYMMETRIC)
	}
	{
		p.SetState(4984)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(4985)

		var _x = p.Id()

		localctx.(*Alter_symmetric_keyContext).key_name = _x
	}

	p.SetState(4986)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserADD || _la == TSqlParserDROP) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(4987)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(4988)
		p.Match(TSqlParserBY)
	}
	p.SetState(5000)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCERTIFICATE:
		{
			p.SetState(4989)
			p.Match(TSqlParserCERTIFICATE)
		}
		{
			p.SetState(4990)

			var _x = p.Id()

			localctx.(*Alter_symmetric_keyContext).certificate_name = _x
		}

	case TSqlParserPASSWORD:
		{
			p.SetState(4991)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(4992)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(4993)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Alter_symmetric_keyContext).password = _m
		}

	case TSqlParserSYMMETRIC:
		{
			p.SetState(4994)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(4995)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(4996)

			var _x = p.Id()

			localctx.(*Alter_symmetric_keyContext).symmetric_key_name = _x
		}

	case TSqlParserASYMMETRIC:
		{
			p.SetState(4997)
			p.Match(TSqlParserASYMMETRIC)
		}
		{
			p.SetState(4998)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(4999)

			var _x = p.Id()

			localctx.(*Alter_symmetric_keyContext).Asym_key_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_symmetric_keyContext is an interface to support dynamic dispatch.
type ICreate_symmetric_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_pass_phrase returns the key_pass_phrase token.
	GetKey_pass_phrase() antlr.Token

	// GetIdentity_phrase returns the identity_phrase token.
	GetIdentity_phrase() antlr.Token

	// GetProvider_key_name returns the provider_key_name token.
	GetProvider_key_name() antlr.Token

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetKey_pass_phrase sets the key_pass_phrase token.
	SetKey_pass_phrase(antlr.Token)

	// SetIdentity_phrase sets the identity_phrase token.
	SetIdentity_phrase(antlr.Token)

	// SetProvider_key_name sets the provider_key_name token.
	SetProvider_key_name(antlr.Token)

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetProvider_name returns the provider_name rule contexts.
	GetProvider_name() IIdContext

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// GetSymmetric_key_name returns the symmetric_key_name rule contexts.
	GetSymmetric_key_name() IIdContext

	// GetAsym_key_name returns the asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetProvider_name sets the provider_name rule contexts.
	SetProvider_name(IIdContext)

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// SetSymmetric_key_name sets the symmetric_key_name rule contexts.
	SetSymmetric_key_name(IIdContext)

	// SetAsym_key_name sets the asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// IsCreate_symmetric_keyContext differentiates from other interfaces.
	IsCreate_symmetric_keyContext()
}

type Create_symmetric_keyContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	key_name           IIdContext
	owner_name         IIdContext
	provider_name      IIdContext
	key_pass_phrase    antlr.Token
	identity_phrase    antlr.Token
	provider_key_name  antlr.Token
	certificate_name   IIdContext
	password           antlr.Token
	symmetric_key_name IIdContext
	asym_key_name      IIdContext
}

func NewEmptyCreate_symmetric_keyContext() *Create_symmetric_keyContext {
	var p = new(Create_symmetric_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_symmetric_key
	return p
}

func (*Create_symmetric_keyContext) IsCreate_symmetric_keyContext() {}

func NewCreate_symmetric_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_symmetric_keyContext {
	var p = new(Create_symmetric_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_symmetric_key

	return p
}

func (s *Create_symmetric_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_symmetric_keyContext) GetKey_pass_phrase() antlr.Token { return s.key_pass_phrase }

func (s *Create_symmetric_keyContext) GetIdentity_phrase() antlr.Token { return s.identity_phrase }

func (s *Create_symmetric_keyContext) GetProvider_key_name() antlr.Token { return s.provider_key_name }

func (s *Create_symmetric_keyContext) GetPassword() antlr.Token { return s.password }

func (s *Create_symmetric_keyContext) SetKey_pass_phrase(v antlr.Token) { s.key_pass_phrase = v }

func (s *Create_symmetric_keyContext) SetIdentity_phrase(v antlr.Token) { s.identity_phrase = v }

func (s *Create_symmetric_keyContext) SetProvider_key_name(v antlr.Token) { s.provider_key_name = v }

func (s *Create_symmetric_keyContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_symmetric_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Create_symmetric_keyContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_symmetric_keyContext) GetProvider_name() IIdContext { return s.provider_name }

func (s *Create_symmetric_keyContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Create_symmetric_keyContext) GetSymmetric_key_name() IIdContext { return s.symmetric_key_name }

func (s *Create_symmetric_keyContext) GetAsym_key_name() IIdContext { return s.asym_key_name }

func (s *Create_symmetric_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Create_symmetric_keyContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_symmetric_keyContext) SetProvider_name(v IIdContext) { s.provider_name = v }

func (s *Create_symmetric_keyContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Create_symmetric_keyContext) SetSymmetric_key_name(v IIdContext) { s.symmetric_key_name = v }

func (s *Create_symmetric_keyContext) SetAsym_key_name(v IIdContext) { s.asym_key_name = v }

func (s *Create_symmetric_keyContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_symmetric_keyContext) AllSYMMETRIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSYMMETRIC)
}

func (s *Create_symmetric_keyContext) SYMMETRIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, i)
}

func (s *Create_symmetric_keyContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Create_symmetric_keyContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Create_symmetric_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_symmetric_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_symmetric_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_symmetric_keyContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_symmetric_keyContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_symmetric_keyContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_symmetric_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Create_symmetric_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Create_symmetric_keyContext) KEY_SOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY_SOURCE, 0)
}

func (s *Create_symmetric_keyContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_symmetric_keyContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, 0)
}

func (s *Create_symmetric_keyContext) IDENTITY_VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY_VALUE, 0)
}

func (s *Create_symmetric_keyContext) PROVIDER_KEY_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER_KEY_NAME, 0)
}

func (s *Create_symmetric_keyContext) CREATION_DISPOSITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATION_DISPOSITION, 0)
}

func (s *Create_symmetric_keyContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Create_symmetric_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_symmetric_keyContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Create_symmetric_keyContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_symmetric_keyContext) DES() antlr.TerminalNode {
	return s.GetToken(TSqlParserDES, 0)
}

func (s *Create_symmetric_keyContext) TRIPLE_DES() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES, 0)
}

func (s *Create_symmetric_keyContext) TRIPLE_DES_3KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES_3KEY, 0)
}

func (s *Create_symmetric_keyContext) RC2() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC2, 0)
}

func (s *Create_symmetric_keyContext) RC4() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC4, 0)
}

func (s *Create_symmetric_keyContext) RC4_128() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC4_128, 0)
}

func (s *Create_symmetric_keyContext) DESX() antlr.TerminalNode {
	return s.GetToken(TSqlParserDESX, 0)
}

func (s *Create_symmetric_keyContext) AES_128() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_128, 0)
}

func (s *Create_symmetric_keyContext) AES_192() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_192, 0)
}

func (s *Create_symmetric_keyContext) AES_256() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_256, 0)
}

func (s *Create_symmetric_keyContext) CREATE_NEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE_NEW, 0)
}

func (s *Create_symmetric_keyContext) OPEN_EXISTING() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPEN_EXISTING, 0)
}

func (s *Create_symmetric_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_symmetric_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_symmetric_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_symmetric_key(s)
	}
}

func (s *Create_symmetric_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_symmetric_key(s)
	}
}

func (s *Create_symmetric_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_symmetric_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_symmetric_key() (localctx ICreate_symmetric_keyContext) {
	localctx = NewCreate_symmetric_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, TSqlParserRULE_create_symmetric_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5002)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(5003)
		p.Match(TSqlParserSYMMETRIC)
	}
	{
		p.SetState(5004)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(5005)

		var _x = p.Id()

		localctx.(*Create_symmetric_keyContext).key_name = _x
	}
	p.SetState(5008)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(5006)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(5007)

			var _x = p.Id()

			localctx.(*Create_symmetric_keyContext).owner_name = _x
		}

	}
	p.SetState(5013)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(5010)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(5011)
			p.Match(TSqlParserPROVIDER)
		}
		{
			p.SetState(5012)

			var _x = p.Id()

			localctx.(*Create_symmetric_keyContext).provider_name = _x
		}

	}

	{
		p.SetState(5015)
		p.Match(TSqlParserWITH)
	}
	p.SetState(5048)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserALGORITHM, TSqlParserCREATION_DISPOSITION, TSqlParserIDENTITY_VALUE, TSqlParserKEY_SOURCE, TSqlParserPROVIDER_KEY_NAME:
		p.SetState(5031)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserKEY_SOURCE:
			{
				p.SetState(5016)
				p.Match(TSqlParserKEY_SOURCE)
			}
			{
				p.SetState(5017)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5018)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_symmetric_keyContext).key_pass_phrase = _m
			}

		case TSqlParserALGORITHM:
			{
				p.SetState(5019)
				p.Match(TSqlParserALGORITHM)
			}
			{
				p.SetState(5020)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(5021)
			_la = p.GetTokenStream().LA(1)

			if !((((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(TSqlParserAES_128-388))|(1<<(TSqlParserAES_192-388))|(1<<(TSqlParserAES_256-388)))) != 0) || _la == TSqlParserDES || _la == TSqlParserDESX || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(TSqlParserRC2-654))|(1<<(TSqlParserRC4-654))|(1<<(TSqlParserRC4_128-654)))) != 0) || _la == TSqlParserTRIPLE_DES || _la == TSqlParserTRIPLE_DES_3KEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserIDENTITY_VALUE:
			{
				p.SetState(5022)
				p.Match(TSqlParserIDENTITY_VALUE)
			}
			{
				p.SetState(5023)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5024)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_symmetric_keyContext).identity_phrase = _m
			}

		case TSqlParserPROVIDER_KEY_NAME:
			{
				p.SetState(5025)
				p.Match(TSqlParserPROVIDER_KEY_NAME)
			}
			{
				p.SetState(5026)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5027)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_symmetric_keyContext).provider_key_name = _m
			}

		case TSqlParserCREATION_DISPOSITION:
			{
				p.SetState(5028)
				p.Match(TSqlParserCREATION_DISPOSITION)
			}
			{
				p.SetState(5029)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(5030)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserCREATE_NEW || _la == TSqlParserOPEN_EXISTING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserENCRYPTION:
		{
			p.SetState(5033)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(5034)
			p.Match(TSqlParserBY)
		}
		p.SetState(5046)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCERTIFICATE:
			{
				p.SetState(5035)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(5036)

				var _x = p.Id()

				localctx.(*Create_symmetric_keyContext).certificate_name = _x
			}

		case TSqlParserPASSWORD:
			{
				p.SetState(5037)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(5038)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5039)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_symmetric_keyContext).password = _m
			}

		case TSqlParserSYMMETRIC:
			{
				p.SetState(5040)
				p.Match(TSqlParserSYMMETRIC)
			}
			{
				p.SetState(5041)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(5042)

				var _x = p.Id()

				localctx.(*Create_symmetric_keyContext).symmetric_key_name = _x
			}

		case TSqlParserASYMMETRIC:
			{
				p.SetState(5043)
				p.Match(TSqlParserASYMMETRIC)
			}
			{
				p.SetState(5044)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(5045)

				var _x = p.Id()

				localctx.(*Create_symmetric_keyContext).asym_key_name = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_synonymContext is an interface to support dynamic dispatch.
type ICreate_synonymContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_name_1 returns the schema_name_1 rule contexts.
	GetSchema_name_1() IIdContext

	// GetSynonym_name returns the synonym_name rule contexts.
	GetSynonym_name() IIdContext

	// GetServer_name returns the server_name rule contexts.
	GetServer_name() IIdContext

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name_2 returns the schema_name_2 rule contexts.
	GetSchema_name_2() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// GetDatabase_or_schema2 returns the database_or_schema2 rule contexts.
	GetDatabase_or_schema2() IIdContext

	// GetSchema_id_2_or_object_name returns the schema_id_2_or_object_name rule contexts.
	GetSchema_id_2_or_object_name() IIdContext

	// SetSchema_name_1 sets the schema_name_1 rule contexts.
	SetSchema_name_1(IIdContext)

	// SetSynonym_name sets the synonym_name rule contexts.
	SetSynonym_name(IIdContext)

	// SetServer_name sets the server_name rule contexts.
	SetServer_name(IIdContext)

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name_2 sets the schema_name_2 rule contexts.
	SetSchema_name_2(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// SetDatabase_or_schema2 sets the database_or_schema2 rule contexts.
	SetDatabase_or_schema2(IIdContext)

	// SetSchema_id_2_or_object_name sets the schema_id_2_or_object_name rule contexts.
	SetSchema_id_2_or_object_name(IIdContext)

	// IsCreate_synonymContext differentiates from other interfaces.
	IsCreate_synonymContext()
}

type Create_synonymContext struct {
	*antlr.BaseParserRuleContext
	parser                     antlr.Parser
	schema_name_1              IIdContext
	synonym_name               IIdContext
	server_name                IIdContext
	database_name              IIdContext
	schema_name_2              IIdContext
	object_name                IIdContext
	database_or_schema2        IIdContext
	schema_id_2_or_object_name IIdContext
}

func NewEmptyCreate_synonymContext() *Create_synonymContext {
	var p = new(Create_synonymContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_synonym
	return p
}

func (*Create_synonymContext) IsCreate_synonymContext() {}

func NewCreate_synonymContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_synonymContext {
	var p = new(Create_synonymContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_synonym

	return p
}

func (s *Create_synonymContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_synonymContext) GetSchema_name_1() IIdContext { return s.schema_name_1 }

func (s *Create_synonymContext) GetSynonym_name() IIdContext { return s.synonym_name }

func (s *Create_synonymContext) GetServer_name() IIdContext { return s.server_name }

func (s *Create_synonymContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Create_synonymContext) GetSchema_name_2() IIdContext { return s.schema_name_2 }

func (s *Create_synonymContext) GetObject_name() IIdContext { return s.object_name }

func (s *Create_synonymContext) GetDatabase_or_schema2() IIdContext { return s.database_or_schema2 }

func (s *Create_synonymContext) GetSchema_id_2_or_object_name() IIdContext {
	return s.schema_id_2_or_object_name
}

func (s *Create_synonymContext) SetSchema_name_1(v IIdContext) { s.schema_name_1 = v }

func (s *Create_synonymContext) SetSynonym_name(v IIdContext) { s.synonym_name = v }

func (s *Create_synonymContext) SetServer_name(v IIdContext) { s.server_name = v }

func (s *Create_synonymContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Create_synonymContext) SetSchema_name_2(v IIdContext) { s.schema_name_2 = v }

func (s *Create_synonymContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Create_synonymContext) SetDatabase_or_schema2(v IIdContext) { s.database_or_schema2 = v }

func (s *Create_synonymContext) SetSchema_id_2_or_object_name(v IIdContext) {
	s.schema_id_2_or_object_name = v
}

func (s *Create_synonymContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_synonymContext) SYNONYM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYNONYM, 0)
}

func (s *Create_synonymContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_synonymContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_synonymContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_synonymContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDOT)
}

func (s *Create_synonymContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, i)
}

func (s *Create_synonymContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_synonymContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_synonymContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_synonym(s)
	}
}

func (s *Create_synonymContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_synonym(s)
	}
}

func (s *Create_synonymContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_synonym(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_synonym() (localctx ICreate_synonymContext) {
	localctx = NewCreate_synonymContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, TSqlParserRULE_create_synonym)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5050)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5051)
		p.Match(TSqlParserSYNONYM)
	}
	p.SetState(5055)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 585, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5052)

			var _x = p.Id()

			localctx.(*Create_synonymContext).schema_name_1 = _x
		}
		{
			p.SetState(5053)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(5057)

		var _x = p.Id()

		localctx.(*Create_synonymContext).synonym_name = _x
	}
	{
		p.SetState(5058)
		p.Match(TSqlParserFOR)
	}
	p.SetState(5085)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 591, p.GetParserRuleContext()) {
	case 1:
		p.SetState(5062)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 586, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5059)

				var _x = p.Id()

				localctx.(*Create_synonymContext).server_name = _x
			}
			{
				p.SetState(5060)
				p.Match(TSqlParserDOT)
			}

		}
		p.SetState(5067)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 587, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5064)

				var _x = p.Id()

				localctx.(*Create_synonymContext).database_name = _x
			}
			{
				p.SetState(5065)
				p.Match(TSqlParserDOT)
			}

		}
		p.SetState(5072)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 588, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5069)

				var _x = p.Id()

				localctx.(*Create_synonymContext).schema_name_2 = _x
			}
			{
				p.SetState(5070)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(5074)

			var _x = p.Id()

			localctx.(*Create_synonymContext).object_name = _x
		}

	case 2:
		p.SetState(5078)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 589, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5075)

				var _x = p.Id()

				localctx.(*Create_synonymContext).database_or_schema2 = _x
			}
			{
				p.SetState(5076)
				p.Match(TSqlParserDOT)
			}

		}
		p.SetState(5083)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 590, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5080)

				var _x = p.Id()

				localctx.(*Create_synonymContext).schema_id_2_or_object_name = _x
			}
			{
				p.SetState(5081)
				p.Match(TSqlParserDOT)
			}

		}

	}

	return localctx
}

// IAlter_userContext is an interface to support dynamic dispatch.
type IAlter_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLcid returns the lcid token.
	GetLcid() antlr.Token

	// SetLcid sets the lcid token.
	SetLcid(antlr.Token)

	// GetUsername returns the username rule contexts.
	GetUsername() IIdContext

	// GetNewusername returns the newusername rule contexts.
	GetNewusername() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetLoginame returns the loginame rule contexts.
	GetLoginame() IIdContext

	// GetLanguage_name_or_alias returns the language_name_or_alias rule contexts.
	GetLanguage_name_or_alias() IIdContext

	// SetUsername sets the username rule contexts.
	SetUsername(IIdContext)

	// SetNewusername sets the newusername rule contexts.
	SetNewusername(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetLoginame sets the loginame rule contexts.
	SetLoginame(IIdContext)

	// SetLanguage_name_or_alias sets the language_name_or_alias rule contexts.
	SetLanguage_name_or_alias(IIdContext)

	// IsAlter_userContext differentiates from other interfaces.
	IsAlter_userContext()
}

type Alter_userContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	username               IIdContext
	newusername            IIdContext
	schema_name            IIdContext
	loginame               IIdContext
	lcid                   antlr.Token
	language_name_or_alias IIdContext
}

func NewEmptyAlter_userContext() *Alter_userContext {
	var p = new(Alter_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_user
	return p
}

func (*Alter_userContext) IsAlter_userContext() {}

func NewAlter_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_userContext {
	var p = new(Alter_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_user

	return p
}

func (s *Alter_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_userContext) GetLcid() antlr.Token { return s.lcid }

func (s *Alter_userContext) SetLcid(v antlr.Token) { s.lcid = v }

func (s *Alter_userContext) GetUsername() IIdContext { return s.username }

func (s *Alter_userContext) GetNewusername() IIdContext { return s.newusername }

func (s *Alter_userContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_userContext) GetLoginame() IIdContext { return s.loginame }

func (s *Alter_userContext) GetLanguage_name_or_alias() IIdContext { return s.language_name_or_alias }

func (s *Alter_userContext) SetUsername(v IIdContext) { s.username = v }

func (s *Alter_userContext) SetNewusername(v IIdContext) { s.newusername = v }

func (s *Alter_userContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_userContext) SetLoginame(v IIdContext) { s.loginame = v }

func (s *Alter_userContext) SetLanguage_name_or_alias(v IIdContext) { s.language_name_or_alias = v }

func (s *Alter_userContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_userContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Alter_userContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_userContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_userContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_userContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNAME)
}

func (s *Alter_userContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, i)
}

func (s *Alter_userContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_userContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_userContext) AllDEFAULT_SCHEMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_SCHEMA)
}

func (s *Alter_userContext) DEFAULT_SCHEMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, i)
}

func (s *Alter_userContext) AllLOGIN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOGIN)
}

func (s *Alter_userContext) LOGIN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, i)
}

func (s *Alter_userContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPASSWORD)
}

func (s *Alter_userContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, i)
}

func (s *Alter_userContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Alter_userContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Alter_userContext) AllDEFAULT_LANGUAGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_LANGUAGE)
}

func (s *Alter_userContext) DEFAULT_LANGUAGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, i)
}

func (s *Alter_userContext) AllALLOW_ENCRYPTED_VALUE_MODIFICATIONS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
}

func (s *Alter_userContext) ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)
}

func (s *Alter_userContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Alter_userContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Alter_userContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Alter_userContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Alter_userContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNULL)
}

func (s *Alter_userContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, i)
}

func (s *Alter_userContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNONE)
}

func (s *Alter_userContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, i)
}

func (s *Alter_userContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_userContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_userContext) AllOLD_PASSWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOLD_PASSWORD)
}

func (s *Alter_userContext) OLD_PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOLD_PASSWORD, i)
}

func (s *Alter_userContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_userContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_user(s)
	}
}

func (s *Alter_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_user(s)
	}
}

func (s *Alter_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_user(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_user() (localctx IAlter_userContext) {
	localctx = NewAlter_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, TSqlParserRULE_alter_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5087)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(5088)
		p.Match(TSqlParserUSER)
	}
	{
		p.SetState(5089)

		var _x = p.Id()

		localctx.(*Alter_userContext).username = _x
	}
	{
		p.SetState(5090)
		p.Match(TSqlParserWITH)
	}
	p.SetState(5141)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(5141)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 601, p.GetParserRuleContext()) {
			case 1:
				p.SetState(5092)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5091)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5094)
					p.Match(TSqlParserNAME)
				}
				{
					p.SetState(5095)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5096)

					var _x = p.Id()

					localctx.(*Alter_userContext).newusername = _x
				}

			case 2:
				p.SetState(5098)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5097)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5100)
					p.Match(TSqlParserDEFAULT_SCHEMA)
				}
				{
					p.SetState(5101)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5104)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
					{
						p.SetState(5102)

						var _x = p.Id()

						localctx.(*Alter_userContext).schema_name = _x
					}

				case TSqlParserNULL:
					{
						p.SetState(5103)
						p.Match(TSqlParserNULL)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			case 3:
				p.SetState(5107)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5106)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5109)
					p.Match(TSqlParserLOGIN)
				}
				{
					p.SetState(5110)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5111)

					var _x = p.Id()

					localctx.(*Alter_userContext).loginame = _x
				}

			case 4:
				p.SetState(5113)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5112)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5115)
					p.Match(TSqlParserPASSWORD)
				}
				{
					p.SetState(5116)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5117)
					p.Match(TSqlParserSTRING)
				}
				p.SetState(5121)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for ok := true; ok; ok = _la == TSqlParserOLD_PASSWORD {
					{
						p.SetState(5118)
						p.Match(TSqlParserOLD_PASSWORD)
					}
					{
						p.SetState(5119)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(5120)
						p.Match(TSqlParserSTRING)
					}

					p.SetState(5123)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			case 5:
				p.SetState(5126)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5125)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5128)
					p.Match(TSqlParserDEFAULT_LANGUAGE)
				}
				{
					p.SetState(5129)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5133)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserNONE:
					{
						p.SetState(5130)
						p.Match(TSqlParserNONE)
					}

				case TSqlParserDECIMAL:
					{
						p.SetState(5131)

						var _m = p.Match(TSqlParserDECIMAL)

						localctx.(*Alter_userContext).lcid = _m
					}

				case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
					{
						p.SetState(5132)

						var _x = p.Id()

						localctx.(*Alter_userContext).language_name_or_alias = _x
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			case 6:
				p.SetState(5136)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5135)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5138)
					p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
				}
				{
					p.SetState(5139)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5140)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserOFF || _la == TSqlParserON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5143)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 602, p.GetParserRuleContext())
	}

	return localctx
}

// ICreate_userContext is an interface to support dynamic dispatch.
type ICreate_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetWindows_principal returns the windows_principal rule contexts.
	GetWindows_principal() IIdContext

	// GetLanguage_name_or_alias returns the language_name_or_alias rule contexts.
	GetLanguage_name_or_alias() IIdContext

	// GetAzure_Active_Directory_principal returns the Azure_Active_Directory_principal rule contexts.
	GetAzure_Active_Directory_principal() IIdContext

	// GetCert_name returns the cert_name rule contexts.
	GetCert_name() IIdContext

	// GetAsym_key_name returns the asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetWindows_principal sets the windows_principal rule contexts.
	SetWindows_principal(IIdContext)

	// SetLanguage_name_or_alias sets the language_name_or_alias rule contexts.
	SetLanguage_name_or_alias(IIdContext)

	// SetAzure_Active_Directory_principal sets the Azure_Active_Directory_principal rule contexts.
	SetAzure_Active_Directory_principal(IIdContext)

	// SetCert_name sets the cert_name rule contexts.
	SetCert_name(IIdContext)

	// SetAsym_key_name sets the asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// IsCreate_userContext differentiates from other interfaces.
	IsCreate_userContext()
}

type Create_userContext struct {
	*antlr.BaseParserRuleContext
	parser                           antlr.Parser
	user_name                        IIdContext
	login_name                       IIdContext
	schema_name                      IIdContext
	windows_principal                IIdContext
	language_name_or_alias           IIdContext
	password                         antlr.Token
	Azure_Active_Directory_principal IIdContext
	cert_name                        IIdContext
	asym_key_name                    IIdContext
}

func NewEmptyCreate_userContext() *Create_userContext {
	var p = new(Create_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_user
	return p
}

func (*Create_userContext) IsCreate_userContext() {}

func NewCreate_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_userContext {
	var p = new(Create_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_user

	return p
}

func (s *Create_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_userContext) GetPassword() antlr.Token { return s.password }

func (s *Create_userContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_userContext) GetUser_name() IIdContext { return s.user_name }

func (s *Create_userContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Create_userContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_userContext) GetWindows_principal() IIdContext { return s.windows_principal }

func (s *Create_userContext) GetLanguage_name_or_alias() IIdContext { return s.language_name_or_alias }

func (s *Create_userContext) GetAzure_Active_Directory_principal() IIdContext {
	return s.Azure_Active_Directory_principal
}

func (s *Create_userContext) GetCert_name() IIdContext { return s.cert_name }

func (s *Create_userContext) GetAsym_key_name() IIdContext { return s.asym_key_name }

func (s *Create_userContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Create_userContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Create_userContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_userContext) SetWindows_principal(v IIdContext) { s.windows_principal = v }

func (s *Create_userContext) SetLanguage_name_or_alias(v IIdContext) { s.language_name_or_alias = v }

func (s *Create_userContext) SetAzure_Active_Directory_principal(v IIdContext) {
	s.Azure_Active_Directory_principal = v
}

func (s *Create_userContext) SetCert_name(v IIdContext) { s.cert_name = v }

func (s *Create_userContext) SetAsym_key_name(v IIdContext) { s.asym_key_name = v }

func (s *Create_userContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_userContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Create_userContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_userContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_userContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Create_userContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_userContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_userContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_userContext) AllDEFAULT_SCHEMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_SCHEMA)
}

func (s *Create_userContext) DEFAULT_SCHEMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, i)
}

func (s *Create_userContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_userContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_userContext) AllALLOW_ENCRYPTED_VALUE_MODIFICATIONS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
}

func (s *Create_userContext) ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)
}

func (s *Create_userContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_userContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_userContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Create_userContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Create_userContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_userContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_userContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_userContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Create_userContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_userContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_userContext) AllDEFAULT_LANGUAGE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_LANGUAGE)
}

func (s *Create_userContext) DEFAULT_LANGUAGE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, i)
}

func (s *Create_userContext) AllSID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSID)
}

func (s *Create_userContext) SID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSID, i)
}

func (s *Create_userContext) AllBINARY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBINARY)
}

func (s *Create_userContext) BINARY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, i)
}

func (s *Create_userContext) AllNONE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNONE)
}

func (s *Create_userContext) NONE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, i)
}

func (s *Create_userContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_userContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_userContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITHOUT, 0)
}

func (s *Create_userContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Create_userContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Create_userContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_user(s)
	}
}

func (s *Create_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_user(s)
	}
}

func (s *Create_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_user(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_user() (localctx ICreate_userContext) {
	localctx = NewCreate_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, TSqlParserRULE_create_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5291)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 630, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5145)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5146)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(5147)

			var _x = p.Id()

			localctx.(*Create_userContext).user_name = _x
		}
		p.SetState(5151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFOR || _la == TSqlParserFROM {
			p.SetState(5148)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFOR || _la == TSqlParserFROM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(5149)
				p.Match(TSqlParserLOGIN)
			}
			{
				p.SetState(5150)

				var _x = p.Id()

				localctx.(*Create_userContext).login_name = _x
			}

		}
		p.SetState(5171)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 608, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5153)
				p.Match(TSqlParserWITH)
			}
			p.SetState(5168)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserDEFAULT_SCHEMA || _la == TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la == TSqlParserCOMMA {
				p.SetState(5166)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 606, p.GetParserRuleContext()) {
				case 1:
					p.SetState(5155)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(5154)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(5157)
						p.Match(TSqlParserDEFAULT_SCHEMA)
					}
					{
						p.SetState(5158)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(5159)

						var _x = p.Id()

						localctx.(*Create_userContext).schema_name = _x
					}

				case 2:
					p.SetState(5161)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(5160)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(5163)
						p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
					}
					{
						p.SetState(5164)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(5165)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserOFF || _la == TSqlParserON) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}

				p.SetState(5170)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5173)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5174)
			p.Match(TSqlParserUSER)
		}
		p.SetState(5255)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 624, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5175)

				var _x = p.Id()

				localctx.(*Create_userContext).windows_principal = _x
			}
			p.SetState(5210)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 616, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(5176)
					p.Match(TSqlParserWITH)
				}
				p.SetState(5207)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 615, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						p.SetState(5205)
						p.GetErrorHandler().Sync(p)
						switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 614, p.GetParserRuleContext()) {
						case 1:
							p.SetState(5178)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(5177)
									p.Match(TSqlParserCOMMA)
								}

							}
							{
								p.SetState(5180)
								p.Match(TSqlParserDEFAULT_SCHEMA)
							}
							{
								p.SetState(5181)
								p.Match(TSqlParserEQUAL)
							}
							{
								p.SetState(5182)

								var _x = p.Id()

								localctx.(*Create_userContext).schema_name = _x
							}

						case 2:
							p.SetState(5184)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(5183)
									p.Match(TSqlParserCOMMA)
								}

							}
							{
								p.SetState(5186)
								p.Match(TSqlParserDEFAULT_LANGUAGE)
							}
							{
								p.SetState(5187)
								p.Match(TSqlParserEQUAL)
							}
							p.SetState(5191)
							p.GetErrorHandler().Sync(p)

							switch p.GetTokenStream().LA(1) {
							case TSqlParserNONE:
								{
									p.SetState(5188)
									p.Match(TSqlParserNONE)
								}

							case TSqlParserDECIMAL:
								{
									p.SetState(5189)
									p.Match(TSqlParserDECIMAL)
								}

							case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
								{
									p.SetState(5190)

									var _x = p.Id()

									localctx.(*Create_userContext).language_name_or_alias = _x
								}

							default:
								panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
							}

						case 3:
							p.SetState(5194)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(5193)
									p.Match(TSqlParserCOMMA)
								}

							}
							{
								p.SetState(5196)
								p.Match(TSqlParserSID)
							}
							{
								p.SetState(5197)
								p.Match(TSqlParserEQUAL)
							}
							{
								p.SetState(5198)
								p.Match(TSqlParserBINARY)
							}

						case 4:
							p.SetState(5200)
							p.GetErrorHandler().Sync(p)
							_la = p.GetTokenStream().LA(1)

							if _la == TSqlParserCOMMA {
								{
									p.SetState(5199)
									p.Match(TSqlParserCOMMA)
								}

							}
							{
								p.SetState(5202)
								p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
							}
							{
								p.SetState(5203)
								p.Match(TSqlParserEQUAL)
							}
							p.SetState(5204)
							_la = p.GetTokenStream().LA(1)

							if !(_la == TSqlParserOFF || _la == TSqlParserON) {
								p.GetErrorHandler().RecoverInline(p)
							} else {
								p.GetErrorHandler().ReportMatch(p)
								p.Consume()
							}

						}

					}
					p.SetState(5209)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 615, p.GetParserRuleContext())
				}

			}

		case 2:
			{
				p.SetState(5212)

				var _x = p.Id()

				localctx.(*Create_userContext).user_name = _x
			}
			{
				p.SetState(5213)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(5214)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(5215)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5216)

				var _m = p.Match(TSqlParserSTRING)

				localctx.(*Create_userContext).password = _m
			}
			p.SetState(5247)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 623, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					p.SetState(5245)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 622, p.GetParserRuleContext()) {
					case 1:
						p.SetState(5218)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(5217)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(5220)
							p.Match(TSqlParserDEFAULT_SCHEMA)
						}
						{
							p.SetState(5221)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(5222)

							var _x = p.Id()

							localctx.(*Create_userContext).schema_name = _x
						}

					case 2:
						p.SetState(5224)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(5223)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(5226)
							p.Match(TSqlParserDEFAULT_LANGUAGE)
						}
						{
							p.SetState(5227)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(5231)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserNONE:
							{
								p.SetState(5228)
								p.Match(TSqlParserNONE)
							}

						case TSqlParserDECIMAL:
							{
								p.SetState(5229)
								p.Match(TSqlParserDECIMAL)
							}

						case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
							{
								p.SetState(5230)

								var _x = p.Id()

								localctx.(*Create_userContext).language_name_or_alias = _x
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					case 3:
						p.SetState(5234)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(5233)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(5236)
							p.Match(TSqlParserSID)
						}
						{
							p.SetState(5237)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(5238)
							p.Match(TSqlParserBINARY)
						}

					case 4:
						p.SetState(5240)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)

						if _la == TSqlParserCOMMA {
							{
								p.SetState(5239)
								p.Match(TSqlParserCOMMA)
							}

						}
						{
							p.SetState(5242)
							p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
						}
						{
							p.SetState(5243)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(5244)
						_la = p.GetTokenStream().LA(1)

						if !(_la == TSqlParserOFF || _la == TSqlParserON) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					}

				}
				p.SetState(5249)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 623, p.GetParserRuleContext())
			}

		case 3:
			{
				p.SetState(5250)

				var _x = p.Id()

				localctx.(*Create_userContext).Azure_Active_Directory_principal = _x
			}
			{
				p.SetState(5251)
				p.Match(TSqlParserFROM)
			}
			{
				p.SetState(5252)
				p.Match(TSqlParserEXTERNAL)
			}
			{
				p.SetState(5253)
				p.Match(TSqlParserPROVIDER)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5257)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5258)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(5259)

			var _x = p.Id()

			localctx.(*Create_userContext).user_name = _x
		}
		p.SetState(5286)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 629, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5260)
				p.Match(TSqlParserWITHOUT)
			}
			{
				p.SetState(5261)
				p.Match(TSqlParserLOGIN)
			}
			p.SetState(5276)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserDEFAULT_SCHEMA || _la == TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la == TSqlParserCOMMA {
				p.SetState(5274)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 627, p.GetParserRuleContext()) {
				case 1:
					p.SetState(5263)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(5262)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(5265)
						p.Match(TSqlParserDEFAULT_SCHEMA)
					}
					{
						p.SetState(5266)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(5267)

						var _x = p.Id()

						localctx.(*Create_userContext).schema_name = _x
					}

				case 2:
					p.SetState(5269)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(5268)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(5271)
						p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
					}
					{
						p.SetState(5272)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(5273)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserOFF || _la == TSqlParserON) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}

				p.SetState(5278)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			p.SetState(5279)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFOR || _la == TSqlParserFROM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(5280)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(5281)

				var _x = p.Id()

				localctx.(*Create_userContext).cert_name = _x
			}

		case 3:
			p.SetState(5282)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFOR || _la == TSqlParserFROM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(5283)
				p.Match(TSqlParserASYMMETRIC)
			}
			{
				p.SetState(5284)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(5285)

				var _x = p.Id()

				localctx.(*Create_userContext).asym_key_name = _x
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5288)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5289)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(5290)

			var _x = p.Id()

			localctx.(*Create_userContext).user_name = _x
		}

	}

	return localctx
}

// ICreate_user_azure_sql_dwContext is an interface to support dynamic dispatch.
type ICreate_user_azure_sql_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// GetLogin_name returns the login_name rule contexts.
	GetLogin_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetAzure_Active_Directory_principal returns the Azure_Active_Directory_principal rule contexts.
	GetAzure_Active_Directory_principal() IIdContext

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// SetLogin_name sets the login_name rule contexts.
	SetLogin_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetAzure_Active_Directory_principal sets the Azure_Active_Directory_principal rule contexts.
	SetAzure_Active_Directory_principal(IIdContext)

	// IsCreate_user_azure_sql_dwContext differentiates from other interfaces.
	IsCreate_user_azure_sql_dwContext()
}

type Create_user_azure_sql_dwContext struct {
	*antlr.BaseParserRuleContext
	parser                           antlr.Parser
	user_name                        IIdContext
	login_name                       IIdContext
	schema_name                      IIdContext
	Azure_Active_Directory_principal IIdContext
}

func NewEmptyCreate_user_azure_sql_dwContext() *Create_user_azure_sql_dwContext {
	var p = new(Create_user_azure_sql_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_user_azure_sql_dw
	return p
}

func (*Create_user_azure_sql_dwContext) IsCreate_user_azure_sql_dwContext() {}

func NewCreate_user_azure_sql_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_user_azure_sql_dwContext {
	var p = new(Create_user_azure_sql_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_user_azure_sql_dw

	return p
}

func (s *Create_user_azure_sql_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_user_azure_sql_dwContext) GetUser_name() IIdContext { return s.user_name }

func (s *Create_user_azure_sql_dwContext) GetLogin_name() IIdContext { return s.login_name }

func (s *Create_user_azure_sql_dwContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Create_user_azure_sql_dwContext) GetAzure_Active_Directory_principal() IIdContext {
	return s.Azure_Active_Directory_principal
}

func (s *Create_user_azure_sql_dwContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Create_user_azure_sql_dwContext) SetLogin_name(v IIdContext) { s.login_name = v }

func (s *Create_user_azure_sql_dwContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Create_user_azure_sql_dwContext) SetAzure_Active_Directory_principal(v IIdContext) {
	s.Azure_Active_Directory_principal = v
}

func (s *Create_user_azure_sql_dwContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_user_azure_sql_dwContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Create_user_azure_sql_dwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_user_azure_sql_dwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_user_azure_sql_dwContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Create_user_azure_sql_dwContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITHOUT, 0)
}

func (s *Create_user_azure_sql_dwContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_user_azure_sql_dwContext) DEFAULT_SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, 0)
}

func (s *Create_user_azure_sql_dwContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_user_azure_sql_dwContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_user_azure_sql_dwContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_user_azure_sql_dwContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Create_user_azure_sql_dwContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_user_azure_sql_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_user_azure_sql_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_user_azure_sql_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_user_azure_sql_dw(s)
	}
}

func (s *Create_user_azure_sql_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_user_azure_sql_dw(s)
	}
}

func (s *Create_user_azure_sql_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_user_azure_sql_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_user_azure_sql_dw() (localctx ICreate_user_azure_sql_dwContext) {
	localctx = NewCreate_user_azure_sql_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, TSqlParserRULE_create_user_azure_sql_dw)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 634, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5293)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5294)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(5295)

			var _x = p.Id()

			localctx.(*Create_user_azure_sql_dwContext).user_name = _x
		}
		p.SetState(5301)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserFOR, TSqlParserFROM:
			p.SetState(5296)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFOR || _la == TSqlParserFROM) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(5297)
				p.Match(TSqlParserLOGIN)
			}
			{
				p.SetState(5298)

				var _x = p.Id()

				localctx.(*Create_user_azure_sql_dwContext).login_name = _x
			}

		case TSqlParserWITHOUT:
			{
				p.SetState(5299)
				p.Match(TSqlParserWITHOUT)
			}
			{
				p.SetState(5300)
				p.Match(TSqlParserLOGIN)
			}

		case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

		default:
		}
		p.SetState(5307)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 632, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5303)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(5304)
				p.Match(TSqlParserDEFAULT_SCHEMA)
			}
			{
				p.SetState(5305)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5306)

				var _x = p.Id()

				localctx.(*Create_user_azure_sql_dwContext).schema_name = _x
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5309)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(5310)
			p.Match(TSqlParserUSER)
		}
		{
			p.SetState(5311)

			var _x = p.Id()

			localctx.(*Create_user_azure_sql_dwContext).Azure_Active_Directory_principal = _x
		}
		{
			p.SetState(5312)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(5313)
			p.Match(TSqlParserEXTERNAL)
		}
		{
			p.SetState(5314)
			p.Match(TSqlParserPROVIDER)
		}
		p.SetState(5319)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 633, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5315)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(5316)
				p.Match(TSqlParserDEFAULT_SCHEMA)
			}
			{
				p.SetState(5317)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5318)

				var _x = p.Id()

				localctx.(*Create_user_azure_sql_dwContext).schema_name = _x
			}

		}

	}

	return localctx
}

// IAlter_user_azure_sqlContext is an interface to support dynamic dispatch.
type IAlter_user_azure_sqlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUsername returns the username rule contexts.
	GetUsername() IIdContext

	// GetNewusername returns the newusername rule contexts.
	GetNewusername() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetLoginame returns the loginame rule contexts.
	GetLoginame() IIdContext

	// SetUsername sets the username rule contexts.
	SetUsername(IIdContext)

	// SetNewusername sets the newusername rule contexts.
	SetNewusername(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetLoginame sets the loginame rule contexts.
	SetLoginame(IIdContext)

	// IsAlter_user_azure_sqlContext differentiates from other interfaces.
	IsAlter_user_azure_sqlContext()
}

type Alter_user_azure_sqlContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	username    IIdContext
	newusername IIdContext
	schema_name IIdContext
	loginame    IIdContext
}

func NewEmptyAlter_user_azure_sqlContext() *Alter_user_azure_sqlContext {
	var p = new(Alter_user_azure_sqlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_user_azure_sql
	return p
}

func (*Alter_user_azure_sqlContext) IsAlter_user_azure_sqlContext() {}

func NewAlter_user_azure_sqlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_user_azure_sqlContext {
	var p = new(Alter_user_azure_sqlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_user_azure_sql

	return p
}

func (s *Alter_user_azure_sqlContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_user_azure_sqlContext) GetUsername() IIdContext { return s.username }

func (s *Alter_user_azure_sqlContext) GetNewusername() IIdContext { return s.newusername }

func (s *Alter_user_azure_sqlContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Alter_user_azure_sqlContext) GetLoginame() IIdContext { return s.loginame }

func (s *Alter_user_azure_sqlContext) SetUsername(v IIdContext) { s.username = v }

func (s *Alter_user_azure_sqlContext) SetNewusername(v IIdContext) { s.newusername = v }

func (s *Alter_user_azure_sqlContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Alter_user_azure_sqlContext) SetLoginame(v IIdContext) { s.loginame = v }

func (s *Alter_user_azure_sqlContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_user_azure_sqlContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Alter_user_azure_sqlContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_user_azure_sqlContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_user_azure_sqlContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_user_azure_sqlContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNAME)
}

func (s *Alter_user_azure_sqlContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, i)
}

func (s *Alter_user_azure_sqlContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_user_azure_sqlContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_user_azure_sqlContext) AllDEFAULT_SCHEMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_SCHEMA)
}

func (s *Alter_user_azure_sqlContext) DEFAULT_SCHEMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_SCHEMA, i)
}

func (s *Alter_user_azure_sqlContext) AllLOGIN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOGIN)
}

func (s *Alter_user_azure_sqlContext) LOGIN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, i)
}

func (s *Alter_user_azure_sqlContext) AllALLOW_ENCRYPTED_VALUE_MODIFICATIONS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
}

func (s *Alter_user_azure_sqlContext) ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i)
}

func (s *Alter_user_azure_sqlContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Alter_user_azure_sqlContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Alter_user_azure_sqlContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Alter_user_azure_sqlContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Alter_user_azure_sqlContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_user_azure_sqlContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_user_azure_sqlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_user_azure_sqlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_user_azure_sqlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_user_azure_sql(s)
	}
}

func (s *Alter_user_azure_sqlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_user_azure_sql(s)
	}
}

func (s *Alter_user_azure_sqlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_user_azure_sql(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_user_azure_sql() (localctx IAlter_user_azure_sqlContext) {
	localctx = NewAlter_user_azure_sqlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, TSqlParserRULE_alter_user_azure_sql)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5323)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(5324)
		p.Match(TSqlParserUSER)
	}
	{
		p.SetState(5325)

		var _x = p.Id()

		localctx.(*Alter_user_azure_sqlContext).username = _x
	}
	{
		p.SetState(5326)
		p.Match(TSqlParserWITH)
	}
	p.SetState(5351)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(5351)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 639, p.GetParserRuleContext()) {
			case 1:
				p.SetState(5328)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5327)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5330)
					p.Match(TSqlParserNAME)
				}
				{
					p.SetState(5331)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5332)

					var _x = p.Id()

					localctx.(*Alter_user_azure_sqlContext).newusername = _x
				}

			case 2:
				p.SetState(5334)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5333)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5336)
					p.Match(TSqlParserDEFAULT_SCHEMA)
				}
				{
					p.SetState(5337)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5338)

					var _x = p.Id()

					localctx.(*Alter_user_azure_sqlContext).schema_name = _x
				}

			case 3:
				p.SetState(5340)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5339)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5342)
					p.Match(TSqlParserLOGIN)
				}
				{
					p.SetState(5343)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5344)

					var _x = p.Id()

					localctx.(*Alter_user_azure_sqlContext).loginame = _x
				}

			case 4:
				p.SetState(5346)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5345)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5348)
					p.Match(TSqlParserALLOW_ENCRYPTED_VALUE_MODIFICATIONS)
				}
				{
					p.SetState(5349)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5350)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserOFF || _la == TSqlParserON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(5353)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 640, p.GetParserRuleContext())
	}

	return localctx
}

// IAlter_workload_groupContext is an interface to support dynamic dispatch.
type IAlter_workload_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRequest_max_memory_grant returns the request_max_memory_grant token.
	GetRequest_max_memory_grant() antlr.Token

	// GetRequest_max_cpu_time_sec returns the request_max_cpu_time_sec token.
	GetRequest_max_cpu_time_sec() antlr.Token

	// GetRequest_memory_grant_timeout_sec returns the request_memory_grant_timeout_sec token.
	GetRequest_memory_grant_timeout_sec() antlr.Token

	// GetMax_dop returns the max_dop token.
	GetMax_dop() antlr.Token

	// GetGroup_max_requests returns the group_max_requests token.
	GetGroup_max_requests() antlr.Token

	// SetRequest_max_memory_grant sets the request_max_memory_grant token.
	SetRequest_max_memory_grant(antlr.Token)

	// SetRequest_max_cpu_time_sec sets the request_max_cpu_time_sec token.
	SetRequest_max_cpu_time_sec(antlr.Token)

	// SetRequest_memory_grant_timeout_sec sets the request_memory_grant_timeout_sec token.
	SetRequest_memory_grant_timeout_sec(antlr.Token)

	// SetMax_dop sets the max_dop token.
	SetMax_dop(antlr.Token)

	// SetGroup_max_requests sets the group_max_requests token.
	SetGroup_max_requests(antlr.Token)

	// GetWorkload_group_group_name returns the workload_group_group_name rule contexts.
	GetWorkload_group_group_name() IIdContext

	// GetWorkload_group_pool_name returns the workload_group_pool_name rule contexts.
	GetWorkload_group_pool_name() IIdContext

	// SetWorkload_group_group_name sets the workload_group_group_name rule contexts.
	SetWorkload_group_group_name(IIdContext)

	// SetWorkload_group_pool_name sets the workload_group_pool_name rule contexts.
	SetWorkload_group_pool_name(IIdContext)

	// IsAlter_workload_groupContext differentiates from other interfaces.
	IsAlter_workload_groupContext()
}

type Alter_workload_groupContext struct {
	*antlr.BaseParserRuleContext
	parser                           antlr.Parser
	workload_group_group_name        IIdContext
	request_max_memory_grant         antlr.Token
	request_max_cpu_time_sec         antlr.Token
	request_memory_grant_timeout_sec antlr.Token
	max_dop                          antlr.Token
	group_max_requests               antlr.Token
	workload_group_pool_name         IIdContext
}

func NewEmptyAlter_workload_groupContext() *Alter_workload_groupContext {
	var p = new(Alter_workload_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_workload_group
	return p
}

func (*Alter_workload_groupContext) IsAlter_workload_groupContext() {}

func NewAlter_workload_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_workload_groupContext {
	var p = new(Alter_workload_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_workload_group

	return p
}

func (s *Alter_workload_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_workload_groupContext) GetRequest_max_memory_grant() antlr.Token {
	return s.request_max_memory_grant
}

func (s *Alter_workload_groupContext) GetRequest_max_cpu_time_sec() antlr.Token {
	return s.request_max_cpu_time_sec
}

func (s *Alter_workload_groupContext) GetRequest_memory_grant_timeout_sec() antlr.Token {
	return s.request_memory_grant_timeout_sec
}

func (s *Alter_workload_groupContext) GetMax_dop() antlr.Token { return s.max_dop }

func (s *Alter_workload_groupContext) GetGroup_max_requests() antlr.Token { return s.group_max_requests }

func (s *Alter_workload_groupContext) SetRequest_max_memory_grant(v antlr.Token) {
	s.request_max_memory_grant = v
}

func (s *Alter_workload_groupContext) SetRequest_max_cpu_time_sec(v antlr.Token) {
	s.request_max_cpu_time_sec = v
}

func (s *Alter_workload_groupContext) SetRequest_memory_grant_timeout_sec(v antlr.Token) {
	s.request_memory_grant_timeout_sec = v
}

func (s *Alter_workload_groupContext) SetMax_dop(v antlr.Token) { s.max_dop = v }

func (s *Alter_workload_groupContext) SetGroup_max_requests(v antlr.Token) { s.group_max_requests = v }

func (s *Alter_workload_groupContext) GetWorkload_group_group_name() IIdContext {
	return s.workload_group_group_name
}

func (s *Alter_workload_groupContext) GetWorkload_group_pool_name() IIdContext {
	return s.workload_group_pool_name
}

func (s *Alter_workload_groupContext) SetWorkload_group_group_name(v IIdContext) {
	s.workload_group_group_name = v
}

func (s *Alter_workload_groupContext) SetWorkload_group_pool_name(v IIdContext) {
	s.workload_group_pool_name = v
}

func (s *Alter_workload_groupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_workload_groupContext) WORKLOAD() antlr.TerminalNode {
	return s.GetToken(TSqlParserWORKLOAD, 0)
}

func (s *Alter_workload_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Alter_workload_groupContext) AllDEFAULT_DOUBLE_QUOTE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_DOUBLE_QUOTE)
}

func (s *Alter_workload_groupContext) DEFAULT_DOUBLE_QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_DOUBLE_QUOTE, i)
}

func (s *Alter_workload_groupContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_workload_groupContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_workload_groupContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_workload_groupContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Alter_workload_groupContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Alter_workload_groupContext) USING() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSING, 0)
}

func (s *Alter_workload_groupContext) AllIMPORTANCE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserIMPORTANCE)
}

func (s *Alter_workload_groupContext) IMPORTANCE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserIMPORTANCE, i)
}

func (s *Alter_workload_groupContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_workload_groupContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_workload_groupContext) AllREQUEST_MAX_MEMORY_GRANT_PERCENT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT)
}

func (s *Alter_workload_groupContext) REQUEST_MAX_MEMORY_GRANT_PERCENT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT, i)
}

func (s *Alter_workload_groupContext) AllREQUEST_MAX_CPU_TIME_SEC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MAX_CPU_TIME_SEC)
}

func (s *Alter_workload_groupContext) REQUEST_MAX_CPU_TIME_SEC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MAX_CPU_TIME_SEC, i)
}

func (s *Alter_workload_groupContext) AllREQUEST_MEMORY_GRANT_TIMEOUT_SEC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC)
}

func (s *Alter_workload_groupContext) REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)
}

func (s *Alter_workload_groupContext) AllMAX_DOP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_DOP)
}

func (s *Alter_workload_groupContext) MAX_DOP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_DOP, i)
}

func (s *Alter_workload_groupContext) AllGROUP_MAX_REQUESTS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGROUP_MAX_REQUESTS)
}

func (s *Alter_workload_groupContext) GROUP_MAX_REQUESTS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP_MAX_REQUESTS, i)
}

func (s *Alter_workload_groupContext) AllLOW() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOW)
}

func (s *Alter_workload_groupContext) LOW(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOW, i)
}

func (s *Alter_workload_groupContext) AllMEDIUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIUM)
}

func (s *Alter_workload_groupContext) MEDIUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIUM, i)
}

func (s *Alter_workload_groupContext) AllHIGH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserHIGH)
}

func (s *Alter_workload_groupContext) HIGH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserHIGH, i)
}

func (s *Alter_workload_groupContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_workload_groupContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_workload_groupContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_workload_groupContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_workload_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_workload_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_workload_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_workload_group(s)
	}
}

func (s *Alter_workload_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_workload_group(s)
	}
}

func (s *Alter_workload_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_workload_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_workload_group() (localctx IAlter_workload_groupContext) {
	localctx = NewAlter_workload_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, TSqlParserRULE_alter_workload_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5355)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(5356)
		p.Match(TSqlParserWORKLOAD)
	}
	{
		p.SetState(5357)
		p.Match(TSqlParserGROUP)
	}
	p.SetState(5360)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(5358)

			var _x = p.Id()

			localctx.(*Alter_workload_groupContext).workload_group_group_name = _x
		}

	case TSqlParserDEFAULT_DOUBLE_QUOTE:
		{
			p.SetState(5359)
			p.Match(TSqlParserDEFAULT_DOUBLE_QUOTE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5393)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 646, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5362)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(5363)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(5388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserGROUP_MAX_REQUESTS || _la == TSqlParserIMPORTANCE || _la == TSqlParserMAX_DOP || (((_la-675)&-(0x1f+1)) == 0 && ((1<<uint((_la-675)))&((1<<(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT-675))|(1<<(TSqlParserREQUEST_MAX_CPU_TIME_SEC-675))|(1<<(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC-675)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(5388)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 644, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(5364)
					p.Match(TSqlParserIMPORTANCE)
				}
				{
					p.SetState(5365)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5366)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserHIGH || _la == TSqlParserLOW || _la == TSqlParserMEDIUM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case 2:
				p.SetState(5368)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5367)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5370)
					p.Match(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT)
				}
				{
					p.SetState(5371)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5372)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_workload_groupContext).request_max_memory_grant = _m
				}

			case 3:
				p.SetState(5374)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5373)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5376)
					p.Match(TSqlParserREQUEST_MAX_CPU_TIME_SEC)
				}
				{
					p.SetState(5377)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5378)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_workload_groupContext).request_max_cpu_time_sec = _m
				}

			case 4:
				{
					p.SetState(5379)
					p.Match(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC)
				}
				{
					p.SetState(5380)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5381)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_workload_groupContext).request_memory_grant_timeout_sec = _m
				}

			case 5:
				{
					p.SetState(5382)
					p.Match(TSqlParserMAX_DOP)
				}
				{
					p.SetState(5383)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5384)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_workload_groupContext).max_dop = _m
				}

			case 6:
				{
					p.SetState(5385)
					p.Match(TSqlParserGROUP_MAX_REQUESTS)
				}
				{
					p.SetState(5386)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5387)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Alter_workload_groupContext).group_max_requests = _m
				}

			}

			p.SetState(5390)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5392)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(5400)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 648, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5395)
			p.Match(TSqlParserUSING)
		}
		p.SetState(5398)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(5396)

				var _x = p.Id()

				localctx.(*Alter_workload_groupContext).workload_group_pool_name = _x
			}

		case TSqlParserDEFAULT_DOUBLE_QUOTE:
			{
				p.SetState(5397)
				p.Match(TSqlParserDEFAULT_DOUBLE_QUOTE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ICreate_workload_groupContext is an interface to support dynamic dispatch.
type ICreate_workload_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRequest_max_memory_grant returns the request_max_memory_grant token.
	GetRequest_max_memory_grant() antlr.Token

	// GetRequest_max_cpu_time_sec returns the request_max_cpu_time_sec token.
	GetRequest_max_cpu_time_sec() antlr.Token

	// GetRequest_memory_grant_timeout_sec returns the request_memory_grant_timeout_sec token.
	GetRequest_memory_grant_timeout_sec() antlr.Token

	// GetMax_dop returns the max_dop token.
	GetMax_dop() antlr.Token

	// GetGroup_max_requests returns the group_max_requests token.
	GetGroup_max_requests() antlr.Token

	// SetRequest_max_memory_grant sets the request_max_memory_grant token.
	SetRequest_max_memory_grant(antlr.Token)

	// SetRequest_max_cpu_time_sec sets the request_max_cpu_time_sec token.
	SetRequest_max_cpu_time_sec(antlr.Token)

	// SetRequest_memory_grant_timeout_sec sets the request_memory_grant_timeout_sec token.
	SetRequest_memory_grant_timeout_sec(antlr.Token)

	// SetMax_dop sets the max_dop token.
	SetMax_dop(antlr.Token)

	// SetGroup_max_requests sets the group_max_requests token.
	SetGroup_max_requests(antlr.Token)

	// GetWorkload_group_group_name returns the workload_group_group_name rule contexts.
	GetWorkload_group_group_name() IIdContext

	// GetWorkload_group_pool_name returns the workload_group_pool_name rule contexts.
	GetWorkload_group_pool_name() IIdContext

	// GetExternal_pool_name returns the external_pool_name rule contexts.
	GetExternal_pool_name() IIdContext

	// SetWorkload_group_group_name sets the workload_group_group_name rule contexts.
	SetWorkload_group_group_name(IIdContext)

	// SetWorkload_group_pool_name sets the workload_group_pool_name rule contexts.
	SetWorkload_group_pool_name(IIdContext)

	// SetExternal_pool_name sets the external_pool_name rule contexts.
	SetExternal_pool_name(IIdContext)

	// IsCreate_workload_groupContext differentiates from other interfaces.
	IsCreate_workload_groupContext()
}

type Create_workload_groupContext struct {
	*antlr.BaseParserRuleContext
	parser                           antlr.Parser
	workload_group_group_name        IIdContext
	request_max_memory_grant         antlr.Token
	request_max_cpu_time_sec         antlr.Token
	request_memory_grant_timeout_sec antlr.Token
	max_dop                          antlr.Token
	group_max_requests               antlr.Token
	workload_group_pool_name         IIdContext
	external_pool_name               IIdContext
}

func NewEmptyCreate_workload_groupContext() *Create_workload_groupContext {
	var p = new(Create_workload_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_workload_group
	return p
}

func (*Create_workload_groupContext) IsCreate_workload_groupContext() {}

func NewCreate_workload_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_workload_groupContext {
	var p = new(Create_workload_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_workload_group

	return p
}

func (s *Create_workload_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_workload_groupContext) GetRequest_max_memory_grant() antlr.Token {
	return s.request_max_memory_grant
}

func (s *Create_workload_groupContext) GetRequest_max_cpu_time_sec() antlr.Token {
	return s.request_max_cpu_time_sec
}

func (s *Create_workload_groupContext) GetRequest_memory_grant_timeout_sec() antlr.Token {
	return s.request_memory_grant_timeout_sec
}

func (s *Create_workload_groupContext) GetMax_dop() antlr.Token { return s.max_dop }

func (s *Create_workload_groupContext) GetGroup_max_requests() antlr.Token {
	return s.group_max_requests
}

func (s *Create_workload_groupContext) SetRequest_max_memory_grant(v antlr.Token) {
	s.request_max_memory_grant = v
}

func (s *Create_workload_groupContext) SetRequest_max_cpu_time_sec(v antlr.Token) {
	s.request_max_cpu_time_sec = v
}

func (s *Create_workload_groupContext) SetRequest_memory_grant_timeout_sec(v antlr.Token) {
	s.request_memory_grant_timeout_sec = v
}

func (s *Create_workload_groupContext) SetMax_dop(v antlr.Token) { s.max_dop = v }

func (s *Create_workload_groupContext) SetGroup_max_requests(v antlr.Token) { s.group_max_requests = v }

func (s *Create_workload_groupContext) GetWorkload_group_group_name() IIdContext {
	return s.workload_group_group_name
}

func (s *Create_workload_groupContext) GetWorkload_group_pool_name() IIdContext {
	return s.workload_group_pool_name
}

func (s *Create_workload_groupContext) GetExternal_pool_name() IIdContext { return s.external_pool_name }

func (s *Create_workload_groupContext) SetWorkload_group_group_name(v IIdContext) {
	s.workload_group_group_name = v
}

func (s *Create_workload_groupContext) SetWorkload_group_pool_name(v IIdContext) {
	s.workload_group_pool_name = v
}

func (s *Create_workload_groupContext) SetExternal_pool_name(v IIdContext) { s.external_pool_name = v }

func (s *Create_workload_groupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_workload_groupContext) WORKLOAD() antlr.TerminalNode {
	return s.GetToken(TSqlParserWORKLOAD, 0)
}

func (s *Create_workload_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Create_workload_groupContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_workload_groupContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_workload_groupContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_workload_groupContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_workload_groupContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_workload_groupContext) USING() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSING, 0)
}

func (s *Create_workload_groupContext) AllIMPORTANCE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserIMPORTANCE)
}

func (s *Create_workload_groupContext) IMPORTANCE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserIMPORTANCE, i)
}

func (s *Create_workload_groupContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Create_workload_groupContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Create_workload_groupContext) AllREQUEST_MAX_MEMORY_GRANT_PERCENT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT)
}

func (s *Create_workload_groupContext) REQUEST_MAX_MEMORY_GRANT_PERCENT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT, i)
}

func (s *Create_workload_groupContext) AllREQUEST_MAX_CPU_TIME_SEC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MAX_CPU_TIME_SEC)
}

func (s *Create_workload_groupContext) REQUEST_MAX_CPU_TIME_SEC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MAX_CPU_TIME_SEC, i)
}

func (s *Create_workload_groupContext) AllREQUEST_MEMORY_GRANT_TIMEOUT_SEC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC)
}

func (s *Create_workload_groupContext) REQUEST_MEMORY_GRANT_TIMEOUT_SEC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC, i)
}

func (s *Create_workload_groupContext) AllMAX_DOP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAX_DOP)
}

func (s *Create_workload_groupContext) MAX_DOP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_DOP, i)
}

func (s *Create_workload_groupContext) AllGROUP_MAX_REQUESTS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGROUP_MAX_REQUESTS)
}

func (s *Create_workload_groupContext) GROUP_MAX_REQUESTS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP_MAX_REQUESTS, i)
}

func (s *Create_workload_groupContext) AllDEFAULT_DOUBLE_QUOTE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT_DOUBLE_QUOTE)
}

func (s *Create_workload_groupContext) DEFAULT_DOUBLE_QUOTE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_DOUBLE_QUOTE, i)
}

func (s *Create_workload_groupContext) EXTERNAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXTERNAL, 0)
}

func (s *Create_workload_groupContext) AllLOW() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOW)
}

func (s *Create_workload_groupContext) LOW(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOW, i)
}

func (s *Create_workload_groupContext) AllMEDIUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIUM)
}

func (s *Create_workload_groupContext) MEDIUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIUM, i)
}

func (s *Create_workload_groupContext) AllHIGH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserHIGH)
}

func (s *Create_workload_groupContext) HIGH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserHIGH, i)
}

func (s *Create_workload_groupContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Create_workload_groupContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Create_workload_groupContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_workload_groupContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_workload_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_workload_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_workload_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_workload_group(s)
	}
}

func (s *Create_workload_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_workload_group(s)
	}
}

func (s *Create_workload_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_workload_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_workload_group() (localctx ICreate_workload_groupContext) {
	localctx = NewCreate_workload_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, TSqlParserRULE_create_workload_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5402)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5403)
		p.Match(TSqlParserWORKLOAD)
	}
	{
		p.SetState(5404)
		p.Match(TSqlParserGROUP)
	}
	{
		p.SetState(5405)

		var _x = p.Id()

		localctx.(*Create_workload_groupContext).workload_group_group_name = _x
	}
	p.SetState(5437)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 653, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5406)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(5407)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(5432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserGROUP_MAX_REQUESTS || _la == TSqlParserIMPORTANCE || _la == TSqlParserMAX_DOP || (((_la-675)&-(0x1f+1)) == 0 && ((1<<uint((_la-675)))&((1<<(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT-675))|(1<<(TSqlParserREQUEST_MAX_CPU_TIME_SEC-675))|(1<<(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC-675)))) != 0) || _la == TSqlParserCOMMA {
			p.SetState(5432)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 651, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(5408)
					p.Match(TSqlParserIMPORTANCE)
				}
				{
					p.SetState(5409)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(5410)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserHIGH || _la == TSqlParserLOW || _la == TSqlParserMEDIUM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			case 2:
				p.SetState(5412)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5411)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5414)
					p.Match(TSqlParserREQUEST_MAX_MEMORY_GRANT_PERCENT)
				}
				{
					p.SetState(5415)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5416)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_workload_groupContext).request_max_memory_grant = _m
				}

			case 3:
				p.SetState(5418)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(5417)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(5420)
					p.Match(TSqlParserREQUEST_MAX_CPU_TIME_SEC)
				}
				{
					p.SetState(5421)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5422)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_workload_groupContext).request_max_cpu_time_sec = _m
				}

			case 4:
				{
					p.SetState(5423)
					p.Match(TSqlParserREQUEST_MEMORY_GRANT_TIMEOUT_SEC)
				}
				{
					p.SetState(5424)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5425)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_workload_groupContext).request_memory_grant_timeout_sec = _m
				}

			case 5:
				{
					p.SetState(5426)
					p.Match(TSqlParserMAX_DOP)
				}
				{
					p.SetState(5427)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5428)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_workload_groupContext).max_dop = _m
				}

			case 6:
				{
					p.SetState(5429)
					p.Match(TSqlParserGROUP_MAX_REQUESTS)
				}
				{
					p.SetState(5430)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(5431)

					var _m = p.Match(TSqlParserDECIMAL)

					localctx.(*Create_workload_groupContext).group_max_requests = _m
				}

			}

			p.SetState(5434)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5436)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(5452)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 657, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5439)
			p.Match(TSqlParserUSING)
		}
		p.SetState(5442)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 654, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5440)

				var _x = p.Id()

				localctx.(*Create_workload_groupContext).workload_group_pool_name = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 654, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5441)
				p.Match(TSqlParserDEFAULT_DOUBLE_QUOTE)
			}

		}
		p.SetState(5450)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserEXTERNAL, TSqlParserCOMMA:
			p.SetState(5445)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5444)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5447)
				p.Match(TSqlParserEXTERNAL)
			}
			{
				p.SetState(5448)

				var _x = p.Id()

				localctx.(*Create_workload_groupContext).external_pool_name = _x
			}

		case TSqlParserDEFAULT_DOUBLE_QUOTE:
			{
				p.SetState(5449)
				p.Match(TSqlParserDEFAULT_DOUBLE_QUOTE)
			}

		case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

		default:
		}

	}

	return localctx
}

// ICreate_xml_schema_collectionContext is an interface to support dynamic dispatch.
type ICreate_xml_schema_collectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRelational_schema returns the relational_schema rule contexts.
	GetRelational_schema() IIdContext

	// GetSql_identifier returns the sql_identifier rule contexts.
	GetSql_identifier() IIdContext

	// SetRelational_schema sets the relational_schema rule contexts.
	SetRelational_schema(IIdContext)

	// SetSql_identifier sets the sql_identifier rule contexts.
	SetSql_identifier(IIdContext)

	// IsCreate_xml_schema_collectionContext differentiates from other interfaces.
	IsCreate_xml_schema_collectionContext()
}

type Create_xml_schema_collectionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	relational_schema IIdContext
	sql_identifier    IIdContext
}

func NewEmptyCreate_xml_schema_collectionContext() *Create_xml_schema_collectionContext {
	var p = new(Create_xml_schema_collectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_xml_schema_collection
	return p
}

func (*Create_xml_schema_collectionContext) IsCreate_xml_schema_collectionContext() {}

func NewCreate_xml_schema_collectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_xml_schema_collectionContext {
	var p = new(Create_xml_schema_collectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_xml_schema_collection

	return p
}

func (s *Create_xml_schema_collectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_xml_schema_collectionContext) GetRelational_schema() IIdContext {
	return s.relational_schema
}

func (s *Create_xml_schema_collectionContext) GetSql_identifier() IIdContext { return s.sql_identifier }

func (s *Create_xml_schema_collectionContext) SetRelational_schema(v IIdContext) {
	s.relational_schema = v
}

func (s *Create_xml_schema_collectionContext) SetSql_identifier(v IIdContext) { s.sql_identifier = v }

func (s *Create_xml_schema_collectionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_xml_schema_collectionContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Create_xml_schema_collectionContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Create_xml_schema_collectionContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Create_xml_schema_collectionContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_xml_schema_collectionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_xml_schema_collectionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_xml_schema_collectionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_xml_schema_collectionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Create_xml_schema_collectionContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *Create_xml_schema_collectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_xml_schema_collectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_xml_schema_collectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_xml_schema_collection(s)
	}
}

func (s *Create_xml_schema_collectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_xml_schema_collection(s)
	}
}

func (s *Create_xml_schema_collectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_xml_schema_collection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_xml_schema_collection() (localctx ICreate_xml_schema_collectionContext) {
	localctx = NewCreate_xml_schema_collectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, TSqlParserRULE_create_xml_schema_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5454)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5455)
		p.Match(TSqlParserXML)
	}
	{
		p.SetState(5456)
		p.Match(TSqlParserSCHEMA)
	}
	{
		p.SetState(5457)
		p.Match(TSqlParserCOLLECTION)
	}
	p.SetState(5461)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 658, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5458)

			var _x = p.Id()

			localctx.(*Create_xml_schema_collectionContext).relational_schema = _x
		}
		{
			p.SetState(5459)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(5463)

		var _x = p.Id()

		localctx.(*Create_xml_schema_collectionContext).sql_identifier = _x
	}
	{
		p.SetState(5464)
		p.Match(TSqlParserAS)
	}
	p.SetState(5468)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSTRING:
		{
			p.SetState(5465)
			p.Match(TSqlParserSTRING)
		}

	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(5466)
			p.Id()
		}

	case TSqlParserLOCAL_ID:
		{
			p.SetState(5467)
			p.Match(TSqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_queueContext is an interface to support dynamic dispatch.
type ICreate_queueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// GetFilegroup returns the filegroup rule contexts.
	GetFilegroup() IIdContext

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// SetFilegroup sets the filegroup rule contexts.
	SetFilegroup(IIdContext)

	// IsCreate_queueContext differentiates from other interfaces.
	IsCreate_queueContext()
}

type Create_queueContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	queue_name IIdContext
	filegroup  IIdContext
}

func NewEmptyCreate_queueContext() *Create_queueContext {
	var p = new(Create_queueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_queue
	return p
}

func (*Create_queueContext) IsCreate_queueContext() {}

func NewCreate_queueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_queueContext {
	var p = new(Create_queueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_queue

	return p
}

func (s *Create_queueContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_queueContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Create_queueContext) GetFilegroup() IIdContext { return s.filegroup }

func (s *Create_queueContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Create_queueContext) SetFilegroup(v IIdContext) { s.filegroup = v }

func (s *Create_queueContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_queueContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Create_queueContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Create_queueContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_queueContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_queueContext) Queue_settings() IQueue_settingsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueue_settingsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueue_settingsContext)
}

func (s *Create_queueContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_queueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Create_queueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_queueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_queueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_queue(s)
	}
}

func (s *Create_queueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_queue(s)
	}
}

func (s *Create_queueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_queue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_queue() (localctx ICreate_queueContext) {
	localctx = NewCreate_queueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, TSqlParserRULE_create_queue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5470)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5471)
		p.Match(TSqlParserQUEUE)
	}
	p.SetState(5474)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 660, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5472)
			p.Full_table_name()
		}

	case 2:
		{
			p.SetState(5473)

			var _x = p.Id()

			localctx.(*Create_queueContext).queue_name = _x
		}

	}
	p.SetState(5477)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 661, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5476)
			p.Queue_settings()
		}

	}
	p.SetState(5482)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserON:
		{
			p.SetState(5479)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(5480)

			var _x = p.Id()

			localctx.(*Create_queueContext).filegroup = _x
		}

	case TSqlParserDEFAULT:
		{
			p.SetState(5481)
			p.Match(TSqlParserDEFAULT)
		}

	case TSqlParserEOF, TSqlParserALTER, TSqlParserBACKUP, TSqlParserBEGIN, TSqlParserBREAK, TSqlParserCALLED, TSqlParserCLOSE, TSqlParserCOMMIT, TSqlParserCONTINUE, TSqlParserCREATE, TSqlParserDATA_COMPRESSION, TSqlParserDBCC, TSqlParserDEALLOCATE, TSqlParserDECLARE, TSqlParserDELETE, TSqlParserDROP, TSqlParserELSE, TSqlParserEND, TSqlParserEVENTDATA, TSqlParserEXECUTE, TSqlParserFETCH, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserGET, TSqlParserGOTO, TSqlParserGRANT, TSqlParserIF, TSqlParserINSERT, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserMERGE, TSqlParserOFFSETS, TSqlParserOPEN, TSqlParserPAGE, TSqlParserPRINT, TSqlParserPUBLIC, TSqlParserRAISERROR, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserREVERT, TSqlParserROLLBACK, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSAVE, TSqlParserSELECT, TSqlParserSERVER, TSqlParserSET, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserTRUNCATE, TSqlParserUPDATE, TSqlParserUSE, TSqlParserWAITFOR, TSqlParserWHILE, TSqlParserWITH, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENABLE, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGO, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSEND, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID, TSqlParserLR_BRACKET, TSqlParserSEMI:

	default:
	}

	return localctx
}

// IQueue_settingsContext is an interface to support dynamic dispatch.
type IQueue_settingsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMax_readers returns the max_readers token.
	GetMax_readers() antlr.Token

	// GetUser_name returns the user_name token.
	GetUser_name() antlr.Token

	// SetMax_readers sets the max_readers token.
	SetMax_readers(antlr.Token)

	// SetUser_name sets the user_name token.
	SetUser_name(antlr.Token)

	// IsQueue_settingsContext differentiates from other interfaces.
	IsQueue_settingsContext()
}

type Queue_settingsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	max_readers antlr.Token
	user_name   antlr.Token
}

func NewEmptyQueue_settingsContext() *Queue_settingsContext {
	var p = new(Queue_settingsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_queue_settings
	return p
}

func (*Queue_settingsContext) IsQueue_settingsContext() {}

func NewQueue_settingsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Queue_settingsContext {
	var p = new(Queue_settingsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_queue_settings

	return p
}

func (s *Queue_settingsContext) GetParser() antlr.Parser { return s.parser }

func (s *Queue_settingsContext) GetMax_readers() antlr.Token { return s.max_readers }

func (s *Queue_settingsContext) GetUser_name() antlr.Token { return s.user_name }

func (s *Queue_settingsContext) SetMax_readers(v antlr.Token) { s.max_readers = v }

func (s *Queue_settingsContext) SetUser_name(v antlr.Token) { s.user_name = v }

func (s *Queue_settingsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Queue_settingsContext) AllSTATUS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTATUS)
}

func (s *Queue_settingsContext) STATUS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATUS, i)
}

func (s *Queue_settingsContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Queue_settingsContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Queue_settingsContext) RETENTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETENTION, 0)
}

func (s *Queue_settingsContext) ACTIVATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTIVATION, 0)
}

func (s *Queue_settingsContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Queue_settingsContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Queue_settingsContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Queue_settingsContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Queue_settingsContext) AllOFF() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOFF)
}

func (s *Queue_settingsContext) OFF(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, i)
}

func (s *Queue_settingsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Queue_settingsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Queue_settingsContext) PROCEDURE_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROCEDURE_NAME, 0)
}

func (s *Queue_settingsContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Queue_settingsContext) MAX_QUEUE_READERS() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_QUEUE_READERS, 0)
}

func (s *Queue_settingsContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTE, 0)
}

func (s *Queue_settingsContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Queue_settingsContext) POISON_MESSAGE_HANDLING() antlr.TerminalNode {
	return s.GetToken(TSqlParserPOISON_MESSAGE_HANDLING, 0)
}

func (s *Queue_settingsContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Queue_settingsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Queue_settingsContext) SELF() antlr.TerminalNode {
	return s.GetToken(TSqlParserSELF, 0)
}

func (s *Queue_settingsContext) OWNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOWNER, 0)
}

func (s *Queue_settingsContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Queue_settingsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Queue_settingsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Queue_settingsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQueue_settings(s)
	}
}

func (s *Queue_settingsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQueue_settings(s)
	}
}

func (s *Queue_settingsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQueue_settings(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Queue_settings() (localctx IQueue_settingsContext) {
	localctx = NewQueue_settingsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, TSqlParserRULE_queue_settings)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5484)
		p.Match(TSqlParserWITH)
	}
	p.SetState(5491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSTATUS {
		{
			p.SetState(5485)
			p.Match(TSqlParserSTATUS)
		}
		{
			p.SetState(5486)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(5487)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5489)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(5488)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(5499)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserRETENTION {
		{
			p.SetState(5493)
			p.Match(TSqlParserRETENTION)
		}
		{
			p.SetState(5494)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(5495)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(5496)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(5555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserACTIVATION {
		{
			p.SetState(5501)
			p.Match(TSqlParserACTIVATION)
		}
		{
			p.SetState(5502)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(5509)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 668, p.GetParserRuleContext()) == 1 {
			p.SetState(5504)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5503)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5506)
				p.Match(TSqlParserSTATUS)
			}
			{
				p.SetState(5507)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(5508)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(5517)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 670, p.GetParserRuleContext()) == 1 {
			p.SetState(5512)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5511)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5514)
				p.Match(TSqlParserPROCEDURE_NAME)
			}
			{
				p.SetState(5515)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5516)
				p.Func_proc_name()
			}

		}
		p.SetState(5525)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 672, p.GetParserRuleContext()) == 1 {
			p.SetState(5520)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5519)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5522)
				p.Match(TSqlParserMAX_QUEUE_READERS)
			}
			{
				p.SetState(5523)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(5524)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Queue_settingsContext).max_readers = _m
			}

		}
		p.SetState(5537)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 675, p.GetParserRuleContext()) == 1 {
			p.SetState(5528)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5527)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5530)
				p.Match(TSqlParserEXECUTE)
			}
			{
				p.SetState(5531)
				p.Match(TSqlParserAS)
			}
			p.SetState(5535)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSELF:
				{
					p.SetState(5532)
					p.Match(TSqlParserSELF)
				}

			case TSqlParserSTRING:
				{
					p.SetState(5533)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Queue_settingsContext).user_name = _m
				}

			case TSqlParserOWNER:
				{
					p.SetState(5534)
					p.Match(TSqlParserOWNER)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(5546)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 677, p.GetParserRuleContext()) == 1 {
			p.SetState(5540)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5539)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5542)
				p.Match(TSqlParserPOISON_MESSAGE_HANDLING)
			}
			{
				p.SetState(5543)
				p.Match(TSqlParserSTATUS)
			}
			{
				p.SetState(5544)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(5545)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(5552)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDROP || _la == TSqlParserCOMMA {
			p.SetState(5549)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(5548)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(5551)
				p.Match(TSqlParserDROP)
			}

		}
		{
			p.SetState(5554)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IAlter_queueContext is an interface to support dynamic dispatch.
type IAlter_queueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQueue_name returns the queue_name rule contexts.
	GetQueue_name() IIdContext

	// SetQueue_name sets the queue_name rule contexts.
	SetQueue_name(IIdContext)

	// IsAlter_queueContext differentiates from other interfaces.
	IsAlter_queueContext()
}

type Alter_queueContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	queue_name IIdContext
}

func NewEmptyAlter_queueContext() *Alter_queueContext {
	var p = new(Alter_queueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_queue
	return p
}

func (*Alter_queueContext) IsAlter_queueContext() {}

func NewAlter_queueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_queueContext {
	var p = new(Alter_queueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_queue

	return p
}

func (s *Alter_queueContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_queueContext) GetQueue_name() IIdContext { return s.queue_name }

func (s *Alter_queueContext) SetQueue_name(v IIdContext) { s.queue_name = v }

func (s *Alter_queueContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_queueContext) QUEUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUEUE, 0)
}

func (s *Alter_queueContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Alter_queueContext) Queue_settings() IQueue_settingsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueue_settingsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueue_settingsContext)
}

func (s *Alter_queueContext) Queue_action() IQueue_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueue_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueue_actionContext)
}

func (s *Alter_queueContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_queueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_queueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_queueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_queue(s)
	}
}

func (s *Alter_queueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_queue(s)
	}
}

func (s *Alter_queueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_queue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_queue() (localctx IAlter_queueContext) {
	localctx = NewAlter_queueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, TSqlParserRULE_alter_queue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5557)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(5558)
		p.Match(TSqlParserQUEUE)
	}
	p.SetState(5561)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 681, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5559)
			p.Full_table_name()
		}

	case 2:
		{
			p.SetState(5560)

			var _x = p.Id()

			localctx.(*Alter_queueContext).queue_name = _x
		}

	}
	p.SetState(5565)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserWITH:
		{
			p.SetState(5563)
			p.Queue_settings()
		}

	case TSqlParserMOVE, TSqlParserREBUILD, TSqlParserREORGANIZE:
		{
			p.SetState(5564)
			p.Queue_action()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueue_actionContext is an interface to support dynamic dispatch.
type IQueue_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueue_actionContext differentiates from other interfaces.
	IsQueue_actionContext()
}

type Queue_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueue_actionContext() *Queue_actionContext {
	var p = new(Queue_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_queue_action
	return p
}

func (*Queue_actionContext) IsQueue_actionContext() {}

func NewQueue_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Queue_actionContext {
	var p = new(Queue_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_queue_action

	return p
}

func (s *Queue_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *Queue_actionContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(TSqlParserREBUILD, 0)
}

func (s *Queue_actionContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Queue_actionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Queue_actionContext) Queue_rebuild_options() IQueue_rebuild_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueue_rebuild_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueue_rebuild_optionsContext)
}

func (s *Queue_actionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Queue_actionContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREORGANIZE, 0)
}

func (s *Queue_actionContext) LOB_COMPACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOB_COMPACTION, 0)
}

func (s *Queue_actionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Queue_actionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Queue_actionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Queue_actionContext) MOVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMOVE, 0)
}

func (s *Queue_actionContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Queue_actionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Queue_actionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Queue_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Queue_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Queue_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQueue_action(s)
	}
}

func (s *Queue_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQueue_action(s)
	}
}

func (s *Queue_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQueue_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Queue_action() (localctx IQueue_actionContext) {
	localctx = NewQueue_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, TSqlParserRULE_queue_action)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5588)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserREBUILD:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5567)
			p.Match(TSqlParserREBUILD)
		}
		p.SetState(5573)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 683, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5568)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(5569)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(5570)
				p.Queue_rebuild_options()
			}
			{
				p.SetState(5571)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	case TSqlParserREORGANIZE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5575)
			p.Match(TSqlParserREORGANIZE)
		}
		p.SetState(5580)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 684, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5576)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(5577)
				p.Match(TSqlParserLOB_COMPACTION)
			}
			{
				p.SetState(5578)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(5579)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case TSqlParserMOVE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5582)
			p.Match(TSqlParserMOVE)
		}
		{
			p.SetState(5583)
			p.Match(TSqlParserTO)
		}
		p.SetState(5586)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(5584)
				p.Id()
			}

		case TSqlParserDEFAULT:
			{
				p.SetState(5585)
				p.Match(TSqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueue_rebuild_optionsContext is an interface to support dynamic dispatch.
type IQueue_rebuild_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueue_rebuild_optionsContext differentiates from other interfaces.
	IsQueue_rebuild_optionsContext()
}

type Queue_rebuild_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueue_rebuild_optionsContext() *Queue_rebuild_optionsContext {
	var p = new(Queue_rebuild_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_queue_rebuild_options
	return p
}

func (*Queue_rebuild_optionsContext) IsQueue_rebuild_optionsContext() {}

func NewQueue_rebuild_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Queue_rebuild_optionsContext {
	var p = new(Queue_rebuild_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_queue_rebuild_options

	return p
}

func (s *Queue_rebuild_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Queue_rebuild_optionsContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXDOP, 0)
}

func (s *Queue_rebuild_optionsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Queue_rebuild_optionsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Queue_rebuild_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Queue_rebuild_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Queue_rebuild_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQueue_rebuild_options(s)
	}
}

func (s *Queue_rebuild_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQueue_rebuild_options(s)
	}
}

func (s *Queue_rebuild_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQueue_rebuild_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Queue_rebuild_options() (localctx IQueue_rebuild_optionsContext) {
	localctx = NewQueue_rebuild_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, TSqlParserRULE_queue_rebuild_options)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5590)
		p.Match(TSqlParserMAXDOP)
	}
	{
		p.SetState(5591)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(5592)
		p.Match(TSqlParserDECIMAL)
	}

	return localctx
}

// ICreate_contractContext is an interface to support dynamic dispatch.
type ICreate_contractContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetMessage_type_name returns the message_type_name rule contexts.
	GetMessage_type_name() IIdContext

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetMessage_type_name sets the message_type_name rule contexts.
	SetMessage_type_name(IIdContext)

	// IsCreate_contractContext differentiates from other interfaces.
	IsCreate_contractContext()
}

type Create_contractContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	owner_name        IIdContext
	message_type_name IIdContext
}

func NewEmptyCreate_contractContext() *Create_contractContext {
	var p = new(Create_contractContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_contract
	return p
}

func (*Create_contractContext) IsCreate_contractContext() {}

func NewCreate_contractContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_contractContext {
	var p = new(Create_contractContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_contract

	return p
}

func (s *Create_contractContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_contractContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Create_contractContext) GetMessage_type_name() IIdContext { return s.message_type_name }

func (s *Create_contractContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Create_contractContext) SetMessage_type_name(v IIdContext) { s.message_type_name = v }

func (s *Create_contractContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_contractContext) CONTRACT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTRACT, 0)
}

func (s *Create_contractContext) Contract_name() IContract_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContract_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContract_nameContext)
}

func (s *Create_contractContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_contractContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_contractContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_contractContext) AllSENT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSENT)
}

func (s *Create_contractContext) SENT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSENT, i)
}

func (s *Create_contractContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBY)
}

func (s *Create_contractContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, i)
}

func (s *Create_contractContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_contractContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_contractContext) AllINITIATOR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserINITIATOR)
}

func (s *Create_contractContext) INITIATOR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserINITIATOR, i)
}

func (s *Create_contractContext) AllTARGET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTARGET)
}

func (s *Create_contractContext) TARGET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTARGET, i)
}

func (s *Create_contractContext) AllANY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserANY)
}

func (s *Create_contractContext) ANY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserANY, i)
}

func (s *Create_contractContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT)
}

func (s *Create_contractContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, i)
}

func (s *Create_contractContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Create_contractContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Create_contractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_contractContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_contractContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_contract(s)
	}
}

func (s *Create_contractContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_contract(s)
	}
}

func (s *Create_contractContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_contract(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_contract() (localctx ICreate_contractContext) {
	localctx = NewCreate_contractContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, TSqlParserRULE_create_contract)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5594)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5595)
		p.Match(TSqlParserCONTRACT)
	}
	{
		p.SetState(5596)
		p.Contract_name()
	}
	p.SetState(5599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(5597)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(5598)

			var _x = p.Id()

			localctx.(*Create_contractContext).owner_name = _x
		}

	}
	{
		p.SetState(5601)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(5612)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || _la == TSqlParserDEFAULT || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
		p.SetState(5604)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(5602)

				var _x = p.Id()

				localctx.(*Create_contractContext).message_type_name = _x
			}

		case TSqlParserDEFAULT:
			{
				p.SetState(5603)
				p.Match(TSqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5606)
			p.Match(TSqlParserSENT)
		}
		{
			p.SetState(5607)
			p.Match(TSqlParserBY)
		}
		p.SetState(5608)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserANY || _la == TSqlParserTARGET || _la == TSqlParserINITIATOR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5610)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(5609)
				p.Match(TSqlParserCOMMA)
			}

		}

		p.SetState(5614)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5616)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IConversation_statementContext is an interface to support dynamic dispatch.
type IConversation_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversation_statementContext differentiates from other interfaces.
	IsConversation_statementContext()
}

type Conversation_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversation_statementContext() *Conversation_statementContext {
	var p = new(Conversation_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_conversation_statement
	return p
}

func (*Conversation_statementContext) IsConversation_statementContext() {}

func NewConversation_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Conversation_statementContext {
	var p = new(Conversation_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_conversation_statement

	return p
}

func (s *Conversation_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Conversation_statementContext) Begin_conversation_timer() IBegin_conversation_timerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBegin_conversation_timerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBegin_conversation_timerContext)
}

func (s *Conversation_statementContext) Begin_conversation_dialog() IBegin_conversation_dialogContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBegin_conversation_dialogContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBegin_conversation_dialogContext)
}

func (s *Conversation_statementContext) End_conversation() IEnd_conversationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnd_conversationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnd_conversationContext)
}

func (s *Conversation_statementContext) Get_conversation() IGet_conversationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGet_conversationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGet_conversationContext)
}

func (s *Conversation_statementContext) Send_conversation() ISend_conversationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISend_conversationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISend_conversationContext)
}

func (s *Conversation_statementContext) Waitfor_conversation() IWaitfor_conversationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWaitfor_conversationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWaitfor_conversationContext)
}

func (s *Conversation_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Conversation_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Conversation_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterConversation_statement(s)
	}
}

func (s *Conversation_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitConversation_statement(s)
	}
}

func (s *Conversation_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitConversation_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Conversation_statement() (localctx IConversation_statementContext) {
	localctx = NewConversation_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, TSqlParserRULE_conversation_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5624)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 691, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5618)
			p.Begin_conversation_timer()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5619)
			p.Begin_conversation_dialog()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5620)
			p.End_conversation()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5621)
			p.Get_conversation()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5622)
			p.Send_conversation()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5623)
			p.Waitfor_conversation()
		}

	}

	return localctx
}

// IMessage_statementContext is an interface to support dynamic dispatch.
type IMessage_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMessage_type_name returns the message_type_name rule contexts.
	GetMessage_type_name() IIdContext

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetSchema_collection_name returns the schema_collection_name rule contexts.
	GetSchema_collection_name() IIdContext

	// SetMessage_type_name sets the message_type_name rule contexts.
	SetMessage_type_name(IIdContext)

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetSchema_collection_name sets the schema_collection_name rule contexts.
	SetSchema_collection_name(IIdContext)

	// IsMessage_statementContext differentiates from other interfaces.
	IsMessage_statementContext()
}

type Message_statementContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	message_type_name      IIdContext
	owner_name             IIdContext
	schema_collection_name IIdContext
}

func NewEmptyMessage_statementContext() *Message_statementContext {
	var p = new(Message_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_message_statement
	return p
}

func (*Message_statementContext) IsMessage_statementContext() {}

func NewMessage_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Message_statementContext {
	var p = new(Message_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_message_statement

	return p
}

func (s *Message_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Message_statementContext) GetMessage_type_name() IIdContext { return s.message_type_name }

func (s *Message_statementContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Message_statementContext) GetSchema_collection_name() IIdContext {
	return s.schema_collection_name
}

func (s *Message_statementContext) SetMessage_type_name(v IIdContext) { s.message_type_name = v }

func (s *Message_statementContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Message_statementContext) SetSchema_collection_name(v IIdContext) {
	s.schema_collection_name = v
}

func (s *Message_statementContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Message_statementContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE, 0)
}

func (s *Message_statementContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Message_statementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Message_statementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Message_statementContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALIDATION, 0)
}

func (s *Message_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Message_statementContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Message_statementContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Message_statementContext) EMPTY() antlr.TerminalNode {
	return s.GetToken(TSqlParserEMPTY, 0)
}

func (s *Message_statementContext) WELL_FORMED_XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserWELL_FORMED_XML, 0)
}

func (s *Message_statementContext) VALID_XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALID_XML, 0)
}

func (s *Message_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Message_statementContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMA, 0)
}

func (s *Message_statementContext) COLLECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLECTION, 0)
}

func (s *Message_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Message_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Message_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMessage_statement(s)
	}
}

func (s *Message_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMessage_statement(s)
	}
}

func (s *Message_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMessage_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Message_statement() (localctx IMessage_statementContext) {
	localctx = NewMessage_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, TSqlParserRULE_message_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5626)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(5627)
		p.Match(TSqlParserMESSAGE)
	}
	{
		p.SetState(5628)
		p.Match(TSqlParserTYPE)
	}
	{
		p.SetState(5629)

		var _x = p.Id()

		localctx.(*Message_statementContext).message_type_name = _x
	}
	p.SetState(5632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(5630)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(5631)

			var _x = p.Id()

			localctx.(*Message_statementContext).owner_name = _x
		}

	}

	{
		p.SetState(5634)
		p.Match(TSqlParserVALIDATION)
	}
	{
		p.SetState(5635)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(5644)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserNONE:
		{
			p.SetState(5636)
			p.Match(TSqlParserNONE)
		}

	case TSqlParserEMPTY:
		{
			p.SetState(5637)
			p.Match(TSqlParserEMPTY)
		}

	case TSqlParserWELL_FORMED_XML:
		{
			p.SetState(5638)
			p.Match(TSqlParserWELL_FORMED_XML)
		}

	case TSqlParserVALID_XML:
		{
			p.SetState(5639)
			p.Match(TSqlParserVALID_XML)
		}
		{
			p.SetState(5640)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(5641)
			p.Match(TSqlParserSCHEMA)
		}
		{
			p.SetState(5642)
			p.Match(TSqlParserCOLLECTION)
		}
		{
			p.SetState(5643)

			var _x = p.Id()

			localctx.(*Message_statementContext).schema_collection_name = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMerge_statementContext is an interface to support dynamic dispatch.
type IMerge_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_statementContext differentiates from other interfaces.
	IsMerge_statementContext()
}

type Merge_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_statementContext() *Merge_statementContext {
	var p = new(Merge_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_merge_statement
	return p
}

func (*Merge_statementContext) IsMerge_statementContext() {}

func NewMerge_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_statementContext {
	var p = new(Merge_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_merge_statement

	return p
}

func (s *Merge_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_statementContext) MERGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMERGE, 0)
}

func (s *Merge_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Merge_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSING, 0)
}

func (s *Merge_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Merge_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Merge_statementContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Merge_statementContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Merge_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Merge_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTOP, 0)
}

func (s *Merge_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Merge_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Merge_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Merge_statementContext) As_table_alias() IAs_table_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_table_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_table_aliasContext)
}

func (s *Merge_statementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserWHEN)
}

func (s *Merge_statementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserWHEN, i)
}

func (s *Merge_statementContext) AllMATCHED() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMATCHED)
}

func (s *Merge_statementContext) MATCHED(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMATCHED, i)
}

func (s *Merge_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTHEN)
}

func (s *Merge_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTHEN, i)
}

func (s *Merge_statementContext) AllMerge_matched() []IMerge_matchedContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMerge_matchedContext)(nil)).Elem())
	var tst = make([]IMerge_matchedContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMerge_matchedContext)
		}
	}

	return tst
}

func (s *Merge_statementContext) Merge_matched(i int) IMerge_matchedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMerge_matchedContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMerge_matchedContext)
}

func (s *Merge_statementContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOT)
}

func (s *Merge_statementContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, i)
}

func (s *Merge_statementContext) Merge_not_matched() IMerge_not_matchedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMerge_not_matchedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMerge_not_matchedContext)
}

func (s *Merge_statementContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBY)
}

func (s *Merge_statementContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, i)
}

func (s *Merge_statementContext) AllSOURCE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSOURCE)
}

func (s *Merge_statementContext) SOURCE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSOURCE, i)
}

func (s *Merge_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Merge_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Merge_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Merge_statementContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAND)
}

func (s *Merge_statementContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, i)
}

func (s *Merge_statementContext) TARGET() antlr.TerminalNode {
	return s.GetToken(TSqlParserTARGET, 0)
}

func (s *Merge_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMerge_statement(s)
	}
}

func (s *Merge_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMerge_statement(s)
	}
}

func (s *Merge_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMerge_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Merge_statement() (localctx IMerge_statementContext) {
	localctx = NewMerge_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, TSqlParserRULE_merge_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5646)
			p.With_expression()
		}

	}
	{
		p.SetState(5649)
		p.Match(TSqlParserMERGE)
	}
	p.SetState(5657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTOP {
		{
			p.SetState(5650)
			p.Match(TSqlParserTOP)
		}
		{
			p.SetState(5651)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5652)
			p.expression(0)
		}
		{
			p.SetState(5653)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(5655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPERCENT {
			{
				p.SetState(5654)
				p.Match(TSqlParserPERCENT)
			}

		}

	}
	p.SetState(5660)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(5659)
			p.Match(TSqlParserINTO)
		}

	}
	{
		p.SetState(5662)
		p.Ddl_object()
	}
	p.SetState(5664)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5663)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(5667)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 699, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5666)
			p.As_table_alias()
		}

	}
	{
		p.SetState(5669)
		p.Match(TSqlParserUSING)
	}
	{
		p.SetState(5670)
		p.Table_sources()
	}
	{
		p.SetState(5671)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(5672)
		p.Search_condition()
	}
	p.SetState(5683)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 701, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5673)
				p.Match(TSqlParserWHEN)
			}
			{
				p.SetState(5674)
				p.Match(TSqlParserMATCHED)
			}
			p.SetState(5677)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserAND {
				{
					p.SetState(5675)
					p.Match(TSqlParserAND)
				}
				{
					p.SetState(5676)
					p.Search_condition()
				}

			}
			{
				p.SetState(5679)
				p.Match(TSqlParserTHEN)
			}
			{
				p.SetState(5680)
				p.Merge_matched()
			}

		}
		p.SetState(5685)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 701, p.GetParserRuleContext())
	}
	p.SetState(5699)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 704, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5686)
			p.Match(TSqlParserWHEN)
		}
		{
			p.SetState(5687)
			p.Match(TSqlParserNOT)
		}
		{
			p.SetState(5688)
			p.Match(TSqlParserMATCHED)
		}
		p.SetState(5691)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBY {
			{
				p.SetState(5689)
				p.Match(TSqlParserBY)
			}
			{
				p.SetState(5690)
				p.Match(TSqlParserTARGET)
			}

		}
		p.SetState(5695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAND {
			{
				p.SetState(5693)
				p.Match(TSqlParserAND)
			}
			{
				p.SetState(5694)
				p.Search_condition()
			}

		}
		{
			p.SetState(5697)
			p.Match(TSqlParserTHEN)
		}
		{
			p.SetState(5698)
			p.Merge_not_matched()
		}

	}
	p.SetState(5714)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserWHEN {
		{
			p.SetState(5701)
			p.Match(TSqlParserWHEN)
		}
		{
			p.SetState(5702)
			p.Match(TSqlParserNOT)
		}
		{
			p.SetState(5703)
			p.Match(TSqlParserMATCHED)
		}
		{
			p.SetState(5704)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(5705)
			p.Match(TSqlParserSOURCE)
		}
		p.SetState(5708)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAND {
			{
				p.SetState(5706)
				p.Match(TSqlParserAND)
			}
			{
				p.SetState(5707)
				p.Search_condition()
			}

		}
		{
			p.SetState(5710)
			p.Match(TSqlParserTHEN)
		}
		{
			p.SetState(5711)
			p.Merge_matched()
		}

		p.SetState(5716)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5718)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOUTPUT {
		{
			p.SetState(5717)
			p.Output_clause()
		}

	}
	p.SetState(5721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOPTION {
		{
			p.SetState(5720)
			p.Option_clause()
		}

	}
	{
		p.SetState(5723)
		p.Match(TSqlParserSEMI)
	}

	return localctx
}

// IMerge_matchedContext is an interface to support dynamic dispatch.
type IMerge_matchedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_matchedContext differentiates from other interfaces.
	IsMerge_matchedContext()
}

type Merge_matchedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_matchedContext() *Merge_matchedContext {
	var p = new(Merge_matchedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_merge_matched
	return p
}

func (*Merge_matchedContext) IsMerge_matchedContext() {}

func NewMerge_matchedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_matchedContext {
	var p = new(Merge_matchedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_merge_matched

	return p
}

func (s *Merge_matchedContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_matchedContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *Merge_matchedContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Merge_matchedContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Merge_matchedContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Merge_matchedContext) DELETE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, 0)
}

func (s *Merge_matchedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_matchedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_matchedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMerge_matched(s)
	}
}

func (s *Merge_matchedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMerge_matched(s)
	}
}

func (s *Merge_matchedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMerge_matched(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Merge_matched() (localctx IMerge_matchedContext) {
	localctx = NewMerge_matchedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, TSqlParserRULE_merge_matched)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5736)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserUPDATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5725)
			p.Match(TSqlParserUPDATE)
		}
		{
			p.SetState(5726)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(5727)
			p.Update_elem()
		}
		p.SetState(5732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(5728)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(5729)
				p.Update_elem()
			}

			p.SetState(5734)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case TSqlParserDELETE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5735)
			p.Match(TSqlParserDELETE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMerge_not_matchedContext is an interface to support dynamic dispatch.
type IMerge_not_matchedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMerge_not_matchedContext differentiates from other interfaces.
	IsMerge_not_matchedContext()
}

type Merge_not_matchedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMerge_not_matchedContext() *Merge_not_matchedContext {
	var p = new(Merge_not_matchedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_merge_not_matched
	return p
}

func (*Merge_not_matchedContext) IsMerge_not_matchedContext() {}

func NewMerge_not_matchedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Merge_not_matchedContext {
	var p = new(Merge_not_matchedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_merge_not_matched

	return p
}

func (s *Merge_not_matchedContext) GetParser() antlr.Parser { return s.parser }

func (s *Merge_not_matchedContext) INSERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, 0)
}

func (s *Merge_not_matchedContext) Table_value_constructor() ITable_value_constructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_value_constructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_value_constructorContext)
}

func (s *Merge_not_matchedContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Merge_not_matchedContext) VALUES() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUES, 0)
}

func (s *Merge_not_matchedContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Merge_not_matchedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Merge_not_matchedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Merge_not_matchedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMerge_not_matched(s)
	}
}

func (s *Merge_not_matchedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMerge_not_matched(s)
	}
}

func (s *Merge_not_matchedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMerge_not_matched(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Merge_not_matched() (localctx IMerge_not_matchedContext) {
	localctx = NewMerge_not_matchedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, TSqlParserRULE_merge_not_matched)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5738)
		p.Match(TSqlParserINSERT)
	}
	p.SetState(5743)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLR_BRACKET {
		{
			p.SetState(5739)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5740)
			p.Column_name_list()
		}
		{
			p.SetState(5741)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(5748)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserVALUES:
		{
			p.SetState(5745)
			p.Table_value_constructor()
		}

	case TSqlParserDEFAULT:
		{
			p.SetState(5746)
			p.Match(TSqlParserDEFAULT)
		}
		{
			p.SetState(5747)
			p.Match(TSqlParserVALUES)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_var returns the cursor_var token.
	GetCursor_var() antlr.Token

	// SetCursor_var sets the cursor_var token.
	SetCursor_var(antlr.Token)

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	cursor_var antlr.Token
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_delete_statement
	return p
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) GetCursor_var() antlr.Token { return s.cursor_var }

func (s *Delete_statementContext) SetCursor_var(v antlr.Token) { s.cursor_var = v }

func (s *Delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, 0)
}

func (s *Delete_statementContext) Delete_statement_from() IDelete_statement_fromContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statement_fromContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statement_fromContext)
}

func (s *Delete_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Delete_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTOP, 0)
}

func (s *Delete_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Delete_statementContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFROM)
}

func (s *Delete_statementContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, i)
}

func (s *Delete_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Delete_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Delete_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Delete_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Delete_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Delete_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Delete_statementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT, 0)
}

func (s *Delete_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOF, 0)
}

func (s *Delete_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Delete_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Delete_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Delete_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, TSqlParserRULE_delete_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5751)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5750)
			p.With_expression()
		}

	}
	{
		p.SetState(5753)
		p.Match(TSqlParserDELETE)
	}
	p.SetState(5761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTOP {
		{
			p.SetState(5754)
			p.Match(TSqlParserTOP)
		}
		{
			p.SetState(5755)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5756)
			p.expression(0)
		}
		{
			p.SetState(5757)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(5759)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPERCENT {
			{
				p.SetState(5758)
				p.Match(TSqlParserPERCENT)
			}

		}

	}
	p.SetState(5764)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(5763)
			p.Match(TSqlParserFROM)
		}

	}
	{
		p.SetState(5766)
		p.Delete_statement_from()
	}
	p.SetState(5768)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 717, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5767)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(5771)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 718, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5770)
			p.Output_clause()
		}

	}
	p.SetState(5775)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(5773)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(5774)
			p.Table_sources()
		}

	}
	p.SetState(5790)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWHERE {
		{
			p.SetState(5777)
			p.Match(TSqlParserWHERE)
		}
		p.SetState(5788)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserCASE, TSqlParserCOALESCE, TSqlParserCONVERT, TSqlParserCURRENT_TIMESTAMP, TSqlParserCURRENT_USER, TSqlParserDATA_COMPRESSION, TSqlParserDEFAULT, TSqlParserEVENTDATA, TSqlParserEXISTS, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserIDENTITY, TSqlParserISNULL, TSqlParserKEY, TSqlParserLEFT, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserNOT, TSqlParserNULL, TSqlParserNULLIF, TSqlParserOFFSETS, TSqlParserOVER, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserRIGHT, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSESSION_USER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserSYSTEM_USER, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserANSI_NULLS, TSqlParserANSI_PADDING, TSqlParserANSI_WARNINGS, TSqlParserAPPLY, TSqlParserARITHABORT, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserBINARY_CHECKSUM, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCOMPATIBILITY_LEVEL, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDATEADD, TSqlParserDATEDIFF, TSqlParserDATENAME, TSqlParserDATEPART, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFIRST_VALUE, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGETDATE, TSqlParserGETUTCDATE, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAG, TSqlParserLAST, TSqlParserLAST_VALUE, TSqlParserLEAD, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMIN_ACTIVE_ROWVERSION, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserQUOTED_IDENTIFIER, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTATUS, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSTUFF, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserID, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserLR_BRACKET, TSqlParserPLUS, TSqlParserMINUS, TSqlParserBIT_NOT:
			{
				p.SetState(5778)
				p.Search_condition()
			}

		case TSqlParserCURRENT:
			{
				p.SetState(5779)
				p.Match(TSqlParserCURRENT)
			}
			{
				p.SetState(5780)
				p.Match(TSqlParserOF)
			}
			p.SetState(5786)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 721, p.GetParserRuleContext()) {
			case 1:
				p.SetState(5782)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 720, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(5781)
						p.Match(TSqlParserGLOBAL)
					}

				}
				{
					p.SetState(5784)
					p.Cursor_name()
				}

			case 2:
				{
					p.SetState(5785)

					var _m = p.Match(TSqlParserLOCAL_ID)

					localctx.(*Delete_statementContext).cursor_var = _m
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(5793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(5792)
			p.For_clause()
		}

	}
	p.SetState(5796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOPTION {
		{
			p.SetState(5795)
			p.Option_clause()
		}

	}
	p.SetState(5799)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 726, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5798)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDelete_statement_fromContext is an interface to support dynamic dispatch.
type IDelete_statement_fromContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_var returns the table_var token.
	GetTable_var() antlr.Token

	// SetTable_var sets the table_var token.
	SetTable_var(antlr.Token)

	// IsDelete_statement_fromContext differentiates from other interfaces.
	IsDelete_statement_fromContext()
}

type Delete_statement_fromContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	table_var antlr.Token
}

func NewEmptyDelete_statement_fromContext() *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_delete_statement_from
	return p
}

func (*Delete_statement_fromContext) IsDelete_statement_fromContext() {}

func NewDelete_statement_fromContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statement_fromContext {
	var p = new(Delete_statement_fromContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_delete_statement_from

	return p
}

func (s *Delete_statement_fromContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statement_fromContext) GetTable_var() antlr.Token { return s.table_var }

func (s *Delete_statement_fromContext) SetTable_var(v antlr.Token) { s.table_var = v }

func (s *Delete_statement_fromContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Delete_statement_fromContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *Delete_statement_fromContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Delete_statement_fromContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Delete_statement_fromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statement_fromContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statement_fromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDelete_statement_from(s)
	}
}

func (s *Delete_statement_fromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDelete_statement_from(s)
	}
}

func (s *Delete_statement_fromContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDelete_statement_from(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Delete_statement_from() (localctx IDelete_statement_fromContext) {
	localctx = NewDelete_statement_fromContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, TSqlParserRULE_delete_statement_from)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5805)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 727, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5801)
			p.Ddl_object()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5802)
			p.Table_alias()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5803)
			p.Rowset_function_limited()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5804)

			var _m = p.Match(TSqlParserLOCAL_ID)

			localctx.(*Delete_statement_fromContext).table_var = _m
		}

	}

	return localctx
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_insert_statement
	return p
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, 0)
}

func (s *Insert_statementContext) Insert_statement_value() IInsert_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_valueContext)
}

func (s *Insert_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Insert_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Insert_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Insert_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTOP, 0)
}

func (s *Insert_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Insert_statementContext) Insert_with_table_hints() IInsert_with_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_with_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_with_table_hintsContext)
}

func (s *Insert_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Insert_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Insert_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Insert_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Insert_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, TSqlParserRULE_insert_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5808)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5807)
			p.With_expression()
		}

	}
	{
		p.SetState(5810)
		p.Match(TSqlParserINSERT)
	}
	p.SetState(5818)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTOP {
		{
			p.SetState(5811)
			p.Match(TSqlParserTOP)
		}
		{
			p.SetState(5812)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5813)
			p.expression(0)
		}
		{
			p.SetState(5814)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(5816)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPERCENT {
			{
				p.SetState(5815)
				p.Match(TSqlParserPERCENT)
			}

		}

	}
	p.SetState(5821)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(5820)
			p.Match(TSqlParserINTO)
		}

	}
	p.SetState(5825)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserID:
		{
			p.SetState(5823)
			p.Ddl_object()
		}

	case TSqlParserOPENDATASOURCE, TSqlParserOPENQUERY:
		{
			p.SetState(5824)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5828)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 733, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5827)
			p.Insert_with_table_hints()
		}

	}
	p.SetState(5834)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 734, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5830)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5831)
			p.Column_name_list()
		}
		{
			p.SetState(5832)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(5837)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOUTPUT {
		{
			p.SetState(5836)
			p.Output_clause()
		}

	}
	{
		p.SetState(5839)
		p.Insert_statement_value()
	}
	p.SetState(5841)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(5840)
			p.For_clause()
		}

	}
	p.SetState(5844)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOPTION {
		{
			p.SetState(5843)
			p.Option_clause()
		}

	}
	p.SetState(5847)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 738, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5846)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IInsert_statement_valueContext is an interface to support dynamic dispatch.
type IInsert_statement_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statement_valueContext differentiates from other interfaces.
	IsInsert_statement_valueContext()
}

type Insert_statement_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statement_valueContext() *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_insert_statement_value
	return p
}

func (*Insert_statement_valueContext) IsInsert_statement_valueContext() {}

func NewInsert_statement_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_insert_statement_value

	return p
}

func (s *Insert_statement_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statement_valueContext) Table_value_constructor() ITable_value_constructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_value_constructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_value_constructorContext)
}

func (s *Insert_statement_valueContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Insert_statement_valueContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Insert_statement_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Insert_statement_valueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUES, 0)
}

func (s *Insert_statement_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statement_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statement_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitInsert_statement_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Insert_statement_value() (localctx IInsert_statement_valueContext) {
	localctx = NewInsert_statement_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, TSqlParserRULE_insert_statement_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5854)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 739, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5849)
			p.Table_value_constructor()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5850)
			p.Derived_table()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5851)
			p.Execute_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5852)
			p.Match(TSqlParserDEFAULT)
		}
		{
			p.SetState(5853)
			p.Match(TSqlParserVALUES)
		}

	}

	return localctx
}

// IReceive_statementContext is an interface to support dynamic dispatch.
type IReceive_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTable_variable returns the table_variable rule contexts.
	GetTable_variable() IIdContext

	// GetWhere returns the where rule contexts.
	GetWhere() ISearch_conditionContext

	// SetTable_variable sets the table_variable rule contexts.
	SetTable_variable(IIdContext)

	// SetWhere sets the where rule contexts.
	SetWhere(ISearch_conditionContext)

	// IsReceive_statementContext differentiates from other interfaces.
	IsReceive_statementContext()
}

type Receive_statementContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	table_variable IIdContext
	where          ISearch_conditionContext
}

func NewEmptyReceive_statementContext() *Receive_statementContext {
	var p = new(Receive_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_receive_statement
	return p
}

func (*Receive_statementContext) IsReceive_statementContext() {}

func NewReceive_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Receive_statementContext {
	var p = new(Receive_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_receive_statement

	return p
}

func (s *Receive_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Receive_statementContext) GetTable_variable() IIdContext { return s.table_variable }

func (s *Receive_statementContext) GetWhere() ISearch_conditionContext { return s.where }

func (s *Receive_statementContext) SetTable_variable(v IIdContext) { s.table_variable = v }

func (s *Receive_statementContext) SetWhere(v ISearch_conditionContext) { s.where = v }

func (s *Receive_statementContext) RECEIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECEIVE, 0)
}

func (s *Receive_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Receive_statementContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Receive_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Receive_statementContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISTINCT, 0)
}

func (s *Receive_statementContext) Top_clause() ITop_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clauseContext)
}

func (s *Receive_statementContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCAL_ID)
}

func (s *Receive_statementContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, i)
}

func (s *Receive_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Receive_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Receive_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Receive_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Receive_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Receive_statementContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Receive_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Receive_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Receive_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterReceive_statement(s)
	}
}

func (s *Receive_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitReceive_statement(s)
	}
}

func (s *Receive_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitReceive_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Receive_statement() (localctx IReceive_statementContext) {
	localctx = NewReceive_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, TSqlParserRULE_receive_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLR_BRACKET {
		{
			p.SetState(5856)
			p.Match(TSqlParserLR_BRACKET)
		}

	}
	{
		p.SetState(5859)
		p.Match(TSqlParserRECEIVE)
	}
	p.SetState(5864)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserALL:
		{
			p.SetState(5860)
			p.Match(TSqlParserALL)
		}

	case TSqlParserDISTINCT:
		{
			p.SetState(5861)
			p.Match(TSqlParserDISTINCT)
		}

	case TSqlParserTOP:
		{
			p.SetState(5862)
			p.Top_clause()
		}

	case TSqlParserSTAR:
		{
			p.SetState(5863)
			p.Match(TSqlParserSTAR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5874)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserLOCAL_ID {
		{
			p.SetState(5866)
			p.Match(TSqlParserLOCAL_ID)
		}
		{
			p.SetState(5867)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(5868)
			p.expression(0)
		}
		p.SetState(5870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(5869)
				p.Match(TSqlParserCOMMA)
			}

		}

		p.SetState(5876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5877)
		p.Match(TSqlParserFROM)
	}
	{
		p.SetState(5878)
		p.Full_table_name()
	}
	p.SetState(5884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(5879)
			p.Match(TSqlParserINTO)
		}
		{
			p.SetState(5880)

			var _x = p.Id()

			localctx.(*Receive_statementContext).table_variable = _x
		}

		{
			p.SetState(5881)
			p.Match(TSqlParserWHERE)
		}
		{
			p.SetState(5882)

			var _x = p.Search_condition()

			localctx.(*Receive_statementContext).where = _x
		}

	}
	p.SetState(5887)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserRR_BRACKET {
		{
			p.SetState(5886)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_select_statement
	return p
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Select_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Select_statementContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Select_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Select_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSelect_statement(s)
	}
}

func (s *Select_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSelect_statement(s)
	}
}

func (s *Select_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSelect_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, TSqlParserRULE_select_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5889)
			p.With_expression()
		}

	}
	{
		p.SetState(5892)
		p.Query_expression()
	}
	p.SetState(5894)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 747, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5893)
			p.Order_by_clause()
		}

	}
	p.SetState(5897)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 748, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5896)
			p.For_clause()
		}

	}
	p.SetState(5900)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 749, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5899)
			p.Option_clause()
		}

	}
	p.SetState(5903)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 750, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5902)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ITimeContext is an interface to support dynamic dispatch.
type ITimeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeContext differentiates from other interfaces.
	IsTimeContext()
}

type TimeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeContext() *TimeContext {
	var p = new(TimeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_time
	return p
}

func (*TimeContext) IsTimeContext() {}

func NewTimeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeContext {
	var p = new(TimeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_time

	return p
}

func (s *TimeContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *TimeContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *TimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TimeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTime(s)
	}
}

func (s *TimeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTime(s)
	}
}

func (s *TimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTime(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Time() (localctx ITimeContext) {
	localctx = NewTimeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, TSqlParserRULE_time)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5907)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserLOCAL_ID:
		{
			p.SetState(5905)
			p.Match(TSqlParserLOCAL_ID)
		}

	case TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
		{
			p.SetState(5906)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCursor_var returns the cursor_var token.
	GetCursor_var() antlr.Token

	// SetCursor_var sets the cursor_var token.
	SetCursor_var(antlr.Token)

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	cursor_var antlr.Token
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_update_statement
	return p
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) GetCursor_var() antlr.Token { return s.cursor_var }

func (s *Update_statementContext) SetCursor_var(v antlr.Token) { s.cursor_var = v }

func (s *Update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *Update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Update_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Update_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Update_statementContext) Ddl_object() IDdl_objectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_objectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_objectContext)
}

func (s *Update_statementContext) Rowset_function_limited() IRowset_function_limitedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_function_limitedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_function_limitedContext)
}

func (s *Update_statementContext) With_expression() IWith_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_expressionContext)
}

func (s *Update_statementContext) TOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTOP, 0)
}

func (s *Update_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_statementContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Update_statementContext) Output_clause() IOutput_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_clauseContext)
}

func (s *Update_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Update_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Update_statementContext) For_clause() IFor_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_clauseContext)
}

func (s *Update_statementContext) Option_clause() IOption_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOption_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOption_clauseContext)
}

func (s *Update_statementContext) Search_condition_list() ISearch_condition_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_listContext)
}

func (s *Update_statementContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT, 0)
}

func (s *Update_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOF, 0)
}

func (s *Update_statementContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Update_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Update_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Update_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, TSqlParserRULE_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5910)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(5909)
			p.With_expression()
		}

	}
	{
		p.SetState(5912)
		p.Match(TSqlParserUPDATE)
	}
	p.SetState(5920)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTOP {
		{
			p.SetState(5913)
			p.Match(TSqlParserTOP)
		}
		{
			p.SetState(5914)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(5915)
			p.expression(0)
		}
		{
			p.SetState(5916)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(5918)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPERCENT {
			{
				p.SetState(5917)
				p.Match(TSqlParserPERCENT)
			}

		}

	}
	p.SetState(5924)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserID:
		{
			p.SetState(5922)
			p.Ddl_object()
		}

	case TSqlParserOPENDATASOURCE, TSqlParserOPENQUERY:
		{
			p.SetState(5923)
			p.Rowset_function_limited()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(5927)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH || _la == TSqlParserLR_BRACKET {
		{
			p.SetState(5926)
			p.With_table_hints()
		}

	}
	{
		p.SetState(5929)
		p.Match(TSqlParserSET)
	}
	{
		p.SetState(5930)
		p.Update_elem()
	}
	p.SetState(5935)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(5931)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(5932)
			p.Update_elem()
		}

		p.SetState(5937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5939)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 758, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5938)
			p.Output_clause()
		}

	}
	p.SetState(5943)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(5941)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(5942)
			p.Table_sources()
		}

	}
	p.SetState(5958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWHERE {
		{
			p.SetState(5945)
			p.Match(TSqlParserWHERE)
		}
		p.SetState(5956)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserCASE, TSqlParserCOALESCE, TSqlParserCONVERT, TSqlParserCURRENT_TIMESTAMP, TSqlParserCURRENT_USER, TSqlParserDATA_COMPRESSION, TSqlParserDEFAULT, TSqlParserEVENTDATA, TSqlParserEXISTS, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserIDENTITY, TSqlParserISNULL, TSqlParserKEY, TSqlParserLEFT, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserNOT, TSqlParserNULL, TSqlParserNULLIF, TSqlParserOFFSETS, TSqlParserOVER, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserRIGHT, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSESSION_USER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserSYSTEM_USER, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserANSI_NULLS, TSqlParserANSI_PADDING, TSqlParserANSI_WARNINGS, TSqlParserAPPLY, TSqlParserARITHABORT, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserBINARY_CHECKSUM, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCOMPATIBILITY_LEVEL, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDATEADD, TSqlParserDATEDIFF, TSqlParserDATENAME, TSqlParserDATEPART, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFIRST_VALUE, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGETDATE, TSqlParserGETUTCDATE, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAG, TSqlParserLAST, TSqlParserLAST_VALUE, TSqlParserLEAD, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMIN_ACTIVE_ROWVERSION, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserQUOTED_IDENTIFIER, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTATUS, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSTUFF, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserID, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserLR_BRACKET, TSqlParserPLUS, TSqlParserMINUS, TSqlParserBIT_NOT:
			{
				p.SetState(5946)
				p.Search_condition_list()
			}

		case TSqlParserCURRENT:
			{
				p.SetState(5947)
				p.Match(TSqlParserCURRENT)
			}
			{
				p.SetState(5948)
				p.Match(TSqlParserOF)
			}
			p.SetState(5954)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 761, p.GetParserRuleContext()) {
			case 1:
				p.SetState(5950)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 760, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(5949)
						p.Match(TSqlParserGLOBAL)
					}

				}
				{
					p.SetState(5952)
					p.Cursor_name()
				}

			case 2:
				{
					p.SetState(5953)

					var _m = p.Match(TSqlParserLOCAL_ID)

					localctx.(*Update_statementContext).cursor_var = _m
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(5961)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(5960)
			p.For_clause()
		}

	}
	p.SetState(5964)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOPTION {
		{
			p.SetState(5963)
			p.Option_clause()
		}

	}
	p.SetState(5967)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 766, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5966)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IOutput_clauseContext is an interface to support dynamic dispatch.
type IOutput_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_clauseContext differentiates from other interfaces.
	IsOutput_clauseContext()
}

type Output_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_clauseContext() *Output_clauseContext {
	var p = new(Output_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_output_clause
	return p
}

func (*Output_clauseContext) IsOutput_clauseContext() {}

func NewOutput_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_clauseContext {
	var p = new(Output_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_output_clause

	return p
}

func (s *Output_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_clauseContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUTPUT, 0)
}

func (s *Output_clauseContext) AllOutput_dml_list_elem() []IOutput_dml_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem())
	var tst = make([]IOutput_dml_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOutput_dml_list_elemContext)
		}
	}

	return tst
}

func (s *Output_clauseContext) Output_dml_list_elem(i int) IOutput_dml_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_dml_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOutput_dml_list_elemContext)
}

func (s *Output_clauseContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Output_clauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Output_clauseContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_clauseContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Output_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOutput_clause(s)
	}
}

func (s *Output_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOutput_clause(s)
	}
}

func (s *Output_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOutput_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Output_clause() (localctx IOutput_clauseContext) {
	localctx = NewOutput_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, TSqlParserRULE_output_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5969)
		p.Match(TSqlParserOUTPUT)
	}
	{
		p.SetState(5970)
		p.Output_dml_list_elem()
	}
	p.SetState(5975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(5971)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(5972)
			p.Output_dml_list_elem()
		}

		p.SetState(5977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(5989)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(5978)
			p.Match(TSqlParserINTO)
		}
		p.SetState(5981)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserLOCAL_ID:
			{
				p.SetState(5979)
				p.Match(TSqlParserLOCAL_ID)
			}

		case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(5980)
				p.Table_name()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5987)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 769, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5983)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(5984)
				p.Column_name_list()
			}
			{
				p.SetState(5985)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	}

	return localctx
}

// IOutput_dml_list_elemContext is an interface to support dynamic dispatch.
type IOutput_dml_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_dml_list_elemContext differentiates from other interfaces.
	IsOutput_dml_list_elemContext()
}

type Output_dml_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_dml_list_elemContext() *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_output_dml_list_elem
	return p
}

func (*Output_dml_list_elemContext) IsOutput_dml_list_elemContext() {}

func NewOutput_dml_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_dml_list_elemContext {
	var p = new(Output_dml_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_output_dml_list_elem

	return p
}

func (s *Output_dml_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_dml_list_elemContext) Output_column_name() IOutput_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOutput_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOutput_column_nameContext)
}

func (s *Output_dml_list_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Output_dml_list_elemContext) As_column_alias() IAs_column_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_column_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_column_aliasContext)
}

func (s *Output_dml_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_dml_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_dml_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOutput_dml_list_elem(s)
	}
}

func (s *Output_dml_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOutput_dml_list_elem(s)
	}
}

func (s *Output_dml_list_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOutput_dml_list_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Output_dml_list_elem() (localctx IOutput_dml_list_elemContext) {
	localctx = NewOutput_dml_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, TSqlParserRULE_output_dml_list_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5993)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 771, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5991)
			p.Output_column_name()
		}

	case 2:
		{
			p.SetState(5992)
			p.expression(0)
		}

	}
	p.SetState(5996)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 772, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5995)
			p.As_column_alias()
		}

	}

	return localctx
}

// IOutput_column_nameContext is an interface to support dynamic dispatch.
type IOutput_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOutput_column_nameContext differentiates from other interfaces.
	IsOutput_column_nameContext()
}

type Output_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOutput_column_nameContext() *Output_column_nameContext {
	var p = new(Output_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_output_column_name
	return p
}

func (*Output_column_nameContext) IsOutput_column_nameContext() {}

func NewOutput_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Output_column_nameContext {
	var p = new(Output_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_output_column_name

	return p
}

func (s *Output_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Output_column_nameContext) DELETED() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETED, 0)
}

func (s *Output_column_nameContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERTED, 0)
}

func (s *Output_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Output_column_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Output_column_nameContext) DOLLAR_ACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOLLAR_ACTION, 0)
}

func (s *Output_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Output_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Output_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOutput_column_name(s)
	}
}

func (s *Output_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOutput_column_name(s)
	}
}

func (s *Output_column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOutput_column_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Output_column_name() (localctx IOutput_column_nameContext) {
	localctx = NewOutput_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, TSqlParserRULE_output_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6009)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(6001)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 773, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5998)
				p.Match(TSqlParserDELETED)
			}

		case 2:
			{
				p.SetState(5999)
				p.Match(TSqlParserINSERTED)
			}

		case 3:
			{
				p.SetState(6000)
				p.Table_name()
			}

		}
		{
			p.SetState(6003)
			p.Match(TSqlParserDOT)
		}
		p.SetState(6006)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSTAR:
			{
				p.SetState(6004)
				p.Match(TSqlParserSTAR)
			}

		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(6005)
				p.Id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserDOLLAR_ACTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6008)
			p.Match(TSqlParserDOLLAR_ACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_databaseContext is an interface to support dynamic dispatch.
type ICreate_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetCollation_name returns the collation_name rule contexts.
	GetCollation_name() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetCollation_name sets the collation_name rule contexts.
	SetCollation_name(IIdContext)

	// IsCreate_databaseContext differentiates from other interfaces.
	IsCreate_databaseContext()
}

type Create_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	database       IIdContext
	collation_name IIdContext
}

func NewEmptyCreate_databaseContext() *Create_databaseContext {
	var p = new(Create_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_database
	return p
}

func (*Create_databaseContext) IsCreate_databaseContext() {}

func NewCreate_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_databaseContext {
	var p = new(Create_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_database

	return p
}

func (s *Create_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_databaseContext) GetDatabase() IIdContext { return s.database }

func (s *Create_databaseContext) GetCollation_name() IIdContext { return s.collation_name }

func (s *Create_databaseContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Create_databaseContext) SetCollation_name(v IIdContext) { s.collation_name = v }

func (s *Create_databaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Create_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_databaseContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTAINMENT, 0)
}

func (s *Create_databaseContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_databaseContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_databaseContext) AllDatabase_file_spec() []IDatabase_file_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem())
	var tst = make([]IDatabase_file_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_file_specContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Database_file_spec(i int) IDatabase_file_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_file_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_file_specContext)
}

func (s *Create_databaseContext) LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOG, 0)
}

func (s *Create_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLATE, 0)
}

func (s *Create_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_databaseContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *Create_databaseContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Create_databaseContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTIAL, 0)
}

func (s *Create_databaseContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIMARY, 0)
}

func (s *Create_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_database(s)
	}
}

func (s *Create_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_database(s)
	}
}

func (s *Create_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_database() (localctx ICreate_databaseContext) {
	localctx = NewCreate_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, TSqlParserRULE_create_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6011)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(6012)
		p.Match(TSqlParserDATABASE)
	}

	{
		p.SetState(6013)

		var _x = p.Id()

		localctx.(*Create_databaseContext).database = _x
	}

	p.SetState(6017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONTAINMENT {
		{
			p.SetState(6014)
			p.Match(TSqlParserCONTAINMENT)
		}
		{
			p.SetState(6015)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6016)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserNONE || _la == TSqlParserPARTIAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(6031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserON {
		{
			p.SetState(6019)
			p.Match(TSqlParserON)
		}
		p.SetState(6021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPRIMARY {
			{
				p.SetState(6020)
				p.Match(TSqlParserPRIMARY)
			}

		}
		{
			p.SetState(6023)
			p.Database_file_spec()
		}
		p.SetState(6028)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6024)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6025)
				p.Database_file_spec()
			}

			p.SetState(6030)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6043)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLOG {
		{
			p.SetState(6033)
			p.Match(TSqlParserLOG)
		}
		{
			p.SetState(6034)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(6035)
			p.Database_file_spec()
		}
		p.SetState(6040)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6036)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6037)
				p.Database_file_spec()
			}

			p.SetState(6042)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6047)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOLLATE {
		{
			p.SetState(6045)
			p.Match(TSqlParserCOLLATE)
		}
		{
			p.SetState(6046)

			var _x = p.Id()

			localctx.(*Create_databaseContext).collation_name = _x
		}

	}
	p.SetState(6058)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 784, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6049)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6050)
			p.Create_database_option()
		}
		p.SetState(6055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6051)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6052)
				p.Create_database_option()
			}

			p.SetState(6057)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_indexContext is an interface to support dynamic dispatch.
type ICreate_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() ISearch_conditionContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISearch_conditionContext)

	// IsCreate_indexContext differentiates from other interfaces.
	IsCreate_indexContext()
}

type Create_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	where  ISearch_conditionContext
}

func NewEmptyCreate_indexContext() *Create_indexContext {
	var p = new(Create_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_index
	return p
}

func (*Create_indexContext) IsCreate_indexContext() {}

func NewCreate_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_indexContext {
	var p = new(Create_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_index

	return p
}

func (s *Create_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_indexContext) GetWhere() ISearch_conditionContext { return s.where }

func (s *Create_indexContext) SetWhere(v ISearch_conditionContext) { s.where = v }

func (s *Create_indexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserINDEX, 0)
}

func (s *Create_indexContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_indexContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_indexContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Create_indexContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Create_indexContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_indexContext) Column_name_list_with_order() IColumn_name_list_with_orderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_list_with_orderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_list_with_orderContext)
}

func (s *Create_indexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNIQUE, 0)
}

func (s *Create_indexContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Create_indexContext) INCLUDE() antlr.TerminalNode {
	return s.GetToken(TSqlParserINCLUDE, 0)
}

func (s *Create_indexContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_indexContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Create_indexContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Create_indexContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Create_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_index(s)
	}
}

func (s *Create_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_index(s)
	}
}

func (s *Create_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_index() (localctx ICreate_indexContext) {
	localctx = NewCreate_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, TSqlParserRULE_create_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6060)
		p.Match(TSqlParserCREATE)
	}
	p.SetState(6062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserUNIQUE {
		{
			p.SetState(6061)
			p.Match(TSqlParserUNIQUE)
		}

	}
	p.SetState(6065)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCLUSTERED || _la == TSqlParserNONCLUSTERED {
		{
			p.SetState(6064)
			p.Clustered()
		}

	}
	{
		p.SetState(6067)
		p.Match(TSqlParserINDEX)
	}
	{
		p.SetState(6068)
		p.Id()
	}
	{
		p.SetState(6069)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(6070)
		p.Table_name_with_hint()
	}
	{
		p.SetState(6071)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(6072)
		p.Column_name_list_with_order()
	}
	{
		p.SetState(6073)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(6079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINCLUDE {
		{
			p.SetState(6074)
			p.Match(TSqlParserINCLUDE)
		}
		{
			p.SetState(6075)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6076)
			p.Column_name_list()
		}
		{
			p.SetState(6077)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(6083)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWHERE {
		{
			p.SetState(6081)
			p.Match(TSqlParserWHERE)
		}
		{
			p.SetState(6082)

			var _x = p.Search_condition()

			localctx.(*Create_indexContext).where = _x
		}

	}
	p.SetState(6086)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 789, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6085)
			p.Index_options()
		}

	}
	p.SetState(6090)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserON {
		{
			p.SetState(6088)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(6089)
			p.Id()
		}

	}
	p.SetState(6093)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 791, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6092)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_or_alter_procedureContext is an interface to support dynamic dispatch.
type ICreate_or_alter_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProc returns the proc token.
	GetProc() antlr.Token

	// SetProc sets the proc token.
	SetProc(antlr.Token)

	// IsCreate_or_alter_procedureContext differentiates from other interfaces.
	IsCreate_or_alter_procedureContext()
}

type Create_or_alter_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	proc   antlr.Token
}

func NewEmptyCreate_or_alter_procedureContext() *Create_or_alter_procedureContext {
	var p = new(Create_or_alter_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_procedure
	return p
}

func (*Create_or_alter_procedureContext) IsCreate_or_alter_procedureContext() {}

func NewCreate_or_alter_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_procedureContext {
	var p = new(Create_or_alter_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_procedure

	return p
}

func (s *Create_or_alter_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_procedureContext) GetProc() antlr.Token { return s.proc }

func (s *Create_or_alter_procedureContext) SetProc(v antlr.Token) { s.proc = v }

func (s *Create_or_alter_procedureContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Create_or_alter_procedureContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_or_alter_procedureContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Create_or_alter_procedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_procedureContext) PROC() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROC, 0)
}

func (s *Create_or_alter_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROCEDURE, 0)
}

func (s *Create_or_alter_procedureContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Create_or_alter_procedureContext) AllProcedure_param() []IProcedure_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem())
	var tst = make([]IProcedure_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_paramContext)
		}
	}

	return tst
}

func (s *Create_or_alter_procedureContext) Procedure_param(i int) IProcedure_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_paramContext)
}

func (s *Create_or_alter_procedureContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_or_alter_procedureContext) AllProcedure_option() []IProcedure_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem())
	var tst = make([]IProcedure_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_optionContext)
		}
	}

	return tst
}

func (s *Create_or_alter_procedureContext) Procedure_option(i int) IProcedure_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_optionContext)
}

func (s *Create_or_alter_procedureContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_or_alter_procedureContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Create_or_alter_procedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_procedureContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Create_or_alter_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_procedure(s)
	}
}

func (s *Create_or_alter_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_procedure(s)
	}
}

func (s *Create_or_alter_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_procedure() (localctx ICreate_or_alter_procedureContext) {
	localctx = NewCreate_or_alter_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, TSqlParserRULE_create_or_alter_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6101)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCREATE:
		{
			p.SetState(6095)
			p.Match(TSqlParserCREATE)
		}
		p.SetState(6098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserOR {
			{
				p.SetState(6096)
				p.Match(TSqlParserOR)
			}
			{
				p.SetState(6097)
				p.Match(TSqlParserALTER)
			}

		}

	case TSqlParserALTER:
		{
			p.SetState(6100)
			p.Match(TSqlParserALTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6103)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Create_or_alter_procedureContext).proc = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserPROC || _la == TSqlParserPROCEDURE) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Create_or_alter_procedureContext).proc = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(6104)
		p.Func_proc_name()
	}
	p.SetState(6107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSEMI {
		{
			p.SetState(6105)
			p.Match(TSqlParserSEMI)
		}
		{
			p.SetState(6106)
			p.Match(TSqlParserDECIMAL)
		}

	}
	p.SetState(6123)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLOCAL_ID || _la == TSqlParserLR_BRACKET {
		p.SetState(6110)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLR_BRACKET {
			{
				p.SetState(6109)
				p.Match(TSqlParserLR_BRACKET)
			}

		}
		{
			p.SetState(6112)
			p.Procedure_param()
		}
		p.SetState(6117)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6113)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6114)
				p.Procedure_param()
			}

			p.SetState(6119)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(6121)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserRR_BRACKET {
			{
				p.SetState(6120)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	}
	p.SetState(6134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6125)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6126)
			p.Procedure_option()
		}
		p.SetState(6131)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6127)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6128)
				p.Procedure_option()
			}

			p.SetState(6133)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFOR {
		{
			p.SetState(6136)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(6137)
			p.Match(TSqlParserREPLICATION)
		}

	}
	{
		p.SetState(6140)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(6141)
		p.Sql_clauses()
	}

	return localctx
}

// ICreate_or_alter_triggerContext is an interface to support dynamic dispatch.
type ICreate_or_alter_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_or_alter_triggerContext differentiates from other interfaces.
	IsCreate_or_alter_triggerContext()
}

type Create_or_alter_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_or_alter_triggerContext() *Create_or_alter_triggerContext {
	var p = new(Create_or_alter_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_trigger
	return p
}

func (*Create_or_alter_triggerContext) IsCreate_or_alter_triggerContext() {}

func NewCreate_or_alter_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_triggerContext {
	var p = new(Create_or_alter_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_trigger

	return p
}

func (s *Create_or_alter_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_triggerContext) Create_or_alter_dml_trigger() ICreate_or_alter_dml_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_dml_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_dml_triggerContext)
}

func (s *Create_or_alter_triggerContext) Create_or_alter_ddl_trigger() ICreate_or_alter_ddl_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_or_alter_ddl_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_or_alter_ddl_triggerContext)
}

func (s *Create_or_alter_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_trigger(s)
	}
}

func (s *Create_or_alter_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_trigger(s)
	}
}

func (s *Create_or_alter_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_trigger() (localctx ICreate_or_alter_triggerContext) {
	localctx = NewCreate_or_alter_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, TSqlParserRULE_create_or_alter_trigger)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6145)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 802, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6143)
			p.Create_or_alter_dml_trigger()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6144)
			p.Create_or_alter_ddl_trigger()
		}

	}

	return localctx
}

// ICreate_or_alter_dml_triggerContext is an interface to support dynamic dispatch.
type ICreate_or_alter_dml_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_or_alter_dml_triggerContext differentiates from other interfaces.
	IsCreate_or_alter_dml_triggerContext()
}

type Create_or_alter_dml_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_or_alter_dml_triggerContext() *Create_or_alter_dml_triggerContext {
	var p = new(Create_or_alter_dml_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_dml_trigger
	return p
}

func (*Create_or_alter_dml_triggerContext) IsCreate_or_alter_dml_triggerContext() {}

func NewCreate_or_alter_dml_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_dml_triggerContext {
	var p = new(Create_or_alter_dml_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_dml_trigger

	return p
}

func (s *Create_or_alter_dml_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_dml_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Create_or_alter_dml_triggerContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_or_alter_dml_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_or_alter_dml_triggerContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_or_alter_dml_triggerContext) AllDml_trigger_operation() []IDml_trigger_operationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDml_trigger_operationContext)(nil)).Elem())
	var tst = make([]IDml_trigger_operationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDml_trigger_operationContext)
		}
	}

	return tst
}

func (s *Create_or_alter_dml_triggerContext) Dml_trigger_operation(i int) IDml_trigger_operationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_trigger_operationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDml_trigger_operationContext)
}

func (s *Create_or_alter_dml_triggerContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_or_alter_dml_triggerContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Create_or_alter_dml_triggerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_dml_triggerContext) AllFOR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFOR)
}

func (s *Create_or_alter_dml_triggerContext) FOR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, i)
}

func (s *Create_or_alter_dml_triggerContext) AFTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFTER, 0)
}

func (s *Create_or_alter_dml_triggerContext) INSTEAD() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSTEAD, 0)
}

func (s *Create_or_alter_dml_triggerContext) OF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOF, 0)
}

func (s *Create_or_alter_dml_triggerContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserWITH)
}

func (s *Create_or_alter_dml_triggerContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, i)
}

func (s *Create_or_alter_dml_triggerContext) AllDml_trigger_option() []IDml_trigger_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDml_trigger_optionContext)(nil)).Elem())
	var tst = make([]IDml_trigger_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDml_trigger_optionContext)
		}
	}

	return tst
}

func (s *Create_or_alter_dml_triggerContext) Dml_trigger_option(i int) IDml_trigger_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_trigger_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDml_trigger_optionContext)
}

func (s *Create_or_alter_dml_triggerContext) APPEND() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPEND, 0)
}

func (s *Create_or_alter_dml_triggerContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Create_or_alter_dml_triggerContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Create_or_alter_dml_triggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_dml_triggerContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Create_or_alter_dml_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_dml_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_dml_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_dml_trigger(s)
	}
}

func (s *Create_or_alter_dml_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_dml_trigger(s)
	}
}

func (s *Create_or_alter_dml_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_dml_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_dml_trigger() (localctx ICreate_or_alter_dml_triggerContext) {
	localctx = NewCreate_or_alter_dml_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, TSqlParserRULE_create_or_alter_dml_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6153)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCREATE:
		{
			p.SetState(6147)
			p.Match(TSqlParserCREATE)
		}
		p.SetState(6150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserOR {
			{
				p.SetState(6148)
				p.Match(TSqlParserOR)
			}
			{
				p.SetState(6149)
				p.Match(TSqlParserALTER)
			}

		}

	case TSqlParserALTER:
		{
			p.SetState(6152)
			p.Match(TSqlParserALTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6155)
		p.Match(TSqlParserTRIGGER)
	}
	{
		p.SetState(6156)
		p.Simple_name()
	}
	{
		p.SetState(6157)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(6158)
		p.Table_name()
	}
	p.SetState(6168)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6159)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6160)
			p.Dml_trigger_option()
		}
		p.SetState(6165)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6161)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6162)
				p.Dml_trigger_option()
			}

			p.SetState(6167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6174)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFOR:
		{
			p.SetState(6170)
			p.Match(TSqlParserFOR)
		}

	case TSqlParserAFTER:
		{
			p.SetState(6171)
			p.Match(TSqlParserAFTER)
		}

	case TSqlParserINSTEAD:
		{
			p.SetState(6172)
			p.Match(TSqlParserINSTEAD)
		}
		{
			p.SetState(6173)
			p.Match(TSqlParserOF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6176)
		p.Dml_trigger_operation()
	}
	p.SetState(6181)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(6177)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(6178)
			p.Dml_trigger_operation()
		}

		p.SetState(6183)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(6186)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6184)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6185)
			p.Match(TSqlParserAPPEND)
		}

	}
	p.SetState(6191)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserNOT {
		{
			p.SetState(6188)
			p.Match(TSqlParserNOT)
		}
		{
			p.SetState(6189)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(6190)
			p.Match(TSqlParserREPLICATION)
		}

	}
	{
		p.SetState(6193)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(6194)
		p.Sql_clauses()
	}

	return localctx
}

// IDml_trigger_optionContext is an interface to support dynamic dispatch.
type IDml_trigger_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_trigger_optionContext differentiates from other interfaces.
	IsDml_trigger_optionContext()
}

type Dml_trigger_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_trigger_optionContext() *Dml_trigger_optionContext {
	var p = new(Dml_trigger_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_dml_trigger_option
	return p
}

func (*Dml_trigger_optionContext) IsDml_trigger_optionContext() {}

func NewDml_trigger_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_trigger_optionContext {
	var p = new(Dml_trigger_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_dml_trigger_option

	return p
}

func (s *Dml_trigger_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_trigger_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Dml_trigger_optionContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Dml_trigger_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_trigger_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_trigger_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDml_trigger_option(s)
	}
}

func (s *Dml_trigger_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDml_trigger_option(s)
	}
}

func (s *Dml_trigger_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDml_trigger_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Dml_trigger_option() (localctx IDml_trigger_optionContext) {
	localctx = NewDml_trigger_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, TSqlParserRULE_dml_trigger_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6198)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6196)
			p.Match(TSqlParserENCRYPTION)
		}

	case TSqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6197)
			p.Execute_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDml_trigger_operationContext is an interface to support dynamic dispatch.
type IDml_trigger_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_trigger_operationContext differentiates from other interfaces.
	IsDml_trigger_operationContext()
}

type Dml_trigger_operationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_trigger_operationContext() *Dml_trigger_operationContext {
	var p = new(Dml_trigger_operationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_dml_trigger_operation
	return p
}

func (*Dml_trigger_operationContext) IsDml_trigger_operationContext() {}

func NewDml_trigger_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_trigger_operationContext {
	var p = new(Dml_trigger_operationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_dml_trigger_operation

	return p
}

func (s *Dml_trigger_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_trigger_operationContext) INSERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, 0)
}

func (s *Dml_trigger_operationContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *Dml_trigger_operationContext) DELETE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, 0)
}

func (s *Dml_trigger_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_trigger_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_trigger_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDml_trigger_operation(s)
	}
}

func (s *Dml_trigger_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDml_trigger_operation(s)
	}
}

func (s *Dml_trigger_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDml_trigger_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Dml_trigger_operation() (localctx IDml_trigger_operationContext) {
	localctx = NewDml_trigger_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, TSqlParserRULE_dml_trigger_operation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6200)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserDELETE || _la == TSqlParserINSERT || _la == TSqlParserUPDATE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICreate_or_alter_ddl_triggerContext is an interface to support dynamic dispatch.
type ICreate_or_alter_ddl_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_or_alter_ddl_triggerContext differentiates from other interfaces.
	IsCreate_or_alter_ddl_triggerContext()
}

type Create_or_alter_ddl_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_or_alter_ddl_triggerContext() *Create_or_alter_ddl_triggerContext {
	var p = new(Create_or_alter_ddl_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_ddl_trigger
	return p
}

func (*Create_or_alter_ddl_triggerContext) IsCreate_or_alter_ddl_triggerContext() {}

func NewCreate_or_alter_ddl_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_ddl_triggerContext {
	var p = new(Create_or_alter_ddl_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_ddl_trigger

	return p
}

func (s *Create_or_alter_ddl_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_ddl_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Create_or_alter_ddl_triggerContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_or_alter_ddl_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_or_alter_ddl_triggerContext) Ddl_trigger_operation() IDdl_trigger_operationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_trigger_operationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_trigger_operationContext)
}

func (s *Create_or_alter_ddl_triggerContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_or_alter_ddl_triggerContext) Sql_clauses() ISql_clausesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clausesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_clausesContext)
}

func (s *Create_or_alter_ddl_triggerContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_or_alter_ddl_triggerContext) AFTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFTER, 0)
}

func (s *Create_or_alter_ddl_triggerContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_ddl_triggerContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Create_or_alter_ddl_triggerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Create_or_alter_ddl_triggerContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Create_or_alter_ddl_triggerContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_or_alter_ddl_triggerContext) AllDml_trigger_option() []IDml_trigger_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDml_trigger_optionContext)(nil)).Elem())
	var tst = make([]IDml_trigger_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDml_trigger_optionContext)
		}
	}

	return tst
}

func (s *Create_or_alter_ddl_triggerContext) Dml_trigger_option(i int) IDml_trigger_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_trigger_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDml_trigger_optionContext)
}

func (s *Create_or_alter_ddl_triggerContext) AllDml_trigger_operation() []IDml_trigger_operationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDml_trigger_operationContext)(nil)).Elem())
	var tst = make([]IDml_trigger_operationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDml_trigger_operationContext)
		}
	}

	return tst
}

func (s *Create_or_alter_ddl_triggerContext) Dml_trigger_operation(i int) IDml_trigger_operationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_trigger_operationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDml_trigger_operationContext)
}

func (s *Create_or_alter_ddl_triggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_ddl_triggerContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Create_or_alter_ddl_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_ddl_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_ddl_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_ddl_trigger(s)
	}
}

func (s *Create_or_alter_ddl_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_ddl_trigger(s)
	}
}

func (s *Create_or_alter_ddl_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_ddl_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_ddl_trigger() (localctx ICreate_or_alter_ddl_triggerContext) {
	localctx = NewCreate_or_alter_ddl_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, TSqlParserRULE_create_or_alter_ddl_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6208)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCREATE:
		{
			p.SetState(6202)
			p.Match(TSqlParserCREATE)
		}
		p.SetState(6205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserOR {
			{
				p.SetState(6203)
				p.Match(TSqlParserOR)
			}
			{
				p.SetState(6204)
				p.Match(TSqlParserALTER)
			}

		}

	case TSqlParserALTER:
		{
			p.SetState(6207)
			p.Match(TSqlParserALTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6210)
		p.Match(TSqlParserTRIGGER)
	}
	{
		p.SetState(6211)
		p.Simple_name()
	}
	{
		p.SetState(6212)
		p.Match(TSqlParserON)
	}
	p.SetState(6216)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserALL:
		{
			p.SetState(6213)
			p.Match(TSqlParserALL)
		}
		{
			p.SetState(6214)
			p.Match(TSqlParserSERVER)
		}

	case TSqlParserDATABASE:
		{
			p.SetState(6215)
			p.Match(TSqlParserDATABASE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6227)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6218)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6219)
			p.Dml_trigger_option()
		}
		p.SetState(6224)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6220)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6221)
				p.Dml_trigger_option()
			}

			p.SetState(6226)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6229)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserFOR || _la == TSqlParserAFTER) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(6230)
		p.Ddl_trigger_operation()
	}
	p.SetState(6235)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(6231)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(6232)
			p.Dml_trigger_operation()
		}

		p.SetState(6237)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6238)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(6239)
		p.Sql_clauses()
	}

	return localctx
}

// IDdl_trigger_operationContext is an interface to support dynamic dispatch.
type IDdl_trigger_operationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_trigger_operationContext differentiates from other interfaces.
	IsDdl_trigger_operationContext()
}

type Ddl_trigger_operationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_trigger_operationContext() *Ddl_trigger_operationContext {
	var p = new(Ddl_trigger_operationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_ddl_trigger_operation
	return p
}

func (*Ddl_trigger_operationContext) IsDdl_trigger_operationContext() {}

func NewDdl_trigger_operationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_trigger_operationContext {
	var p = new(Ddl_trigger_operationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_ddl_trigger_operation

	return p
}

func (s *Ddl_trigger_operationContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_trigger_operationContext) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Ddl_trigger_operationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_trigger_operationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_trigger_operationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDdl_trigger_operation(s)
	}
}

func (s *Ddl_trigger_operationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDdl_trigger_operation(s)
	}
}

func (s *Ddl_trigger_operationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDdl_trigger_operation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Ddl_trigger_operation() (localctx IDdl_trigger_operationContext) {
	localctx = NewDdl_trigger_operationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, TSqlParserRULE_ddl_trigger_operation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6241)
		p.Simple_id()
	}

	return localctx
}

// ICreate_or_alter_functionContext is an interface to support dynamic dispatch.
type ICreate_or_alter_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_or_alter_functionContext differentiates from other interfaces.
	IsCreate_or_alter_functionContext()
}

type Create_or_alter_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_or_alter_functionContext() *Create_or_alter_functionContext {
	var p = new(Create_or_alter_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_or_alter_function
	return p
}

func (*Create_or_alter_functionContext) IsCreate_or_alter_functionContext() {}

func NewCreate_or_alter_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_or_alter_functionContext {
	var p = new(Create_or_alter_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_or_alter_function

	return p
}

func (s *Create_or_alter_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_or_alter_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserFUNCTION, 0)
}

func (s *Create_or_alter_functionContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Create_or_alter_functionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Create_or_alter_functionContext) Func_body_returns_select() IFunc_body_returns_selectContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_body_returns_selectContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_body_returns_selectContext)
}

func (s *Create_or_alter_functionContext) Func_body_returns_table() IFunc_body_returns_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_body_returns_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_body_returns_tableContext)
}

func (s *Create_or_alter_functionContext) Func_body_returns_scalar() IFunc_body_returns_scalarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_body_returns_scalarContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_body_returns_scalarContext)
}

func (s *Create_or_alter_functionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_or_alter_functionContext) AllProcedure_param() []IProcedure_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem())
	var tst = make([]IProcedure_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_paramContext)
		}
	}

	return tst
}

func (s *Create_or_alter_functionContext) Procedure_param(i int) IProcedure_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_paramContext)
}

func (s *Create_or_alter_functionContext) OR() antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, 0)
}

func (s *Create_or_alter_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_or_alter_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_or_alter_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_or_alter_function(s)
	}
}

func (s *Create_or_alter_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_or_alter_function(s)
	}
}

func (s *Create_or_alter_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_or_alter_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_or_alter_function() (localctx ICreate_or_alter_functionContext) {
	localctx = NewCreate_or_alter_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, TSqlParserRULE_create_or_alter_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6249)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCREATE:
		{
			p.SetState(6243)
			p.Match(TSqlParserCREATE)
		}
		p.SetState(6246)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserOR {
			{
				p.SetState(6244)
				p.Match(TSqlParserOR)
			}
			{
				p.SetState(6245)
				p.Match(TSqlParserALTER)
			}

		}

	case TSqlParserALTER:
		{
			p.SetState(6248)
			p.Match(TSqlParserALTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(6251)
		p.Match(TSqlParserFUNCTION)
	}
	{
		p.SetState(6252)
		p.Func_proc_name()
	}
	p.SetState(6266)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 821, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6253)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6254)
			p.Procedure_param()
		}
		p.SetState(6259)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6255)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6256)
				p.Procedure_param()
			}

			p.SetState(6261)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(6262)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		{
			p.SetState(6264)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6265)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(6271)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 822, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6268)
			p.Func_body_returns_select()
		}

	case 2:
		{
			p.SetState(6269)
			p.Func_body_returns_table()
		}

	case 3:
		{
			p.SetState(6270)
			p.Func_body_returns_scalar()
		}

	}
	p.SetState(6274)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 823, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6273)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IFunc_body_returns_selectContext is an interface to support dynamic dispatch.
type IFunc_body_returns_selectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_body_returns_selectContext differentiates from other interfaces.
	IsFunc_body_returns_selectContext()
}

type Func_body_returns_selectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_body_returns_selectContext() *Func_body_returns_selectContext {
	var p = new(Func_body_returns_selectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_func_body_returns_select
	return p
}

func (*Func_body_returns_selectContext) IsFunc_body_returns_selectContext() {}

func NewFunc_body_returns_selectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_body_returns_selectContext {
	var p = new(Func_body_returns_selectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_func_body_returns_select

	return p
}

func (s *Func_body_returns_selectContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_body_returns_selectContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURNS, 0)
}

func (s *Func_body_returns_selectContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Func_body_returns_selectContext) RETURN() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURN, 0)
}

func (s *Func_body_returns_selectContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Func_body_returns_selectContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Func_body_returns_selectContext) AllFunction_option() []IFunction_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem())
	var tst = make([]IFunction_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_optionContext)
		}
	}

	return tst
}

func (s *Func_body_returns_selectContext) Function_option(i int) IFunction_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_optionContext)
}

func (s *Func_body_returns_selectContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Func_body_returns_selectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_body_returns_selectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_body_returns_selectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFunc_body_returns_select(s)
	}
}

func (s *Func_body_returns_selectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFunc_body_returns_select(s)
	}
}

func (s *Func_body_returns_selectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFunc_body_returns_select(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Func_body_returns_select() (localctx IFunc_body_returns_selectContext) {
	localctx = NewFunc_body_returns_selectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, TSqlParserRULE_func_body_returns_select)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6276)
		p.Match(TSqlParserRETURNS)
	}
	{
		p.SetState(6277)
		p.Match(TSqlParserTABLE)
	}
	p.SetState(6287)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6278)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6279)
			p.Function_option()
		}
		p.SetState(6284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6280)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6281)
				p.Function_option()
			}

			p.SetState(6286)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6290)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(6289)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(6292)
		p.Match(TSqlParserRETURN)
	}
	{
		p.SetState(6293)
		p.Select_statement()
	}

	return localctx
}

// IFunc_body_returns_tableContext is an interface to support dynamic dispatch.
type IFunc_body_returns_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_body_returns_tableContext differentiates from other interfaces.
	IsFunc_body_returns_tableContext()
}

type Func_body_returns_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_body_returns_tableContext() *Func_body_returns_tableContext {
	var p = new(Func_body_returns_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_func_body_returns_table
	return p
}

func (*Func_body_returns_tableContext) IsFunc_body_returns_tableContext() {}

func NewFunc_body_returns_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_body_returns_tableContext {
	var p = new(Func_body_returns_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_func_body_returns_table

	return p
}

func (s *Func_body_returns_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_body_returns_tableContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURNS, 0)
}

func (s *Func_body_returns_tableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Func_body_returns_tableContext) Table_type_definition() ITable_type_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_type_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_type_definitionContext)
}

func (s *Func_body_returns_tableContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Func_body_returns_tableContext) RETURN() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURN, 0)
}

func (s *Func_body_returns_tableContext) END() antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, 0)
}

func (s *Func_body_returns_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Func_body_returns_tableContext) AllFunction_option() []IFunction_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem())
	var tst = make([]IFunction_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_optionContext)
		}
	}

	return tst
}

func (s *Func_body_returns_tableContext) Function_option(i int) IFunction_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_optionContext)
}

func (s *Func_body_returns_tableContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Func_body_returns_tableContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *Func_body_returns_tableContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *Func_body_returns_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_body_returns_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_body_returns_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFunc_body_returns_table(s)
	}
}

func (s *Func_body_returns_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFunc_body_returns_table(s)
	}
}

func (s *Func_body_returns_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFunc_body_returns_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Func_body_returns_table() (localctx IFunc_body_returns_tableContext) {
	localctx = NewFunc_body_returns_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, TSqlParserRULE_func_body_returns_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6295)
		p.Match(TSqlParserRETURNS)
	}
	{
		p.SetState(6296)
		p.Match(TSqlParserLOCAL_ID)
	}
	{
		p.SetState(6297)
		p.Table_type_definition()
	}
	p.SetState(6307)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6298)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6299)
			p.Function_option()
		}
		p.SetState(6304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6300)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6301)
				p.Function_option()
			}

			p.SetState(6306)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6310)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(6309)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(6312)
		p.Match(TSqlParserBEGIN)
	}
	p.SetState(6316)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6313)
				p.Sql_clause()
			}

		}
		p.SetState(6318)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext())
	}
	{
		p.SetState(6319)
		p.Match(TSqlParserRETURN)
	}
	{
		p.SetState(6320)
		p.Match(TSqlParserEND)
	}

	return localctx
}

// IFunc_body_returns_scalarContext is an interface to support dynamic dispatch.
type IFunc_body_returns_scalarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRet returns the ret rule contexts.
	GetRet() IExpressionContext

	// SetRet sets the ret rule contexts.
	SetRet(IExpressionContext)

	// IsFunc_body_returns_scalarContext differentiates from other interfaces.
	IsFunc_body_returns_scalarContext()
}

type Func_body_returns_scalarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	ret    IExpressionContext
}

func NewEmptyFunc_body_returns_scalarContext() *Func_body_returns_scalarContext {
	var p = new(Func_body_returns_scalarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_func_body_returns_scalar
	return p
}

func (*Func_body_returns_scalarContext) IsFunc_body_returns_scalarContext() {}

func NewFunc_body_returns_scalarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_body_returns_scalarContext {
	var p = new(Func_body_returns_scalarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_func_body_returns_scalar

	return p
}

func (s *Func_body_returns_scalarContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_body_returns_scalarContext) GetRet() IExpressionContext { return s.ret }

func (s *Func_body_returns_scalarContext) SetRet(v IExpressionContext) { s.ret = v }

func (s *Func_body_returns_scalarContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURNS, 0)
}

func (s *Func_body_returns_scalarContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Func_body_returns_scalarContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Func_body_returns_scalarContext) RETURN() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURN, 0)
}

func (s *Func_body_returns_scalarContext) END() antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, 0)
}

func (s *Func_body_returns_scalarContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Func_body_returns_scalarContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Func_body_returns_scalarContext) AllFunction_option() []IFunction_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem())
	var tst = make([]IFunction_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_optionContext)
		}
	}

	return tst
}

func (s *Func_body_returns_scalarContext) Function_option(i int) IFunction_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_optionContext)
}

func (s *Func_body_returns_scalarContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Func_body_returns_scalarContext) AllSql_clause() []ISql_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem())
	var tst = make([]ISql_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_clauseContext)
		}
	}

	return tst
}

func (s *Func_body_returns_scalarContext) Sql_clause(i int) ISql_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_clauseContext)
}

func (s *Func_body_returns_scalarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_body_returns_scalarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_body_returns_scalarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFunc_body_returns_scalar(s)
	}
}

func (s *Func_body_returns_scalarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFunc_body_returns_scalar(s)
	}
}

func (s *Func_body_returns_scalarContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFunc_body_returns_scalar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Func_body_returns_scalar() (localctx IFunc_body_returns_scalarContext) {
	localctx = NewFunc_body_returns_scalarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, TSqlParserRULE_func_body_returns_scalar)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6322)
		p.Match(TSqlParserRETURNS)
	}
	{
		p.SetState(6323)
		p.Data_type()
	}
	p.SetState(6333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6324)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6325)
			p.Function_option()
		}
		p.SetState(6330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6326)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6327)
				p.Function_option()
			}

			p.SetState(6332)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(6335)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(6338)
		p.Match(TSqlParserBEGIN)
	}
	p.SetState(6342)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 834, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6339)
				p.Sql_clause()
			}

		}
		p.SetState(6344)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 834, p.GetParserRuleContext())
	}
	{
		p.SetState(6345)
		p.Match(TSqlParserRETURN)
	}
	{
		p.SetState(6346)

		var _x = p.expression(0)

		localctx.(*Func_body_returns_scalarContext).ret = _x
	}
	p.SetState(6348)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSEMI {
		{
			p.SetState(6347)
			p.Match(TSqlParserSEMI)
		}

	}
	{
		p.SetState(6350)
		p.Match(TSqlParserEND)
	}

	return localctx
}

// IProcedure_paramContext is an interface to support dynamic dispatch.
type IProcedure_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDefault_val returns the default_val rule contexts.
	GetDefault_val() IDefault_valueContext

	// SetDefault_val sets the default_val rule contexts.
	SetDefault_val(IDefault_valueContext)

	// IsProcedure_paramContext differentiates from other interfaces.
	IsProcedure_paramContext()
}

type Procedure_paramContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	default_val IDefault_valueContext
}

func NewEmptyProcedure_paramContext() *Procedure_paramContext {
	var p = new(Procedure_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_procedure_param
	return p
}

func (*Procedure_paramContext) IsProcedure_paramContext() {}

func NewProcedure_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_paramContext {
	var p = new(Procedure_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_procedure_param

	return p
}

func (s *Procedure_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_paramContext) GetDefault_val() IDefault_valueContext { return s.default_val }

func (s *Procedure_paramContext) SetDefault_val(v IDefault_valueContext) { s.default_val = v }

func (s *Procedure_paramContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Procedure_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Procedure_paramContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Procedure_paramContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Procedure_paramContext) VARYING() antlr.TerminalNode {
	return s.GetToken(TSqlParserVARYING, 0)
}

func (s *Procedure_paramContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Procedure_paramContext) OUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUT, 0)
}

func (s *Procedure_paramContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUTPUT, 0)
}

func (s *Procedure_paramContext) READONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREADONLY, 0)
}

func (s *Procedure_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterProcedure_param(s)
	}
}

func (s *Procedure_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitProcedure_param(s)
	}
}

func (s *Procedure_paramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitProcedure_param(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Procedure_param() (localctx IProcedure_paramContext) {
	localctx = NewProcedure_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, TSqlParserRULE_procedure_param)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6352)
		p.Match(TSqlParserLOCAL_ID)
	}
	p.SetState(6356)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 836, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6353)
			p.Id()
		}
		{
			p.SetState(6354)
			p.Match(TSqlParserDOT)
		}

	}
	p.SetState(6359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(6358)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(6361)
		p.Data_type()
	}
	p.SetState(6363)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserVARYING {
		{
			p.SetState(6362)
			p.Match(TSqlParserVARYING)
		}

	}
	p.SetState(6367)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserEQUAL {
		{
			p.SetState(6365)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(6366)

			var _x = p.Default_value()

			localctx.(*Procedure_paramContext).default_val = _x
		}

	}
	p.SetState(6370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserOUT || _la == TSqlParserOUTPUT || _la == TSqlParserREADONLY {
		p.SetState(6369)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOUT || _la == TSqlParserOUTPUT || _la == TSqlParserREADONLY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IProcedure_optionContext is an interface to support dynamic dispatch.
type IProcedure_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedure_optionContext differentiates from other interfaces.
	IsProcedure_optionContext()
}

type Procedure_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_optionContext() *Procedure_optionContext {
	var p = new(Procedure_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_procedure_option
	return p
}

func (*Procedure_optionContext) IsProcedure_optionContext() {}

func NewProcedure_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_optionContext {
	var p = new(Procedure_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_procedure_option

	return p
}

func (s *Procedure_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Procedure_optionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECOMPILE, 0)
}

func (s *Procedure_optionContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Procedure_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterProcedure_option(s)
	}
}

func (s *Procedure_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitProcedure_option(s)
	}
}

func (s *Procedure_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitProcedure_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Procedure_option() (localctx IProcedure_optionContext) {
	localctx = NewProcedure_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, TSqlParserRULE_procedure_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6375)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6372)
			p.Match(TSqlParserENCRYPTION)
		}

	case TSqlParserRECOMPILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6373)
			p.Match(TSqlParserRECOMPILE)
		}

	case TSqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6374)
			p.Execute_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunction_optionContext is an interface to support dynamic dispatch.
type IFunction_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_optionContext differentiates from other interfaces.
	IsFunction_optionContext()
}

type Function_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_optionContext() *Function_optionContext {
	var p = new(Function_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_function_option
	return p
}

func (*Function_optionContext) IsFunction_optionContext() {}

func NewFunction_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_optionContext {
	var p = new(Function_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_function_option

	return p
}

func (s *Function_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Function_optionContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMABINDING, 0)
}

func (s *Function_optionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURNS, 0)
}

func (s *Function_optionContext) AllNULL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNULL)
}

func (s *Function_optionContext) NULL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, i)
}

func (s *Function_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Function_optionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINPUT, 0)
}

func (s *Function_optionContext) CALLED() antlr.TerminalNode {
	return s.GetToken(TSqlParserCALLED, 0)
}

func (s *Function_optionContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Function_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFunction_option(s)
	}
}

func (s *Function_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFunction_option(s)
	}
}

func (s *Function_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFunction_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Function_option() (localctx IFunction_optionContext) {
	localctx = NewFunction_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, TSqlParserRULE_function_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6389)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserENCRYPTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6377)
			p.Match(TSqlParserENCRYPTION)
		}

	case TSqlParserSCHEMABINDING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6378)
			p.Match(TSqlParserSCHEMABINDING)
		}

	case TSqlParserRETURNS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6379)
			p.Match(TSqlParserRETURNS)
		}
		{
			p.SetState(6380)
			p.Match(TSqlParserNULL)
		}
		{
			p.SetState(6381)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(6382)
			p.Match(TSqlParserNULL)
		}
		{
			p.SetState(6383)
			p.Match(TSqlParserINPUT)
		}

	case TSqlParserCALLED:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6384)
			p.Match(TSqlParserCALLED)
		}
		{
			p.SetState(6385)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(6386)
			p.Match(TSqlParserNULL)
		}
		{
			p.SetState(6387)
			p.Match(TSqlParserINPUT)
		}

	case TSqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6388)
			p.Execute_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_statisticsContext is an interface to support dynamic dispatch.
type ICreate_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_statisticsContext differentiates from other interfaces.
	IsCreate_statisticsContext()
}

type Create_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_statisticsContext() *Create_statisticsContext {
	var p = new(Create_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_statistics
	return p
}

func (*Create_statisticsContext) IsCreate_statisticsContext() {}

func NewCreate_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_statisticsContext {
	var p = new(Create_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_statistics

	return p
}

func (s *Create_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_statisticsContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATISTICS, 0)
}

func (s *Create_statisticsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_statisticsContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_statisticsContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Create_statisticsContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_statisticsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_statisticsContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLSCAN, 0)
}

func (s *Create_statisticsContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAMPLE, 0)
}

func (s *Create_statisticsContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Create_statisticsContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATS_STREAM, 0)
}

func (s *Create_statisticsContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Create_statisticsContext) ROWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWS, 0)
}

func (s *Create_statisticsContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNORECOMPUTE, 0)
}

func (s *Create_statisticsContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserINCREMENTAL, 0)
}

func (s *Create_statisticsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_statisticsContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Create_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_statistics(s)
	}
}

func (s *Create_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_statistics(s)
	}
}

func (s *Create_statisticsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_statistics(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_statistics() (localctx ICreate_statisticsContext) {
	localctx = NewCreate_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, TSqlParserRULE_create_statistics)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6391)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(6392)
		p.Match(TSqlParserSTATISTICS)
	}
	{
		p.SetState(6393)
		p.Id()
	}
	{
		p.SetState(6394)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(6395)
		p.Table_name_with_hint()
	}
	{
		p.SetState(6396)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(6397)
		p.Column_name_list()
	}
	{
		p.SetState(6398)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(6417)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 846, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6399)
			p.Match(TSqlParserWITH)
		}
		p.SetState(6405)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserFULLSCAN:
			{
				p.SetState(6400)
				p.Match(TSqlParserFULLSCAN)
			}

		case TSqlParserSAMPLE:
			{
				p.SetState(6401)
				p.Match(TSqlParserSAMPLE)
			}
			{
				p.SetState(6402)
				p.Match(TSqlParserDECIMAL)
			}
			p.SetState(6403)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserPERCENT || _la == TSqlParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case TSqlParserSTATS_STREAM:
			{
				p.SetState(6404)
				p.Match(TSqlParserSTATS_STREAM)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6409)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 844, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6407)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6408)
				p.Match(TSqlParserNORECOMPUTE)
			}

		}
		p.SetState(6415)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(6411)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6412)
				p.Match(TSqlParserINCREMENTAL)
			}
			{
				p.SetState(6413)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(6414)
				p.On_off()
			}

		}

	}
	p.SetState(6420)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6419)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_tableContext is an interface to support dynamic dispatch.
type ICreate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tableContext differentiates from other interfaces.
	IsCreate_tableContext()
}

type Create_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tableContext() *Create_tableContext {
	var p = new(Create_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_table
	return p
}

func (*Create_tableContext) IsCreate_tableContext() {}

func NewCreate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tableContext {
	var p = new(Create_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_table

	return p
}

func (s *Create_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Create_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_tableContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Create_tableContext) AllTable_options() []ITable_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_optionsContext)(nil)).Elem())
	var tst = make([]ITable_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_optionsContext)
		}
	}

	return tst
}

func (s *Create_tableContext) Table_options(i int) ITable_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_optionsContext)
}

func (s *Create_tableContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_tableContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_tableContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_tableContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDEFAULT)
}

func (s *Create_tableContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, i)
}

func (s *Create_tableContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserTEXTIMAGE_ON, 0)
}

func (s *Create_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_table(s)
	}
}

func (s *Create_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_table(s)
	}
}

func (s *Create_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_table() (localctx ICreate_tableContext) {
	localctx = NewCreate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, TSqlParserRULE_create_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6422)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(6423)
		p.Match(TSqlParserTABLE)
	}
	{
		p.SetState(6424)
		p.Table_name()
	}
	{
		p.SetState(6425)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(6426)
		p.Column_def_table_constraints()
	}
	p.SetState(6428)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(6427)
			p.Match(TSqlParserCOMMA)
		}

	}
	{
		p.SetState(6430)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(6434)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 849, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(6431)
				p.Table_options()
			}

		}
		p.SetState(6436)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 849, p.GetParserRuleContext())
	}
	p.SetState(6440)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 850, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6437)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(6438)
			p.Id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 850, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(6439)
			p.Match(TSqlParserDEFAULT)
		}

	}
	p.SetState(6445)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 851, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6442)
			p.Match(TSqlParserTEXTIMAGE_ON)
		}
		{
			p.SetState(6443)
			p.Id()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 851, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(6444)
			p.Match(TSqlParserDEFAULT)
		}

	}
	p.SetState(6448)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 852, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6447)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ITable_optionsContext is an interface to support dynamic dispatch.
type ITable_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_optionsContext differentiates from other interfaces.
	IsTable_optionsContext()
}

type Table_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_optionsContext() *Table_optionsContext {
	var p = new(Table_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_options
	return p
}

func (*Table_optionsContext) IsTable_optionsContext() {}

func NewTable_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_optionsContext {
	var p = new(Table_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_options

	return p
}

func (s *Table_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_optionsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Table_optionsContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *Table_optionsContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *Table_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_options(s)
	}
}

func (s *Table_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_options(s)
	}
}

func (s *Table_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_options() (localctx ITable_optionsContext) {
	localctx = NewTable_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, TSqlParserRULE_table_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6450)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(6451)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(6452)
		p.Index_option()
	}
	p.SetState(6457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(6453)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(6454)
			p.Index_option()
		}

		p.SetState(6459)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(6460)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ICreate_viewContext is an interface to support dynamic dispatch.
type ICreate_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_viewContext differentiates from other interfaces.
	IsCreate_viewContext()
}

type Create_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_viewContext() *Create_viewContext {
	var p = new(Create_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_view
	return p
}

func (*Create_viewContext) IsCreate_viewContext() {}

func NewCreate_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_viewContext {
	var p = new(Create_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_view

	return p
}

func (s *Create_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEW, 0)
}

func (s *Create_viewContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_viewContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_viewContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Create_viewContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserWITH)
}

func (s *Create_viewContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, i)
}

func (s *Create_viewContext) AllView_attribute() []IView_attributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IView_attributeContext)(nil)).Elem())
	var tst = make([]IView_attributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IView_attributeContext)
		}
	}

	return tst
}

func (s *Create_viewContext) View_attribute(i int) IView_attributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IView_attributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IView_attributeContext)
}

func (s *Create_viewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK, 0)
}

func (s *Create_viewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTION, 0)
}

func (s *Create_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_view(s)
	}
}

func (s *Create_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_view(s)
	}
}

func (s *Create_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_view(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_view() (localctx ICreate_viewContext) {
	localctx = NewCreate_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, TSqlParserRULE_create_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6462)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(6463)
		p.Match(TSqlParserVIEW)
	}
	{
		p.SetState(6464)
		p.Simple_name()
	}
	p.SetState(6469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLR_BRACKET {
		{
			p.SetState(6465)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6466)
			p.Column_name_list()
		}
		{
			p.SetState(6467)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(6480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(6471)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6472)
			p.View_attribute()
		}
		p.SetState(6477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6473)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6474)
				p.View_attribute()
			}

			p.SetState(6479)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(6482)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(6483)
		p.Select_statement()
	}
	p.SetState(6487)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 857, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6484)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6485)
			p.Match(TSqlParserCHECK)
		}
		{
			p.SetState(6486)
			p.Match(TSqlParserOPTION)
		}

	}
	p.SetState(6490)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 858, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6489)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IView_attributeContext is an interface to support dynamic dispatch.
type IView_attributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsView_attributeContext differentiates from other interfaces.
	IsView_attributeContext()
}

type View_attributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyView_attributeContext() *View_attributeContext {
	var p = new(View_attributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_view_attribute
	return p
}

func (*View_attributeContext) IsView_attributeContext() {}

func NewView_attributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *View_attributeContext {
	var p = new(View_attributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_view_attribute

	return p
}

func (s *View_attributeContext) GetParser() antlr.Parser { return s.parser }

func (s *View_attributeContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *View_attributeContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMABINDING, 0)
}

func (s *View_attributeContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEW_METADATA, 0)
}

func (s *View_attributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *View_attributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *View_attributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterView_attribute(s)
	}
}

func (s *View_attributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitView_attribute(s)
	}
}

func (s *View_attributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitView_attribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) View_attribute() (localctx IView_attributeContext) {
	localctx = NewView_attributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, TSqlParserRULE_view_attribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6492)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserENCRYPTION || _la == TSqlParserSCHEMABINDING || _la == TSqlParserVIEW_METADATA) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IAlter_tableContext is an interface to support dynamic dispatch.
type IAlter_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// GetFk returns the fk rule contexts.
	GetFk() IColumn_name_listContext

	// GetPk returns the pk rule contexts.
	GetPk() IColumn_name_listContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// SetFk sets the fk rule contexts.
	SetFk(IColumn_name_listContext)

	// SetPk sets the pk rule contexts.
	SetPk(IColumn_name_listContext)

	// IsAlter_tableContext differentiates from other interfaces.
	IsAlter_tableContext()
}

type Alter_tableContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	fk         IColumn_name_listContext
	pk         IColumn_name_listContext
}

func NewEmptyAlter_tableContext() *Alter_tableContext {
	var p = new(Alter_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_table
	return p
}

func (*Alter_tableContext) IsAlter_tableContext() {}

func NewAlter_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tableContext {
	var p = new(Alter_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_table

	return p
}

func (s *Alter_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tableContext) GetConstraint() IIdContext { return s.constraint }

func (s *Alter_tableContext) GetFk() IColumn_name_listContext { return s.fk }

func (s *Alter_tableContext) GetPk() IColumn_name_listContext { return s.pk }

func (s *Alter_tableContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Alter_tableContext) SetFk(v IColumn_name_listContext) { s.fk = v }

func (s *Alter_tableContext) SetPk(v IColumn_name_listContext) { s.pk = v }

func (s *Alter_tableContext) AllALTER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALTER)
}

func (s *Alter_tableContext) ALTER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, i)
}

func (s *Alter_tableContext) AllTABLE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTABLE)
}

func (s *Alter_tableContext) TABLE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, i)
}

func (s *Alter_tableContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_tableContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Alter_tableContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCK_ESCALATION, 0)
}

func (s *Alter_tableContext) ADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserADD, 0)
}

func (s *Alter_tableContext) Column_def_table_constraint() IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Alter_tableContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLUMN, 0)
}

func (s *Alter_tableContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *Alter_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Alter_tableContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_tableContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONSTRAINT, 0)
}

func (s *Alter_tableContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_tableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK, 0)
}

func (s *Alter_tableContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOREIGN, 0)
}

func (s *Alter_tableContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Alter_tableContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(TSqlParserREFERENCES, 0)
}

func (s *Alter_tableContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(TSqlParserREBUILD, 0)
}

func (s *Alter_tableContext) Table_options() ITable_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_optionsContext)
}

func (s *Alter_tableContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Alter_tableContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Alter_tableContext) AllColumn_name_list() []IColumn_name_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem())
	var tst = make([]IColumn_name_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_name_listContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Column_name_list(i int) IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Alter_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_table(s)
	}
}

func (s *Alter_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_table(s)
	}
}

func (s *Alter_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_table() (localctx IAlter_tableContext) {
	localctx = NewAlter_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, TSqlParserRULE_alter_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6494)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(6495)
		p.Match(TSqlParserTABLE)
	}
	{
		p.SetState(6496)
		p.Table_name()
	}
	p.SetState(6535)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 859, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6497)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(6498)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6499)
			p.Match(TSqlParserLOCK_ESCALATION)
		}
		{
			p.SetState(6500)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6501)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTABLE || _la == TSqlParserAUTO || _la == TSqlParserDISABLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(6502)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		{
			p.SetState(6503)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(6504)
			p.Column_def_table_constraint()
		}

	case 3:
		{
			p.SetState(6505)
			p.Match(TSqlParserALTER)
		}
		{
			p.SetState(6506)
			p.Match(TSqlParserCOLUMN)
		}
		{
			p.SetState(6507)
			p.Column_definition()
		}

	case 4:
		{
			p.SetState(6508)
			p.Match(TSqlParserDROP)
		}
		{
			p.SetState(6509)
			p.Match(TSqlParserCOLUMN)
		}
		{
			p.SetState(6510)
			p.Id()
		}

	case 5:
		{
			p.SetState(6511)
			p.Match(TSqlParserDROP)
		}
		{
			p.SetState(6512)
			p.Match(TSqlParserCONSTRAINT)
		}
		{
			p.SetState(6513)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	case 6:
		{
			p.SetState(6514)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(6515)
			p.Match(TSqlParserCHECK)
		}
		{
			p.SetState(6516)
			p.Match(TSqlParserADD)
		}
		{
			p.SetState(6517)
			p.Match(TSqlParserCONSTRAINT)
		}
		{
			p.SetState(6518)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}
		{
			p.SetState(6519)
			p.Match(TSqlParserFOREIGN)
		}
		{
			p.SetState(6520)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(6521)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6522)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).fk = _x
		}
		{
			p.SetState(6523)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(6524)
			p.Match(TSqlParserREFERENCES)
		}
		{
			p.SetState(6525)
			p.Table_name()
		}
		{
			p.SetState(6526)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6527)

			var _x = p.Column_name_list()

			localctx.(*Alter_tableContext).pk = _x
		}
		{
			p.SetState(6528)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 7:
		{
			p.SetState(6530)
			p.Match(TSqlParserCHECK)
		}
		{
			p.SetState(6531)
			p.Match(TSqlParserCONSTRAINT)
		}
		{
			p.SetState(6532)

			var _x = p.Id()

			localctx.(*Alter_tableContext).constraint = _x
		}

	case 8:
		{
			p.SetState(6533)
			p.Match(TSqlParserREBUILD)
		}
		{
			p.SetState(6534)
			p.Table_options()
		}

	}
	p.SetState(6538)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 860, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6537)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IAlter_databaseContext is an interface to support dynamic dispatch.
type IAlter_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetNew_name returns the new_name rule contexts.
	GetNew_name() IIdContext

	// GetCollation returns the collation rule contexts.
	GetCollation() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetNew_name sets the new_name rule contexts.
	SetNew_name(IIdContext)

	// SetCollation sets the collation rule contexts.
	SetCollation(IIdContext)

	// IsAlter_databaseContext differentiates from other interfaces.
	IsAlter_databaseContext()
}

type Alter_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IIdContext
	new_name  IIdContext
	collation IIdContext
}

func NewEmptyAlter_databaseContext() *Alter_databaseContext {
	var p = new(Alter_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_database
	return p
}

func (*Alter_databaseContext) IsAlter_databaseContext() {}

func NewAlter_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_databaseContext {
	var p = new(Alter_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_database

	return p
}

func (s *Alter_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_databaseContext) GetDatabase() IIdContext { return s.database }

func (s *Alter_databaseContext) GetNew_name() IIdContext { return s.new_name }

func (s *Alter_databaseContext) GetCollation() IIdContext { return s.collation }

func (s *Alter_databaseContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Alter_databaseContext) SetNew_name(v IIdContext) { s.new_name = v }

func (s *Alter_databaseContext) SetCollation(v IIdContext) { s.collation = v }

func (s *Alter_databaseContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Alter_databaseContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT, 0)
}

func (s *Alter_databaseContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Alter_databaseContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Alter_databaseContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLATE, 0)
}

func (s *Alter_databaseContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Alter_databaseContext) Database_optionspec() IDatabase_optionspecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_optionspecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_optionspecContext)
}

func (s *Alter_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Alter_databaseContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Alter_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_database(s)
	}
}

func (s *Alter_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_database(s)
	}
}

func (s *Alter_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_database() (localctx IAlter_databaseContext) {
	localctx = NewAlter_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, TSqlParserRULE_alter_database)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6540)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(6541)
		p.Match(TSqlParserDATABASE)
	}
	p.SetState(6544)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(6542)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).database = _x
		}

	case TSqlParserCURRENT:
		{
			p.SetState(6543)
			p.Match(TSqlParserCURRENT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6558)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserMODIFY:
		{
			p.SetState(6546)
			p.Match(TSqlParserMODIFY)
		}
		{
			p.SetState(6547)
			p.Match(TSqlParserNAME)
		}
		{
			p.SetState(6548)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(6549)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).new_name = _x
		}

	case TSqlParserCOLLATE:
		{
			p.SetState(6550)
			p.Match(TSqlParserCOLLATE)
		}
		{
			p.SetState(6551)

			var _x = p.Id()

			localctx.(*Alter_databaseContext).collation = _x
		}

	case TSqlParserSET:
		{
			p.SetState(6552)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(6553)
			p.Database_optionspec()
		}
		p.SetState(6556)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 862, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(6554)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(6555)
				p.Termination()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(6561)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 864, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6560)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDatabase_optionspecContext is an interface to support dynamic dispatch.
type IDatabase_optionspecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_optionspecContext differentiates from other interfaces.
	IsDatabase_optionspecContext()
}

type Database_optionspecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_optionspecContext() *Database_optionspecContext {
	var p = new(Database_optionspecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_database_optionspec
	return p
}

func (*Database_optionspecContext) IsDatabase_optionspecContext() {}

func NewDatabase_optionspecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_optionspecContext {
	var p = new(Database_optionspecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_database_optionspec

	return p
}

func (s *Database_optionspecContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_optionspecContext) Auto_option() IAuto_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuto_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuto_optionContext)
}

func (s *Database_optionspecContext) Change_tracking_option() IChange_tracking_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_optionContext)
}

func (s *Database_optionspecContext) Containment_option() IContainment_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContainment_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContainment_optionContext)
}

func (s *Database_optionspecContext) Cursor_option() ICursor_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_optionContext)
}

func (s *Database_optionspecContext) Database_mirroring_option() IDatabase_mirroring_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_mirroring_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_mirroring_optionContext)
}

func (s *Database_optionspecContext) Date_correlation_optimization_option() IDate_correlation_optimization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDate_correlation_optimization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDate_correlation_optimization_optionContext)
}

func (s *Database_optionspecContext) Db_encryption_option() IDb_encryption_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_encryption_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_encryption_optionContext)
}

func (s *Database_optionspecContext) Db_state_option() IDb_state_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_state_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_state_optionContext)
}

func (s *Database_optionspecContext) Db_update_option() IDb_update_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_update_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_update_optionContext)
}

func (s *Database_optionspecContext) Db_user_access_option() IDb_user_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDb_user_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDb_user_access_optionContext)
}

func (s *Database_optionspecContext) Delayed_durability_option() IDelayed_durability_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelayed_durability_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelayed_durability_optionContext)
}

func (s *Database_optionspecContext) External_access_option() IExternal_access_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExternal_access_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExternal_access_optionContext)
}

func (s *Database_optionspecContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILESTREAM, 0)
}

func (s *Database_optionspecContext) Database_filestream_option() IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Database_optionspecContext) Hadr_options() IHadr_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHadr_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHadr_optionsContext)
}

func (s *Database_optionspecContext) Mixed_page_allocation_option() IMixed_page_allocation_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMixed_page_allocation_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMixed_page_allocation_optionContext)
}

func (s *Database_optionspecContext) Parameterization_option() IParameterization_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterization_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterization_optionContext)
}

func (s *Database_optionspecContext) Recovery_option() IRecovery_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecovery_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecovery_optionContext)
}

func (s *Database_optionspecContext) Service_broker_option() IService_broker_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IService_broker_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IService_broker_optionContext)
}

func (s *Database_optionspecContext) Snapshot_option() ISnapshot_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISnapshot_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISnapshot_optionContext)
}

func (s *Database_optionspecContext) Sql_option() ISql_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_optionContext)
}

func (s *Database_optionspecContext) Target_recovery_time_option() ITarget_recovery_time_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITarget_recovery_time_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITarget_recovery_time_optionContext)
}

func (s *Database_optionspecContext) Termination() ITerminationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITerminationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITerminationContext)
}

func (s *Database_optionspecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_optionspecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_optionspecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDatabase_optionspec(s)
	}
}

func (s *Database_optionspecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDatabase_optionspec(s)
	}
}

func (s *Database_optionspecContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDatabase_optionspec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Database_optionspec() (localctx IDatabase_optionspecContext) {
	localctx = NewDatabase_optionspecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, TSqlParserRULE_database_optionspec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6586)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 865, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6563)
			p.Auto_option()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6564)
			p.Change_tracking_option()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6565)
			p.Containment_option()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6566)
			p.Cursor_option()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6567)
			p.Database_mirroring_option()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6568)
			p.Date_correlation_optimization_option()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6569)
			p.Db_encryption_option()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6570)
			p.Db_state_option()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6571)
			p.Db_update_option()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6572)
			p.Db_user_access_option()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(6573)
			p.Delayed_durability_option()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(6574)
			p.External_access_option()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(6575)
			p.Match(TSqlParserFILESTREAM)
		}
		{
			p.SetState(6576)
			p.Database_filestream_option()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(6577)
			p.Hadr_options()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(6578)
			p.Mixed_page_allocation_option()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(6579)
			p.Parameterization_option()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(6580)
			p.Recovery_option()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(6581)
			p.Service_broker_option()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(6582)
			p.Snapshot_option()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(6583)
			p.Sql_option()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(6584)
			p.Target_recovery_time_option()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(6585)
			p.Termination()
		}

	}

	return localctx
}

// IAuto_optionContext is an interface to support dynamic dispatch.
type IAuto_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuto_optionContext differentiates from other interfaces.
	IsAuto_optionContext()
}

type Auto_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuto_optionContext() *Auto_optionContext {
	var p = new(Auto_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_auto_option
	return p
}

func (*Auto_optionContext) IsAuto_optionContext() {}

func NewAuto_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Auto_optionContext {
	var p = new(Auto_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_auto_option

	return p
}

func (s *Auto_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Auto_optionContext) AUTO_CLOSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_CLOSE, 0)
}

func (s *Auto_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Auto_optionContext) AUTO_CREATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_CREATE_STATISTICS, 0)
}

func (s *Auto_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Auto_optionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Auto_optionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Auto_optionContext) INCREMENTAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserINCREMENTAL, 0)
}

func (s *Auto_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Auto_optionContext) AUTO_SHRINK() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_SHRINK, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_UPDATE_STATISTICS, 0)
}

func (s *Auto_optionContext) AUTO_UPDATE_STATISTICS_ASYNC() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_UPDATE_STATISTICS_ASYNC, 0)
}

func (s *Auto_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Auto_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Auto_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAuto_option(s)
	}
}

func (s *Auto_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAuto_option(s)
	}
}

func (s *Auto_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAuto_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Auto_option() (localctx IAuto_optionContext) {
	localctx = NewAuto_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, TSqlParserRULE_auto_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6605)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserAUTO_CLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6588)
			p.Match(TSqlParserAUTO_CLOSE)
		}
		{
			p.SetState(6589)
			p.On_off()
		}

	case TSqlParserAUTO_CREATE_STATISTICS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6590)
			p.Match(TSqlParserAUTO_CREATE_STATISTICS)
		}
		{
			p.SetState(6591)
			p.Match(TSqlParserOFF)
		}

	case TSqlParserON:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6592)
			p.Match(TSqlParserON)
		}
		p.SetState(6597)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserINCREMENTAL:
			{
				p.SetState(6593)
				p.Match(TSqlParserINCREMENTAL)
			}
			{
				p.SetState(6594)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(6595)
				p.Match(TSqlParserON)
			}

		case TSqlParserOFF:
			{
				p.SetState(6596)
				p.Match(TSqlParserOFF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserAUTO_SHRINK:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6599)
			p.Match(TSqlParserAUTO_SHRINK)
		}
		{
			p.SetState(6600)
			p.On_off()
		}

	case TSqlParserAUTO_UPDATE_STATISTICS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6601)
			p.Match(TSqlParserAUTO_UPDATE_STATISTICS)
		}
		{
			p.SetState(6602)
			p.On_off()
		}

	case TSqlParserAUTO_UPDATE_STATISTICS_ASYNC:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6603)
			p.Match(TSqlParserAUTO_UPDATE_STATISTICS_ASYNC)
		}
		p.SetState(6604)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_optionContext is an interface to support dynamic dispatch.
type IChange_tracking_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_optionContext differentiates from other interfaces.
	IsChange_tracking_optionContext()
}

type Change_tracking_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_optionContext() *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_change_tracking_option
	return p
}

func (*Change_tracking_optionContext) IsChange_tracking_optionContext() {}

func NewChange_tracking_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_optionContext {
	var p = new(Change_tracking_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_change_tracking_option

	return p
}

func (s *Change_tracking_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_optionContext) CHANGE_TRACKING() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHANGE_TRACKING, 0)
}

func (s *Change_tracking_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Change_tracking_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Change_tracking_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Change_tracking_optionContext) AllChange_tracking_option_list() []IChange_tracking_option_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem())
	var tst = make([]IChange_tracking_option_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChange_tracking_option_listContext)
		}
	}

	return tst
}

func (s *Change_tracking_optionContext) Change_tracking_option_list(i int) IChange_tracking_option_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tracking_option_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChange_tracking_option_listContext)
}

func (s *Change_tracking_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterChange_tracking_option(s)
	}
}

func (s *Change_tracking_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitChange_tracking_option(s)
	}
}

func (s *Change_tracking_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitChange_tracking_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Change_tracking_option() (localctx IChange_tracking_optionContext) {
	localctx = NewChange_tracking_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, TSqlParserRULE_change_tracking_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6607)
		p.Match(TSqlParserCHANGE_TRACKING)
	}
	{
		p.SetState(6608)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(6624)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserOFF:
		{
			p.SetState(6609)
			p.Match(TSqlParserOFF)
		}

	case TSqlParserON:
		{
			p.SetState(6610)
			p.Match(TSqlParserON)
		}
		p.SetState(6621)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserAUTO_CLEANUP || _la == TSqlParserCHANGE_RETENTION {
			{
				p.SetState(6611)
				p.Change_tracking_option_list()
			}
			p.SetState(6616)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserCOMMA {
				{
					p.SetState(6612)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(6613)
					p.Change_tracking_option_list()
				}

				p.SetState(6618)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(6623)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IChange_tracking_option_listContext is an interface to support dynamic dispatch.
type IChange_tracking_option_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tracking_option_listContext differentiates from other interfaces.
	IsChange_tracking_option_listContext()
}

type Change_tracking_option_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tracking_option_listContext() *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_change_tracking_option_list
	return p
}

func (*Change_tracking_option_listContext) IsChange_tracking_option_listContext() {}

func NewChange_tracking_option_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tracking_option_listContext {
	var p = new(Change_tracking_option_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_change_tracking_option_list

	return p
}

func (s *Change_tracking_option_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tracking_option_listContext) AUTO_CLEANUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO_CLEANUP, 0)
}

func (s *Change_tracking_option_listContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Change_tracking_option_listContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Change_tracking_option_listContext) CHANGE_RETENTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHANGE_RETENTION, 0)
}

func (s *Change_tracking_option_listContext) DAYS() antlr.TerminalNode {
	return s.GetToken(TSqlParserDAYS, 0)
}

func (s *Change_tracking_option_listContext) HOURS() antlr.TerminalNode {
	return s.GetToken(TSqlParserHOURS, 0)
}

func (s *Change_tracking_option_listContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMINUTES, 0)
}

func (s *Change_tracking_option_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tracking_option_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tracking_option_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterChange_tracking_option_list(s)
	}
}

func (s *Change_tracking_option_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitChange_tracking_option_list(s)
	}
}

func (s *Change_tracking_option_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitChange_tracking_option_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Change_tracking_option_list() (localctx IChange_tracking_option_listContext) {
	localctx = NewChange_tracking_option_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, TSqlParserRULE_change_tracking_option_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6632)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserAUTO_CLEANUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6626)
			p.Match(TSqlParserAUTO_CLEANUP)
		}
		{
			p.SetState(6627)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(6628)
			p.On_off()
		}

	case TSqlParserCHANGE_RETENTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6629)
			p.Match(TSqlParserCHANGE_RETENTION)
		}
		{
			p.SetState(6630)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6631)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDAYS || _la == TSqlParserHOURS || _la == TSqlParserMINUTES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IContainment_optionContext is an interface to support dynamic dispatch.
type IContainment_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContainment_optionContext differentiates from other interfaces.
	IsContainment_optionContext()
}

type Containment_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContainment_optionContext() *Containment_optionContext {
	var p = new(Containment_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_containment_option
	return p
}

func (*Containment_optionContext) IsContainment_optionContext() {}

func NewContainment_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Containment_optionContext {
	var p = new(Containment_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_containment_option

	return p
}

func (s *Containment_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Containment_optionContext) CONTAINMENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTAINMENT, 0)
}

func (s *Containment_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Containment_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Containment_optionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTIAL, 0)
}

func (s *Containment_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Containment_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Containment_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterContainment_option(s)
	}
}

func (s *Containment_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitContainment_option(s)
	}
}

func (s *Containment_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitContainment_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Containment_option() (localctx IContainment_optionContext) {
	localctx = NewContainment_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, TSqlParserRULE_containment_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6634)
		p.Match(TSqlParserCONTAINMENT)
	}
	{
		p.SetState(6635)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(6636)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserNONE || _la == TSqlParserPARTIAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICursor_optionContext is an interface to support dynamic dispatch.
type ICursor_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_optionContext differentiates from other interfaces.
	IsCursor_optionContext()
}

type Cursor_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_optionContext() *Cursor_optionContext {
	var p = new(Cursor_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_cursor_option
	return p
}

func (*Cursor_optionContext) IsCursor_optionContext() {}

func NewCursor_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_optionContext {
	var p = new(Cursor_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_cursor_option

	return p
}

func (s *Cursor_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_optionContext) CURSOR_CLOSE_ON_COMMIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURSOR_CLOSE_ON_COMMIT, 0)
}

func (s *Cursor_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Cursor_optionContext) CURSOR_DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURSOR_DEFAULT, 0)
}

func (s *Cursor_optionContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL, 0)
}

func (s *Cursor_optionContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Cursor_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCursor_option(s)
	}
}

func (s *Cursor_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCursor_option(s)
	}
}

func (s *Cursor_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCursor_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Cursor_option() (localctx ICursor_optionContext) {
	localctx = NewCursor_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, TSqlParserRULE_cursor_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6642)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCURSOR_CLOSE_ON_COMMIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6638)
			p.Match(TSqlParserCURSOR_CLOSE_ON_COMMIT)
		}
		{
			p.SetState(6639)
			p.On_off()
		}

	case TSqlParserCURSOR_DEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6640)
			p.Match(TSqlParserCURSOR_DEFAULT)
		}
		p.SetState(6641)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserGLOBAL || _la == TSqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlter_endpointContext is an interface to support dynamic dispatch.
type IAlter_endpointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetState returns the state token.
	GetState() antlr.Token

	// GetPort returns the port token.
	GetPort() antlr.Token

	// SetState sets the state token.
	SetState(antlr.Token)

	// SetPort sets the port token.
	SetPort(antlr.Token)

	// GetEndpointname returns the endpointname rule contexts.
	GetEndpointname() IIdContext

	// GetLogin returns the login rule contexts.
	GetLogin() IIdContext

	// GetCert_name returns the cert_name rule contexts.
	GetCert_name() IIdContext

	// SetEndpointname sets the endpointname rule contexts.
	SetEndpointname(IIdContext)

	// SetLogin sets the login rule contexts.
	SetLogin(IIdContext)

	// SetCert_name sets the cert_name rule contexts.
	SetCert_name(IIdContext)

	// IsAlter_endpointContext differentiates from other interfaces.
	IsAlter_endpointContext()
}

type Alter_endpointContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	endpointname IIdContext
	login        IIdContext
	state        antlr.Token
	port         antlr.Token
	cert_name    IIdContext
}

func NewEmptyAlter_endpointContext() *Alter_endpointContext {
	var p = new(Alter_endpointContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_alter_endpoint
	return p
}

func (*Alter_endpointContext) IsAlter_endpointContext() {}

func NewAlter_endpointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_endpointContext {
	var p = new(Alter_endpointContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_alter_endpoint

	return p
}

func (s *Alter_endpointContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_endpointContext) GetState() antlr.Token { return s.state }

func (s *Alter_endpointContext) GetPort() antlr.Token { return s.port }

func (s *Alter_endpointContext) SetState(v antlr.Token) { s.state = v }

func (s *Alter_endpointContext) SetPort(v antlr.Token) { s.port = v }

func (s *Alter_endpointContext) GetEndpointname() IIdContext { return s.endpointname }

func (s *Alter_endpointContext) GetLogin() IIdContext { return s.login }

func (s *Alter_endpointContext) GetCert_name() IIdContext { return s.cert_name }

func (s *Alter_endpointContext) SetEndpointname(v IIdContext) { s.endpointname = v }

func (s *Alter_endpointContext) SetLogin(v IIdContext) { s.login = v }

func (s *Alter_endpointContext) SetCert_name(v IIdContext) { s.cert_name = v }

func (s *Alter_endpointContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Alter_endpointContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserENDPOINT, 0)
}

func (s *Alter_endpointContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Alter_endpointContext) TCP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTCP, 0)
}

func (s *Alter_endpointContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Alter_endpointContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Alter_endpointContext) LISTENER_PORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserLISTENER_PORT, 0)
}

func (s *Alter_endpointContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Alter_endpointContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Alter_endpointContext) AllRR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRR_BRACKET)
}

func (s *Alter_endpointContext) RR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, i)
}

func (s *Alter_endpointContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Alter_endpointContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Alter_endpointContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Alter_endpointContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Alter_endpointContext) TSQL() antlr.TerminalNode {
	return s.GetToken(TSqlParserTSQL, 0)
}

func (s *Alter_endpointContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Alter_endpointContext) SERVICE_BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE_BROKER, 0)
}

func (s *Alter_endpointContext) AUTHENTICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHENTICATION, 0)
}

func (s *Alter_endpointContext) DATABASE_MIRRORING() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE_MIRRORING, 0)
}

func (s *Alter_endpointContext) ROLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLE, 0)
}

func (s *Alter_endpointContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Alter_endpointContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Alter_endpointContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Alter_endpointContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Alter_endpointContext) LISTENER_IP() antlr.TerminalNode {
	return s.GetToken(TSqlParserLISTENER_IP, 0)
}

func (s *Alter_endpointContext) WITNESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITNESS, 0)
}

func (s *Alter_endpointContext) PARTNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTNER, 0)
}

func (s *Alter_endpointContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALL)
}

func (s *Alter_endpointContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, i)
}

func (s *Alter_endpointContext) IPV4_ADDR() antlr.TerminalNode {
	return s.GetToken(TSqlParserIPV4_ADDR, 0)
}

func (s *Alter_endpointContext) IPV6_ADDR() antlr.TerminalNode {
	return s.GetToken(TSqlParserIPV6_ADDR, 0)
}

func (s *Alter_endpointContext) WINDOWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWINDOWS, 0)
}

func (s *Alter_endpointContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Alter_endpointContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Alter_endpointContext) MESSAGE_FORWARDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE_FORWARDING, 0)
}

func (s *Alter_endpointContext) MESSAGE_FORWARD_SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE_FORWARD_SIZE, 0)
}

func (s *Alter_endpointContext) STARTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTARTED, 0)
}

func (s *Alter_endpointContext) STOPPED() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOPPED, 0)
}

func (s *Alter_endpointContext) AllDISABLED() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDISABLED)
}

func (s *Alter_endpointContext) DISABLED(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLED, i)
}

func (s *Alter_endpointContext) SUPPORTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUPPORTED, 0)
}

func (s *Alter_endpointContext) REQUIRED() antlr.TerminalNode {
	return s.GetToken(TSqlParserREQUIRED, 0)
}

func (s *Alter_endpointContext) ENABLED() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLED, 0)
}

func (s *Alter_endpointContext) NTLM() antlr.TerminalNode {
	return s.GetToken(TSqlParserNTLM, 0)
}

func (s *Alter_endpointContext) KERBEROS() antlr.TerminalNode {
	return s.GetToken(TSqlParserKERBEROS, 0)
}

func (s *Alter_endpointContext) NEGOTIATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEGOTIATE, 0)
}

func (s *Alter_endpointContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, 0)
}

func (s *Alter_endpointContext) AES() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES, 0)
}

func (s *Alter_endpointContext) RC4() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC4, 0)
}

func (s *Alter_endpointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_endpointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_endpointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlter_endpoint(s)
	}
}

func (s *Alter_endpointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlter_endpoint(s)
	}
}

func (s *Alter_endpointContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlter_endpoint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Alter_endpoint() (localctx IAlter_endpointContext) {
	localctx = NewAlter_endpointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, TSqlParserRULE_alter_endpoint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6644)
		p.Match(TSqlParserALTER)
	}
	{
		p.SetState(6645)
		p.Match(TSqlParserENDPOINT)
	}
	{
		p.SetState(6646)

		var _x = p.Id()

		localctx.(*Alter_endpointContext).endpointname = _x
	}
	p.SetState(6649)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(6647)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(6648)

			var _x = p.Id()

			localctx.(*Alter_endpointContext).login = _x
		}

	}
	p.SetState(6658)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSTATE {
		{
			p.SetState(6651)
			p.Match(TSqlParserSTATE)
		}
		{
			p.SetState(6652)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6656)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSTARTED:
			{
				p.SetState(6653)

				var _m = p.Match(TSqlParserSTARTED)

				localctx.(*Alter_endpointContext).state = _m
			}

		case TSqlParserSTOPPED:
			{
				p.SetState(6654)

				var _m = p.Match(TSqlParserSTOPPED)

				localctx.(*Alter_endpointContext).state = _m
			}

		case TSqlParserDISABLED:
			{
				p.SetState(6655)

				var _m = p.Match(TSqlParserDISABLED)

				localctx.(*Alter_endpointContext).state = _m
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(6660)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(6661)
		p.Match(TSqlParserTCP)
	}
	{
		p.SetState(6662)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(6663)
		p.Match(TSqlParserLISTENER_PORT)
	}
	{
		p.SetState(6664)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(6665)

		var _m = p.Match(TSqlParserDECIMAL)

		localctx.(*Alter_endpointContext).port = _m
	}
	p.SetState(6670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(6666)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(6667)
			p.Match(TSqlParserLISTENER_IP)
		}
		{
			p.SetState(6668)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6669)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserALL || _la == TSqlParserIPV4_ADDR || _la == TSqlParserIPV6_ADDR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(6672)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(6782)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 900, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6673)
			p.Match(TSqlParserTSQL)
		}

	case 2:
		{
			p.SetState(6674)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(6675)
			p.Match(TSqlParserSERVICE_BROKER)
		}
		{
			p.SetState(6676)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6677)
			p.Match(TSqlParserAUTHENTICATION)
		}
		{
			p.SetState(6678)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6695)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserWINDOWS:
			{
				p.SetState(6679)
				p.Match(TSqlParserWINDOWS)
			}
			p.SetState(6681)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM {
				p.SetState(6680)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			p.SetState(6685)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCERTIFICATE {
				{
					p.SetState(6683)
					p.Match(TSqlParserCERTIFICATE)
				}
				{
					p.SetState(6684)

					var _x = p.Id()

					localctx.(*Alter_endpointContext).cert_name = _x
				}

			}

		case TSqlParserCERTIFICATE:
			{
				p.SetState(6687)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(6688)

				var _x = p.Id()

				localctx.(*Alter_endpointContext).cert_name = _x
			}
			p.SetState(6690)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserWINDOWS {
				{
					p.SetState(6689)
					p.Match(TSqlParserWINDOWS)
				}

			}
			p.SetState(6693)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM {
				p.SetState(6692)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6714)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 885, p.GetParserRuleContext()) == 1 {
			p.SetState(6698)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(6697)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(6700)
				p.Match(TSqlParserENCRYPTION)
			}
			{
				p.SetState(6701)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(6702)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserREQUIRED || _la == TSqlParserSUPPORTED || _la == TSqlParserDISABLED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(6712)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserALGORITHM {
				{
					p.SetState(6703)
					p.Match(TSqlParserALGORITHM)
				}
				p.SetState(6710)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 883, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(6704)
						p.Match(TSqlParserAES)
					}

				case 2:
					{
						p.SetState(6705)
						p.Match(TSqlParserRC4)
					}

				case 3:
					{
						p.SetState(6706)
						p.Match(TSqlParserAES)
					}
					{
						p.SetState(6707)
						p.Match(TSqlParserRC4)
					}

				case 4:
					{
						p.SetState(6708)
						p.Match(TSqlParserRC4)
					}
					{
						p.SetState(6709)
						p.Match(TSqlParserAES)
					}

				}

			}

		}
		p.SetState(6722)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 887, p.GetParserRuleContext()) == 1 {
			p.SetState(6717)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(6716)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(6719)
				p.Match(TSqlParserMESSAGE_FORWARDING)
			}
			{
				p.SetState(6720)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(6721)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserENABLED || _la == TSqlParserDISABLED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(6730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserMESSAGE_FORWARD_SIZE || _la == TSqlParserCOMMA {
			p.SetState(6725)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(6724)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(6727)
				p.Match(TSqlParserMESSAGE_FORWARD_SIZE)
			}
			{
				p.SetState(6728)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(6729)
				p.Match(TSqlParserDECIMAL)
			}

		}
		{
			p.SetState(6732)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 3:
		{
			p.SetState(6733)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(6734)
			p.Match(TSqlParserDATABASE_MIRRORING)
		}
		{
			p.SetState(6735)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(6736)
			p.Match(TSqlParserAUTHENTICATION)
		}
		{
			p.SetState(6737)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6754)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserWINDOWS:
			{
				p.SetState(6738)
				p.Match(TSqlParserWINDOWS)
			}
			p.SetState(6740)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM {
				p.SetState(6739)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			p.SetState(6744)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCERTIFICATE {
				{
					p.SetState(6742)
					p.Match(TSqlParserCERTIFICATE)
				}
				{
					p.SetState(6743)

					var _x = p.Id()

					localctx.(*Alter_endpointContext).cert_name = _x
				}

			}

		case TSqlParserCERTIFICATE:
			{
				p.SetState(6746)
				p.Match(TSqlParserCERTIFICATE)
			}
			{
				p.SetState(6747)

				var _x = p.Id()

				localctx.(*Alter_endpointContext).cert_name = _x
			}
			p.SetState(6749)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserWINDOWS {
				{
					p.SetState(6748)
					p.Match(TSqlParserWINDOWS)
				}

			}
			p.SetState(6752)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM {
				p.SetState(6751)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserKERBEROS || _la == TSqlParserNEGOTIATE || _la == TSqlParserNTLM) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(6773)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 898, p.GetParserRuleContext()) == 1 {
			p.SetState(6757)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(6756)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(6759)
				p.Match(TSqlParserENCRYPTION)
			}
			{
				p.SetState(6760)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(6761)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserREQUIRED || _la == TSqlParserSUPPORTED || _la == TSqlParserDISABLED) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(6771)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserALGORITHM {
				{
					p.SetState(6762)
					p.Match(TSqlParserALGORITHM)
				}
				p.SetState(6769)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 896, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(6763)
						p.Match(TSqlParserAES)
					}

				case 2:
					{
						p.SetState(6764)
						p.Match(TSqlParserRC4)
					}

				case 3:
					{
						p.SetState(6765)
						p.Match(TSqlParserAES)
					}
					{
						p.SetState(6766)
						p.Match(TSqlParserRC4)
					}

				case 4:
					{
						p.SetState(6767)
						p.Match(TSqlParserRC4)
					}
					{
						p.SetState(6768)
						p.Match(TSqlParserAES)
					}

				}

			}

		}
		p.SetState(6776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(6775)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(6778)
			p.Match(TSqlParserROLE)
		}
		{
			p.SetState(6779)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6780)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserALL || _la == TSqlParserWITNESS || _la == TSqlParserPARTNER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(6781)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDatabase_mirroring_optionContext is an interface to support dynamic dispatch.
type IDatabase_mirroring_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_mirroring_optionContext differentiates from other interfaces.
	IsDatabase_mirroring_optionContext()
}

type Database_mirroring_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_mirroring_optionContext() *Database_mirroring_optionContext {
	var p = new(Database_mirroring_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_database_mirroring_option
	return p
}

func (*Database_mirroring_optionContext) IsDatabase_mirroring_optionContext() {}

func NewDatabase_mirroring_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_mirroring_optionContext {
	var p = new(Database_mirroring_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_database_mirroring_option

	return p
}

func (s *Database_mirroring_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_mirroring_optionContext) Mirroring_set_option() IMirroring_set_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMirroring_set_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMirroring_set_optionContext)
}

func (s *Database_mirroring_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_mirroring_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_mirroring_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDatabase_mirroring_option(s)
	}
}

func (s *Database_mirroring_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDatabase_mirroring_option(s)
	}
}

func (s *Database_mirroring_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDatabase_mirroring_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Database_mirroring_option() (localctx IDatabase_mirroring_optionContext) {
	localctx = NewDatabase_mirroring_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, TSqlParserRULE_database_mirroring_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6784)
		p.Mirroring_set_option()
	}

	return localctx
}

// IMirroring_set_optionContext is an interface to support dynamic dispatch.
type IMirroring_set_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMirroring_set_optionContext differentiates from other interfaces.
	IsMirroring_set_optionContext()
}

type Mirroring_set_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMirroring_set_optionContext() *Mirroring_set_optionContext {
	var p = new(Mirroring_set_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_mirroring_set_option
	return p
}

func (*Mirroring_set_optionContext) IsMirroring_set_optionContext() {}

func NewMirroring_set_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mirroring_set_optionContext {
	var p = new(Mirroring_set_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_mirroring_set_option

	return p
}

func (s *Mirroring_set_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Mirroring_set_optionContext) Mirroring_partner() IMirroring_partnerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMirroring_partnerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMirroring_partnerContext)
}

func (s *Mirroring_set_optionContext) Partner_option() IPartner_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartner_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartner_optionContext)
}

func (s *Mirroring_set_optionContext) Mirroring_witness() IMirroring_witnessContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMirroring_witnessContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMirroring_witnessContext)
}

func (s *Mirroring_set_optionContext) Witness_option() IWitness_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWitness_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWitness_optionContext)
}

func (s *Mirroring_set_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mirroring_set_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mirroring_set_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMirroring_set_option(s)
	}
}

func (s *Mirroring_set_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMirroring_set_option(s)
	}
}

func (s *Mirroring_set_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMirroring_set_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Mirroring_set_option() (localctx IMirroring_set_optionContext) {
	localctx = NewMirroring_set_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, TSqlParserRULE_mirroring_set_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6792)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserPARTNER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6786)
			p.Mirroring_partner()
		}
		{
			p.SetState(6787)
			p.Partner_option()
		}

	case TSqlParserWITNESS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6789)
			p.Mirroring_witness()
		}
		{
			p.SetState(6790)
			p.Witness_option()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMirroring_partnerContext is an interface to support dynamic dispatch.
type IMirroring_partnerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMirroring_partnerContext differentiates from other interfaces.
	IsMirroring_partnerContext()
}

type Mirroring_partnerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMirroring_partnerContext() *Mirroring_partnerContext {
	var p = new(Mirroring_partnerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_mirroring_partner
	return p
}

func (*Mirroring_partnerContext) IsMirroring_partnerContext() {}

func NewMirroring_partnerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mirroring_partnerContext {
	var p = new(Mirroring_partnerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_mirroring_partner

	return p
}

func (s *Mirroring_partnerContext) GetParser() antlr.Parser { return s.parser }

func (s *Mirroring_partnerContext) PARTNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTNER, 0)
}

func (s *Mirroring_partnerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mirroring_partnerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mirroring_partnerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMirroring_partner(s)
	}
}

func (s *Mirroring_partnerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMirroring_partner(s)
	}
}

func (s *Mirroring_partnerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMirroring_partner(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Mirroring_partner() (localctx IMirroring_partnerContext) {
	localctx = NewMirroring_partnerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, TSqlParserRULE_mirroring_partner)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6794)
		p.Match(TSqlParserPARTNER)
	}

	return localctx
}

// IMirroring_witnessContext is an interface to support dynamic dispatch.
type IMirroring_witnessContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMirroring_witnessContext differentiates from other interfaces.
	IsMirroring_witnessContext()
}

type Mirroring_witnessContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMirroring_witnessContext() *Mirroring_witnessContext {
	var p = new(Mirroring_witnessContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_mirroring_witness
	return p
}

func (*Mirroring_witnessContext) IsMirroring_witnessContext() {}

func NewMirroring_witnessContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mirroring_witnessContext {
	var p = new(Mirroring_witnessContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_mirroring_witness

	return p
}

func (s *Mirroring_witnessContext) GetParser() antlr.Parser { return s.parser }

func (s *Mirroring_witnessContext) WITNESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITNESS, 0)
}

func (s *Mirroring_witnessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mirroring_witnessContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mirroring_witnessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMirroring_witness(s)
	}
}

func (s *Mirroring_witnessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMirroring_witness(s)
	}
}

func (s *Mirroring_witnessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMirroring_witness(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Mirroring_witness() (localctx IMirroring_witnessContext) {
	localctx = NewMirroring_witnessContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, TSqlParserRULE_mirroring_witness)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6796)
		p.Match(TSqlParserWITNESS)
	}

	return localctx
}

// IWitness_partner_equalContext is an interface to support dynamic dispatch.
type IWitness_partner_equalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWitness_partner_equalContext differentiates from other interfaces.
	IsWitness_partner_equalContext()
}

type Witness_partner_equalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWitness_partner_equalContext() *Witness_partner_equalContext {
	var p = new(Witness_partner_equalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_witness_partner_equal
	return p
}

func (*Witness_partner_equalContext) IsWitness_partner_equalContext() {}

func NewWitness_partner_equalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Witness_partner_equalContext {
	var p = new(Witness_partner_equalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_witness_partner_equal

	return p
}

func (s *Witness_partner_equalContext) GetParser() antlr.Parser { return s.parser }

func (s *Witness_partner_equalContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Witness_partner_equalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Witness_partner_equalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Witness_partner_equalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWitness_partner_equal(s)
	}
}

func (s *Witness_partner_equalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWitness_partner_equal(s)
	}
}

func (s *Witness_partner_equalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWitness_partner_equal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Witness_partner_equal() (localctx IWitness_partner_equalContext) {
	localctx = NewWitness_partner_equalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, TSqlParserRULE_witness_partner_equal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6798)
		p.Match(TSqlParserEQUAL)
	}

	return localctx
}

// IPartner_optionContext is an interface to support dynamic dispatch.
type IPartner_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartner_optionContext differentiates from other interfaces.
	IsPartner_optionContext()
}

type Partner_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartner_optionContext() *Partner_optionContext {
	var p = new(Partner_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_partner_option
	return p
}

func (*Partner_optionContext) IsPartner_optionContext() {}

func NewPartner_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partner_optionContext {
	var p = new(Partner_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_partner_option

	return p
}

func (s *Partner_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Partner_optionContext) Witness_partner_equal() IWitness_partner_equalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWitness_partner_equalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWitness_partner_equalContext)
}

func (s *Partner_optionContext) Partner_server() IPartner_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartner_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartner_serverContext)
}

func (s *Partner_optionContext) FAILOVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAILOVER, 0)
}

func (s *Partner_optionContext) FORCE_SERVICE_ALLOW_DATA_LOSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE_SERVICE_ALLOW_DATA_LOSS, 0)
}

func (s *Partner_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Partner_optionContext) RESUME() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESUME, 0)
}

func (s *Partner_optionContext) SAFETY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAFETY, 0)
}

func (s *Partner_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULL, 0)
}

func (s *Partner_optionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUSPEND, 0)
}

func (s *Partner_optionContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIMEOUT, 0)
}

func (s *Partner_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Partner_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partner_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partner_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPartner_option(s)
	}
}

func (s *Partner_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPartner_option(s)
	}
}

func (s *Partner_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPartner_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Partner_option() (localctx IPartner_optionContext) {
	localctx = NewPartner_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, TSqlParserRULE_partner_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6812)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserEQUAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6800)
			p.Witness_partner_equal()
		}
		{
			p.SetState(6801)
			p.Partner_server()
		}

	case TSqlParserFAILOVER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6803)
			p.Match(TSqlParserFAILOVER)
		}

	case TSqlParserFORCE_SERVICE_ALLOW_DATA_LOSS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6804)
			p.Match(TSqlParserFORCE_SERVICE_ALLOW_DATA_LOSS)
		}

	case TSqlParserOFF:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6805)
			p.Match(TSqlParserOFF)
		}

	case TSqlParserRESUME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6806)
			p.Match(TSqlParserRESUME)
		}

	case TSqlParserSAFETY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6807)
			p.Match(TSqlParserSAFETY)
		}
		p.SetState(6808)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFULL || _la == TSqlParserOFF) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserSUSPEND:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6809)
			p.Match(TSqlParserSUSPEND)
		}

	case TSqlParserTIMEOUT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6810)
			p.Match(TSqlParserTIMEOUT)
		}
		{
			p.SetState(6811)
			p.Match(TSqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWitness_optionContext is an interface to support dynamic dispatch.
type IWitness_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWitness_optionContext differentiates from other interfaces.
	IsWitness_optionContext()
}

type Witness_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWitness_optionContext() *Witness_optionContext {
	var p = new(Witness_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_witness_option
	return p
}

func (*Witness_optionContext) IsWitness_optionContext() {}

func NewWitness_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Witness_optionContext {
	var p = new(Witness_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_witness_option

	return p
}

func (s *Witness_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Witness_optionContext) Witness_partner_equal() IWitness_partner_equalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWitness_partner_equalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWitness_partner_equalContext)
}

func (s *Witness_optionContext) Witness_server() IWitness_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWitness_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWitness_serverContext)
}

func (s *Witness_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Witness_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Witness_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Witness_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWitness_option(s)
	}
}

func (s *Witness_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWitness_option(s)
	}
}

func (s *Witness_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWitness_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Witness_option() (localctx IWitness_optionContext) {
	localctx = NewWitness_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, TSqlParserRULE_witness_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6818)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserEQUAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6814)
			p.Witness_partner_equal()
		}
		{
			p.SetState(6815)
			p.Witness_server()
		}

	case TSqlParserOFF:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6817)
			p.Match(TSqlParserOFF)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWitness_serverContext is an interface to support dynamic dispatch.
type IWitness_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWitness_serverContext differentiates from other interfaces.
	IsWitness_serverContext()
}

type Witness_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWitness_serverContext() *Witness_serverContext {
	var p = new(Witness_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_witness_server
	return p
}

func (*Witness_serverContext) IsWitness_serverContext() {}

func NewWitness_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Witness_serverContext {
	var p = new(Witness_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_witness_server

	return p
}

func (s *Witness_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Witness_serverContext) Partner_server() IPartner_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartner_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartner_serverContext)
}

func (s *Witness_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Witness_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Witness_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWitness_server(s)
	}
}

func (s *Witness_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWitness_server(s)
	}
}

func (s *Witness_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWitness_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Witness_server() (localctx IWitness_serverContext) {
	localctx = NewWitness_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, TSqlParserRULE_witness_server)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6820)
		p.Partner_server()
	}

	return localctx
}

// IPartner_serverContext is an interface to support dynamic dispatch.
type IPartner_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartner_serverContext differentiates from other interfaces.
	IsPartner_serverContext()
}

type Partner_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartner_serverContext() *Partner_serverContext {
	var p = new(Partner_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_partner_server
	return p
}

func (*Partner_serverContext) IsPartner_serverContext() {}

func NewPartner_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partner_serverContext {
	var p = new(Partner_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_partner_server

	return p
}

func (s *Partner_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Partner_serverContext) Partner_server_tcp_prefix() IPartner_server_tcp_prefixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartner_server_tcp_prefixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartner_server_tcp_prefixContext)
}

func (s *Partner_serverContext) Host() IHostContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHostContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHostContext)
}

func (s *Partner_serverContext) Mirroring_host_port_seperator() IMirroring_host_port_seperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMirroring_host_port_seperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMirroring_host_port_seperatorContext)
}

func (s *Partner_serverContext) Port_number() IPort_numberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPort_numberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPort_numberContext)
}

func (s *Partner_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partner_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partner_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPartner_server(s)
	}
}

func (s *Partner_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPartner_server(s)
	}
}

func (s *Partner_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPartner_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Partner_server() (localctx IPartner_serverContext) {
	localctx = NewPartner_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, TSqlParserRULE_partner_server)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6822)
		p.Partner_server_tcp_prefix()
	}
	{
		p.SetState(6823)
		p.Host()
	}
	{
		p.SetState(6824)
		p.Mirroring_host_port_seperator()
	}
	{
		p.SetState(6825)
		p.Port_number()
	}

	return localctx
}

// IMirroring_host_port_seperatorContext is an interface to support dynamic dispatch.
type IMirroring_host_port_seperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMirroring_host_port_seperatorContext differentiates from other interfaces.
	IsMirroring_host_port_seperatorContext()
}

type Mirroring_host_port_seperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMirroring_host_port_seperatorContext() *Mirroring_host_port_seperatorContext {
	var p = new(Mirroring_host_port_seperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_mirroring_host_port_seperator
	return p
}

func (*Mirroring_host_port_seperatorContext) IsMirroring_host_port_seperatorContext() {}

func NewMirroring_host_port_seperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mirroring_host_port_seperatorContext {
	var p = new(Mirroring_host_port_seperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_mirroring_host_port_seperator

	return p
}

func (s *Mirroring_host_port_seperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Mirroring_host_port_seperatorContext) COLON() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, 0)
}

func (s *Mirroring_host_port_seperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mirroring_host_port_seperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mirroring_host_port_seperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMirroring_host_port_seperator(s)
	}
}

func (s *Mirroring_host_port_seperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMirroring_host_port_seperator(s)
	}
}

func (s *Mirroring_host_port_seperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMirroring_host_port_seperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Mirroring_host_port_seperator() (localctx IMirroring_host_port_seperatorContext) {
	localctx = NewMirroring_host_port_seperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, TSqlParserRULE_mirroring_host_port_seperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6827)
		p.Match(TSqlParserCOLON)
	}

	return localctx
}

// IPartner_server_tcp_prefixContext is an interface to support dynamic dispatch.
type IPartner_server_tcp_prefixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartner_server_tcp_prefixContext differentiates from other interfaces.
	IsPartner_server_tcp_prefixContext()
}

type Partner_server_tcp_prefixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartner_server_tcp_prefixContext() *Partner_server_tcp_prefixContext {
	var p = new(Partner_server_tcp_prefixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_partner_server_tcp_prefix
	return p
}

func (*Partner_server_tcp_prefixContext) IsPartner_server_tcp_prefixContext() {}

func NewPartner_server_tcp_prefixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partner_server_tcp_prefixContext {
	var p = new(Partner_server_tcp_prefixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_partner_server_tcp_prefix

	return p
}

func (s *Partner_server_tcp_prefixContext) GetParser() antlr.Parser { return s.parser }

func (s *Partner_server_tcp_prefixContext) TCP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTCP, 0)
}

func (s *Partner_server_tcp_prefixContext) COLON() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLON, 0)
}

func (s *Partner_server_tcp_prefixContext) DOUBLE_FORWARD_SLASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOUBLE_FORWARD_SLASH, 0)
}

func (s *Partner_server_tcp_prefixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partner_server_tcp_prefixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partner_server_tcp_prefixContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPartner_server_tcp_prefix(s)
	}
}

func (s *Partner_server_tcp_prefixContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPartner_server_tcp_prefix(s)
	}
}

func (s *Partner_server_tcp_prefixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPartner_server_tcp_prefix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Partner_server_tcp_prefix() (localctx IPartner_server_tcp_prefixContext) {
	localctx = NewPartner_server_tcp_prefixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, TSqlParserRULE_partner_server_tcp_prefix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6829)
		p.Match(TSqlParserTCP)
	}
	{
		p.SetState(6830)
		p.Match(TSqlParserCOLON)
	}
	{
		p.SetState(6831)
		p.Match(TSqlParserDOUBLE_FORWARD_SLASH)
	}

	return localctx
}

// IPort_numberContext is an interface to support dynamic dispatch.
type IPort_numberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPort returns the port token.
	GetPort() antlr.Token

	// SetPort sets the port token.
	SetPort(antlr.Token)

	// IsPort_numberContext differentiates from other interfaces.
	IsPort_numberContext()
}

type Port_numberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	port   antlr.Token
}

func NewEmptyPort_numberContext() *Port_numberContext {
	var p = new(Port_numberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_port_number
	return p
}

func (*Port_numberContext) IsPort_numberContext() {}

func NewPort_numberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Port_numberContext {
	var p = new(Port_numberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_port_number

	return p
}

func (s *Port_numberContext) GetParser() antlr.Parser { return s.parser }

func (s *Port_numberContext) GetPort() antlr.Token { return s.port }

func (s *Port_numberContext) SetPort(v antlr.Token) { s.port = v }

func (s *Port_numberContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Port_numberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Port_numberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Port_numberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPort_number(s)
	}
}

func (s *Port_numberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPort_number(s)
	}
}

func (s *Port_numberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPort_number(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Port_number() (localctx IPort_numberContext) {
	localctx = NewPort_numberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, TSqlParserRULE_port_number)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6833)

		var _m = p.Match(TSqlParserDECIMAL)

		localctx.(*Port_numberContext).port = _m
	}

	return localctx
}

// IHostContext is an interface to support dynamic dispatch.
type IHostContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHostContext differentiates from other interfaces.
	IsHostContext()
}

type HostContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHostContext() *HostContext {
	var p = new(HostContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_host
	return p
}

func (*HostContext) IsHostContext() {}

func NewHostContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HostContext {
	var p = new(HostContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_host

	return p
}

func (s *HostContext) GetParser() antlr.Parser { return s.parser }

func (s *HostContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *HostContext) DOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOT, 0)
}

func (s *HostContext) Host() IHostContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHostContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHostContext)
}

func (s *HostContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HostContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HostContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterHost(s)
	}
}

func (s *HostContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitHost(s)
	}
}

func (s *HostContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitHost(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Host() (localctx IHostContext) {
	localctx = NewHostContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, TSqlParserRULE_host)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6845)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 905, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6835)
			p.Id()
		}
		{
			p.SetState(6836)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(6837)
			p.Host()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(6843)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 904, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(6839)
				p.Id()
			}
			{
				p.SetState(6840)
				p.Match(TSqlParserDOT)
			}

		case 2:
			{
				p.SetState(6842)
				p.Id()
			}

		}

	}

	return localctx
}

// IDate_correlation_optimization_optionContext is an interface to support dynamic dispatch.
type IDate_correlation_optimization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDate_correlation_optimization_optionContext differentiates from other interfaces.
	IsDate_correlation_optimization_optionContext()
}

type Date_correlation_optimization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_correlation_optimization_optionContext() *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_date_correlation_optimization_option
	return p
}

func (*Date_correlation_optimization_optionContext) IsDate_correlation_optimization_optionContext() {}

func NewDate_correlation_optimization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_correlation_optimization_optionContext {
	var p = new(Date_correlation_optimization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_date_correlation_optimization_option

	return p
}

func (s *Date_correlation_optimization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_correlation_optimization_optionContext) DATE_CORRELATION_OPTIMIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATE_CORRELATION_OPTIMIZATION, 0)
}

func (s *Date_correlation_optimization_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Date_correlation_optimization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_correlation_optimization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_correlation_optimization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDate_correlation_optimization_option(s)
	}
}

func (s *Date_correlation_optimization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDate_correlation_optimization_option(s)
	}
}

func (s *Date_correlation_optimization_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDate_correlation_optimization_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Date_correlation_optimization_option() (localctx IDate_correlation_optimization_optionContext) {
	localctx = NewDate_correlation_optimization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, TSqlParserRULE_date_correlation_optimization_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6847)
		p.Match(TSqlParserDATE_CORRELATION_OPTIMIZATION)
	}
	{
		p.SetState(6848)
		p.On_off()
	}

	return localctx
}

// IDb_encryption_optionContext is an interface to support dynamic dispatch.
type IDb_encryption_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_encryption_optionContext differentiates from other interfaces.
	IsDb_encryption_optionContext()
}

type Db_encryption_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_encryption_optionContext() *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_db_encryption_option
	return p
}

func (*Db_encryption_optionContext) IsDb_encryption_optionContext() {}

func NewDb_encryption_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_encryption_optionContext {
	var p = new(Db_encryption_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_db_encryption_option

	return p
}

func (s *Db_encryption_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_encryption_optionContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Db_encryption_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Db_encryption_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_encryption_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_encryption_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDb_encryption_option(s)
	}
}

func (s *Db_encryption_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDb_encryption_option(s)
	}
}

func (s *Db_encryption_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDb_encryption_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Db_encryption_option() (localctx IDb_encryption_optionContext) {
	localctx = NewDb_encryption_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, TSqlParserRULE_db_encryption_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6850)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(6851)
		p.On_off()
	}

	return localctx
}

// IDb_state_optionContext is an interface to support dynamic dispatch.
type IDb_state_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_state_optionContext differentiates from other interfaces.
	IsDb_state_optionContext()
}

type Db_state_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_state_optionContext() *Db_state_optionContext {
	var p = new(Db_state_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_db_state_option
	return p
}

func (*Db_state_optionContext) IsDb_state_optionContext() {}

func NewDb_state_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_state_optionContext {
	var p = new(Db_state_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_db_state_option

	return p
}

func (s *Db_state_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_state_optionContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLINE, 0)
}

func (s *Db_state_optionContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFFLINE, 0)
}

func (s *Db_state_optionContext) EMERGENCY() antlr.TerminalNode {
	return s.GetToken(TSqlParserEMERGENCY, 0)
}

func (s *Db_state_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_state_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_state_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDb_state_option(s)
	}
}

func (s *Db_state_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDb_state_option(s)
	}
}

func (s *Db_state_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDb_state_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Db_state_option() (localctx IDb_state_optionContext) {
	localctx = NewDb_state_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 544, TSqlParserRULE_db_state_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6853)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserEMERGENCY || _la == TSqlParserOFFLINE || _la == TSqlParserONLINE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDb_update_optionContext is an interface to support dynamic dispatch.
type IDb_update_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_update_optionContext differentiates from other interfaces.
	IsDb_update_optionContext()
}

type Db_update_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_update_optionContext() *Db_update_optionContext {
	var p = new(Db_update_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_db_update_option
	return p
}

func (*Db_update_optionContext) IsDb_update_optionContext() {}

func NewDb_update_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_update_optionContext {
	var p = new(Db_update_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_db_update_option

	return p
}

func (s *Db_update_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_update_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY, 0)
}

func (s *Db_update_optionContext) READ_WRITE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_WRITE, 0)
}

func (s *Db_update_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_update_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_update_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDb_update_option(s)
	}
}

func (s *Db_update_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDb_update_option(s)
	}
}

func (s *Db_update_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDb_update_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Db_update_option() (localctx IDb_update_optionContext) {
	localctx = NewDb_update_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 546, TSqlParserRULE_db_update_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6855)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserREAD_ONLY || _la == TSqlParserREAD_WRITE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDb_user_access_optionContext is an interface to support dynamic dispatch.
type IDb_user_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDb_user_access_optionContext differentiates from other interfaces.
	IsDb_user_access_optionContext()
}

type Db_user_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDb_user_access_optionContext() *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_db_user_access_option
	return p
}

func (*Db_user_access_optionContext) IsDb_user_access_optionContext() {}

func NewDb_user_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Db_user_access_optionContext {
	var p = new(Db_user_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_db_user_access_option

	return p
}

func (s *Db_user_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Db_user_access_optionContext) SINGLE_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSINGLE_USER, 0)
}

func (s *Db_user_access_optionContext) RESTRICTED_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESTRICTED_USER, 0)
}

func (s *Db_user_access_optionContext) MULTI_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMULTI_USER, 0)
}

func (s *Db_user_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Db_user_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Db_user_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDb_user_access_option(s)
	}
}

func (s *Db_user_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDb_user_access_option(s)
	}
}

func (s *Db_user_access_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDb_user_access_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Db_user_access_option() (localctx IDb_user_access_optionContext) {
	localctx = NewDb_user_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 548, TSqlParserRULE_db_user_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(6857)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserMULTI_USER || _la == TSqlParserRESTRICTED_USER || _la == TSqlParserSINGLE_USER) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDelayed_durability_optionContext is an interface to support dynamic dispatch.
type IDelayed_durability_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelayed_durability_optionContext differentiates from other interfaces.
	IsDelayed_durability_optionContext()
}

type Delayed_durability_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelayed_durability_optionContext() *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_delayed_durability_option
	return p
}

func (*Delayed_durability_optionContext) IsDelayed_durability_optionContext() {}

func NewDelayed_durability_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delayed_durability_optionContext {
	var p = new(Delayed_durability_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_delayed_durability_option

	return p
}

func (s *Delayed_durability_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Delayed_durability_optionContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELAYED_DURABILITY, 0)
}

func (s *Delayed_durability_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Delayed_durability_optionContext) DISABLED() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLED, 0)
}

func (s *Delayed_durability_optionContext) ALLOWED() antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOWED, 0)
}

func (s *Delayed_durability_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCED, 0)
}

func (s *Delayed_durability_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delayed_durability_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delayed_durability_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDelayed_durability_option(s)
	}
}

func (s *Delayed_durability_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDelayed_durability_option(s)
	}
}

func (s *Delayed_durability_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDelayed_durability_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Delayed_durability_option() (localctx IDelayed_durability_optionContext) {
	localctx = NewDelayed_durability_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, TSqlParserRULE_delayed_durability_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6859)
		p.Match(TSqlParserDELAYED_DURABILITY)
	}
	{
		p.SetState(6860)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(6861)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserALLOWED || _la == TSqlParserDISABLED || _la == TSqlParserFORCED) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IExternal_access_optionContext is an interface to support dynamic dispatch.
type IExternal_access_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternal_access_optionContext differentiates from other interfaces.
	IsExternal_access_optionContext()
}

type External_access_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternal_access_optionContext() *External_access_optionContext {
	var p = new(External_access_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_external_access_option
	return p
}

func (*External_access_optionContext) IsExternal_access_optionContext() {}

func NewExternal_access_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *External_access_optionContext {
	var p = new(External_access_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_external_access_option

	return p
}

func (s *External_access_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *External_access_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(TSqlParserDB_CHAINING, 0)
}

func (s *External_access_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *External_access_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRUSTWORTHY, 0)
}

func (s *External_access_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, 0)
}

func (s *External_access_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *External_access_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *External_access_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *External_access_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *External_access_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(TSqlParserNESTED_TRIGGERS, 0)
}

func (s *External_access_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *External_access_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *External_access_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *External_access_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *External_access_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *External_access_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *External_access_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *External_access_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExternal_access_option(s)
	}
}

func (s *External_access_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExternal_access_option(s)
	}
}

func (s *External_access_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExternal_access_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) External_access_option() (localctx IExternal_access_optionContext) {
	localctx = NewExternal_access_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, TSqlParserRULE_external_access_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6888)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6863)
			p.Match(TSqlParserDB_CHAINING)
		}
		{
			p.SetState(6864)
			p.On_off()
		}

	case TSqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6865)
			p.Match(TSqlParserTRUSTWORTHY)
		}
		{
			p.SetState(6866)
			p.On_off()
		}

	case TSqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6867)
			p.Match(TSqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(6868)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6871)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(6869)
				p.Id()
			}

		case TSqlParserSTRING:
			{
				p.SetState(6870)
				p.Match(TSqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6873)
			p.Match(TSqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(6874)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6877)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(6875)
				p.Id()
			}

		case TSqlParserSTRING:
			{
				p.SetState(6876)
				p.Match(TSqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6879)
			p.Match(TSqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(6880)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6881)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6882)
			p.Match(TSqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(6883)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(6884)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6885)
			p.Match(TSqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(6886)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(6887)
			p.Match(TSqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IHadr_optionsContext is an interface to support dynamic dispatch.
type IHadr_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAvailability_group_name returns the availability_group_name rule contexts.
	GetAvailability_group_name() IIdContext

	// SetAvailability_group_name sets the availability_group_name rule contexts.
	SetAvailability_group_name(IIdContext)

	// IsHadr_optionsContext differentiates from other interfaces.
	IsHadr_optionsContext()
}

type Hadr_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	availability_group_name IIdContext
}

func NewEmptyHadr_optionsContext() *Hadr_optionsContext {
	var p = new(Hadr_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_hadr_options
	return p
}

func (*Hadr_optionsContext) IsHadr_optionsContext() {}

func NewHadr_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hadr_optionsContext {
	var p = new(Hadr_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_hadr_options

	return p
}

func (s *Hadr_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Hadr_optionsContext) GetAvailability_group_name() IIdContext {
	return s.availability_group_name
}

func (s *Hadr_optionsContext) SetAvailability_group_name(v IIdContext) { s.availability_group_name = v }

func (s *Hadr_optionsContext) HADR() antlr.TerminalNode {
	return s.GetToken(TSqlParserHADR, 0)
}

func (s *Hadr_optionsContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUSPEND, 0)
}

func (s *Hadr_optionsContext) RESUME() antlr.TerminalNode {
	return s.GetToken(TSqlParserRESUME, 0)
}

func (s *Hadr_optionsContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Hadr_optionsContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Hadr_optionsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Hadr_optionsContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Hadr_optionsContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Hadr_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hadr_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hadr_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterHadr_options(s)
	}
}

func (s *Hadr_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitHadr_options(s)
	}
}

func (s *Hadr_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitHadr_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Hadr_options() (localctx IHadr_optionsContext) {
	localctx = NewHadr_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, TSqlParserRULE_hadr_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6890)
		p.Match(TSqlParserHADR)
	}
	p.SetState(6899)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserOFF, TSqlParserAVAILABILITY:
		p.SetState(6896)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserAVAILABILITY:
			{
				p.SetState(6891)
				p.Match(TSqlParserAVAILABILITY)
			}
			{
				p.SetState(6892)
				p.Match(TSqlParserGROUP)
			}
			{
				p.SetState(6893)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(6894)

				var _x = p.Id()

				localctx.(*Hadr_optionsContext).availability_group_name = _x
			}

		case TSqlParserOFF:
			{
				p.SetState(6895)
				p.Match(TSqlParserOFF)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserRESUME, TSqlParserSUSPEND:
		p.SetState(6898)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserRESUME || _la == TSqlParserSUSPEND) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMixed_page_allocation_optionContext is an interface to support dynamic dispatch.
type IMixed_page_allocation_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMixed_page_allocation_optionContext differentiates from other interfaces.
	IsMixed_page_allocation_optionContext()
}

type Mixed_page_allocation_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMixed_page_allocation_optionContext() *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_mixed_page_allocation_option
	return p
}

func (*Mixed_page_allocation_optionContext) IsMixed_page_allocation_optionContext() {}

func NewMixed_page_allocation_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mixed_page_allocation_optionContext {
	var p = new(Mixed_page_allocation_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_mixed_page_allocation_option

	return p
}

func (s *Mixed_page_allocation_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Mixed_page_allocation_optionContext) MIXED_PAGE_ALLOCATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIXED_PAGE_ALLOCATION, 0)
}

func (s *Mixed_page_allocation_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Mixed_page_allocation_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Mixed_page_allocation_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mixed_page_allocation_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mixed_page_allocation_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMixed_page_allocation_option(s)
	}
}

func (s *Mixed_page_allocation_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMixed_page_allocation_option(s)
	}
}

func (s *Mixed_page_allocation_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMixed_page_allocation_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Mixed_page_allocation_option() (localctx IMixed_page_allocation_optionContext) {
	localctx = NewMixed_page_allocation_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, TSqlParserRULE_mixed_page_allocation_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6901)
		p.Match(TSqlParserMIXED_PAGE_ALLOCATION)
	}
	p.SetState(6902)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserOFF || _la == TSqlParserON) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IParameterization_optionContext is an interface to support dynamic dispatch.
type IParameterization_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterization_optionContext differentiates from other interfaces.
	IsParameterization_optionContext()
}

type Parameterization_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterization_optionContext() *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_parameterization_option
	return p
}

func (*Parameterization_optionContext) IsParameterization_optionContext() {}

func NewParameterization_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameterization_optionContext {
	var p = new(Parameterization_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_parameterization_option

	return p
}

func (s *Parameterization_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameterization_optionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARAMETERIZATION, 0)
}

func (s *Parameterization_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIMPLE, 0)
}

func (s *Parameterization_optionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCED, 0)
}

func (s *Parameterization_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameterization_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameterization_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterParameterization_option(s)
	}
}

func (s *Parameterization_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitParameterization_option(s)
	}
}

func (s *Parameterization_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitParameterization_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Parameterization_option() (localctx IParameterization_optionContext) {
	localctx = NewParameterization_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, TSqlParserRULE_parameterization_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6904)
		p.Match(TSqlParserPARAMETERIZATION)
	}
	p.SetState(6905)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserFORCED || _la == TSqlParserSIMPLE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IRecovery_optionContext is an interface to support dynamic dispatch.
type IRecovery_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecovery_optionContext differentiates from other interfaces.
	IsRecovery_optionContext()
}

type Recovery_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecovery_optionContext() *Recovery_optionContext {
	var p = new(Recovery_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_recovery_option
	return p
}

func (*Recovery_optionContext) IsRecovery_optionContext() {}

func NewRecovery_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Recovery_optionContext {
	var p = new(Recovery_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_recovery_option

	return p
}

func (s *Recovery_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Recovery_optionContext) RECOVERY() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECOVERY, 0)
}

func (s *Recovery_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULL, 0)
}

func (s *Recovery_optionContext) BULK_LOGGED() antlr.TerminalNode {
	return s.GetToken(TSqlParserBULK_LOGGED, 0)
}

func (s *Recovery_optionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIMPLE, 0)
}

func (s *Recovery_optionContext) TORN_PAGE_DETECTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserTORN_PAGE_DETECTION, 0)
}

func (s *Recovery_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Recovery_optionContext) PAGE_VERIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPAGE_VERIFY, 0)
}

func (s *Recovery_optionContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM, 0)
}

func (s *Recovery_optionContext) NONE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONE, 0)
}

func (s *Recovery_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Recovery_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Recovery_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRecovery_option(s)
	}
}

func (s *Recovery_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRecovery_option(s)
	}
}

func (s *Recovery_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRecovery_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Recovery_option() (localctx IRecovery_optionContext) {
	localctx = NewRecovery_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, TSqlParserRULE_recovery_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6913)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserRECOVERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6907)
			p.Match(TSqlParserRECOVERY)
		}
		p.SetState(6908)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFULL || _la == TSqlParserBULK_LOGGED || _la == TSqlParserSIMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTORN_PAGE_DETECTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6909)
			p.Match(TSqlParserTORN_PAGE_DETECTION)
		}
		{
			p.SetState(6910)
			p.On_off()
		}

	case TSqlParserPAGE_VERIFY:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6911)
			p.Match(TSqlParserPAGE_VERIFY)
		}
		p.SetState(6912)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserNONE || _la == TSqlParserCHECKSUM || _la == TSqlParserTORN_PAGE_DETECTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IService_broker_optionContext is an interface to support dynamic dispatch.
type IService_broker_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsService_broker_optionContext differentiates from other interfaces.
	IsService_broker_optionContext()
}

type Service_broker_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyService_broker_optionContext() *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_service_broker_option
	return p
}

func (*Service_broker_optionContext) IsService_broker_optionContext() {}

func NewService_broker_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Service_broker_optionContext {
	var p = new(Service_broker_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_service_broker_option

	return p
}

func (s *Service_broker_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Service_broker_optionContext) ENABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserENABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) DISABLE_BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE_BROKER, 0)
}

func (s *Service_broker_optionContext) NEW_BROKER() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEW_BROKER, 0)
}

func (s *Service_broker_optionContext) ERROR_BROKER_CONVERSATIONS() antlr.TerminalNode {
	return s.GetToken(TSqlParserERROR_BROKER_CONVERSATIONS, 0)
}

func (s *Service_broker_optionContext) HONOR_BROKER_PRIORITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserHONOR_BROKER_PRIORITY, 0)
}

func (s *Service_broker_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Service_broker_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Service_broker_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Service_broker_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterService_broker_option(s)
	}
}

func (s *Service_broker_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitService_broker_option(s)
	}
}

func (s *Service_broker_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitService_broker_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Service_broker_option() (localctx IService_broker_optionContext) {
	localctx = NewService_broker_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, TSqlParserRULE_service_broker_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6921)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserENABLE_BROKER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6915)
			p.Match(TSqlParserENABLE_BROKER)
		}

	case TSqlParserDISABLE_BROKER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6916)
			p.Match(TSqlParserDISABLE_BROKER)
		}

	case TSqlParserNEW_BROKER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6917)
			p.Match(TSqlParserNEW_BROKER)
		}

	case TSqlParserERROR_BROKER_CONVERSATIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6918)
			p.Match(TSqlParserERROR_BROKER_CONVERSATIONS)
		}

	case TSqlParserHONOR_BROKER_PRIORITY:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6919)
			p.Match(TSqlParserHONOR_BROKER_PRIORITY)
		}
		{
			p.SetState(6920)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISnapshot_optionContext is an interface to support dynamic dispatch.
type ISnapshot_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT returns the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token

	// SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT sets the MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT token.
	SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(antlr.Token)

	// IsSnapshot_optionContext differentiates from other interfaces.
	IsSnapshot_optionContext()
}

type Snapshot_optionContext struct {
	*antlr.BaseParserRuleContext
	parser                               antlr.Parser
	MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT antlr.Token
}

func NewEmptySnapshot_optionContext() *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_snapshot_option
	return p
}

func (*Snapshot_optionContext) IsSnapshot_optionContext() {}

func NewSnapshot_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Snapshot_optionContext {
	var p = new(Snapshot_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_snapshot_option

	return p
}

func (s *Snapshot_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Snapshot_optionContext) GetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() antlr.Token {
	return s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT
}

func (s *Snapshot_optionContext) SetMEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT(v antlr.Token) {
	s.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = v
}

func (s *Snapshot_optionContext) ALLOW_SNAPSHOT_ISOLATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserALLOW_SNAPSHOT_ISOLATION, 0)
}

func (s *Snapshot_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Snapshot_optionContext) READ_COMMITTED_SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_COMMITTED_SNAPSHOT, 0)
}

func (s *Snapshot_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Snapshot_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Snapshot_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Snapshot_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Snapshot_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSnapshot_option(s)
	}
}

func (s *Snapshot_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSnapshot_option(s)
	}
}

func (s *Snapshot_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSnapshot_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Snapshot_option() (localctx ISnapshot_optionContext) {
	localctx = NewSnapshot_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, TSqlParserRULE_snapshot_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6928)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserALLOW_SNAPSHOT_ISOLATION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6923)
			p.Match(TSqlParserALLOW_SNAPSHOT_ISOLATION)
		}
		{
			p.SetState(6924)
			p.On_off()
		}

	case TSqlParserREAD_COMMITTED_SNAPSHOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6925)
			p.Match(TSqlParserREAD_COMMITTED_SNAPSHOT)
		}
		p.SetState(6926)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserOFF, TSqlParserON:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(6927)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Snapshot_optionContext).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_optionContext is an interface to support dynamic dispatch.
type ISql_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_optionContext differentiates from other interfaces.
	IsSql_optionContext()
}

type Sql_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_optionContext() *Sql_optionContext {
	var p = new(Sql_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_sql_option
	return p
}

func (*Sql_optionContext) IsSql_optionContext() {}

func NewSql_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_optionContext {
	var p = new(Sql_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_sql_option

	return p
}

func (s *Sql_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_optionContext) ANSI_NULL_DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_NULL_DEFAULT, 0)
}

func (s *Sql_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Sql_optionContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_NULLS, 0)
}

func (s *Sql_optionContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_PADDING, 0)
}

func (s *Sql_optionContext) ANSI_WARNINGS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_WARNINGS, 0)
}

func (s *Sql_optionContext) ARITHABORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserARITHABORT, 0)
}

func (s *Sql_optionContext) COMPATIBILITY_LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMPATIBILITY_LEVEL, 0)
}

func (s *Sql_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Sql_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Sql_optionContext) CONCAT_NULL_YIELDS_NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONCAT_NULL_YIELDS_NULL, 0)
}

func (s *Sql_optionContext) NUMERIC_ROUNDABORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMERIC_ROUNDABORT, 0)
}

func (s *Sql_optionContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Sql_optionContext) RECURSIVE_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECURSIVE_TRIGGERS, 0)
}

func (s *Sql_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSql_option(s)
	}
}

func (s *Sql_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSql_option(s)
	}
}

func (s *Sql_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSql_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Sql_option() (localctx ISql_optionContext) {
	localctx = NewSql_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, TSqlParserRULE_sql_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6951)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserANSI_NULL_DEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6930)
			p.Match(TSqlParserANSI_NULL_DEFAULT)
		}
		{
			p.SetState(6931)
			p.On_off()
		}

	case TSqlParserANSI_NULLS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6932)
			p.Match(TSqlParserANSI_NULLS)
		}
		{
			p.SetState(6933)
			p.On_off()
		}

	case TSqlParserANSI_PADDING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6934)
			p.Match(TSqlParserANSI_PADDING)
		}
		{
			p.SetState(6935)
			p.On_off()
		}

	case TSqlParserANSI_WARNINGS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(6936)
			p.Match(TSqlParserANSI_WARNINGS)
		}
		{
			p.SetState(6937)
			p.On_off()
		}

	case TSqlParserARITHABORT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(6938)
			p.Match(TSqlParserARITHABORT)
		}
		{
			p.SetState(6939)
			p.On_off()
		}

	case TSqlParserCOMPATIBILITY_LEVEL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(6940)
			p.Match(TSqlParserCOMPATIBILITY_LEVEL)
		}
		{
			p.SetState(6941)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(6942)
			p.Match(TSqlParserDECIMAL)
		}

	case TSqlParserCONCAT_NULL_YIELDS_NULL:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(6943)
			p.Match(TSqlParserCONCAT_NULL_YIELDS_NULL)
		}
		{
			p.SetState(6944)
			p.On_off()
		}

	case TSqlParserNUMERIC_ROUNDABORT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(6945)
			p.Match(TSqlParserNUMERIC_ROUNDABORT)
		}
		{
			p.SetState(6946)
			p.On_off()
		}

	case TSqlParserQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(6947)
			p.Match(TSqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(6948)
			p.On_off()
		}

	case TSqlParserRECURSIVE_TRIGGERS:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(6949)
			p.Match(TSqlParserRECURSIVE_TRIGGERS)
		}
		{
			p.SetState(6950)
			p.On_off()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITarget_recovery_time_optionContext is an interface to support dynamic dispatch.
type ITarget_recovery_time_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTarget_recovery_time_optionContext differentiates from other interfaces.
	IsTarget_recovery_time_optionContext()
}

type Target_recovery_time_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTarget_recovery_time_optionContext() *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_target_recovery_time_option
	return p
}

func (*Target_recovery_time_optionContext) IsTarget_recovery_time_optionContext() {}

func NewTarget_recovery_time_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Target_recovery_time_optionContext {
	var p = new(Target_recovery_time_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_target_recovery_time_option

	return p
}

func (s *Target_recovery_time_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Target_recovery_time_optionContext) TARGET_RECOVERY_TIME() antlr.TerminalNode {
	return s.GetToken(TSqlParserTARGET_RECOVERY_TIME, 0)
}

func (s *Target_recovery_time_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Target_recovery_time_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Target_recovery_time_optionContext) SECONDS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSECONDS, 0)
}

func (s *Target_recovery_time_optionContext) MINUTES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMINUTES, 0)
}

func (s *Target_recovery_time_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Target_recovery_time_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Target_recovery_time_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTarget_recovery_time_option(s)
	}
}

func (s *Target_recovery_time_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTarget_recovery_time_option(s)
	}
}

func (s *Target_recovery_time_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTarget_recovery_time_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Target_recovery_time_option() (localctx ITarget_recovery_time_optionContext) {
	localctx = NewTarget_recovery_time_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, TSqlParserRULE_target_recovery_time_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6953)
		p.Match(TSqlParserTARGET_RECOVERY_TIME)
	}
	{
		p.SetState(6954)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(6955)
		p.Match(TSqlParserDECIMAL)
	}
	p.SetState(6956)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserMINUTES || _la == TSqlParserSECONDS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITerminationContext is an interface to support dynamic dispatch.
type ITerminationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeconds returns the seconds token.
	GetSeconds() antlr.Token

	// SetSeconds sets the seconds token.
	SetSeconds(antlr.Token)

	// IsTerminationContext differentiates from other interfaces.
	IsTerminationContext()
}

type TerminationContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	seconds antlr.Token
}

func NewEmptyTerminationContext() *TerminationContext {
	var p = new(TerminationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_termination
	return p
}

func (*TerminationContext) IsTerminationContext() {}

func NewTerminationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TerminationContext {
	var p = new(TerminationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_termination

	return p
}

func (s *TerminationContext) GetParser() antlr.Parser { return s.parser }

func (s *TerminationContext) GetSeconds() antlr.Token { return s.seconds }

func (s *TerminationContext) SetSeconds(v antlr.Token) { s.seconds = v }

func (s *TerminationContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLLBACK, 0)
}

func (s *TerminationContext) AFTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserAFTER, 0)
}

func (s *TerminationContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *TerminationContext) IMMEDIATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserIMMEDIATE, 0)
}

func (s *TerminationContext) NO_WAIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_WAIT, 0)
}

func (s *TerminationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TerminationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TerminationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTermination(s)
	}
}

func (s *TerminationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTermination(s)
	}
}

func (s *TerminationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTermination(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Termination() (localctx ITerminationContext) {
	localctx = NewTerminationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, TSqlParserRULE_termination)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(6964)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 915, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(6958)
			p.Match(TSqlParserROLLBACK)
		}
		{
			p.SetState(6959)
			p.Match(TSqlParserAFTER)
		}
		{
			p.SetState(6960)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*TerminationContext).seconds = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(6961)
			p.Match(TSqlParserROLLBACK)
		}
		{
			p.SetState(6962)
			p.Match(TSqlParserIMMEDIATE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(6963)
			p.Match(TSqlParserNO_WAIT)
		}

	}

	return localctx
}

// IDrop_indexContext is an interface to support dynamic dispatch.
type IDrop_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_indexContext differentiates from other interfaces.
	IsDrop_indexContext()
}

type Drop_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_indexContext() *Drop_indexContext {
	var p = new(Drop_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_index
	return p
}

func (*Drop_indexContext) IsDrop_indexContext() {}

func NewDrop_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_indexContext {
	var p = new(Drop_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_index

	return p
}

func (s *Drop_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_indexContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserINDEX, 0)
}

func (s *Drop_indexContext) AllDrop_relational_or_xml_or_spatial_index() []IDrop_relational_or_xml_or_spatial_indexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDrop_relational_or_xml_or_spatial_indexContext)(nil)).Elem())
	var tst = make([]IDrop_relational_or_xml_or_spatial_indexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDrop_relational_or_xml_or_spatial_indexContext)
		}
	}

	return tst
}

func (s *Drop_indexContext) Drop_relational_or_xml_or_spatial_index(i int) IDrop_relational_or_xml_or_spatial_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_relational_or_xml_or_spatial_indexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDrop_relational_or_xml_or_spatial_indexContext)
}

func (s *Drop_indexContext) AllDrop_backward_compatible_index() []IDrop_backward_compatible_indexContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDrop_backward_compatible_indexContext)(nil)).Elem())
	var tst = make([]IDrop_backward_compatible_indexContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDrop_backward_compatible_indexContext)
		}
	}

	return tst
}

func (s *Drop_indexContext) Drop_backward_compatible_index(i int) IDrop_backward_compatible_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_backward_compatible_indexContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDrop_backward_compatible_indexContext)
}

func (s *Drop_indexContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_indexContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_index(s)
	}
}

func (s *Drop_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_index(s)
	}
}

func (s *Drop_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_index() (localctx IDrop_indexContext) {
	localctx = NewDrop_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, TSqlParserRULE_drop_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6966)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(6967)
		p.Match(TSqlParserINDEX)
	}
	p.SetState(6970)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(6968)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(6969)
			p.Match(TSqlParserEXISTS)
		}

	}
	p.SetState(6988)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 919, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(6972)
			p.Drop_relational_or_xml_or_spatial_index()
		}
		p.SetState(6977)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6973)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6974)
				p.Drop_relational_or_xml_or_spatial_index()
			}

			p.SetState(6979)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(6980)
			p.Drop_backward_compatible_index()
		}
		p.SetState(6985)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(6981)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(6982)
				p.Drop_backward_compatible_index()
			}

			p.SetState(6987)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(6991)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 920, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6990)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_relational_or_xml_or_spatial_indexContext is an interface to support dynamic dispatch.
type IDrop_relational_or_xml_or_spatial_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex_name returns the index_name rule contexts.
	GetIndex_name() IIdContext

	// SetIndex_name sets the index_name rule contexts.
	SetIndex_name(IIdContext)

	// IsDrop_relational_or_xml_or_spatial_indexContext differentiates from other interfaces.
	IsDrop_relational_or_xml_or_spatial_indexContext()
}

type Drop_relational_or_xml_or_spatial_indexContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	index_name IIdContext
}

func NewEmptyDrop_relational_or_xml_or_spatial_indexContext() *Drop_relational_or_xml_or_spatial_indexContext {
	var p = new(Drop_relational_or_xml_or_spatial_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_relational_or_xml_or_spatial_index
	return p
}

func (*Drop_relational_or_xml_or_spatial_indexContext) IsDrop_relational_or_xml_or_spatial_indexContext() {
}

func NewDrop_relational_or_xml_or_spatial_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_relational_or_xml_or_spatial_indexContext {
	var p = new(Drop_relational_or_xml_or_spatial_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_relational_or_xml_or_spatial_index

	return p
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_relational_or_xml_or_spatial_indexContext) GetIndex_name() IIdContext {
	return s.index_name
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) SetIndex_name(v IIdContext) { s.index_name = v }

func (s *Drop_relational_or_xml_or_spatial_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_relational_or_xml_or_spatial_index(s)
	}
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_relational_or_xml_or_spatial_index(s)
	}
}

func (s *Drop_relational_or_xml_or_spatial_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_relational_or_xml_or_spatial_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_relational_or_xml_or_spatial_index() (localctx IDrop_relational_or_xml_or_spatial_indexContext) {
	localctx = NewDrop_relational_or_xml_or_spatial_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 574, TSqlParserRULE_drop_relational_or_xml_or_spatial_index)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(6993)

		var _x = p.Id()

		localctx.(*Drop_relational_or_xml_or_spatial_indexContext).index_name = _x
	}
	{
		p.SetState(6994)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(6995)
		p.Full_table_name()
	}

	return localctx
}

// IDrop_backward_compatible_indexContext is an interface to support dynamic dispatch.
type IDrop_backward_compatible_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOwner_name returns the owner_name rule contexts.
	GetOwner_name() IIdContext

	// GetTable_or_view_name returns the table_or_view_name rule contexts.
	GetTable_or_view_name() IIdContext

	// GetIndex_name returns the index_name rule contexts.
	GetIndex_name() IIdContext

	// SetOwner_name sets the owner_name rule contexts.
	SetOwner_name(IIdContext)

	// SetTable_or_view_name sets the table_or_view_name rule contexts.
	SetTable_or_view_name(IIdContext)

	// SetIndex_name sets the index_name rule contexts.
	SetIndex_name(IIdContext)

	// IsDrop_backward_compatible_indexContext differentiates from other interfaces.
	IsDrop_backward_compatible_indexContext()
}

type Drop_backward_compatible_indexContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	owner_name         IIdContext
	table_or_view_name IIdContext
	index_name         IIdContext
}

func NewEmptyDrop_backward_compatible_indexContext() *Drop_backward_compatible_indexContext {
	var p = new(Drop_backward_compatible_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_backward_compatible_index
	return p
}

func (*Drop_backward_compatible_indexContext) IsDrop_backward_compatible_indexContext() {}

func NewDrop_backward_compatible_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_backward_compatible_indexContext {
	var p = new(Drop_backward_compatible_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_backward_compatible_index

	return p
}

func (s *Drop_backward_compatible_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_backward_compatible_indexContext) GetOwner_name() IIdContext { return s.owner_name }

func (s *Drop_backward_compatible_indexContext) GetTable_or_view_name() IIdContext {
	return s.table_or_view_name
}

func (s *Drop_backward_compatible_indexContext) GetIndex_name() IIdContext { return s.index_name }

func (s *Drop_backward_compatible_indexContext) SetOwner_name(v IIdContext) { s.owner_name = v }

func (s *Drop_backward_compatible_indexContext) SetTable_or_view_name(v IIdContext) {
	s.table_or_view_name = v
}

func (s *Drop_backward_compatible_indexContext) SetIndex_name(v IIdContext) { s.index_name = v }

func (s *Drop_backward_compatible_indexContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_backward_compatible_indexContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_backward_compatible_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_backward_compatible_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_backward_compatible_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_backward_compatible_index(s)
	}
}

func (s *Drop_backward_compatible_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_backward_compatible_index(s)
	}
}

func (s *Drop_backward_compatible_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_backward_compatible_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_backward_compatible_index() (localctx IDrop_backward_compatible_indexContext) {
	localctx = NewDrop_backward_compatible_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 576, TSqlParserRULE_drop_backward_compatible_index)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7000)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 921, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(6997)

			var _x = p.Id()

			localctx.(*Drop_backward_compatible_indexContext).owner_name = _x
		}
		{
			p.SetState(6998)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(7002)

		var _x = p.Id()

		localctx.(*Drop_backward_compatible_indexContext).table_or_view_name = _x
	}
	{
		p.SetState(7003)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(7004)

		var _x = p.Id()

		localctx.(*Drop_backward_compatible_indexContext).index_name = _x
	}

	return localctx
}

// IDrop_procedureContext is an interface to support dynamic dispatch.
type IDrop_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProc returns the proc token.
	GetProc() antlr.Token

	// SetProc sets the proc token.
	SetProc(antlr.Token)

	// IsDrop_procedureContext differentiates from other interfaces.
	IsDrop_procedureContext()
}

type Drop_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	proc   antlr.Token
}

func NewEmptyDrop_procedureContext() *Drop_procedureContext {
	var p = new(Drop_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_procedure
	return p
}

func (*Drop_procedureContext) IsDrop_procedureContext() {}

func NewDrop_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_procedureContext {
	var p = new(Drop_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_procedure

	return p
}

func (s *Drop_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_procedureContext) GetProc() antlr.Token { return s.proc }

func (s *Drop_procedureContext) SetProc(v antlr.Token) { s.proc = v }

func (s *Drop_procedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_procedureContext) AllFunc_proc_name() []IFunc_proc_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem())
	var tst = make([]IFunc_proc_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunc_proc_nameContext)
		}
	}

	return tst
}

func (s *Drop_procedureContext) Func_proc_name(i int) IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Drop_procedureContext) PROC() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROC, 0)
}

func (s *Drop_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROCEDURE, 0)
}

func (s *Drop_procedureContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_procedureContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_procedure() (localctx IDrop_procedureContext) {
	localctx = NewDrop_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 578, TSqlParserRULE_drop_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7006)
		p.Match(TSqlParserDROP)
	}
	p.SetState(7007)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Drop_procedureContext).proc = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserPROC || _la == TSqlParserPROCEDURE) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Drop_procedureContext).proc = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(7010)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7008)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7009)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7012)
		p.Func_proc_name()
	}
	p.SetState(7017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7013)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7014)
			p.Func_proc_name()
		}

		p.SetState(7019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7021)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 924, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7020)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_triggerContext is an interface to support dynamic dispatch.
type IDrop_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_triggerContext differentiates from other interfaces.
	IsDrop_triggerContext()
}

type Drop_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_triggerContext() *Drop_triggerContext {
	var p = new(Drop_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_trigger
	return p
}

func (*Drop_triggerContext) IsDrop_triggerContext() {}

func NewDrop_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_triggerContext {
	var p = new(Drop_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_trigger

	return p
}

func (s *Drop_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_triggerContext) Drop_dml_trigger() IDrop_dml_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_dml_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_dml_triggerContext)
}

func (s *Drop_triggerContext) Drop_ddl_trigger() IDrop_ddl_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_ddl_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_ddl_triggerContext)
}

func (s *Drop_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_trigger(s)
	}
}

func (s *Drop_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_trigger(s)
	}
}

func (s *Drop_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_trigger() (localctx IDrop_triggerContext) {
	localctx = NewDrop_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 580, TSqlParserRULE_drop_trigger)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7025)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 925, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7023)
			p.Drop_dml_trigger()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7024)
			p.Drop_ddl_trigger()
		}

	}

	return localctx
}

// IDrop_dml_triggerContext is an interface to support dynamic dispatch.
type IDrop_dml_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_dml_triggerContext differentiates from other interfaces.
	IsDrop_dml_triggerContext()
}

type Drop_dml_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_dml_triggerContext() *Drop_dml_triggerContext {
	var p = new(Drop_dml_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_dml_trigger
	return p
}

func (*Drop_dml_triggerContext) IsDrop_dml_triggerContext() {}

func NewDrop_dml_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_dml_triggerContext {
	var p = new(Drop_dml_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_dml_trigger

	return p
}

func (s *Drop_dml_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_dml_triggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_dml_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Drop_dml_triggerContext) AllSimple_name() []ISimple_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem())
	var tst = make([]ISimple_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_nameContext)
		}
	}

	return tst
}

func (s *Drop_dml_triggerContext) Simple_name(i int) ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_dml_triggerContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_dml_triggerContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_dml_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_dml_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_dml_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_dml_trigger(s)
	}
}

func (s *Drop_dml_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_dml_trigger(s)
	}
}

func (s *Drop_dml_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_dml_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_dml_trigger() (localctx IDrop_dml_triggerContext) {
	localctx = NewDrop_dml_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 582, TSqlParserRULE_drop_dml_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7027)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7028)
		p.Match(TSqlParserTRIGGER)
	}
	p.SetState(7031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7029)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7030)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7033)
		p.Simple_name()
	}
	p.SetState(7038)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7034)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7035)
			p.Simple_name()
		}

		p.SetState(7040)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7042)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 928, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7041)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_ddl_triggerContext is an interface to support dynamic dispatch.
type IDrop_ddl_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_ddl_triggerContext differentiates from other interfaces.
	IsDrop_ddl_triggerContext()
}

type Drop_ddl_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_ddl_triggerContext() *Drop_ddl_triggerContext {
	var p = new(Drop_ddl_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_ddl_trigger
	return p
}

func (*Drop_ddl_triggerContext) IsDrop_ddl_triggerContext() {}

func NewDrop_ddl_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_ddl_triggerContext {
	var p = new(Drop_ddl_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_ddl_trigger

	return p
}

func (s *Drop_ddl_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_ddl_triggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_ddl_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIGGER, 0)
}

func (s *Drop_ddl_triggerContext) AllSimple_name() []ISimple_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem())
	var tst = make([]ISimple_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_nameContext)
		}
	}

	return tst
}

func (s *Drop_ddl_triggerContext) Simple_name(i int) ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_ddl_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Drop_ddl_triggerContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Drop_ddl_triggerContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Drop_ddl_triggerContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Drop_ddl_triggerContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_ddl_triggerContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_ddl_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_ddl_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_ddl_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_ddl_trigger(s)
	}
}

func (s *Drop_ddl_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_ddl_trigger(s)
	}
}

func (s *Drop_ddl_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_ddl_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_ddl_trigger() (localctx IDrop_ddl_triggerContext) {
	localctx = NewDrop_ddl_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 584, TSqlParserRULE_drop_ddl_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7044)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7045)
		p.Match(TSqlParserTRIGGER)
	}
	p.SetState(7048)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7046)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7047)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7050)
		p.Simple_name()
	}
	p.SetState(7055)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7051)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7052)
			p.Simple_name()
		}

		p.SetState(7057)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7058)
		p.Match(TSqlParserON)
	}
	p.SetState(7062)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDATABASE:
		{
			p.SetState(7059)
			p.Match(TSqlParserDATABASE)
		}

	case TSqlParserALL:
		{
			p.SetState(7060)
			p.Match(TSqlParserALL)
		}
		{
			p.SetState(7061)
			p.Match(TSqlParserSERVER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7065)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 932, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7064)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_functionContext is an interface to support dynamic dispatch.
type IDrop_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_functionContext differentiates from other interfaces.
	IsDrop_functionContext()
}

type Drop_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_functionContext() *Drop_functionContext {
	var p = new(Drop_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_function
	return p
}

func (*Drop_functionContext) IsDrop_functionContext() {}

func NewDrop_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_functionContext {
	var p = new(Drop_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_function

	return p
}

func (s *Drop_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_functionContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserFUNCTION, 0)
}

func (s *Drop_functionContext) AllFunc_proc_name() []IFunc_proc_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem())
	var tst = make([]IFunc_proc_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunc_proc_nameContext)
		}
	}

	return tst
}

func (s *Drop_functionContext) Func_proc_name(i int) IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Drop_functionContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_functionContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_function(s)
	}
}

func (s *Drop_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_function(s)
	}
}

func (s *Drop_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_function() (localctx IDrop_functionContext) {
	localctx = NewDrop_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 586, TSqlParserRULE_drop_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7067)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7068)
		p.Match(TSqlParserFUNCTION)
	}
	p.SetState(7071)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7069)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7070)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7073)
		p.Func_proc_name()
	}
	p.SetState(7078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7074)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7075)
			p.Func_proc_name()
		}

		p.SetState(7080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7082)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 935, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7081)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_statisticsContext is an interface to support dynamic dispatch.
type IDrop_statisticsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsDrop_statisticsContext differentiates from other interfaces.
	IsDrop_statisticsContext()
}

type Drop_statisticsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdContext
}

func NewEmptyDrop_statisticsContext() *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_statistics
	return p
}

func (*Drop_statisticsContext) IsDrop_statisticsContext() {}

func NewDrop_statisticsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_statisticsContext {
	var p = new(Drop_statisticsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_statistics

	return p
}

func (s *Drop_statisticsContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_statisticsContext) GetName() IIdContext { return s.name }

func (s *Drop_statisticsContext) SetName(v IIdContext) { s.name = v }

func (s *Drop_statisticsContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_statisticsContext) STATISTICS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATISTICS, 0)
}

func (s *Drop_statisticsContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Drop_statisticsContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Drop_statisticsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Drop_statisticsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Drop_statisticsContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Drop_statisticsContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_statisticsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_statisticsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_statisticsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_statistics(s)
	}
}

func (s *Drop_statisticsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_statistics(s)
	}
}

func (s *Drop_statisticsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_statistics(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_statistics() (localctx IDrop_statisticsContext) {
	localctx = NewDrop_statisticsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 588, TSqlParserRULE_drop_statistics)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7084)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7085)
		p.Match(TSqlParserSTATISTICS)
	}
	p.SetState(7095)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserCOMMA {
		p.SetState(7087)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(7086)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(7092)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 937, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7089)
				p.Table_name()
			}
			{
				p.SetState(7090)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(7094)

			var _x = p.Id()

			localctx.(*Drop_statisticsContext).name = _x
		}

		p.SetState(7097)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(7099)
		p.Match(TSqlParserSEMI)
	}

	return localctx
}

// IDrop_tableContext is an interface to support dynamic dispatch.
type IDrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tableContext differentiates from other interfaces.
	IsDrop_tableContext()
}

type Drop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tableContext() *Drop_tableContext {
	var p = new(Drop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_table
	return p
}

func (*Drop_tableContext) IsDrop_tableContext() {}

func NewDrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tableContext {
	var p = new(Drop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_table

	return p
}

func (s *Drop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Drop_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_tableContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_tableContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_table(s)
	}
}

func (s *Drop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_table(s)
	}
}

func (s *Drop_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_table() (localctx IDrop_tableContext) {
	localctx = NewDrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 590, TSqlParserRULE_drop_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7101)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7102)
		p.Match(TSqlParserTABLE)
	}
	p.SetState(7105)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7103)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7104)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7107)
		p.Table_name()
	}
	p.SetState(7109)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 940, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7108)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDrop_viewContext is an interface to support dynamic dispatch.
type IDrop_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_viewContext differentiates from other interfaces.
	IsDrop_viewContext()
}

type Drop_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_viewContext() *Drop_viewContext {
	var p = new(Drop_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_view
	return p
}

func (*Drop_viewContext) IsDrop_viewContext() {}

func NewDrop_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_viewContext {
	var p = new(Drop_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_view

	return p
}

func (s *Drop_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEW, 0)
}

func (s *Drop_viewContext) AllSimple_name() []ISimple_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem())
	var tst = make([]ISimple_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_nameContext)
		}
	}

	return tst
}

func (s *Drop_viewContext) Simple_name(i int) ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_viewContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_viewContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_view(s)
	}
}

func (s *Drop_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_view(s)
	}
}

func (s *Drop_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_view(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_view() (localctx IDrop_viewContext) {
	localctx = NewDrop_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 592, TSqlParserRULE_drop_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7111)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7112)
		p.Match(TSqlParserVIEW)
	}
	p.SetState(7115)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7113)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7114)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7117)
		p.Simple_name()
	}
	p.SetState(7122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7118)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7119)
			p.Simple_name()
		}

		p.SetState(7124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7126)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 943, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7125)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ICreate_typeContext is an interface to support dynamic dispatch.
type ICreate_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// IsCreate_typeContext differentiates from other interfaces.
	IsCreate_typeContext()
}

type Create_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_nameContext
}

func NewEmptyCreate_typeContext() *Create_typeContext {
	var p = new(Create_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_type
	return p
}

func (*Create_typeContext) IsCreate_typeContext() {}

func NewCreate_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_typeContext {
	var p = new(Create_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_type

	return p
}

func (s *Create_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Create_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Create_typeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Create_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Create_typeContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_typeContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_typeContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Create_typeContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Create_typeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Create_typeContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Create_typeContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Create_typeContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Create_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_type(s)
	}
}

func (s *Create_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_type(s)
	}
}

func (s *Create_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_type() (localctx ICreate_typeContext) {
	localctx = NewCreate_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 594, TSqlParserRULE_create_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7128)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(7129)
		p.Match(TSqlParserTYPE)
	}
	{
		p.SetState(7130)

		var _x = p.Simple_name()

		localctx.(*Create_typeContext).name = _x
	}
	p.SetState(7135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(7131)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(7132)
			p.Data_type()
		}
		{
			p.SetState(7133)
			p.Default_value()
		}

	}
	p.SetState(7143)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(7137)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(7138)
			p.Match(TSqlParserTABLE)
		}
		{
			p.SetState(7139)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(7140)
			p.Column_def_table_constraints()
		}
		{
			p.SetState(7141)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDrop_typeContext is an interface to support dynamic dispatch.
type IDrop_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_nameContext

	// SetName sets the name rule contexts.
	SetName(ISimple_nameContext)

	// IsDrop_typeContext differentiates from other interfaces.
	IsDrop_typeContext()
}

type Drop_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_nameContext
}

func NewEmptyDrop_typeContext() *Drop_typeContext {
	var p = new(Drop_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_drop_type
	return p
}

func (*Drop_typeContext) IsDrop_typeContext() {}

func NewDrop_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_typeContext {
	var p = new(Drop_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_drop_type

	return p
}

func (s *Drop_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_typeContext) GetName() ISimple_nameContext { return s.name }

func (s *Drop_typeContext) SetName(v ISimple_nameContext) { s.name = v }

func (s *Drop_typeContext) DROP() antlr.TerminalNode {
	return s.GetToken(TSqlParserDROP, 0)
}

func (s *Drop_typeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Drop_typeContext) Simple_name() ISimple_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_nameContext)
}

func (s *Drop_typeContext) IF() antlr.TerminalNode {
	return s.GetToken(TSqlParserIF, 0)
}

func (s *Drop_typeContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *Drop_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDrop_type(s)
	}
}

func (s *Drop_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDrop_type(s)
	}
}

func (s *Drop_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDrop_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Drop_type() (localctx IDrop_typeContext) {
	localctx = NewDrop_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 596, TSqlParserRULE_drop_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7145)
		p.Match(TSqlParserDROP)
	}
	{
		p.SetState(7146)
		p.Match(TSqlParserTYPE)
	}
	p.SetState(7149)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserIF {
		{
			p.SetState(7147)
			p.Match(TSqlParserIF)
		}
		{
			p.SetState(7148)
			p.Match(TSqlParserEXISTS)
		}

	}
	{
		p.SetState(7151)

		var _x = p.Simple_name()

		localctx.(*Drop_typeContext).name = _x
	}

	return localctx
}

// IRowset_function_limitedContext is an interface to support dynamic dispatch.
type IRowset_function_limitedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRowset_function_limitedContext differentiates from other interfaces.
	IsRowset_function_limitedContext()
}

type Rowset_function_limitedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRowset_function_limitedContext() *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_rowset_function_limited
	return p
}

func (*Rowset_function_limitedContext) IsRowset_function_limitedContext() {}

func NewRowset_function_limitedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_function_limitedContext {
	var p = new(Rowset_function_limitedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_rowset_function_limited

	return p
}

func (s *Rowset_function_limitedContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_function_limitedContext) Openquery() IOpenqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpenqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpenqueryContext)
}

func (s *Rowset_function_limitedContext) Opendatasource() IOpendatasourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpendatasourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpendatasourceContext)
}

func (s *Rowset_function_limitedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_function_limitedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_function_limitedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRowset_function_limited(s)
	}
}

func (s *Rowset_function_limitedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRowset_function_limited(s)
	}
}

func (s *Rowset_function_limitedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRowset_function_limited(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Rowset_function_limited() (localctx IRowset_function_limitedContext) {
	localctx = NewRowset_function_limitedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 598, TSqlParserRULE_rowset_function_limited)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7155)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserOPENQUERY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7153)
			p.Openquery()
		}

	case TSqlParserOPENDATASOURCE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7154)
			p.Opendatasource()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOpenqueryContext is an interface to support dynamic dispatch.
type IOpenqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetQuery returns the query token.
	GetQuery() antlr.Token

	// SetQuery sets the query token.
	SetQuery(antlr.Token)

	// GetLinked_server returns the linked_server rule contexts.
	GetLinked_server() IIdContext

	// SetLinked_server sets the linked_server rule contexts.
	SetLinked_server(IIdContext)

	// IsOpenqueryContext differentiates from other interfaces.
	IsOpenqueryContext()
}

type OpenqueryContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	linked_server IIdContext
	query         antlr.Token
}

func NewEmptyOpenqueryContext() *OpenqueryContext {
	var p = new(OpenqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_openquery
	return p
}

func (*OpenqueryContext) IsOpenqueryContext() {}

func NewOpenqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpenqueryContext {
	var p = new(OpenqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_openquery

	return p
}

func (s *OpenqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OpenqueryContext) GetQuery() antlr.Token { return s.query }

func (s *OpenqueryContext) SetQuery(v antlr.Token) { s.query = v }

func (s *OpenqueryContext) GetLinked_server() IIdContext { return s.linked_server }

func (s *OpenqueryContext) SetLinked_server(v IIdContext) { s.linked_server = v }

func (s *OpenqueryContext) OPENQUERY() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPENQUERY, 0)
}

func (s *OpenqueryContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OpenqueryContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *OpenqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpenqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpenqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOpenquery(s)
	}
}

func (s *OpenqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOpenquery(s)
	}
}

func (s *OpenqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOpenquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Openquery() (localctx IOpenqueryContext) {
	localctx = NewOpenqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 600, TSqlParserRULE_openquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7157)
		p.Match(TSqlParserOPENQUERY)
	}
	{
		p.SetState(7158)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(7159)

		var _x = p.Id()

		localctx.(*OpenqueryContext).linked_server = _x
	}
	{
		p.SetState(7160)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(7161)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*OpenqueryContext).query = _m
	}
	{
		p.SetState(7162)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IOpendatasourceContext is an interface to support dynamic dispatch.
type IOpendatasourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider returns the provider token.
	GetProvider() antlr.Token

	// GetInit returns the init token.
	GetInit() antlr.Token

	// SetProvider sets the provider token.
	SetProvider(antlr.Token)

	// SetInit sets the init token.
	SetInit(antlr.Token)

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetScheme returns the scheme rule contexts.
	GetScheme() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetScheme sets the scheme rule contexts.
	SetScheme(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsOpendatasourceContext differentiates from other interfaces.
	IsOpendatasourceContext()
}

type OpendatasourceContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	provider antlr.Token
	init     antlr.Token
	database IIdContext
	scheme   IIdContext
	table    IIdContext
}

func NewEmptyOpendatasourceContext() *OpendatasourceContext {
	var p = new(OpendatasourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_opendatasource
	return p
}

func (*OpendatasourceContext) IsOpendatasourceContext() {}

func NewOpendatasourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OpendatasourceContext {
	var p = new(OpendatasourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_opendatasource

	return p
}

func (s *OpendatasourceContext) GetParser() antlr.Parser { return s.parser }

func (s *OpendatasourceContext) GetProvider() antlr.Token { return s.provider }

func (s *OpendatasourceContext) GetInit() antlr.Token { return s.init }

func (s *OpendatasourceContext) SetProvider(v antlr.Token) { s.provider = v }

func (s *OpendatasourceContext) SetInit(v antlr.Token) { s.init = v }

func (s *OpendatasourceContext) GetDatabase() IIdContext { return s.database }

func (s *OpendatasourceContext) GetScheme() IIdContext { return s.scheme }

func (s *OpendatasourceContext) GetTable() IIdContext { return s.table }

func (s *OpendatasourceContext) SetDatabase(v IIdContext) { s.database = v }

func (s *OpendatasourceContext) SetScheme(v IIdContext) { s.scheme = v }

func (s *OpendatasourceContext) SetTable(v IIdContext) { s.table = v }

func (s *OpendatasourceContext) OPENDATASOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPENDATASOURCE, 0)
}

func (s *OpendatasourceContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *OpendatasourceContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *OpendatasourceContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *OpendatasourceContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *OpendatasourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OpendatasourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OpendatasourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOpendatasource(s)
	}
}

func (s *OpendatasourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOpendatasource(s)
	}
}

func (s *OpendatasourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOpendatasource(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Opendatasource() (localctx IOpendatasourceContext) {
	localctx = NewOpendatasourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 602, TSqlParserRULE_opendatasource)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7164)
		p.Match(TSqlParserOPENDATASOURCE)
	}
	{
		p.SetState(7165)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(7166)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*OpendatasourceContext).provider = _m
	}
	{
		p.SetState(7167)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(7168)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*OpendatasourceContext).init = _m
	}
	{
		p.SetState(7169)
		p.Match(TSqlParserRR_BRACKET)
	}
	{
		p.SetState(7170)
		p.Match(TSqlParserDOT)
	}
	p.SetState(7172)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
		{
			p.SetState(7171)

			var _x = p.Id()

			localctx.(*OpendatasourceContext).database = _x
		}

	}
	{
		p.SetState(7174)
		p.Match(TSqlParserDOT)
	}
	p.SetState(7176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
		{
			p.SetState(7175)

			var _x = p.Id()

			localctx.(*OpendatasourceContext).scheme = _x
		}

	}
	{
		p.SetState(7178)
		p.Match(TSqlParserDOT)
	}

	{
		p.SetState(7179)

		var _x = p.Id()

		localctx.(*OpendatasourceContext).table = _x
	}

	return localctx
}

// IDeclare_statementContext is an interface to support dynamic dispatch.
type IDeclare_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXml_namespace_uri returns the xml_namespace_uri token.
	GetXml_namespace_uri() antlr.Token

	// SetXml_namespace_uri sets the xml_namespace_uri token.
	SetXml_namespace_uri(antlr.Token)

	// IsDeclare_statementContext differentiates from other interfaces.
	IsDeclare_statementContext()
}

type Declare_statementContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	xml_namespace_uri antlr.Token
}

func NewEmptyDeclare_statementContext() *Declare_statementContext {
	var p = new(Declare_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_declare_statement
	return p
}

func (*Declare_statementContext) IsDeclare_statementContext() {}

func NewDeclare_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_statementContext {
	var p = new(Declare_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_declare_statement

	return p
}

func (s *Declare_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_statementContext) GetXml_namespace_uri() antlr.Token { return s.xml_namespace_uri }

func (s *Declare_statementContext) SetXml_namespace_uri(v antlr.Token) { s.xml_namespace_uri = v }

func (s *Declare_statementContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECLARE, 0)
}

func (s *Declare_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Declare_statementContext) Table_type_definition() ITable_type_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_type_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_type_definitionContext)
}

func (s *Declare_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Declare_statementContext) AllDeclare_local() []IDeclare_localContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem())
	var tst = make([]IDeclare_localContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_localContext)
		}
	}

	return tst
}

func (s *Declare_statementContext) Declare_local(i int) IDeclare_localContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_localContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_localContext)
}

func (s *Declare_statementContext) Xml_type_definition() IXml_type_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_type_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_type_definitionContext)
}

func (s *Declare_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Declare_statementContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(TSqlParserXMLNAMESPACES, 0)
}

func (s *Declare_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Declare_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Declare_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDeclare_statement(s)
	}
}

func (s *Declare_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDeclare_statement(s)
	}
}

func (s *Declare_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDeclare_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Declare_statement() (localctx IDeclare_statementContext) {
	localctx = NewDeclare_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 604, TSqlParserRULE_declare_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7224)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 958, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7181)
			p.Match(TSqlParserDECLARE)
		}
		{
			p.SetState(7182)
			p.Match(TSqlParserLOCAL_ID)
		}
		p.SetState(7184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAS {
			{
				p.SetState(7183)
				p.Match(TSqlParserAS)
			}

		}
		{
			p.SetState(7186)
			p.Table_type_definition()
		}
		p.SetState(7188)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 951, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7187)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7190)
			p.Match(TSqlParserDECLARE)
		}
		{
			p.SetState(7191)
			p.Declare_local()
		}
		p.SetState(7196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(7192)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(7193)
				p.Declare_local()
			}

			p.SetState(7198)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(7200)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 953, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7199)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7202)
			p.Match(TSqlParserDECLARE)
		}
		{
			p.SetState(7203)
			p.Match(TSqlParserLOCAL_ID)
		}
		p.SetState(7205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAS {
			{
				p.SetState(7204)
				p.Match(TSqlParserAS)
			}

		}
		{
			p.SetState(7207)
			p.Xml_type_definition()
		}
		p.SetState(7209)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 955, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7208)
				p.Match(TSqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7211)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(7212)
			p.Match(TSqlParserXMLNAMESPACES)
		}
		{
			p.SetState(7213)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(7214)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Declare_statementContext).xml_namespace_uri = _m
		}
		p.SetState(7216)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(7215)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(7218)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(7219)
			p.Id()
		}
		{
			p.SetState(7220)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(7222)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 957, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7221)
				p.Match(TSqlParserSEMI)
			}

		}

	}

	return localctx
}

// ICursor_statementContext is an interface to support dynamic dispatch.
type ICursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_statementContext differentiates from other interfaces.
	IsCursor_statementContext()
}

type Cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_statementContext() *Cursor_statementContext {
	var p = new(Cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_cursor_statement
	return p
}

func (*Cursor_statementContext) IsCursor_statementContext() {}

func NewCursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_statementContext {
	var p = new(Cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_cursor_statement

	return p
}

func (s *Cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLOSE, 0)
}

func (s *Cursor_statementContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Cursor_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Cursor_statementContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEALLOCATE, 0)
}

func (s *Cursor_statementContext) Declare_cursor() IDeclare_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_cursorContext)
}

func (s *Cursor_statementContext) Fetch_cursor() IFetch_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFetch_cursorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFetch_cursorContext)
}

func (s *Cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPEN, 0)
}

func (s *Cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCursor_statement(s)
	}
}

func (s *Cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCursor_statement(s)
	}
}

func (s *Cursor_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCursor_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Cursor_statement() (localctx ICursor_statementContext) {
	localctx = NewCursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 606, TSqlParserRULE_cursor_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7252)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7226)
			p.Match(TSqlParserCLOSE)
		}
		p.SetState(7228)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 959, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7227)
				p.Match(TSqlParserGLOBAL)
			}

		}
		{
			p.SetState(7230)
			p.Cursor_name()
		}
		p.SetState(7232)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 960, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7231)
				p.Match(TSqlParserSEMI)
			}

		}

	case TSqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7234)
			p.Match(TSqlParserDEALLOCATE)
		}
		p.SetState(7236)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 961, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7235)
				p.Match(TSqlParserGLOBAL)
			}

		}
		{
			p.SetState(7238)
			p.Cursor_name()
		}
		p.SetState(7240)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 962, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7239)
				p.Match(TSqlParserSEMI)
			}

		}

	case TSqlParserDECLARE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7242)
			p.Declare_cursor()
		}

	case TSqlParserFETCH:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7243)
			p.Fetch_cursor()
		}

	case TSqlParserOPEN:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7244)
			p.Match(TSqlParserOPEN)
		}
		p.SetState(7246)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 963, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7245)
				p.Match(TSqlParserGLOBAL)
			}

		}
		{
			p.SetState(7248)
			p.Cursor_name()
		}
		p.SetState(7250)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 964, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7249)
				p.Match(TSqlParserSEMI)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBackup_databaseContext is an interface to support dynamic dispatch.
type IBackup_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFile_or_filegroup returns the file_or_filegroup token.
	GetFile_or_filegroup() antlr.Token

	// GetMedianame returns the medianame token.
	GetMedianame() antlr.Token

	// GetStats_percent returns the stats_percent token.
	GetStats_percent() antlr.Token

	// SetFile_or_filegroup sets the file_or_filegroup token.
	SetFile_or_filegroup(antlr.Token)

	// SetMedianame sets the medianame token.
	SetMedianame(antlr.Token)

	// SetStats_percent sets the stats_percent token.
	SetStats_percent(antlr.Token)

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetLogical_device_name returns the logical_device_name rule contexts.
	GetLogical_device_name() IIdContext

	// GetBackup_set_name returns the backup_set_name rule contexts.
	GetBackup_set_name() IIdContext

	// GetEncryptor_name returns the encryptor_name rule contexts.
	GetEncryptor_name() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetLogical_device_name sets the logical_device_name rule contexts.
	SetLogical_device_name(IIdContext)

	// SetBackup_set_name sets the backup_set_name rule contexts.
	SetBackup_set_name(IIdContext)

	// SetEncryptor_name sets the encryptor_name rule contexts.
	SetEncryptor_name(IIdContext)

	// IsBackup_databaseContext differentiates from other interfaces.
	IsBackup_databaseContext()
}

type Backup_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	database_name       IIdContext
	file_or_filegroup   antlr.Token
	logical_device_name IIdContext
	backup_set_name     IIdContext
	medianame           antlr.Token
	stats_percent       antlr.Token
	encryptor_name      IIdContext
}

func NewEmptyBackup_databaseContext() *Backup_databaseContext {
	var p = new(Backup_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_database
	return p
}

func (*Backup_databaseContext) IsBackup_databaseContext() {}

func NewBackup_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_databaseContext {
	var p = new(Backup_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_database

	return p
}

func (s *Backup_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_databaseContext) GetFile_or_filegroup() antlr.Token { return s.file_or_filegroup }

func (s *Backup_databaseContext) GetMedianame() antlr.Token { return s.medianame }

func (s *Backup_databaseContext) GetStats_percent() antlr.Token { return s.stats_percent }

func (s *Backup_databaseContext) SetFile_or_filegroup(v antlr.Token) { s.file_or_filegroup = v }

func (s *Backup_databaseContext) SetMedianame(v antlr.Token) { s.medianame = v }

func (s *Backup_databaseContext) SetStats_percent(v antlr.Token) { s.stats_percent = v }

func (s *Backup_databaseContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Backup_databaseContext) GetLogical_device_name() IIdContext { return s.logical_device_name }

func (s *Backup_databaseContext) GetBackup_set_name() IIdContext { return s.backup_set_name }

func (s *Backup_databaseContext) GetEncryptor_name() IIdContext { return s.encryptor_name }

func (s *Backup_databaseContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Backup_databaseContext) SetLogical_device_name(v IIdContext) { s.logical_device_name = v }

func (s *Backup_databaseContext) SetBackup_set_name(v IIdContext) { s.backup_set_name = v }

func (s *Backup_databaseContext) SetEncryptor_name(v IIdContext) { s.encryptor_name = v }

func (s *Backup_databaseContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP, 0)
}

func (s *Backup_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Backup_databaseContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Backup_databaseContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Backup_databaseContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Backup_databaseContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Backup_databaseContext) READ_WRITE_FILEGROUPS() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_WRITE_FILEGROUPS, 0)
}

func (s *Backup_databaseContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Backup_databaseContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Backup_databaseContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Backup_databaseContext) AllFILE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILE)
}

func (s *Backup_databaseContext) FILE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, i)
}

func (s *Backup_databaseContext) AllFILEGROUP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILEGROUP)
}

func (s *Backup_databaseContext) FILEGROUP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEGROUP, i)
}

func (s *Backup_databaseContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Backup_databaseContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Backup_databaseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Backup_databaseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Backup_databaseContext) AllDISK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDISK)
}

func (s *Backup_databaseContext) DISK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDISK, i)
}

func (s *Backup_databaseContext) AllTAPE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTAPE)
}

func (s *Backup_databaseContext) TAPE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTAPE, i)
}

func (s *Backup_databaseContext) AllURL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserURL)
}

func (s *Backup_databaseContext) URL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserURL, i)
}

func (s *Backup_databaseContext) AllMIRROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMIRROR)
}

func (s *Backup_databaseContext) MIRROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMIRROR, i)
}

func (s *Backup_databaseContext) AllDIFFERENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDIFFERENTIAL)
}

func (s *Backup_databaseContext) DIFFERENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDIFFERENTIAL, i)
}

func (s *Backup_databaseContext) AllCOPY_ONLY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOPY_ONLY)
}

func (s *Backup_databaseContext) COPY_ONLY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOPY_ONLY, i)
}

func (s *Backup_databaseContext) AllDESCRIPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDESCRIPTION)
}

func (s *Backup_databaseContext) DESCRIPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDESCRIPTION, i)
}

func (s *Backup_databaseContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNAME)
}

func (s *Backup_databaseContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, i)
}

func (s *Backup_databaseContext) AllCREDENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCREDENTIAL)
}

func (s *Backup_databaseContext) CREDENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, i)
}

func (s *Backup_databaseContext) AllFILE_SNAPSHOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILE_SNAPSHOT)
}

func (s *Backup_databaseContext) FILE_SNAPSHOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE_SNAPSHOT, i)
}

func (s *Backup_databaseContext) AllMEDIADESCRIPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIADESCRIPTION)
}

func (s *Backup_databaseContext) MEDIADESCRIPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIADESCRIPTION, i)
}

func (s *Backup_databaseContext) AllMEDIANAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIANAME)
}

func (s *Backup_databaseContext) MEDIANAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIANAME, i)
}

func (s *Backup_databaseContext) AllBLOCKSIZE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBLOCKSIZE)
}

func (s *Backup_databaseContext) BLOCKSIZE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOCKSIZE, i)
}

func (s *Backup_databaseContext) AllBUFFERCOUNT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBUFFERCOUNT)
}

func (s *Backup_databaseContext) BUFFERCOUNT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBUFFERCOUNT, i)
}

func (s *Backup_databaseContext) AllMAXTRANSFER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAXTRANSFER)
}

func (s *Backup_databaseContext) MAXTRANSFER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXTRANSFER, i)
}

func (s *Backup_databaseContext) AllRESTART() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRESTART)
}

func (s *Backup_databaseContext) RESTART(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRESTART, i)
}

func (s *Backup_databaseContext) AllSTATS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTATS)
}

func (s *Backup_databaseContext) STATS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATS, i)
}

func (s *Backup_databaseContext) AllENCRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTION)
}

func (s *Backup_databaseContext) ENCRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, i)
}

func (s *Backup_databaseContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Backup_databaseContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Backup_databaseContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALGORITHM)
}

func (s *Backup_databaseContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, i)
}

func (s *Backup_databaseContext) AllSERVER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVER)
}

func (s *Backup_databaseContext) SERVER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, i)
}

func (s *Backup_databaseContext) AllCERTIFICATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCERTIFICATE)
}

func (s *Backup_databaseContext) CERTIFICATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, i)
}

func (s *Backup_databaseContext) AllCOMPRESSION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMPRESSION)
}

func (s *Backup_databaseContext) COMPRESSION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMPRESSION, i)
}

func (s *Backup_databaseContext) AllNO_COMPRESSION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO_COMPRESSION)
}

func (s *Backup_databaseContext) NO_COMPRESSION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_COMPRESSION, i)
}

func (s *Backup_databaseContext) AllNOINIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOINIT)
}

func (s *Backup_databaseContext) NOINIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOINIT, i)
}

func (s *Backup_databaseContext) AllINIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserINIT)
}

func (s *Backup_databaseContext) INIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserINIT, i)
}

func (s *Backup_databaseContext) AllNOSKIP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOSKIP)
}

func (s *Backup_databaseContext) NOSKIP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOSKIP, i)
}

func (s *Backup_databaseContext) AllSKIP_KEYWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSKIP_KEYWORD)
}

func (s *Backup_databaseContext) SKIP_KEYWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSKIP_KEYWORD, i)
}

func (s *Backup_databaseContext) AllNOFORMAT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOFORMAT)
}

func (s *Backup_databaseContext) NOFORMAT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOFORMAT, i)
}

func (s *Backup_databaseContext) AllFORMAT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFORMAT)
}

func (s *Backup_databaseContext) FORMAT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFORMAT, i)
}

func (s *Backup_databaseContext) AllNO_CHECKSUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO_CHECKSUM)
}

func (s *Backup_databaseContext) NO_CHECKSUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_CHECKSUM, i)
}

func (s *Backup_databaseContext) AllCHECKSUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCHECKSUM)
}

func (s *Backup_databaseContext) CHECKSUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM, i)
}

func (s *Backup_databaseContext) AllSTOP_ON_ERROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTOP_ON_ERROR)
}

func (s *Backup_databaseContext) STOP_ON_ERROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOP_ON_ERROR, i)
}

func (s *Backup_databaseContext) AllCONTINUE_AFTER_ERROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCONTINUE_AFTER_ERROR)
}

func (s *Backup_databaseContext) CONTINUE_AFTER_ERROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE_AFTER_ERROR, i)
}

func (s *Backup_databaseContext) AllREWIND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREWIND)
}

func (s *Backup_databaseContext) REWIND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREWIND, i)
}

func (s *Backup_databaseContext) AllNOREWIND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOREWIND)
}

func (s *Backup_databaseContext) NOREWIND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOREWIND, i)
}

func (s *Backup_databaseContext) AllLOAD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOAD)
}

func (s *Backup_databaseContext) LOAD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOAD, i)
}

func (s *Backup_databaseContext) AllNOUNLOAD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOUNLOAD)
}

func (s *Backup_databaseContext) NOUNLOAD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOUNLOAD, i)
}

func (s *Backup_databaseContext) AllAES_128() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_128)
}

func (s *Backup_databaseContext) AES_128(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_128, i)
}

func (s *Backup_databaseContext) AllAES_192() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_192)
}

func (s *Backup_databaseContext) AES_192(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_192, i)
}

func (s *Backup_databaseContext) AllAES_256() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_256)
}

func (s *Backup_databaseContext) AES_256(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_256, i)
}

func (s *Backup_databaseContext) AllTRIPLE_DES_3KEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTRIPLE_DES_3KEY)
}

func (s *Backup_databaseContext) TRIPLE_DES_3KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES_3KEY, i)
}

func (s *Backup_databaseContext) AllEXPIREDATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEXPIREDATE)
}

func (s *Backup_databaseContext) EXPIREDATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPIREDATE, i)
}

func (s *Backup_databaseContext) AllRETAINDAYS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRETAINDAYS)
}

func (s *Backup_databaseContext) RETAINDAYS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRETAINDAYS, i)
}

func (s *Backup_databaseContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Backup_databaseContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Backup_databaseContext) AllASYMMETRIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserASYMMETRIC)
}

func (s *Backup_databaseContext) ASYMMETRIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, i)
}

func (s *Backup_databaseContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Backup_databaseContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Backup_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_database(s)
	}
}

func (s *Backup_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_database(s)
	}
}

func (s *Backup_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_database() (localctx IBackup_databaseContext) {
	localctx = NewBackup_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 608, TSqlParserRULE_backup_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7254)
		p.Match(TSqlParserBACKUP)
	}
	{
		p.SetState(7255)
		p.Match(TSqlParserDATABASE)
	}

	{
		p.SetState(7256)

		var _x = p.Id()

		localctx.(*Backup_databaseContext).database_name = _x
	}

	p.SetState(7269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserREAD_WRITE_FILEGROUPS {
		{
			p.SetState(7257)
			p.Match(TSqlParserREAD_WRITE_FILEGROUPS)
		}
		p.SetState(7266)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 967, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(7259)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7258)
						p.Match(TSqlParserCOMMA)
					}

				}
				p.SetState(7261)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserFILE || _la == TSqlParserFILEGROUP) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(7262)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(7263)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Backup_databaseContext).file_or_filegroup = _m
				}

			}
			p.SetState(7268)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 967, p.GetParserRuleContext())
		}

	}
	p.SetState(7279)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserFILE || _la == TSqlParserFILEGROUP || _la == TSqlParserCOMMA {
		p.SetState(7272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(7271)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(7274)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFILE || _la == TSqlParserFILEGROUP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(7275)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(7276)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Backup_databaseContext).file_or_filegroup = _m
		}

		p.SetState(7281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(7305)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 976, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7282)
			p.Match(TSqlParserTO)
		}
		p.SetState(7287)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(7284)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7283)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(7286)

					var _x = p.Id()

					localctx.(*Backup_databaseContext).logical_device_name = _x
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(7289)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 972, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(7291)
			p.Match(TSqlParserTO)
		}
		p.SetState(7301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL || _la == TSqlParserCOMMA {
			p.SetState(7293)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(7292)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(7295)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(7296)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(7299)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING:
				{
					p.SetState(7297)
					p.Match(TSqlParserSTRING)
				}

			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(7298)
					p.Id()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(7303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7340)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 984, p.GetParserRuleContext()) == 1 {
		p.SetState(7317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserMIRROR {
			{
				p.SetState(7307)
				p.Match(TSqlParserMIRROR)
			}
			{
				p.SetState(7308)
				p.Match(TSqlParserTO)
			}
			p.SetState(7313)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					p.SetState(7310)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7309)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7312)

						var _x = p.Id()

						localctx.(*Backup_databaseContext).logical_device_name = _x
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(7315)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 978, p.GetParserRuleContext())
			}

			p.SetState(7319)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 984, p.GetParserRuleContext()) == 2 {
		p.SetState(7336)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserMIRROR {
			{
				p.SetState(7321)
				p.Match(TSqlParserMIRROR)
			}
			{
				p.SetState(7322)
				p.Match(TSqlParserTO)
			}
			p.SetState(7332)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL || _la == TSqlParserCOMMA {
				p.SetState(7324)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7323)
						p.Match(TSqlParserCOMMA)
					}

				}
				p.SetState(7326)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(7327)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(7330)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserSTRING:
					{
						p.SetState(7328)
						p.Match(TSqlParserSTRING)
					}

				case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
					{
						p.SetState(7329)
						p.Id()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(7334)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(7338)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7502)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1020, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7342)
			p.Match(TSqlParserWITH)
		}
		p.SetState(7499)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1019, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(7497)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1018, p.GetParserRuleContext()) {
				case 1:
					p.SetState(7344)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7343)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7346)
						p.Match(TSqlParserDIFFERENTIAL)
					}

				case 2:
					p.SetState(7348)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7347)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7350)
						p.Match(TSqlParserCOPY_ONLY)
					}

				case 3:
					p.SetState(7352)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7351)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7354)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCOMPRESSION || _la == TSqlParserNO_COMPRESSION) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 4:
					p.SetState(7356)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7355)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7358)
						p.Match(TSqlParserDESCRIPTION)
					}
					{
						p.SetState(7359)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7362)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserSTRING:
						{
							p.SetState(7360)
							p.Match(TSqlParserSTRING)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7361)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 5:
					p.SetState(7365)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7364)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7367)
						p.Match(TSqlParserNAME)
					}
					{
						p.SetState(7368)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(7369)

						var _x = p.Id()

						localctx.(*Backup_databaseContext).backup_set_name = _x
					}

				case 6:
					p.SetState(7371)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7370)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7373)
						p.Match(TSqlParserCREDENTIAL)
					}

				case 7:
					p.SetState(7375)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7374)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7377)
						p.Match(TSqlParserFILE_SNAPSHOT)
					}

				case 8:
					p.SetState(7379)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7378)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7393)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserEXPIREDATE:
						{
							p.SetState(7381)
							p.Match(TSqlParserEXPIREDATE)
						}
						{
							p.SetState(7382)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(7385)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserSTRING:
							{
								p.SetState(7383)
								p.Match(TSqlParserSTRING)
							}

						case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
							{
								p.SetState(7384)
								p.Id()
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					case TSqlParserRETAINDAYS:
						{
							p.SetState(7387)
							p.Match(TSqlParserRETAINDAYS)
						}
						{
							p.SetState(7388)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(7391)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserDECIMAL:
							{
								p.SetState(7389)
								p.Match(TSqlParserDECIMAL)
							}

						case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
							{
								p.SetState(7390)
								p.Id()
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 9:
					p.SetState(7396)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7395)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7398)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserINIT || _la == TSqlParserNOINIT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 10:
					p.SetState(7400)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7399)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7402)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOSKIP || _la == TSqlParserSKIP_KEYWORD) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 11:
					p.SetState(7404)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7403)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7406)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOFORMAT || _la == TSqlParserFORMAT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 12:
					p.SetState(7408)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7407)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7410)
						p.Match(TSqlParserMEDIADESCRIPTION)
					}
					{
						p.SetState(7411)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7414)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserSTRING:
						{
							p.SetState(7412)
							p.Match(TSqlParserSTRING)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7413)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 13:
					p.SetState(7417)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7416)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7419)
						p.Match(TSqlParserMEDIANAME)
					}
					{
						p.SetState(7420)
						p.Match(TSqlParserEQUAL)
					}

					{
						p.SetState(7421)

						var _m = p.Match(TSqlParserSTRING)

						localctx.(*Backup_databaseContext).medianame = _m
					}

				case 14:
					p.SetState(7423)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7422)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7425)
						p.Match(TSqlParserBLOCKSIZE)
					}
					{
						p.SetState(7426)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7429)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7427)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7428)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 15:
					p.SetState(7432)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7431)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7434)
						p.Match(TSqlParserBUFFERCOUNT)
					}
					{
						p.SetState(7435)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7438)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7436)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7437)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 16:
					p.SetState(7441)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7440)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7443)
						p.Match(TSqlParserMAXTRANSFER)
					}
					{
						p.SetState(7444)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7447)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7445)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7446)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 17:
					p.SetState(7450)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7449)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7452)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNO_CHECKSUM || _la == TSqlParserCHECKSUM) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 18:
					p.SetState(7454)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7453)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7456)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCONTINUE_AFTER_ERROR || _la == TSqlParserSTOP_ON_ERROR) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 19:
					p.SetState(7458)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7457)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7460)
						p.Match(TSqlParserRESTART)
					}

				case 20:
					p.SetState(7462)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7461)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7464)
						p.Match(TSqlParserSTATS)
					}
					p.SetState(7467)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserEQUAL {
						{
							p.SetState(7465)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(7466)

							var _m = p.Match(TSqlParserDECIMAL)

							localctx.(*Backup_databaseContext).stats_percent = _m
						}

					}

				case 21:
					p.SetState(7470)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7469)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7472)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOREWIND || _la == TSqlParserREWIND) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 22:
					p.SetState(7474)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7473)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7476)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserLOAD || _la == TSqlParserNOUNLOAD) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 23:
					p.SetState(7478)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7477)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7480)
						p.Match(TSqlParserENCRYPTION)
					}
					{
						p.SetState(7481)
						p.Match(TSqlParserLR_BRACKET)
					}
					{
						p.SetState(7482)
						p.Match(TSqlParserALGORITHM)
					}
					{
						p.SetState(7483)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7484)
					_la = p.GetTokenStream().LA(1)

					if !((((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(TSqlParserAES_128-388))|(1<<(TSqlParserAES_192-388))|(1<<(TSqlParserAES_256-388)))) != 0) || _la == TSqlParserTRIPLE_DES_3KEY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					{
						p.SetState(7485)
						p.Match(TSqlParserCOMMA)
					}
					{
						p.SetState(7486)
						p.Match(TSqlParserSERVER)
					}
					{
						p.SetState(7487)
						p.Match(TSqlParserCERTIFICATE)
					}
					{
						p.SetState(7488)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7495)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1017, p.GetParserRuleContext()) {
					case 1:
						{
							p.SetState(7489)

							var _x = p.Id()

							localctx.(*Backup_databaseContext).encryptor_name = _x
						}

					case 2:
						{
							p.SetState(7490)
							p.Match(TSqlParserSERVER)
						}
						{
							p.SetState(7491)
							p.Match(TSqlParserASYMMETRIC)
						}
						{
							p.SetState(7492)
							p.Match(TSqlParserKEY)
						}
						{
							p.SetState(7493)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(7494)

							var _x = p.Id()

							localctx.(*Backup_databaseContext).encryptor_name = _x
						}

					}

				}

			}
			p.SetState(7501)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1019, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IBackup_logContext is an interface to support dynamic dispatch.
type IBackup_logContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMedianame returns the medianame token.
	GetMedianame() antlr.Token

	// GetStats_percent returns the stats_percent token.
	GetStats_percent() antlr.Token

	// GetUndo_file_name returns the undo_file_name token.
	GetUndo_file_name() antlr.Token

	// SetMedianame sets the medianame token.
	SetMedianame(antlr.Token)

	// SetStats_percent sets the stats_percent token.
	SetStats_percent(antlr.Token)

	// SetUndo_file_name sets the undo_file_name token.
	SetUndo_file_name(antlr.Token)

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetLogical_device_name returns the logical_device_name rule contexts.
	GetLogical_device_name() IIdContext

	// GetBackup_set_name returns the backup_set_name rule contexts.
	GetBackup_set_name() IIdContext

	// GetEncryptor_name returns the encryptor_name rule contexts.
	GetEncryptor_name() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetLogical_device_name sets the logical_device_name rule contexts.
	SetLogical_device_name(IIdContext)

	// SetBackup_set_name sets the backup_set_name rule contexts.
	SetBackup_set_name(IIdContext)

	// SetEncryptor_name sets the encryptor_name rule contexts.
	SetEncryptor_name(IIdContext)

	// IsBackup_logContext differentiates from other interfaces.
	IsBackup_logContext()
}

type Backup_logContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	database_name       IIdContext
	logical_device_name IIdContext
	backup_set_name     IIdContext
	medianame           antlr.Token
	stats_percent       antlr.Token
	undo_file_name      antlr.Token
	encryptor_name      IIdContext
}

func NewEmptyBackup_logContext() *Backup_logContext {
	var p = new(Backup_logContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_log
	return p
}

func (*Backup_logContext) IsBackup_logContext() {}

func NewBackup_logContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_logContext {
	var p = new(Backup_logContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_log

	return p
}

func (s *Backup_logContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_logContext) GetMedianame() antlr.Token { return s.medianame }

func (s *Backup_logContext) GetStats_percent() antlr.Token { return s.stats_percent }

func (s *Backup_logContext) GetUndo_file_name() antlr.Token { return s.undo_file_name }

func (s *Backup_logContext) SetMedianame(v antlr.Token) { s.medianame = v }

func (s *Backup_logContext) SetStats_percent(v antlr.Token) { s.stats_percent = v }

func (s *Backup_logContext) SetUndo_file_name(v antlr.Token) { s.undo_file_name = v }

func (s *Backup_logContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Backup_logContext) GetLogical_device_name() IIdContext { return s.logical_device_name }

func (s *Backup_logContext) GetBackup_set_name() IIdContext { return s.backup_set_name }

func (s *Backup_logContext) GetEncryptor_name() IIdContext { return s.encryptor_name }

func (s *Backup_logContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Backup_logContext) SetLogical_device_name(v IIdContext) { s.logical_device_name = v }

func (s *Backup_logContext) SetBackup_set_name(v IIdContext) { s.backup_set_name = v }

func (s *Backup_logContext) SetEncryptor_name(v IIdContext) { s.encryptor_name = v }

func (s *Backup_logContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP, 0)
}

func (s *Backup_logContext) LOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOG, 0)
}

func (s *Backup_logContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTO)
}

func (s *Backup_logContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, i)
}

func (s *Backup_logContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Backup_logContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Backup_logContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Backup_logContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Backup_logContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Backup_logContext) AllDISK() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDISK)
}

func (s *Backup_logContext) DISK(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDISK, i)
}

func (s *Backup_logContext) AllTAPE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTAPE)
}

func (s *Backup_logContext) TAPE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTAPE, i)
}

func (s *Backup_logContext) AllURL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserURL)
}

func (s *Backup_logContext) URL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserURL, i)
}

func (s *Backup_logContext) AllMIRROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMIRROR)
}

func (s *Backup_logContext) MIRROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMIRROR, i)
}

func (s *Backup_logContext) AllDIFFERENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDIFFERENTIAL)
}

func (s *Backup_logContext) DIFFERENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDIFFERENTIAL, i)
}

func (s *Backup_logContext) AllCOPY_ONLY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOPY_ONLY)
}

func (s *Backup_logContext) COPY_ONLY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOPY_ONLY, i)
}

func (s *Backup_logContext) AllDESCRIPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDESCRIPTION)
}

func (s *Backup_logContext) DESCRIPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDESCRIPTION, i)
}

func (s *Backup_logContext) AllNAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNAME)
}

func (s *Backup_logContext) NAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, i)
}

func (s *Backup_logContext) AllCREDENTIAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCREDENTIAL)
}

func (s *Backup_logContext) CREDENTIAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCREDENTIAL, i)
}

func (s *Backup_logContext) AllFILE_SNAPSHOT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILE_SNAPSHOT)
}

func (s *Backup_logContext) FILE_SNAPSHOT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE_SNAPSHOT, i)
}

func (s *Backup_logContext) AllMEDIADESCRIPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIADESCRIPTION)
}

func (s *Backup_logContext) MEDIADESCRIPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIADESCRIPTION, i)
}

func (s *Backup_logContext) AllMEDIANAME() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMEDIANAME)
}

func (s *Backup_logContext) MEDIANAME(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMEDIANAME, i)
}

func (s *Backup_logContext) AllBLOCKSIZE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBLOCKSIZE)
}

func (s *Backup_logContext) BLOCKSIZE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOCKSIZE, i)
}

func (s *Backup_logContext) AllBUFFERCOUNT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBUFFERCOUNT)
}

func (s *Backup_logContext) BUFFERCOUNT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBUFFERCOUNT, i)
}

func (s *Backup_logContext) AllMAXTRANSFER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserMAXTRANSFER)
}

func (s *Backup_logContext) MAXTRANSFER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXTRANSFER, i)
}

func (s *Backup_logContext) AllRESTART() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRESTART)
}

func (s *Backup_logContext) RESTART(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRESTART, i)
}

func (s *Backup_logContext) AllSTATS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTATS)
}

func (s *Backup_logContext) STATS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATS, i)
}

func (s *Backup_logContext) AllNO_TRUNCATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO_TRUNCATE)
}

func (s *Backup_logContext) NO_TRUNCATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_TRUNCATE, i)
}

func (s *Backup_logContext) AllENCRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTION)
}

func (s *Backup_logContext) ENCRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, i)
}

func (s *Backup_logContext) AllLR_BRACKET() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLR_BRACKET)
}

func (s *Backup_logContext) LR_BRACKET(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, i)
}

func (s *Backup_logContext) AllALGORITHM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALGORITHM)
}

func (s *Backup_logContext) ALGORITHM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, i)
}

func (s *Backup_logContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Backup_logContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Backup_logContext) AllSERVER() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVER)
}

func (s *Backup_logContext) SERVER(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, i)
}

func (s *Backup_logContext) AllCERTIFICATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCERTIFICATE)
}

func (s *Backup_logContext) CERTIFICATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, i)
}

func (s *Backup_logContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Backup_logContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Backup_logContext) AllCOMPRESSION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMPRESSION)
}

func (s *Backup_logContext) COMPRESSION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMPRESSION, i)
}

func (s *Backup_logContext) AllNO_COMPRESSION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO_COMPRESSION)
}

func (s *Backup_logContext) NO_COMPRESSION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_COMPRESSION, i)
}

func (s *Backup_logContext) AllNOINIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOINIT)
}

func (s *Backup_logContext) NOINIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOINIT, i)
}

func (s *Backup_logContext) AllINIT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserINIT)
}

func (s *Backup_logContext) INIT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserINIT, i)
}

func (s *Backup_logContext) AllNOSKIP() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOSKIP)
}

func (s *Backup_logContext) NOSKIP(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOSKIP, i)
}

func (s *Backup_logContext) AllSKIP_KEYWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSKIP_KEYWORD)
}

func (s *Backup_logContext) SKIP_KEYWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSKIP_KEYWORD, i)
}

func (s *Backup_logContext) AllNOFORMAT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOFORMAT)
}

func (s *Backup_logContext) NOFORMAT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOFORMAT, i)
}

func (s *Backup_logContext) AllFORMAT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFORMAT)
}

func (s *Backup_logContext) FORMAT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFORMAT, i)
}

func (s *Backup_logContext) AllNO_CHECKSUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNO_CHECKSUM)
}

func (s *Backup_logContext) NO_CHECKSUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNO_CHECKSUM, i)
}

func (s *Backup_logContext) AllCHECKSUM() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCHECKSUM)
}

func (s *Backup_logContext) CHECKSUM(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM, i)
}

func (s *Backup_logContext) AllSTOP_ON_ERROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTOP_ON_ERROR)
}

func (s *Backup_logContext) STOP_ON_ERROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTOP_ON_ERROR, i)
}

func (s *Backup_logContext) AllCONTINUE_AFTER_ERROR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCONTINUE_AFTER_ERROR)
}

func (s *Backup_logContext) CONTINUE_AFTER_ERROR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTINUE_AFTER_ERROR, i)
}

func (s *Backup_logContext) AllREWIND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserREWIND)
}

func (s *Backup_logContext) REWIND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserREWIND, i)
}

func (s *Backup_logContext) AllNOREWIND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOREWIND)
}

func (s *Backup_logContext) NOREWIND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOREWIND, i)
}

func (s *Backup_logContext) AllLOAD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOAD)
}

func (s *Backup_logContext) LOAD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOAD, i)
}

func (s *Backup_logContext) AllNOUNLOAD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNOUNLOAD)
}

func (s *Backup_logContext) NOUNLOAD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNOUNLOAD, i)
}

func (s *Backup_logContext) AllAES_128() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_128)
}

func (s *Backup_logContext) AES_128(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_128, i)
}

func (s *Backup_logContext) AllAES_192() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_192)
}

func (s *Backup_logContext) AES_192(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_192, i)
}

func (s *Backup_logContext) AllAES_256() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAES_256)
}

func (s *Backup_logContext) AES_256(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_256, i)
}

func (s *Backup_logContext) AllTRIPLE_DES_3KEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserTRIPLE_DES_3KEY)
}

func (s *Backup_logContext) TRIPLE_DES_3KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES_3KEY, i)
}

func (s *Backup_logContext) AllEXPIREDATE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEXPIREDATE)
}

func (s *Backup_logContext) EXPIREDATE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPIREDATE, i)
}

func (s *Backup_logContext) AllRETAINDAYS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserRETAINDAYS)
}

func (s *Backup_logContext) RETAINDAYS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserRETAINDAYS, i)
}

func (s *Backup_logContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Backup_logContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Backup_logContext) AllNORECOVERY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserNORECOVERY)
}

func (s *Backup_logContext) NORECOVERY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserNORECOVERY, i)
}

func (s *Backup_logContext) AllSTANDBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTANDBY)
}

func (s *Backup_logContext) STANDBY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTANDBY, i)
}

func (s *Backup_logContext) AllASYMMETRIC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserASYMMETRIC)
}

func (s *Backup_logContext) ASYMMETRIC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, i)
}

func (s *Backup_logContext) AllKEY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserKEY)
}

func (s *Backup_logContext) KEY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, i)
}

func (s *Backup_logContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_logContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_logContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_log(s)
	}
}

func (s *Backup_logContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_log(s)
	}
}

func (s *Backup_logContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_log(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_log() (localctx IBackup_logContext) {
	localctx = NewBackup_logContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 610, TSqlParserRULE_backup_log)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7504)
		p.Match(TSqlParserBACKUP)
	}
	{
		p.SetState(7505)
		p.Match(TSqlParserLOG)
	}

	{
		p.SetState(7506)

		var _x = p.Id()

		localctx.(*Backup_logContext).database_name = _x
	}

	p.SetState(7530)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1026, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(7507)
			p.Match(TSqlParserTO)
		}
		p.SetState(7512)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(7509)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7508)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(7511)

					var _x = p.Id()

					localctx.(*Backup_logContext).logical_device_name = _x
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(7514)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1022, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(7516)
			p.Match(TSqlParserTO)
		}
		p.SetState(7526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL || _la == TSqlParserCOMMA {
			p.SetState(7518)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(7517)
					p.Match(TSqlParserCOMMA)
				}

			}
			p.SetState(7520)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(7521)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(7524)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING:
				{
					p.SetState(7522)
					p.Match(TSqlParserSTRING)
				}

			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(7523)
					p.Id()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(7528)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7565)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1034, p.GetParserRuleContext()) == 1 {
		p.SetState(7542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserMIRROR {
			{
				p.SetState(7532)
				p.Match(TSqlParserMIRROR)
			}
			{
				p.SetState(7533)
				p.Match(TSqlParserTO)
			}
			p.SetState(7538)
			p.GetErrorHandler().Sync(p)
			_alt = 1
			for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				switch _alt {
				case 1:
					p.SetState(7535)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7534)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7537)

						var _x = p.Id()

						localctx.(*Backup_logContext).logical_device_name = _x
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(7540)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1028, p.GetParserRuleContext())
			}

			p.SetState(7544)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1034, p.GetParserRuleContext()) == 2 {
		p.SetState(7561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserMIRROR {
			{
				p.SetState(7546)
				p.Match(TSqlParserMIRROR)
			}
			{
				p.SetState(7547)
				p.Match(TSqlParserTO)
			}
			p.SetState(7557)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = _la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL || _la == TSqlParserCOMMA {
				p.SetState(7549)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7548)
						p.Match(TSqlParserCOMMA)
					}

				}
				p.SetState(7551)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserDISK || _la == TSqlParserTAPE || _la == TSqlParserURL) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(7552)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(7555)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserSTRING:
					{
						p.SetState(7553)
						p.Match(TSqlParserSTRING)
					}

				case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
					{
						p.SetState(7554)
						p.Id()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

				p.SetState(7559)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

			p.SetState(7563)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(7740)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1073, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7567)
			p.Match(TSqlParserWITH)
		}
		p.SetState(7737)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1072, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(7735)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1071, p.GetParserRuleContext()) {
				case 1:
					p.SetState(7569)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7568)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7571)
						p.Match(TSqlParserDIFFERENTIAL)
					}

				case 2:
					p.SetState(7573)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7572)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7575)
						p.Match(TSqlParserCOPY_ONLY)
					}

				case 3:
					p.SetState(7577)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7576)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7579)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCOMPRESSION || _la == TSqlParserNO_COMPRESSION) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 4:
					p.SetState(7581)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7580)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7583)
						p.Match(TSqlParserDESCRIPTION)
					}
					{
						p.SetState(7584)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7587)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserSTRING:
						{
							p.SetState(7585)
							p.Match(TSqlParserSTRING)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7586)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 5:
					p.SetState(7590)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7589)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7592)
						p.Match(TSqlParserNAME)
					}
					{
						p.SetState(7593)
						p.Match(TSqlParserEQUAL)
					}
					{
						p.SetState(7594)

						var _x = p.Id()

						localctx.(*Backup_logContext).backup_set_name = _x
					}

				case 6:
					p.SetState(7596)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7595)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7598)
						p.Match(TSqlParserCREDENTIAL)
					}

				case 7:
					p.SetState(7600)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7599)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7602)
						p.Match(TSqlParserFILE_SNAPSHOT)
					}

				case 8:
					p.SetState(7604)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7603)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7618)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserEXPIREDATE:
						{
							p.SetState(7606)
							p.Match(TSqlParserEXPIREDATE)
						}
						{
							p.SetState(7607)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(7610)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserSTRING:
							{
								p.SetState(7608)
								p.Match(TSqlParserSTRING)
							}

						case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
							{
								p.SetState(7609)
								p.Id()
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					case TSqlParserRETAINDAYS:
						{
							p.SetState(7612)
							p.Match(TSqlParserRETAINDAYS)
						}
						{
							p.SetState(7613)
							p.Match(TSqlParserEQUAL)
						}
						p.SetState(7616)
						p.GetErrorHandler().Sync(p)

						switch p.GetTokenStream().LA(1) {
						case TSqlParserDECIMAL:
							{
								p.SetState(7614)
								p.Match(TSqlParserDECIMAL)
							}

						case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
							{
								p.SetState(7615)
								p.Id()
							}

						default:
							panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 9:
					p.SetState(7621)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7620)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7623)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserINIT || _la == TSqlParserNOINIT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 10:
					p.SetState(7625)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7624)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7627)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOSKIP || _la == TSqlParserSKIP_KEYWORD) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 11:
					p.SetState(7629)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7628)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7631)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOFORMAT || _la == TSqlParserFORMAT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 12:
					p.SetState(7633)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7632)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7635)
						p.Match(TSqlParserMEDIADESCRIPTION)
					}
					{
						p.SetState(7636)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7639)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserSTRING:
						{
							p.SetState(7637)
							p.Match(TSqlParserSTRING)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7638)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 13:
					p.SetState(7642)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7641)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7644)
						p.Match(TSqlParserMEDIANAME)
					}
					{
						p.SetState(7645)
						p.Match(TSqlParserEQUAL)
					}

					{
						p.SetState(7646)

						var _m = p.Match(TSqlParserSTRING)

						localctx.(*Backup_logContext).medianame = _m
					}

				case 14:
					p.SetState(7648)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7647)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7650)
						p.Match(TSqlParserBLOCKSIZE)
					}
					{
						p.SetState(7651)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7654)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7652)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7653)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 15:
					p.SetState(7657)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7656)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7659)
						p.Match(TSqlParserBUFFERCOUNT)
					}
					{
						p.SetState(7660)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7663)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7661)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7662)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 16:
					p.SetState(7666)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7665)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7668)
						p.Match(TSqlParserMAXTRANSFER)
					}
					{
						p.SetState(7669)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7672)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserDECIMAL:
						{
							p.SetState(7670)
							p.Match(TSqlParserDECIMAL)
						}

					case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
						{
							p.SetState(7671)
							p.Id()
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 17:
					p.SetState(7675)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7674)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7677)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNO_CHECKSUM || _la == TSqlParserCHECKSUM) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 18:
					p.SetState(7679)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7678)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7681)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserCONTINUE_AFTER_ERROR || _la == TSqlParserSTOP_ON_ERROR) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 19:
					p.SetState(7683)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7682)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7685)
						p.Match(TSqlParserRESTART)
					}

				case 20:
					p.SetState(7687)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7686)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7689)
						p.Match(TSqlParserSTATS)
					}
					p.SetState(7692)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserEQUAL {
						{
							p.SetState(7690)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(7691)

							var _m = p.Match(TSqlParserDECIMAL)

							localctx.(*Backup_logContext).stats_percent = _m
						}

					}

				case 21:
					p.SetState(7695)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7694)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7697)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserNOREWIND || _la == TSqlParserREWIND) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 22:
					p.SetState(7699)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7698)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7701)
					_la = p.GetTokenStream().LA(1)

					if !(_la == TSqlParserLOAD || _la == TSqlParserNOUNLOAD) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				case 23:
					p.SetState(7703)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7702)
							p.Match(TSqlParserCOMMA)
						}

					}
					p.SetState(7709)
					p.GetErrorHandler().Sync(p)

					switch p.GetTokenStream().LA(1) {
					case TSqlParserNORECOVERY:
						{
							p.SetState(7705)
							p.Match(TSqlParserNORECOVERY)
						}

					case TSqlParserSTANDBY:
						{
							p.SetState(7706)
							p.Match(TSqlParserSTANDBY)
						}
						{
							p.SetState(7707)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(7708)

							var _m = p.Match(TSqlParserSTRING)

							localctx.(*Backup_logContext).undo_file_name = _m
						}

					default:
						panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
					}

				case 24:
					p.SetState(7712)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7711)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7714)
						p.Match(TSqlParserNO_TRUNCATE)
					}

				case 25:
					p.SetState(7716)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == TSqlParserCOMMA {
						{
							p.SetState(7715)
							p.Match(TSqlParserCOMMA)
						}

					}
					{
						p.SetState(7718)
						p.Match(TSqlParserENCRYPTION)
					}
					{
						p.SetState(7719)
						p.Match(TSqlParserLR_BRACKET)
					}
					{
						p.SetState(7720)
						p.Match(TSqlParserALGORITHM)
					}
					{
						p.SetState(7721)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7722)
					_la = p.GetTokenStream().LA(1)

					if !((((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(TSqlParserAES_128-388))|(1<<(TSqlParserAES_192-388))|(1<<(TSqlParserAES_256-388)))) != 0) || _la == TSqlParserTRIPLE_DES_3KEY) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
					{
						p.SetState(7723)
						p.Match(TSqlParserCOMMA)
					}
					{
						p.SetState(7724)
						p.Match(TSqlParserSERVER)
					}
					{
						p.SetState(7725)
						p.Match(TSqlParserCERTIFICATE)
					}
					{
						p.SetState(7726)
						p.Match(TSqlParserEQUAL)
					}
					p.SetState(7733)
					p.GetErrorHandler().Sync(p)
					switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1070, p.GetParserRuleContext()) {
					case 1:
						{
							p.SetState(7727)

							var _x = p.Id()

							localctx.(*Backup_logContext).encryptor_name = _x
						}

					case 2:
						{
							p.SetState(7728)
							p.Match(TSqlParserSERVER)
						}
						{
							p.SetState(7729)
							p.Match(TSqlParserASYMMETRIC)
						}
						{
							p.SetState(7730)
							p.Match(TSqlParserKEY)
						}
						{
							p.SetState(7731)
							p.Match(TSqlParserEQUAL)
						}
						{
							p.SetState(7732)

							var _x = p.Id()

							localctx.(*Backup_logContext).encryptor_name = _x
						}

					}

				}

			}
			p.SetState(7739)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1072, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IBackup_certificateContext is an interface to support dynamic dispatch.
type IBackup_certificateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCert_file returns the cert_file token.
	GetCert_file() antlr.Token

	// GetPrivate_key_file returns the private_key_file token.
	GetPrivate_key_file() antlr.Token

	// GetEncryption_password returns the encryption_password token.
	GetEncryption_password() antlr.Token

	// GetDecryption_pasword returns the decryption_pasword token.
	GetDecryption_pasword() antlr.Token

	// SetCert_file sets the cert_file token.
	SetCert_file(antlr.Token)

	// SetPrivate_key_file sets the private_key_file token.
	SetPrivate_key_file(antlr.Token)

	// SetEncryption_password sets the encryption_password token.
	SetEncryption_password(antlr.Token)

	// SetDecryption_pasword sets the decryption_pasword token.
	SetDecryption_pasword(antlr.Token)

	// GetCertname returns the certname rule contexts.
	GetCertname() IIdContext

	// SetCertname sets the certname rule contexts.
	SetCertname(IIdContext)

	// IsBackup_certificateContext differentiates from other interfaces.
	IsBackup_certificateContext()
}

type Backup_certificateContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	certname            IIdContext
	cert_file           antlr.Token
	private_key_file    antlr.Token
	encryption_password antlr.Token
	decryption_pasword  antlr.Token
}

func NewEmptyBackup_certificateContext() *Backup_certificateContext {
	var p = new(Backup_certificateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_certificate
	return p
}

func (*Backup_certificateContext) IsBackup_certificateContext() {}

func NewBackup_certificateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_certificateContext {
	var p = new(Backup_certificateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_certificate

	return p
}

func (s *Backup_certificateContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_certificateContext) GetCert_file() antlr.Token { return s.cert_file }

func (s *Backup_certificateContext) GetPrivate_key_file() antlr.Token { return s.private_key_file }

func (s *Backup_certificateContext) GetEncryption_password() antlr.Token { return s.encryption_password }

func (s *Backup_certificateContext) GetDecryption_pasword() antlr.Token { return s.decryption_pasword }

func (s *Backup_certificateContext) SetCert_file(v antlr.Token) { s.cert_file = v }

func (s *Backup_certificateContext) SetPrivate_key_file(v antlr.Token) { s.private_key_file = v }

func (s *Backup_certificateContext) SetEncryption_password(v antlr.Token) { s.encryption_password = v }

func (s *Backup_certificateContext) SetDecryption_pasword(v antlr.Token) { s.decryption_pasword = v }

func (s *Backup_certificateContext) GetCertname() IIdContext { return s.certname }

func (s *Backup_certificateContext) SetCertname(v IIdContext) { s.certname = v }

func (s *Backup_certificateContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP, 0)
}

func (s *Backup_certificateContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Backup_certificateContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Backup_certificateContext) AllFILE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFILE)
}

func (s *Backup_certificateContext) FILE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, i)
}

func (s *Backup_certificateContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Backup_certificateContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Backup_certificateContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Backup_certificateContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Backup_certificateContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Backup_certificateContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Backup_certificateContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE, 0)
}

func (s *Backup_certificateContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Backup_certificateContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Backup_certificateContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Backup_certificateContext) AllENCRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTION)
}

func (s *Backup_certificateContext) ENCRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, i)
}

func (s *Backup_certificateContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBY)
}

func (s *Backup_certificateContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, i)
}

func (s *Backup_certificateContext) AllPASSWORD() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPASSWORD)
}

func (s *Backup_certificateContext) PASSWORD(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, i)
}

func (s *Backup_certificateContext) AllDECRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECRYPTION)
}

func (s *Backup_certificateContext) DECRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECRYPTION, i)
}

func (s *Backup_certificateContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Backup_certificateContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Backup_certificateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_certificateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_certificateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_certificate(s)
	}
}

func (s *Backup_certificateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_certificate(s)
	}
}

func (s *Backup_certificateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_certificate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_certificate() (localctx IBackup_certificateContext) {
	localctx = NewBackup_certificateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 612, TSqlParserRULE_backup_certificate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7742)
		p.Match(TSqlParserBACKUP)
	}
	{
		p.SetState(7743)
		p.Match(TSqlParserCERTIFICATE)
	}
	{
		p.SetState(7744)

		var _x = p.Id()

		localctx.(*Backup_certificateContext).certname = _x
	}
	{
		p.SetState(7745)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(7746)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(7747)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7748)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Backup_certificateContext).cert_file = _m
	}
	p.SetState(7780)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1079, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7749)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(7750)
			p.Match(TSqlParserPRIVATE)
		}
		{
			p.SetState(7751)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(7752)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(7775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserFILE || _la == TSqlParserDECRYPTION || _la == TSqlParserENCRYPTION || _la == TSqlParserCOMMA {
			p.SetState(7775)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1077, p.GetParserRuleContext()) {
			case 1:
				p.SetState(7754)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7753)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(7756)
					p.Match(TSqlParserFILE)
				}
				{
					p.SetState(7757)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(7758)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Backup_certificateContext).private_key_file = _m
				}

			case 2:
				p.SetState(7760)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7759)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(7762)
					p.Match(TSqlParserENCRYPTION)
				}
				{
					p.SetState(7763)
					p.Match(TSqlParserBY)
				}
				{
					p.SetState(7764)
					p.Match(TSqlParserPASSWORD)
				}
				{
					p.SetState(7765)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(7766)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Backup_certificateContext).encryption_password = _m
				}

			case 3:
				p.SetState(7768)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(7767)
						p.Match(TSqlParserCOMMA)
					}

				}
				{
					p.SetState(7770)
					p.Match(TSqlParserDECRYPTION)
				}
				{
					p.SetState(7771)
					p.Match(TSqlParserBY)
				}
				{
					p.SetState(7772)
					p.Match(TSqlParserPASSWORD)
				}
				{
					p.SetState(7773)
					p.Match(TSqlParserEQUAL)
				}
				{
					p.SetState(7774)

					var _m = p.Match(TSqlParserSTRING)

					localctx.(*Backup_certificateContext).decryption_pasword = _m
				}

			}

			p.SetState(7777)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7779)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IBackup_master_keyContext is an interface to support dynamic dispatch.
type IBackup_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMaster_key_backup_file returns the master_key_backup_file token.
	GetMaster_key_backup_file() antlr.Token

	// GetEncryption_password returns the encryption_password token.
	GetEncryption_password() antlr.Token

	// SetMaster_key_backup_file sets the master_key_backup_file token.
	SetMaster_key_backup_file(antlr.Token)

	// SetEncryption_password sets the encryption_password token.
	SetEncryption_password(antlr.Token)

	// IsBackup_master_keyContext differentiates from other interfaces.
	IsBackup_master_keyContext()
}

type Backup_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	master_key_backup_file antlr.Token
	encryption_password    antlr.Token
}

func NewEmptyBackup_master_keyContext() *Backup_master_keyContext {
	var p = new(Backup_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_master_key
	return p
}

func (*Backup_master_keyContext) IsBackup_master_keyContext() {}

func NewBackup_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_master_keyContext {
	var p = new(Backup_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_master_key

	return p
}

func (s *Backup_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_master_keyContext) GetMaster_key_backup_file() antlr.Token {
	return s.master_key_backup_file
}

func (s *Backup_master_keyContext) GetEncryption_password() antlr.Token { return s.encryption_password }

func (s *Backup_master_keyContext) SetMaster_key_backup_file(v antlr.Token) {
	s.master_key_backup_file = v
}

func (s *Backup_master_keyContext) SetEncryption_password(v antlr.Token) { s.encryption_password = v }

func (s *Backup_master_keyContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP, 0)
}

func (s *Backup_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Backup_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Backup_master_keyContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Backup_master_keyContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Backup_master_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Backup_master_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Backup_master_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Backup_master_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Backup_master_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Backup_master_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Backup_master_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Backup_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_master_key(s)
	}
}

func (s *Backup_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_master_key(s)
	}
}

func (s *Backup_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_master_key() (localctx IBackup_master_keyContext) {
	localctx = NewBackup_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 614, TSqlParserRULE_backup_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7782)
		p.Match(TSqlParserBACKUP)
	}
	{
		p.SetState(7783)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(7784)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(7785)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(7786)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(7787)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7788)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Backup_master_keyContext).master_key_backup_file = _m
	}
	{
		p.SetState(7789)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(7790)
		p.Match(TSqlParserBY)
	}
	{
		p.SetState(7791)
		p.Match(TSqlParserPASSWORD)
	}
	{
		p.SetState(7792)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7793)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Backup_master_keyContext).encryption_password = _m
	}

	return localctx
}

// IBackup_service_master_keyContext is an interface to support dynamic dispatch.
type IBackup_service_master_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetService_master_key_backup_file returns the service_master_key_backup_file token.
	GetService_master_key_backup_file() antlr.Token

	// GetEncryption_password returns the encryption_password token.
	GetEncryption_password() antlr.Token

	// SetService_master_key_backup_file sets the service_master_key_backup_file token.
	SetService_master_key_backup_file(antlr.Token)

	// SetEncryption_password sets the encryption_password token.
	SetEncryption_password(antlr.Token)

	// IsBackup_service_master_keyContext differentiates from other interfaces.
	IsBackup_service_master_keyContext()
}

type Backup_service_master_keyContext struct {
	*antlr.BaseParserRuleContext
	parser                         antlr.Parser
	service_master_key_backup_file antlr.Token
	encryption_password            antlr.Token
}

func NewEmptyBackup_service_master_keyContext() *Backup_service_master_keyContext {
	var p = new(Backup_service_master_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_backup_service_master_key
	return p
}

func (*Backup_service_master_keyContext) IsBackup_service_master_keyContext() {}

func NewBackup_service_master_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Backup_service_master_keyContext {
	var p = new(Backup_service_master_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_backup_service_master_key

	return p
}

func (s *Backup_service_master_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Backup_service_master_keyContext) GetService_master_key_backup_file() antlr.Token {
	return s.service_master_key_backup_file
}

func (s *Backup_service_master_keyContext) GetEncryption_password() antlr.Token {
	return s.encryption_password
}

func (s *Backup_service_master_keyContext) SetService_master_key_backup_file(v antlr.Token) {
	s.service_master_key_backup_file = v
}

func (s *Backup_service_master_keyContext) SetEncryption_password(v antlr.Token) {
	s.encryption_password = v
}

func (s *Backup_service_master_keyContext) BACKUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserBACKUP, 0)
}

func (s *Backup_service_master_keyContext) SERVICE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, 0)
}

func (s *Backup_service_master_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Backup_service_master_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Backup_service_master_keyContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Backup_service_master_keyContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Backup_service_master_keyContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *Backup_service_master_keyContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *Backup_service_master_keyContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Backup_service_master_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Backup_service_master_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Backup_service_master_keyContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Backup_service_master_keyContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Backup_service_master_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Backup_service_master_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Backup_service_master_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBackup_service_master_key(s)
	}
}

func (s *Backup_service_master_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBackup_service_master_key(s)
	}
}

func (s *Backup_service_master_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBackup_service_master_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Backup_service_master_key() (localctx IBackup_service_master_keyContext) {
	localctx = NewBackup_service_master_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 616, TSqlParserRULE_backup_service_master_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7795)
		p.Match(TSqlParserBACKUP)
	}
	{
		p.SetState(7796)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(7797)
		p.Match(TSqlParserMASTER)
	}
	{
		p.SetState(7798)
		p.Match(TSqlParserKEY)
	}
	{
		p.SetState(7799)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(7800)
		p.Match(TSqlParserFILE)
	}
	{
		p.SetState(7801)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7802)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Backup_service_master_keyContext).service_master_key_backup_file = _m
	}
	{
		p.SetState(7803)
		p.Match(TSqlParserENCRYPTION)
	}
	{
		p.SetState(7804)
		p.Match(TSqlParserBY)
	}
	{
		p.SetState(7805)
		p.Match(TSqlParserPASSWORD)
	}
	{
		p.SetState(7806)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7807)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Backup_service_master_keyContext).encryption_password = _m
	}

	return localctx
}

// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturn_status returns the return_status token.
	GetReturn_status() antlr.Token

	// SetReturn_status sets the return_status token.
	SetReturn_status(antlr.Token)

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	return_status antlr.Token
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) GetReturn_status() antlr.Token { return s.return_status }

func (s *Execute_statementContext) SetReturn_status(v antlr.Token) { s.return_status = v }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTE, 0)
}

func (s *Execute_statementContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Execute_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Execute_statementContext) AllExecute_statement_arg() []IExecute_statement_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem())
	var tst = make([]IExecute_statement_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_statement_argContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_statement_arg(i int) IExecute_statement_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statement_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_statement_argContext)
}

func (s *Execute_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Execute_statementContext) AllExecute_var_string() []IExecute_var_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem())
	var tst = make([]IExecute_var_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_var_stringContext)
		}
	}

	return tst
}

func (s *Execute_statementContext) Execute_var_string(i int) IExecute_var_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_var_stringContext)
}

func (s *Execute_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Execute_statementContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Execute_statementContext) USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSER, 0)
}

func (s *Execute_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}

func (s *Execute_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExecute_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Execute_statement() (localctx IExecute_statementContext) {
	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 618, TSqlParserRULE_execute_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7853)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1089, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7809)
			p.Match(TSqlParserEXECUTE)
		}
		p.SetState(7812)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1080, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7810)

				var _m = p.Match(TSqlParserLOCAL_ID)

				localctx.(*Execute_statementContext).return_status = _m
			}
			{
				p.SetState(7811)
				p.Match(TSqlParserEQUAL)
			}

		}
		p.SetState(7816)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1081, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(7814)
				p.Func_proc_name()
			}

		case 2:
			{
				p.SetState(7815)
				p.expression(0)
			}

		}
		p.SetState(7826)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1083, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7818)
				p.Execute_statement_arg()
			}
			p.SetState(7823)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserCOMMA {
				{
					p.SetState(7819)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(7820)
					p.Execute_statement_arg()
				}

				p.SetState(7825)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(7829)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1084, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7828)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7831)
			p.Match(TSqlParserEXECUTE)
		}
		{
			p.SetState(7832)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(7833)
			p.Execute_var_string()
		}
		p.SetState(7838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserPLUS {
			{
				p.SetState(7834)
				p.Match(TSqlParserPLUS)
			}
			{
				p.SetState(7835)
				p.Execute_var_string()
			}

			p.SetState(7840)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(7841)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(7848)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1087, p.GetParserRuleContext()) == 1 {
			p.SetState(7843)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserAS {
				{
					p.SetState(7842)
					p.Match(TSqlParserAS)
				}

			}
			p.SetState(7845)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserUSER || _la == TSqlParserLOGIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(7846)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(7847)
				p.Match(TSqlParserSTRING)
			}

		}
		p.SetState(7851)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1088, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7850)
				p.Match(TSqlParserSEMI)
			}

		}

	}

	return localctx
}

// IExecute_statement_argContext is an interface to support dynamic dispatch.
type IExecute_statement_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetParameter returns the parameter token.
	GetParameter() antlr.Token

	// SetParameter sets the parameter token.
	SetParameter(antlr.Token)

	// IsExecute_statement_argContext differentiates from other interfaces.
	IsExecute_statement_argContext()
}

type Execute_statement_argContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	parameter antlr.Token
}

func NewEmptyExecute_statement_argContext() *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_execute_statement_arg
	return p
}

func (*Execute_statement_argContext) IsExecute_statement_argContext() {}

func NewExecute_statement_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statement_argContext {
	var p = new(Execute_statement_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_execute_statement_arg

	return p
}

func (s *Execute_statement_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statement_argContext) GetParameter() antlr.Token { return s.parameter }

func (s *Execute_statement_argContext) SetParameter(v antlr.Token) { s.parameter = v }

func (s *Execute_statement_argContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Execute_statement_argContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Execute_statement_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Execute_statement_argContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Execute_statement_argContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Execute_statement_argContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUTPUT, 0)
}

func (s *Execute_statement_argContext) OUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUT, 0)
}

func (s *Execute_statement_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statement_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statement_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExecute_statement_arg(s)
	}
}

func (s *Execute_statement_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExecute_statement_arg(s)
	}
}

func (s *Execute_statement_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExecute_statement_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Execute_statement_arg() (localctx IExecute_statement_argContext) {
	localctx = NewExecute_statement_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 620, TSqlParserRULE_execute_statement_arg)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7857)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1090, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7855)

			var _m = p.Match(TSqlParserLOCAL_ID)

			localctx.(*Execute_statement_argContext).parameter = _m
		}
		{
			p.SetState(7856)
			p.Match(TSqlParserEQUAL)
		}

	}
	p.SetState(7868)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserID, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
		p.SetState(7861)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
			{
				p.SetState(7859)
				p.Constant_LOCAL_ID()
			}

		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(7860)
				p.Id()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(7864)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1092, p.GetParserRuleContext()) == 1 {
			p.SetState(7863)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOUT || _la == TSqlParserOUTPUT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case TSqlParserDEFAULT:
		{
			p.SetState(7866)
			p.Match(TSqlParserDEFAULT)
		}

	case TSqlParserNULL:
		{
			p.SetState(7867)
			p.Match(TSqlParserNULL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExecute_var_stringContext is an interface to support dynamic dispatch.
type IExecute_var_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_var_stringContext differentiates from other interfaces.
	IsExecute_var_stringContext()
}

type Execute_var_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_var_stringContext() *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_execute_var_string
	return p
}

func (*Execute_var_stringContext) IsExecute_var_stringContext() {}

func NewExecute_var_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_var_stringContext {
	var p = new(Execute_var_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_execute_var_string

	return p
}

func (s *Execute_var_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_var_stringContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Execute_var_stringContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Execute_var_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_var_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_var_stringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExecute_var_string(s)
	}
}

func (s *Execute_var_stringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExecute_var_string(s)
	}
}

func (s *Execute_var_stringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExecute_var_string(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Execute_var_string() (localctx IExecute_var_stringContext) {
	localctx = NewExecute_var_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 622, TSqlParserRULE_execute_var_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7870)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ISecurity_statementContext is an interface to support dynamic dispatch.
type ISecurity_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOn_id returns the on_id rule contexts.
	GetOn_id() ITable_nameContext

	// Get_id returns the _id rule contexts.
	Get_id() IIdContext

	// GetAs_principal returns the as_principal rule contexts.
	GetAs_principal() IIdContext

	// SetOn_id sets the on_id rule contexts.
	SetOn_id(ITable_nameContext)

	// Set_id sets the _id rule contexts.
	Set_id(IIdContext)

	// SetAs_principal sets the as_principal rule contexts.
	SetAs_principal(IIdContext)

	// GetTo_principal returns the to_principal rule context list.
	GetTo_principal() []IIdContext

	// SetTo_principal sets the to_principal rule context list.
	SetTo_principal([]IIdContext)

	// IsSecurity_statementContext differentiates from other interfaces.
	IsSecurity_statementContext()
}

type Security_statementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	on_id        ITable_nameContext
	_id          IIdContext
	to_principal []IIdContext
	as_principal IIdContext
}

func NewEmptySecurity_statementContext() *Security_statementContext {
	var p = new(Security_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_security_statement
	return p
}

func (*Security_statementContext) IsSecurity_statementContext() {}

func NewSecurity_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Security_statementContext {
	var p = new(Security_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_security_statement

	return p
}

func (s *Security_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Security_statementContext) GetOn_id() ITable_nameContext { return s.on_id }

func (s *Security_statementContext) Get_id() IIdContext { return s._id }

func (s *Security_statementContext) GetAs_principal() IIdContext { return s.as_principal }

func (s *Security_statementContext) SetOn_id(v ITable_nameContext) { s.on_id = v }

func (s *Security_statementContext) Set_id(v IIdContext) { s._id = v }

func (s *Security_statementContext) SetAs_principal(v IIdContext) { s.as_principal = v }

func (s *Security_statementContext) GetTo_principal() []IIdContext { return s.to_principal }

func (s *Security_statementContext) SetTo_principal(v []IIdContext) { s.to_principal = v }

func (s *Security_statementContext) Execute_clause() IExecute_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_clauseContext)
}

func (s *Security_statementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserGRANT)
}

func (s *Security_statementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserGRANT, i)
}

func (s *Security_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Security_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Security_statementContext) Grant_permission() IGrant_permissionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_permissionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_permissionContext)
}

func (s *Security_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Security_statementContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Security_statementContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Security_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Security_statementContext) OPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTION, 0)
}

func (s *Security_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Security_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Security_statementContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVILEGES, 0)
}

func (s *Security_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Security_statementContext) REVERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserREVERT, 0)
}

func (s *Security_statementContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOOKIE, 0)
}

func (s *Security_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Security_statementContext) Open_key() IOpen_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_keyContext)
}

func (s *Security_statementContext) Close_key() IClose_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_keyContext)
}

func (s *Security_statementContext) Create_key() ICreate_keyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_keyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_keyContext)
}

func (s *Security_statementContext) Create_certificate() ICreate_certificateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_certificateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_certificateContext)
}

func (s *Security_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Security_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Security_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSecurity_statement(s)
	}
}

func (s *Security_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSecurity_statement(s)
	}
}

func (s *Security_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSecurity_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Security_statement() (localctx ISecurity_statementContext) {
	localctx = NewSecurity_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 624, TSqlParserRULE_security_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7931)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1105, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7872)
			p.Execute_clause()
		}
		p.SetState(7874)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1094, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7873)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(7876)
			p.Match(TSqlParserGRANT)
		}
		p.SetState(7888)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserALL:
			{
				p.SetState(7877)
				p.Match(TSqlParserALL)
			}
			p.SetState(7879)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserPRIVILEGES {
				{
					p.SetState(7878)
					p.Match(TSqlParserPRIVILEGES)
				}

			}

		case TSqlParserALTER, TSqlParserCREATE, TSqlParserEXECUTE, TSqlParserINSERT, TSqlParserREFERENCES, TSqlParserSELECT, TSqlParserVIEW, TSqlParserCONTROL, TSqlParserIMPERSONATE, TSqlParserSHOWPLAN, TSqlParserTAKE:
			{
				p.SetState(7881)
				p.Grant_permission()
			}
			p.SetState(7886)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserLR_BRACKET {
				{
					p.SetState(7882)
					p.Match(TSqlParserLR_BRACKET)
				}
				{
					p.SetState(7883)
					p.Column_name_list()
				}
				{
					p.SetState(7884)
					p.Match(TSqlParserRR_BRACKET)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(7892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserON {
			{
				p.SetState(7890)
				p.Match(TSqlParserON)
			}
			{
				p.SetState(7891)

				var _x = p.Table_name()

				localctx.(*Security_statementContext).on_id = _x
			}

		}
		{
			p.SetState(7894)
			p.Match(TSqlParserTO)
		}

		{
			p.SetState(7895)

			var _x = p.Id()

			localctx.(*Security_statementContext)._id = _x
		}
		localctx.(*Security_statementContext).to_principal = append(localctx.(*Security_statementContext).to_principal, localctx.(*Security_statementContext)._id)

		p.SetState(7900)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(7896)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(7897)

				var _x = p.Id()

				localctx.(*Security_statementContext)._id = _x
			}
			localctx.(*Security_statementContext).to_principal = append(localctx.(*Security_statementContext).to_principal, localctx.(*Security_statementContext)._id)

			p.SetState(7902)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(7906)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1100, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7903)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(7904)
				p.Match(TSqlParserGRANT)
			}
			{
				p.SetState(7905)
				p.Match(TSqlParserOPTION)
			}

		}
		p.SetState(7910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAS {
			{
				p.SetState(7908)
				p.Match(TSqlParserAS)
			}
			{
				p.SetState(7909)

				var _x = p.Id()

				localctx.(*Security_statementContext).as_principal = _x
			}

		}
		p.SetState(7913)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1102, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7912)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(7915)
			p.Match(TSqlParserREVERT)
		}
		p.SetState(7922)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1103, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7916)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(7917)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(7918)
				p.Match(TSqlParserCOOKIE)
			}
			{
				p.SetState(7919)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(7920)
				p.Match(TSqlParserLOCAL_ID)
			}
			{
				p.SetState(7921)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(7925)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1104, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7924)
				p.Match(TSqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(7927)
			p.Open_key()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(7928)
			p.Close_key()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(7929)
			p.Create_key()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(7930)
			p.Create_certificate()
		}

	}

	return localctx
}

// ICreate_certificateContext is an interface to support dynamic dispatch.
type ICreate_certificateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// IsCreate_certificateContext differentiates from other interfaces.
	IsCreate_certificateContext()
}

type Create_certificateContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	certificate_name IIdContext
	user_name        IIdContext
}

func NewEmptyCreate_certificateContext() *Create_certificateContext {
	var p = new(Create_certificateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_certificate
	return p
}

func (*Create_certificateContext) IsCreate_certificateContext() {}

func NewCreate_certificateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_certificateContext {
	var p = new(Create_certificateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_certificate

	return p
}

func (s *Create_certificateContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_certificateContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Create_certificateContext) GetUser_name() IIdContext { return s.user_name }

func (s *Create_certificateContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Create_certificateContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Create_certificateContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_certificateContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Create_certificateContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_certificateContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_certificateContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_certificateContext) Existing_keys() IExisting_keysContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExisting_keysContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExisting_keysContext)
}

func (s *Create_certificateContext) Generate_new_keys() IGenerate_new_keysContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenerate_new_keysContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenerate_new_keysContext)
}

func (s *Create_certificateContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_certificateContext) ACTIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTIVE, 0)
}

func (s *Create_certificateContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Create_certificateContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Create_certificateContext) DIALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserDIALOG, 0)
}

func (s *Create_certificateContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_certificateContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_certificateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_certificateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_certificateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_certificate(s)
	}
}

func (s *Create_certificateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_certificate(s)
	}
}

func (s *Create_certificateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_certificate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_certificate() (localctx ICreate_certificateContext) {
	localctx = NewCreate_certificateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 626, TSqlParserRULE_create_certificate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(7933)
		p.Match(TSqlParserCREATE)
	}
	{
		p.SetState(7934)
		p.Match(TSqlParserCERTIFICATE)
	}
	{
		p.SetState(7935)

		var _x = p.Id()

		localctx.(*Create_certificateContext).certificate_name = _x
	}
	p.SetState(7938)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAUTHORIZATION {
		{
			p.SetState(7936)
			p.Match(TSqlParserAUTHORIZATION)
		}
		{
			p.SetState(7937)

			var _x = p.Id()

			localctx.(*Create_certificateContext).user_name = _x
		}

	}
	p.SetState(7943)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFROM:
		{
			p.SetState(7940)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(7941)
			p.Existing_keys()
		}

	case TSqlParserWITH, TSqlParserENCRYPTION:
		{
			p.SetState(7942)
			p.Generate_new_keys()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(7951)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1108, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(7945)
			p.Match(TSqlParserACTIVE)
		}
		{
			p.SetState(7946)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(7947)
			p.Match(TSqlParserBEGIN)
		}
		{
			p.SetState(7948)
			p.Match(TSqlParserDIALOG)
		}
		{
			p.SetState(7949)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(7950)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IExisting_keysContext is an interface to support dynamic dispatch.
type IExisting_keysContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPath_to_file returns the path_to_file token.
	GetPath_to_file() antlr.Token

	// SetPath_to_file sets the path_to_file token.
	SetPath_to_file(antlr.Token)

	// GetAssembly_name returns the assembly_name rule contexts.
	GetAssembly_name() IIdContext

	// SetAssembly_name sets the assembly_name rule contexts.
	SetAssembly_name(IIdContext)

	// IsExisting_keysContext differentiates from other interfaces.
	IsExisting_keysContext()
}

type Existing_keysContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	assembly_name IIdContext
	path_to_file  antlr.Token
}

func NewEmptyExisting_keysContext() *Existing_keysContext {
	var p = new(Existing_keysContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_existing_keys
	return p
}

func (*Existing_keysContext) IsExisting_keysContext() {}

func NewExisting_keysContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Existing_keysContext {
	var p = new(Existing_keysContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_existing_keys

	return p
}

func (s *Existing_keysContext) GetParser() antlr.Parser { return s.parser }

func (s *Existing_keysContext) GetPath_to_file() antlr.Token { return s.path_to_file }

func (s *Existing_keysContext) SetPath_to_file(v antlr.Token) { s.path_to_file = v }

func (s *Existing_keysContext) GetAssembly_name() IIdContext { return s.assembly_name }

func (s *Existing_keysContext) SetAssembly_name(v IIdContext) { s.assembly_name = v }

func (s *Existing_keysContext) ASSEMBLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserASSEMBLY, 0)
}

func (s *Existing_keysContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Existing_keysContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Existing_keysContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Existing_keysContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Existing_keysContext) EXECUTABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTABLE, 0)
}

func (s *Existing_keysContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Existing_keysContext) PRIVATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVATE, 0)
}

func (s *Existing_keysContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Existing_keysContext) Private_key_options() IPrivate_key_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivate_key_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivate_key_optionsContext)
}

func (s *Existing_keysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Existing_keysContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Existing_keysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExisting_keys(s)
	}
}

func (s *Existing_keysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExisting_keys(s)
	}
}

func (s *Existing_keysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExisting_keys(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Existing_keys() (localctx IExisting_keysContext) {
	localctx = NewExisting_keysContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 628, TSqlParserRULE_existing_keys)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(7970)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserASSEMBLY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(7953)
			p.Match(TSqlParserASSEMBLY)
		}
		{
			p.SetState(7954)

			var _x = p.Id()

			localctx.(*Existing_keysContext).assembly_name = _x
		}

	case TSqlParserFILE, TSqlParserEXECUTABLE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(7956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserEXECUTABLE {
			{
				p.SetState(7955)
				p.Match(TSqlParserEXECUTABLE)
			}

		}
		{
			p.SetState(7958)
			p.Match(TSqlParserFILE)
		}
		{
			p.SetState(7959)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(7960)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Existing_keysContext).path_to_file = _m
		}
		p.SetState(7968)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1110, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(7961)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(7962)
				p.Match(TSqlParserPRIVATE)
			}
			{
				p.SetState(7963)
				p.Match(TSqlParserKEY)
			}
			{
				p.SetState(7964)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(7965)
				p.Private_key_options()
			}
			{
				p.SetState(7966)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrivate_key_optionsContext is an interface to support dynamic dispatch.
type IPrivate_key_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPath returns the path token.
	GetPath() antlr.Token

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPath sets the path token.
	SetPath(antlr.Token)

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// IsPrivate_key_optionsContext differentiates from other interfaces.
	IsPrivate_key_optionsContext()
}

type Private_key_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	path     antlr.Token
	password antlr.Token
}

func NewEmptyPrivate_key_optionsContext() *Private_key_optionsContext {
	var p = new(Private_key_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_private_key_options
	return p
}

func (*Private_key_optionsContext) IsPrivate_key_optionsContext() {}

func NewPrivate_key_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Private_key_optionsContext {
	var p = new(Private_key_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_private_key_options

	return p
}

func (s *Private_key_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Private_key_optionsContext) GetPath() antlr.Token { return s.path }

func (s *Private_key_optionsContext) GetPassword() antlr.Token { return s.password }

func (s *Private_key_optionsContext) SetPath(v antlr.Token) { s.path = v }

func (s *Private_key_optionsContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Private_key_optionsContext) FILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILE, 0)
}

func (s *Private_key_optionsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *Private_key_optionsContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Private_key_optionsContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Private_key_optionsContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Private_key_optionsContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Private_key_optionsContext) DECRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECRYPTION, 0)
}

func (s *Private_key_optionsContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Private_key_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Private_key_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Private_key_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPrivate_key_options(s)
	}
}

func (s *Private_key_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPrivate_key_options(s)
	}
}

func (s *Private_key_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPrivate_key_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Private_key_options() (localctx IPrivate_key_optionsContext) {
	localctx = NewPrivate_key_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 630, TSqlParserRULE_private_key_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7972)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserFILE || _la == TSqlParserBINARY) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(7973)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7974)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Private_key_optionsContext).path = _m
	}
	p.SetState(7981)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(7975)
			p.Match(TSqlParserCOMMA)
		}
		p.SetState(7976)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDECRYPTION || _la == TSqlParserENCRYPTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(7977)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(7978)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(7979)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(7980)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Private_key_optionsContext).password = _m
		}

	}

	return localctx
}

// IGenerate_new_keysContext is an interface to support dynamic dispatch.
type IGenerate_new_keysContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// GetCertificate_subject_name returns the certificate_subject_name token.
	GetCertificate_subject_name() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// SetCertificate_subject_name sets the certificate_subject_name token.
	SetCertificate_subject_name(antlr.Token)

	// IsGenerate_new_keysContext differentiates from other interfaces.
	IsGenerate_new_keysContext()
}

type Generate_new_keysContext struct {
	*antlr.BaseParserRuleContext
	parser                   antlr.Parser
	password                 antlr.Token
	certificate_subject_name antlr.Token
}

func NewEmptyGenerate_new_keysContext() *Generate_new_keysContext {
	var p = new(Generate_new_keysContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_generate_new_keys
	return p
}

func (*Generate_new_keysContext) IsGenerate_new_keysContext() {}

func NewGenerate_new_keysContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Generate_new_keysContext {
	var p = new(Generate_new_keysContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_generate_new_keys

	return p
}

func (s *Generate_new_keysContext) GetParser() antlr.Parser { return s.parser }

func (s *Generate_new_keysContext) GetPassword() antlr.Token { return s.password }

func (s *Generate_new_keysContext) GetCertificate_subject_name() antlr.Token {
	return s.certificate_subject_name
}

func (s *Generate_new_keysContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Generate_new_keysContext) SetCertificate_subject_name(v antlr.Token) {
	s.certificate_subject_name = v
}

func (s *Generate_new_keysContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Generate_new_keysContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUBJECT, 0)
}

func (s *Generate_new_keysContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Generate_new_keysContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Generate_new_keysContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Generate_new_keysContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Generate_new_keysContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Generate_new_keysContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Generate_new_keysContext) AllDate_options() []IDate_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDate_optionsContext)(nil)).Elem())
	var tst = make([]IDate_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDate_optionsContext)
		}
	}

	return tst
}

func (s *Generate_new_keysContext) Date_options(i int) IDate_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDate_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDate_optionsContext)
}

func (s *Generate_new_keysContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Generate_new_keysContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Generate_new_keysContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGenerate_new_keys(s)
	}
}

func (s *Generate_new_keysContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGenerate_new_keys(s)
	}
}

func (s *Generate_new_keysContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGenerate_new_keys(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Generate_new_keys() (localctx IGenerate_new_keysContext) {
	localctx = NewGenerate_new_keysContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 632, TSqlParserRULE_generate_new_keys)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(7988)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserENCRYPTION {
		{
			p.SetState(7983)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(7984)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(7985)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(7986)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(7987)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Generate_new_keysContext).password = _m
		}

	}
	{
		p.SetState(7990)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(7991)
		p.Match(TSqlParserSUBJECT)
	}
	{
		p.SetState(7992)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(7993)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Generate_new_keysContext).certificate_subject_name = _m
	}
	p.SetState(7998)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(7994)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(7995)
			p.Date_options()
		}

		p.SetState(8000)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDate_optionsContext is an interface to support dynamic dispatch.
type IDate_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDate_optionsContext differentiates from other interfaces.
	IsDate_optionsContext()
}

type Date_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDate_optionsContext() *Date_optionsContext {
	var p = new(Date_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_date_options
	return p
}

func (*Date_optionsContext) IsDate_optionsContext() {}

func NewDate_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Date_optionsContext {
	var p = new(Date_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_date_options

	return p
}

func (s *Date_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Date_optionsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Date_optionsContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Date_optionsContext) START_DATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTART_DATE, 0)
}

func (s *Date_optionsContext) EXPIRY_DATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPIRY_DATE, 0)
}

func (s *Date_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Date_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Date_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDate_options(s)
	}
}

func (s *Date_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDate_options(s)
	}
}

func (s *Date_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDate_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Date_options() (localctx IDate_optionsContext) {
	localctx = NewDate_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 634, TSqlParserRULE_date_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8001)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserEXPIRY_DATE || _la == TSqlParserSTART_DATE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(8002)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(8003)
		p.Match(TSqlParserSTRING)
	}

	return localctx
}

// IOpen_keyContext is an interface to support dynamic dispatch.
type IOpen_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsOpen_keyContext differentiates from other interfaces.
	IsOpen_keyContext()
}

type Open_keyContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	key_name IIdContext
	password antlr.Token
}

func NewEmptyOpen_keyContext() *Open_keyContext {
	var p = new(Open_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_open_key
	return p
}

func (*Open_keyContext) IsOpen_keyContext() {}

func NewOpen_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_keyContext {
	var p = new(Open_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_open_key

	return p
}

func (s *Open_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_keyContext) GetPassword() antlr.Token { return s.password }

func (s *Open_keyContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Open_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Open_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Open_keyContext) OPEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPEN, 0)
}

func (s *Open_keyContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Open_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Open_keyContext) DECRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECRYPTION, 0)
}

func (s *Open_keyContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Open_keyContext) Decryption_mechanism() IDecryption_mechanismContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecryption_mechanismContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecryption_mechanismContext)
}

func (s *Open_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Open_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Open_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Open_keyContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Open_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOpen_key(s)
	}
}

func (s *Open_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOpen_key(s)
	}
}

func (s *Open_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOpen_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Open_key() (localctx IOpen_keyContext) {
	localctx = NewOpen_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 636, TSqlParserRULE_open_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8021)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8005)
			p.Match(TSqlParserOPEN)
		}
		{
			p.SetState(8006)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8007)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8008)

			var _x = p.Id()

			localctx.(*Open_keyContext).key_name = _x
		}
		{
			p.SetState(8009)
			p.Match(TSqlParserDECRYPTION)
		}
		{
			p.SetState(8010)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(8011)
			p.Decryption_mechanism()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8013)
			p.Match(TSqlParserOPEN)
		}
		{
			p.SetState(8014)
			p.Match(TSqlParserMASTER)
		}
		{
			p.SetState(8015)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8016)
			p.Match(TSqlParserDECRYPTION)
		}
		{
			p.SetState(8017)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(8018)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(8019)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8020)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Open_keyContext).password = _m
		}

	}

	return localctx
}

// IClose_keyContext is an interface to support dynamic dispatch.
type IClose_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// IsClose_keyContext differentiates from other interfaces.
	IsClose_keyContext()
}

type Close_keyContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	key_name IIdContext
}

func NewEmptyClose_keyContext() *Close_keyContext {
	var p = new(Close_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_close_key
	return p
}

func (*Close_keyContext) IsClose_keyContext() {}

func NewClose_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_keyContext {
	var p = new(Close_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_close_key

	return p
}

func (s *Close_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Close_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Close_keyContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLOSE, 0)
}

func (s *Close_keyContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Close_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Close_keyContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Close_keyContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Close_keyContext) KEYS() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEYS, 0)
}

func (s *Close_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Close_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClose_key(s)
	}
}

func (s *Close_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClose_key(s)
	}
}

func (s *Close_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClose_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Close_key() (localctx IClose_keyContext) {
	localctx = NewClose_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 638, TSqlParserRULE_close_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8034)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1116, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8023)
			p.Match(TSqlParserCLOSE)
		}
		{
			p.SetState(8024)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8025)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8026)

			var _x = p.Id()

			localctx.(*Close_keyContext).key_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8027)
			p.Match(TSqlParserCLOSE)
		}
		{
			p.SetState(8028)
			p.Match(TSqlParserALL)
		}
		{
			p.SetState(8029)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8030)
			p.Match(TSqlParserKEYS)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8031)
			p.Match(TSqlParserCLOSE)
		}
		{
			p.SetState(8032)
			p.Match(TSqlParserMASTER)
		}
		{
			p.SetState(8033)
			p.Match(TSqlParserKEY)
		}

	}

	return localctx
}

// ICreate_keyContext is an interface to support dynamic dispatch.
type ICreate_keyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPassword returns the password token.
	GetPassword() antlr.Token

	// SetPassword sets the password token.
	SetPassword(antlr.Token)

	// GetKey_name returns the key_name rule contexts.
	GetKey_name() IIdContext

	// GetUser_name returns the user_name rule contexts.
	GetUser_name() IIdContext

	// GetProvider_name returns the provider_name rule contexts.
	GetProvider_name() IIdContext

	// SetKey_name sets the key_name rule contexts.
	SetKey_name(IIdContext)

	// SetUser_name sets the user_name rule contexts.
	SetUser_name(IIdContext)

	// SetProvider_name sets the provider_name rule contexts.
	SetProvider_name(IIdContext)

	// IsCreate_keyContext differentiates from other interfaces.
	IsCreate_keyContext()
}

type Create_keyContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	password      antlr.Token
	key_name      IIdContext
	user_name     IIdContext
	provider_name IIdContext
}

func NewEmptyCreate_keyContext() *Create_keyContext {
	var p = new(Create_keyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_key
	return p
}

func (*Create_keyContext) IsCreate_keyContext() {}

func NewCreate_keyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_keyContext {
	var p = new(Create_keyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_key

	return p
}

func (s *Create_keyContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_keyContext) GetPassword() antlr.Token { return s.password }

func (s *Create_keyContext) SetPassword(v antlr.Token) { s.password = v }

func (s *Create_keyContext) GetKey_name() IIdContext { return s.key_name }

func (s *Create_keyContext) GetUser_name() IIdContext { return s.user_name }

func (s *Create_keyContext) GetProvider_name() IIdContext { return s.provider_name }

func (s *Create_keyContext) SetKey_name(v IIdContext) { s.key_name = v }

func (s *Create_keyContext) SetUser_name(v IIdContext) { s.user_name = v }

func (s *Create_keyContext) SetProvider_name(v IIdContext) { s.provider_name = v }

func (s *Create_keyContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Create_keyContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Create_keyContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Create_keyContext) AllENCRYPTION() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserENCRYPTION)
}

func (s *Create_keyContext) ENCRYPTION(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, i)
}

func (s *Create_keyContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserBY)
}

func (s *Create_keyContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, i)
}

func (s *Create_keyContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Create_keyContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_keyContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Create_keyContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Create_keyContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Create_keyContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_keyContext) AUTHORIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTHORIZATION, 0)
}

func (s *Create_keyContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Create_keyContext) PROVIDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER, 0)
}

func (s *Create_keyContext) AllKey_options() []IKey_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKey_optionsContext)(nil)).Elem())
	var tst = make([]IKey_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKey_optionsContext)
		}
	}

	return tst
}

func (s *Create_keyContext) Key_options(i int) IKey_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKey_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKey_optionsContext)
}

func (s *Create_keyContext) AllEncryption_mechanism() []IEncryption_mechanismContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEncryption_mechanismContext)(nil)).Elem())
	var tst = make([]IEncryption_mechanismContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEncryption_mechanismContext)
		}
	}

	return tst
}

func (s *Create_keyContext) Encryption_mechanism(i int) IEncryption_mechanismContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEncryption_mechanismContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEncryption_mechanismContext)
}

func (s *Create_keyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_keyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_keyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_key(s)
	}
}

func (s *Create_keyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_key(s)
	}
}

func (s *Create_keyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_key(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_key() (localctx ICreate_keyContext) {
	localctx = NewCreate_keyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 640, TSqlParserRULE_create_key)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(8071)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1122, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8036)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(8037)
			p.Match(TSqlParserMASTER)
		}
		{
			p.SetState(8038)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8039)
			p.Match(TSqlParserENCRYPTION)
		}
		{
			p.SetState(8040)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(8041)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(8042)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8043)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Create_keyContext).password = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8044)
			p.Match(TSqlParserCREATE)
		}
		{
			p.SetState(8045)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8046)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8047)

			var _x = p.Id()

			localctx.(*Create_keyContext).key_name = _x
		}
		p.SetState(8050)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserAUTHORIZATION {
			{
				p.SetState(8048)
				p.Match(TSqlParserAUTHORIZATION)
			}
			{
				p.SetState(8049)

				var _x = p.Id()

				localctx.(*Create_keyContext).user_name = _x
			}

		}
		p.SetState(8055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFROM {
			{
				p.SetState(8052)
				p.Match(TSqlParserFROM)
			}
			{
				p.SetState(8053)
				p.Match(TSqlParserPROVIDER)
			}
			{
				p.SetState(8054)

				var _x = p.Id()

				localctx.(*Create_keyContext).provider_name = _x
			}

		}
		{
			p.SetState(8057)
			p.Match(TSqlParserWITH)
		}
		p.SetState(8067)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(8062)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case TSqlParserALGORITHM, TSqlParserCREATION_DISPOSITION, TSqlParserIDENTITY_VALUE, TSqlParserKEY_SOURCE, TSqlParserPROVIDER_KEY_NAME:
					{
						p.SetState(8058)
						p.Key_options()
					}

				case TSqlParserENCRYPTION:
					{
						p.SetState(8059)
						p.Match(TSqlParserENCRYPTION)
					}
					{
						p.SetState(8060)
						p.Match(TSqlParserBY)
					}
					{
						p.SetState(8061)
						p.Encryption_mechanism()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}
				p.SetState(8065)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserCOMMA {
					{
						p.SetState(8064)
						p.Match(TSqlParserCOMMA)
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(8069)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1121, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IKey_optionsContext is an interface to support dynamic dispatch.
type IKey_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPass_phrase returns the pass_phrase token.
	GetPass_phrase() antlr.Token

	// GetIdentity_phrase returns the identity_phrase token.
	GetIdentity_phrase() antlr.Token

	// GetKey_name_in_provider returns the key_name_in_provider token.
	GetKey_name_in_provider() antlr.Token

	// SetPass_phrase sets the pass_phrase token.
	SetPass_phrase(antlr.Token)

	// SetIdentity_phrase sets the identity_phrase token.
	SetIdentity_phrase(antlr.Token)

	// SetKey_name_in_provider sets the key_name_in_provider token.
	SetKey_name_in_provider(antlr.Token)

	// IsKey_optionsContext differentiates from other interfaces.
	IsKey_optionsContext()
}

type Key_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	pass_phrase          antlr.Token
	identity_phrase      antlr.Token
	key_name_in_provider antlr.Token
}

func NewEmptyKey_optionsContext() *Key_optionsContext {
	var p = new(Key_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_key_options
	return p
}

func (*Key_optionsContext) IsKey_optionsContext() {}

func NewKey_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Key_optionsContext {
	var p = new(Key_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_key_options

	return p
}

func (s *Key_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Key_optionsContext) GetPass_phrase() antlr.Token { return s.pass_phrase }

func (s *Key_optionsContext) GetIdentity_phrase() antlr.Token { return s.identity_phrase }

func (s *Key_optionsContext) GetKey_name_in_provider() antlr.Token { return s.key_name_in_provider }

func (s *Key_optionsContext) SetPass_phrase(v antlr.Token) { s.pass_phrase = v }

func (s *Key_optionsContext) SetIdentity_phrase(v antlr.Token) { s.identity_phrase = v }

func (s *Key_optionsContext) SetKey_name_in_provider(v antlr.Token) { s.key_name_in_provider = v }

func (s *Key_optionsContext) KEY_SOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY_SOURCE, 0)
}

func (s *Key_optionsContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Key_optionsContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Key_optionsContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(TSqlParserALGORITHM, 0)
}

func (s *Key_optionsContext) Algorithm() IAlgorithmContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlgorithmContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlgorithmContext)
}

func (s *Key_optionsContext) IDENTITY_VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY_VALUE, 0)
}

func (s *Key_optionsContext) PROVIDER_KEY_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserPROVIDER_KEY_NAME, 0)
}

func (s *Key_optionsContext) CREATION_DISPOSITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATION_DISPOSITION, 0)
}

func (s *Key_optionsContext) CREATE_NEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE_NEW, 0)
}

func (s *Key_optionsContext) OPEN_EXISTING() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPEN_EXISTING, 0)
}

func (s *Key_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Key_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Key_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterKey_options(s)
	}
}

func (s *Key_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitKey_options(s)
	}
}

func (s *Key_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitKey_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Key_options() (localctx IKey_optionsContext) {
	localctx = NewKey_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 642, TSqlParserRULE_key_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8088)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserKEY_SOURCE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8073)
			p.Match(TSqlParserKEY_SOURCE)
		}
		{
			p.SetState(8074)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8075)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Key_optionsContext).pass_phrase = _m
		}

	case TSqlParserALGORITHM:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8076)
			p.Match(TSqlParserALGORITHM)
		}
		{
			p.SetState(8077)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8078)
			p.Algorithm()
		}

	case TSqlParserIDENTITY_VALUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8079)
			p.Match(TSqlParserIDENTITY_VALUE)
		}
		{
			p.SetState(8080)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8081)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Key_optionsContext).identity_phrase = _m
		}

	case TSqlParserPROVIDER_KEY_NAME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8082)
			p.Match(TSqlParserPROVIDER_KEY_NAME)
		}
		{
			p.SetState(8083)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8084)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Key_optionsContext).key_name_in_provider = _m
		}

	case TSqlParserCREATION_DISPOSITION:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8085)
			p.Match(TSqlParserCREATION_DISPOSITION)
		}
		{
			p.SetState(8086)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(8087)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserCREATE_NEW || _la == TSqlParserOPEN_EXISTING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlgorithmContext is an interface to support dynamic dispatch.
type IAlgorithmContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlgorithmContext differentiates from other interfaces.
	IsAlgorithmContext()
}

type AlgorithmContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlgorithmContext() *AlgorithmContext {
	var p = new(AlgorithmContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_algorithm
	return p
}

func (*AlgorithmContext) IsAlgorithmContext() {}

func NewAlgorithmContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlgorithmContext {
	var p = new(AlgorithmContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_algorithm

	return p
}

func (s *AlgorithmContext) GetParser() antlr.Parser { return s.parser }

func (s *AlgorithmContext) DES() antlr.TerminalNode {
	return s.GetToken(TSqlParserDES, 0)
}

func (s *AlgorithmContext) TRIPLE_DES() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES, 0)
}

func (s *AlgorithmContext) TRIPLE_DES_3KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRIPLE_DES_3KEY, 0)
}

func (s *AlgorithmContext) RC2() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC2, 0)
}

func (s *AlgorithmContext) RC4() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC4, 0)
}

func (s *AlgorithmContext) RC4_128() antlr.TerminalNode {
	return s.GetToken(TSqlParserRC4_128, 0)
}

func (s *AlgorithmContext) DESX() antlr.TerminalNode {
	return s.GetToken(TSqlParserDESX, 0)
}

func (s *AlgorithmContext) AES_128() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_128, 0)
}

func (s *AlgorithmContext) AES_192() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_192, 0)
}

func (s *AlgorithmContext) AES_256() antlr.TerminalNode {
	return s.GetToken(TSqlParserAES_256, 0)
}

func (s *AlgorithmContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlgorithmContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlgorithmContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAlgorithm(s)
	}
}

func (s *AlgorithmContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAlgorithm(s)
	}
}

func (s *AlgorithmContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAlgorithm(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Algorithm() (localctx IAlgorithmContext) {
	localctx = NewAlgorithmContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 644, TSqlParserRULE_algorithm)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8090)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-388)&-(0x1f+1)) == 0 && ((1<<uint((_la-388)))&((1<<(TSqlParserAES_128-388))|(1<<(TSqlParserAES_192-388))|(1<<(TSqlParserAES_256-388)))) != 0) || _la == TSqlParserDES || _la == TSqlParserDESX || (((_la-654)&-(0x1f+1)) == 0 && ((1<<uint((_la-654)))&((1<<(TSqlParserRC2-654))|(1<<(TSqlParserRC4-654))|(1<<(TSqlParserRC4_128-654)))) != 0) || _la == TSqlParserTRIPLE_DES || _la == TSqlParserTRIPLE_DES_3KEY) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IEncryption_mechanismContext is an interface to support dynamic dispatch.
type IEncryption_mechanismContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// GetAsym_key_name returns the asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// GetDecrypting_Key_name returns the decrypting_Key_name rule contexts.
	GetDecrypting_Key_name() IIdContext

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// SetAsym_key_name sets the asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// SetDecrypting_Key_name sets the decrypting_Key_name rule contexts.
	SetDecrypting_Key_name(IIdContext)

	// IsEncryption_mechanismContext differentiates from other interfaces.
	IsEncryption_mechanismContext()
}

type Encryption_mechanismContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	certificate_name    IIdContext
	asym_key_name       IIdContext
	decrypting_Key_name IIdContext
}

func NewEmptyEncryption_mechanismContext() *Encryption_mechanismContext {
	var p = new(Encryption_mechanismContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_encryption_mechanism
	return p
}

func (*Encryption_mechanismContext) IsEncryption_mechanismContext() {}

func NewEncryption_mechanismContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Encryption_mechanismContext {
	var p = new(Encryption_mechanismContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_encryption_mechanism

	return p
}

func (s *Encryption_mechanismContext) GetParser() antlr.Parser { return s.parser }

func (s *Encryption_mechanismContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Encryption_mechanismContext) GetAsym_key_name() IIdContext { return s.asym_key_name }

func (s *Encryption_mechanismContext) GetDecrypting_Key_name() IIdContext {
	return s.decrypting_Key_name
}

func (s *Encryption_mechanismContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Encryption_mechanismContext) SetAsym_key_name(v IIdContext) { s.asym_key_name = v }

func (s *Encryption_mechanismContext) SetDecrypting_Key_name(v IIdContext) { s.decrypting_Key_name = v }

func (s *Encryption_mechanismContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Encryption_mechanismContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Encryption_mechanismContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Encryption_mechanismContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Encryption_mechanismContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Encryption_mechanismContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Encryption_mechanismContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Encryption_mechanismContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Encryption_mechanismContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Encryption_mechanismContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEncryption_mechanism(s)
	}
}

func (s *Encryption_mechanismContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEncryption_mechanism(s)
	}
}

func (s *Encryption_mechanismContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEncryption_mechanism(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Encryption_mechanism() (localctx IEncryption_mechanismContext) {
	localctx = NewEncryption_mechanismContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 646, TSqlParserRULE_encryption_mechanism)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8103)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCERTIFICATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8092)
			p.Match(TSqlParserCERTIFICATE)
		}
		{
			p.SetState(8093)

			var _x = p.Id()

			localctx.(*Encryption_mechanismContext).certificate_name = _x
		}

	case TSqlParserASYMMETRIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8094)
			p.Match(TSqlParserASYMMETRIC)
		}
		{
			p.SetState(8095)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8096)

			var _x = p.Id()

			localctx.(*Encryption_mechanismContext).asym_key_name = _x
		}

	case TSqlParserSYMMETRIC:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8097)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8098)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8099)

			var _x = p.Id()

			localctx.(*Encryption_mechanismContext).decrypting_Key_name = _x
		}

	case TSqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8100)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(8101)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8102)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDecryption_mechanismContext is an interface to support dynamic dispatch.
type IDecryption_mechanismContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCertificate_name returns the certificate_name rule contexts.
	GetCertificate_name() IIdContext

	// GetAsym_key_name returns the asym_key_name rule contexts.
	GetAsym_key_name() IIdContext

	// GetDecrypting_Key_name returns the decrypting_Key_name rule contexts.
	GetDecrypting_Key_name() IIdContext

	// SetCertificate_name sets the certificate_name rule contexts.
	SetCertificate_name(IIdContext)

	// SetAsym_key_name sets the asym_key_name rule contexts.
	SetAsym_key_name(IIdContext)

	// SetDecrypting_Key_name sets the decrypting_Key_name rule contexts.
	SetDecrypting_Key_name(IIdContext)

	// IsDecryption_mechanismContext differentiates from other interfaces.
	IsDecryption_mechanismContext()
}

type Decryption_mechanismContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	certificate_name    IIdContext
	asym_key_name       IIdContext
	decrypting_Key_name IIdContext
}

func NewEmptyDecryption_mechanismContext() *Decryption_mechanismContext {
	var p = new(Decryption_mechanismContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_decryption_mechanism
	return p
}

func (*Decryption_mechanismContext) IsDecryption_mechanismContext() {}

func NewDecryption_mechanismContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decryption_mechanismContext {
	var p = new(Decryption_mechanismContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_decryption_mechanism

	return p
}

func (s *Decryption_mechanismContext) GetParser() antlr.Parser { return s.parser }

func (s *Decryption_mechanismContext) GetCertificate_name() IIdContext { return s.certificate_name }

func (s *Decryption_mechanismContext) GetAsym_key_name() IIdContext { return s.asym_key_name }

func (s *Decryption_mechanismContext) GetDecrypting_Key_name() IIdContext {
	return s.decrypting_Key_name
}

func (s *Decryption_mechanismContext) SetCertificate_name(v IIdContext) { s.certificate_name = v }

func (s *Decryption_mechanismContext) SetAsym_key_name(v IIdContext) { s.asym_key_name = v }

func (s *Decryption_mechanismContext) SetDecrypting_Key_name(v IIdContext) { s.decrypting_Key_name = v }

func (s *Decryption_mechanismContext) CERTIFICATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCERTIFICATE, 0)
}

func (s *Decryption_mechanismContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Decryption_mechanismContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Decryption_mechanismContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(TSqlParserPASSWORD, 0)
}

func (s *Decryption_mechanismContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Decryption_mechanismContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Decryption_mechanismContext) ASYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASYMMETRIC, 0)
}

func (s *Decryption_mechanismContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Decryption_mechanismContext) SYMMETRIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYMMETRIC, 0)
}

func (s *Decryption_mechanismContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decryption_mechanismContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decryption_mechanismContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDecryption_mechanism(s)
	}
}

func (s *Decryption_mechanismContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDecryption_mechanism(s)
	}
}

func (s *Decryption_mechanismContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDecryption_mechanism(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Decryption_mechanism() (localctx IDecryption_mechanismContext) {
	localctx = NewDecryption_mechanismContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 648, TSqlParserRULE_decryption_mechanism)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8128)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCERTIFICATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8105)
			p.Match(TSqlParserCERTIFICATE)
		}
		{
			p.SetState(8106)

			var _x = p.Id()

			localctx.(*Decryption_mechanismContext).certificate_name = _x
		}
		p.SetState(8111)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8107)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(8108)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(8109)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(8110)
				p.Match(TSqlParserSTRING)
			}

		}

	case TSqlParserASYMMETRIC:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8113)
			p.Match(TSqlParserASYMMETRIC)
		}
		{
			p.SetState(8114)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8115)

			var _x = p.Id()

			localctx.(*Decryption_mechanismContext).asym_key_name = _x
		}
		p.SetState(8120)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1126, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8116)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(8117)
				p.Match(TSqlParserPASSWORD)
			}
			{
				p.SetState(8118)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(8119)
				p.Match(TSqlParserSTRING)
			}

		}

	case TSqlParserSYMMETRIC:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8122)
			p.Match(TSqlParserSYMMETRIC)
		}
		{
			p.SetState(8123)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8124)

			var _x = p.Id()

			localctx.(*Decryption_mechanismContext).decrypting_Key_name = _x
		}

	case TSqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8125)
			p.Match(TSqlParserPASSWORD)
		}
		{
			p.SetState(8126)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8127)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGrant_permissionContext is an interface to support dynamic dispatch.
type IGrant_permissionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_permissionContext differentiates from other interfaces.
	IsGrant_permissionContext()
}

type Grant_permissionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_permissionContext() *Grant_permissionContext {
	var p = new(Grant_permissionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_grant_permission
	return p
}

func (*Grant_permissionContext) IsGrant_permissionContext() {}

func NewGrant_permissionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_permissionContext {
	var p = new(Grant_permissionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_grant_permission

	return p
}

func (s *Grant_permissionContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_permissionContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTE, 0)
}

func (s *Grant_permissionContext) VIEW() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEW, 0)
}

func (s *Grant_permissionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Grant_permissionContext) TAKE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTAKE, 0)
}

func (s *Grant_permissionContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTROL, 0)
}

func (s *Grant_permissionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCREATE, 0)
}

func (s *Grant_permissionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Grant_permissionContext) SHOWPLAN() antlr.TerminalNode {
	return s.GetToken(TSqlParserSHOWPLAN, 0)
}

func (s *Grant_permissionContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserIMPERSONATE, 0)
}

func (s *Grant_permissionContext) SELECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSELECT, 0)
}

func (s *Grant_permissionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(TSqlParserREFERENCES, 0)
}

func (s *Grant_permissionContext) INSERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERT, 0)
}

func (s *Grant_permissionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserALTER, 0)
}

func (s *Grant_permissionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATABASE, 0)
}

func (s *Grant_permissionContext) ANY() antlr.TerminalNode {
	return s.GetToken(TSqlParserANY, 0)
}

func (s *Grant_permissionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_permissionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_permissionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGrant_permission(s)
	}
}

func (s *Grant_permissionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGrant_permission(s)
	}
}

func (s *Grant_permissionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGrant_permission(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Grant_permission() (localctx IGrant_permissionContext) {
	localctx = NewGrant_permissionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 650, TSqlParserRULE_grant_permission)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8156)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8130)
			p.Match(TSqlParserEXECUTE)
		}

	case TSqlParserVIEW:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8131)
			p.Match(TSqlParserVIEW)
		}
		{
			p.SetState(8132)
			p.Id()
		}

	case TSqlParserTAKE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8133)
			p.Match(TSqlParserTAKE)
		}
		{
			p.SetState(8134)
			p.Id()
		}

	case TSqlParserCONTROL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8135)
			p.Match(TSqlParserCONTROL)
		}
		p.SetState(8137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(8136)
				p.Id()
			}

		}

	case TSqlParserCREATE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8139)
			p.Match(TSqlParserCREATE)
		}
		p.SetState(8140)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTABLE || _la == TSqlParserVIEW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserSHOWPLAN:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8141)
			p.Match(TSqlParserSHOWPLAN)
		}

	case TSqlParserIMPERSONATE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8142)
			p.Match(TSqlParserIMPERSONATE)
		}

	case TSqlParserSELECT:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8143)
			p.Match(TSqlParserSELECT)
		}

	case TSqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(8144)
			p.Match(TSqlParserREFERENCES)
		}

	case TSqlParserINSERT:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(8145)
			p.Match(TSqlParserINSERT)
		}

	case TSqlParserALTER:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(8146)
			p.Match(TSqlParserALTER)
		}
		p.SetState(8154)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserANY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || _la == TSqlParserDATABASE || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			p.SetState(8148)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserANY {
				{
					p.SetState(8147)
					p.Match(TSqlParserANY)
				}

			}
			p.SetState(8152)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(8150)
					p.Id()
				}

			case TSqlParserDATABASE:
				{
					p.SetState(8151)
					p.Match(TSqlParserDATABASE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMember_name returns the member_name rule contexts.
	GetMember_name() IIdContext

	// SetMember_name sets the member_name rule contexts.
	SetMember_name(IIdContext)

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	member_name IIdContext
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_set_statement
	return p
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) GetMember_name() IIdContext { return s.member_name }

func (s *Set_statementContext) SetMember_name(v IIdContext) { s.member_name = v }

func (s *Set_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Set_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Set_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Set_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Set_statementContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Set_statementContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURSOR, 0)
}

func (s *Set_statementContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Set_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Set_statementContext) READ() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD, 0)
}

func (s *Set_statementContext) ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLY, 0)
}

func (s *Set_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *Set_statementContext) OF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOF, 0)
}

func (s *Set_statementContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Set_statementContext) Set_special() ISet_specialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_specialContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_specialContext)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSet_statement(s)
	}
}

func (s *Set_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSet_statement(s)
	}
}

func (s *Set_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSet_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 652, TSqlParserRULE_set_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8197)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1140, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8158)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8159)
			p.Match(TSqlParserLOCAL_ID)
		}
		p.SetState(8162)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserDOT {
			{
				p.SetState(8160)
				p.Match(TSqlParserDOT)
			}
			{
				p.SetState(8161)

				var _x = p.Id()

				localctx.(*Set_statementContext).member_name = _x
			}

		}
		{
			p.SetState(8164)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8165)
			p.expression(0)
		}
		p.SetState(8167)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1134, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8166)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8169)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8170)
			p.Match(TSqlParserLOCAL_ID)
		}
		{
			p.SetState(8171)
			p.Assignment_operator()
		}
		{
			p.SetState(8172)
			p.expression(0)
		}
		p.SetState(8174)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1135, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8173)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8176)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8177)
			p.Match(TSqlParserLOCAL_ID)
		}
		{
			p.SetState(8178)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8179)
			p.Match(TSqlParserCURSOR)
		}
		{
			p.SetState(8180)
			p.Declare_set_cursor_common()
		}
		p.SetState(8191)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFOR {
			{
				p.SetState(8181)
				p.Match(TSqlParserFOR)
			}
			p.SetState(8189)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserREAD:
				{
					p.SetState(8182)
					p.Match(TSqlParserREAD)
				}
				{
					p.SetState(8183)
					p.Match(TSqlParserONLY)
				}

			case TSqlParserUPDATE:
				{
					p.SetState(8184)
					p.Match(TSqlParserUPDATE)
				}
				p.SetState(8187)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserOF {
					{
						p.SetState(8185)
						p.Match(TSqlParserOF)
					}
					{
						p.SetState(8186)
						p.Column_name_list()
					}

				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(8194)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1139, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8193)
				p.Match(TSqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8196)
			p.Set_special()
		}

	}

	return localctx
}

// ITransaction_statementContext is an interface to support dynamic dispatch.
type ITransaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_statementContext differentiates from other interfaces.
	IsTransaction_statementContext()
}

type Transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_statementContext() *Transaction_statementContext {
	var p = new(Transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_transaction_statement
	return p
}

func (*Transaction_statementContext) IsTransaction_statementContext() {}

func NewTransaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_statementContext {
	var p = new(Transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_transaction_statement

	return p
}

func (s *Transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Transaction_statementContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISTRIBUTED, 0)
}

func (s *Transaction_statementContext) TRAN() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRAN, 0)
}

func (s *Transaction_statementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSACTION, 0)
}

func (s *Transaction_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Transaction_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Transaction_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Transaction_statementContext) MARK() antlr.TerminalNode {
	return s.GetToken(TSqlParserMARK, 0)
}

func (s *Transaction_statementContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Transaction_statementContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMIT, 0)
}

func (s *Transaction_statementContext) DELAYED_DURABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELAYED_DURABILITY, 0)
}

func (s *Transaction_statementContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Transaction_statementContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Transaction_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Transaction_statementContext) WORK() antlr.TerminalNode {
	return s.GetToken(TSqlParserWORK, 0)
}

func (s *Transaction_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(TSqlParserROLLBACK, 0)
}

func (s *Transaction_statementContext) SAVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAVE, 0)
}

func (s *Transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTransaction_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Transaction_statement() (localctx ITransaction_statementContext) {
	localctx = NewTransaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 654, TSqlParserRULE_transaction_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8276)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1159, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8199)
			p.Match(TSqlParserBEGIN)
		}
		{
			p.SetState(8200)
			p.Match(TSqlParserDISTRIBUTED)
		}
		p.SetState(8201)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTRAN || _la == TSqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(8204)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1141, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8202)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1141, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(8203)
				p.Match(TSqlParserLOCAL_ID)
			}

		}
		p.SetState(8207)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1142, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8206)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8209)
			p.Match(TSqlParserBEGIN)
		}
		p.SetState(8210)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTRAN || _la == TSqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(8220)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1145, p.GetParserRuleContext()) == 1 {
			p.SetState(8213)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(8211)
					p.Id()
				}

			case TSqlParserLOCAL_ID:
				{
					p.SetState(8212)
					p.Match(TSqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(8218)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1144, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(8215)
					p.Match(TSqlParserWITH)
				}
				{
					p.SetState(8216)
					p.Match(TSqlParserMARK)
				}
				{
					p.SetState(8217)
					p.Match(TSqlParserSTRING)
				}

			}

		}
		p.SetState(8223)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1146, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8222)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8225)
			p.Match(TSqlParserCOMMIT)
		}
		p.SetState(8226)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTRAN || _la == TSqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(8239)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1149, p.GetParserRuleContext()) == 1 {
			p.SetState(8229)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
				{
					p.SetState(8227)
					p.Id()
				}

			case TSqlParserLOCAL_ID:
				{
					p.SetState(8228)
					p.Match(TSqlParserLOCAL_ID)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(8237)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1148, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(8231)
					p.Match(TSqlParserWITH)
				}
				{
					p.SetState(8232)
					p.Match(TSqlParserLR_BRACKET)
				}
				{
					p.SetState(8233)
					p.Match(TSqlParserDELAYED_DURABILITY)
				}
				{
					p.SetState(8234)
					p.Match(TSqlParserEQUAL)
				}
				p.SetState(8235)
				_la = p.GetTokenStream().LA(1)

				if !(_la == TSqlParserOFF || _la == TSqlParserON) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(8236)
					p.Match(TSqlParserRR_BRACKET)
				}

			}

		}
		p.SetState(8242)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1150, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8241)
				p.Match(TSqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8244)
			p.Match(TSqlParserCOMMIT)
		}
		p.SetState(8246)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1151, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8245)
				p.Match(TSqlParserWORK)
			}

		}
		p.SetState(8249)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1152, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8248)
				p.Match(TSqlParserSEMI)
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8251)
			p.Match(TSqlParserROLLBACK)
		}
		p.SetState(8252)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTRAN || _la == TSqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(8255)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1153, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8253)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1153, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(8254)
				p.Match(TSqlParserLOCAL_ID)
			}

		}
		p.SetState(8258)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1154, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8257)
				p.Match(TSqlParserSEMI)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8260)
			p.Match(TSqlParserROLLBACK)
		}
		p.SetState(8262)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1155, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8261)
				p.Match(TSqlParserWORK)
			}

		}
		p.SetState(8265)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1156, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8264)
				p.Match(TSqlParserSEMI)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8267)
			p.Match(TSqlParserSAVE)
		}
		p.SetState(8268)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserTRAN || _la == TSqlParserTRANSACTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(8271)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8269)
				p.Id()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1157, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(8270)
				p.Match(TSqlParserLOCAL_ID)
			}

		}
		p.SetState(8274)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8273)
				p.Match(TSqlParserSEMI)
			}

		}

	}

	return localctx
}

// IGo_statementContext is an interface to support dynamic dispatch.
type IGo_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCount returns the count token.
	GetCount() antlr.Token

	// SetCount sets the count token.
	SetCount(antlr.Token)

	// IsGo_statementContext differentiates from other interfaces.
	IsGo_statementContext()
}

type Go_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	count  antlr.Token
}

func NewEmptyGo_statementContext() *Go_statementContext {
	var p = new(Go_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_go_statement
	return p
}

func (*Go_statementContext) IsGo_statementContext() {}

func NewGo_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Go_statementContext {
	var p = new(Go_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_go_statement

	return p
}

func (s *Go_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Go_statementContext) GetCount() antlr.Token { return s.count }

func (s *Go_statementContext) SetCount(v antlr.Token) { s.count = v }

func (s *Go_statementContext) GO() antlr.TerminalNode {
	return s.GetToken(TSqlParserGO, 0)
}

func (s *Go_statementContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Go_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Go_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Go_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGo_statement(s)
	}
}

func (s *Go_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGo_statement(s)
	}
}

func (s *Go_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGo_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Go_statement() (localctx IGo_statementContext) {
	localctx = NewGo_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 656, TSqlParserRULE_go_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8278)
		p.Match(TSqlParserGO)
	}
	p.SetState(8280)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDECIMAL {
		{
			p.SetState(8279)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*Go_statementContext).count = _m
		}

	}

	return localctx
}

// IUse_statementContext is an interface to support dynamic dispatch.
type IUse_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// IsUse_statementContext differentiates from other interfaces.
	IsUse_statementContext()
}

type Use_statementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IIdContext
}

func NewEmptyUse_statementContext() *Use_statementContext {
	var p = new(Use_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_use_statement
	return p
}

func (*Use_statementContext) IsUse_statementContext() {}

func NewUse_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_statementContext {
	var p = new(Use_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_use_statement

	return p
}

func (s *Use_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_statementContext) GetDatabase() IIdContext { return s.database }

func (s *Use_statementContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Use_statementContext) USE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSE, 0)
}

func (s *Use_statementContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Use_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUse_statement(s)
	}
}

func (s *Use_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUse_statement(s)
	}
}

func (s *Use_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUse_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Use_statement() (localctx IUse_statementContext) {
	localctx = NewUse_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 658, TSqlParserRULE_use_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8282)
		p.Match(TSqlParserUSE)
	}
	{
		p.SetState(8283)

		var _x = p.Id()

		localctx.(*Use_statementContext).database = _x
	}
	p.SetState(8285)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1161, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8284)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDbcc_clauseContext is an interface to support dynamic dispatch.
type IDbcc_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() ISimple_idContext

	// SetName sets the name rule contexts.
	SetName(ISimple_idContext)

	// IsDbcc_clauseContext differentiates from other interfaces.
	IsDbcc_clauseContext()
}

type Dbcc_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   ISimple_idContext
}

func NewEmptyDbcc_clauseContext() *Dbcc_clauseContext {
	var p = new(Dbcc_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_dbcc_clause
	return p
}

func (*Dbcc_clauseContext) IsDbcc_clauseContext() {}

func NewDbcc_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dbcc_clauseContext {
	var p = new(Dbcc_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_dbcc_clause

	return p
}

func (s *Dbcc_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Dbcc_clauseContext) GetName() ISimple_idContext { return s.name }

func (s *Dbcc_clauseContext) SetName(v ISimple_idContext) { s.name = v }

func (s *Dbcc_clauseContext) DBCC() antlr.TerminalNode {
	return s.GetToken(TSqlParserDBCC, 0)
}

func (s *Dbcc_clauseContext) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Dbcc_clauseContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Dbcc_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Dbcc_clauseContext) Dbcc_options() IDbcc_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDbcc_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDbcc_optionsContext)
}

func (s *Dbcc_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dbcc_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dbcc_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDbcc_clause(s)
	}
}

func (s *Dbcc_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDbcc_clause(s)
	}
}

func (s *Dbcc_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDbcc_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Dbcc_clause() (localctx IDbcc_clauseContext) {
	localctx = NewDbcc_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 660, TSqlParserRULE_dbcc_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8287)
		p.Match(TSqlParserDBCC)
	}
	{
		p.SetState(8288)

		var _x = p.Simple_id()

		localctx.(*Dbcc_clauseContext).name = _x
	}
	p.SetState(8293)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1162, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8289)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8290)
			p.Expression_list()
		}
		{
			p.SetState(8291)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(8297)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1163, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8295)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(8296)
			p.Dbcc_options()
		}

	}
	p.SetState(8300)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1164, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8299)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDbcc_optionsContext is an interface to support dynamic dispatch.
type IDbcc_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDbcc_optionsContext differentiates from other interfaces.
	IsDbcc_optionsContext()
}

type Dbcc_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDbcc_optionsContext() *Dbcc_optionsContext {
	var p = new(Dbcc_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_dbcc_options
	return p
}

func (*Dbcc_optionsContext) IsDbcc_optionsContext() {}

func NewDbcc_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dbcc_optionsContext {
	var p = new(Dbcc_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_dbcc_options

	return p
}

func (s *Dbcc_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Dbcc_optionsContext) AllSimple_id() []ISimple_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_idContext)(nil)).Elem())
	var tst = make([]ISimple_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_idContext)
		}
	}

	return tst
}

func (s *Dbcc_optionsContext) Simple_id(i int) ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Dbcc_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dbcc_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dbcc_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDbcc_options(s)
	}
}

func (s *Dbcc_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDbcc_options(s)
	}
}

func (s *Dbcc_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDbcc_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Dbcc_options() (localctx IDbcc_optionsContext) {
	localctx = NewDbcc_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 662, TSqlParserRULE_dbcc_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8302)
		p.Simple_id()
	}
	p.SetState(8305)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(8303)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(8304)
			p.Simple_id()
		}

	}

	return localctx
}

// IExecute_clauseContext is an interface to support dynamic dispatch.
type IExecute_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetClause returns the clause token.
	GetClause() antlr.Token

	// SetClause sets the clause token.
	SetClause(antlr.Token)

	// IsExecute_clauseContext differentiates from other interfaces.
	IsExecute_clauseContext()
}

type Execute_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	clause antlr.Token
}

func NewEmptyExecute_clauseContext() *Execute_clauseContext {
	var p = new(Execute_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_execute_clause
	return p
}

func (*Execute_clauseContext) IsExecute_clauseContext() {}

func NewExecute_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_clauseContext {
	var p = new(Execute_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_execute_clause

	return p
}

func (s *Execute_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_clauseContext) GetClause() antlr.Token { return s.clause }

func (s *Execute_clauseContext) SetClause(v antlr.Token) { s.clause = v }

func (s *Execute_clauseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXECUTE, 0)
}

func (s *Execute_clauseContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Execute_clauseContext) CALLER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCALLER, 0)
}

func (s *Execute_clauseContext) SELF() antlr.TerminalNode {
	return s.GetToken(TSqlParserSELF, 0)
}

func (s *Execute_clauseContext) OWNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOWNER, 0)
}

func (s *Execute_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Execute_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExecute_clause(s)
	}
}

func (s *Execute_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExecute_clause(s)
	}
}

func (s *Execute_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExecute_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Execute_clause() (localctx IExecute_clauseContext) {
	localctx = NewExecute_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 664, TSqlParserRULE_execute_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8307)
		p.Match(TSqlParserEXECUTE)
	}
	{
		p.SetState(8308)
		p.Match(TSqlParserAS)
	}
	p.SetState(8309)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Execute_clauseContext).clause = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserCALLER || _la == TSqlParserOWNER || _la == TSqlParserSELF || _la == TSqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Execute_clauseContext).clause = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDeclare_localContext is an interface to support dynamic dispatch.
type IDeclare_localContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_localContext differentiates from other interfaces.
	IsDeclare_localContext()
}

type Declare_localContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_localContext() *Declare_localContext {
	var p = new(Declare_localContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_declare_local
	return p
}

func (*Declare_localContext) IsDeclare_localContext() {}

func NewDeclare_localContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_localContext {
	var p = new(Declare_localContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_declare_local

	return p
}

func (s *Declare_localContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_localContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Declare_localContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Declare_localContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Declare_localContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Declare_localContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_localContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_localContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDeclare_local(s)
	}
}

func (s *Declare_localContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDeclare_local(s)
	}
}

func (s *Declare_localContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDeclare_local(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Declare_local() (localctx IDeclare_localContext) {
	localctx = NewDeclare_localContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 666, TSqlParserRULE_declare_local)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8311)
		p.Match(TSqlParserLOCAL_ID)
	}
	p.SetState(8313)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(8312)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(8315)
		p.Data_type()
	}
	p.SetState(8318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserEQUAL {
		{
			p.SetState(8316)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(8317)
			p.expression(0)
		}

	}

	return localctx
}

// ITable_type_definitionContext is an interface to support dynamic dispatch.
type ITable_type_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_type_definitionContext differentiates from other interfaces.
	IsTable_type_definitionContext()
}

type Table_type_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_type_definitionContext() *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_type_definition
	return p
}

func (*Table_type_definitionContext) IsTable_type_definitionContext() {}

func NewTable_type_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_type_definitionContext {
	var p = new(Table_type_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_type_definition

	return p
}

func (s *Table_type_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_type_definitionContext) TABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTABLE, 0)
}

func (s *Table_type_definitionContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *Table_type_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_type_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_type_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_type_definition(s)
	}
}

func (s *Table_type_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_type_definition(s)
	}
}

func (s *Table_type_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_type_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_type_definition() (localctx ITable_type_definitionContext) {
	localctx = NewTable_type_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 668, TSqlParserRULE_table_type_definition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8320)
		p.Match(TSqlParserTABLE)
	}
	{
		p.SetState(8321)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(8322)
		p.Column_def_table_constraints()
	}
	{
		p.SetState(8323)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IXml_type_definitionContext is an interface to support dynamic dispatch.
type IXml_type_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_type_definitionContext differentiates from other interfaces.
	IsXml_type_definitionContext()
}

type Xml_type_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_type_definitionContext() *Xml_type_definitionContext {
	var p = new(Xml_type_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_xml_type_definition
	return p
}

func (*Xml_type_definitionContext) IsXml_type_definitionContext() {}

func NewXml_type_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_type_definitionContext {
	var p = new(Xml_type_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_xml_type_definition

	return p
}

func (s *Xml_type_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_type_definitionContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Xml_type_definitionContext) Xml_schema_collection() IXml_schema_collectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_schema_collectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_schema_collectionContext)
}

func (s *Xml_type_definitionContext) CONTENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTENT, 0)
}

func (s *Xml_type_definitionContext) DOCUMENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOCUMENT, 0)
}

func (s *Xml_type_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_type_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_type_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterXml_type_definition(s)
	}
}

func (s *Xml_type_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitXml_type_definition(s)
	}
}

func (s *Xml_type_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitXml_type_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Xml_type_definition() (localctx IXml_type_definitionContext) {
	localctx = NewXml_type_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 670, TSqlParserRULE_xml_type_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8325)
		p.Match(TSqlParserXML)
	}
	{
		p.SetState(8326)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(8328)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONTENT || _la == TSqlParserDOCUMENT {
		p.SetState(8327)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserCONTENT || _la == TSqlParserDOCUMENT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(8330)
		p.Xml_schema_collection()
	}
	{
		p.SetState(8331)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IXml_schema_collectionContext is an interface to support dynamic dispatch.
type IXml_schema_collectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_schema_collectionContext differentiates from other interfaces.
	IsXml_schema_collectionContext()
}

type Xml_schema_collectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_schema_collectionContext() *Xml_schema_collectionContext {
	var p = new(Xml_schema_collectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_xml_schema_collection
	return p
}

func (*Xml_schema_collectionContext) IsXml_schema_collectionContext() {}

func NewXml_schema_collectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_schema_collectionContext {
	var p = new(Xml_schema_collectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_xml_schema_collection

	return p
}

func (s *Xml_schema_collectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_schema_collectionContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserID)
}

func (s *Xml_schema_collectionContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserID, i)
}

func (s *Xml_schema_collectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_schema_collectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_schema_collectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterXml_schema_collection(s)
	}
}

func (s *Xml_schema_collectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitXml_schema_collection(s)
	}
}

func (s *Xml_schema_collectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitXml_schema_collection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Xml_schema_collection() (localctx IXml_schema_collectionContext) {
	localctx = NewXml_schema_collectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 672, TSqlParserRULE_xml_schema_collection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8333)
		p.Match(TSqlParserID)
	}
	{
		p.SetState(8334)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(8335)
		p.Match(TSqlParserID)
	}

	return localctx
}

// IColumn_def_table_constraintsContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintsContext differentiates from other interfaces.
	IsColumn_def_table_constraintsContext()
}

type Column_def_table_constraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintsContext() *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_def_table_constraints
	return p
}

func (*Column_def_table_constraintsContext) IsColumn_def_table_constraintsContext() {}

func NewColumn_def_table_constraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_def_table_constraints

	return p
}

func (s *Column_def_table_constraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintsContext) AllColumn_def_table_constraint() []IColumn_def_table_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_def_table_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_def_table_constraintContext)
		}
	}

	return tst
}

func (s *Column_def_table_constraintsContext) Column_def_table_constraint(i int) IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Column_def_table_constraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_def_table_constraints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_def_table_constraints() (localctx IColumn_def_table_constraintsContext) {
	localctx = NewColumn_def_table_constraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 674, TSqlParserRULE_column_def_table_constraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8337)
		p.Column_def_table_constraint()
	}
	p.SetState(8344)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1170, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(8339)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(8338)
					p.Match(TSqlParserCOMMA)
				}

			}
			{
				p.SetState(8341)
				p.Column_def_table_constraint()
			}

		}
		p.SetState(8346)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1170, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_def_table_constraintContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintContext differentiates from other interfaces.
	IsColumn_def_table_constraintContext()
}

type Column_def_table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintContext() *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_def_table_constraint
	return p
}

func (*Column_def_table_constraintContext) IsColumn_def_table_constraintContext() {}

func NewColumn_def_table_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_def_table_constraint

	return p
}

func (s *Column_def_table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *Column_def_table_constraintContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *Column_def_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_def_table_constraint(s)
	}
}

func (s *Column_def_table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_def_table_constraint(s)
	}
}

func (s *Column_def_table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_def_table_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_def_table_constraint() (localctx IColumn_def_table_constraintContext) {
	localctx = NewColumn_def_table_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 676, TSqlParserRULE_column_def_table_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8349)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8347)
			p.Column_definition()
		}

	case TSqlParserCHECK, TSqlParserCONSTRAINT, TSqlParserDEFAULT, TSqlParserFOREIGN, TSqlParserPRIMARY, TSqlParserUNIQUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8348)
			p.Table_constraint()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_definitionContext is an interface to support dynamic dispatch.
type IColumn_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSeed returns the seed token.
	GetSeed() antlr.Token

	// GetIncrement returns the increment token.
	GetIncrement() antlr.Token

	// SetSeed sets the seed token.
	SetSeed(antlr.Token)

	// SetIncrement sets the increment token.
	SetIncrement(antlr.Token)

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// IsColumn_definitionContext differentiates from other interfaces.
	IsColumn_definitionContext()
}

type Column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	seed       antlr.Token
	increment  antlr.Token
}

func NewEmptyColumn_definitionContext() *Column_definitionContext {
	var p = new(Column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_definition
	return p
}

func (*Column_definitionContext) IsColumn_definitionContext() {}

func NewColumn_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_definitionContext {
	var p = new(Column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_definition

	return p
}

func (s *Column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_definitionContext) GetSeed() antlr.Token { return s.seed }

func (s *Column_definitionContext) GetIncrement() antlr.Token { return s.increment }

func (s *Column_definitionContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *Column_definitionContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *Column_definitionContext) GetConstraint() IIdContext { return s.constraint }

func (s *Column_definitionContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Column_definitionContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_definitionContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Column_definitionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Column_definitionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLATE, 0)
}

func (s *Column_definitionContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_definitionContext) AllNull_or_default() []INull_or_defaultContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INull_or_defaultContext)(nil)).Elem())
	var tst = make([]INull_or_defaultContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INull_or_defaultContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Null_or_default(i int) INull_or_defaultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_or_defaultContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INull_or_defaultContext)
}

func (s *Column_definitionContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *Column_definitionContext) ROWGUIDCOL() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWGUIDCOL, 0)
}

func (s *Column_definitionContext) AllColumn_constraint() []IColumn_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_constraintContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Column_constraint(i int) IColumn_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_constraintContext)
}

func (s *Column_definitionContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONSTRAINT, 0)
}

func (s *Column_definitionContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Column_definitionContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Column_definitionContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Column_definitionContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Column_definitionContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_definition(s)
	}
}

func (s *Column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_definition(s)
	}
}

func (s *Column_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_definition() (localctx IColumn_definitionContext) {
	localctx = NewColumn_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 678, TSqlParserRULE_column_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8351)
		p.Id()
	}
	p.SetState(8355)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserBIGINT, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserINT, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSMALLINT, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTINYINT, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(8352)
			p.Data_type()
		}

	case TSqlParserAS:
		{
			p.SetState(8353)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(8354)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(8359)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOLLATE {
		{
			p.SetState(8357)
			p.Match(TSqlParserCOLLATE)
		}
		{
			p.SetState(8358)
			p.Id()
		}

	}
	p.SetState(8362)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1174, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8361)
			p.Null_notnull()
		}

	}
	p.SetState(8385)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1179, p.GetParserRuleContext()) == 1 {
		p.SetState(8366)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCONSTRAINT {
			{
				p.SetState(8364)
				p.Match(TSqlParserCONSTRAINT)
			}
			{
				p.SetState(8365)

				var _x = p.Id()

				localctx.(*Column_definitionContext).constraint = _x
			}

		}
		{
			p.SetState(8368)
			p.Null_or_default()
		}
		p.SetState(8370)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1176, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8369)
				p.Null_or_default()
			}

		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1179, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(8372)
			p.Match(TSqlParserIDENTITY)
		}
		p.SetState(8378)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1177, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8373)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(8374)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Column_definitionContext).seed = _m
			}
			{
				p.SetState(8375)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(8376)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*Column_definitionContext).increment = _m
			}
			{
				p.SetState(8377)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(8383)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1178, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8380)
				p.Match(TSqlParserNOT)
			}
			{
				p.SetState(8381)
				p.Match(TSqlParserFOR)
			}
			{
				p.SetState(8382)
				p.Match(TSqlParserREPLICATION)
			}

		}

	}
	p.SetState(8388)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserROWGUIDCOL {
		{
			p.SetState(8387)
			p.Match(TSqlParserROWGUIDCOL)
		}

	}
	p.SetState(8393)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1181, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(8390)
				p.Column_constraint()
			}

		}
		p.SetState(8395)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1181, p.GetParserRuleContext())
	}

	return localctx
}

// IColumn_constraintContext is an interface to support dynamic dispatch.
type IColumn_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// GetPk returns the pk rule contexts.
	GetPk() IColumn_name_listContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// SetPk sets the pk rule contexts.
	SetPk(IColumn_name_listContext)

	// IsColumn_constraintContext differentiates from other interfaces.
	IsColumn_constraintContext()
}

type Column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	pk         IColumn_name_listContext
}

func NewEmptyColumn_constraintContext() *Column_constraintContext {
	var p = new(Column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_constraint
	return p
}

func (*Column_constraintContext) IsColumn_constraintContext() {}

func NewColumn_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_constraintContext {
	var p = new(Column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_constraint

	return p
}

func (s *Column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_constraintContext) GetConstraint() IIdContext { return s.constraint }

func (s *Column_constraintContext) GetPk() IColumn_name_listContext { return s.pk }

func (s *Column_constraintContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Column_constraintContext) SetPk(v IColumn_name_listContext) { s.pk = v }

func (s *Column_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK, 0)
}

func (s *Column_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Column_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(TSqlParserREFERENCES, 0)
}

func (s *Column_constraintContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Column_constraintContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Column_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONSTRAINT, 0)
}

func (s *Column_constraintContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Column_constraintContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIMARY, 0)
}

func (s *Column_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Column_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNIQUE, 0)
}

func (s *Column_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Column_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Column_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Column_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Column_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Column_constraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOREIGN, 0)
}

func (s *Column_constraintContext) On_delete() IOn_deleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_deleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_deleteContext)
}

func (s *Column_constraintContext) On_update() IOn_updateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_updateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_updateContext)
}

func (s *Column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_constraint(s)
	}
}

func (s *Column_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_constraint(s)
	}
}

func (s *Column_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_constraint() (localctx IColumn_constraintContext) {
	localctx = NewColumn_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 680, TSqlParserRULE_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONSTRAINT {
		{
			p.SetState(8396)
			p.Match(TSqlParserCONSTRAINT)
		}
		{
			p.SetState(8397)

			var _x = p.Id()

			localctx.(*Column_constraintContext).constraint = _x
		}

	}
	p.SetState(8437)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserPRIMARY, TSqlParserUNIQUE:
		p.SetState(8403)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserPRIMARY:
			{
				p.SetState(8400)
				p.Match(TSqlParserPRIMARY)
			}
			{
				p.SetState(8401)
				p.Match(TSqlParserKEY)
			}

		case TSqlParserUNIQUE:
			{
				p.SetState(8402)
				p.Match(TSqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(8406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCLUSTERED || _la == TSqlParserNONCLUSTERED {
			{
				p.SetState(8405)
				p.Clustered()
			}

		}
		p.SetState(8409)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1185, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8408)
				p.Index_options()
			}

		}

	case TSqlParserCHECK:
		{
			p.SetState(8411)
			p.Match(TSqlParserCHECK)
		}
		p.SetState(8415)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(8412)
				p.Match(TSqlParserNOT)
			}
			{
				p.SetState(8413)
				p.Match(TSqlParserFOR)
			}
			{
				p.SetState(8414)
				p.Match(TSqlParserREPLICATION)
			}

		}
		{
			p.SetState(8417)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8418)
			p.Search_condition()
		}
		{
			p.SetState(8419)
			p.Match(TSqlParserRR_BRACKET)
		}

	case TSqlParserFOREIGN, TSqlParserREFERENCES:
		p.SetState(8423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFOREIGN {
			{
				p.SetState(8421)
				p.Match(TSqlParserFOREIGN)
			}
			{
				p.SetState(8422)
				p.Match(TSqlParserKEY)
			}

		}
		{
			p.SetState(8425)
			p.Match(TSqlParserREFERENCES)
		}
		{
			p.SetState(8426)
			p.Table_name()
		}
		{
			p.SetState(8427)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8428)

			var _x = p.Column_name_list()

			localctx.(*Column_constraintContext).pk = _x
		}
		{
			p.SetState(8429)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(8431)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1188, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8430)
				p.On_delete()
			}

		}
		p.SetState(8434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserON {
			{
				p.SetState(8433)
				p.On_update()
			}

		}

	case TSqlParserNOT, TSqlParserNULL:
		{
			p.SetState(8436)
			p.Null_notnull()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConstraint returns the constraint rule contexts.
	GetConstraint() IIdContext

	// GetFk returns the fk rule contexts.
	GetFk() IColumn_name_listContext

	// GetPk returns the pk rule contexts.
	GetPk() IColumn_name_listContext

	// SetConstraint sets the constraint rule contexts.
	SetConstraint(IIdContext)

	// SetFk sets the fk rule contexts.
	SetFk(IColumn_name_listContext)

	// SetPk sets the pk rule contexts.
	SetPk(IColumn_name_listContext)

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	constraint IIdContext
	fk         IColumn_name_listContext
	pk         IColumn_name_listContext
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) GetConstraint() IIdContext { return s.constraint }

func (s *Table_constraintContext) GetFk() IColumn_name_listContext { return s.fk }

func (s *Table_constraintContext) GetPk() IColumn_name_listContext { return s.pk }

func (s *Table_constraintContext) SetConstraint(v IIdContext) { s.constraint = v }

func (s *Table_constraintContext) SetFk(v IColumn_name_listContext) { s.fk = v }

func (s *Table_constraintContext) SetPk(v IColumn_name_listContext) { s.pk = v }

func (s *Table_constraintContext) Column_name_list_with_order() IColumn_name_list_with_orderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_list_with_orderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_list_with_orderContext)
}

func (s *Table_constraintContext) CHECK() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECK, 0)
}

func (s *Table_constraintContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Table_constraintContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Table_constraintContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Table_constraintContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_constraintContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOREIGN, 0)
}

func (s *Table_constraintContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Table_constraintContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(TSqlParserREFERENCES, 0)
}

func (s *Table_constraintContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_constraintContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONSTRAINT, 0)
}

func (s *Table_constraintContext) AllColumn_name_list() []IColumn_name_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem())
	var tst = make([]IColumn_name_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_name_listContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Column_name_list(i int) IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Table_constraintContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIMARY, 0)
}

func (s *Table_constraintContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNIQUE, 0)
}

func (s *Table_constraintContext) Clustered() IClusteredContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClusteredContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClusteredContext)
}

func (s *Table_constraintContext) Index_options() IIndex_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionsContext)
}

func (s *Table_constraintContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Table_constraintContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Table_constraintContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPLICATION, 0)
}

func (s *Table_constraintContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Table_constraintContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Table_constraintContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserPLUS)
}

func (s *Table_constraintContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserPLUS, i)
}

func (s *Table_constraintContext) AllFunction_call() []IFunction_callContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_callContext)(nil)).Elem())
	var tst = make([]IFunction_callContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_callContext)
		}
	}

	return tst
}

func (s *Table_constraintContext) Function_call(i int) IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Table_constraintContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Table_constraintContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Table_constraintContext) On_delete() IOn_deleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_deleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_deleteContext)
}

func (s *Table_constraintContext) On_update() IOn_updateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_updateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_updateContext)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_constraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_constraint(s)
	}
}

func (s *Table_constraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_constraint(s)
	}
}

func (s *Table_constraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_constraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 682, TSqlParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONSTRAINT {
		{
			p.SetState(8439)
			p.Match(TSqlParserCONSTRAINT)
		}
		{
			p.SetState(8440)

			var _x = p.Id()

			localctx.(*Table_constraintContext).constraint = _x
		}

	}
	p.SetState(8504)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserPRIMARY, TSqlParserUNIQUE:
		p.SetState(8446)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserPRIMARY:
			{
				p.SetState(8443)
				p.Match(TSqlParserPRIMARY)
			}
			{
				p.SetState(8444)
				p.Match(TSqlParserKEY)
			}

		case TSqlParserUNIQUE:
			{
				p.SetState(8445)
				p.Match(TSqlParserUNIQUE)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(8449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCLUSTERED || _la == TSqlParserNONCLUSTERED {
			{
				p.SetState(8448)
				p.Clustered()
			}

		}
		{
			p.SetState(8451)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8452)
			p.Column_name_list_with_order()
		}
		{
			p.SetState(8453)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(8455)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1194, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8454)
				p.Index_options()
			}

		}
		p.SetState(8459)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserON {
			{
				p.SetState(8457)
				p.Match(TSqlParserON)
			}
			{
				p.SetState(8458)
				p.Id()
			}

		}

	case TSqlParserCHECK:
		{
			p.SetState(8461)
			p.Match(TSqlParserCHECK)
		}
		p.SetState(8465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(8462)
				p.Match(TSqlParserNOT)
			}
			{
				p.SetState(8463)
				p.Match(TSqlParserFOR)
			}
			{
				p.SetState(8464)
				p.Match(TSqlParserREPLICATION)
			}

		}
		{
			p.SetState(8467)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8468)
			p.Search_condition()
		}
		{
			p.SetState(8469)
			p.Match(TSqlParserRR_BRACKET)
		}

	case TSqlParserDEFAULT:
		{
			p.SetState(8471)
			p.Match(TSqlParserDEFAULT)
		}
		p.SetState(8473)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLR_BRACKET {
			{
				p.SetState(8472)
				p.Match(TSqlParserLR_BRACKET)
			}

		}
		p.SetState(8479)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-37)&-(0x1f+1)) == 0 && ((1<<uint((_la-37)))&((1<<(TSqlParserCALLED-37))|(1<<(TSqlParserCOALESCE-37))|(1<<(TSqlParserCONVERT-37)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(TSqlParserCURRENT_TIMESTAMP-75))|(1<<(TSqlParserCURRENT_USER-75))|(1<<(TSqlParserDATA_COMPRESSION-75)))) != 0) || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(TSqlParserIDENTITY-148))|(1<<(TSqlParserISNULL-148))|(1<<(TSqlParserKEY-148))|(1<<(TSqlParserLEFT-148)))) != 0) || _la == TSqlParserMASTER || _la == TSqlParserMAX_MEMORY || (((_la-221)&-(0x1f+1)) == 0 && ((1<<uint((_la-221)))&((1<<(TSqlParserNULLIF-221))|(1<<(TSqlParserOFFSETS-221))|(1<<(TSqlParserPAGE-221)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserRIGHT-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSESSION_USER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || (((_la-328)&-(0x1f+1)) == 0 && ((1<<uint((_la-328)))&((1<<(TSqlParserSTATE-328))|(1<<(TSqlParserSYSTEM_USER-328))|(1<<(TSqlParserTARGET-328)))) != 0) || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserBINARY_CHECKSUM-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDATEADD-447))|(1<<(TSqlParserDATEDIFF-447))|(1<<(TSqlParserDATENAME-447))|(1<<(TSqlParserDATEPART-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479))|(1<<(TSqlParserFIRST_VALUE-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGETDATE-511))|(1<<(TSqlParserGETUTCDATE-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAG-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLAST_VALUE-545))|(1<<(TSqlParserLEAD-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMIN_ACTIVE_ROWVERSION-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSTUFF-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserLOCAL_ID-747))|(1<<(TSqlParserDECIMAL-747))|(1<<(TSqlParserID-747)))) != 0) || _la == TSqlParserSTRING || _la == TSqlParserPLUS {
			p.SetState(8479)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserSTRING:
				{
					p.SetState(8475)
					p.Match(TSqlParserSTRING)
				}

			case TSqlParserPLUS:
				{
					p.SetState(8476)
					p.Match(TSqlParserPLUS)
				}

			case TSqlParserCALLED, TSqlParserCOALESCE, TSqlParserCONVERT, TSqlParserCURRENT_TIMESTAMP, TSqlParserCURRENT_USER, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserIDENTITY, TSqlParserISNULL, TSqlParserKEY, TSqlParserLEFT, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserNULLIF, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserRIGHT, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSESSION_USER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserSYSTEM_USER, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserBINARY_CHECKSUM, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDATEADD, TSqlParserDATEDIFF, TSqlParserDATENAME, TSqlParserDATEPART, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFIRST_VALUE, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGETDATE, TSqlParserGETUTCDATE, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAG, TSqlParserLAST, TSqlParserLAST_VALUE, TSqlParserLEAD, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMIN_ACTIVE_ROWVERSION, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSTUFF, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserID:
				{
					p.SetState(8477)
					p.Function_call()
				}

			case TSqlParserDECIMAL:
				{
					p.SetState(8478)
					p.Match(TSqlParserDECIMAL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(8481)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(8484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserRR_BRACKET {
			{
				p.SetState(8483)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(8486)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(8487)
			p.Id()
		}

	case TSqlParserFOREIGN:
		{
			p.SetState(8488)
			p.Match(TSqlParserFOREIGN)
		}
		{
			p.SetState(8489)
			p.Match(TSqlParserKEY)
		}
		{
			p.SetState(8490)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8491)

			var _x = p.Column_name_list()

			localctx.(*Table_constraintContext).fk = _x
		}
		{
			p.SetState(8492)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(8493)
			p.Match(TSqlParserREFERENCES)
		}
		{
			p.SetState(8494)
			p.Table_name()
		}
		{
			p.SetState(8495)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8496)

			var _x = p.Column_name_list()

			localctx.(*Table_constraintContext).pk = _x
		}
		{
			p.SetState(8497)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(8499)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1201, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8498)
				p.On_delete()
			}

		}
		p.SetState(8502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserON {
			{
				p.SetState(8501)
				p.On_update()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOn_deleteContext is an interface to support dynamic dispatch.
type IOn_deleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_deleteContext differentiates from other interfaces.
	IsOn_deleteContext()
}

type On_deleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_deleteContext() *On_deleteContext {
	var p = new(On_deleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_on_delete
	return p
}

func (*On_deleteContext) IsOn_deleteContext() {}

func NewOn_deleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_deleteContext {
	var p = new(On_deleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_on_delete

	return p
}

func (s *On_deleteContext) GetParser() antlr.Parser { return s.parser }

func (s *On_deleteContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *On_deleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETE, 0)
}

func (s *On_deleteContext) NO() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, 0)
}

func (s *On_deleteContext) ACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTION, 0)
}

func (s *On_deleteContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCASCADE, 0)
}

func (s *On_deleteContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *On_deleteContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *On_deleteContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *On_deleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_deleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_deleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOn_delete(s)
	}
}

func (s *On_deleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOn_delete(s)
	}
}

func (s *On_deleteContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOn_delete(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) On_delete() (localctx IOn_deleteContext) {
	localctx = NewOn_deleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 684, TSqlParserRULE_on_delete)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8506)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(8507)
		p.Match(TSqlParserDELETE)
	}
	p.SetState(8515)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1204, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(8508)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(8509)
			p.Match(TSqlParserACTION)
		}

	case 2:
		{
			p.SetState(8510)
			p.Match(TSqlParserCASCADE)
		}

	case 3:
		{
			p.SetState(8511)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8512)
			p.Match(TSqlParserNULL)
		}

	case 4:
		{
			p.SetState(8513)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8514)
			p.Match(TSqlParserDEFAULT)
		}

	}

	return localctx
}

// IOn_updateContext is an interface to support dynamic dispatch.
type IOn_updateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_updateContext differentiates from other interfaces.
	IsOn_updateContext()
}

type On_updateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_updateContext() *On_updateContext {
	var p = new(On_updateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_on_update
	return p
}

func (*On_updateContext) IsOn_updateContext() {}

func NewOn_updateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_updateContext {
	var p = new(On_updateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_on_update

	return p
}

func (s *On_updateContext) GetParser() antlr.Parser { return s.parser }

func (s *On_updateContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *On_updateContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *On_updateContext) NO() antlr.TerminalNode {
	return s.GetToken(TSqlParserNO, 0)
}

func (s *On_updateContext) ACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTION, 0)
}

func (s *On_updateContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCASCADE, 0)
}

func (s *On_updateContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *On_updateContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *On_updateContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *On_updateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_updateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_updateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOn_update(s)
	}
}

func (s *On_updateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOn_update(s)
	}
}

func (s *On_updateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOn_update(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) On_update() (localctx IOn_updateContext) {
	localctx = NewOn_updateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 686, TSqlParserRULE_on_update)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8517)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(8518)
		p.Match(TSqlParserUPDATE)
	}
	p.SetState(8526)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1205, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(8519)
			p.Match(TSqlParserNO)
		}
		{
			p.SetState(8520)
			p.Match(TSqlParserACTION)
		}

	case 2:
		{
			p.SetState(8521)
			p.Match(TSqlParserCASCADE)
		}

	case 3:
		{
			p.SetState(8522)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8523)
			p.Match(TSqlParserNULL)
		}

	case 4:
		{
			p.SetState(8524)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8525)
			p.Match(TSqlParserDEFAULT)
		}

	}

	return localctx
}

// IIndex_optionsContext is an interface to support dynamic dispatch.
type IIndex_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionsContext differentiates from other interfaces.
	IsIndex_optionsContext()
}

type Index_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionsContext() *Index_optionsContext {
	var p = new(Index_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_index_options
	return p
}

func (*Index_optionsContext) IsIndex_optionsContext() {}

func NewIndex_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionsContext {
	var p = new(Index_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_index_options

	return p
}

func (s *Index_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Index_optionsContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *Index_optionsContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *Index_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterIndex_options(s)
	}
}

func (s *Index_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitIndex_options(s)
	}
}

func (s *Index_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitIndex_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Index_options() (localctx IIndex_optionsContext) {
	localctx = NewIndex_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 688, TSqlParserRULE_index_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8528)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(8529)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(8530)
		p.Index_option()
	}
	p.SetState(8535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(8531)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(8532)
			p.Index_option()
		}

		p.SetState(8537)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(8538)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IIndex_optionContext is an interface to support dynamic dispatch.
type IIndex_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionContext differentiates from other interfaces.
	IsIndex_optionContext()
}

type Index_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionContext() *Index_optionContext {
	var p = new(Index_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_index_option
	return p
}

func (*Index_optionContext) IsIndex_optionContext() {}

func NewIndex_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionContext {
	var p = new(Index_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_index_option

	return p
}

func (s *Index_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionContext) AllSimple_id() []ISimple_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimple_idContext)(nil)).Elem())
	var tst = make([]ISimple_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimple_idContext)
		}
	}

	return tst
}

func (s *Index_optionContext) Simple_id(i int) ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Index_optionContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Index_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Index_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterIndex_option(s)
	}
}

func (s *Index_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitIndex_option(s)
	}
}

func (s *Index_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitIndex_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Index_option() (localctx IIndex_optionContext) {
	localctx = NewIndex_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 690, TSqlParserRULE_index_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8540)
		p.Simple_id()
	}
	{
		p.SetState(8541)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(8545)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserID:
		{
			p.SetState(8542)
			p.Simple_id()
		}

	case TSqlParserOFF, TSqlParserON:
		{
			p.SetState(8543)
			p.On_off()
		}

	case TSqlParserDECIMAL:
		{
			p.SetState(8544)
			p.Match(TSqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclare_cursorContext is an interface to support dynamic dispatch.
type IDeclare_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_cursorContext differentiates from other interfaces.
	IsDeclare_cursorContext()
}

type Declare_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_cursorContext() *Declare_cursorContext {
	var p = new(Declare_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_declare_cursor
	return p
}

func (*Declare_cursorContext) IsDeclare_cursorContext() {}

func NewDeclare_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_cursorContext {
	var p = new(Declare_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_declare_cursor

	return p
}

func (s *Declare_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_cursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECLARE, 0)
}

func (s *Declare_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Declare_cursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURSOR, 0)
}

func (s *Declare_cursorContext) AllFOR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserFOR)
}

func (s *Declare_cursorContext) FOR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, i)
}

func (s *Declare_cursorContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_cursorContext) Declare_set_cursor_common() IDeclare_set_cursor_commonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_commonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_commonContext)
}

func (s *Declare_cursorContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSENSITIVE, 0)
}

func (s *Declare_cursorContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCROLL, 0)
}

func (s *Declare_cursorContext) READ() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD, 0)
}

func (s *Declare_cursorContext) ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLY, 0)
}

func (s *Declare_cursorContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUPDATE, 0)
}

func (s *Declare_cursorContext) OF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOF, 0)
}

func (s *Declare_cursorContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Declare_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDeclare_cursor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Declare_cursor() (localctx IDeclare_cursorContext) {
	localctx = NewDeclare_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 692, TSqlParserRULE_declare_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8547)
		p.Match(TSqlParserDECLARE)
	}
	{
		p.SetState(8548)
		p.Cursor_name()
	}
	p.SetState(8580)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1215, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(8549)
			p.Match(TSqlParserCURSOR)
		}
		p.SetState(8559)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1210, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8550)
				p.Declare_set_cursor_common()
			}
			p.SetState(8557)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserFOR {
				{
					p.SetState(8551)
					p.Match(TSqlParserFOR)
				}
				{
					p.SetState(8552)
					p.Match(TSqlParserUPDATE)
				}
				p.SetState(8555)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == TSqlParserOF {
					{
						p.SetState(8553)
						p.Match(TSqlParserOF)
					}
					{
						p.SetState(8554)
						p.Column_name_list()
					}

				}

			}

		}

	case 2:
		p.SetState(8562)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserINSENSITIVE {
			{
				p.SetState(8561)
				p.Match(TSqlParserINSENSITIVE)
			}

		}
		p.SetState(8565)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserSCROLL {
			{
				p.SetState(8564)
				p.Match(TSqlParserSCROLL)
			}

		}
		{
			p.SetState(8567)
			p.Match(TSqlParserCURSOR)
		}
		{
			p.SetState(8568)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(8569)
			p.Select_statement()
		}
		p.SetState(8578)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserFOR {
			{
				p.SetState(8570)
				p.Match(TSqlParserFOR)
			}
			p.SetState(8576)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case TSqlParserREAD:
				{
					p.SetState(8571)
					p.Match(TSqlParserREAD)
				}
				{
					p.SetState(8572)
					p.Match(TSqlParserONLY)
				}

			case TSqlParserUPDATE:
				{
					p.SetState(8573)
					p.Match(TSqlParserUPDATE)
				}

			case TSqlParserOF:
				{
					p.SetState(8574)
					p.Match(TSqlParserOF)
				}
				{
					p.SetState(8575)
					p.Column_name_list()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}

	}
	p.SetState(8583)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1216, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8582)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IDeclare_set_cursor_commonContext is an interface to support dynamic dispatch.
type IDeclare_set_cursor_commonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_set_cursor_commonContext differentiates from other interfaces.
	IsDeclare_set_cursor_commonContext()
}

type Declare_set_cursor_commonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_set_cursor_commonContext() *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_declare_set_cursor_common
	return p
}

func (*Declare_set_cursor_commonContext) IsDeclare_set_cursor_commonContext() {}

func NewDeclare_set_cursor_commonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_set_cursor_commonContext {
	var p = new(Declare_set_cursor_commonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_declare_set_cursor_common

	return p
}

func (s *Declare_set_cursor_commonContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_set_cursor_commonContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Declare_set_cursor_commonContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_set_cursor_commonContext) AllDeclare_set_cursor_common_partial() []IDeclare_set_cursor_common_partialContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_set_cursor_common_partialContext)(nil)).Elem())
	var tst = make([]IDeclare_set_cursor_common_partialContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_set_cursor_common_partialContext)
		}
	}

	return tst
}

func (s *Declare_set_cursor_commonContext) Declare_set_cursor_common_partial(i int) IDeclare_set_cursor_common_partialContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_set_cursor_common_partialContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_set_cursor_common_partialContext)
}

func (s *Declare_set_cursor_commonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_set_cursor_commonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_set_cursor_commonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDeclare_set_cursor_common(s)
	}
}

func (s *Declare_set_cursor_commonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDeclare_set_cursor_common(s)
	}
}

func (s *Declare_set_cursor_commonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDeclare_set_cursor_common(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Declare_set_cursor_common() (localctx IDeclare_set_cursor_commonContext) {
	localctx = NewDeclare_set_cursor_commonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 694, TSqlParserRULE_declare_set_cursor_common)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserDYNAMIC || _la == TSqlParserFAST_FORWARD || _la == TSqlParserFORWARD_ONLY || _la == TSqlParserGLOBAL || _la == TSqlParserKEYSET || _la == TSqlParserLOCAL || _la == TSqlParserOPTIMISTIC || _la == TSqlParserREAD_ONLY || (((_la-693)&-(0x1f+1)) == 0 && ((1<<uint((_la-693)))&((1<<(TSqlParserSCROLL-693))|(1<<(TSqlParserSCROLL_LOCKS-693))|(1<<(TSqlParserSTATIC-693)))) != 0) || _la == TSqlParserTYPE_WARNING {
		{
			p.SetState(8585)
			p.Declare_set_cursor_common_partial()
		}

		p.SetState(8590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(8591)
		p.Match(TSqlParserFOR)
	}
	{
		p.SetState(8592)
		p.Select_statement()
	}

	return localctx
}

// IDeclare_set_cursor_common_partialContext is an interface to support dynamic dispatch.
type IDeclare_set_cursor_common_partialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_set_cursor_common_partialContext differentiates from other interfaces.
	IsDeclare_set_cursor_common_partialContext()
}

type Declare_set_cursor_common_partialContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_set_cursor_common_partialContext() *Declare_set_cursor_common_partialContext {
	var p = new(Declare_set_cursor_common_partialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_declare_set_cursor_common_partial
	return p
}

func (*Declare_set_cursor_common_partialContext) IsDeclare_set_cursor_common_partialContext() {}

func NewDeclare_set_cursor_common_partialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_set_cursor_common_partialContext {
	var p = new(Declare_set_cursor_common_partialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_declare_set_cursor_common_partial

	return p
}

func (s *Declare_set_cursor_common_partialContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_set_cursor_common_partialContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL, 0)
}

func (s *Declare_set_cursor_common_partialContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Declare_set_cursor_common_partialContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORWARD_ONLY, 0)
}

func (s *Declare_set_cursor_common_partialContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCROLL, 0)
}

func (s *Declare_set_cursor_common_partialContext) STATIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATIC, 0)
}

func (s *Declare_set_cursor_common_partialContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEYSET, 0)
}

func (s *Declare_set_cursor_common_partialContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserDYNAMIC, 0)
}

func (s *Declare_set_cursor_common_partialContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAST_FORWARD, 0)
}

func (s *Declare_set_cursor_common_partialContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY, 0)
}

func (s *Declare_set_cursor_common_partialContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCROLL_LOCKS, 0)
}

func (s *Declare_set_cursor_common_partialContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTIMISTIC, 0)
}

func (s *Declare_set_cursor_common_partialContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE_WARNING, 0)
}

func (s *Declare_set_cursor_common_partialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_set_cursor_common_partialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_set_cursor_common_partialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDeclare_set_cursor_common_partial(s)
	}
}

func (s *Declare_set_cursor_common_partialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDeclare_set_cursor_common_partial(s)
	}
}

func (s *Declare_set_cursor_common_partialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDeclare_set_cursor_common_partial(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Declare_set_cursor_common_partial() (localctx IDeclare_set_cursor_common_partialContext) {
	localctx = NewDeclare_set_cursor_common_partialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 696, TSqlParserRULE_declare_set_cursor_common_partial)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8599)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserGLOBAL, TSqlParserLOCAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(8594)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserGLOBAL || _la == TSqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserFORWARD_ONLY, TSqlParserSCROLL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(8595)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFORWARD_ONLY || _la == TSqlParserSCROLL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserDYNAMIC, TSqlParserFAST_FORWARD, TSqlParserKEYSET, TSqlParserSTATIC:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(8596)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDYNAMIC || _la == TSqlParserFAST_FORWARD || _la == TSqlParserKEYSET || _la == TSqlParserSTATIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserOPTIMISTIC, TSqlParserREAD_ONLY, TSqlParserSCROLL_LOCKS:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(8597)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOPTIMISTIC || _la == TSqlParserREAD_ONLY || _la == TSqlParserSCROLL_LOCKS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTYPE_WARNING:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8598)
			p.Match(TSqlParserTYPE_WARNING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFetch_cursorContext is an interface to support dynamic dispatch.
type IFetch_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFetch_cursorContext differentiates from other interfaces.
	IsFetch_cursorContext()
}

type Fetch_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFetch_cursorContext() *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_fetch_cursor
	return p
}

func (*Fetch_cursorContext) IsFetch_cursorContext() {}

func NewFetch_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Fetch_cursorContext {
	var p = new(Fetch_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_fetch_cursor

	return p
}

func (s *Fetch_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Fetch_cursorContext) FETCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserFETCH, 0)
}

func (s *Fetch_cursorContext) Cursor_name() ICursor_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_nameContext)
}

func (s *Fetch_cursorContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Fetch_cursorContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Fetch_cursorContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Fetch_cursorContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCAL_ID)
}

func (s *Fetch_cursorContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, i)
}

func (s *Fetch_cursorContext) NEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEXT, 0)
}

func (s *Fetch_cursorContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIOR, 0)
}

func (s *Fetch_cursorContext) FIRST() antlr.TerminalNode {
	return s.GetToken(TSqlParserFIRST, 0)
}

func (s *Fetch_cursorContext) LAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLAST, 0)
}

func (s *Fetch_cursorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Fetch_cursorContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserABSOLUTE, 0)
}

func (s *Fetch_cursorContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRELATIVE, 0)
}

func (s *Fetch_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Fetch_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Fetch_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFetch_cursor(s)
	}
}

func (s *Fetch_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFetch_cursor(s)
	}
}

func (s *Fetch_cursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFetch_cursor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Fetch_cursor() (localctx IFetch_cursorContext) {
	localctx = NewFetch_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 698, TSqlParserRULE_fetch_cursor)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8601)
		p.Match(TSqlParserFETCH)
	}
	p.SetState(8611)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1220, p.GetParserRuleContext()) == 1 {
		p.SetState(8608)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserNEXT:
			{
				p.SetState(8602)
				p.Match(TSqlParserNEXT)
			}

		case TSqlParserPRIOR:
			{
				p.SetState(8603)
				p.Match(TSqlParserPRIOR)
			}

		case TSqlParserFIRST:
			{
				p.SetState(8604)
				p.Match(TSqlParserFIRST)
			}

		case TSqlParserLAST:
			{
				p.SetState(8605)
				p.Match(TSqlParserLAST)
			}

		case TSqlParserABSOLUTE, TSqlParserRELATIVE:
			p.SetState(8606)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserABSOLUTE || _la == TSqlParserRELATIVE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(8607)
				p.expression(0)
			}

		case TSqlParserFROM:

		default:
		}
		{
			p.SetState(8610)
			p.Match(TSqlParserFROM)
		}

	}
	p.SetState(8614)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1221, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8613)
			p.Match(TSqlParserGLOBAL)
		}

	}
	{
		p.SetState(8616)
		p.Cursor_name()
	}
	p.SetState(8626)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(8617)
			p.Match(TSqlParserINTO)
		}
		{
			p.SetState(8618)
			p.Match(TSqlParserLOCAL_ID)
		}
		p.SetState(8623)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(8619)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(8620)
				p.Match(TSqlParserLOCAL_ID)
			}

			p.SetState(8625)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(8629)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1224, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8628)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// ISet_specialContext is an interface to support dynamic dispatch.
type ISet_specialContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_specialContext differentiates from other interfaces.
	IsSet_specialContext()
}

type Set_specialContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_specialContext() *Set_specialContext {
	var p = new(Set_specialContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_set_special
	return p
}

func (*Set_specialContext) IsSet_specialContext() {}

func NewSet_specialContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_specialContext {
	var p = new(Set_specialContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_set_special

	return p
}

func (s *Set_specialContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_specialContext) SET() antlr.TerminalNode {
	return s.GetToken(TSqlParserSET, 0)
}

func (s *Set_specialContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Set_specialContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Set_specialContext) Constant_LOCAL_ID() IConstant_LOCAL_IDContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_LOCAL_IDContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_LOCAL_IDContext)
}

func (s *Set_specialContext) On_off() IOn_offContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_offContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_offContext)
}

func (s *Set_specialContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSACTION, 0)
}

func (s *Set_specialContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserISOLATION, 0)
}

func (s *Set_specialContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLEVEL, 0)
}

func (s *Set_specialContext) READ() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD, 0)
}

func (s *Set_specialContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNCOMMITTED, 0)
}

func (s *Set_specialContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMITTED, 0)
}

func (s *Set_specialContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPEATABLE, 0)
}

func (s *Set_specialContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSNAPSHOT, 0)
}

func (s *Set_specialContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERIALIZABLE, 0)
}

func (s *Set_specialContext) IDENTITY_INSERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY_INSERT, 0)
}

func (s *Set_specialContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Set_specialContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_NULLS, 0)
}

func (s *Set_specialContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Set_specialContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_PADDING, 0)
}

func (s *Set_specialContext) ANSI_WARNINGS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_WARNINGS, 0)
}

func (s *Set_specialContext) Modify_method() IModify_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModify_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModify_methodContext)
}

func (s *Set_specialContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_specialContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_specialContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSet_special(s)
	}
}

func (s *Set_specialContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSet_special(s)
	}
}

func (s *Set_specialContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSet_special(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Set_special() (localctx ISet_specialContext) {
	localctx = NewSet_specialContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 700, TSqlParserRULE_set_special)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8679)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1230, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8631)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8632)
			p.Id()
		}
		p.SetState(8636)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(8633)
				p.Id()
			}

		case TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
			{
				p.SetState(8634)
				p.Constant_LOCAL_ID()
			}

		case TSqlParserOFF, TSqlParserON:
			{
				p.SetState(8635)
				p.On_off()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(8639)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1226, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8638)
				p.Match(TSqlParserSEMI)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8641)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8642)
			p.Match(TSqlParserTRANSACTION)
		}
		{
			p.SetState(8643)
			p.Match(TSqlParserISOLATION)
		}
		{
			p.SetState(8644)
			p.Match(TSqlParserLEVEL)
		}
		p.SetState(8653)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1227, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(8645)
				p.Match(TSqlParserREAD)
			}
			{
				p.SetState(8646)
				p.Match(TSqlParserUNCOMMITTED)
			}

		case 2:
			{
				p.SetState(8647)
				p.Match(TSqlParserREAD)
			}
			{
				p.SetState(8648)
				p.Match(TSqlParserCOMMITTED)
			}

		case 3:
			{
				p.SetState(8649)
				p.Match(TSqlParserREPEATABLE)
			}
			{
				p.SetState(8650)
				p.Match(TSqlParserREAD)
			}

		case 4:
			{
				p.SetState(8651)
				p.Match(TSqlParserSNAPSHOT)
			}

		case 5:
			{
				p.SetState(8652)
				p.Match(TSqlParserSERIALIZABLE)
			}

		}
		p.SetState(8656)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1228, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8655)
				p.Match(TSqlParserSEMI)
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8658)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8659)
			p.Match(TSqlParserIDENTITY_INSERT)
		}
		{
			p.SetState(8660)
			p.Table_name()
		}
		{
			p.SetState(8661)
			p.On_off()
		}
		p.SetState(8663)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1229, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8662)
				p.Match(TSqlParserSEMI)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8665)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8666)
			p.Match(TSqlParserANSI_NULLS)
		}
		{
			p.SetState(8667)
			p.On_off()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8668)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8669)
			p.Match(TSqlParserQUOTED_IDENTIFIER)
		}
		{
			p.SetState(8670)
			p.On_off()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8671)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8672)
			p.Match(TSqlParserANSI_PADDING)
		}
		{
			p.SetState(8673)
			p.On_off()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8674)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8675)
			p.Match(TSqlParserANSI_WARNINGS)
		}
		{
			p.SetState(8676)
			p.On_off()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8677)
			p.Match(TSqlParserSET)
		}
		{
			p.SetState(8678)
			p.Modify_method()
		}

	}

	return localctx
}

// IConstant_LOCAL_IDContext is an interface to support dynamic dispatch.
type IConstant_LOCAL_IDContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_LOCAL_IDContext differentiates from other interfaces.
	IsConstant_LOCAL_IDContext()
}

type Constant_LOCAL_IDContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_LOCAL_IDContext() *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_constant_LOCAL_ID
	return p
}

func (*Constant_LOCAL_IDContext) IsConstant_LOCAL_IDContext() {}

func NewConstant_LOCAL_IDContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_LOCAL_IDContext {
	var p = new(Constant_LOCAL_IDContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_constant_LOCAL_ID

	return p
}

func (s *Constant_LOCAL_IDContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_LOCAL_IDContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_LOCAL_IDContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Constant_LOCAL_IDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_LOCAL_IDContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_LOCAL_IDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterConstant_LOCAL_ID(s)
	}
}

func (s *Constant_LOCAL_IDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitConstant_LOCAL_ID(s)
	}
}

func (s *Constant_LOCAL_IDContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitConstant_LOCAL_ID(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Constant_LOCAL_ID() (localctx IConstant_LOCAL_IDContext) {
	localctx = NewConstant_LOCAL_IDContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 702, TSqlParserRULE_constant_LOCAL_ID)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8683)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8681)
			p.Constant()
		}

	case TSqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8682)
			p.Match(TSqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) GetOp() antlr.Token { return s.op }

func (s *ExpressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *ExpressionContext) Primitive_expression() IPrimitive_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimitive_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimitive_expressionContext)
}

func (s *ExpressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *ExpressionContext) Case_expression() ICase_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_expressionContext)
}

func (s *ExpressionContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *ExpressionContext) Bracket_expression() IBracket_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBracket_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBracket_expressionContext)
}

func (s *ExpressionContext) Unary_operator_expression() IUnary_operator_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_operator_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_operator_expressionContext)
}

func (s *ExpressionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *ExpressionContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *ExpressionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOLLATE, 0)
}

func (s *ExpressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *TSqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 704
	p.EnterRecursionRule(localctx, 704, TSqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8693)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1232, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(8686)
			p.Primitive_expression()
		}

	case 2:
		{
			p.SetState(8687)
			p.Function_call()
		}

	case 3:
		{
			p.SetState(8688)
			p.Case_expression()
		}

	case 4:
		{
			p.SetState(8689)
			p.Full_column_name()
		}

	case 5:
		{
			p.SetState(8690)
			p.Bracket_expression()
		}

	case 6:
		{
			p.SetState(8691)
			p.Unary_operator_expression()
		}

	case 7:
		{
			p.SetState(8692)
			p.Over_clause()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(8714)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1234, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(8712)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1233, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_expression)
				p.SetState(8695)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(8696)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ExpressionContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(TSqlParserSTAR-807))|(1<<(TSqlParserDIVIDE-807))|(1<<(TSqlParserMODULE-807)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ExpressionContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(8697)
					p.expression(6)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_expression)
				p.SetState(8698)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				p.SetState(8699)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*ExpressionContext).op = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-810)&-(0x1f+1)) == 0 && ((1<<uint((_la-810)))&((1<<(TSqlParserPLUS-810))|(1<<(TSqlParserMINUS-810))|(1<<(TSqlParserBIT_OR-810))|(1<<(TSqlParserBIT_AND-810))|(1<<(TSqlParserBIT_XOR-810)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*ExpressionContext).op = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(8700)
					p.expression(5)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_expression)
				p.SetState(8701)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(8702)
					p.Comparison_operator()
				}
				{
					p.SetState(8703)
					p.expression(4)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_expression)
				p.SetState(8705)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(8706)
					p.Assignment_operator()
				}
				{
					p.SetState(8707)
					p.expression(3)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, TSqlParserRULE_expression)
				p.SetState(8709)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(8710)
					p.Match(TSqlParserCOLLATE)
				}
				{
					p.SetState(8711)
					p.Id()
				}

			}

		}
		p.SetState(8716)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1234, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimitive_expressionContext is an interface to support dynamic dispatch.
type IPrimitive_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimitive_expressionContext differentiates from other interfaces.
	IsPrimitive_expressionContext()
}

type Primitive_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimitive_expressionContext() *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_primitive_expression
	return p
}

func (*Primitive_expressionContext) IsPrimitive_expressionContext() {}

func NewPrimitive_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Primitive_expressionContext {
	var p = new(Primitive_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_primitive_expression

	return p
}

func (s *Primitive_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Primitive_expressionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Primitive_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Primitive_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Primitive_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Primitive_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Primitive_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Primitive_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPrimitive_expression(s)
	}
}

func (s *Primitive_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPrimitive_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Primitive_expression() (localctx IPrimitive_expressionContext) {
	localctx = NewPrimitive_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 706, TSqlParserRULE_primitive_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8721)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDEFAULT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8717)
			p.Match(TSqlParserDEFAULT)
		}

	case TSqlParserNULL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8718)
			p.Match(TSqlParserNULL)
		}

	case TSqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8719)
			p.Match(TSqlParserLOCAL_ID)
		}

	case TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8720)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICase_expressionContext is an interface to support dynamic dispatch.
type ICase_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCaseExpr returns the caseExpr rule contexts.
	GetCaseExpr() IExpressionContext

	// GetElseExpr returns the elseExpr rule contexts.
	GetElseExpr() IExpressionContext

	// SetCaseExpr sets the caseExpr rule contexts.
	SetCaseExpr(IExpressionContext)

	// SetElseExpr sets the elseExpr rule contexts.
	SetElseExpr(IExpressionContext)

	// IsCase_expressionContext differentiates from other interfaces.
	IsCase_expressionContext()
}

type Case_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	caseExpr IExpressionContext
	elseExpr IExpressionContext
}

func NewEmptyCase_expressionContext() *Case_expressionContext {
	var p = new(Case_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_case_expression
	return p
}

func (*Case_expressionContext) IsCase_expressionContext() {}

func NewCase_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_expressionContext {
	var p = new(Case_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_case_expression

	return p
}

func (s *Case_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_expressionContext) GetCaseExpr() IExpressionContext { return s.caseExpr }

func (s *Case_expressionContext) GetElseExpr() IExpressionContext { return s.elseExpr }

func (s *Case_expressionContext) SetCaseExpr(v IExpressionContext) { s.caseExpr = v }

func (s *Case_expressionContext) SetElseExpr(v IExpressionContext) { s.elseExpr = v }

func (s *Case_expressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCASE, 0)
}

func (s *Case_expressionContext) END() antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, 0)
}

func (s *Case_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_expressionContext) AllSwitch_section() []ISwitch_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_section(i int) ISwitch_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_sectionContext)
}

func (s *Case_expressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserELSE, 0)
}

func (s *Case_expressionContext) AllSwitch_search_condition_section() []ISwitch_search_condition_sectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem())
	var tst = make([]ISwitch_search_condition_sectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISwitch_search_condition_sectionContext)
		}
	}

	return tst
}

func (s *Case_expressionContext) Switch_search_condition_section(i int) ISwitch_search_condition_sectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitch_search_condition_sectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISwitch_search_condition_sectionContext)
}

func (s *Case_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCase_expression(s)
	}
}

func (s *Case_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCase_expression(s)
	}
}

func (s *Case_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCase_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Case_expression() (localctx ICase_expressionContext) {
	localctx = NewCase_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 708, TSqlParserRULE_case_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8748)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1240, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8723)
			p.Match(TSqlParserCASE)
		}
		{
			p.SetState(8724)

			var _x = p.expression(0)

			localctx.(*Case_expressionContext).caseExpr = _x
		}
		p.SetState(8726)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserWHEN {
			{
				p.SetState(8725)
				p.Switch_section()
			}

			p.SetState(8728)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(8732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserELSE {
			{
				p.SetState(8730)
				p.Match(TSqlParserELSE)
			}
			{
				p.SetState(8731)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(8734)
			p.Match(TSqlParserEND)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8736)
			p.Match(TSqlParserCASE)
		}
		p.SetState(8738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == TSqlParserWHEN {
			{
				p.SetState(8737)
				p.Switch_search_condition_section()
			}

			p.SetState(8740)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(8744)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserELSE {
			{
				p.SetState(8742)
				p.Match(TSqlParserELSE)
			}
			{
				p.SetState(8743)

				var _x = p.expression(0)

				localctx.(*Case_expressionContext).elseExpr = _x
			}

		}
		{
			p.SetState(8746)
			p.Match(TSqlParserEND)
		}

	}

	return localctx
}

// IUnary_operator_expressionContext is an interface to support dynamic dispatch.
type IUnary_operator_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOp returns the op token.
	GetOp() antlr.Token

	// SetOp sets the op token.
	SetOp(antlr.Token)

	// IsUnary_operator_expressionContext differentiates from other interfaces.
	IsUnary_operator_expressionContext()
}

type Unary_operator_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	op     antlr.Token
}

func NewEmptyUnary_operator_expressionContext() *Unary_operator_expressionContext {
	var p = new(Unary_operator_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_unary_operator_expression
	return p
}

func (*Unary_operator_expressionContext) IsUnary_operator_expressionContext() {}

func NewUnary_operator_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operator_expressionContext {
	var p = new(Unary_operator_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_unary_operator_expression

	return p
}

func (s *Unary_operator_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operator_expressionContext) GetOp() antlr.Token { return s.op }

func (s *Unary_operator_expressionContext) SetOp(v antlr.Token) { s.op = v }

func (s *Unary_operator_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Unary_operator_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operator_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operator_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUnary_operator_expression(s)
	}
}

func (s *Unary_operator_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUnary_operator_expression(s)
	}
}

func (s *Unary_operator_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUnary_operator_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Unary_operator_expression() (localctx IUnary_operator_expressionContext) {
	localctx = NewUnary_operator_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 710, TSqlParserRULE_unary_operator_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8754)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserBIT_NOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8750)
			p.Match(TSqlParserBIT_NOT)
		}
		{
			p.SetState(8751)
			p.expression(0)
		}

	case TSqlParserPLUS, TSqlParserMINUS:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(8752)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Unary_operator_expressionContext).op = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserPLUS || _la == TSqlParserMINUS) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Unary_operator_expressionContext).op = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(8753)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBracket_expressionContext is an interface to support dynamic dispatch.
type IBracket_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBracket_expressionContext differentiates from other interfaces.
	IsBracket_expressionContext()
}

type Bracket_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBracket_expressionContext() *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_bracket_expression
	return p
}

func (*Bracket_expressionContext) IsBracket_expressionContext() {}

func NewBracket_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bracket_expressionContext {
	var p = new(Bracket_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_bracket_expression

	return p
}

func (s *Bracket_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bracket_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Bracket_expressionContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Bracket_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bracket_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bracket_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBracket_expression(s)
	}
}

func (s *Bracket_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBracket_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Bracket_expression() (localctx IBracket_expressionContext) {
	localctx = NewBracket_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 712, TSqlParserRULE_bracket_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1242, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8756)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8757)
			p.expression(0)
		}
		{
			p.SetState(8758)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8760)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8761)
			p.Subquery()
		}
		{
			p.SetState(8762)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IConstant_expressionContext is an interface to support dynamic dispatch.
type IConstant_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_expressionContext differentiates from other interfaces.
	IsConstant_expressionContext()
}

type Constant_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_expressionContext() *Constant_expressionContext {
	var p = new(Constant_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_constant_expression
	return p
}

func (*Constant_expressionContext) IsConstant_expressionContext() {}

func NewConstant_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_expressionContext {
	var p = new(Constant_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_constant_expression

	return p
}

func (s *Constant_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_expressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Constant_expressionContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_expressionContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Constant_expressionContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Constant_expressionContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Constant_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterConstant_expression(s)
	}
}

func (s *Constant_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitConstant_expression(s)
	}
}

func (s *Constant_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitConstant_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Constant_expression() (localctx IConstant_expressionContext) {
	localctx = NewConstant_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 714, TSqlParserRULE_constant_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8774)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1243, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8766)
			p.Match(TSqlParserNULL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8767)
			p.Constant()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8768)
			p.Function_call()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8769)
			p.Match(TSqlParserLOCAL_ID)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8770)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8771)
			p.Constant_expression()
		}
		{
			p.SetState(8772)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (s *SubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Subquery() (localctx ISubqueryContext) {
	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 716, TSqlParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8776)
		p.Select_statement()
	}

	return localctx
}

// IWith_expressionContext is an interface to support dynamic dispatch.
type IWith_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_expressionContext differentiates from other interfaces.
	IsWith_expressionContext()
}

type With_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_expressionContext() *With_expressionContext {
	var p = new(With_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_with_expression
	return p
}

func (*With_expressionContext) IsWith_expressionContext() {}

func NewWith_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_expressionContext {
	var p = new(With_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_with_expression

	return p
}

func (s *With_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *With_expressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *With_expressionContext) AllCommon_table_expression() []ICommon_table_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem())
	var tst = make([]ICommon_table_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommon_table_expressionContext)
		}
	}

	return tst
}

func (s *With_expressionContext) Common_table_expression(i int) ICommon_table_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommon_table_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommon_table_expressionContext)
}

func (s *With_expressionContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(TSqlParserXMLNAMESPACES, 0)
}

func (s *With_expressionContext) BLOCKING_HIERARCHY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOCKING_HIERARCHY, 0)
}

func (s *With_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *With_expressionContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *With_expressionContext) Full_column_name_list() IFull_column_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_name_listContext)
}

func (s *With_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWith_expression(s)
	}
}

func (s *With_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWith_expression(s)
	}
}

func (s *With_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWith_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) With_expression() (localctx IWith_expressionContext) {
	localctx = NewWith_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 718, TSqlParserRULE_with_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8804)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1247, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8778)
			p.Match(TSqlParserWITH)
		}
		p.SetState(8781)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1244, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(8779)
				p.Match(TSqlParserXMLNAMESPACES)
			}
			{
				p.SetState(8780)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(8783)
			p.Common_table_expression()
		}
		p.SetState(8788)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(8784)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(8785)
				p.Common_table_expression()
			}

			p.SetState(8790)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8791)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(8792)
			p.Match(TSqlParserBLOCKING_HIERARCHY)
		}
		p.SetState(8797)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLR_BRACKET {
			{
				p.SetState(8793)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(8794)
				p.Full_column_name_list()
			}
			{
				p.SetState(8795)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(8799)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(8800)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8801)
			p.Select_statement()
		}
		{
			p.SetState(8802)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ICommon_table_expressionContext is an interface to support dynamic dispatch.
type ICommon_table_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetExpression_name returns the expression_name rule contexts.
	GetExpression_name() IIdContext

	// SetExpression_name sets the expression_name rule contexts.
	SetExpression_name(IIdContext)

	// IsCommon_table_expressionContext differentiates from other interfaces.
	IsCommon_table_expressionContext()
}

type Common_table_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	expression_name IIdContext
}

func NewEmptyCommon_table_expressionContext() *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_common_table_expression
	return p
}

func (*Common_table_expressionContext) IsCommon_table_expressionContext() {}

func NewCommon_table_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Common_table_expressionContext {
	var p = new(Common_table_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_common_table_expression

	return p
}

func (s *Common_table_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Common_table_expressionContext) GetExpression_name() IIdContext { return s.expression_name }

func (s *Common_table_expressionContext) SetExpression_name(v IIdContext) { s.expression_name = v }

func (s *Common_table_expressionContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *Common_table_expressionContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Common_table_expressionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Common_table_expressionContext) Column_name_list() IColumn_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_name_listContext)
}

func (s *Common_table_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Common_table_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Common_table_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCommon_table_expression(s)
	}
}

func (s *Common_table_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCommon_table_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Common_table_expression() (localctx ICommon_table_expressionContext) {
	localctx = NewCommon_table_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 720, TSqlParserRULE_common_table_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8806)

		var _x = p.Id()

		localctx.(*Common_table_expressionContext).expression_name = _x
	}
	p.SetState(8811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserLR_BRACKET {
		{
			p.SetState(8807)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8808)
			p.Column_name_list()
		}
		{
			p.SetState(8809)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(8813)
		p.Match(TSqlParserAS)
	}
	{
		p.SetState(8814)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(8815)
		p.Select_statement()
	}
	{
		p.SetState(8816)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IUpdate_elemContext is an interface to support dynamic dispatch.
type IUpdate_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUdt_column_name returns the udt_column_name rule contexts.
	GetUdt_column_name() IIdContext

	// GetMethod_name returns the method_name rule contexts.
	GetMethod_name() IIdContext

	// SetUdt_column_name sets the udt_column_name rule contexts.
	SetUdt_column_name(IIdContext)

	// SetMethod_name sets the method_name rule contexts.
	SetMethod_name(IIdContext)

	// IsUpdate_elemContext differentiates from other interfaces.
	IsUpdate_elemContext()
}

type Update_elemContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	udt_column_name IIdContext
	method_name     IIdContext
}

func NewEmptyUpdate_elemContext() *Update_elemContext {
	var p = new(Update_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_update_elem
	return p
}

func (*Update_elemContext) IsUpdate_elemContext() {}

func NewUpdate_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_elemContext {
	var p = new(Update_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_update_elem

	return p
}

func (s *Update_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_elemContext) GetUdt_column_name() IIdContext { return s.udt_column_name }

func (s *Update_elemContext) GetMethod_name() IIdContext { return s.method_name }

func (s *Update_elemContext) SetUdt_column_name(v IIdContext) { s.udt_column_name = v }

func (s *Update_elemContext) SetMethod_name(v IIdContext) { s.method_name = v }

func (s *Update_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_elemContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Update_elemContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Update_elemContext) Assignment_operator() IAssignment_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_operatorContext)
}

func (s *Update_elemContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Update_elemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Update_elemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Update_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUpdate_elem(s)
	}
}

func (s *Update_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUpdate_elem(s)
	}
}

func (s *Update_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUpdate_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Update_elem() (localctx IUpdate_elemContext) {
	localctx = NewUpdate_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 722, TSqlParserRULE_update_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8834)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1251, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(8820)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserANSI_NULLS, TSqlParserANSI_PADDING, TSqlParserANSI_WARNINGS, TSqlParserAPPLY, TSqlParserARITHABORT, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCOMPATIBILITY_LEVEL, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserQUOTED_IDENTIFIER, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTATUS, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(8818)
				p.Full_column_name()
			}

		case TSqlParserLOCAL_ID:
			{
				p.SetState(8819)
				p.Match(TSqlParserLOCAL_ID)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(8824)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserEQUAL:
			{
				p.SetState(8822)
				p.Match(TSqlParserEQUAL)
			}

		case TSqlParserPLUS_ASSIGN, TSqlParserMINUS_ASSIGN, TSqlParserMULT_ASSIGN, TSqlParserDIV_ASSIGN, TSqlParserMOD_ASSIGN, TSqlParserAND_ASSIGN, TSqlParserXOR_ASSIGN, TSqlParserOR_ASSIGN:
			{
				p.SetState(8823)
				p.Assignment_operator()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(8826)
			p.expression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8827)

			var _x = p.Id()

			localctx.(*Update_elemContext).udt_column_name = _x
		}
		{
			p.SetState(8828)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(8829)

			var _x = p.Id()

			localctx.(*Update_elemContext).method_name = _x
		}
		{
			p.SetState(8830)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8831)
			p.Expression_list()
		}
		{
			p.SetState(8832)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISearch_condition_listContext is an interface to support dynamic dispatch.
type ISearch_condition_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_listContext differentiates from other interfaces.
	IsSearch_condition_listContext()
}

type Search_condition_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_listContext() *Search_condition_listContext {
	var p = new(Search_condition_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_search_condition_list
	return p
}

func (*Search_condition_listContext) IsSearch_condition_listContext() {}

func NewSearch_condition_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_listContext {
	var p = new(Search_condition_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_search_condition_list

	return p
}

func (s *Search_condition_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_listContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Search_condition_listContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Search_condition_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSearch_condition_list(s)
	}
}

func (s *Search_condition_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSearch_condition_list(s)
	}
}

func (s *Search_condition_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSearch_condition_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Search_condition_list() (localctx ISearch_condition_listContext) {
	localctx = NewSearch_condition_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 724, TSqlParserRULE_search_condition_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8836)
		p.Search_condition()
	}
	p.SetState(8841)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(8837)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(8838)
			p.Search_condition()
		}

		p.SetState(8843)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_conditionContext is an interface to support dynamic dispatch.
type ISearch_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_conditionContext differentiates from other interfaces.
	IsSearch_conditionContext()
}

type Search_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_conditionContext() *Search_conditionContext {
	var p = new(Search_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_search_condition
	return p
}

func (*Search_conditionContext) IsSearch_conditionContext() {}

func NewSearch_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_conditionContext {
	var p = new(Search_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_search_condition

	return p
}

func (s *Search_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_conditionContext) AllSearch_condition_and() []ISearch_condition_andContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_condition_andContext)(nil)).Elem())
	var tst = make([]ISearch_condition_andContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_condition_andContext)
		}
	}

	return tst
}

func (s *Search_conditionContext) Search_condition_and(i int) ISearch_condition_andContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_andContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_andContext)
}

func (s *Search_conditionContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserOR)
}

func (s *Search_conditionContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserOR, i)
}

func (s *Search_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSearch_condition(s)
	}
}

func (s *Search_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSearch_condition(s)
	}
}

func (s *Search_conditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSearch_condition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Search_condition() (localctx ISearch_conditionContext) {
	localctx = NewSearch_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 726, TSqlParserRULE_search_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8844)
		p.Search_condition_and()
	}
	p.SetState(8849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserOR {
		{
			p.SetState(8845)
			p.Match(TSqlParserOR)
		}
		{
			p.SetState(8846)
			p.Search_condition_and()
		}

		p.SetState(8851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_condition_andContext is an interface to support dynamic dispatch.
type ISearch_condition_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_andContext differentiates from other interfaces.
	IsSearch_condition_andContext()
}

type Search_condition_andContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_andContext() *Search_condition_andContext {
	var p = new(Search_condition_andContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_search_condition_and
	return p
}

func (*Search_condition_andContext) IsSearch_condition_andContext() {}

func NewSearch_condition_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_andContext {
	var p = new(Search_condition_andContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_search_condition_and

	return p
}

func (s *Search_condition_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_andContext) AllSearch_condition_not() []ISearch_condition_notContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_condition_notContext)(nil)).Elem())
	var tst = make([]ISearch_condition_notContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_condition_notContext)
		}
	}

	return tst
}

func (s *Search_condition_andContext) Search_condition_not(i int) ISearch_condition_notContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_condition_notContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_condition_notContext)
}

func (s *Search_condition_andContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserAND)
}

func (s *Search_condition_andContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, i)
}

func (s *Search_condition_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSearch_condition_and(s)
	}
}

func (s *Search_condition_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSearch_condition_and(s)
	}
}

func (s *Search_condition_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSearch_condition_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Search_condition_and() (localctx ISearch_condition_andContext) {
	localctx = NewSearch_condition_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 728, TSqlParserRULE_search_condition_and)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8852)
		p.Search_condition_not()
	}
	p.SetState(8857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserAND {
		{
			p.SetState(8853)
			p.Match(TSqlParserAND)
		}
		{
			p.SetState(8854)
			p.Search_condition_not()
		}

		p.SetState(8859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISearch_condition_notContext is an interface to support dynamic dispatch.
type ISearch_condition_notContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSearch_condition_notContext differentiates from other interfaces.
	IsSearch_condition_notContext()
}

type Search_condition_notContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySearch_condition_notContext() *Search_condition_notContext {
	var p = new(Search_condition_notContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_search_condition_not
	return p
}

func (*Search_condition_notContext) IsSearch_condition_notContext() {}

func NewSearch_condition_notContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Search_condition_notContext {
	var p = new(Search_condition_notContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_search_condition_not

	return p
}

func (s *Search_condition_notContext) GetParser() antlr.Parser { return s.parser }

func (s *Search_condition_notContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *Search_condition_notContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Search_condition_notContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Search_condition_notContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Search_condition_notContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSearch_condition_not(s)
	}
}

func (s *Search_condition_notContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSearch_condition_not(s)
	}
}

func (s *Search_condition_notContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSearch_condition_not(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Search_condition_not() (localctx ISearch_condition_notContext) {
	localctx = NewSearch_condition_notContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 730, TSqlParserRULE_search_condition_not)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8861)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserNOT {
		{
			p.SetState(8860)
			p.Match(TSqlParserNOT)
		}

	}
	{
		p.SetState(8863)
		p.Predicate()
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXISTS, 0)
}

func (s *PredicateContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *PredicateContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PredicateContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PredicateContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *PredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *PredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(TSqlParserSOME, 0)
}

func (s *PredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(TSqlParserANY, 0)
}

func (s *PredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBETWEEN, 0)
}

func (s *PredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, 0)
}

func (s *PredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *PredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(TSqlParserIN, 0)
}

func (s *PredicateContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *PredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIKE, 0)
}

func (s *PredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserESCAPE, 0)
}

func (s *PredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(TSqlParserIS, 0)
}

func (s *PredicateContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *PredicateContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPredicate(s)
	}
}

func (s *PredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPredicate(s)
	}
}

func (s *PredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Predicate() (localctx IPredicateContext) {
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 732, TSqlParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(8920)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1261, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(8865)
			p.Match(TSqlParserEXISTS)
		}
		{
			p.SetState(8866)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8867)
			p.Subquery()
		}
		{
			p.SetState(8868)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(8870)
			p.expression(0)
		}
		{
			p.SetState(8871)
			p.Comparison_operator()
		}
		{
			p.SetState(8872)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(8874)
			p.expression(0)
		}
		{
			p.SetState(8875)
			p.Comparison_operator()
		}
		p.SetState(8876)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserALL || _la == TSqlParserANY || _la == TSqlParserSOME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(8877)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8878)
			p.Subquery()
		}
		{
			p.SetState(8879)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(8881)
			p.expression(0)
		}
		p.SetState(8883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(8882)
				p.Match(TSqlParserNOT)
			}

		}
		{
			p.SetState(8885)
			p.Match(TSqlParserBETWEEN)
		}
		{
			p.SetState(8886)
			p.expression(0)
		}
		{
			p.SetState(8887)
			p.Match(TSqlParserAND)
		}
		{
			p.SetState(8888)
			p.expression(0)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(8890)
			p.expression(0)
		}
		p.SetState(8892)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(8891)
				p.Match(TSqlParserNOT)
			}

		}
		{
			p.SetState(8894)
			p.Match(TSqlParserIN)
		}
		{
			p.SetState(8895)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(8898)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1258, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(8896)
				p.Subquery()
			}

		case 2:
			{
				p.SetState(8897)
				p.Expression_list()
			}

		}
		{
			p.SetState(8900)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(8902)
			p.expression(0)
		}
		p.SetState(8904)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserNOT {
			{
				p.SetState(8903)
				p.Match(TSqlParserNOT)
			}

		}
		{
			p.SetState(8906)
			p.Match(TSqlParserLIKE)
		}
		{
			p.SetState(8907)
			p.expression(0)
		}
		p.SetState(8910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserESCAPE {
			{
				p.SetState(8908)
				p.Match(TSqlParserESCAPE)
			}
			{
				p.SetState(8909)
				p.expression(0)
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(8912)
			p.expression(0)
		}
		{
			p.SetState(8913)
			p.Match(TSqlParserIS)
		}
		{
			p.SetState(8914)
			p.Null_notnull()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(8916)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8917)
			p.Search_condition()
		}
		{
			p.SetState(8918)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuery_expressionContext is an interface to support dynamic dispatch.
type IQuery_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_expressionContext differentiates from other interfaces.
	IsQuery_expressionContext()
}

type Query_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_expressionContext() *Query_expressionContext {
	var p = new(Query_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_query_expression
	return p
}

func (*Query_expressionContext) IsQuery_expressionContext() {}

func NewQuery_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_expressionContext {
	var p = new(Query_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_query_expression

	return p
}

func (s *Query_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_expressionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *Query_expressionContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Query_expressionContext) AllSql_union() []ISql_unionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_unionContext)(nil)).Elem())
	var tst = make([]ISql_unionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_unionContext)
		}
	}

	return tst
}

func (s *Query_expressionContext) Sql_union(i int) ISql_unionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_unionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_unionContext)
}

func (s *Query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQuery_expression(s)
	}
}

func (s *Query_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQuery_expression(s)
	}
}

func (s *Query_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQuery_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Query_expression() (localctx IQuery_expressionContext) {
	localctx = NewQuery_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 734, TSqlParserRULE_query_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8927)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSELECT:
		{
			p.SetState(8922)
			p.Query_specification()
		}

	case TSqlParserLR_BRACKET:
		{
			p.SetState(8923)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8924)
			p.Query_expression()
		}
		{
			p.SetState(8925)
			p.Match(TSqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(8932)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1263, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(8929)
				p.Sql_union()
			}

		}
		p.SetState(8934)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1263, p.GetParserRuleContext())
	}

	return localctx
}

// ISql_unionContext is an interface to support dynamic dispatch.
type ISql_unionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_unionContext differentiates from other interfaces.
	IsSql_unionContext()
}

type Sql_unionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_unionContext() *Sql_unionContext {
	var p = new(Sql_unionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_sql_union
	return p
}

func (*Sql_unionContext) IsSql_unionContext() {}

func NewSql_unionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_unionContext {
	var p = new(Sql_unionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_sql_union

	return p
}

func (s *Sql_unionContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_unionContext) UNION() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNION, 0)
}

func (s *Sql_unionContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXCEPT, 0)
}

func (s *Sql_unionContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTERSECT, 0)
}

func (s *Sql_unionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *Sql_unionContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Sql_unionContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *Sql_unionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_unionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_unionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSql_union(s)
	}
}

func (s *Sql_unionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSql_union(s)
	}
}

func (s *Sql_unionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSql_union(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Sql_union() (localctx ISql_unionContext) {
	localctx = NewSql_unionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 736, TSqlParserRULE_sql_union)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(8941)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserUNION:
		{
			p.SetState(8935)
			p.Match(TSqlParserUNION)
		}
		p.SetState(8937)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserALL {
			{
				p.SetState(8936)
				p.Match(TSqlParserALL)
			}

		}

	case TSqlParserEXCEPT:
		{
			p.SetState(8939)
			p.Match(TSqlParserEXCEPT)
		}

	case TSqlParserINTERSECT:
		{
			p.SetState(8940)
			p.Match(TSqlParserINTERSECT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(8948)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSELECT:
		{
			p.SetState(8943)
			p.Query_specification()
		}

	case TSqlParserLR_BRACKET:
		{
			p.SetState(8944)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(8945)
			p.Query_expression()
		}
		{
			p.SetState(8946)
			p.Match(TSqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQuery_specificationContext is an interface to support dynamic dispatch.
type IQuery_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() ISearch_conditionContext

	// GetHaving returns the having rule contexts.
	GetHaving() ISearch_conditionContext

	// SetWhere sets the where rule contexts.
	SetWhere(ISearch_conditionContext)

	// SetHaving sets the having rule contexts.
	SetHaving(ISearch_conditionContext)

	// IsQuery_specificationContext differentiates from other interfaces.
	IsQuery_specificationContext()
}

type Query_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	where  ISearch_conditionContext
	having ISearch_conditionContext
}

func NewEmptyQuery_specificationContext() *Query_specificationContext {
	var p = new(Query_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_query_specification
	return p
}

func (*Query_specificationContext) IsQuery_specificationContext() {}

func NewQuery_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_specificationContext {
	var p = new(Query_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_query_specification

	return p
}

func (s *Query_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_specificationContext) GetWhere() ISearch_conditionContext { return s.where }

func (s *Query_specificationContext) GetHaving() ISearch_conditionContext { return s.having }

func (s *Query_specificationContext) SetWhere(v ISearch_conditionContext) { s.where = v }

func (s *Query_specificationContext) SetHaving(v ISearch_conditionContext) { s.having = v }

func (s *Query_specificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSELECT, 0)
}

func (s *Query_specificationContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Query_specificationContext) Top_clause() ITop_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_clauseContext)
}

func (s *Query_specificationContext) INTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserINTO, 0)
}

func (s *Query_specificationContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Query_specificationContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Query_specificationContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Query_specificationContext) WHERE() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHERE, 0)
}

func (s *Query_specificationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Query_specificationContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Query_specificationContext) AllGroup_by_item() []IGroup_by_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem())
	var tst = make([]IGroup_by_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroup_by_itemContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Group_by_item(i int) IGroup_by_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_itemContext)
}

func (s *Query_specificationContext) HAVING() antlr.TerminalNode {
	return s.GetToken(TSqlParserHAVING, 0)
}

func (s *Query_specificationContext) AllALL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserALL)
}

func (s *Query_specificationContext) ALL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, i)
}

func (s *Query_specificationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISTINCT, 0)
}

func (s *Query_specificationContext) AllSearch_condition() []ISearch_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem())
	var tst = make([]ISearch_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISearch_conditionContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Search_condition(i int) ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Query_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQuery_specification(s)
	}
}

func (s *Query_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQuery_specification(s)
	}
}

func (s *Query_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQuery_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Query_specification() (localctx IQuery_specificationContext) {
	localctx = NewQuery_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 738, TSqlParserRULE_query_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8950)
		p.Match(TSqlParserSELECT)
	}
	p.SetState(8952)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserALL || _la == TSqlParserDISTINCT {
		p.SetState(8951)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserALL || _la == TSqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(8955)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTOP {
		{
			p.SetState(8954)
			p.Top_clause()
		}

	}
	{
		p.SetState(8957)
		p.Select_list()
	}
	p.SetState(8960)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserINTO {
		{
			p.SetState(8958)
			p.Match(TSqlParserINTO)
		}
		{
			p.SetState(8959)
			p.Table_name()
		}

	}
	p.SetState(8964)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFROM {
		{
			p.SetState(8962)
			p.Match(TSqlParserFROM)
		}
		{
			p.SetState(8963)
			p.Table_sources()
		}

	}
	p.SetState(8968)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1271, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8966)
			p.Match(TSqlParserWHERE)
		}
		{
			p.SetState(8967)

			var _x = p.Search_condition()

			localctx.(*Query_specificationContext).where = _x
		}

	}
	p.SetState(8983)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1274, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8970)
			p.Match(TSqlParserGROUP)
		}
		{
			p.SetState(8971)
			p.Match(TSqlParserBY)
		}
		p.SetState(8973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserALL {
			{
				p.SetState(8972)
				p.Match(TSqlParserALL)
			}

		}
		{
			p.SetState(8975)
			p.Group_by_item()
		}
		p.SetState(8980)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1273, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(8976)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(8977)
					p.Group_by_item()
				}

			}
			p.SetState(8982)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1273, p.GetParserRuleContext())
		}

	}
	p.SetState(8987)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1275, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(8985)
			p.Match(TSqlParserHAVING)
		}
		{
			p.SetState(8986)

			var _x = p.Search_condition()

			localctx.(*Query_specificationContext).having = _x
		}

	}

	return localctx
}

// ITop_clauseContext is an interface to support dynamic dispatch.
type ITop_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_clauseContext differentiates from other interfaces.
	IsTop_clauseContext()
}

type Top_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_clauseContext() *Top_clauseContext {
	var p = new(Top_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_top_clause
	return p
}

func (*Top_clauseContext) IsTop_clauseContext() {}

func NewTop_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_clauseContext {
	var p = new(Top_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_top_clause

	return p
}

func (s *Top_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_clauseContext) TOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserTOP, 0)
}

func (s *Top_clauseContext) Top_percent() ITop_percentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_percentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_percentContext)
}

func (s *Top_clauseContext) Top_count() ITop_countContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITop_countContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITop_countContext)
}

func (s *Top_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Top_clauseContext) TIES() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIES, 0)
}

func (s *Top_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTop_clause(s)
	}
}

func (s *Top_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTop_clause(s)
	}
}

func (s *Top_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTop_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Top_clause() (localctx ITop_clauseContext) {
	localctx = NewTop_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 740, TSqlParserRULE_top_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(8989)
		p.Match(TSqlParserTOP)
	}
	p.SetState(8992)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1276, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(8990)
			p.Top_percent()
		}

	case 2:
		{
			p.SetState(8991)
			p.Top_count()
		}

	}
	p.SetState(8996)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(8994)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(8995)
			p.Match(TSqlParserTIES)
		}

	}

	return localctx
}

// ITop_percentContext is an interface to support dynamic dispatch.
type ITop_percentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_percentContext differentiates from other interfaces.
	IsTop_percentContext()
}

type Top_percentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_percentContext() *Top_percentContext {
	var p = new(Top_percentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_top_percent
	return p
}

func (*Top_percentContext) IsTop_percentContext() {}

func NewTop_percentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_percentContext {
	var p = new(Top_percentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_top_percent

	return p
}

func (s *Top_percentContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_percentContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPERCENT, 0)
}

func (s *Top_percentContext) REAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAL, 0)
}

func (s *Top_percentContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFLOAT, 0)
}

func (s *Top_percentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Top_percentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_percentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_percentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTop_percent(s)
	}
}

func (s *Top_percentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTop_percent(s)
	}
}

func (s *Top_percentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTop_percent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Top_percent() (localctx ITop_percentContext) {
	localctx = NewTop_percentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 742, TSqlParserRULE_top_percent)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9005)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFLOAT, TSqlParserREAL:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(8998)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFLOAT || _la == TSqlParserREAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(8999)
			p.Match(TSqlParserPERCENT)
		}

	case TSqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9000)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9001)
			p.expression(0)
		}
		{
			p.SetState(9002)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(9003)
			p.Match(TSqlParserPERCENT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITop_countContext is an interface to support dynamic dispatch.
type ITop_countContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTop_countContext differentiates from other interfaces.
	IsTop_countContext()
}

type Top_countContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTop_countContext() *Top_countContext {
	var p = new(Top_countContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_top_count
	return p
}

func (*Top_countContext) IsTop_countContext() {}

func NewTop_countContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Top_countContext {
	var p = new(Top_countContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_top_count

	return p
}

func (s *Top_countContext) GetParser() antlr.Parser { return s.parser }

func (s *Top_countContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Top_countContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Top_countContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Top_countContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Top_countContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTop_count(s)
	}
}

func (s *Top_countContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTop_count(s)
	}
}

func (s *Top_countContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTop_count(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Top_count() (localctx ITop_countContext) {
	localctx = NewTop_countContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 744, TSqlParserRULE_top_count)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9012)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9007)
			p.Match(TSqlParserDECIMAL)
		}

	case TSqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9008)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9009)
			p.expression(0)
		}
		{
			p.SetState(9010)
			p.Match(TSqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_by_expression() []IOrder_by_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem())
	var tst = make([]IOrder_by_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_expressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_by_expression(i int) IOrder_by_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expressionContext)
}

func (s *Order_by_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFFSET, 0)
}

func (s *Order_by_clauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_clauseContext) AllROW() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserROW)
}

func (s *Order_by_clauseContext) ROW(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserROW, i)
}

func (s *Order_by_clauseContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserROWS)
}

func (s *Order_by_clauseContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserROWS, i)
}

func (s *Order_by_clauseContext) FETCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserFETCH, 0)
}

func (s *Order_by_clauseContext) ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLY, 0)
}

func (s *Order_by_clauseContext) FIRST() antlr.TerminalNode {
	return s.GetToken(TSqlParserFIRST, 0)
}

func (s *Order_by_clauseContext) NEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEXT, 0)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 746, TSqlParserRULE_order_by_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9014)
		p.Match(TSqlParserORDER)
	}
	{
		p.SetState(9015)
		p.Match(TSqlParserBY)
	}
	{
		p.SetState(9016)
		p.Order_by_expression()
	}
	p.SetState(9021)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1280, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9017)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9018)
				p.Order_by_expression()
			}

		}
		p.SetState(9023)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1280, p.GetParserRuleContext())
	}
	p.SetState(9035)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1282, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9024)
			p.Match(TSqlParserOFFSET)
		}
		{
			p.SetState(9025)
			p.expression(0)
		}
		p.SetState(9026)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserROW || _la == TSqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(9033)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1281, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9027)
				p.Match(TSqlParserFETCH)
			}
			p.SetState(9028)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFIRST || _la == TSqlParserNEXT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(9029)
				p.expression(0)
			}
			p.SetState(9030)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserROW || _la == TSqlParserROWS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(9031)
				p.Match(TSqlParserONLY)
			}

		}

	}

	return localctx
}

// IFor_clauseContext is an interface to support dynamic dispatch.
type IFor_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_clauseContext differentiates from other interfaces.
	IsFor_clauseContext()
}

type For_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_clauseContext() *For_clauseContext {
	var p = new(For_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_for_clause
	return p
}

func (*For_clauseContext) IsFor_clauseContext() {}

func NewFor_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_clauseContext {
	var p = new(For_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_for_clause

	return p
}

func (s *For_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *For_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *For_clauseContext) BROWSE() antlr.TerminalNode {
	return s.GetToken(TSqlParserBROWSE, 0)
}

func (s *For_clauseContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *For_clauseContext) AllXml_common_directives() []IXml_common_directivesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IXml_common_directivesContext)(nil)).Elem())
	var tst = make([]IXml_common_directivesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IXml_common_directivesContext)
		}
	}

	return tst
}

func (s *For_clauseContext) Xml_common_directives(i int) IXml_common_directivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_common_directivesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IXml_common_directivesContext)
}

func (s *For_clauseContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *For_clauseContext) RAW() antlr.TerminalNode {
	return s.GetToken(TSqlParserRAW, 0)
}

func (s *For_clauseContext) PATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserPATH, 0)
}

func (s *For_clauseContext) EXPLICIT() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPLICIT, 0)
}

func (s *For_clauseContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *For_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFor_clause(s)
	}
}

func (s *For_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFor_clause(s)
	}
}

func (s *For_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFor_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) For_clause() (localctx IFor_clauseContext) {
	localctx = NewFor_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 748, TSqlParserRULE_for_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(9061)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1287, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9037)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(9038)
			p.Match(TSqlParserBROWSE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9039)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(9040)
			p.Match(TSqlParserXML)
		}
		p.SetState(9042)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1283, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9041)
				p.Xml_common_directives()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9044)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(9045)
			p.Match(TSqlParserXML)
		}
		p.SetState(9046)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserRAW || _la == TSqlParserAUTO || _la == TSqlParserEXPLICIT || _la == TSqlParserPATH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(9048)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1284, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9047)
				p.Match(TSqlParserCOMMA)
			}

		}
		p.SetState(9053)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1285, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9050)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(9051)
				p.Match(TSqlParserSTRING)
			}
			{
				p.SetState(9052)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(9058)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1286, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(9055)
					p.Xml_common_directives()
				}

			}
			p.SetState(9060)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1286, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IXml_common_directivesContext is an interface to support dynamic dispatch.
type IXml_common_directivesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_common_directivesContext differentiates from other interfaces.
	IsXml_common_directivesContext()
}

type Xml_common_directivesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_common_directivesContext() *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_xml_common_directives
	return p
}

func (*Xml_common_directivesContext) IsXml_common_directivesContext() {}

func NewXml_common_directivesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_common_directivesContext {
	var p = new(Xml_common_directivesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_xml_common_directives

	return p
}

func (s *Xml_common_directivesContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_common_directivesContext) BINARY_BASE64() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY_BASE64, 0)
}

func (s *Xml_common_directivesContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Xml_common_directivesContext) ROOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserROOT, 0)
}

func (s *Xml_common_directivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_common_directivesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_common_directivesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterXml_common_directives(s)
	}
}

func (s *Xml_common_directivesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitXml_common_directives(s)
	}
}

func (s *Xml_common_directivesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitXml_common_directives(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Xml_common_directives() (localctx IXml_common_directivesContext) {
	localctx = NewXml_common_directivesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 750, TSqlParserRULE_xml_common_directives)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9063)
		p.Match(TSqlParserCOMMA)
	}
	p.SetState(9064)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserBINARY_BASE64 || _la == TSqlParserROOT || _la == TSqlParserTYPE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IOrder_by_expressionContext is an interface to support dynamic dispatch.
type IOrder_by_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_expressionContext differentiates from other interfaces.
	IsOrder_by_expressionContext()
}

type Order_by_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expressionContext() *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_order_by_expression
	return p
}

func (*Order_by_expressionContext) IsOrder_by_expressionContext() {}

func NewOrder_by_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_order_by_expression

	return p
}

func (s *Order_by_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_expressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(TSqlParserASC, 0)
}

func (s *Order_by_expressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(TSqlParserDESC, 0)
}

func (s *Order_by_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOrder_by_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Order_by_expression() (localctx IOrder_by_expressionContext) {
	localctx = NewOrder_by_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 752, TSqlParserRULE_order_by_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9066)
		p.expression(0)
	}
	p.SetState(9068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserASC || _la == TSqlParserDESC {
		p.SetState(9067)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserASC || _la == TSqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IGroup_by_itemContext is an interface to support dynamic dispatch.
type IGroup_by_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_itemContext differentiates from other interfaces.
	IsGroup_by_itemContext()
}

type Group_by_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_itemContext() *Group_by_itemContext {
	var p = new(Group_by_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_group_by_item
	return p
}

func (*Group_by_itemContext) IsGroup_by_itemContext() {}

func NewGroup_by_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_itemContext {
	var p = new(Group_by_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_group_by_item

	return p
}

func (s *Group_by_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Group_by_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGroup_by_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Group_by_item() (localctx IGroup_by_itemContext) {
	localctx = NewGroup_by_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 754, TSqlParserRULE_group_by_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9070)
		p.expression(0)
	}

	return localctx
}

// IOption_clauseContext is an interface to support dynamic dispatch.
type IOption_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOption_clauseContext differentiates from other interfaces.
	IsOption_clauseContext()
}

type Option_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOption_clauseContext() *Option_clauseContext {
	var p = new(Option_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_option_clause
	return p
}

func (*Option_clauseContext) IsOption_clauseContext() {}

func NewOption_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Option_clauseContext {
	var p = new(Option_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_option_clause

	return p
}

func (s *Option_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Option_clauseContext) OPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTION, 0)
}

func (s *Option_clauseContext) AllOption() []IOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptionContext)(nil)).Elem())
	var tst = make([]IOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptionContext)
		}
	}

	return tst
}

func (s *Option_clauseContext) Option(i int) IOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptionContext)
}

func (s *Option_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Option_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Option_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOption_clause(s)
	}
}

func (s *Option_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOption_clause(s)
	}
}

func (s *Option_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOption_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Option_clause() (localctx IOption_clauseContext) {
	localctx = NewOption_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 756, TSqlParserRULE_option_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9072)
		p.Match(TSqlParserOPTION)
	}
	{
		p.SetState(9073)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9074)
		p.Option()
	}
	p.SetState(9079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9075)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9076)
			p.Option()
		}

		p.SetState(9081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(9082)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IOptionContext is an interface to support dynamic dispatch.
type IOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetNumber_rows returns the number_rows token.
	GetNumber_rows() antlr.Token

	// GetNumber_of_processors returns the number_of_processors token.
	GetNumber_of_processors() antlr.Token

	// GetNumber_recursion returns the number_recursion token.
	GetNumber_recursion() antlr.Token

	// SetNumber_rows sets the number_rows token.
	SetNumber_rows(antlr.Token)

	// SetNumber_of_processors sets the number_of_processors token.
	SetNumber_of_processors(antlr.Token)

	// SetNumber_recursion sets the number_recursion token.
	SetNumber_recursion(antlr.Token)

	// IsOptionContext differentiates from other interfaces.
	IsOptionContext()
}

type OptionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	number_rows          antlr.Token
	number_of_processors antlr.Token
	number_recursion     antlr.Token
}

func NewEmptyOptionContext() *OptionContext {
	var p = new(OptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_option
	return p
}

func (*OptionContext) IsOptionContext() {}

func NewOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionContext {
	var p = new(OptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_option

	return p
}

func (s *OptionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionContext) GetNumber_rows() antlr.Token { return s.number_rows }

func (s *OptionContext) GetNumber_of_processors() antlr.Token { return s.number_of_processors }

func (s *OptionContext) GetNumber_recursion() antlr.Token { return s.number_recursion }

func (s *OptionContext) SetNumber_rows(v antlr.Token) { s.number_rows = v }

func (s *OptionContext) SetNumber_of_processors(v antlr.Token) { s.number_of_processors = v }

func (s *OptionContext) SetNumber_recursion(v antlr.Token) { s.number_recursion = v }

func (s *OptionContext) FAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAST, 0)
}

func (s *OptionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *OptionContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *OptionContext) HASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserHASH, 0)
}

func (s *OptionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(TSqlParserORDER, 0)
}

func (s *OptionContext) UNION() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNION, 0)
}

func (s *OptionContext) MERGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMERGE, 0)
}

func (s *OptionContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONCAT, 0)
}

func (s *OptionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserJOIN, 0)
}

func (s *OptionContext) LOOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOOP, 0)
}

func (s *OptionContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPAND, 0)
}

func (s *OptionContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEWS, 0)
}

func (s *OptionContext) FORCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE, 0)
}

func (s *OptionContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *OptionContext) KEEP() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEEP, 0)
}

func (s *OptionContext) PLAN() antlr.TerminalNode {
	return s.GetToken(TSqlParserPLAN, 0)
}

func (s *OptionContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEEPFIXED, 0)
}

func (s *OptionContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXDOP, 0)
}

func (s *OptionContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXRECURSION, 0)
}

func (s *OptionContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTIMIZE, 0)
}

func (s *OptionContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *OptionContext) AllOptimize_for_arg() []IOptimize_for_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem())
	var tst = make([]IOptimize_for_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOptimize_for_argContext)
		}
	}

	return tst
}

func (s *OptionContext) Optimize_for_arg(i int) IOptimize_for_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimize_for_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOptimize_for_argContext)
}

func (s *OptionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNKNOWN, 0)
}

func (s *OptionContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARAMETERIZATION, 0)
}

func (s *OptionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIMPLE, 0)
}

func (s *OptionContext) FORCED() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCED, 0)
}

func (s *OptionContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECOMPILE, 0)
}

func (s *OptionContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(TSqlParserROBUST, 0)
}

func (s *OptionContext) USE() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSE, 0)
}

func (s *OptionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *OptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOption(s)
	}
}

func (s *OptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOption(s)
	}
}

func (s *OptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOption(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Option() (localctx IOptionContext) {
	localctx = NewOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 758, TSqlParserRULE_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9129)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1291, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9084)
			p.Match(TSqlParserFAST)
		}
		{
			p.SetState(9085)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*OptionContext).number_rows = _m
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(9086)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserORDER || _la == TSqlParserHASH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9087)
			p.Match(TSqlParserGROUP)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(9088)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserMERGE || _la == TSqlParserCONCAT || _la == TSqlParserHASH) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9089)
			p.Match(TSqlParserUNION)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(9090)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserMERGE || _la == TSqlParserHASH || _la == TSqlParserLOOP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9091)
			p.Match(TSqlParserJOIN)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9092)
			p.Match(TSqlParserEXPAND)
		}
		{
			p.SetState(9093)
			p.Match(TSqlParserVIEWS)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9094)
			p.Match(TSqlParserFORCE)
		}
		{
			p.SetState(9095)
			p.Match(TSqlParserORDER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9096)
			p.Match(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9097)
			p.Match(TSqlParserKEEP)
		}
		{
			p.SetState(9098)
			p.Match(TSqlParserPLAN)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(9099)
			p.Match(TSqlParserKEEPFIXED)
		}
		{
			p.SetState(9100)
			p.Match(TSqlParserPLAN)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(9101)
			p.Match(TSqlParserMAXDOP)
		}
		{
			p.SetState(9102)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*OptionContext).number_of_processors = _m
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(9103)
			p.Match(TSqlParserMAXRECURSION)
		}
		{
			p.SetState(9104)

			var _m = p.Match(TSqlParserDECIMAL)

			localctx.(*OptionContext).number_recursion = _m
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(9105)
			p.Match(TSqlParserOPTIMIZE)
		}
		{
			p.SetState(9106)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(9107)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9108)
			p.Optimize_for_arg()
		}
		p.SetState(9113)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(9109)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9110)
				p.Optimize_for_arg()
			}

			p.SetState(9115)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(9116)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(9118)
			p.Match(TSqlParserOPTIMIZE)
		}
		{
			p.SetState(9119)
			p.Match(TSqlParserFOR)
		}
		{
			p.SetState(9120)
			p.Match(TSqlParserUNKNOWN)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(9121)
			p.Match(TSqlParserPARAMETERIZATION)
		}
		p.SetState(9122)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFORCED || _la == TSqlParserSIMPLE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(9123)
			p.Match(TSqlParserRECOMPILE)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(9124)
			p.Match(TSqlParserROBUST)
		}
		{
			p.SetState(9125)
			p.Match(TSqlParserPLAN)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(9126)
			p.Match(TSqlParserUSE)
		}
		{
			p.SetState(9127)
			p.Match(TSqlParserPLAN)
		}
		{
			p.SetState(9128)
			p.Match(TSqlParserSTRING)
		}

	}

	return localctx
}

// IOptimize_for_argContext is an interface to support dynamic dispatch.
type IOptimize_for_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptimize_for_argContext differentiates from other interfaces.
	IsOptimize_for_argContext()
}

type Optimize_for_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimize_for_argContext() *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_optimize_for_arg
	return p
}

func (*Optimize_for_argContext) IsOptimize_for_argContext() {}

func NewOptimize_for_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Optimize_for_argContext {
	var p = new(Optimize_for_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_optimize_for_arg

	return p
}

func (s *Optimize_for_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Optimize_for_argContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Optimize_for_argContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNKNOWN, 0)
}

func (s *Optimize_for_argContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Optimize_for_argContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Optimize_for_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Optimize_for_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Optimize_for_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOptimize_for_arg(s)
	}
}

func (s *Optimize_for_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOptimize_for_arg(s)
	}
}

func (s *Optimize_for_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOptimize_for_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Optimize_for_arg() (localctx IOptimize_for_argContext) {
	localctx = NewOptimize_for_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 760, TSqlParserRULE_optimize_for_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9131)
		p.Match(TSqlParserLOCAL_ID)
	}
	p.SetState(9138)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserUNKNOWN:
		{
			p.SetState(9132)
			p.Match(TSqlParserUNKNOWN)
		}

	case TSqlParserEQUAL:
		{
			p.SetState(9133)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9136)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
			{
				p.SetState(9134)
				p.Constant()
			}

		case TSqlParserNULL:
			{
				p.SetState(9135)
				p.Match(TSqlParserNULL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_elem() []ISelect_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem())
	var tst = make([]ISelect_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_list_elemContext)
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_elem(i int) ISelect_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_list_elemContext)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 762, TSqlParserRULE_select_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9140)
		p.Select_list_elem()
	}
	p.SetState(9145)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1294, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9141)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9142)
				p.Select_list_elem()
			}

		}
		p.SetState(9147)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1294, p.GetParserRuleContext())
	}

	return localctx
}

// IUdt_method_argumentsContext is an interface to support dynamic dispatch.
type IUdt_method_argumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUdt_method_argumentsContext differentiates from other interfaces.
	IsUdt_method_argumentsContext()
}

type Udt_method_argumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUdt_method_argumentsContext() *Udt_method_argumentsContext {
	var p = new(Udt_method_argumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_udt_method_arguments
	return p
}

func (*Udt_method_argumentsContext) IsUdt_method_argumentsContext() {}

func NewUdt_method_argumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udt_method_argumentsContext {
	var p = new(Udt_method_argumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_udt_method_arguments

	return p
}

func (s *Udt_method_argumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *Udt_method_argumentsContext) AllExecute_var_string() []IExecute_var_stringContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem())
	var tst = make([]IExecute_var_stringContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExecute_var_stringContext)
		}
	}

	return tst
}

func (s *Udt_method_argumentsContext) Execute_var_string(i int) IExecute_var_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_var_stringContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExecute_var_stringContext)
}

func (s *Udt_method_argumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udt_method_argumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udt_method_argumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUdt_method_arguments(s)
	}
}

func (s *Udt_method_argumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUdt_method_arguments(s)
	}
}

func (s *Udt_method_argumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUdt_method_arguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Udt_method_arguments() (localctx IUdt_method_argumentsContext) {
	localctx = NewUdt_method_argumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 764, TSqlParserRULE_udt_method_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9148)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9149)
		p.Execute_var_string()
	}
	p.SetState(9154)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9150)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9151)
			p.Execute_var_string()
		}

		p.SetState(9156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(9157)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IAsteriskContext is an interface to support dynamic dispatch.
type IAsteriskContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAsteriskContext differentiates from other interfaces.
	IsAsteriskContext()
}

type AsteriskContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsteriskContext() *AsteriskContext {
	var p = new(AsteriskContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_asterisk
	return p
}

func (*AsteriskContext) IsAsteriskContext() {}

func NewAsteriskContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsteriskContext {
	var p = new(AsteriskContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_asterisk

	return p
}

func (s *AsteriskContext) GetParser() antlr.Parser { return s.parser }

func (s *AsteriskContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *AsteriskContext) Asterisk() IAsteriskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsteriskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsteriskContext)
}

func (s *AsteriskContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsteriskContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsteriskContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAsterisk(s)
	}
}

func (s *AsteriskContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAsterisk(s)
	}
}

func (s *AsteriskContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAsterisk(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Asterisk() (localctx IAsteriskContext) {
	localctx = NewAsteriskContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 766, TSqlParserRULE_asterisk)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9164)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserSTAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9159)
			p.Match(TSqlParserSTAR)
		}

	case TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9160)
			p.Table_name()
		}
		{
			p.SetState(9161)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9162)
			p.Asterisk()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_elemContext is an interface to support dynamic dispatch.
type IColumn_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name returns the column_name rule contexts.
	GetColumn_name() IIdContext

	// SetColumn_name sets the column_name rule contexts.
	SetColumn_name(IIdContext)

	// IsColumn_elemContext differentiates from other interfaces.
	IsColumn_elemContext()
}

type Column_elemContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	column_name IIdContext
}

func NewEmptyColumn_elemContext() *Column_elemContext {
	var p = new(Column_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_elem
	return p
}

func (*Column_elemContext) IsColumn_elemContext() {}

func NewColumn_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_elemContext {
	var p = new(Column_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_elem

	return p
}

func (s *Column_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_elemContext) GetColumn_name() IIdContext { return s.column_name }

func (s *Column_elemContext) SetColumn_name(v IIdContext) { s.column_name = v }

func (s *Column_elemContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *Column_elemContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWGUID, 0)
}

func (s *Column_elemContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Column_elemContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_elemContext) As_column_alias() IAs_column_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_column_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_column_aliasContext)
}

func (s *Column_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_elem(s)
	}
}

func (s *Column_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_elem(s)
	}
}

func (s *Column_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_elem() (localctx IColumn_elemContext) {
	localctx = NewColumn_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 768, TSqlParserRULE_column_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9169)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1297, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9166)
			p.Table_name()
		}
		{
			p.SetState(9167)
			p.Match(TSqlParserDOT)
		}

	}
	p.SetState(9176)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1298, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(9171)

			var _x = p.Id()

			localctx.(*Column_elemContext).column_name = _x
		}

	case 2:
		{
			p.SetState(9172)
			p.Match(TSqlParserDOLLAR)
		}
		{
			p.SetState(9173)
			p.Match(TSqlParserIDENTITY)
		}

	case 3:
		{
			p.SetState(9174)
			p.Match(TSqlParserDOLLAR)
		}
		{
			p.SetState(9175)
			p.Match(TSqlParserROWGUID)
		}

	}
	p.SetState(9179)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1299, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9178)
			p.As_column_alias()
		}

	}

	return localctx
}

// IUdt_elemContext is an interface to support dynamic dispatch.
type IUdt_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUdt_column_name returns the udt_column_name rule contexts.
	GetUdt_column_name() IIdContext

	// GetNon_static_attr returns the non_static_attr rule contexts.
	GetNon_static_attr() IIdContext

	// GetStatic_attr returns the static_attr rule contexts.
	GetStatic_attr() IIdContext

	// SetUdt_column_name sets the udt_column_name rule contexts.
	SetUdt_column_name(IIdContext)

	// SetNon_static_attr sets the non_static_attr rule contexts.
	SetNon_static_attr(IIdContext)

	// SetStatic_attr sets the static_attr rule contexts.
	SetStatic_attr(IIdContext)

	// IsUdt_elemContext differentiates from other interfaces.
	IsUdt_elemContext()
}

type Udt_elemContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	udt_column_name IIdContext
	non_static_attr IIdContext
	static_attr     IIdContext
}

func NewEmptyUdt_elemContext() *Udt_elemContext {
	var p = new(Udt_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_udt_elem
	return p
}

func (*Udt_elemContext) IsUdt_elemContext() {}

func NewUdt_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Udt_elemContext {
	var p = new(Udt_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_udt_elem

	return p
}

func (s *Udt_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Udt_elemContext) GetUdt_column_name() IIdContext { return s.udt_column_name }

func (s *Udt_elemContext) GetNon_static_attr() IIdContext { return s.non_static_attr }

func (s *Udt_elemContext) GetStatic_attr() IIdContext { return s.static_attr }

func (s *Udt_elemContext) SetUdt_column_name(v IIdContext) { s.udt_column_name = v }

func (s *Udt_elemContext) SetNon_static_attr(v IIdContext) { s.non_static_attr = v }

func (s *Udt_elemContext) SetStatic_attr(v IIdContext) { s.static_attr = v }

func (s *Udt_elemContext) Udt_method_arguments() IUdt_method_argumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdt_method_argumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdt_method_argumentsContext)
}

func (s *Udt_elemContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Udt_elemContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Udt_elemContext) As_column_alias() IAs_column_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_column_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_column_aliasContext)
}

func (s *Udt_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Udt_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Udt_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUdt_elem(s)
	}
}

func (s *Udt_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUdt_elem(s)
	}
}

func (s *Udt_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUdt_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Udt_elem() (localctx IUdt_elemContext) {
	localctx = NewUdt_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 770, TSqlParserRULE_udt_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9198)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1303, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9181)

			var _x = p.Id()

			localctx.(*Udt_elemContext).udt_column_name = _x
		}
		{
			p.SetState(9182)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9183)

			var _x = p.Id()

			localctx.(*Udt_elemContext).non_static_attr = _x
		}
		{
			p.SetState(9184)
			p.Udt_method_arguments()
		}
		p.SetState(9186)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1300, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9185)
				p.As_column_alias()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9188)

			var _x = p.Id()

			localctx.(*Udt_elemContext).udt_column_name = _x
		}
		{
			p.SetState(9189)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(9190)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(9191)

			var _x = p.Id()

			localctx.(*Udt_elemContext).static_attr = _x
		}
		p.SetState(9193)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1301, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9192)
				p.Udt_method_arguments()
			}

		}
		p.SetState(9196)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1302, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9195)
				p.As_column_alias()
			}

		}

	}

	return localctx
}

// IExpression_elemContext is an interface to support dynamic dispatch.
type IExpression_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEq returns the eq token.
	GetEq() antlr.Token

	// SetEq sets the eq token.
	SetEq(antlr.Token)

	// IsExpression_elemContext differentiates from other interfaces.
	IsExpression_elemContext()
}

type Expression_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	eq     antlr.Token
}

func NewEmptyExpression_elemContext() *Expression_elemContext {
	var p = new(Expression_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_expression_elem
	return p
}

func (*Expression_elemContext) IsExpression_elemContext() {}

func NewExpression_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_elemContext {
	var p = new(Expression_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_expression_elem

	return p
}

func (s *Expression_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_elemContext) GetEq() antlr.Token { return s.eq }

func (s *Expression_elemContext) SetEq(v antlr.Token) { s.eq = v }

func (s *Expression_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_elemContext) As_column_alias() IAs_column_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_column_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_column_aliasContext)
}

func (s *Expression_elemContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Expression_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExpression_elem(s)
	}
}

func (s *Expression_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExpression_elem(s)
	}
}

func (s *Expression_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExpression_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Expression_elem() (localctx IExpression_elemContext) {
	localctx = NewExpression_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 772, TSqlParserRULE_expression_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9208)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1305, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9200)
			p.expression(0)
		}
		p.SetState(9202)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1304, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9201)
				p.As_column_alias()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9204)
			p.Column_alias()
		}
		{
			p.SetState(9205)

			var _m = p.Match(TSqlParserEQUAL)

			localctx.(*Expression_elemContext).eq = _m
		}
		{
			p.SetState(9206)
			p.expression(0)
		}

	}

	return localctx
}

// ISelect_list_elemContext is an interface to support dynamic dispatch.
type ISelect_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_elemContext differentiates from other interfaces.
	IsSelect_list_elemContext()
}

type Select_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_elemContext() *Select_list_elemContext {
	var p = new(Select_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_select_list_elem
	return p
}

func (*Select_list_elemContext) IsSelect_list_elemContext() {}

func NewSelect_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_elemContext {
	var p = new(Select_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_select_list_elem

	return p
}

func (s *Select_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_elemContext) Asterisk() IAsteriskContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAsteriskContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAsteriskContext)
}

func (s *Select_list_elemContext) Column_elem() IColumn_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_elemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_elemContext)
}

func (s *Select_list_elemContext) Udt_elem() IUdt_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUdt_elemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUdt_elemContext)
}

func (s *Select_list_elemContext) Expression_elem() IExpression_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_elemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_elemContext)
}

func (s *Select_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_list_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSelect_list_elem(s)
	}
}

func (s *Select_list_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSelect_list_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Select_list_elem() (localctx ISelect_list_elemContext) {
	localctx = NewSelect_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 774, TSqlParserRULE_select_list_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9214)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1306, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9210)
			p.Asterisk()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9211)
			p.Column_elem()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9212)
			p.Udt_elem()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9213)
			p.Expression_elem()
		}

	}

	return localctx
}

// ITable_sourcesContext is an interface to support dynamic dispatch.
type ITable_sourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourcesContext differentiates from other interfaces.
	IsTable_sourcesContext()
}

type Table_sourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourcesContext() *Table_sourcesContext {
	var p = new(Table_sourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_sources
	return p
}

func (*Table_sourcesContext) IsTable_sourcesContext() {}

func NewTable_sourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourcesContext {
	var p = new(Table_sourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_sources

	return p
}

func (s *Table_sourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourcesContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Table_sourcesContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Table_sourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_sources(s)
	}
}

func (s *Table_sourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_sources(s)
	}
}

func (s *Table_sourcesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_sources(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_sources() (localctx ITable_sourcesContext) {
	localctx = NewTable_sourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 776, TSqlParserRULE_table_sources)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9216)
		p.Table_source()
	}
	p.SetState(9221)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1307, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9217)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9218)
				p.Table_source()
			}

		}
		p.SetState(9223)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1307, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_sourceContext is an interface to support dynamic dispatch.
type ITable_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourceContext differentiates from other interfaces.
	IsTable_sourceContext()
}

type Table_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourceContext() *Table_sourceContext {
	var p = new(Table_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_source
	return p
}

func (*Table_sourceContext) IsTable_sourceContext() {}

func NewTable_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourceContext {
	var p = new(Table_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_source

	return p
}

func (s *Table_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourceContext) Table_source_item_joined() ITable_source_item_joinedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_item_joinedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_item_joinedContext)
}

func (s *Table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_source(s)
	}
}

func (s *Table_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_source(s)
	}
}

func (s *Table_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_source() (localctx ITable_sourceContext) {
	localctx = NewTable_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 778, TSqlParserRULE_table_source)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9229)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1308, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9224)
			p.Table_source_item_joined()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9225)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9226)
			p.Table_source_item_joined()
		}
		{
			p.SetState(9227)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITable_source_item_joinedContext is an interface to support dynamic dispatch.
type ITable_source_item_joinedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_item_joinedContext differentiates from other interfaces.
	IsTable_source_item_joinedContext()
}

type Table_source_item_joinedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_item_joinedContext() *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_source_item_joined
	return p
}

func (*Table_source_item_joinedContext) IsTable_source_item_joinedContext() {}

func NewTable_source_item_joinedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_item_joinedContext {
	var p = new(Table_source_item_joinedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_source_item_joined

	return p
}

func (s *Table_source_item_joinedContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_item_joinedContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *Table_source_item_joinedContext) AllJoin_part() []IJoin_partContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_partContext)(nil)).Elem())
	var tst = make([]IJoin_partContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_partContext)
		}
	}

	return tst
}

func (s *Table_source_item_joinedContext) Join_part(i int) IJoin_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_partContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_partContext)
}

func (s *Table_source_item_joinedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_item_joinedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_source_item_joinedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_source_item_joined(s)
	}
}

func (s *Table_source_item_joinedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_source_item_joined(s)
	}
}

func (s *Table_source_item_joinedContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_source_item_joined(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_source_item_joined() (localctx ITable_source_item_joinedContext) {
	localctx = NewTable_source_item_joinedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 780, TSqlParserRULE_table_source_item_joined)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9231)
		p.Table_source_item()
	}
	p.SetState(9235)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1309, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9232)
				p.Join_part()
			}

		}
		p.SetState(9237)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1309, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_source_itemContext is an interface to support dynamic dispatch.
type ITable_source_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_itemContext differentiates from other interfaces.
	IsTable_source_itemContext()
}

type Table_source_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_itemContext() *Table_source_itemContext {
	var p = new(Table_source_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_source_item
	return p
}

func (*Table_source_itemContext) IsTable_source_itemContext() {}

func NewTable_source_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_itemContext {
	var p = new(Table_source_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_source_item

	return p
}

func (s *Table_source_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_itemContext) Table_name_with_hint() ITable_name_with_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_name_with_hintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_name_with_hintContext)
}

func (s *Table_source_itemContext) As_table_alias() IAs_table_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_table_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_table_aliasContext)
}

func (s *Table_source_itemContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Table_source_itemContext) Rowset_function() IRowset_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRowset_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRowset_functionContext)
}

func (s *Table_source_itemContext) Derived_table() IDerived_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDerived_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDerived_tableContext)
}

func (s *Table_source_itemContext) Column_alias_list() IColumn_alias_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_alias_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_alias_listContext)
}

func (s *Table_source_itemContext) Change_table() IChange_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_tableContext)
}

func (s *Table_source_itemContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Table_source_itemContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Table_source_itemContext) Open_xml() IOpen_xmlContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_xmlContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_xmlContext)
}

func (s *Table_source_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_source_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_source_item(s)
	}
}

func (s *Table_source_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_source_item(s)
	}
}

func (s *Table_source_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_source_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_source_item() (localctx ITable_source_itemContext) {
	localctx = NewTable_source_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 782, TSqlParserRULE_table_source_item)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9284)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1320, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9238)
			p.Table_name_with_hint()
		}
		p.SetState(9240)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1310, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9239)
				p.As_table_alias()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9242)
			p.Full_table_name()
		}
		p.SetState(9244)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1311, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9243)
				p.As_table_alias()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9246)
			p.Rowset_function()
		}
		p.SetState(9248)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1312, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9247)
				p.As_table_alias()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9250)
			p.Derived_table()
		}
		p.SetState(9255)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1314, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9251)
				p.As_table_alias()
			}
			p.SetState(9253)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1313, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(9252)
					p.Column_alias_list()
				}

			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9257)
			p.Change_table()
		}
		{
			p.SetState(9258)
			p.As_table_alias()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9260)
			p.Function_call()
		}
		p.SetState(9262)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1315, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9261)
				p.As_table_alias()
			}

		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9264)
			p.Match(TSqlParserLOCAL_ID)
		}
		p.SetState(9266)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1316, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9265)
				p.As_table_alias()
			}

		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9268)
			p.Match(TSqlParserLOCAL_ID)
		}
		{
			p.SetState(9269)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9270)
			p.Function_call()
		}
		p.SetState(9275)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1318, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9271)
				p.As_table_alias()
			}
			p.SetState(9273)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1317, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(9272)
					p.Column_alias_list()
				}

			}

		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(9277)
			p.Open_xml()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(9278)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(9279)
			p.Match(TSqlParserCOLON)
		}
		{
			p.SetState(9280)
			p.Function_call()
		}
		p.SetState(9282)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9281)
				p.As_table_alias()
			}

		}

	}

	return localctx
}

// IOpen_xmlContext is an interface to support dynamic dispatch.
type IOpen_xmlContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpen_xmlContext differentiates from other interfaces.
	IsOpen_xmlContext()
}

type Open_xmlContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpen_xmlContext() *Open_xmlContext {
	var p = new(Open_xmlContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_open_xml
	return p
}

func (*Open_xmlContext) IsOpen_xmlContext() {}

func NewOpen_xmlContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_xmlContext {
	var p = new(Open_xmlContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_open_xml

	return p
}

func (s *Open_xmlContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_xmlContext) OPENXML() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPENXML, 0)
}

func (s *Open_xmlContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Open_xmlContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Open_xmlContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Open_xmlContext) Schema_declaration() ISchema_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchema_declarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchema_declarationContext)
}

func (s *Open_xmlContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_xmlContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_xmlContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOpen_xml(s)
	}
}

func (s *Open_xmlContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOpen_xml(s)
	}
}

func (s *Open_xmlContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOpen_xml(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Open_xml() (localctx IOpen_xmlContext) {
	localctx = NewOpen_xmlContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 784, TSqlParserRULE_open_xml)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9286)
		p.Match(TSqlParserOPENXML)
	}
	{
		p.SetState(9287)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9288)
		p.expression(0)
	}
	{
		p.SetState(9289)
		p.Match(TSqlParserCOMMA)
	}
	{
		p.SetState(9290)
		p.expression(0)
	}
	p.SetState(9293)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(9291)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9292)
			p.expression(0)
		}

	}
	{
		p.SetState(9295)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(9301)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1322, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9296)
			p.Match(TSqlParserWITH)
		}
		{
			p.SetState(9297)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9298)
			p.Schema_declaration()
		}
		{
			p.SetState(9299)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISchema_declarationContext is an interface to support dynamic dispatch.
type ISchema_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchema_declarationContext differentiates from other interfaces.
	IsSchema_declarationContext()
}

type Schema_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchema_declarationContext() *Schema_declarationContext {
	var p = new(Schema_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_schema_declaration
	return p
}

func (*Schema_declarationContext) IsSchema_declarationContext() {}

func NewSchema_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schema_declarationContext {
	var p = new(Schema_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_schema_declaration

	return p
}

func (s *Schema_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Schema_declarationContext) AllColumn_declaration() []IColumn_declarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_declarationContext)(nil)).Elem())
	var tst = make([]IColumn_declarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_declarationContext)
		}
	}

	return tst
}

func (s *Schema_declarationContext) Column_declaration(i int) IColumn_declarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_declarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_declarationContext)
}

func (s *Schema_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schema_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Schema_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSchema_declaration(s)
	}
}

func (s *Schema_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSchema_declaration(s)
	}
}

func (s *Schema_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSchema_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Schema_declaration() (localctx ISchema_declarationContext) {
	localctx = NewSchema_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 786, TSqlParserRULE_schema_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9303)
		p.Column_declaration()
	}
	p.SetState(9308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9304)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9305)
			p.Column_declaration()
		}

		p.SetState(9310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumn_declarationContext is an interface to support dynamic dispatch.
type IColumn_declarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_declarationContext differentiates from other interfaces.
	IsColumn_declarationContext()
}

type Column_declarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_declarationContext() *Column_declarationContext {
	var p = new(Column_declarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_declaration
	return p
}

func (*Column_declarationContext) IsColumn_declarationContext() {}

func NewColumn_declarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_declarationContext {
	var p = new(Column_declarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_declaration

	return p
}

func (s *Column_declarationContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_declarationContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Column_declarationContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_declarationContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Column_declarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_declarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_declarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_declaration(s)
	}
}

func (s *Column_declarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_declaration(s)
	}
}

func (s *Column_declarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_declaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_declaration() (localctx IColumn_declarationContext) {
	localctx = NewColumn_declarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 788, TSqlParserRULE_column_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9311)
		p.Match(TSqlParserID)
	}
	{
		p.SetState(9312)
		p.Data_type()
	}
	p.SetState(9314)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSTRING {
		{
			p.SetState(9313)
			p.Match(TSqlParserSTRING)
		}

	}

	return localctx
}

// IChange_tableContext is an interface to support dynamic dispatch.
type IChange_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_tableContext differentiates from other interfaces.
	IsChange_tableContext()
}

type Change_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_tableContext() *Change_tableContext {
	var p = new(Change_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_change_table
	return p
}

func (*Change_tableContext) IsChange_tableContext() {}

func NewChange_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_tableContext {
	var p = new(Change_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_change_table

	return p
}

func (s *Change_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_tableContext) CHANGETABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHANGETABLE, 0)
}

func (s *Change_tableContext) CHANGES() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHANGES, 0)
}

func (s *Change_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Change_tableContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Change_tableContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Change_tableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Change_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterChange_table(s)
	}
}

func (s *Change_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitChange_table(s)
	}
}

func (s *Change_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitChange_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Change_table() (localctx IChange_tableContext) {
	localctx = NewChange_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 790, TSqlParserRULE_change_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9316)
		p.Match(TSqlParserCHANGETABLE)
	}
	{
		p.SetState(9317)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9318)
		p.Match(TSqlParserCHANGES)
	}
	{
		p.SetState(9319)
		p.Table_name()
	}
	{
		p.SetState(9320)
		p.Match(TSqlParserCOMMA)
	}
	p.SetState(9321)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserNULL || _la == TSqlParserLOCAL_ID || _la == TSqlParserDECIMAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(9322)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IJoin_partContext is an interface to support dynamic dispatch.
type IJoin_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetJoin_type returns the join_type token.
	GetJoin_type() antlr.Token

	// GetJoin_hint returns the join_hint token.
	GetJoin_hint() antlr.Token

	// SetJoin_type sets the join_type token.
	SetJoin_type(antlr.Token)

	// SetJoin_hint sets the join_hint token.
	SetJoin_hint(antlr.Token)

	// IsJoin_partContext differentiates from other interfaces.
	IsJoin_partContext()
}

type Join_partContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	join_type antlr.Token
	join_hint antlr.Token
}

func NewEmptyJoin_partContext() *Join_partContext {
	var p = new(Join_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_join_part
	return p
}

func (*Join_partContext) IsJoin_partContext() {}

func NewJoin_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_partContext {
	var p = new(Join_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_join_part

	return p
}

func (s *Join_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_partContext) GetJoin_type() antlr.Token { return s.join_type }

func (s *Join_partContext) GetJoin_hint() antlr.Token { return s.join_hint }

func (s *Join_partContext) SetJoin_type(v antlr.Token) { s.join_type = v }

func (s *Join_partContext) SetJoin_hint(v antlr.Token) { s.join_hint = v }

func (s *Join_partContext) JOIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserJOIN, 0)
}

func (s *Join_partContext) Table_source() ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Join_partContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Join_partContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Join_partContext) LEFT() antlr.TerminalNode {
	return s.GetToken(TSqlParserLEFT, 0)
}

func (s *Join_partContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(TSqlParserRIGHT, 0)
}

func (s *Join_partContext) FULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULL, 0)
}

func (s *Join_partContext) INNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserINNER, 0)
}

func (s *Join_partContext) OUTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUTER, 0)
}

func (s *Join_partContext) LOOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOOP, 0)
}

func (s *Join_partContext) HASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserHASH, 0)
}

func (s *Join_partContext) MERGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMERGE, 0)
}

func (s *Join_partContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Join_partContext) CROSS() antlr.TerminalNode {
	return s.GetToken(TSqlParserCROSS, 0)
}

func (s *Join_partContext) APPLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLY, 0)
}

func (s *Join_partContext) PIVOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserPIVOT, 0)
}

func (s *Join_partContext) Pivot_clause() IPivot_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPivot_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPivot_clauseContext)
}

func (s *Join_partContext) As_table_alias() IAs_table_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAs_table_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAs_table_aliasContext)
}

func (s *Join_partContext) UNPIVOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNPIVOT, 0)
}

func (s *Join_partContext) Unpivot_clause() IUnpivot_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnpivot_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnpivot_clauseContext)
}

func (s *Join_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Join_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterJoin_part(s)
	}
}

func (s *Join_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitJoin_part(s)
	}
}

func (s *Join_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitJoin_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Join_part() (localctx IJoin_partContext) {
	localctx = NewJoin_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 792, TSqlParserRULE_join_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9358)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1329, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9331)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserINNER, TSqlParserJOIN, TSqlParserMERGE, TSqlParserHASH, TSqlParserLOOP, TSqlParserREMOTE:
			p.SetState(9325)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserINNER {
				{
					p.SetState(9324)
					p.Match(TSqlParserINNER)
				}

			}

		case TSqlParserFULL, TSqlParserLEFT, TSqlParserRIGHT:
			p.SetState(9327)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Join_partContext).join_type = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserFULL || _la == TSqlParserLEFT || _la == TSqlParserRIGHT) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Join_partContext).join_type = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(9329)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserOUTER {
				{
					p.SetState(9328)
					p.Match(TSqlParserOUTER)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(9334)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserMERGE || _la == TSqlParserHASH || _la == TSqlParserLOOP || _la == TSqlParserREMOTE {
			p.SetState(9333)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Join_partContext).join_hint = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserMERGE || _la == TSqlParserHASH || _la == TSqlParserLOOP || _la == TSqlParserREMOTE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Join_partContext).join_hint = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(9336)
			p.Match(TSqlParserJOIN)
		}
		{
			p.SetState(9337)
			p.Table_source()
		}
		{
			p.SetState(9338)
			p.Match(TSqlParserON)
		}
		{
			p.SetState(9339)
			p.Search_condition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9341)
			p.Match(TSqlParserCROSS)
		}
		{
			p.SetState(9342)
			p.Match(TSqlParserJOIN)
		}
		{
			p.SetState(9343)
			p.Table_source()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9344)
			p.Match(TSqlParserCROSS)
		}
		{
			p.SetState(9345)
			p.Match(TSqlParserAPPLY)
		}
		{
			p.SetState(9346)
			p.Table_source()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9347)
			p.Match(TSqlParserOUTER)
		}
		{
			p.SetState(9348)
			p.Match(TSqlParserAPPLY)
		}
		{
			p.SetState(9349)
			p.Table_source()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9350)
			p.Match(TSqlParserPIVOT)
		}
		{
			p.SetState(9351)
			p.Pivot_clause()
		}
		{
			p.SetState(9352)
			p.As_table_alias()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9354)
			p.Match(TSqlParserUNPIVOT)
		}
		{
			p.SetState(9355)
			p.Unpivot_clause()
		}
		{
			p.SetState(9356)
			p.As_table_alias()
		}

	}

	return localctx
}

// IPivot_clauseContext is an interface to support dynamic dispatch.
type IPivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPivot_clauseContext differentiates from other interfaces.
	IsPivot_clauseContext()
}

type Pivot_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPivot_clauseContext() *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_pivot_clause
	return p
}

func (*Pivot_clauseContext) IsPivot_clauseContext() {}

func NewPivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Pivot_clauseContext {
	var p = new(Pivot_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_pivot_clause

	return p
}

func (s *Pivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Pivot_clauseContext) Aggregate_windowed_function() IAggregate_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_windowed_functionContext)
}

func (s *Pivot_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Pivot_clauseContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Pivot_clauseContext) IN() antlr.TerminalNode {
	return s.GetToken(TSqlParserIN, 0)
}

func (s *Pivot_clauseContext) Column_alias_list() IColumn_alias_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_alias_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_alias_listContext)
}

func (s *Pivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Pivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Pivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitPivot_clause(s)
	}
}

func (s *Pivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitPivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Pivot_clause() (localctx IPivot_clauseContext) {
	localctx = NewPivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 794, TSqlParserRULE_pivot_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9360)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9361)
		p.Aggregate_windowed_function()
	}
	{
		p.SetState(9362)
		p.Match(TSqlParserFOR)
	}
	{
		p.SetState(9363)
		p.Full_column_name()
	}
	{
		p.SetState(9364)
		p.Match(TSqlParserIN)
	}
	{
		p.SetState(9365)
		p.Column_alias_list()
	}
	{
		p.SetState(9366)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IUnpivot_clauseContext is an interface to support dynamic dispatch.
type IUnpivot_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnpivot_clauseContext differentiates from other interfaces.
	IsUnpivot_clauseContext()
}

type Unpivot_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnpivot_clauseContext() *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_unpivot_clause
	return p
}

func (*Unpivot_clauseContext) IsUnpivot_clauseContext() {}

func NewUnpivot_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unpivot_clauseContext {
	var p = new(Unpivot_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_unpivot_clause

	return p
}

func (s *Unpivot_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Unpivot_clauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Unpivot_clauseContext) FOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOR, 0)
}

func (s *Unpivot_clauseContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Unpivot_clauseContext) IN() antlr.TerminalNode {
	return s.GetToken(TSqlParserIN, 0)
}

func (s *Unpivot_clauseContext) Full_column_name_list() IFull_column_name_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_name_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_name_listContext)
}

func (s *Unpivot_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unpivot_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unpivot_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitUnpivot_clause(s)
	}
}

func (s *Unpivot_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitUnpivot_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Unpivot_clause() (localctx IUnpivot_clauseContext) {
	localctx = NewUnpivot_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 796, TSqlParserRULE_unpivot_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9368)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9369)
		p.expression(0)
	}
	{
		p.SetState(9370)
		p.Match(TSqlParserFOR)
	}
	{
		p.SetState(9371)
		p.Full_column_name()
	}
	{
		p.SetState(9372)
		p.Match(TSqlParserIN)
	}
	{
		p.SetState(9373)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9374)
		p.Full_column_name_list()
	}
	{
		p.SetState(9375)
		p.Match(TSqlParserRR_BRACKET)
	}
	{
		p.SetState(9376)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IFull_column_name_listContext is an interface to support dynamic dispatch.
type IFull_column_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_column_name_listContext differentiates from other interfaces.
	IsFull_column_name_listContext()
}

type Full_column_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_column_name_listContext() *Full_column_name_listContext {
	var p = new(Full_column_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_full_column_name_list
	return p
}

func (*Full_column_name_listContext) IsFull_column_name_listContext() {}

func NewFull_column_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_name_listContext {
	var p = new(Full_column_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_full_column_name_list

	return p
}

func (s *Full_column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_name_listContext) AllFull_column_name() []IFull_column_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem())
	var tst = make([]IFull_column_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFull_column_nameContext)
		}
	}

	return tst
}

func (s *Full_column_name_listContext) Full_column_name(i int) IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Full_column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFull_column_name_list(s)
	}
}

func (s *Full_column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFull_column_name_list(s)
	}
}

func (s *Full_column_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFull_column_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Full_column_name_list() (localctx IFull_column_name_listContext) {
	localctx = NewFull_column_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 798, TSqlParserRULE_full_column_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9378)
		p.Full_column_name()
	}
	p.SetState(9383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9379)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9380)
			p.Full_column_name()
		}

		p.SetState(9385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITable_name_with_hintContext is an interface to support dynamic dispatch.
type ITable_name_with_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_name_with_hintContext differentiates from other interfaces.
	IsTable_name_with_hintContext()
}

type Table_name_with_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_name_with_hintContext() *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_name_with_hint
	return p
}

func (*Table_name_with_hintContext) IsTable_name_with_hintContext() {}

func NewTable_name_with_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_name_with_hintContext {
	var p = new(Table_name_with_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_name_with_hint

	return p
}

func (s *Table_name_with_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_name_with_hintContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_name_with_hintContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_name_with_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_name_with_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_name_with_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_name_with_hint(s)
	}
}

func (s *Table_name_with_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_name_with_hint(s)
	}
}

func (s *Table_name_with_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_name_with_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_name_with_hint() (localctx ITable_name_with_hintContext) {
	localctx = NewTable_name_with_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 800, TSqlParserRULE_table_name_with_hint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9386)
		p.Table_name()
	}
	p.SetState(9388)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1331, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9387)
			p.With_table_hints()
		}

	}

	return localctx
}

// IRowset_functionContext is an interface to support dynamic dispatch.
type IRowset_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetProvider_name returns the provider_name token.
	GetProvider_name() antlr.Token

	// GetConnectionString returns the connectionString token.
	GetConnectionString() antlr.Token

	// GetSql returns the sql token.
	GetSql() antlr.Token

	// GetData_file returns the data_file token.
	GetData_file() antlr.Token

	// SetProvider_name sets the provider_name token.
	SetProvider_name(antlr.Token)

	// SetConnectionString sets the connectionString token.
	SetConnectionString(antlr.Token)

	// SetSql sets the sql token.
	SetSql(antlr.Token)

	// SetData_file sets the data_file token.
	SetData_file(antlr.Token)

	// IsRowset_functionContext differentiates from other interfaces.
	IsRowset_functionContext()
}

type Rowset_functionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	provider_name    antlr.Token
	connectionString antlr.Token
	sql              antlr.Token
	data_file        antlr.Token
}

func NewEmptyRowset_functionContext() *Rowset_functionContext {
	var p = new(Rowset_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_rowset_function
	return p
}

func (*Rowset_functionContext) IsRowset_functionContext() {}

func NewRowset_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rowset_functionContext {
	var p = new(Rowset_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_rowset_function

	return p
}

func (s *Rowset_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Rowset_functionContext) GetProvider_name() antlr.Token { return s.provider_name }

func (s *Rowset_functionContext) GetConnectionString() antlr.Token { return s.connectionString }

func (s *Rowset_functionContext) GetSql() antlr.Token { return s.sql }

func (s *Rowset_functionContext) GetData_file() antlr.Token { return s.data_file }

func (s *Rowset_functionContext) SetProvider_name(v antlr.Token) { s.provider_name = v }

func (s *Rowset_functionContext) SetConnectionString(v antlr.Token) { s.connectionString = v }

func (s *Rowset_functionContext) SetSql(v antlr.Token) { s.sql = v }

func (s *Rowset_functionContext) SetData_file(v antlr.Token) { s.data_file = v }

func (s *Rowset_functionContext) OPENROWSET() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPENROWSET, 0)
}

func (s *Rowset_functionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCOMMA)
}

func (s *Rowset_functionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMA, i)
}

func (s *Rowset_functionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Rowset_functionContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Rowset_functionContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Rowset_functionContext) BULK() antlr.TerminalNode {
	return s.GetToken(TSqlParserBULK, 0)
}

func (s *Rowset_functionContext) AllBulk_option() []IBulk_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem())
	var tst = make([]IBulk_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBulk_optionContext)
		}
	}

	return tst
}

func (s *Rowset_functionContext) Bulk_option(i int) IBulk_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBulk_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBulk_optionContext)
}

func (s *Rowset_functionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Rowset_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rowset_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rowset_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRowset_function(s)
	}
}

func (s *Rowset_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRowset_function(s)
	}
}

func (s *Rowset_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRowset_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Rowset_function() (localctx IRowset_functionContext) {
	localctx = NewRowset_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 802, TSqlParserRULE_rowset_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9416)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1334, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9390)
			p.Match(TSqlParserOPENROWSET)
		}
		{
			p.SetState(9391)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9392)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Rowset_functionContext).provider_name = _m
		}
		{
			p.SetState(9393)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9394)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Rowset_functionContext).connectionString = _m
		}
		{
			p.SetState(9395)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9396)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Rowset_functionContext).sql = _m
		}
		{
			p.SetState(9397)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9398)
			p.Match(TSqlParserOPENROWSET)
		}
		{
			p.SetState(9399)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9400)
			p.Match(TSqlParserBULK)
		}
		{
			p.SetState(9401)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Rowset_functionContext).data_file = _m
		}
		{
			p.SetState(9402)
			p.Match(TSqlParserCOMMA)
		}
		p.SetState(9412)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1333, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9403)
				p.Bulk_option()
			}
			p.SetState(9408)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserCOMMA {
				{
					p.SetState(9404)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(9405)
					p.Bulk_option()
				}

				p.SetState(9410)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		case 2:
			{
				p.SetState(9411)
				p.Id()
			}

		}
		{
			p.SetState(9414)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IBulk_optionContext is an interface to support dynamic dispatch.
type IBulk_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetBulk_option_value returns the bulk_option_value token.
	GetBulk_option_value() antlr.Token

	// SetBulk_option_value sets the bulk_option_value token.
	SetBulk_option_value(antlr.Token)

	// IsBulk_optionContext differentiates from other interfaces.
	IsBulk_optionContext()
}

type Bulk_optionContext struct {
	*antlr.BaseParserRuleContext
	parser            antlr.Parser
	bulk_option_value antlr.Token
}

func NewEmptyBulk_optionContext() *Bulk_optionContext {
	var p = new(Bulk_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_bulk_option
	return p
}

func (*Bulk_optionContext) IsBulk_optionContext() {}

func NewBulk_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bulk_optionContext {
	var p = new(Bulk_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_bulk_option

	return p
}

func (s *Bulk_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bulk_optionContext) GetBulk_option_value() antlr.Token { return s.bulk_option_value }

func (s *Bulk_optionContext) SetBulk_option_value(v antlr.Token) { s.bulk_option_value = v }

func (s *Bulk_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Bulk_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Bulk_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Bulk_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bulk_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bulk_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBulk_option(s)
	}
}

func (s *Bulk_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBulk_option(s)
	}
}

func (s *Bulk_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBulk_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Bulk_option() (localctx IBulk_optionContext) {
	localctx = NewBulk_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 804, TSqlParserRULE_bulk_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9418)
		p.Id()
	}
	{
		p.SetState(9419)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(9420)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Bulk_optionContext).bulk_option_value = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserDECIMAL || _la == TSqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Bulk_optionContext).bulk_option_value = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDerived_tableContext is an interface to support dynamic dispatch.
type IDerived_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDerived_tableContext differentiates from other interfaces.
	IsDerived_tableContext()
}

type Derived_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDerived_tableContext() *Derived_tableContext {
	var p = new(Derived_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_derived_table
	return p
}

func (*Derived_tableContext) IsDerived_tableContext() {}

func NewDerived_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Derived_tableContext {
	var p = new(Derived_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_derived_table

	return p
}

func (s *Derived_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Derived_tableContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *Derived_tableContext) Table_value_constructor() ITable_value_constructorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_value_constructorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_value_constructorContext)
}

func (s *Derived_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Derived_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Derived_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDerived_table(s)
	}
}

func (s *Derived_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDerived_table(s)
	}
}

func (s *Derived_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDerived_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Derived_table() (localctx IDerived_tableContext) {
	localctx = NewDerived_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 806, TSqlParserRULE_derived_table)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9432)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1335, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9422)
			p.Subquery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9423)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9424)
			p.Subquery()
		}
		{
			p.SetState(9425)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9427)
			p.Table_value_constructor()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9428)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9429)
			p.Table_value_constructor()
		}
		{
			p.SetState(9430)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) CopyFrom(ctx *Function_callContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CURRENT_USERContext struct {
	*Function_callContext
}

func NewCURRENT_USERContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CURRENT_USERContext {
	var p = new(CURRENT_USERContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *CURRENT_USERContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CURRENT_USERContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT_USER, 0)
}

func (s *CURRENT_USERContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCURRENT_USER(s)
	}
}

func (s *CURRENT_USERContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCURRENT_USER(s)
	}
}

func (s *CURRENT_USERContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCURRENT_USER(s)

	default:
		return t.VisitChildren(s)
	}
}

type DATEADDContext struct {
	*Function_callContext
}

func NewDATEADDContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DATEADDContext {
	var p = new(DATEADDContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *DATEADDContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DATEADDContext) DATEADD() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATEADD, 0)
}

func (s *DATEADDContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *DATEADDContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DATEADDContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DATEADDContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDATEADD(s)
	}
}

func (s *DATEADDContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDATEADD(s)
	}
}

func (s *DATEADDContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDATEADD(s)

	default:
		return t.VisitChildren(s)
	}
}

type CHECKSUMContext struct {
	*Function_callContext
}

func NewCHECKSUMContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CHECKSUMContext {
	var p = new(CHECKSUMContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *CHECKSUMContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CHECKSUMContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM, 0)
}

func (s *CHECKSUMContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCHECKSUM(s)
	}
}

func (s *CHECKSUMContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCHECKSUM(s)
	}
}

func (s *CHECKSUMContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCHECKSUM(s)

	default:
		return t.VisitChildren(s)
	}
}

type CURRENT_TIMESTAMPContext struct {
	*Function_callContext
}

func NewCURRENT_TIMESTAMPContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CURRENT_TIMESTAMPContext {
	var p = new(CURRENT_TIMESTAMPContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *CURRENT_TIMESTAMPContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CURRENT_TIMESTAMPContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT_TIMESTAMP, 0)
}

func (s *CURRENT_TIMESTAMPContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCURRENT_TIMESTAMP(s)
	}
}

func (s *CURRENT_TIMESTAMPContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCURRENT_TIMESTAMP(s)
	}
}

func (s *CURRENT_TIMESTAMPContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCURRENT_TIMESTAMP(s)

	default:
		return t.VisitChildren(s)
	}
}

type BINARY_CHECKSUMContext struct {
	*Function_callContext
}

func NewBINARY_CHECKSUMContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BINARY_CHECKSUMContext {
	var p = new(BINARY_CHECKSUMContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *BINARY_CHECKSUMContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BINARY_CHECKSUMContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY_CHECKSUM, 0)
}

func (s *BINARY_CHECKSUMContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBINARY_CHECKSUM(s)
	}
}

func (s *BINARY_CHECKSUMContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBINARY_CHECKSUM(s)
	}
}

func (s *BINARY_CHECKSUMContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBINARY_CHECKSUM(s)

	default:
		return t.VisitChildren(s)
	}
}

type SYSTEM_USERContext struct {
	*Function_callContext
}

func NewSYSTEM_USERContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SYSTEM_USERContext {
	var p = new(SYSTEM_USERContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *SYSTEM_USERContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SYSTEM_USERContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSYSTEM_USER, 0)
}

func (s *SYSTEM_USERContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSYSTEM_USER(s)
	}
}

func (s *SYSTEM_USERContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSYSTEM_USER(s)
	}
}

func (s *SYSTEM_USERContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSYSTEM_USER(s)

	default:
		return t.VisitChildren(s)
	}
}

type NULLIFContext struct {
	*Function_callContext
}

func NewNULLIFContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NULLIFContext {
	var p = new(NULLIFContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *NULLIFContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NULLIFContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULLIF, 0)
}

func (s *NULLIFContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *NULLIFContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NULLIFContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNULLIF(s)
	}
}

func (s *NULLIFContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNULLIF(s)
	}
}

func (s *NULLIFContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNULLIF(s)

	default:
		return t.VisitChildren(s)
	}
}

type SESSION_USERContext struct {
	*Function_callContext
}

func NewSESSION_USERContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SESSION_USERContext {
	var p = new(SESSION_USERContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *SESSION_USERContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SESSION_USERContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSESSION_USER, 0)
}

func (s *SESSION_USERContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSESSION_USER(s)
	}
}

func (s *SESSION_USERContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSESSION_USER(s)
	}
}

func (s *SESSION_USERContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSESSION_USER(s)

	default:
		return t.VisitChildren(s)
	}
}

type CONVERTContext struct {
	*Function_callContext
	convert_data_type  IData_typeContext
	convert_expression IExpressionContext
	style              IExpressionContext
}

func NewCONVERTContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CONVERTContext {
	var p = new(CONVERTContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *CONVERTContext) GetConvert_data_type() IData_typeContext { return s.convert_data_type }

func (s *CONVERTContext) GetConvert_expression() IExpressionContext { return s.convert_expression }

func (s *CONVERTContext) GetStyle() IExpressionContext { return s.style }

func (s *CONVERTContext) SetConvert_data_type(v IData_typeContext) { s.convert_data_type = v }

func (s *CONVERTContext) SetConvert_expression(v IExpressionContext) { s.convert_expression = v }

func (s *CONVERTContext) SetStyle(v IExpressionContext) { s.style = v }

func (s *CONVERTContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CONVERTContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERT, 0)
}

func (s *CONVERTContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *CONVERTContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CONVERTContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CONVERTContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCONVERT(s)
	}
}

func (s *CONVERTContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCONVERT(s)
	}
}

func (s *CONVERTContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCONVERT(s)

	default:
		return t.VisitChildren(s)
	}
}

type XML_DATA_TYPE_FUNCContext struct {
	*Function_callContext
}

func NewXML_DATA_TYPE_FUNCContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *XML_DATA_TYPE_FUNCContext {
	var p = new(XML_DATA_TYPE_FUNCContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *XML_DATA_TYPE_FUNCContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XML_DATA_TYPE_FUNCContext) Xml_data_type_methods() IXml_data_type_methodsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXml_data_type_methodsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXml_data_type_methodsContext)
}

func (s *XML_DATA_TYPE_FUNCContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterXML_DATA_TYPE_FUNC(s)
	}
}

func (s *XML_DATA_TYPE_FUNCContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitXML_DATA_TYPE_FUNC(s)
	}
}

func (s *XML_DATA_TYPE_FUNCContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitXML_DATA_TYPE_FUNC(s)

	default:
		return t.VisitChildren(s)
	}
}

type COALESCEContext struct {
	*Function_callContext
}

func NewCOALESCEContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *COALESCEContext {
	var p = new(COALESCEContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *COALESCEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *COALESCEContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOALESCE, 0)
}

func (s *COALESCEContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *COALESCEContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCOALESCE(s)
	}
}

func (s *COALESCEContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCOALESCE(s)
	}
}

func (s *COALESCEContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCOALESCE(s)

	default:
		return t.VisitChildren(s)
	}
}

type CASTContext struct {
	*Function_callContext
}

func NewCASTContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CASTContext {
	var p = new(CASTContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *CASTContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CASTContext) CAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserCAST, 0)
}

func (s *CASTContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CASTContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *CASTContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *CASTContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCAST(s)
	}
}

func (s *CASTContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCAST(s)
	}
}

func (s *CASTContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCAST(s)

	default:
		return t.VisitChildren(s)
	}
}

type MIN_ACTIVE_ROWVERSIONContext struct {
	*Function_callContext
}

func NewMIN_ACTIVE_ROWVERSIONContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MIN_ACTIVE_ROWVERSIONContext {
	var p = new(MIN_ACTIVE_ROWVERSIONContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *MIN_ACTIVE_ROWVERSIONContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MIN_ACTIVE_ROWVERSIONContext) MIN_ACTIVE_ROWVERSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN_ACTIVE_ROWVERSION, 0)
}

func (s *MIN_ACTIVE_ROWVERSIONContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterMIN_ACTIVE_ROWVERSION(s)
	}
}

func (s *MIN_ACTIVE_ROWVERSIONContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitMIN_ACTIVE_ROWVERSION(s)
	}
}

func (s *MIN_ACTIVE_ROWVERSIONContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitMIN_ACTIVE_ROWVERSION(s)

	default:
		return t.VisitChildren(s)
	}
}

type SCALAR_FUNCTIONContext struct {
	*Function_callContext
}

func NewSCALAR_FUNCTIONContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SCALAR_FUNCTIONContext {
	var p = new(SCALAR_FUNCTIONContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *SCALAR_FUNCTIONContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SCALAR_FUNCTIONContext) Scalar_function_name() IScalar_function_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalar_function_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalar_function_nameContext)
}

func (s *SCALAR_FUNCTIONContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *SCALAR_FUNCTIONContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSCALAR_FUNCTION(s)
	}
}

func (s *SCALAR_FUNCTIONContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSCALAR_FUNCTION(s)
	}
}

func (s *SCALAR_FUNCTIONContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSCALAR_FUNCTION(s)

	default:
		return t.VisitChildren(s)
	}
}

type DATEPARTContext struct {
	*Function_callContext
}

func NewDATEPARTContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DATEPARTContext {
	var p = new(DATEPARTContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *DATEPARTContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DATEPARTContext) DATEPART() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATEPART, 0)
}

func (s *DATEPARTContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *DATEPARTContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DATEPARTContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDATEPART(s)
	}
}

func (s *DATEPARTContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDATEPART(s)
	}
}

func (s *DATEPARTContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDATEPART(s)

	default:
		return t.VisitChildren(s)
	}
}

type STUFFContext struct {
	*Function_callContext
}

func NewSTUFFContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *STUFFContext {
	var p = new(STUFFContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *STUFFContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *STUFFContext) STUFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTUFF, 0)
}

func (s *STUFFContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *STUFFContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *STUFFContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *STUFFContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *STUFFContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSTUFF(s)
	}
}

func (s *STUFFContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSTUFF(s)
	}
}

func (s *STUFFContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSTUFF(s)

	default:
		return t.VisitChildren(s)
	}
}

type AGGREGATE_WINDOWED_FUNCContext struct {
	*Function_callContext
}

func NewAGGREGATE_WINDOWED_FUNCContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AGGREGATE_WINDOWED_FUNCContext {
	var p = new(AGGREGATE_WINDOWED_FUNCContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *AGGREGATE_WINDOWED_FUNCContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AGGREGATE_WINDOWED_FUNCContext) Aggregate_windowed_function() IAggregate_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_windowed_functionContext)
}

func (s *AGGREGATE_WINDOWED_FUNCContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAGGREGATE_WINDOWED_FUNC(s)
	}
}

func (s *AGGREGATE_WINDOWED_FUNCContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAGGREGATE_WINDOWED_FUNC(s)
	}
}

func (s *AGGREGATE_WINDOWED_FUNCContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAGGREGATE_WINDOWED_FUNC(s)

	default:
		return t.VisitChildren(s)
	}
}

type IDENTITYContext struct {
	*Function_callContext
	seed      antlr.Token
	increment antlr.Token
}

func NewIDENTITYContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IDENTITYContext {
	var p = new(IDENTITYContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *IDENTITYContext) GetSeed() antlr.Token { return s.seed }

func (s *IDENTITYContext) GetIncrement() antlr.Token { return s.increment }

func (s *IDENTITYContext) SetSeed(v antlr.Token) { s.seed = v }

func (s *IDENTITYContext) SetIncrement(v antlr.Token) { s.increment = v }

func (s *IDENTITYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IDENTITYContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *IDENTITYContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *IDENTITYContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *IDENTITYContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *IDENTITYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterIDENTITY(s)
	}
}

func (s *IDENTITYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitIDENTITY(s)
	}
}

func (s *IDENTITYContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitIDENTITY(s)

	default:
		return t.VisitChildren(s)
	}
}

type RANKING_WINDOWED_FUNCContext struct {
	*Function_callContext
}

func NewRANKING_WINDOWED_FUNCContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RANKING_WINDOWED_FUNCContext {
	var p = new(RANKING_WINDOWED_FUNCContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *RANKING_WINDOWED_FUNCContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RANKING_WINDOWED_FUNCContext) Ranking_windowed_function() IRanking_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRanking_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRanking_windowed_functionContext)
}

func (s *RANKING_WINDOWED_FUNCContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRANKING_WINDOWED_FUNC(s)
	}
}

func (s *RANKING_WINDOWED_FUNCContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRANKING_WINDOWED_FUNC(s)
	}
}

func (s *RANKING_WINDOWED_FUNCContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRANKING_WINDOWED_FUNC(s)

	default:
		return t.VisitChildren(s)
	}
}

type DATENAMEContext struct {
	*Function_callContext
}

func NewDATENAMEContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DATENAMEContext {
	var p = new(DATENAMEContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *DATENAMEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DATENAMEContext) DATENAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATENAME, 0)
}

func (s *DATENAMEContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *DATENAMEContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DATENAMEContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDATENAME(s)
	}
}

func (s *DATENAMEContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDATENAME(s)
	}
}

func (s *DATENAMEContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDATENAME(s)

	default:
		return t.VisitChildren(s)
	}
}

type GETUTCDATEContext struct {
	*Function_callContext
}

func NewGETUTCDATEContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GETUTCDATEContext {
	var p = new(GETUTCDATEContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *GETUTCDATEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GETUTCDATEContext) GETUTCDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserGETUTCDATE, 0)
}

func (s *GETUTCDATEContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGETUTCDATE(s)
	}
}

func (s *GETUTCDATEContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGETUTCDATE(s)
	}
}

func (s *GETUTCDATEContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGETUTCDATE(s)

	default:
		return t.VisitChildren(s)
	}
}

type ANALYTIC_WINDOWED_FUNCContext struct {
	*Function_callContext
}

func NewANALYTIC_WINDOWED_FUNCContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ANALYTIC_WINDOWED_FUNCContext {
	var p = new(ANALYTIC_WINDOWED_FUNCContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *ANALYTIC_WINDOWED_FUNCContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ANALYTIC_WINDOWED_FUNCContext) Analytic_windowed_function() IAnalytic_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalytic_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalytic_windowed_functionContext)
}

func (s *ANALYTIC_WINDOWED_FUNCContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterANALYTIC_WINDOWED_FUNC(s)
	}
}

func (s *ANALYTIC_WINDOWED_FUNCContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitANALYTIC_WINDOWED_FUNC(s)
	}
}

func (s *ANALYTIC_WINDOWED_FUNCContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitANALYTIC_WINDOWED_FUNC(s)

	default:
		return t.VisitChildren(s)
	}
}

type ISNULLContext struct {
	*Function_callContext
}

func NewISNULLContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ISNULLContext {
	var p = new(ISNULLContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *ISNULLContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ISNULLContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserISNULL, 0)
}

func (s *ISNULLContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ISNULLContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ISNULLContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterISNULL(s)
	}
}

func (s *ISNULLContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitISNULL(s)
	}
}

func (s *ISNULLContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitISNULL(s)

	default:
		return t.VisitChildren(s)
	}
}

type DATEDIFFContext struct {
	*Function_callContext
}

func NewDATEDIFFContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DATEDIFFContext {
	var p = new(DATEDIFFContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *DATEDIFFContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DATEDIFFContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATEDIFF, 0)
}

func (s *DATEDIFFContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *DATEDIFFContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *DATEDIFFContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DATEDIFFContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDATEDIFF(s)
	}
}

func (s *DATEDIFFContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDATEDIFF(s)
	}
}

func (s *DATEDIFFContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDATEDIFF(s)

	default:
		return t.VisitChildren(s)
	}
}

type GETDATEContext struct {
	*Function_callContext
}

func NewGETDATEContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GETDATEContext {
	var p = new(GETDATEContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *GETDATEContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GETDATEContext) GETDATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserGETDATE, 0)
}

func (s *GETDATEContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGETDATE(s)
	}
}

func (s *GETDATEContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGETDATE(s)
	}
}

func (s *GETDATEContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGETDATE(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Function_call() (localctx IFunction_callContext) {
	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 808, TSqlParserRULE_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9557)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1340, p.GetParserRuleContext()) {
	case 1:
		localctx = NewRANKING_WINDOWED_FUNCContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9434)
			p.Ranking_windowed_function()
		}

	case 2:
		localctx = NewAGGREGATE_WINDOWED_FUNCContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9435)
			p.Aggregate_windowed_function()
		}

	case 3:
		localctx = NewANALYTIC_WINDOWED_FUNCContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9436)
			p.Analytic_windowed_function()
		}

	case 4:
		localctx = NewSCALAR_FUNCTIONContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9437)
			p.Scalar_function_name()
		}
		{
			p.SetState(9438)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(9440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-29)&-(0x1f+1)) == 0 && ((1<<uint((_la-29)))&((1<<(TSqlParserBLOCKING_HIERARCHY-29))|(1<<(TSqlParserCALLED-29))|(1<<(TSqlParserCASE-29))|(1<<(TSqlParserCOALESCE-29)))) != 0) || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(TSqlParserCONVERT-68))|(1<<(TSqlParserCURRENT_TIMESTAMP-68))|(1<<(TSqlParserCURRENT_USER-68))|(1<<(TSqlParserDATA_COMPRESSION-68))|(1<<(TSqlParserDEFAULT-68)))) != 0) || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(TSqlParserIDENTITY-148))|(1<<(TSqlParserISNULL-148))|(1<<(TSqlParserKEY-148))|(1<<(TSqlParserLEFT-148)))) != 0) || _la == TSqlParserMASTER || _la == TSqlParserMAX_MEMORY || (((_la-220)&-(0x1f+1)) == 0 && ((1<<uint((_la-220)))&((1<<(TSqlParserNULL-220))|(1<<(TSqlParserNULLIF-220))|(1<<(TSqlParserOFFSETS-220))|(1<<(TSqlParserOVER-220))|(1<<(TSqlParserPAGE-220)))) != 0) || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserRIGHT-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSESSION_USER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || (((_la-328)&-(0x1f+1)) == 0 && ((1<<uint((_la-328)))&((1<<(TSqlParserSTATE-328))|(1<<(TSqlParserSYSTEM_USER-328))|(1<<(TSqlParserTARGET-328)))) != 0) || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserANSI_NULLS-382))|(1<<(TSqlParserANSI_PADDING-382))|(1<<(TSqlParserANSI_WARNINGS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserARITHABORT-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserBINARY_CHECKSUM-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCOMPATIBILITY_LEVEL-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDATEADD-447))|(1<<(TSqlParserDATEDIFF-447))|(1<<(TSqlParserDATENAME-447))|(1<<(TSqlParserDATEPART-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479))|(1<<(TSqlParserFIRST_VALUE-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGETDATE-511))|(1<<(TSqlParserGETUTCDATE-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAG-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLAST_VALUE-545))|(1<<(TSqlParserLEAD-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMIN_ACTIVE_ROWVERSION-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserQUOTED_IDENTIFIER-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTATUS-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSTUFF-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserLOCAL_ID-747))|(1<<(TSqlParserDECIMAL-747))|(1<<(TSqlParserID-747)))) != 0) || (((_la-781)&-(0x1f+1)) == 0 && ((1<<uint((_la-781)))&((1<<(TSqlParserSTRING-781))|(1<<(TSqlParserBINARY-781))|(1<<(TSqlParserFLOAT-781))|(1<<(TSqlParserREAL-781))|(1<<(TSqlParserDOLLAR-781))|(1<<(TSqlParserLR_BRACKET-781))|(1<<(TSqlParserPLUS-781))|(1<<(TSqlParserMINUS-781))|(1<<(TSqlParserBIT_NOT-781)))) != 0) {
			{
				p.SetState(9439)
				p.Expression_list()
			}

		}
		{
			p.SetState(9442)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewBINARY_CHECKSUMContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9444)
			p.Match(TSqlParserBINARY_CHECKSUM)
		}
		{
			p.SetState(9445)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9446)
			p.Match(TSqlParserSTAR)
		}
		{
			p.SetState(9447)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewCASTContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9448)
			p.Match(TSqlParserCAST)
		}
		{
			p.SetState(9449)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9450)
			p.expression(0)
		}
		{
			p.SetState(9451)
			p.Match(TSqlParserAS)
		}
		{
			p.SetState(9452)
			p.Data_type()
		}
		{
			p.SetState(9453)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 7:
		localctx = NewCONVERTContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9455)
			p.Match(TSqlParserCONVERT)
		}
		{
			p.SetState(9456)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9457)

			var _x = p.Data_type()

			localctx.(*CONVERTContext).convert_data_type = _x
		}
		{
			p.SetState(9458)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9459)

			var _x = p.expression(0)

			localctx.(*CONVERTContext).convert_expression = _x
		}
		p.SetState(9462)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(9460)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9461)

				var _x = p.expression(0)

				localctx.(*CONVERTContext).style = _x
			}

		}
		{
			p.SetState(9464)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 8:
		localctx = NewCHECKSUMContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9466)
			p.Match(TSqlParserCHECKSUM)
		}
		{
			p.SetState(9467)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9468)
			p.Match(TSqlParserSTAR)
		}
		{
			p.SetState(9469)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewCOALESCEContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(9470)
			p.Match(TSqlParserCOALESCE)
		}
		{
			p.SetState(9471)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9472)
			p.Expression_list()
		}
		{
			p.SetState(9473)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewCURRENT_TIMESTAMPContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(9475)
			p.Match(TSqlParserCURRENT_TIMESTAMP)
		}

	case 11:
		localctx = NewCURRENT_USERContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(9476)
			p.Match(TSqlParserCURRENT_USER)
		}

	case 12:
		localctx = NewDATEADDContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(9477)
			p.Match(TSqlParserDATEADD)
		}
		{
			p.SetState(9478)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9479)
			p.Match(TSqlParserID)
		}
		{
			p.SetState(9480)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9481)
			p.expression(0)
		}
		{
			p.SetState(9482)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9483)
			p.expression(0)
		}
		{
			p.SetState(9484)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 13:
		localctx = NewDATEDIFFContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(9486)
			p.Match(TSqlParserDATEDIFF)
		}
		{
			p.SetState(9487)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9488)
			p.Match(TSqlParserID)
		}
		{
			p.SetState(9489)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9490)
			p.expression(0)
		}
		{
			p.SetState(9491)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9492)
			p.expression(0)
		}
		{
			p.SetState(9493)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 14:
		localctx = NewDATENAMEContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(9495)
			p.Match(TSqlParserDATENAME)
		}
		{
			p.SetState(9496)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9497)
			p.Match(TSqlParserID)
		}
		{
			p.SetState(9498)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9499)
			p.expression(0)
		}
		{
			p.SetState(9500)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 15:
		localctx = NewDATEPARTContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(9502)
			p.Match(TSqlParserDATEPART)
		}
		{
			p.SetState(9503)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9504)
			p.Match(TSqlParserID)
		}
		{
			p.SetState(9505)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9506)
			p.expression(0)
		}
		{
			p.SetState(9507)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 16:
		localctx = NewGETDATEContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(9509)
			p.Match(TSqlParserGETDATE)
		}
		{
			p.SetState(9510)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9511)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 17:
		localctx = NewGETUTCDATEContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(9512)
			p.Match(TSqlParserGETUTCDATE)
		}
		{
			p.SetState(9513)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9514)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 18:
		localctx = NewIDENTITYContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(9515)
			p.Match(TSqlParserIDENTITY)
		}
		{
			p.SetState(9516)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9517)
			p.Data_type()
		}
		p.SetState(9520)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1338, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9518)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9519)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*IDENTITYContext).seed = _m
			}

		}
		p.SetState(9524)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(9522)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9523)

				var _m = p.Match(TSqlParserDECIMAL)

				localctx.(*IDENTITYContext).increment = _m
			}

		}
		{
			p.SetState(9526)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 19:
		localctx = NewMIN_ACTIVE_ROWVERSIONContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(9528)
			p.Match(TSqlParserMIN_ACTIVE_ROWVERSION)
		}

	case 20:
		localctx = NewNULLIFContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(9529)
			p.Match(TSqlParserNULLIF)
		}
		{
			p.SetState(9530)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9531)
			p.expression(0)
		}
		{
			p.SetState(9532)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9533)
			p.expression(0)
		}
		{
			p.SetState(9534)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 21:
		localctx = NewSTUFFContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(9536)
			p.Match(TSqlParserSTUFF)
		}
		{
			p.SetState(9537)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9538)
			p.expression(0)
		}
		{
			p.SetState(9539)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9540)
			p.Match(TSqlParserDECIMAL)
		}
		{
			p.SetState(9541)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9542)
			p.Match(TSqlParserDECIMAL)
		}
		{
			p.SetState(9543)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9544)
			p.expression(0)
		}
		{
			p.SetState(9545)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 22:
		localctx = NewSESSION_USERContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(9547)
			p.Match(TSqlParserSESSION_USER)
		}

	case 23:
		localctx = NewSYSTEM_USERContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(9548)
			p.Match(TSqlParserSYSTEM_USER)
		}

	case 24:
		localctx = NewISNULLContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(9549)
			p.Match(TSqlParserISNULL)
		}
		{
			p.SetState(9550)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9551)
			p.expression(0)
		}
		{
			p.SetState(9552)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9553)
			p.expression(0)
		}
		{
			p.SetState(9554)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 25:
		localctx = NewXML_DATA_TYPE_FUNCContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(9556)
			p.Xml_data_type_methods()
		}

	}

	return localctx
}

// IXml_data_type_methodsContext is an interface to support dynamic dispatch.
type IXml_data_type_methodsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXml_data_type_methodsContext differentiates from other interfaces.
	IsXml_data_type_methodsContext()
}

type Xml_data_type_methodsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXml_data_type_methodsContext() *Xml_data_type_methodsContext {
	var p = new(Xml_data_type_methodsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_xml_data_type_methods
	return p
}

func (*Xml_data_type_methodsContext) IsXml_data_type_methodsContext() {}

func NewXml_data_type_methodsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xml_data_type_methodsContext {
	var p = new(Xml_data_type_methodsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_xml_data_type_methods

	return p
}

func (s *Xml_data_type_methodsContext) GetParser() antlr.Parser { return s.parser }

func (s *Xml_data_type_methodsContext) Value_method() IValue_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValue_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValue_methodContext)
}

func (s *Xml_data_type_methodsContext) Query_method() IQuery_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_methodContext)
}

func (s *Xml_data_type_methodsContext) Exist_method() IExist_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExist_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExist_methodContext)
}

func (s *Xml_data_type_methodsContext) Modify_method() IModify_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModify_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModify_methodContext)
}

func (s *Xml_data_type_methodsContext) Nodes_method() INodes_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INodes_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INodes_methodContext)
}

func (s *Xml_data_type_methodsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xml_data_type_methodsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xml_data_type_methodsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterXml_data_type_methods(s)
	}
}

func (s *Xml_data_type_methodsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitXml_data_type_methods(s)
	}
}

func (s *Xml_data_type_methodsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitXml_data_type_methods(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Xml_data_type_methods() (localctx IXml_data_type_methodsContext) {
	localctx = NewXml_data_type_methodsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 810, TSqlParserRULE_xml_data_type_methods)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9564)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1341, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9559)
			p.Value_method()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9560)
			p.Query_method()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9561)
			p.Exist_method()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9562)
			p.Modify_method()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9563)
			p.Nodes_method()
		}

	}

	return localctx
}

// IValue_methodContext is an interface to support dynamic dispatch.
type IValue_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXquery returns the xquery token.
	GetXquery() antlr.Token

	// GetSqltype returns the sqltype token.
	GetSqltype() antlr.Token

	// SetXquery sets the xquery token.
	SetXquery(antlr.Token)

	// SetSqltype sets the sqltype token.
	SetSqltype(antlr.Token)

	// IsValue_methodContext differentiates from other interfaces.
	IsValue_methodContext()
}

type Value_methodContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	xquery  antlr.Token
	sqltype antlr.Token
}

func NewEmptyValue_methodContext() *Value_methodContext {
	var p = new(Value_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_value_method
	return p
}

func (*Value_methodContext) IsValue_methodContext() {}

func NewValue_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Value_methodContext {
	var p = new(Value_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_value_method

	return p
}

func (s *Value_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Value_methodContext) GetXquery() antlr.Token { return s.xquery }

func (s *Value_methodContext) GetSqltype() antlr.Token { return s.sqltype }

func (s *Value_methodContext) SetXquery(v antlr.Token) { s.xquery = v }

func (s *Value_methodContext) SetSqltype(v antlr.Token) { s.sqltype = v }

func (s *Value_methodContext) VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUE, 0)
}

func (s *Value_methodContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Value_methodContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Value_methodContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Value_methodContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Value_methodContext) EVENTDATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENTDATA, 0)
}

func (s *Value_methodContext) Query_method() IQuery_methodContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_methodContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_methodContext)
}

func (s *Value_methodContext) ROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW, 0)
}

func (s *Value_methodContext) PARAM_NODE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARAM_NODE, 0)
}

func (s *Value_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Value_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Value_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterValue_method(s)
	}
}

func (s *Value_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitValue_method(s)
	}
}

func (s *Value_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitValue_method(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Value_method() (localctx IValue_methodContext) {
	localctx = NewValue_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 812, TSqlParserRULE_value_method)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9609)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1345, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9570)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1342, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9566)
				p.Match(TSqlParserLOCAL_ID)
			}

		case 2:
			{
				p.SetState(9567)
				p.Match(TSqlParserID)
			}

		case 3:
			{
				p.SetState(9568)
				p.Match(TSqlParserEVENTDATA)
			}

		case 4:
			{
				p.SetState(9569)
				p.Query_method()
			}

		}
		{
			p.SetState(9572)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9573)
			p.Match(TSqlParserVALUE)
		}
		{
			p.SetState(9574)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9575)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).xquery = _m
		}
		{
			p.SetState(9576)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9577)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).sqltype = _m
		}
		{
			p.SetState(9578)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(9583)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1343, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9579)
				p.Match(TSqlParserLOCAL_ID)
			}

		case 2:
			{
				p.SetState(9580)
				p.Match(TSqlParserID)
			}

		case 3:
			{
				p.SetState(9581)
				p.Match(TSqlParserEVENTDATA)
			}

		case 4:
			{
				p.SetState(9582)
				p.Query_method()
			}

		}
		{
			p.SetState(9585)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9586)
			p.Match(TSqlParserROW)
		}
		{
			p.SetState(9587)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9588)
			p.Match(TSqlParserVALUE)
		}
		{
			p.SetState(9589)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9590)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).xquery = _m
		}
		{
			p.SetState(9591)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9592)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).sqltype = _m
		}
		{
			p.SetState(9593)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(9598)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1344, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9594)
				p.Match(TSqlParserLOCAL_ID)
			}

		case 2:
			{
				p.SetState(9595)
				p.Match(TSqlParserID)
			}

		case 3:
			{
				p.SetState(9596)
				p.Match(TSqlParserEVENTDATA)
			}

		case 4:
			{
				p.SetState(9597)
				p.Query_method()
			}

		}
		{
			p.SetState(9600)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9601)
			p.Match(TSqlParserPARAM_NODE)
		}
		{
			p.SetState(9602)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9603)
			p.Match(TSqlParserVALUE)
		}
		{
			p.SetState(9604)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9605)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).xquery = _m
		}
		{
			p.SetState(9606)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9607)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Value_methodContext).sqltype = _m
		}
		{
			p.SetState(9608)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuery_methodContext is an interface to support dynamic dispatch.
type IQuery_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXquery returns the xquery token.
	GetXquery() antlr.Token

	// SetXquery sets the xquery token.
	SetXquery(antlr.Token)

	// IsQuery_methodContext differentiates from other interfaces.
	IsQuery_methodContext()
}

type Query_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	xquery antlr.Token
}

func NewEmptyQuery_methodContext() *Query_methodContext {
	var p = new(Query_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_query_method
	return p
}

func (*Query_methodContext) IsQuery_methodContext() {}

func NewQuery_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_methodContext {
	var p = new(Query_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_query_method

	return p
}

func (s *Query_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_methodContext) GetXquery() antlr.Token { return s.xquery }

func (s *Query_methodContext) SetXquery(v antlr.Token) { s.xquery = v }

func (s *Query_methodContext) QUERY() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUERY, 0)
}

func (s *Query_methodContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Query_methodContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Query_methodContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Query_methodContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Query_methodContext) ROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW, 0)
}

func (s *Query_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQuery_method(s)
	}
}

func (s *Query_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQuery_method(s)
	}
}

func (s *Query_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQuery_method(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Query_method() (localctx IQuery_methodContext) {
	localctx = NewQuery_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 814, TSqlParserRULE_query_method)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9633)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1348, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9614)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1346, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9611)
				p.Match(TSqlParserLOCAL_ID)
			}

		case 2:
			{
				p.SetState(9612)
				p.Match(TSqlParserID)
			}

		case 3:
			{
				p.SetState(9613)
				p.Full_table_name()
			}

		}
		{
			p.SetState(9616)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9617)
			p.Match(TSqlParserQUERY)
		}
		{
			p.SetState(9618)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9619)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Query_methodContext).xquery = _m
		}
		{
			p.SetState(9620)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(9624)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1347, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(9621)
				p.Match(TSqlParserLOCAL_ID)
			}

		case 2:
			{
				p.SetState(9622)
				p.Match(TSqlParserID)
			}

		case 3:
			{
				p.SetState(9623)
				p.Full_table_name()
			}

		}
		{
			p.SetState(9626)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9627)
			p.Match(TSqlParserROW)
		}
		{
			p.SetState(9628)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(9629)
			p.Match(TSqlParserQUERY)
		}
		{
			p.SetState(9630)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9631)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Query_methodContext).xquery = _m
		}
		{
			p.SetState(9632)
			p.Match(TSqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IExist_methodContext is an interface to support dynamic dispatch.
type IExist_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXquery returns the xquery token.
	GetXquery() antlr.Token

	// SetXquery sets the xquery token.
	SetXquery(antlr.Token)

	// IsExist_methodContext differentiates from other interfaces.
	IsExist_methodContext()
}

type Exist_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	xquery antlr.Token
}

func NewEmptyExist_methodContext() *Exist_methodContext {
	var p = new(Exist_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_exist_method
	return p
}

func (*Exist_methodContext) IsExist_methodContext() {}

func NewExist_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exist_methodContext {
	var p = new(Exist_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_exist_method

	return p
}

func (s *Exist_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Exist_methodContext) GetXquery() antlr.Token { return s.xquery }

func (s *Exist_methodContext) SetXquery(v antlr.Token) { s.xquery = v }

func (s *Exist_methodContext) EXIST() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXIST, 0)
}

func (s *Exist_methodContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Exist_methodContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Exist_methodContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Exist_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exist_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exist_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExist_method(s)
	}
}

func (s *Exist_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExist_method(s)
	}
}

func (s *Exist_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExist_method(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Exist_method() (localctx IExist_methodContext) {
	localctx = NewExist_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 816, TSqlParserRULE_exist_method)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9635)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserID) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(9636)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(9637)
		p.Match(TSqlParserEXIST)
	}
	{
		p.SetState(9638)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9639)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Exist_methodContext).xquery = _m
	}
	{
		p.SetState(9640)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IModify_methodContext is an interface to support dynamic dispatch.
type IModify_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXml_dml returns the xml_dml token.
	GetXml_dml() antlr.Token

	// SetXml_dml sets the xml_dml token.
	SetXml_dml(antlr.Token)

	// IsModify_methodContext differentiates from other interfaces.
	IsModify_methodContext()
}

type Modify_methodContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	xml_dml antlr.Token
}

func NewEmptyModify_methodContext() *Modify_methodContext {
	var p = new(Modify_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_modify_method
	return p
}

func (*Modify_methodContext) IsModify_methodContext() {}

func NewModify_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Modify_methodContext {
	var p = new(Modify_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_modify_method

	return p
}

func (s *Modify_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Modify_methodContext) GetXml_dml() antlr.Token { return s.xml_dml }

func (s *Modify_methodContext) SetXml_dml(v antlr.Token) { s.xml_dml = v }

func (s *Modify_methodContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Modify_methodContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Modify_methodContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Modify_methodContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Modify_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Modify_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Modify_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterModify_method(s)
	}
}

func (s *Modify_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitModify_method(s)
	}
}

func (s *Modify_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitModify_method(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Modify_method() (localctx IModify_methodContext) {
	localctx = NewModify_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 818, TSqlParserRULE_modify_method)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9642)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserID) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(9643)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(9644)
		p.Match(TSqlParserMODIFY)
	}
	{
		p.SetState(9645)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9646)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Modify_methodContext).xml_dml = _m
	}
	{
		p.SetState(9647)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// INodes_methodContext is an interface to support dynamic dispatch.
type INodes_methodContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXquery returns the xquery token.
	GetXquery() antlr.Token

	// SetXquery sets the xquery token.
	SetXquery(antlr.Token)

	// IsNodes_methodContext differentiates from other interfaces.
	IsNodes_methodContext()
}

type Nodes_methodContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	xquery antlr.Token
}

func NewEmptyNodes_methodContext() *Nodes_methodContext {
	var p = new(Nodes_methodContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_nodes_method
	return p
}

func (*Nodes_methodContext) IsNodes_methodContext() {}

func NewNodes_methodContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Nodes_methodContext {
	var p = new(Nodes_methodContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_nodes_method

	return p
}

func (s *Nodes_methodContext) GetParser() antlr.Parser { return s.parser }

func (s *Nodes_methodContext) GetXquery() antlr.Token { return s.xquery }

func (s *Nodes_methodContext) SetXquery(v antlr.Token) { s.xquery = v }

func (s *Nodes_methodContext) NODES() antlr.TerminalNode {
	return s.GetToken(TSqlParserNODES, 0)
}

func (s *Nodes_methodContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Nodes_methodContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Nodes_methodContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Nodes_methodContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Nodes_methodContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Nodes_methodContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNodes_method(s)
	}
}

func (s *Nodes_methodContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNodes_method(s)
	}
}

func (s *Nodes_methodContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNodes_method(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Nodes_method() (localctx INodes_methodContext) {
	localctx = NewNodes_methodContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 820, TSqlParserRULE_nodes_method)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9649)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserID) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(9650)
		p.Match(TSqlParserDOT)
	}
	{
		p.SetState(9651)
		p.Match(TSqlParserNODES)
	}
	{
		p.SetState(9652)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9653)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*Nodes_methodContext).xquery = _m
	}
	{
		p.SetState(9654)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ISwitch_sectionContext is an interface to support dynamic dispatch.
type ISwitch_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_sectionContext differentiates from other interfaces.
	IsSwitch_sectionContext()
}

type Switch_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_sectionContext() *Switch_sectionContext {
	var p = new(Switch_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_switch_section
	return p
}

func (*Switch_sectionContext) IsSwitch_sectionContext() {}

func NewSwitch_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_sectionContext {
	var p = new(Switch_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_switch_section

	return p
}

func (s *Switch_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHEN, 0)
}

func (s *Switch_sectionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Switch_sectionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserTHEN, 0)
}

func (s *Switch_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSwitch_section(s)
	}
}

func (s *Switch_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSwitch_section(s)
	}
}

func (s *Switch_sectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSwitch_section(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Switch_section() (localctx ISwitch_sectionContext) {
	localctx = NewSwitch_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 822, TSqlParserRULE_switch_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9656)
		p.Match(TSqlParserWHEN)
	}
	{
		p.SetState(9657)
		p.expression(0)
	}
	{
		p.SetState(9658)
		p.Match(TSqlParserTHEN)
	}
	{
		p.SetState(9659)
		p.expression(0)
	}

	return localctx
}

// ISwitch_search_condition_sectionContext is an interface to support dynamic dispatch.
type ISwitch_search_condition_sectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitch_search_condition_sectionContext differentiates from other interfaces.
	IsSwitch_search_condition_sectionContext()
}

type Switch_search_condition_sectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitch_search_condition_sectionContext() *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_switch_search_condition_section
	return p
}

func (*Switch_search_condition_sectionContext) IsSwitch_search_condition_sectionContext() {}

func NewSwitch_search_condition_sectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Switch_search_condition_sectionContext {
	var p = new(Switch_search_condition_sectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_switch_search_condition_section

	return p
}

func (s *Switch_search_condition_sectionContext) GetParser() antlr.Parser { return s.parser }

func (s *Switch_search_condition_sectionContext) WHEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserWHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Search_condition() ISearch_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISearch_conditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISearch_conditionContext)
}

func (s *Switch_search_condition_sectionContext) THEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserTHEN, 0)
}

func (s *Switch_search_condition_sectionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Switch_search_condition_sectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Switch_search_condition_sectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Switch_search_condition_sectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSwitch_search_condition_section(s)
	}
}

func (s *Switch_search_condition_sectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSwitch_search_condition_section(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Switch_search_condition_section() (localctx ISwitch_search_condition_sectionContext) {
	localctx = NewSwitch_search_condition_sectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 824, TSqlParserRULE_switch_search_condition_section)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9661)
		p.Match(TSqlParserWHEN)
	}
	{
		p.SetState(9662)
		p.Search_condition()
	}
	{
		p.SetState(9663)
		p.Match(TSqlParserTHEN)
	}
	{
		p.SetState(9664)
		p.expression(0)
	}

	return localctx
}

// IAs_column_aliasContext is an interface to support dynamic dispatch.
type IAs_column_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAs_column_aliasContext differentiates from other interfaces.
	IsAs_column_aliasContext()
}

type As_column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_column_aliasContext() *As_column_aliasContext {
	var p = new(As_column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_as_column_alias
	return p
}

func (*As_column_aliasContext) IsAs_column_aliasContext() {}

func NewAs_column_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_column_aliasContext {
	var p = new(As_column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_as_column_alias

	return p
}

func (s *As_column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_column_aliasContext) Column_alias() IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *As_column_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *As_column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAs_column_alias(s)
	}
}

func (s *As_column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAs_column_alias(s)
	}
}

func (s *As_column_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAs_column_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) As_column_alias() (localctx IAs_column_aliasContext) {
	localctx = NewAs_column_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 826, TSqlParserRULE_as_column_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(9666)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(9669)
		p.Column_alias()
	}

	return localctx
}

// IAs_table_aliasContext is an interface to support dynamic dispatch.
type IAs_table_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAs_table_aliasContext differentiates from other interfaces.
	IsAs_table_aliasContext()
}

type As_table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAs_table_aliasContext() *As_table_aliasContext {
	var p = new(As_table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_as_table_alias
	return p
}

func (*As_table_aliasContext) IsAs_table_aliasContext() {}

func NewAs_table_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *As_table_aliasContext {
	var p = new(As_table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_as_table_alias

	return p
}

func (s *As_table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *As_table_aliasContext) Table_alias() ITable_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_aliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_aliasContext)
}

func (s *As_table_aliasContext) AS() antlr.TerminalNode {
	return s.GetToken(TSqlParserAS, 0)
}

func (s *As_table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *As_table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *As_table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAs_table_alias(s)
	}
}

func (s *As_table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAs_table_alias(s)
	}
}

func (s *As_table_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAs_table_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) As_table_alias() (localctx IAs_table_aliasContext) {
	localctx = NewAs_table_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 828, TSqlParserRULE_as_table_alias)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserAS {
		{
			p.SetState(9671)
			p.Match(TSqlParserAS)
		}

	}
	{
		p.SetState(9674)
		p.Table_alias()
	}

	return localctx
}

// ITable_aliasContext is an interface to support dynamic dispatch.
type ITable_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_aliasContext differentiates from other interfaces.
	IsTable_aliasContext()
}

type Table_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_aliasContext() *Table_aliasContext {
	var p = new(Table_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_alias
	return p
}

func (*Table_aliasContext) IsTable_aliasContext() {}

func NewTable_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_aliasContext {
	var p = new(Table_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_alias

	return p
}

func (s *Table_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_aliasContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_aliasContext) With_table_hints() IWith_table_hintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWith_table_hintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWith_table_hintsContext)
}

func (s *Table_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_alias(s)
	}
}

func (s *Table_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_alias(s)
	}
}

func (s *Table_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_alias() (localctx ITable_aliasContext) {
	localctx = NewTable_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 830, TSqlParserRULE_table_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9676)
		p.Id()
	}
	p.SetState(9678)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1351, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9677)
			p.With_table_hints()
		}

	}

	return localctx
}

// IWith_table_hintsContext is an interface to support dynamic dispatch.
type IWith_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWith_table_hintsContext differentiates from other interfaces.
	IsWith_table_hintsContext()
}

type With_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWith_table_hintsContext() *With_table_hintsContext {
	var p = new(With_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_with_table_hints
	return p
}

func (*With_table_hintsContext) IsWith_table_hintsContext() {}

func NewWith_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *With_table_hintsContext {
	var p = new(With_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_with_table_hints

	return p
}

func (s *With_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *With_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *With_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *With_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *With_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *With_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *With_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWith_table_hints(s)
	}
}

func (s *With_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWith_table_hints(s)
	}
}

func (s *With_table_hintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWith_table_hints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) With_table_hints() (localctx IWith_table_hintsContext) {
	localctx = NewWith_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 832, TSqlParserRULE_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWITH {
		{
			p.SetState(9680)
			p.Match(TSqlParserWITH)
		}

	}
	{
		p.SetState(9683)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9684)
		p.Table_hint()
	}
	p.SetState(9691)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserFORCESEEK || _la == TSqlParserINDEX || _la == TSqlParserNOEXPAND || (((_la-706)&-(0x1f+1)) == 0 && ((1<<uint((_la-706)))&((1<<(TSqlParserSERIALIZABLE-706))|(1<<(TSqlParserSNAPSHOT-706))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-706)))) != 0) || _la == TSqlParserID || _la == TSqlParserCOMMA {
		p.SetState(9686)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(9685)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(9688)
			p.Table_hint()
		}

		p.SetState(9693)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(9694)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IInsert_with_table_hintsContext is an interface to support dynamic dispatch.
type IInsert_with_table_hintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_with_table_hintsContext differentiates from other interfaces.
	IsInsert_with_table_hintsContext()
}

type Insert_with_table_hintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_with_table_hintsContext() *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_insert_with_table_hints
	return p
}

func (*Insert_with_table_hintsContext) IsInsert_with_table_hintsContext() {}

func NewInsert_with_table_hintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_with_table_hintsContext {
	var p = new(Insert_with_table_hintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_insert_with_table_hints

	return p
}

func (s *Insert_with_table_hintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_with_table_hintsContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Insert_with_table_hintsContext) AllTable_hint() []ITable_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_hintContext)(nil)).Elem())
	var tst = make([]ITable_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_hintContext)
		}
	}

	return tst
}

func (s *Insert_with_table_hintsContext) Table_hint(i int) ITable_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_hintContext)
}

func (s *Insert_with_table_hintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_with_table_hintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_with_table_hintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterInsert_with_table_hints(s)
	}
}

func (s *Insert_with_table_hintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitInsert_with_table_hints(s)
	}
}

func (s *Insert_with_table_hintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitInsert_with_table_hints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Insert_with_table_hints() (localctx IInsert_with_table_hintsContext) {
	localctx = NewInsert_with_table_hintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 834, TSqlParserRULE_insert_with_table_hints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9696)
		p.Match(TSqlParserWITH)
	}
	{
		p.SetState(9697)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9698)
		p.Table_hint()
	}
	p.SetState(9705)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserFORCESEEK || _la == TSqlParserINDEX || _la == TSqlParserNOEXPAND || (((_la-706)&-(0x1f+1)) == 0 && ((1<<uint((_la-706)))&((1<<(TSqlParserSERIALIZABLE-706))|(1<<(TSqlParserSNAPSHOT-706))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-706)))) != 0) || _la == TSqlParserID || _la == TSqlParserCOMMA {
		p.SetState(9700)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(9699)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(9702)
			p.Table_hint()
		}

		p.SetState(9707)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(9708)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// ITable_hintContext is an interface to support dynamic dispatch.
type ITable_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_hintContext differentiates from other interfaces.
	IsTable_hintContext()
}

type Table_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_hintContext() *Table_hintContext {
	var p = new(Table_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_hint
	return p
}

func (*Table_hintContext) IsTable_hintContext() {}

func NewTable_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_hintContext {
	var p = new(Table_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_hint

	return p
}

func (s *Table_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_hintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserINDEX, 0)
}

func (s *Table_hintContext) AllIndex_value() []IIndex_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem())
	var tst = make([]IIndex_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_valueContext)
		}
	}

	return tst
}

func (s *Table_hintContext) Index_value(i int) IIndex_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_valueContext)
}

func (s *Table_hintContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCESEEK, 0)
}

func (s *Table_hintContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERIALIZABLE, 0)
}

func (s *Table_hintContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSNAPSHOT, 0)
}

func (s *Table_hintContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Table_hintContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Table_hintContext) AllID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserID)
}

func (s *Table_hintContext) ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserID, i)
}

func (s *Table_hintContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOEXPAND, 0)
}

func (s *Table_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_hint(s)
	}
}

func (s *Table_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_hint(s)
	}
}

func (s *Table_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_hint() (localctx ITable_hintContext) {
	localctx = NewTable_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 836, TSqlParserRULE_table_hint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9711)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserNOEXPAND {
		{
			p.SetState(9710)
			p.Match(TSqlParserNOEXPAND)
		}

	}
	p.SetState(9751)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1361, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(9713)
			p.Match(TSqlParserINDEX)
		}
		{
			p.SetState(9714)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9715)
			p.Index_value()
		}
		p.SetState(9720)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == TSqlParserCOMMA {
			{
				p.SetState(9716)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9717)
				p.Index_value()
			}

			p.SetState(9722)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(9723)
			p.Match(TSqlParserRR_BRACKET)
		}

	case 2:
		{
			p.SetState(9725)
			p.Match(TSqlParserINDEX)
		}
		{
			p.SetState(9726)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(9727)
			p.Index_value()
		}

	case 3:
		{
			p.SetState(9728)
			p.Match(TSqlParserFORCESEEK)
		}
		p.SetState(9743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLR_BRACKET {
			{
				p.SetState(9729)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(9730)
				p.Index_value()
			}
			{
				p.SetState(9731)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(9732)
				p.Match(TSqlParserID)
			}
			p.SetState(9737)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == TSqlParserCOMMA {
				{
					p.SetState(9733)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(9734)
					p.Match(TSqlParserID)
				}

				p.SetState(9739)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(9740)
				p.Match(TSqlParserRR_BRACKET)
			}
			{
				p.SetState(9741)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	case 4:
		{
			p.SetState(9745)
			p.Match(TSqlParserSERIALIZABLE)
		}

	case 5:
		{
			p.SetState(9746)
			p.Match(TSqlParserSNAPSHOT)
		}

	case 6:
		{
			p.SetState(9747)
			p.Match(TSqlParserSPATIAL_WINDOW_MAX_CELLS)
		}
		{
			p.SetState(9748)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(9749)
			p.Match(TSqlParserDECIMAL)
		}

	case 7:
		{
			p.SetState(9750)
			p.Match(TSqlParserID)
		}

	}

	return localctx
}

// IIndex_valueContext is an interface to support dynamic dispatch.
type IIndex_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_valueContext differentiates from other interfaces.
	IsIndex_valueContext()
}

type Index_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_valueContext() *Index_valueContext {
	var p = new(Index_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_index_value
	return p
}

func (*Index_valueContext) IsIndex_valueContext() {}

func NewIndex_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_valueContext {
	var p = new(Index_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_index_value

	return p
}

func (s *Index_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_valueContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Index_valueContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Index_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterIndex_value(s)
	}
}

func (s *Index_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitIndex_value(s)
	}
}

func (s *Index_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitIndex_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Index_value() (localctx IIndex_valueContext) {
	localctx = NewIndex_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 838, TSqlParserRULE_index_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9755)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9753)
			p.Id()
		}

	case TSqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9754)
			p.Match(TSqlParserDECIMAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_alias_listContext is an interface to support dynamic dispatch.
type IColumn_alias_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_alias_listContext differentiates from other interfaces.
	IsColumn_alias_listContext()
}

type Column_alias_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_alias_listContext() *Column_alias_listContext {
	var p = new(Column_alias_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_alias_list
	return p
}

func (*Column_alias_listContext) IsColumn_alias_listContext() {}

func NewColumn_alias_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_alias_listContext {
	var p = new(Column_alias_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_alias_list

	return p
}

func (s *Column_alias_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_alias_listContext) AllColumn_alias() []IColumn_aliasContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem())
	var tst = make([]IColumn_aliasContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_aliasContext)
		}
	}

	return tst
}

func (s *Column_alias_listContext) Column_alias(i int) IColumn_aliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_aliasContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_aliasContext)
}

func (s *Column_alias_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_alias_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_alias_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_alias_list(s)
	}
}

func (s *Column_alias_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_alias_list(s)
	}
}

func (s *Column_alias_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_alias_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_alias_list() (localctx IColumn_alias_listContext) {
	localctx = NewColumn_alias_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 840, TSqlParserRULE_column_alias_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9757)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9758)
		p.Column_alias()
	}
	p.SetState(9763)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9759)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9760)
			p.Column_alias()
		}

		p.SetState(9765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(9766)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_aliasContext is an interface to support dynamic dispatch.
type IColumn_aliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_aliasContext differentiates from other interfaces.
	IsColumn_aliasContext()
}

type Column_aliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_aliasContext() *Column_aliasContext {
	var p = new(Column_aliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_alias
	return p
}

func (*Column_aliasContext) IsColumn_aliasContext() {}

func NewColumn_aliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_aliasContext {
	var p = new(Column_aliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_alias

	return p
}

func (s *Column_aliasContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_aliasContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_aliasContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Column_aliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_aliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_aliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_alias(s)
	}
}

func (s *Column_aliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_alias(s)
	}
}

func (s *Column_aliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_alias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_alias() (localctx IColumn_aliasContext) {
	localctx = NewColumn_aliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 842, TSqlParserRULE_column_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9770)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9768)
			p.Id()
		}

	case TSqlParserSTRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9769)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_value_constructorContext is an interface to support dynamic dispatch.
type ITable_value_constructorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_value_constructorContext differentiates from other interfaces.
	IsTable_value_constructorContext()
}

type Table_value_constructorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_value_constructorContext() *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_value_constructor
	return p
}

func (*Table_value_constructorContext) IsTable_value_constructorContext() {}

func NewTable_value_constructorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_value_constructorContext {
	var p = new(Table_value_constructorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_value_constructor

	return p
}

func (s *Table_value_constructorContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_value_constructorContext) VALUES() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUES, 0)
}

func (s *Table_value_constructorContext) AllExpression_list() []IExpression_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_listContext)(nil)).Elem())
	var tst = make([]IExpression_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_listContext)
		}
	}

	return tst
}

func (s *Table_value_constructorContext) Expression_list(i int) IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Table_value_constructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_value_constructorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_value_constructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_value_constructor(s)
	}
}

func (s *Table_value_constructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_value_constructor(s)
	}
}

func (s *Table_value_constructorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_value_constructor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_value_constructor() (localctx ITable_value_constructorContext) {
	localctx = NewTable_value_constructorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 844, TSqlParserRULE_table_value_constructor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9772)
		p.Match(TSqlParserVALUES)
	}
	{
		p.SetState(9773)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9774)
		p.Expression_list()
	}
	{
		p.SetState(9775)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(9783)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1365, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9776)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9777)
				p.Match(TSqlParserLR_BRACKET)
			}
			{
				p.SetState(9778)
				p.Expression_list()
			}
			{
				p.SetState(9779)
				p.Match(TSqlParserRR_BRACKET)
			}

		}
		p.SetState(9785)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1365, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (s *Expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitExpression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 846, TSqlParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9786)
		p.expression(0)
	}
	p.SetState(9791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(9787)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(9788)
			p.expression(0)
		}

		p.SetState(9793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IRanking_windowed_functionContext is an interface to support dynamic dispatch.
type IRanking_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRanking_windowed_functionContext differentiates from other interfaces.
	IsRanking_windowed_functionContext()
}

type Ranking_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRanking_windowed_functionContext() *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_ranking_windowed_function
	return p
}

func (*Ranking_windowed_functionContext) IsRanking_windowed_functionContext() {}

func NewRanking_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ranking_windowed_functionContext {
	var p = new(Ranking_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_ranking_windowed_function

	return p
}

func (s *Ranking_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Ranking_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Ranking_windowed_functionContext) RANK() antlr.TerminalNode {
	return s.GetToken(TSqlParserRANK, 0)
}

func (s *Ranking_windowed_functionContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(TSqlParserDENSE_RANK, 0)
}

func (s *Ranking_windowed_functionContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW_NUMBER, 0)
}

func (s *Ranking_windowed_functionContext) NTILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNTILE, 0)
}

func (s *Ranking_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Ranking_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ranking_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ranking_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRanking_windowed_function(s)
	}
}

func (s *Ranking_windowed_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRanking_windowed_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Ranking_windowed_function() (localctx IRanking_windowed_functionContext) {
	localctx = NewRanking_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 848, TSqlParserRULE_ranking_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9804)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserDENSE_RANK, TSqlParserRANK, TSqlParserROW_NUMBER:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9794)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDENSE_RANK || _la == TSqlParserRANK || _la == TSqlParserROW_NUMBER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9795)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9796)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(9797)
			p.Over_clause()
		}

	case TSqlParserNTILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9798)
			p.Match(TSqlParserNTILE)
		}
		{
			p.SetState(9799)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9800)
			p.expression(0)
		}
		{
			p.SetState(9801)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(9802)
			p.Over_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAggregate_windowed_functionContext is an interface to support dynamic dispatch.
type IAggregate_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregate_windowed_functionContext differentiates from other interfaces.
	IsAggregate_windowed_functionContext()
}

type Aggregate_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_windowed_functionContext() *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_aggregate_windowed_function
	return p
}

func (*Aggregate_windowed_functionContext) IsAggregate_windowed_functionContext() {}

func NewAggregate_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_aggregate_windowed_function

	return p
}

func (s *Aggregate_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_windowed_functionContext) All_distinct_expression() IAll_distinct_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAll_distinct_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAll_distinct_expressionContext)
}

func (s *Aggregate_windowed_functionContext) AVG() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVG, 0)
}

func (s *Aggregate_windowed_functionContext) MAX() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX, 0)
}

func (s *Aggregate_windowed_functionContext) MIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN, 0)
}

func (s *Aggregate_windowed_functionContext) SUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUM, 0)
}

func (s *Aggregate_windowed_functionContext) STDEV() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTDEV, 0)
}

func (s *Aggregate_windowed_functionContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTDEVP, 0)
}

func (s *Aggregate_windowed_functionContext) VAR() antlr.TerminalNode {
	return s.GetToken(TSqlParserVAR, 0)
}

func (s *Aggregate_windowed_functionContext) VARP() antlr.TerminalNode {
	return s.GetToken(TSqlParserVARP, 0)
}

func (s *Aggregate_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Aggregate_windowed_functionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNT, 0)
}

func (s *Aggregate_windowed_functionContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNT_BIG, 0)
}

func (s *Aggregate_windowed_functionContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM_AGG, 0)
}

func (s *Aggregate_windowed_functionContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUPING, 0)
}

func (s *Aggregate_windowed_functionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Aggregate_windowed_functionContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUPING_ID, 0)
}

func (s *Aggregate_windowed_functionContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Aggregate_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAggregate_windowed_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Aggregate_windowed_function() (localctx IAggregate_windowed_functionContext) {
	localctx = NewAggregate_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 850, TSqlParserRULE_aggregate_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9838)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserAVG, TSqlParserMAX, TSqlParserMIN, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserVAR, TSqlParserVARP:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9806)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserAVG || _la == TSqlParserMAX || _la == TSqlParserMIN || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(TSqlParserSTDEV-721))|(1<<(TSqlParserSTDEVP-721))|(1<<(TSqlParserSUM-721)))) != 0) || _la == TSqlParserVAR || _la == TSqlParserVARP) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9807)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9808)
			p.All_distinct_expression()
		}
		{
			p.SetState(9809)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(9811)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1368, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9810)
				p.Over_clause()
			}

		}

	case TSqlParserCOUNT, TSqlParserCOUNT_BIG:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(9813)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserCOUNT || _la == TSqlParserCOUNT_BIG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9814)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(9817)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserSTAR:
			{
				p.SetState(9815)
				p.Match(TSqlParserSTAR)
			}

		case TSqlParserALL, TSqlParserBLOCKING_HIERARCHY, TSqlParserCALLED, TSqlParserCASE, TSqlParserCOALESCE, TSqlParserCONVERT, TSqlParserCURRENT_TIMESTAMP, TSqlParserCURRENT_USER, TSqlParserDATA_COMPRESSION, TSqlParserDEFAULT, TSqlParserDISTINCT, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserIDENTITY, TSqlParserISNULL, TSqlParserKEY, TSqlParserLEFT, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserNULL, TSqlParserNULLIF, TSqlParserOFFSETS, TSqlParserOVER, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserRIGHT, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSESSION_USER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserSYSTEM_USER, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserANSI_NULLS, TSqlParserANSI_PADDING, TSqlParserANSI_WARNINGS, TSqlParserAPPLY, TSqlParserARITHABORT, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserBINARY_CHECKSUM, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCOMPATIBILITY_LEVEL, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDATEADD, TSqlParserDATEDIFF, TSqlParserDATENAME, TSqlParserDATEPART, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFIRST_VALUE, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGETDATE, TSqlParserGETUTCDATE, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAG, TSqlParserLAST, TSqlParserLAST_VALUE, TSqlParserLEAD, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMIN_ACTIVE_ROWVERSION, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserQUOTED_IDENTIFIER, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTATUS, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSTUFF, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserLOCAL_ID, TSqlParserDECIMAL, TSqlParserID, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserLR_BRACKET, TSqlParserPLUS, TSqlParserMINUS, TSqlParserBIT_NOT:
			{
				p.SetState(9816)
				p.All_distinct_expression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(9819)
			p.Match(TSqlParserRR_BRACKET)
		}
		p.SetState(9821)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1370, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(9820)
				p.Over_clause()
			}

		}

	case TSqlParserCHECKSUM_AGG:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9823)
			p.Match(TSqlParserCHECKSUM_AGG)
		}
		{
			p.SetState(9824)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9825)
			p.All_distinct_expression()
		}
		{
			p.SetState(9826)
			p.Match(TSqlParserRR_BRACKET)
		}

	case TSqlParserGROUPING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9828)
			p.Match(TSqlParserGROUPING)
		}
		{
			p.SetState(9829)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9830)
			p.expression(0)
		}
		{
			p.SetState(9831)
			p.Match(TSqlParserRR_BRACKET)
		}

	case TSqlParserGROUPING_ID:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9833)
			p.Match(TSqlParserGROUPING_ID)
		}
		{
			p.SetState(9834)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9835)
			p.Expression_list()
		}
		{
			p.SetState(9836)
			p.Match(TSqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnalytic_windowed_functionContext is an interface to support dynamic dispatch.
type IAnalytic_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalytic_windowed_functionContext differentiates from other interfaces.
	IsAnalytic_windowed_functionContext()
}

type Analytic_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalytic_windowed_functionContext() *Analytic_windowed_functionContext {
	var p = new(Analytic_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_analytic_windowed_function
	return p
}

func (*Analytic_windowed_functionContext) IsAnalytic_windowed_functionContext() {}

func NewAnalytic_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analytic_windowed_functionContext {
	var p = new(Analytic_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_analytic_windowed_function

	return p
}

func (s *Analytic_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Analytic_windowed_functionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Analytic_windowed_functionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Analytic_windowed_functionContext) Over_clause() IOver_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOver_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOver_clauseContext)
}

func (s *Analytic_windowed_functionContext) FIRST_VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFIRST_VALUE, 0)
}

func (s *Analytic_windowed_functionContext) LAST_VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserLAST_VALUE, 0)
}

func (s *Analytic_windowed_functionContext) LAG() antlr.TerminalNode {
	return s.GetToken(TSqlParserLAG, 0)
}

func (s *Analytic_windowed_functionContext) LEAD() antlr.TerminalNode {
	return s.GetToken(TSqlParserLEAD, 0)
}

func (s *Analytic_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analytic_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analytic_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAnalytic_windowed_function(s)
	}
}

func (s *Analytic_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAnalytic_windowed_function(s)
	}
}

func (s *Analytic_windowed_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAnalytic_windowed_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Analytic_windowed_function() (localctx IAnalytic_windowed_functionContext) {
	localctx = NewAnalytic_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 852, TSqlParserRULE_analytic_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9860)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFIRST_VALUE, TSqlParserLAST_VALUE:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(9840)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFIRST_VALUE || _la == TSqlParserLAST_VALUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9841)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9842)
			p.expression(0)
		}
		{
			p.SetState(9843)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(9844)
			p.Over_clause()
		}

	case TSqlParserLAG, TSqlParserLEAD:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(9846)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserLAG || _la == TSqlParserLEAD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(9847)
			p.Match(TSqlParserLR_BRACKET)
		}
		{
			p.SetState(9848)
			p.expression(0)
		}
		p.SetState(9855)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(9849)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9850)
				p.expression(0)
			}
			p.SetState(9853)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(9851)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(9852)
					p.expression(0)
				}

			}

		}
		{
			p.SetState(9857)
			p.Match(TSqlParserRR_BRACKET)
		}
		{
			p.SetState(9858)
			p.Over_clause()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAll_distinct_expressionContext is an interface to support dynamic dispatch.
type IAll_distinct_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAll_distinct_expressionContext differentiates from other interfaces.
	IsAll_distinct_expressionContext()
}

type All_distinct_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAll_distinct_expressionContext() *All_distinct_expressionContext {
	var p = new(All_distinct_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_all_distinct_expression
	return p
}

func (*All_distinct_expressionContext) IsAll_distinct_expressionContext() {}

func NewAll_distinct_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *All_distinct_expressionContext {
	var p = new(All_distinct_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_all_distinct_expression

	return p
}

func (s *All_distinct_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *All_distinct_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *All_distinct_expressionContext) ALL() antlr.TerminalNode {
	return s.GetToken(TSqlParserALL, 0)
}

func (s *All_distinct_expressionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISTINCT, 0)
}

func (s *All_distinct_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *All_distinct_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *All_distinct_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAll_distinct_expression(s)
	}
}

func (s *All_distinct_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAll_distinct_expression(s)
	}
}

func (s *All_distinct_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAll_distinct_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) All_distinct_expression() (localctx IAll_distinct_expressionContext) {
	localctx = NewAll_distinct_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 854, TSqlParserRULE_all_distinct_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserALL || _la == TSqlParserDISTINCT {
		p.SetState(9862)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserALL || _la == TSqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(9865)
		p.expression(0)
	}

	return localctx
}

// IOver_clauseContext is an interface to support dynamic dispatch.
type IOver_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOver_clauseContext differentiates from other interfaces.
	IsOver_clauseContext()
}

type Over_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOver_clauseContext() *Over_clauseContext {
	var p = new(Over_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_over_clause
	return p
}

func (*Over_clauseContext) IsOver_clauseContext() {}

func NewOver_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Over_clauseContext {
	var p = new(Over_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_over_clause

	return p
}

func (s *Over_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Over_clauseContext) OVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOVER, 0)
}

func (s *Over_clauseContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Over_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBY, 0)
}

func (s *Over_clauseContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Over_clauseContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Over_clauseContext) Row_or_range_clause() IRow_or_range_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRow_or_range_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRow_or_range_clauseContext)
}

func (s *Over_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Over_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Over_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOver_clause(s)
	}
}

func (s *Over_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOver_clause(s)
	}
}

func (s *Over_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOver_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Over_clause() (localctx IOver_clauseContext) {
	localctx = NewOver_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 856, TSqlParserRULE_over_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9867)
		p.Match(TSqlParserOVER)
	}
	{
		p.SetState(9868)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(9872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserPARTITION {
		{
			p.SetState(9869)
			p.Match(TSqlParserPARTITION)
		}
		{
			p.SetState(9870)
			p.Match(TSqlParserBY)
		}
		{
			p.SetState(9871)
			p.Expression_list()
		}

	}
	p.SetState(9875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserORDER {
		{
			p.SetState(9874)
			p.Order_by_clause()
		}

	}
	p.SetState(9878)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserRANGE || _la == TSqlParserROWS {
		{
			p.SetState(9877)
			p.Row_or_range_clause()
		}

	}
	{
		p.SetState(9880)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IRow_or_range_clauseContext is an interface to support dynamic dispatch.
type IRow_or_range_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRow_or_range_clauseContext differentiates from other interfaces.
	IsRow_or_range_clauseContext()
}

type Row_or_range_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRow_or_range_clauseContext() *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_row_or_range_clause
	return p
}

func (*Row_or_range_clauseContext) IsRow_or_range_clauseContext() {}

func NewRow_or_range_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Row_or_range_clauseContext {
	var p = new(Row_or_range_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_row_or_range_clause

	return p
}

func (s *Row_or_range_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Row_or_range_clauseContext) Window_frame_extent() IWindow_frame_extentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_extentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_extentContext)
}

func (s *Row_or_range_clauseContext) ROWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWS, 0)
}

func (s *Row_or_range_clauseContext) RANGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRANGE, 0)
}

func (s *Row_or_range_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Row_or_range_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Row_or_range_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterRow_or_range_clause(s)
	}
}

func (s *Row_or_range_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitRow_or_range_clause(s)
	}
}

func (s *Row_or_range_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitRow_or_range_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Row_or_range_clause() (localctx IRow_or_range_clauseContext) {
	localctx = NewRow_or_range_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 858, TSqlParserRULE_row_or_range_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(9882)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserRANGE || _la == TSqlParserROWS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(9883)
		p.Window_frame_extent()
	}

	return localctx
}

// IWindow_frame_extentContext is an interface to support dynamic dispatch.
type IWindow_frame_extentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_extentContext differentiates from other interfaces.
	IsWindow_frame_extentContext()
}

type Window_frame_extentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_extentContext() *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_window_frame_extent
	return p
}

func (*Window_frame_extentContext) IsWindow_frame_extentContext() {}

func NewWindow_frame_extentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_extentContext {
	var p = new(Window_frame_extentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_window_frame_extent

	return p
}

func (s *Window_frame_extentContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_extentContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_extentContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBETWEEN, 0)
}

func (s *Window_frame_extentContext) AllWindow_frame_bound() []IWindow_frame_boundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem())
	var tst = make([]IWindow_frame_boundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_frame_boundContext)
		}
	}

	return tst
}

func (s *Window_frame_extentContext) Window_frame_bound(i int) IWindow_frame_boundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_boundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_boundContext)
}

func (s *Window_frame_extentContext) AND() antlr.TerminalNode {
	return s.GetToken(TSqlParserAND, 0)
}

func (s *Window_frame_extentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_extentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_extentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWindow_frame_extent(s)
	}
}

func (s *Window_frame_extentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWindow_frame_extent(s)
	}
}

func (s *Window_frame_extentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWindow_frame_extent(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Window_frame_extent() (localctx IWindow_frame_extentContext) {
	localctx = NewWindow_frame_extentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 860, TSqlParserRULE_window_frame_extent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9891)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCURRENT, TSqlParserUNBOUNDED, TSqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9885)
			p.Window_frame_preceding()
		}

	case TSqlParserBETWEEN:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9886)
			p.Match(TSqlParserBETWEEN)
		}
		{
			p.SetState(9887)
			p.Window_frame_bound()
		}
		{
			p.SetState(9888)
			p.Match(TSqlParserAND)
		}
		{
			p.SetState(9889)
			p.Window_frame_bound()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_boundContext is an interface to support dynamic dispatch.
type IWindow_frame_boundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_boundContext differentiates from other interfaces.
	IsWindow_frame_boundContext()
}

type Window_frame_boundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_boundContext() *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_window_frame_bound
	return p
}

func (*Window_frame_boundContext) IsWindow_frame_boundContext() {}

func NewWindow_frame_boundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_boundContext {
	var p = new(Window_frame_boundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_window_frame_bound

	return p
}

func (s *Window_frame_boundContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_boundContext) Window_frame_preceding() IWindow_frame_precedingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_precedingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_precedingContext)
}

func (s *Window_frame_boundContext) Window_frame_following() IWindow_frame_followingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_frame_followingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_frame_followingContext)
}

func (s *Window_frame_boundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_boundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_boundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWindow_frame_bound(s)
	}
}

func (s *Window_frame_boundContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWindow_frame_bound(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Window_frame_bound() (localctx IWindow_frame_boundContext) {
	localctx = NewWindow_frame_boundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 862, TSqlParserRULE_window_frame_bound)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9895)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1380, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9893)
			p.Window_frame_preceding()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9894)
			p.Window_frame_following()
		}

	}

	return localctx
}

// IWindow_frame_precedingContext is an interface to support dynamic dispatch.
type IWindow_frame_precedingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_precedingContext differentiates from other interfaces.
	IsWindow_frame_precedingContext()
}

type Window_frame_precedingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_precedingContext() *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_window_frame_preceding
	return p
}

func (*Window_frame_precedingContext) IsWindow_frame_precedingContext() {}

func NewWindow_frame_precedingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_precedingContext {
	var p = new(Window_frame_precedingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_window_frame_preceding

	return p
}

func (s *Window_frame_precedingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_precedingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNBOUNDED, 0)
}

func (s *Window_frame_precedingContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRECEDING, 0)
}

func (s *Window_frame_precedingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Window_frame_precedingContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCURRENT, 0)
}

func (s *Window_frame_precedingContext) ROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW, 0)
}

func (s *Window_frame_precedingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_precedingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_precedingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWindow_frame_preceding(s)
	}
}

func (s *Window_frame_precedingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWindow_frame_preceding(s)
	}
}

func (s *Window_frame_precedingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWindow_frame_preceding(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Window_frame_preceding() (localctx IWindow_frame_precedingContext) {
	localctx = NewWindow_frame_precedingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 864, TSqlParserRULE_window_frame_preceding)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9903)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9897)
			p.Match(TSqlParserUNBOUNDED)
		}
		{
			p.SetState(9898)
			p.Match(TSqlParserPRECEDING)
		}

	case TSqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9899)
			p.Match(TSqlParserDECIMAL)
		}
		{
			p.SetState(9900)
			p.Match(TSqlParserPRECEDING)
		}

	case TSqlParserCURRENT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9901)
			p.Match(TSqlParserCURRENT)
		}
		{
			p.SetState(9902)
			p.Match(TSqlParserROW)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IWindow_frame_followingContext is an interface to support dynamic dispatch.
type IWindow_frame_followingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_frame_followingContext differentiates from other interfaces.
	IsWindow_frame_followingContext()
}

type Window_frame_followingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_frame_followingContext() *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_window_frame_following
	return p
}

func (*Window_frame_followingContext) IsWindow_frame_followingContext() {}

func NewWindow_frame_followingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_frame_followingContext {
	var p = new(Window_frame_followingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_window_frame_following

	return p
}

func (s *Window_frame_followingContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_frame_followingContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNBOUNDED, 0)
}

func (s *Window_frame_followingContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOLLOWING, 0)
}

func (s *Window_frame_followingContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Window_frame_followingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_frame_followingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_frame_followingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWindow_frame_following(s)
	}
}

func (s *Window_frame_followingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWindow_frame_following(s)
	}
}

func (s *Window_frame_followingContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWindow_frame_following(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Window_frame_following() (localctx IWindow_frame_followingContext) {
	localctx = NewWindow_frame_followingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 866, TSqlParserRULE_window_frame_following)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9909)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserUNBOUNDED:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9905)
			p.Match(TSqlParserUNBOUNDED)
		}
		{
			p.SetState(9906)
			p.Match(TSqlParserFOLLOWING)
		}

	case TSqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9907)
			p.Match(TSqlParserDECIMAL)
		}
		{
			p.SetState(9908)
			p.Match(TSqlParserFOLLOWING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_database_optionContext is an interface to support dynamic dispatch.
type ICreate_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_optionContext differentiates from other interfaces.
	IsCreate_database_optionContext()
}

type Create_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_optionContext() *Create_database_optionContext {
	var p = new(Create_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_create_database_option
	return p
}

func (*Create_database_optionContext) IsCreate_database_optionContext() {}

func NewCreate_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_optionContext {
	var p = new(Create_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_create_database_option

	return p
}

func (s *Create_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_optionContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILESTREAM, 0)
}

func (s *Create_database_optionContext) AllDatabase_filestream_option() []IDatabase_filestream_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem())
	var tst = make([]IDatabase_filestream_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatabase_filestream_optionContext)
		}
	}

	return tst
}

func (s *Create_database_optionContext) Database_filestream_option(i int) IDatabase_filestream_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatabase_filestream_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatabase_filestream_optionContext)
}

func (s *Create_database_optionContext) DEFAULT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Create_database_optionContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Create_database_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Create_database_optionContext) DEFAULT_FULLTEXT_LANGUAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT_FULLTEXT_LANGUAGE, 0)
}

func (s *Create_database_optionContext) NESTED_TRIGGERS() antlr.TerminalNode {
	return s.GetToken(TSqlParserNESTED_TRIGGERS, 0)
}

func (s *Create_database_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Create_database_optionContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Create_database_optionContext) TRANSFORM_NOISE_WORDS() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRANSFORM_NOISE_WORDS, 0)
}

func (s *Create_database_optionContext) TWO_DIGIT_YEAR_CUTOFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserTWO_DIGIT_YEAR_CUTOFF, 0)
}

func (s *Create_database_optionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Create_database_optionContext) DB_CHAINING() antlr.TerminalNode {
	return s.GetToken(TSqlParserDB_CHAINING, 0)
}

func (s *Create_database_optionContext) TRUSTWORTHY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRUSTWORTHY, 0)
}

func (s *Create_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCreate_database_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Create_database_option() (localctx ICreate_database_optionContext) {
	localctx = NewCreate_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 868, TSqlParserRULE_create_database_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(9945)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFILESTREAM:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9911)
			p.Match(TSqlParserFILESTREAM)
		}

		{
			p.SetState(9912)
			p.Database_filestream_option()
		}
		p.SetState(9917)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1383, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(9913)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(9914)
					p.Database_filestream_option()
				}

			}
			p.SetState(9919)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1383, p.GetParserRuleContext())
		}

	case TSqlParserDEFAULT_LANGUAGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9920)
			p.Match(TSqlParserDEFAULT_LANGUAGE)
		}
		{
			p.SetState(9921)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9924)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(9922)
				p.Id()
			}

		case TSqlParserSTRING:
			{
				p.SetState(9923)
				p.Match(TSqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserDEFAULT_FULLTEXT_LANGUAGE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(9926)
			p.Match(TSqlParserDEFAULT_FULLTEXT_LANGUAGE)
		}
		{
			p.SetState(9927)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9930)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
			{
				p.SetState(9928)
				p.Id()
			}

		case TSqlParserSTRING:
			{
				p.SetState(9929)
				p.Match(TSqlParserSTRING)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case TSqlParserNESTED_TRIGGERS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(9932)
			p.Match(TSqlParserNESTED_TRIGGERS)
		}
		{
			p.SetState(9933)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9934)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTRANSFORM_NOISE_WORDS:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(9935)
			p.Match(TSqlParserTRANSFORM_NOISE_WORDS)
		}
		{
			p.SetState(9936)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9937)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTWO_DIGIT_YEAR_CUTOFF:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(9938)
			p.Match(TSqlParserTWO_DIGIT_YEAR_CUTOFF)
		}
		{
			p.SetState(9939)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(9940)
			p.Match(TSqlParserDECIMAL)
		}

	case TSqlParserDB_CHAINING:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(9941)
			p.Match(TSqlParserDB_CHAINING)
		}
		p.SetState(9942)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserTRUSTWORTHY:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(9943)
			p.Match(TSqlParserTRUSTWORTHY)
		}
		p.SetState(9944)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserOFF || _la == TSqlParserON) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDatabase_filestream_optionContext is an interface to support dynamic dispatch.
type IDatabase_filestream_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_filestream_optionContext differentiates from other interfaces.
	IsDatabase_filestream_optionContext()
}

type Database_filestream_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_filestream_optionContext() *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_database_filestream_option
	return p
}

func (*Database_filestream_optionContext) IsDatabase_filestream_optionContext() {}

func NewDatabase_filestream_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_filestream_optionContext {
	var p = new(Database_filestream_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_database_filestream_option

	return p
}

func (s *Database_filestream_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_filestream_optionContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *Database_filestream_optionContext) NON_TRANSACTED_ACCESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserNON_TRANSACTED_ACCESS, 0)
}

func (s *Database_filestream_optionContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, 0)
}

func (s *Database_filestream_optionContext) DIRECTORY_NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserDIRECTORY_NAME, 0)
}

func (s *Database_filestream_optionContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Database_filestream_optionContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Database_filestream_optionContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY, 0)
}

func (s *Database_filestream_optionContext) FULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULL, 0)
}

func (s *Database_filestream_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_filestream_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_filestream_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDatabase_filestream_option(s)
	}
}

func (s *Database_filestream_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDatabase_filestream_option(s)
	}
}

func (s *Database_filestream_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDatabase_filestream_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Database_filestream_option() (localctx IDatabase_filestream_optionContext) {
	localctx = NewDatabase_filestream_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 870, TSqlParserRULE_database_filestream_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9947)
		p.Match(TSqlParserLR_BRACKET)
	}
	p.SetState(9954)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserNON_TRANSACTED_ACCESS:
		{
			p.SetState(9948)
			p.Match(TSqlParserNON_TRANSACTED_ACCESS)
		}
		{
			p.SetState(9949)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(9950)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFULL || _la == TSqlParserOFF || _la == TSqlParserREAD_ONLY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case TSqlParserDIRECTORY_NAME:
		{
			p.SetState(9951)
			p.Match(TSqlParserDIRECTORY_NAME)
		}
		{
			p.SetState(9952)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(9953)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(9956)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IDatabase_file_specContext is an interface to support dynamic dispatch.
type IDatabase_file_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatabase_file_specContext differentiates from other interfaces.
	IsDatabase_file_specContext()
}

type Database_file_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatabase_file_specContext() *Database_file_specContext {
	var p = new(Database_file_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_database_file_spec
	return p
}

func (*Database_file_specContext) IsDatabase_file_specContext() {}

func NewDatabase_file_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Database_file_specContext {
	var p = new(Database_file_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_database_file_spec

	return p
}

func (s *Database_file_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Database_file_specContext) File_group() IFile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_groupContext)
}

func (s *Database_file_specContext) File_spec() IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *Database_file_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Database_file_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Database_file_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDatabase_file_spec(s)
	}
}

func (s *Database_file_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDatabase_file_spec(s)
	}
}

func (s *Database_file_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDatabase_file_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Database_file_spec() (localctx IDatabase_file_specContext) {
	localctx = NewDatabase_file_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 872, TSqlParserRULE_database_file_spec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(9960)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserFILEGROUP:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(9958)
			p.File_group()
		}

	case TSqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(9959)
			p.File_spec()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFile_groupContext is an interface to support dynamic dispatch.
type IFile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_groupContext differentiates from other interfaces.
	IsFile_groupContext()
}

type File_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_groupContext() *File_groupContext {
	var p = new(File_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_file_group
	return p
}

func (*File_groupContext) IsFile_groupContext() {}

func NewFile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_groupContext {
	var p = new(File_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_file_group

	return p
}

func (s *File_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *File_groupContext) FILEGROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEGROUP, 0)
}

func (s *File_groupContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *File_groupContext) AllFile_spec() []IFile_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_specContext)(nil)).Elem())
	var tst = make([]IFile_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_specContext)
		}
	}

	return tst
}

func (s *File_groupContext) File_spec(i int) IFile_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_specContext)
}

func (s *File_groupContext) AllCONTAINS() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserCONTAINS)
}

func (s *File_groupContext) CONTAINS(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTAINS, i)
}

func (s *File_groupContext) FILESTREAM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILESTREAM, 0)
}

func (s *File_groupContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *File_groupContext) MEMORY_OPTIMIZED_DATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserMEMORY_OPTIMIZED_DATA, 0)
}

func (s *File_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFile_group(s)
	}
}

func (s *File_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFile_group(s)
	}
}

func (s *File_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFile_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) File_group() (localctx IFile_groupContext) {
	localctx = NewFile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 874, TSqlParserRULE_file_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9962)
		p.Match(TSqlParserFILEGROUP)
	}
	{
		p.SetState(9963)
		p.Id()
	}
	p.SetState(9966)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1389, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(9964)
			p.Match(TSqlParserCONTAINS)
		}
		{
			p.SetState(9965)
			p.Match(TSqlParserFILESTREAM)
		}

	}
	p.SetState(9969)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserDEFAULT {
		{
			p.SetState(9968)
			p.Match(TSqlParserDEFAULT)
		}

	}
	p.SetState(9973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONTAINS {
		{
			p.SetState(9971)
			p.Match(TSqlParserCONTAINS)
		}
		{
			p.SetState(9972)
			p.Match(TSqlParserMEMORY_OPTIMIZED_DATA)
		}

	}
	{
		p.SetState(9975)
		p.File_spec()
	}
	p.SetState(9980)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1392, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(9976)
				p.Match(TSqlParserCOMMA)
			}
			{
				p.SetState(9977)
				p.File_spec()
			}

		}
		p.SetState(9982)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1392, p.GetParserRuleContext())
	}

	return localctx
}

// IFile_specContext is an interface to support dynamic dispatch.
type IFile_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFile returns the file token.
	GetFile() antlr.Token

	// SetFile sets the file token.
	SetFile(antlr.Token)

	// IsFile_specContext differentiates from other interfaces.
	IsFile_specContext()
}

type File_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	file   antlr.Token
}

func NewEmptyFile_specContext() *File_specContext {
	var p = new(File_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_file_spec
	return p
}

func (*File_specContext) IsFile_specContext() {}

func NewFile_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_specContext {
	var p = new(File_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_file_spec

	return p
}

func (s *File_specContext) GetParser() antlr.Parser { return s.parser }

func (s *File_specContext) GetFile() antlr.Token { return s.file }

func (s *File_specContext) SetFile(v antlr.Token) { s.file = v }

func (s *File_specContext) LR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserLR_BRACKET, 0)
}

func (s *File_specContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *File_specContext) AllEQUAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserEQUAL)
}

func (s *File_specContext) EQUAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserEQUAL, i)
}

func (s *File_specContext) FILENAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILENAME, 0)
}

func (s *File_specContext) RR_BRACKET() antlr.TerminalNode {
	return s.GetToken(TSqlParserRR_BRACKET, 0)
}

func (s *File_specContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *File_specContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *File_specContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *File_specContext) SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIZE, 0)
}

func (s *File_specContext) AllFile_size() []IFile_sizeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem())
	var tst = make([]IFile_sizeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFile_sizeContext)
		}
	}

	return tst
}

func (s *File_specContext) File_size(i int) IFile_sizeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFile_sizeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFile_sizeContext)
}

func (s *File_specContext) MAXSIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXSIZE, 0)
}

func (s *File_specContext) FILEGROWTH() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILEGROWTH, 0)
}

func (s *File_specContext) UNLIMITED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNLIMITED, 0)
}

func (s *File_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFile_spec(s)
	}
}

func (s *File_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFile_spec(s)
	}
}

func (s *File_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFile_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) File_spec() (localctx IFile_specContext) {
	localctx = NewFile_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 876, TSqlParserRULE_file_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(9983)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(9984)
		p.Match(TSqlParserNAME)
	}
	{
		p.SetState(9985)
		p.Match(TSqlParserEQUAL)
	}
	p.SetState(9988)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		{
			p.SetState(9986)
			p.Id()
		}

	case TSqlParserSTRING:
		{
			p.SetState(9987)
			p.Match(TSqlParserSTRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(9991)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(9990)
			p.Match(TSqlParserCOMMA)
		}

	}
	{
		p.SetState(9993)
		p.Match(TSqlParserFILENAME)
	}
	{
		p.SetState(9994)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(9995)

		var _m = p.Match(TSqlParserSTRING)

		localctx.(*File_specContext).file = _m
	}
	p.SetState(9997)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(9996)
			p.Match(TSqlParserCOMMA)
		}

	}
	p.SetState(10005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserSIZE {
		{
			p.SetState(9999)
			p.Match(TSqlParserSIZE)
		}
		{
			p.SetState(10000)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(10001)
			p.File_size()
		}
		p.SetState(10003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(10002)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(10016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserMAXSIZE {
		{
			p.SetState(10007)
			p.Match(TSqlParserMAXSIZE)
		}
		{
			p.SetState(10008)
			p.Match(TSqlParserEQUAL)
		}
		p.SetState(10011)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case TSqlParserDECIMAL:
			{
				p.SetState(10009)
				p.File_size()
			}

		case TSqlParserUNLIMITED:
			{
				p.SetState(10010)
				p.Match(TSqlParserUNLIMITED)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(10014)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(10013)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	p.SetState(10024)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserFILEGROWTH {
		{
			p.SetState(10018)
			p.Match(TSqlParserFILEGROWTH)
		}
		{
			p.SetState(10019)
			p.Match(TSqlParserEQUAL)
		}
		{
			p.SetState(10020)
			p.File_size()
		}
		p.SetState(10022)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(10021)
				p.Match(TSqlParserCOMMA)
			}

		}

	}
	{
		p.SetState(10026)
		p.Match(TSqlParserRR_BRACKET)
	}

	return localctx
}

// IEntity_nameContext is an interface to support dynamic dispatch.
type IEntity_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer returns the server rule contexts.
	GetServer() IIdContext

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetServer sets the server rule contexts.
	SetServer(IIdContext)

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsEntity_nameContext differentiates from other interfaces.
	IsEntity_nameContext()
}

type Entity_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	server   IIdContext
	database IIdContext
	schema   IIdContext
	table    IIdContext
}

func NewEmptyEntity_nameContext() *Entity_nameContext {
	var p = new(Entity_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_entity_name
	return p
}

func (*Entity_nameContext) IsEntity_nameContext() {}

func NewEntity_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Entity_nameContext {
	var p = new(Entity_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_entity_name

	return p
}

func (s *Entity_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Entity_nameContext) GetServer() IIdContext { return s.server }

func (s *Entity_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Entity_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Entity_nameContext) GetTable() IIdContext { return s.table }

func (s *Entity_nameContext) SetServer(v IIdContext) { s.server = v }

func (s *Entity_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Entity_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Entity_nameContext) SetTable(v IIdContext) { s.table = v }

func (s *Entity_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Entity_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Entity_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Entity_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Entity_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEntity_name(s)
	}
}

func (s *Entity_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEntity_name(s)
	}
}

func (s *Entity_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEntity_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Entity_name() (localctx IEntity_nameContext) {
	localctx = NewEntity_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 878, TSqlParserRULE_entity_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10045)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1404, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10028)

			var _x = p.Id()

			localctx.(*Entity_nameContext).server = _x
		}
		{
			p.SetState(10029)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10030)

			var _x = p.Id()

			localctx.(*Entity_nameContext).database = _x
		}
		{
			p.SetState(10031)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10032)

			var _x = p.Id()

			localctx.(*Entity_nameContext).schema = _x
		}
		{
			p.SetState(10033)
			p.Match(TSqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1404, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(10035)

			var _x = p.Id()

			localctx.(*Entity_nameContext).database = _x
		}
		{
			p.SetState(10036)
			p.Match(TSqlParserDOT)
		}
		p.SetState(10038)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10037)

				var _x = p.Id()

				localctx.(*Entity_nameContext).schema = _x
			}

		}
		{
			p.SetState(10040)
			p.Match(TSqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1404, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(10042)

			var _x = p.Id()

			localctx.(*Entity_nameContext).schema = _x
		}
		{
			p.SetState(10043)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(10047)

		var _x = p.Id()

		localctx.(*Entity_nameContext).table = _x
	}

	return localctx
}

// IEntity_name_for_azure_dwContext is an interface to support dynamic dispatch.
type IEntity_name_for_azure_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// IsEntity_name_for_azure_dwContext differentiates from other interfaces.
	IsEntity_name_for_azure_dwContext()
}

type Entity_name_for_azure_dwContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	schema      IIdContext
	object_name IIdContext
}

func NewEmptyEntity_name_for_azure_dwContext() *Entity_name_for_azure_dwContext {
	var p = new(Entity_name_for_azure_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_entity_name_for_azure_dw
	return p
}

func (*Entity_name_for_azure_dwContext) IsEntity_name_for_azure_dwContext() {}

func NewEntity_name_for_azure_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Entity_name_for_azure_dwContext {
	var p = new(Entity_name_for_azure_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_entity_name_for_azure_dw

	return p
}

func (s *Entity_name_for_azure_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Entity_name_for_azure_dwContext) GetSchema() IIdContext { return s.schema }

func (s *Entity_name_for_azure_dwContext) GetObject_name() IIdContext { return s.object_name }

func (s *Entity_name_for_azure_dwContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Entity_name_for_azure_dwContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Entity_name_for_azure_dwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Entity_name_for_azure_dwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Entity_name_for_azure_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Entity_name_for_azure_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Entity_name_for_azure_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEntity_name_for_azure_dw(s)
	}
}

func (s *Entity_name_for_azure_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEntity_name_for_azure_dw(s)
	}
}

func (s *Entity_name_for_azure_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEntity_name_for_azure_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Entity_name_for_azure_dw() (localctx IEntity_name_for_azure_dwContext) {
	localctx = NewEntity_name_for_azure_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 880, TSqlParserRULE_entity_name_for_azure_dw)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10054)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1405, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10049)

			var _x = p.Id()

			localctx.(*Entity_name_for_azure_dwContext).schema = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10050)

			var _x = p.Id()

			localctx.(*Entity_name_for_azure_dwContext).schema = _x
		}
		{
			p.SetState(10051)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10052)

			var _x = p.Id()

			localctx.(*Entity_name_for_azure_dwContext).object_name = _x
		}

	}

	return localctx
}

// IEntity_name_for_parallel_dwContext is an interface to support dynamic dispatch.
type IEntity_name_for_parallel_dwContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema_database returns the schema_database rule contexts.
	GetSchema_database() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetObject_name returns the object_name rule contexts.
	GetObject_name() IIdContext

	// SetSchema_database sets the schema_database rule contexts.
	SetSchema_database(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetObject_name sets the object_name rule contexts.
	SetObject_name(IIdContext)

	// IsEntity_name_for_parallel_dwContext differentiates from other interfaces.
	IsEntity_name_for_parallel_dwContext()
}

type Entity_name_for_parallel_dwContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	schema_database IIdContext
	schema          IIdContext
	object_name     IIdContext
}

func NewEmptyEntity_name_for_parallel_dwContext() *Entity_name_for_parallel_dwContext {
	var p = new(Entity_name_for_parallel_dwContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_entity_name_for_parallel_dw
	return p
}

func (*Entity_name_for_parallel_dwContext) IsEntity_name_for_parallel_dwContext() {}

func NewEntity_name_for_parallel_dwContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Entity_name_for_parallel_dwContext {
	var p = new(Entity_name_for_parallel_dwContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_entity_name_for_parallel_dw

	return p
}

func (s *Entity_name_for_parallel_dwContext) GetParser() antlr.Parser { return s.parser }

func (s *Entity_name_for_parallel_dwContext) GetSchema_database() IIdContext { return s.schema_database }

func (s *Entity_name_for_parallel_dwContext) GetSchema() IIdContext { return s.schema }

func (s *Entity_name_for_parallel_dwContext) GetObject_name() IIdContext { return s.object_name }

func (s *Entity_name_for_parallel_dwContext) SetSchema_database(v IIdContext) { s.schema_database = v }

func (s *Entity_name_for_parallel_dwContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Entity_name_for_parallel_dwContext) SetObject_name(v IIdContext) { s.object_name = v }

func (s *Entity_name_for_parallel_dwContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Entity_name_for_parallel_dwContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Entity_name_for_parallel_dwContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Entity_name_for_parallel_dwContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Entity_name_for_parallel_dwContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEntity_name_for_parallel_dw(s)
	}
}

func (s *Entity_name_for_parallel_dwContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEntity_name_for_parallel_dw(s)
	}
}

func (s *Entity_name_for_parallel_dwContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEntity_name_for_parallel_dw(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Entity_name_for_parallel_dw() (localctx IEntity_name_for_parallel_dwContext) {
	localctx = NewEntity_name_for_parallel_dwContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 882, TSqlParserRULE_entity_name_for_parallel_dw)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10061)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1406, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10056)

			var _x = p.Id()

			localctx.(*Entity_name_for_parallel_dwContext).schema_database = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10057)

			var _x = p.Id()

			localctx.(*Entity_name_for_parallel_dwContext).schema = _x
		}
		{
			p.SetState(10058)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10059)

			var _x = p.Id()

			localctx.(*Entity_name_for_parallel_dwContext).object_name = _x
		}

	}

	return localctx
}

// IFull_table_nameContext is an interface to support dynamic dispatch.
type IFull_table_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetServer returns the server rule contexts.
	GetServer() IIdContext

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetServer sets the server rule contexts.
	SetServer(IIdContext)

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsFull_table_nameContext differentiates from other interfaces.
	IsFull_table_nameContext()
}

type Full_table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	server   IIdContext
	database IIdContext
	schema   IIdContext
	table    IIdContext
}

func NewEmptyFull_table_nameContext() *Full_table_nameContext {
	var p = new(Full_table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_full_table_name
	return p
}

func (*Full_table_nameContext) IsFull_table_nameContext() {}

func NewFull_table_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_table_nameContext {
	var p = new(Full_table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_full_table_name

	return p
}

func (s *Full_table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_table_nameContext) GetServer() IIdContext { return s.server }

func (s *Full_table_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Full_table_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Full_table_nameContext) GetTable() IIdContext { return s.table }

func (s *Full_table_nameContext) SetServer(v IIdContext) { s.server = v }

func (s *Full_table_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Full_table_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Full_table_nameContext) SetTable(v IIdContext) { s.table = v }

func (s *Full_table_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Full_table_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Full_table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFull_table_name(s)
	}
}

func (s *Full_table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFull_table_name(s)
	}
}

func (s *Full_table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFull_table_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Full_table_name() (localctx IFull_table_nameContext) {
	localctx = NewFull_table_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 884, TSqlParserRULE_full_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10080)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1408, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10063)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).server = _x
		}
		{
			p.SetState(10064)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10065)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(10066)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10067)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(10068)
			p.Match(TSqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1408, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(10070)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).database = _x
		}
		{
			p.SetState(10071)
			p.Match(TSqlParserDOT)
		}
		p.SetState(10073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10072)

				var _x = p.Id()

				localctx.(*Full_table_nameContext).schema = _x
			}

		}
		{
			p.SetState(10075)
			p.Match(TSqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1408, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(10077)

			var _x = p.Id()

			localctx.(*Full_table_nameContext).schema = _x
		}
		{
			p.SetState(10078)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(10082)

		var _x = p.Id()

		localctx.(*Full_table_nameContext).table = _x
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetTable returns the table rule contexts.
	GetTable() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetTable sets the table rule contexts.
	SetTable(IIdContext)

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	database IIdContext
	schema   IIdContext
	table    IIdContext
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Table_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Table_nameContext) GetTable() IIdContext { return s.table }

func (s *Table_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Table_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Table_nameContext) SetTable(v IIdContext) { s.table = v }

func (s *Table_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Table_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Table_nameContext) BLOCKING_HIERARCHY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBLOCKING_HIERARCHY, 0)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 886, TSqlParserRULE_table_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10110)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1413, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10094)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1410, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10084)

				var _x = p.Id()

				localctx.(*Table_nameContext).database = _x
			}
			{
				p.SetState(10085)
				p.Match(TSqlParserDOT)
			}
			p.SetState(10087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
				{
					p.SetState(10086)

					var _x = p.Id()

					localctx.(*Table_nameContext).schema = _x
				}

			}
			{
				p.SetState(10089)
				p.Match(TSqlParserDOT)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1410, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(10091)

				var _x = p.Id()

				localctx.(*Table_nameContext).schema = _x
			}
			{
				p.SetState(10092)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10096)

			var _x = p.Id()

			localctx.(*Table_nameContext).table = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(10107)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1412, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10097)

				var _x = p.Id()

				localctx.(*Table_nameContext).database = _x
			}
			{
				p.SetState(10098)
				p.Match(TSqlParserDOT)
			}
			p.SetState(10100)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
				{
					p.SetState(10099)

					var _x = p.Id()

					localctx.(*Table_nameContext).schema = _x
				}

			}
			{
				p.SetState(10102)
				p.Match(TSqlParserDOT)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1412, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(10104)

				var _x = p.Id()

				localctx.(*Table_nameContext).schema = _x
			}
			{
				p.SetState(10105)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10109)
			p.Match(TSqlParserBLOCKING_HIERARCHY)
		}

	}

	return localctx
}

// ISimple_nameContext is an interface to support dynamic dispatch.
type ISimple_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsSimple_nameContext differentiates from other interfaces.
	IsSimple_nameContext()
}

type Simple_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	schema IIdContext
	name   IIdContext
}

func NewEmptySimple_nameContext() *Simple_nameContext {
	var p = new(Simple_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_simple_name
	return p
}

func (*Simple_nameContext) IsSimple_nameContext() {}

func NewSimple_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_nameContext {
	var p = new(Simple_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_simple_name

	return p
}

func (s *Simple_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Simple_nameContext) GetName() IIdContext { return s.name }

func (s *Simple_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Simple_nameContext) SetName(v IIdContext) { s.name = v }

func (s *Simple_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Simple_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Simple_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSimple_name(s)
	}
}

func (s *Simple_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSimple_name(s)
	}
}

func (s *Simple_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSimple_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Simple_name() (localctx ISimple_nameContext) {
	localctx = NewSimple_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 888, TSqlParserRULE_simple_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10115)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1414, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10112)

			var _x = p.Id()

			localctx.(*Simple_nameContext).schema = _x
		}
		{
			p.SetState(10113)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(10117)

		var _x = p.Id()

		localctx.(*Simple_nameContext).name = _x
	}

	return localctx
}

// IFunc_proc_nameContext is an interface to support dynamic dispatch.
type IFunc_proc_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase returns the database rule contexts.
	GetDatabase() IIdContext

	// GetSchema returns the schema rule contexts.
	GetSchema() IIdContext

	// GetProcedure returns the procedure rule contexts.
	GetProcedure() IIdContext

	// SetDatabase sets the database rule contexts.
	SetDatabase(IIdContext)

	// SetSchema sets the schema rule contexts.
	SetSchema(IIdContext)

	// SetProcedure sets the procedure rule contexts.
	SetProcedure(IIdContext)

	// IsFunc_proc_nameContext differentiates from other interfaces.
	IsFunc_proc_nameContext()
}

type Func_proc_nameContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	database  IIdContext
	schema    IIdContext
	procedure IIdContext
}

func NewEmptyFunc_proc_nameContext() *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_func_proc_name
	return p
}

func (*Func_proc_nameContext) IsFunc_proc_nameContext() {}

func NewFunc_proc_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_proc_nameContext {
	var p = new(Func_proc_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_func_proc_name

	return p
}

func (s *Func_proc_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_proc_nameContext) GetDatabase() IIdContext { return s.database }

func (s *Func_proc_nameContext) GetSchema() IIdContext { return s.schema }

func (s *Func_proc_nameContext) GetProcedure() IIdContext { return s.procedure }

func (s *Func_proc_nameContext) SetDatabase(v IIdContext) { s.database = v }

func (s *Func_proc_nameContext) SetSchema(v IIdContext) { s.schema = v }

func (s *Func_proc_nameContext) SetProcedure(v IIdContext) { s.procedure = v }

func (s *Func_proc_nameContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Func_proc_nameContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Func_proc_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_proc_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_proc_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFunc_proc_name(s)
	}
}

func (s *Func_proc_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFunc_proc_name(s)
	}
}

func (s *Func_proc_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFunc_proc_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Func_proc_name() (localctx IFunc_proc_nameContext) {
	localctx = NewFunc_proc_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 890, TSqlParserRULE_func_proc_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10129)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1416, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10119)

			var _x = p.Id()

			localctx.(*Func_proc_nameContext).database = _x
		}
		{
			p.SetState(10120)
			p.Match(TSqlParserDOT)
		}
		p.SetState(10122)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10121)

				var _x = p.Id()

				localctx.(*Func_proc_nameContext).schema = _x
			}

		}
		{
			p.SetState(10124)
			p.Match(TSqlParserDOT)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1416, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(10126)

			var _x = p.Id()

			localctx.(*Func_proc_nameContext).schema = _x
		}

		{
			p.SetState(10127)
			p.Match(TSqlParserDOT)
		}

	}
	{
		p.SetState(10131)

		var _x = p.Id()

		localctx.(*Func_proc_nameContext).procedure = _x
	}

	return localctx
}

// IDdl_objectContext is an interface to support dynamic dispatch.
type IDdl_objectContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_objectContext differentiates from other interfaces.
	IsDdl_objectContext()
}

type Ddl_objectContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_objectContext() *Ddl_objectContext {
	var p = new(Ddl_objectContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_ddl_object
	return p
}

func (*Ddl_objectContext) IsDdl_objectContext() {}

func NewDdl_objectContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_objectContext {
	var p = new(Ddl_objectContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_ddl_object

	return p
}

func (s *Ddl_objectContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_objectContext) Full_table_name() IFull_table_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_table_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_table_nameContext)
}

func (s *Ddl_objectContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Ddl_objectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_objectContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_objectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDdl_object(s)
	}
}

func (s *Ddl_objectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDdl_object(s)
	}
}

func (s *Ddl_objectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDdl_object(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Ddl_object() (localctx IDdl_objectContext) {
	localctx = NewDdl_objectContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 892, TSqlParserRULE_ddl_object)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10135)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10133)
			p.Full_table_name()
		}

	case TSqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10134)
			p.Match(TSqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFull_column_nameContext is an interface to support dynamic dispatch.
type IFull_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetColumn_name returns the column_name rule contexts.
	GetColumn_name() IIdContext

	// SetColumn_name sets the column_name rule contexts.
	SetColumn_name(IIdContext)

	// IsFull_column_nameContext differentiates from other interfaces.
	IsFull_column_nameContext()
}

type Full_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	column_name IIdContext
}

func NewEmptyFull_column_nameContext() *Full_column_nameContext {
	var p = new(Full_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_full_column_name
	return p
}

func (*Full_column_nameContext) IsFull_column_nameContext() {}

func NewFull_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_nameContext {
	var p = new(Full_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_full_column_name

	return p
}

func (s *Full_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_nameContext) GetColumn_name() IIdContext { return s.column_name }

func (s *Full_column_nameContext) SetColumn_name(v IIdContext) { s.column_name = v }

func (s *Full_column_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Full_column_nameContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Full_column_nameContext) COMPATIBILITY_LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMPATIBILITY_LEVEL, 0)
}

func (s *Full_column_nameContext) STATUS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATUS, 0)
}

func (s *Full_column_nameContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(TSqlParserQUOTED_IDENTIFIER, 0)
}

func (s *Full_column_nameContext) ARITHABORT() antlr.TerminalNode {
	return s.GetToken(TSqlParserARITHABORT, 0)
}

func (s *Full_column_nameContext) ANSI_WARNINGS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_WARNINGS, 0)
}

func (s *Full_column_nameContext) ANSI_PADDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_PADDING, 0)
}

func (s *Full_column_nameContext) ANSI_NULLS() antlr.TerminalNode {
	return s.GetToken(TSqlParserANSI_NULLS, 0)
}

func (s *Full_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFull_column_name(s)
	}
}

func (s *Full_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFull_column_name(s)
	}
}

func (s *Full_column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFull_column_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Full_column_name() (localctx IFull_column_nameContext) {
	localctx = NewFull_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 894, TSqlParserRULE_full_column_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10185)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1426, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(10140)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1418, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10137)
				p.Table_name()
			}
			{
				p.SetState(10138)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10142)

			var _x = p.Id()

			localctx.(*Full_column_nameContext).column_name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(10146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10143)
				p.Table_name()
			}
			{
				p.SetState(10144)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10148)
			p.Match(TSqlParserCOMPATIBILITY_LEVEL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(10152)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10149)
				p.Table_name()
			}
			{
				p.SetState(10150)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10154)
			p.Match(TSqlParserSTATUS)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(10158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10155)
				p.Table_name()
			}
			{
				p.SetState(10156)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10160)
			p.Match(TSqlParserQUOTED_IDENTIFIER)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(10164)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10161)
				p.Table_name()
			}
			{
				p.SetState(10162)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10166)
			p.Match(TSqlParserARITHABORT)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(10170)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10167)
				p.Table_name()
			}
			{
				p.SetState(10168)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10172)
			p.Match(TSqlParserANSI_WARNINGS)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(10176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10173)
				p.Table_name()
			}
			{
				p.SetState(10174)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10178)
			p.Match(TSqlParserANSI_PADDING)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(10182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserBLOCKING_HIERARCHY || _la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserDOUBLE_QUOTE_ID-747))|(1<<(TSqlParserSQUARE_BRACKET_ID-747))|(1<<(TSqlParserID-747)))) != 0) {
			{
				p.SetState(10179)
				p.Table_name()
			}
			{
				p.SetState(10180)
				p.Match(TSqlParserDOT)
			}

		}
		{
			p.SetState(10184)
			p.Match(TSqlParserANSI_NULLS)
		}

	}

	return localctx
}

// IColumn_name_list_with_orderContext is an interface to support dynamic dispatch.
type IColumn_name_list_with_orderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_name_list_with_orderContext differentiates from other interfaces.
	IsColumn_name_list_with_orderContext()
}

type Column_name_list_with_orderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_list_with_orderContext() *Column_name_list_with_orderContext {
	var p = new(Column_name_list_with_orderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_name_list_with_order
	return p
}

func (*Column_name_list_with_orderContext) IsColumn_name_list_with_orderContext() {}

func NewColumn_name_list_with_orderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_list_with_orderContext {
	var p = new(Column_name_list_with_orderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_name_list_with_order

	return p
}

func (s *Column_name_list_with_orderContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_list_with_orderContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Column_name_list_with_orderContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_name_list_with_orderContext) AllASC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserASC)
}

func (s *Column_name_list_with_orderContext) ASC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserASC, i)
}

func (s *Column_name_list_with_orderContext) AllDESC() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDESC)
}

func (s *Column_name_list_with_orderContext) DESC(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDESC, i)
}

func (s *Column_name_list_with_orderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_list_with_orderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_list_with_orderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_name_list_with_order(s)
	}
}

func (s *Column_name_list_with_orderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_name_list_with_order(s)
	}
}

func (s *Column_name_list_with_orderContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_name_list_with_order(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_name_list_with_order() (localctx IColumn_name_list_with_orderContext) {
	localctx = NewColumn_name_list_with_orderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 896, TSqlParserRULE_column_name_list_with_order)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10187)
		p.Id()
	}
	p.SetState(10189)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserASC || _la == TSqlParserDESC {
		p.SetState(10188)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserASC || _la == TSqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(10198)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(10191)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(10192)
			p.Id()
		}
		p.SetState(10194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserASC || _la == TSqlParserDESC {
			p.SetState(10193)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserASC || _la == TSqlParserDESC) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

		p.SetState(10200)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IColumn_name_listContext is an interface to support dynamic dispatch.
type IColumn_name_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_name_listContext differentiates from other interfaces.
	IsColumn_name_listContext()
}

type Column_name_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_name_listContext() *Column_name_listContext {
	var p = new(Column_name_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_column_name_list
	return p
}

func (*Column_name_listContext) IsColumn_name_listContext() {}

func NewColumn_name_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_name_listContext {
	var p = new(Column_name_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_column_name_list

	return p
}

func (s *Column_name_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_name_listContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Column_name_listContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Column_name_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_name_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_name_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterColumn_name_list(s)
	}
}

func (s *Column_name_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitColumn_name_list(s)
	}
}

func (s *Column_name_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitColumn_name_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Column_name_list() (localctx IColumn_name_listContext) {
	localctx = NewColumn_name_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 898, TSqlParserRULE_column_name_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10201)
		p.Id()
	}
	p.SetState(10206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == TSqlParserCOMMA {
		{
			p.SetState(10202)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(10203)
			p.Id()
		}

		p.SetState(10208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICursor_nameContext is an interface to support dynamic dispatch.
type ICursor_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_nameContext differentiates from other interfaces.
	IsCursor_nameContext()
}

type Cursor_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_nameContext() *Cursor_nameContext {
	var p = new(Cursor_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_cursor_name
	return p
}

func (*Cursor_nameContext) IsCursor_nameContext() {}

func NewCursor_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_nameContext {
	var p = new(Cursor_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_cursor_name

	return p
}

func (s *Cursor_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Cursor_nameContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Cursor_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterCursor_name(s)
	}
}

func (s *Cursor_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitCursor_name(s)
	}
}

func (s *Cursor_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitCursor_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Cursor_name() (localctx ICursor_nameContext) {
	localctx = NewCursor_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 900, TSqlParserRULE_cursor_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10211)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10209)
			p.Id()
		}

	case TSqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10210)
			p.Match(TSqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOn_offContext is an interface to support dynamic dispatch.
type IOn_offContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_offContext differentiates from other interfaces.
	IsOn_offContext()
}

type On_offContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_offContext() *On_offContext {
	var p = new(On_offContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_on_off
	return p
}

func (*On_offContext) IsOn_offContext() {}

func NewOn_offContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_offContext {
	var p = new(On_offContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_on_off

	return p
}

func (s *On_offContext) GetParser() antlr.Parser { return s.parser }

func (s *On_offContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *On_offContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *On_offContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_offContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_offContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterOn_off(s)
	}
}

func (s *On_offContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitOn_off(s)
	}
}

func (s *On_offContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitOn_off(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) On_off() (localctx IOn_offContext) {
	localctx = NewOn_offContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 902, TSqlParserRULE_on_off)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10213)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserOFF || _la == TSqlParserON) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IClusteredContext is an interface to support dynamic dispatch.
type IClusteredContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClusteredContext differentiates from other interfaces.
	IsClusteredContext()
}

type ClusteredContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClusteredContext() *ClusteredContext {
	var p = new(ClusteredContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_clustered
	return p
}

func (*ClusteredContext) IsClusteredContext() {}

func NewClusteredContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClusteredContext {
	var p = new(ClusteredContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_clustered

	return p
}

func (s *ClusteredContext) GetParser() antlr.Parser { return s.parser }

func (s *ClusteredContext) CLUSTERED() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLUSTERED, 0)
}

func (s *ClusteredContext) NONCLUSTERED() antlr.TerminalNode {
	return s.GetToken(TSqlParserNONCLUSTERED, 0)
}

func (s *ClusteredContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClusteredContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClusteredContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterClustered(s)
	}
}

func (s *ClusteredContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitClustered(s)
	}
}

func (s *ClusteredContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitClustered(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Clustered() (localctx IClusteredContext) {
	localctx = NewClusteredContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 904, TSqlParserRULE_clustered)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10215)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserCLUSTERED || _la == TSqlParserNONCLUSTERED) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// INull_notnullContext is an interface to support dynamic dispatch.
type INull_notnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_notnullContext differentiates from other interfaces.
	IsNull_notnullContext()
}

type Null_notnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_notnullContext() *Null_notnullContext {
	var p = new(Null_notnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_null_notnull
	return p
}

func (*Null_notnullContext) IsNull_notnullContext() {}

func NewNull_notnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_notnullContext {
	var p = new(Null_notnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_null_notnull

	return p
}

func (s *Null_notnullContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_notnullContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Null_notnullContext) NOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOT, 0)
}

func (s *Null_notnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_notnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_notnullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNull_notnull(s)
	}
}

func (s *Null_notnullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNull_notnull(s)
	}
}

func (s *Null_notnullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNull_notnull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Null_notnull() (localctx INull_notnullContext) {
	localctx = NewNull_notnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 906, TSqlParserRULE_null_notnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10218)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserNOT {
		{
			p.SetState(10217)
			p.Match(TSqlParserNOT)
		}

	}
	{
		p.SetState(10220)
		p.Match(TSqlParserNULL)
	}

	return localctx
}

// INull_or_defaultContext is an interface to support dynamic dispatch.
type INull_or_defaultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_or_defaultContext differentiates from other interfaces.
	IsNull_or_defaultContext()
}

type Null_or_defaultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_or_defaultContext() *Null_or_defaultContext {
	var p = new(Null_or_defaultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_null_or_default
	return p
}

func (*Null_or_defaultContext) IsNull_or_defaultContext() {}

func NewNull_or_defaultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_or_defaultContext {
	var p = new(Null_or_defaultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_null_or_default

	return p
}

func (s *Null_or_defaultContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_or_defaultContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *Null_or_defaultContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Null_or_defaultContext) Constant_expression() IConstant_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_expressionContext)
}

func (s *Null_or_defaultContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Null_or_defaultContext) VALUES() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUES, 0)
}

func (s *Null_or_defaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_or_defaultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_or_defaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterNull_or_default(s)
	}
}

func (s *Null_or_defaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitNull_or_default(s)
	}
}

func (s *Null_or_defaultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitNull_or_default(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Null_or_default() (localctx INull_or_defaultContext) {
	localctx = NewNull_or_defaultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 908, TSqlParserRULE_null_or_default)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10229)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserNOT, TSqlParserNULL:
		{
			p.SetState(10222)
			p.Null_notnull()
		}

	case TSqlParserDEFAULT:
		{
			p.SetState(10223)
			p.Match(TSqlParserDEFAULT)
		}
		{
			p.SetState(10224)
			p.Constant_expression()
		}
		p.SetState(10227)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1433, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10225)
				p.Match(TSqlParserWITH)
			}
			{
				p.SetState(10226)
				p.Match(TSqlParserVALUES)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IScalar_function_nameContext is an interface to support dynamic dispatch.
type IScalar_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalar_function_nameContext differentiates from other interfaces.
	IsScalar_function_nameContext()
}

type Scalar_function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalar_function_nameContext() *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_scalar_function_name
	return p
}

func (*Scalar_function_nameContext) IsScalar_function_nameContext() {}

func NewScalar_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_scalar_function_name

	return p
}

func (s *Scalar_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Scalar_function_nameContext) Func_proc_name() IFunc_proc_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_proc_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunc_proc_nameContext)
}

func (s *Scalar_function_nameContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(TSqlParserRIGHT, 0)
}

func (s *Scalar_function_nameContext) LEFT() antlr.TerminalNode {
	return s.GetToken(TSqlParserLEFT, 0)
}

func (s *Scalar_function_nameContext) BINARY_CHECKSUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY_CHECKSUM, 0)
}

func (s *Scalar_function_nameContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM, 0)
}

func (s *Scalar_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scalar_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scalar_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitScalar_function_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Scalar_function_name() (localctx IScalar_function_nameContext) {
	localctx = NewScalar_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 910, TSqlParserRULE_scalar_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10236)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10231)
			p.Func_proc_name()
		}

	case TSqlParserRIGHT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10232)
			p.Match(TSqlParserRIGHT)
		}

	case TSqlParserLEFT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10233)
			p.Match(TSqlParserLEFT)
		}

	case TSqlParserBINARY_CHECKSUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10234)
			p.Match(TSqlParserBINARY_CHECKSUM)
		}

	case TSqlParserCHECKSUM:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10235)
			p.Match(TSqlParserCHECKSUM)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBegin_conversation_timerContext is an interface to support dynamic dispatch.
type IBegin_conversation_timerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBegin_conversation_timerContext differentiates from other interfaces.
	IsBegin_conversation_timerContext()
}

type Begin_conversation_timerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_conversation_timerContext() *Begin_conversation_timerContext {
	var p = new(Begin_conversation_timerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_begin_conversation_timer
	return p
}

func (*Begin_conversation_timerContext) IsBegin_conversation_timerContext() {}

func NewBegin_conversation_timerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_conversation_timerContext {
	var p = new(Begin_conversation_timerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_begin_conversation_timer

	return p
}

func (s *Begin_conversation_timerContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_conversation_timerContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Begin_conversation_timerContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *Begin_conversation_timerContext) TIMER() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIMER, 0)
}

func (s *Begin_conversation_timerContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Begin_conversation_timerContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIMEOUT, 0)
}

func (s *Begin_conversation_timerContext) Time() ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Begin_conversation_timerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_conversation_timerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_conversation_timerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBegin_conversation_timer(s)
	}
}

func (s *Begin_conversation_timerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBegin_conversation_timer(s)
	}
}

func (s *Begin_conversation_timerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBegin_conversation_timer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Begin_conversation_timer() (localctx IBegin_conversation_timerContext) {
	localctx = NewBegin_conversation_timerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 912, TSqlParserRULE_begin_conversation_timer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10238)
		p.Match(TSqlParserBEGIN)
	}
	{
		p.SetState(10239)
		p.Match(TSqlParserCONVERSATION)
	}
	{
		p.SetState(10240)
		p.Match(TSqlParserTIMER)
	}
	{
		p.SetState(10241)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(10242)
		p.Match(TSqlParserLOCAL_ID)
	}
	{
		p.SetState(10243)
		p.Match(TSqlParserRR_BRACKET)
	}
	{
		p.SetState(10244)
		p.Match(TSqlParserTIMEOUT)
	}
	{
		p.SetState(10245)
		p.Match(TSqlParserEQUAL)
	}
	{
		p.SetState(10246)
		p.Time()
	}
	p.SetState(10248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1436, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10247)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IBegin_conversation_dialogContext is an interface to support dynamic dispatch.
type IBegin_conversation_dialogContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDialog_handle returns the dialog_handle token.
	GetDialog_handle() antlr.Token

	// GetService_broker_guid returns the service_broker_guid token.
	GetService_broker_guid() antlr.Token

	// SetDialog_handle sets the dialog_handle token.
	SetDialog_handle(antlr.Token)

	// SetService_broker_guid sets the service_broker_guid token.
	SetService_broker_guid(antlr.Token)

	// GetInitiator_service_name returns the initiator_service_name rule contexts.
	GetInitiator_service_name() IService_nameContext

	// GetTarget_service_name returns the target_service_name rule contexts.
	GetTarget_service_name() IService_nameContext

	// SetInitiator_service_name sets the initiator_service_name rule contexts.
	SetInitiator_service_name(IService_nameContext)

	// SetTarget_service_name sets the target_service_name rule contexts.
	SetTarget_service_name(IService_nameContext)

	// IsBegin_conversation_dialogContext differentiates from other interfaces.
	IsBegin_conversation_dialogContext()
}

type Begin_conversation_dialogContext struct {
	*antlr.BaseParserRuleContext
	parser                 antlr.Parser
	dialog_handle          antlr.Token
	initiator_service_name IService_nameContext
	target_service_name    IService_nameContext
	service_broker_guid    antlr.Token
}

func NewEmptyBegin_conversation_dialogContext() *Begin_conversation_dialogContext {
	var p = new(Begin_conversation_dialogContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_begin_conversation_dialog
	return p
}

func (*Begin_conversation_dialogContext) IsBegin_conversation_dialogContext() {}

func NewBegin_conversation_dialogContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_conversation_dialogContext {
	var p = new(Begin_conversation_dialogContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_begin_conversation_dialog

	return p
}

func (s *Begin_conversation_dialogContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_conversation_dialogContext) GetDialog_handle() antlr.Token { return s.dialog_handle }

func (s *Begin_conversation_dialogContext) GetService_broker_guid() antlr.Token {
	return s.service_broker_guid
}

func (s *Begin_conversation_dialogContext) SetDialog_handle(v antlr.Token) { s.dialog_handle = v }

func (s *Begin_conversation_dialogContext) SetService_broker_guid(v antlr.Token) {
	s.service_broker_guid = v
}

func (s *Begin_conversation_dialogContext) GetInitiator_service_name() IService_nameContext {
	return s.initiator_service_name
}

func (s *Begin_conversation_dialogContext) GetTarget_service_name() IService_nameContext {
	return s.target_service_name
}

func (s *Begin_conversation_dialogContext) SetInitiator_service_name(v IService_nameContext) {
	s.initiator_service_name = v
}

func (s *Begin_conversation_dialogContext) SetTarget_service_name(v IService_nameContext) {
	s.target_service_name = v
}

func (s *Begin_conversation_dialogContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserBEGIN, 0)
}

func (s *Begin_conversation_dialogContext) DIALOG() antlr.TerminalNode {
	return s.GetToken(TSqlParserDIALOG, 0)
}

func (s *Begin_conversation_dialogContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Begin_conversation_dialogContext) AllSERVICE() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSERVICE)
}

func (s *Begin_conversation_dialogContext) SERVICE(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVICE, i)
}

func (s *Begin_conversation_dialogContext) TO() antlr.TerminalNode {
	return s.GetToken(TSqlParserTO, 0)
}

func (s *Begin_conversation_dialogContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserON)
}

func (s *Begin_conversation_dialogContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserON, i)
}

func (s *Begin_conversation_dialogContext) CONTRACT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTRACT, 0)
}

func (s *Begin_conversation_dialogContext) Contract_name() IContract_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContract_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContract_nameContext)
}

func (s *Begin_conversation_dialogContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCAL_ID)
}

func (s *Begin_conversation_dialogContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, i)
}

func (s *Begin_conversation_dialogContext) AllService_name() []IService_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IService_nameContext)(nil)).Elem())
	var tst = make([]IService_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IService_nameContext)
		}
	}

	return tst
}

func (s *Begin_conversation_dialogContext) Service_name(i int) IService_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IService_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IService_nameContext)
}

func (s *Begin_conversation_dialogContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *Begin_conversation_dialogContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *Begin_conversation_dialogContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Begin_conversation_dialogContext) LIFETIME() antlr.TerminalNode {
	return s.GetToken(TSqlParserLIFETIME, 0)
}

func (s *Begin_conversation_dialogContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Begin_conversation_dialogContext) RELATED_CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserRELATED_CONVERSATION, 0)
}

func (s *Begin_conversation_dialogContext) RELATED_CONVERSATION_GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserRELATED_CONVERSATION_GROUP, 0)
}

func (s *Begin_conversation_dialogContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *Begin_conversation_dialogContext) OFF() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFF, 0)
}

func (s *Begin_conversation_dialogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_conversation_dialogContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_conversation_dialogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterBegin_conversation_dialog(s)
	}
}

func (s *Begin_conversation_dialogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitBegin_conversation_dialog(s)
	}
}

func (s *Begin_conversation_dialogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitBegin_conversation_dialog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Begin_conversation_dialog() (localctx IBegin_conversation_dialogContext) {
	localctx = NewBegin_conversation_dialogContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 914, TSqlParserRULE_begin_conversation_dialog)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10250)
		p.Match(TSqlParserBEGIN)
	}
	{
		p.SetState(10251)
		p.Match(TSqlParserDIALOG)
	}
	p.SetState(10253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCONVERSATION {
		{
			p.SetState(10252)
			p.Match(TSqlParserCONVERSATION)
		}

	}
	{
		p.SetState(10255)

		var _m = p.Match(TSqlParserLOCAL_ID)

		localctx.(*Begin_conversation_dialogContext).dialog_handle = _m
	}
	{
		p.SetState(10256)
		p.Match(TSqlParserFROM)
	}
	{
		p.SetState(10257)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(10258)

		var _x = p.Service_name()

		localctx.(*Begin_conversation_dialogContext).initiator_service_name = _x
	}
	{
		p.SetState(10259)
		p.Match(TSqlParserTO)
	}
	{
		p.SetState(10260)
		p.Match(TSqlParserSERVICE)
	}
	{
		p.SetState(10261)

		var _x = p.Service_name()

		localctx.(*Begin_conversation_dialogContext).target_service_name = _x
	}
	p.SetState(10264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserCOMMA {
		{
			p.SetState(10262)
			p.Match(TSqlParserCOMMA)
		}
		{
			p.SetState(10263)

			var _m = p.Match(TSqlParserSTRING)

			localctx.(*Begin_conversation_dialogContext).service_broker_guid = _m
		}

	}
	{
		p.SetState(10266)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(10267)
		p.Match(TSqlParserCONTRACT)
	}
	{
		p.SetState(10268)
		p.Contract_name()
	}
	p.SetState(10291)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1444, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10269)
			p.Match(TSqlParserWITH)
		}
		p.SetState(10276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserRELATED_CONVERSATION || _la == TSqlParserRELATED_CONVERSATION_GROUP {
			p.SetState(10270)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserRELATED_CONVERSATION || _la == TSqlParserRELATED_CONVERSATION_GROUP) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(10271)
				p.Match(TSqlParserEQUAL)
			}
			{
				p.SetState(10272)
				p.Match(TSqlParserLOCAL_ID)
			}
			p.SetState(10274)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(10273)
					p.Match(TSqlParserCOMMA)
				}

			}

		}
		p.SetState(10284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserLIFETIME {
			{
				p.SetState(10278)
				p.Match(TSqlParserLIFETIME)
			}
			{
				p.SetState(10279)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(10280)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserDECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(10282)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(10281)
					p.Match(TSqlParserCOMMA)
				}

			}

		}
		p.SetState(10289)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1443, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10286)
				p.Match(TSqlParserENCRYPTION)
			}
			{
				p.SetState(10287)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(10288)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserOFF || _la == TSqlParserON) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	}
	p.SetState(10294)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1445, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10293)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IContract_nameContext is an interface to support dynamic dispatch.
type IContract_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContract_nameContext differentiates from other interfaces.
	IsContract_nameContext()
}

type Contract_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContract_nameContext() *Contract_nameContext {
	var p = new(Contract_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_contract_name
	return p
}

func (*Contract_nameContext) IsContract_nameContext() {}

func NewContract_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Contract_nameContext {
	var p = new(Contract_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_contract_name

	return p
}

func (s *Contract_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Contract_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Contract_nameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Contract_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Contract_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Contract_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterContract_name(s)
	}
}

func (s *Contract_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitContract_name(s)
	}
}

func (s *Contract_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitContract_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Contract_name() (localctx IContract_nameContext) {
	localctx = NewContract_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 916, TSqlParserRULE_contract_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10298)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1446, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(10296)
			p.Id()
		}

	case 2:
		{
			p.SetState(10297)
			p.expression(0)
		}

	}

	return localctx
}

// IService_nameContext is an interface to support dynamic dispatch.
type IService_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsService_nameContext differentiates from other interfaces.
	IsService_nameContext()
}

type Service_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyService_nameContext() *Service_nameContext {
	var p = new(Service_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_service_name
	return p
}

func (*Service_nameContext) IsService_nameContext() {}

func NewService_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Service_nameContext {
	var p = new(Service_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_service_name

	return p
}

func (s *Service_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Service_nameContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Service_nameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Service_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Service_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Service_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterService_name(s)
	}
}

func (s *Service_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitService_name(s)
	}
}

func (s *Service_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitService_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Service_name() (localctx IService_nameContext) {
	localctx = NewService_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 918, TSqlParserRULE_service_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10302)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1447, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(10300)
			p.Id()
		}

	case 2:
		{
			p.SetState(10301)
			p.expression(0)
		}

	}

	return localctx
}

// IEnd_conversationContext is an interface to support dynamic dispatch.
type IEnd_conversationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversation_handle returns the conversation_handle token.
	GetConversation_handle() antlr.Token

	// GetFaliure_code returns the faliure_code token.
	GetFaliure_code() antlr.Token

	// GetFailure_text returns the failure_text token.
	GetFailure_text() antlr.Token

	// SetConversation_handle sets the conversation_handle token.
	SetConversation_handle(antlr.Token)

	// SetFaliure_code sets the faliure_code token.
	SetFaliure_code(antlr.Token)

	// SetFailure_text sets the failure_text token.
	SetFailure_text(antlr.Token)

	// IsEnd_conversationContext differentiates from other interfaces.
	IsEnd_conversationContext()
}

type End_conversationContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	conversation_handle antlr.Token
	faliure_code        antlr.Token
	failure_text        antlr.Token
}

func NewEmptyEnd_conversationContext() *End_conversationContext {
	var p = new(End_conversationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_end_conversation
	return p
}

func (*End_conversationContext) IsEnd_conversationContext() {}

func NewEnd_conversationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *End_conversationContext {
	var p = new(End_conversationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_end_conversation

	return p
}

func (s *End_conversationContext) GetParser() antlr.Parser { return s.parser }

func (s *End_conversationContext) GetConversation_handle() antlr.Token { return s.conversation_handle }

func (s *End_conversationContext) GetFaliure_code() antlr.Token { return s.faliure_code }

func (s *End_conversationContext) GetFailure_text() antlr.Token { return s.failure_text }

func (s *End_conversationContext) SetConversation_handle(v antlr.Token) { s.conversation_handle = v }

func (s *End_conversationContext) SetFaliure_code(v antlr.Token) { s.faliure_code = v }

func (s *End_conversationContext) SetFailure_text(v antlr.Token) { s.failure_text = v }

func (s *End_conversationContext) END() antlr.TerminalNode {
	return s.GetToken(TSqlParserEND, 0)
}

func (s *End_conversationContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *End_conversationContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCAL_ID)
}

func (s *End_conversationContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, i)
}

func (s *End_conversationContext) WITH() antlr.TerminalNode {
	return s.GetToken(TSqlParserWITH, 0)
}

func (s *End_conversationContext) ERROR() antlr.TerminalNode {
	return s.GetToken(TSqlParserERROR, 0)
}

func (s *End_conversationContext) DESCRIPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDESCRIPTION, 0)
}

func (s *End_conversationContext) CLEANUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserCLEANUP, 0)
}

func (s *End_conversationContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *End_conversationContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *End_conversationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *End_conversationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *End_conversationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterEnd_conversation(s)
	}
}

func (s *End_conversationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitEnd_conversation(s)
	}
}

func (s *End_conversationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitEnd_conversation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) End_conversation() (localctx IEnd_conversationContext) {
	localctx = NewEnd_conversationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 920, TSqlParserRULE_end_conversation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10304)
		p.Match(TSqlParserEND)
	}
	{
		p.SetState(10305)
		p.Match(TSqlParserCONVERSATION)
	}
	{
		p.SetState(10306)

		var _m = p.Match(TSqlParserLOCAL_ID)

		localctx.(*End_conversationContext).conversation_handle = _m
	}
	p.SetState(10308)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1448, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10307)
			p.Match(TSqlParserSEMI)
		}

	}
	p.SetState(10322)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1451, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10310)
			p.Match(TSqlParserWITH)
		}
		p.SetState(10317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserERROR {
			{
				p.SetState(10311)
				p.Match(TSqlParserERROR)
			}
			{
				p.SetState(10312)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(10313)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*End_conversationContext).faliure_code = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*End_conversationContext).faliure_code = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(10314)
				p.Match(TSqlParserDESCRIPTION)
			}
			{
				p.SetState(10315)
				p.Match(TSqlParserEQUAL)
			}
			p.SetState(10316)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*End_conversationContext).failure_text = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*End_conversationContext).failure_text = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(10320)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCLEANUP {
			{
				p.SetState(10319)
				p.Match(TSqlParserCLEANUP)
			}

		}

	}

	return localctx
}

// IWaitfor_conversationContext is an interface to support dynamic dispatch.
type IWaitfor_conversationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTimeout returns the timeout rule contexts.
	GetTimeout() ITimeContext

	// SetTimeout sets the timeout rule contexts.
	SetTimeout(ITimeContext)

	// IsWaitfor_conversationContext differentiates from other interfaces.
	IsWaitfor_conversationContext()
}

type Waitfor_conversationContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	timeout ITimeContext
}

func NewEmptyWaitfor_conversationContext() *Waitfor_conversationContext {
	var p = new(Waitfor_conversationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_waitfor_conversation
	return p
}

func (*Waitfor_conversationContext) IsWaitfor_conversationContext() {}

func NewWaitfor_conversationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Waitfor_conversationContext {
	var p = new(Waitfor_conversationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_waitfor_conversation

	return p
}

func (s *Waitfor_conversationContext) GetParser() antlr.Parser { return s.parser }

func (s *Waitfor_conversationContext) GetTimeout() ITimeContext { return s.timeout }

func (s *Waitfor_conversationContext) SetTimeout(v ITimeContext) { s.timeout = v }

func (s *Waitfor_conversationContext) Get_conversation() IGet_conversationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGet_conversationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGet_conversationContext)
}

func (s *Waitfor_conversationContext) WAITFOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserWAITFOR, 0)
}

func (s *Waitfor_conversationContext) TIMEOUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIMEOUT, 0)
}

func (s *Waitfor_conversationContext) Time() ITimeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeContext)
}

func (s *Waitfor_conversationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Waitfor_conversationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Waitfor_conversationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterWaitfor_conversation(s)
	}
}

func (s *Waitfor_conversationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitWaitfor_conversation(s)
	}
}

func (s *Waitfor_conversationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitWaitfor_conversation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Waitfor_conversation() (localctx IWaitfor_conversationContext) {
	localctx = NewWaitfor_conversationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 922, TSqlParserRULE_waitfor_conversation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserWAITFOR {
		{
			p.SetState(10324)
			p.Match(TSqlParserWAITFOR)
		}

	}
	{
		p.SetState(10327)
		p.Match(TSqlParserLR_BRACKET)
	}
	{
		p.SetState(10328)
		p.Get_conversation()
	}
	{
		p.SetState(10329)
		p.Match(TSqlParserRR_BRACKET)
	}
	p.SetState(10335)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserTIMEOUT || _la == TSqlParserCOMMA {
		p.SetState(10331)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserCOMMA {
			{
				p.SetState(10330)
				p.Match(TSqlParserCOMMA)
			}

		}
		{
			p.SetState(10333)
			p.Match(TSqlParserTIMEOUT)
		}
		{
			p.SetState(10334)

			var _x = p.Time()

			localctx.(*Waitfor_conversationContext).timeout = _x
		}

	}
	p.SetState(10338)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1455, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10337)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IGet_conversationContext is an interface to support dynamic dispatch.
type IGet_conversationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversation_group_id returns the conversation_group_id token.
	GetConversation_group_id() antlr.Token

	// SetConversation_group_id sets the conversation_group_id token.
	SetConversation_group_id(antlr.Token)

	// GetQueue returns the queue rule contexts.
	GetQueue() IQueue_idContext

	// SetQueue sets the queue rule contexts.
	SetQueue(IQueue_idContext)

	// IsGet_conversationContext differentiates from other interfaces.
	IsGet_conversationContext()
}

type Get_conversationContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	conversation_group_id antlr.Token
	queue                 IQueue_idContext
}

func NewEmptyGet_conversationContext() *Get_conversationContext {
	var p = new(Get_conversationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_get_conversation
	return p
}

func (*Get_conversationContext) IsGet_conversationContext() {}

func NewGet_conversationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Get_conversationContext {
	var p = new(Get_conversationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_get_conversation

	return p
}

func (s *Get_conversationContext) GetParser() antlr.Parser { return s.parser }

func (s *Get_conversationContext) GetConversation_group_id() antlr.Token {
	return s.conversation_group_id
}

func (s *Get_conversationContext) SetConversation_group_id(v antlr.Token) { s.conversation_group_id = v }

func (s *Get_conversationContext) GetQueue() IQueue_idContext { return s.queue }

func (s *Get_conversationContext) SetQueue(v IQueue_idContext) { s.queue = v }

func (s *Get_conversationContext) GET() antlr.TerminalNode {
	return s.GetToken(TSqlParserGET, 0)
}

func (s *Get_conversationContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *Get_conversationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUP, 0)
}

func (s *Get_conversationContext) FROM() antlr.TerminalNode {
	return s.GetToken(TSqlParserFROM, 0)
}

func (s *Get_conversationContext) Queue_id() IQueue_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueue_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueue_idContext)
}

func (s *Get_conversationContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *Get_conversationContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, 0)
}

func (s *Get_conversationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Get_conversationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Get_conversationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterGet_conversation(s)
	}
}

func (s *Get_conversationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitGet_conversation(s)
	}
}

func (s *Get_conversationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitGet_conversation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Get_conversation() (localctx IGet_conversationContext) {
	localctx = NewGet_conversationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 924, TSqlParserRULE_get_conversation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10340)
		p.Match(TSqlParserGET)
	}
	{
		p.SetState(10341)
		p.Match(TSqlParserCONVERSATION)
	}
	{
		p.SetState(10342)
		p.Match(TSqlParserGROUP)
	}
	p.SetState(10343)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Get_conversationContext).conversation_group_id = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Get_conversationContext).conversation_group_id = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(10344)
		p.Match(TSqlParserFROM)
	}
	{
		p.SetState(10345)

		var _x = p.Queue_id()

		localctx.(*Get_conversationContext).queue = _x
	}
	p.SetState(10347)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1456, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10346)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IQueue_idContext is an interface to support dynamic dispatch.
type IQueue_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatabase_name returns the database_name rule contexts.
	GetDatabase_name() IIdContext

	// GetSchema_name returns the schema_name rule contexts.
	GetSchema_name() IIdContext

	// GetName returns the name rule contexts.
	GetName() IIdContext

	// SetDatabase_name sets the database_name rule contexts.
	SetDatabase_name(IIdContext)

	// SetSchema_name sets the schema_name rule contexts.
	SetSchema_name(IIdContext)

	// SetName sets the name rule contexts.
	SetName(IIdContext)

	// IsQueue_idContext differentiates from other interfaces.
	IsQueue_idContext()
}

type Queue_idContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	database_name IIdContext
	schema_name   IIdContext
	name          IIdContext
}

func NewEmptyQueue_idContext() *Queue_idContext {
	var p = new(Queue_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_queue_id
	return p
}

func (*Queue_idContext) IsQueue_idContext() {}

func NewQueue_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Queue_idContext {
	var p = new(Queue_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_queue_id

	return p
}

func (s *Queue_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Queue_idContext) GetDatabase_name() IIdContext { return s.database_name }

func (s *Queue_idContext) GetSchema_name() IIdContext { return s.schema_name }

func (s *Queue_idContext) GetName() IIdContext { return s.name }

func (s *Queue_idContext) SetDatabase_name(v IIdContext) { s.database_name = v }

func (s *Queue_idContext) SetSchema_name(v IIdContext) { s.schema_name = v }

func (s *Queue_idContext) SetName(v IIdContext) { s.name = v }

func (s *Queue_idContext) AllId() []IIdContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdContext)(nil)).Elem())
	var tst = make([]IIdContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdContext)
		}
	}

	return tst
}

func (s *Queue_idContext) Id(i int) IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Queue_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Queue_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Queue_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterQueue_id(s)
	}
}

func (s *Queue_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitQueue_id(s)
	}
}

func (s *Queue_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitQueue_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Queue_id() (localctx IQueue_idContext) {
	localctx = NewQueue_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 926, TSqlParserRULE_queue_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10356)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1457, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10349)

			var _x = p.Id()

			localctx.(*Queue_idContext).database_name = _x
		}
		{
			p.SetState(10350)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10351)

			var _x = p.Id()

			localctx.(*Queue_idContext).schema_name = _x
		}
		{
			p.SetState(10352)
			p.Match(TSqlParserDOT)
		}
		{
			p.SetState(10353)

			var _x = p.Id()

			localctx.(*Queue_idContext).name = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10355)
			p.Id()
		}

	}

	return localctx
}

// ISend_conversationContext is an interface to support dynamic dispatch.
type ISend_conversationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetConversation_handle returns the conversation_handle token.
	GetConversation_handle() antlr.Token

	// GetMessage_body_expression returns the message_body_expression token.
	GetMessage_body_expression() antlr.Token

	// SetConversation_handle sets the conversation_handle token.
	SetConversation_handle(antlr.Token)

	// SetMessage_body_expression sets the message_body_expression token.
	SetMessage_body_expression(antlr.Token)

	// GetMessage_type_name returns the message_type_name rule contexts.
	GetMessage_type_name() IExpressionContext

	// SetMessage_type_name sets the message_type_name rule contexts.
	SetMessage_type_name(IExpressionContext)

	// IsSend_conversationContext differentiates from other interfaces.
	IsSend_conversationContext()
}

type Send_conversationContext struct {
	*antlr.BaseParserRuleContext
	parser                  antlr.Parser
	conversation_handle     antlr.Token
	message_type_name       IExpressionContext
	message_body_expression antlr.Token
}

func NewEmptySend_conversationContext() *Send_conversationContext {
	var p = new(Send_conversationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_send_conversation
	return p
}

func (*Send_conversationContext) IsSend_conversationContext() {}

func NewSend_conversationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Send_conversationContext {
	var p = new(Send_conversationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_send_conversation

	return p
}

func (s *Send_conversationContext) GetParser() antlr.Parser { return s.parser }

func (s *Send_conversationContext) GetConversation_handle() antlr.Token { return s.conversation_handle }

func (s *Send_conversationContext) GetMessage_body_expression() antlr.Token {
	return s.message_body_expression
}

func (s *Send_conversationContext) SetConversation_handle(v antlr.Token) { s.conversation_handle = v }

func (s *Send_conversationContext) SetMessage_body_expression(v antlr.Token) {
	s.message_body_expression = v
}

func (s *Send_conversationContext) GetMessage_type_name() IExpressionContext {
	return s.message_type_name
}

func (s *Send_conversationContext) SetMessage_type_name(v IExpressionContext) { s.message_type_name = v }

func (s *Send_conversationContext) SEND() antlr.TerminalNode {
	return s.GetToken(TSqlParserSEND, 0)
}

func (s *Send_conversationContext) ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserON, 0)
}

func (s *Send_conversationContext) CONVERSATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONVERSATION, 0)
}

func (s *Send_conversationContext) MESSAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserMESSAGE, 0)
}

func (s *Send_conversationContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Send_conversationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Send_conversationContext) AllSTRING() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserSTRING)
}

func (s *Send_conversationContext) STRING(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, i)
}

func (s *Send_conversationContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserLOCAL_ID)
}

func (s *Send_conversationContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL_ID, i)
}

func (s *Send_conversationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Send_conversationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Send_conversationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSend_conversation(s)
	}
}

func (s *Send_conversationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSend_conversation(s)
	}
}

func (s *Send_conversationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSend_conversation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Send_conversation() (localctx ISend_conversationContext) {
	localctx = NewSend_conversationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 928, TSqlParserRULE_send_conversation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10358)
		p.Match(TSqlParserSEND)
	}
	{
		p.SetState(10359)
		p.Match(TSqlParserON)
	}
	{
		p.SetState(10360)
		p.Match(TSqlParserCONVERSATION)
	}
	p.SetState(10361)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Send_conversationContext).conversation_handle = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Send_conversationContext).conversation_handle = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(10362)
		p.Match(TSqlParserMESSAGE)
	}
	{
		p.SetState(10363)
		p.Match(TSqlParserTYPE)
	}
	{
		p.SetState(10364)

		var _x = p.expression(0)

		localctx.(*Send_conversationContext).message_type_name = _x
	}
	p.SetState(10368)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1458, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10365)
			p.Match(TSqlParserLR_BRACKET)
		}
		p.SetState(10366)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Send_conversationContext).message_body_expression = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserLOCAL_ID || _la == TSqlParserSTRING) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Send_conversationContext).message_body_expression = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(10367)
			p.Match(TSqlParserRR_BRACKET)
		}

	}
	p.SetState(10371)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1459, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(10370)
			p.Match(TSqlParserSEMI)
		}

	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) Id() IIdContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdContext)
}

func (s *Data_typeContext) IDENTITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserIDENTITY, 0)
}

func (s *Data_typeContext) AllDECIMAL() []antlr.TerminalNode {
	return s.GetTokens(TSqlParserDECIMAL)
}

func (s *Data_typeContext) DECIMAL(i int) antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, i)
}

func (s *Data_typeContext) MAX() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX, 0)
}

func (s *Data_typeContext) INT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINT, 0)
}

func (s *Data_typeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserTINYINT, 0)
}

func (s *Data_typeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSMALLINT, 0)
}

func (s *Data_typeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(TSqlParserBIGINT, 0)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterData_type(s)
	}
}

func (s *Data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitData_type(s)
	}
}

func (s *Data_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitData_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 930, TSqlParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10390)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserDOUBLE_QUOTE_ID, TSqlParserSQUARE_BRACKET_ID, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10373)
			p.Id()
		}
		p.SetState(10375)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1460, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10374)
				p.Match(TSqlParserIDENTITY)
			}

		}
		p.SetState(10384)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1462, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(10377)
				p.Match(TSqlParserLR_BRACKET)
			}
			p.SetState(10378)
			_la = p.GetTokenStream().LA(1)

			if !(_la == TSqlParserMAX || _la == TSqlParserDECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(10381)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == TSqlParserCOMMA {
				{
					p.SetState(10379)
					p.Match(TSqlParserCOMMA)
				}
				{
					p.SetState(10380)
					p.Match(TSqlParserDECIMAL)
				}

			}
			{
				p.SetState(10383)
				p.Match(TSqlParserRR_BRACKET)
			}

		}

	case TSqlParserINT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10386)
			p.Match(TSqlParserINT)
		}

	case TSqlParserTINYINT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10387)
			p.Match(TSqlParserTINYINT)
		}

	case TSqlParserSMALLINT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10388)
			p.Match(TSqlParserSMALLINT)
		}

	case TSqlParserBIGINT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10389)
			p.Match(TSqlParserBIGINT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_default_value
	return p
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserNULL, 0)
}

func (s *Default_valueContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(TSqlParserDEFAULT, 0)
}

func (s *Default_valueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (s *Default_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitDefault_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 932, TSqlParserRULE_default_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10395)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10392)
			p.Match(TSqlParserNULL)
		}

	case TSqlParserDEFAULT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10393)
			p.Match(TSqlParserDEFAULT)
		}

	case TSqlParserDECIMAL, TSqlParserSTRING, TSqlParserBINARY, TSqlParserFLOAT, TSqlParserREAL, TSqlParserDOLLAR, TSqlParserPLUS, TSqlParserMINUS:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10394)
			p.Constant()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDollar returns the dollar token.
	GetDollar() antlr.Token

	// SetDollar sets the dollar token.
	SetDollar(antlr.Token)

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	dollar antlr.Token
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) GetDollar() antlr.Token { return s.dollar }

func (s *ConstantContext) SetDollar(v antlr.Token) { s.dollar = v }

func (s *ConstantContext) STRING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTRING, 0)
}

func (s *ConstantContext) BINARY() antlr.TerminalNode {
	return s.GetToken(TSqlParserBINARY, 0)
}

func (s *ConstantContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *ConstantContext) Sign() ISignContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignContext)
}

func (s *ConstantContext) REAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAL, 0)
}

func (s *ConstantContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(TSqlParserFLOAT, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (s *ConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 934, TSqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10412)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1468, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10397)
			p.Match(TSqlParserSTRING)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10398)
			p.Match(TSqlParserBINARY)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(10400)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPLUS || _la == TSqlParserMINUS {
			{
				p.SetState(10399)
				p.Sign()
			}

		}
		{
			p.SetState(10402)
			p.Match(TSqlParserDECIMAL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(10404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPLUS || _la == TSqlParserMINUS {
			{
				p.SetState(10403)
				p.Sign()
			}

		}
		p.SetState(10406)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserFLOAT || _la == TSqlParserREAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		p.SetState(10408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == TSqlParserPLUS || _la == TSqlParserMINUS {
			{
				p.SetState(10407)
				p.Sign()
			}

		}
		{
			p.SetState(10410)

			var _m = p.Match(TSqlParserDOLLAR)

			localctx.(*ConstantContext).dollar = _m
		}
		p.SetState(10411)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserDECIMAL || _la == TSqlParserFLOAT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ISignContext is an interface to support dynamic dispatch.
type ISignContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignContext differentiates from other interfaces.
	IsSignContext()
}

type SignContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignContext() *SignContext {
	var p = new(SignContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_sign
	return p
}

func (*SignContext) IsSignContext() {}

func NewSignContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignContext {
	var p = new(SignContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_sign

	return p
}

func (s *SignContext) GetParser() antlr.Parser { return s.parser }
func (s *SignContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSign(s)
	}
}

func (s *SignContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSign(s)
	}
}

func (s *SignContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSign(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Sign() (localctx ISignContext) {
	localctx = NewSignContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 936, TSqlParserRULE_sign)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10414)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserPLUS || _la == TSqlParserMINUS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IIdContext is an interface to support dynamic dispatch.
type IIdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdContext differentiates from other interfaces.
	IsIdContext()
}

type IdContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdContext() *IdContext {
	var p = new(IdContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_id
	return p
}

func (*IdContext) IsIdContext() {}

func NewIdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdContext {
	var p = new(IdContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_id

	return p
}

func (s *IdContext) GetParser() antlr.Parser { return s.parser }

func (s *IdContext) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *IdContext) DOUBLE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserDOUBLE_QUOTE_ID, 0)
}

func (s *IdContext) SQUARE_BRACKET_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserSQUARE_BRACKET_ID, 0)
}

func (s *IdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterId(s)
	}
}

func (s *IdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitId(s)
	}
}

func (s *IdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitId(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Id() (localctx IIdContext) {
	localctx = NewIdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 938, TSqlParserRULE_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10419)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case TSqlParserCALLED, TSqlParserDATA_COMPRESSION, TSqlParserEVENTDATA, TSqlParserFILENAME, TSqlParserFILLFACTOR, TSqlParserFORCESEEK, TSqlParserKEY, TSqlParserMASTER, TSqlParserMAX_MEMORY, TSqlParserOFFSETS, TSqlParserPAGE, TSqlParserPUBLIC, TSqlParserRAW, TSqlParserRETURN, TSqlParserRETURNS, TSqlParserROWCOUNT, TSqlParserSAFETY, TSqlParserSERVER, TSqlParserSID, TSqlParserSOURCE, TSqlParserSTATE, TSqlParserTARGET, TSqlParserABSOLUTE, TSqlParserACTIVE, TSqlParserADDRESS, TSqlParserAPPLY, TSqlParserAUTO, TSqlParserAVAILABILITY, TSqlParserAVG, TSqlParserCALLER, TSqlParserCAST, TSqlParserCATCH, TSqlParserCHECKSUM_AGG, TSqlParserCOMMITTED, TSqlParserCONCAT, TSqlParserCONCAT_NULL_YIELDS_NULL, TSqlParserCONTROL, TSqlParserCOOKIE, TSqlParserCOUNT, TSqlParserCOUNTER, TSqlParserCOUNT_BIG, TSqlParserDELAY, TSqlParserDELETED, TSqlParserDENSE_RANK, TSqlParserDISABLE, TSqlParserDYNAMIC, TSqlParserENCRYPTION, TSqlParserEXPAND, TSqlParserFAST, TSqlParserFAST_FORWARD, TSqlParserFIRST, TSqlParserFOLLOWING, TSqlParserFORCE, TSqlParserFORCED, TSqlParserFORWARD_ONLY, TSqlParserFULLSCAN, TSqlParserGLOBAL, TSqlParserGROUPING, TSqlParserGROUPING_ID, TSqlParserHASH, TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, TSqlParserIMPERSONATE, TSqlParserINPUT, TSqlParserINSENSITIVE, TSqlParserINSERTED, TSqlParserISOLATION, TSqlParserKEEP, TSqlParserKEEPFIXED, TSqlParserKEYSET, TSqlParserLAST, TSqlParserLEVEL, TSqlParserLOCAL, TSqlParserLOCATION, TSqlParserLOCK_ESCALATION, TSqlParserLOGIN, TSqlParserLOOP, TSqlParserMARK, TSqlParserMAX, TSqlParserMAX_ROLLOVER_FILES, TSqlParserMAXDOP, TSqlParserMAXRECURSION, TSqlParserMIN, TSqlParserMODIFY, TSqlParserNAME, TSqlParserNEXT, TSqlParserNOCOUNT, TSqlParserNOEXPAND, TSqlParserNORECOMPUTE, TSqlParserNTILE, TSqlParserNUMBER, TSqlParserOFFSET, TSqlParserONLINE, TSqlParserONLY, TSqlParserOPTIMISTIC, TSqlParserOPTIMIZE, TSqlParserOUT, TSqlParserOUTPUT, TSqlParserOWNER, TSqlParserPARAMETERIZATION, TSqlParserPARTITION, TSqlParserPATH, TSqlParserPRECEDING, TSqlParserPRIOR, TSqlParserPRIVILEGES, TSqlParserRANGE, TSqlParserRANK, TSqlParserREADONLY, TSqlParserREAD_ONLY, TSqlParserRECOMPILE, TSqlParserRELATIVE, TSqlParserREMOTE, TSqlParserREPEATABLE, TSqlParserROBUST, TSqlParserROOT, TSqlParserROW, TSqlParserROWGUID, TSqlParserROWS, TSqlParserROW_NUMBER, TSqlParserSAMPLE, TSqlParserSCHEMABINDING, TSqlParserSCROLL, TSqlParserSCROLL_LOCKS, TSqlParserSELF, TSqlParserSERIALIZABLE, TSqlParserSIMPLE, TSqlParserSIZE, TSqlParserSNAPSHOT, TSqlParserSPATIAL_WINDOW_MAX_CELLS, TSqlParserSTATIC, TSqlParserSTATS_STREAM, TSqlParserSTDEV, TSqlParserSTDEVP, TSqlParserSUM, TSqlParserTEXTIMAGE_ON, TSqlParserTHROW, TSqlParserTIES, TSqlParserTIME, TSqlParserTRY, TSqlParserTYPE, TSqlParserTYPE_WARNING, TSqlParserUNBOUNDED, TSqlParserUNCOMMITTED, TSqlParserUNKNOWN, TSqlParserUSING, TSqlParserVALUE, TSqlParserVAR, TSqlParserVARP, TSqlParserVIEWS, TSqlParserVIEW_METADATA, TSqlParserWORK, TSqlParserXML, TSqlParserXMLNAMESPACES, TSqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10416)
			p.Simple_id()
		}

	case TSqlParserDOUBLE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10417)
			p.Match(TSqlParserDOUBLE_QUOTE_ID)
		}

	case TSqlParserSQUARE_BRACKET_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10418)
			p.Match(TSqlParserSQUARE_BRACKET_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimple_idContext is an interface to support dynamic dispatch.
type ISimple_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_idContext differentiates from other interfaces.
	IsSimple_idContext()
}

type Simple_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_idContext() *Simple_idContext {
	var p = new(Simple_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_simple_id
	return p
}

func (*Simple_idContext) IsSimple_idContext() {}

func NewSimple_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_idContext {
	var p = new(Simple_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_simple_id

	return p
}

func (s *Simple_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_idContext) ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserID, 0)
}

func (s *Simple_idContext) ABSOLUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserABSOLUTE, 0)
}

func (s *Simple_idContext) ACTIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserACTIVE, 0)
}

func (s *Simple_idContext) ADDRESS() antlr.TerminalNode {
	return s.GetToken(TSqlParserADDRESS, 0)
}

func (s *Simple_idContext) APPLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAPPLY, 0)
}

func (s *Simple_idContext) AUTO() antlr.TerminalNode {
	return s.GetToken(TSqlParserAUTO, 0)
}

func (s *Simple_idContext) AVAILABILITY() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVAILABILITY, 0)
}

func (s *Simple_idContext) AVG() antlr.TerminalNode {
	return s.GetToken(TSqlParserAVG, 0)
}

func (s *Simple_idContext) CALLED() antlr.TerminalNode {
	return s.GetToken(TSqlParserCALLED, 0)
}

func (s *Simple_idContext) CALLER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCALLER, 0)
}

func (s *Simple_idContext) CAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserCAST, 0)
}

func (s *Simple_idContext) CATCH() antlr.TerminalNode {
	return s.GetToken(TSqlParserCATCH, 0)
}

func (s *Simple_idContext) CHECKSUM_AGG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCHECKSUM_AGG, 0)
}

func (s *Simple_idContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOMMITTED, 0)
}

func (s *Simple_idContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONCAT, 0)
}

func (s *Simple_idContext) CONCAT_NULL_YIELDS_NULL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONCAT_NULL_YIELDS_NULL, 0)
}

func (s *Simple_idContext) CONTROL() antlr.TerminalNode {
	return s.GetToken(TSqlParserCONTROL, 0)
}

func (s *Simple_idContext) COOKIE() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOOKIE, 0)
}

func (s *Simple_idContext) COUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNT, 0)
}

func (s *Simple_idContext) COUNTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNTER, 0)
}

func (s *Simple_idContext) COUNT_BIG() antlr.TerminalNode {
	return s.GetToken(TSqlParserCOUNT_BIG, 0)
}

func (s *Simple_idContext) DATA_COMPRESSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserDATA_COMPRESSION, 0)
}

func (s *Simple_idContext) DELAY() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELAY, 0)
}

func (s *Simple_idContext) DELETED() antlr.TerminalNode {
	return s.GetToken(TSqlParserDELETED, 0)
}

func (s *Simple_idContext) DENSE_RANK() antlr.TerminalNode {
	return s.GetToken(TSqlParserDENSE_RANK, 0)
}

func (s *Simple_idContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserDISABLE, 0)
}

func (s *Simple_idContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserDYNAMIC, 0)
}

func (s *Simple_idContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(TSqlParserENCRYPTION, 0)
}

func (s *Simple_idContext) EVENTDATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserEVENTDATA, 0)
}

func (s *Simple_idContext) EXPAND() antlr.TerminalNode {
	return s.GetToken(TSqlParserEXPAND, 0)
}

func (s *Simple_idContext) FAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAST, 0)
}

func (s *Simple_idContext) FAST_FORWARD() antlr.TerminalNode {
	return s.GetToken(TSqlParserFAST_FORWARD, 0)
}

func (s *Simple_idContext) FILENAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILENAME, 0)
}

func (s *Simple_idContext) FILLFACTOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserFILLFACTOR, 0)
}

func (s *Simple_idContext) FIRST() antlr.TerminalNode {
	return s.GetToken(TSqlParserFIRST, 0)
}

func (s *Simple_idContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(TSqlParserFOLLOWING, 0)
}

func (s *Simple_idContext) FORCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCE, 0)
}

func (s *Simple_idContext) FORCESEEK() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCESEEK, 0)
}

func (s *Simple_idContext) FORWARD_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORWARD_ONLY, 0)
}

func (s *Simple_idContext) FULLSCAN() antlr.TerminalNode {
	return s.GetToken(TSqlParserFULLSCAN, 0)
}

func (s *Simple_idContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserGLOBAL, 0)
}

func (s *Simple_idContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUPING, 0)
}

func (s *Simple_idContext) GROUPING_ID() antlr.TerminalNode {
	return s.GetToken(TSqlParserGROUPING_ID, 0)
}

func (s *Simple_idContext) HASH() antlr.TerminalNode {
	return s.GetToken(TSqlParserHASH, 0)
}

func (s *Simple_idContext) IMPERSONATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserIMPERSONATE, 0)
}

func (s *Simple_idContext) INSENSITIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSENSITIVE, 0)
}

func (s *Simple_idContext) INSERTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserINSERTED, 0)
}

func (s *Simple_idContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserISOLATION, 0)
}

func (s *Simple_idContext) KEEP() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEEP, 0)
}

func (s *Simple_idContext) KEEPFIXED() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEEPFIXED, 0)
}

func (s *Simple_idContext) KEY() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEY, 0)
}

func (s *Simple_idContext) FORCED() antlr.TerminalNode {
	return s.GetToken(TSqlParserFORCED, 0)
}

func (s *Simple_idContext) KEYSET() antlr.TerminalNode {
	return s.GetToken(TSqlParserKEYSET, 0)
}

func (s *Simple_idContext) IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() antlr.TerminalNode {
	return s.GetToken(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)
}

func (s *Simple_idContext) INPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserINPUT, 0)
}

func (s *Simple_idContext) LAST() antlr.TerminalNode {
	return s.GetToken(TSqlParserLAST, 0)
}

func (s *Simple_idContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLEVEL, 0)
}

func (s *Simple_idContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCAL, 0)
}

func (s *Simple_idContext) LOCATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCATION, 0)
}

func (s *Simple_idContext) LOCK_ESCALATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOCK_ESCALATION, 0)
}

func (s *Simple_idContext) LOGIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOGIN, 0)
}

func (s *Simple_idContext) LOOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserLOOP, 0)
}

func (s *Simple_idContext) MASTER() antlr.TerminalNode {
	return s.GetToken(TSqlParserMASTER, 0)
}

func (s *Simple_idContext) MARK() antlr.TerminalNode {
	return s.GetToken(TSqlParserMARK, 0)
}

func (s *Simple_idContext) MAX() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX, 0)
}

func (s *Simple_idContext) MAXDOP() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXDOP, 0)
}

func (s *Simple_idContext) MAXRECURSION() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAXRECURSION, 0)
}

func (s *Simple_idContext) MAX_ROLLOVER_FILES() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_ROLLOVER_FILES, 0)
}

func (s *Simple_idContext) MAX_MEMORY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMAX_MEMORY, 0)
}

func (s *Simple_idContext) MIN() antlr.TerminalNode {
	return s.GetToken(TSqlParserMIN, 0)
}

func (s *Simple_idContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(TSqlParserMODIFY, 0)
}

func (s *Simple_idContext) NAME() antlr.TerminalNode {
	return s.GetToken(TSqlParserNAME, 0)
}

func (s *Simple_idContext) NEXT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNEXT, 0)
}

func (s *Simple_idContext) NOCOUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOCOUNT, 0)
}

func (s *Simple_idContext) NOEXPAND() antlr.TerminalNode {
	return s.GetToken(TSqlParserNOEXPAND, 0)
}

func (s *Simple_idContext) NORECOMPUTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNORECOMPUTE, 0)
}

func (s *Simple_idContext) NTILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserNTILE, 0)
}

func (s *Simple_idContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserNUMBER, 0)
}

func (s *Simple_idContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFFSET, 0)
}

func (s *Simple_idContext) OFFSETS() antlr.TerminalNode {
	return s.GetToken(TSqlParserOFFSETS, 0)
}

func (s *Simple_idContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLINE, 0)
}

func (s *Simple_idContext) ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserONLY, 0)
}

func (s *Simple_idContext) OPTIMISTIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTIMISTIC, 0)
}

func (s *Simple_idContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserOPTIMIZE, 0)
}

func (s *Simple_idContext) OUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUT, 0)
}

func (s *Simple_idContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(TSqlParserOUTPUT, 0)
}

func (s *Simple_idContext) OWNER() antlr.TerminalNode {
	return s.GetToken(TSqlParserOWNER, 0)
}

func (s *Simple_idContext) PAGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserPAGE, 0)
}

func (s *Simple_idContext) PARAMETERIZATION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARAMETERIZATION, 0)
}

func (s *Simple_idContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(TSqlParserPARTITION, 0)
}

func (s *Simple_idContext) PATH() antlr.TerminalNode {
	return s.GetToken(TSqlParserPATH, 0)
}

func (s *Simple_idContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRECEDING, 0)
}

func (s *Simple_idContext) PRIOR() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIOR, 0)
}

func (s *Simple_idContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(TSqlParserPRIVILEGES, 0)
}

func (s *Simple_idContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserPUBLIC, 0)
}

func (s *Simple_idContext) RANGE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRANGE, 0)
}

func (s *Simple_idContext) RANK() antlr.TerminalNode {
	return s.GetToken(TSqlParserRANK, 0)
}

func (s *Simple_idContext) RAW() antlr.TerminalNode {
	return s.GetToken(TSqlParserRAW, 0)
}

func (s *Simple_idContext) READONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREADONLY, 0)
}

func (s *Simple_idContext) READ_ONLY() antlr.TerminalNode {
	return s.GetToken(TSqlParserREAD_ONLY, 0)
}

func (s *Simple_idContext) RECOMPILE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRECOMPILE, 0)
}

func (s *Simple_idContext) RELATIVE() antlr.TerminalNode {
	return s.GetToken(TSqlParserRELATIVE, 0)
}

func (s *Simple_idContext) REMOTE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREMOTE, 0)
}

func (s *Simple_idContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserREPEATABLE, 0)
}

func (s *Simple_idContext) RETURN() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURN, 0)
}

func (s *Simple_idContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(TSqlParserRETURNS, 0)
}

func (s *Simple_idContext) ROBUST() antlr.TerminalNode {
	return s.GetToken(TSqlParserROBUST, 0)
}

func (s *Simple_idContext) ROOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserROOT, 0)
}

func (s *Simple_idContext) ROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW, 0)
}

func (s *Simple_idContext) ROWCOUNT() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWCOUNT, 0)
}

func (s *Simple_idContext) ROWGUID() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWGUID, 0)
}

func (s *Simple_idContext) ROWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserROWS, 0)
}

func (s *Simple_idContext) ROW_NUMBER() antlr.TerminalNode {
	return s.GetToken(TSqlParserROW_NUMBER, 0)
}

func (s *Simple_idContext) SAFETY() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAFETY, 0)
}

func (s *Simple_idContext) SAMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSAMPLE, 0)
}

func (s *Simple_idContext) SID() antlr.TerminalNode {
	return s.GetToken(TSqlParserSID, 0)
}

func (s *Simple_idContext) SIZE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIZE, 0)
}

func (s *Simple_idContext) SCHEMABINDING() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCHEMABINDING, 0)
}

func (s *Simple_idContext) SCROLL() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCROLL, 0)
}

func (s *Simple_idContext) SCROLL_LOCKS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSCROLL_LOCKS, 0)
}

func (s *Simple_idContext) SELF() antlr.TerminalNode {
	return s.GetToken(TSqlParserSELF, 0)
}

func (s *Simple_idContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERIALIZABLE, 0)
}

func (s *Simple_idContext) SERVER() antlr.TerminalNode {
	return s.GetToken(TSqlParserSERVER, 0)
}

func (s *Simple_idContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSIMPLE, 0)
}

func (s *Simple_idContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(TSqlParserSNAPSHOT, 0)
}

func (s *Simple_idContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSOURCE, 0)
}

func (s *Simple_idContext) SPATIAL_WINDOW_MAX_CELLS() antlr.TerminalNode {
	return s.GetToken(TSqlParserSPATIAL_WINDOW_MAX_CELLS, 0)
}

func (s *Simple_idContext) STATE() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATE, 0)
}

func (s *Simple_idContext) STATIC() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATIC, 0)
}

func (s *Simple_idContext) STATS_STREAM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTATS_STREAM, 0)
}

func (s *Simple_idContext) STDEV() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTDEV, 0)
}

func (s *Simple_idContext) STDEVP() antlr.TerminalNode {
	return s.GetToken(TSqlParserSTDEVP, 0)
}

func (s *Simple_idContext) SUM() antlr.TerminalNode {
	return s.GetToken(TSqlParserSUM, 0)
}

func (s *Simple_idContext) TARGET() antlr.TerminalNode {
	return s.GetToken(TSqlParserTARGET, 0)
}

func (s *Simple_idContext) TEXTIMAGE_ON() antlr.TerminalNode {
	return s.GetToken(TSqlParserTEXTIMAGE_ON, 0)
}

func (s *Simple_idContext) THROW() antlr.TerminalNode {
	return s.GetToken(TSqlParserTHROW, 0)
}

func (s *Simple_idContext) TIES() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIES, 0)
}

func (s *Simple_idContext) TIME() antlr.TerminalNode {
	return s.GetToken(TSqlParserTIME, 0)
}

func (s *Simple_idContext) TRY() antlr.TerminalNode {
	return s.GetToken(TSqlParserTRY, 0)
}

func (s *Simple_idContext) TYPE() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE, 0)
}

func (s *Simple_idContext) TYPE_WARNING() antlr.TerminalNode {
	return s.GetToken(TSqlParserTYPE_WARNING, 0)
}

func (s *Simple_idContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNBOUNDED, 0)
}

func (s *Simple_idContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNCOMMITTED, 0)
}

func (s *Simple_idContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(TSqlParserUNKNOWN, 0)
}

func (s *Simple_idContext) USING() antlr.TerminalNode {
	return s.GetToken(TSqlParserUSING, 0)
}

func (s *Simple_idContext) VAR() antlr.TerminalNode {
	return s.GetToken(TSqlParserVAR, 0)
}

func (s *Simple_idContext) VARP() antlr.TerminalNode {
	return s.GetToken(TSqlParserVARP, 0)
}

func (s *Simple_idContext) VALUE() antlr.TerminalNode {
	return s.GetToken(TSqlParserVALUE, 0)
}

func (s *Simple_idContext) VIEW_METADATA() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEW_METADATA, 0)
}

func (s *Simple_idContext) VIEWS() antlr.TerminalNode {
	return s.GetToken(TSqlParserVIEWS, 0)
}

func (s *Simple_idContext) WORK() antlr.TerminalNode {
	return s.GetToken(TSqlParserWORK, 0)
}

func (s *Simple_idContext) XML() antlr.TerminalNode {
	return s.GetToken(TSqlParserXML, 0)
}

func (s *Simple_idContext) XMLNAMESPACES() antlr.TerminalNode {
	return s.GetToken(TSqlParserXMLNAMESPACES, 0)
}

func (s *Simple_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterSimple_id(s)
	}
}

func (s *Simple_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitSimple_id(s)
	}
}

func (s *Simple_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitSimple_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Simple_id() (localctx ISimple_idContext) {
	localctx = NewSimple_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 940, TSqlParserRULE_simple_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10421)
	_la = p.GetTokenStream().LA(1)

	if !(_la == TSqlParserCALLED || _la == TSqlParserDATA_COMPRESSION || (((_la-112)&-(0x1f+1)) == 0 && ((1<<uint((_la-112)))&((1<<(TSqlParserEVENTDATA-112))|(1<<(TSqlParserFILENAME-112))|(1<<(TSqlParserFILLFACTOR-112))|(1<<(TSqlParserFORCESEEK-112)))) != 0) || (((_la-169)&-(0x1f+1)) == 0 && ((1<<uint((_la-169)))&((1<<(TSqlParserKEY-169))|(1<<(TSqlParserMASTER-169))|(1<<(TSqlParserMAX_MEMORY-169)))) != 0) || _la == TSqlParserOFFSETS || _la == TSqlParserPAGE || (((_la-258)&-(0x1f+1)) == 0 && ((1<<uint((_la-258)))&((1<<(TSqlParserPUBLIC-258))|(1<<(TSqlParserRAW-258))|(1<<(TSqlParserRETURN-258))|(1<<(TSqlParserRETURNS-258))|(1<<(TSqlParserROWCOUNT-258)))) != 0) || (((_la-294)&-(0x1f+1)) == 0 && ((1<<uint((_la-294)))&((1<<(TSqlParserSAFETY-294))|(1<<(TSqlParserSERVER-294))|(1<<(TSqlParserSID-294))|(1<<(TSqlParserSOURCE-294)))) != 0) || _la == TSqlParserSTATE || _la == TSqlParserTARGET || (((_la-382)&-(0x1f+1)) == 0 && ((1<<uint((_la-382)))&((1<<(TSqlParserABSOLUTE-382))|(1<<(TSqlParserACTIVE-382))|(1<<(TSqlParserADDRESS-382))|(1<<(TSqlParserAPPLY-382))|(1<<(TSqlParserAUTO-382)))) != 0) || (((_la-415)&-(0x1f+1)) == 0 && ((1<<uint((_la-415)))&((1<<(TSqlParserAVAILABILITY-415))|(1<<(TSqlParserAVG-415))|(1<<(TSqlParserCALLER-415))|(1<<(TSqlParserCAST-415))|(1<<(TSqlParserCATCH-415))|(1<<(TSqlParserCHECKSUM_AGG-415))|(1<<(TSqlParserCOMMITTED-415))|(1<<(TSqlParserCONCAT-415))|(1<<(TSqlParserCONCAT_NULL_YIELDS_NULL-415))|(1<<(TSqlParserCONTROL-415))|(1<<(TSqlParserCOOKIE-415))|(1<<(TSqlParserCOUNT-415)))) != 0) || (((_la-447)&-(0x1f+1)) == 0 && ((1<<uint((_la-447)))&((1<<(TSqlParserCOUNTER-447))|(1<<(TSqlParserCOUNT_BIG-447))|(1<<(TSqlParserDELAY-447))|(1<<(TSqlParserDELETED-447))|(1<<(TSqlParserDENSE_RANK-447)))) != 0) || (((_la-479)&-(0x1f+1)) == 0 && ((1<<uint((_la-479)))&((1<<(TSqlParserDISABLE-479))|(1<<(TSqlParserDYNAMIC-479))|(1<<(TSqlParserENCRYPTION-479))|(1<<(TSqlParserEXPAND-479))|(1<<(TSqlParserFAST-479))|(1<<(TSqlParserFAST_FORWARD-479))|(1<<(TSqlParserFIRST-479)))) != 0) || (((_la-511)&-(0x1f+1)) == 0 && ((1<<uint((_la-511)))&((1<<(TSqlParserFOLLOWING-511))|(1<<(TSqlParserFORCE-511))|(1<<(TSqlParserFORCED-511))|(1<<(TSqlParserFORWARD_ONLY-511))|(1<<(TSqlParserFULLSCAN-511))|(1<<(TSqlParserGLOBAL-511))|(1<<(TSqlParserGROUPING-511))|(1<<(TSqlParserGROUPING_ID-511))|(1<<(TSqlParserHASH-511))|(1<<(TSqlParserIGNORE_NONCLUSTERED_COLUMNSTORE_INDEX-511))|(1<<(TSqlParserIMPERSONATE-511))|(1<<(TSqlParserINPUT-511))|(1<<(TSqlParserINSENSITIVE-511))|(1<<(TSqlParserINSERTED-511)))) != 0) || (((_la-545)&-(0x1f+1)) == 0 && ((1<<uint((_la-545)))&((1<<(TSqlParserISOLATION-545))|(1<<(TSqlParserKEEP-545))|(1<<(TSqlParserKEEPFIXED-545))|(1<<(TSqlParserKEYSET-545))|(1<<(TSqlParserLAST-545))|(1<<(TSqlParserLEVEL-545))|(1<<(TSqlParserLOCAL-545))|(1<<(TSqlParserLOCATION-545))|(1<<(TSqlParserLOCK_ESCALATION-545))|(1<<(TSqlParserLOGIN-545))|(1<<(TSqlParserLOOP-545))|(1<<(TSqlParserMARK-545))|(1<<(TSqlParserMAX-545)))) != 0) || (((_la-579)&-(0x1f+1)) == 0 && ((1<<uint((_la-579)))&((1<<(TSqlParserMAX_ROLLOVER_FILES-579))|(1<<(TSqlParserMAXDOP-579))|(1<<(TSqlParserMAXRECURSION-579))|(1<<(TSqlParserMIN-579))|(1<<(TSqlParserMODIFY-579))|(1<<(TSqlParserNAME-579))|(1<<(TSqlParserNEXT-579))|(1<<(TSqlParserNOCOUNT-579))|(1<<(TSqlParserNOEXPAND-579))|(1<<(TSqlParserNORECOMPUTE-579)))) != 0) || (((_la-611)&-(0x1f+1)) == 0 && ((1<<uint((_la-611)))&((1<<(TSqlParserNTILE-611))|(1<<(TSqlParserNUMBER-611))|(1<<(TSqlParserOFFSET-611))|(1<<(TSqlParserONLINE-611))|(1<<(TSqlParserONLY-611))|(1<<(TSqlParserOPTIMISTIC-611))|(1<<(TSqlParserOPTIMIZE-611))|(1<<(TSqlParserOUT-611))|(1<<(TSqlParserOUTPUT-611))|(1<<(TSqlParserOWNER-611))|(1<<(TSqlParserPARAMETERIZATION-611))|(1<<(TSqlParserPARTITION-611))|(1<<(TSqlParserPATH-611))|(1<<(TSqlParserPRECEDING-611))|(1<<(TSqlParserPRIOR-611)))) != 0) || (((_la-643)&-(0x1f+1)) == 0 && ((1<<uint((_la-643)))&((1<<(TSqlParserPRIVILEGES-643))|(1<<(TSqlParserRANGE-643))|(1<<(TSqlParserRANK-643))|(1<<(TSqlParserREADONLY-643))|(1<<(TSqlParserREAD_ONLY-643))|(1<<(TSqlParserRECOMPILE-643))|(1<<(TSqlParserRELATIVE-643))|(1<<(TSqlParserREMOTE-643))|(1<<(TSqlParserREPEATABLE-643)))) != 0) || (((_la-683)&-(0x1f+1)) == 0 && ((1<<uint((_la-683)))&((1<<(TSqlParserROBUST-683))|(1<<(TSqlParserROOT-683))|(1<<(TSqlParserROW-683))|(1<<(TSqlParserROWGUID-683))|(1<<(TSqlParserROWS-683))|(1<<(TSqlParserROW_NUMBER-683))|(1<<(TSqlParserSAMPLE-683))|(1<<(TSqlParserSCHEMABINDING-683))|(1<<(TSqlParserSCROLL-683))|(1<<(TSqlParserSCROLL_LOCKS-683))|(1<<(TSqlParserSELF-683))|(1<<(TSqlParserSERIALIZABLE-683))|(1<<(TSqlParserSIMPLE-683))|(1<<(TSqlParserSIZE-683)))) != 0) || (((_la-715)&-(0x1f+1)) == 0 && ((1<<uint((_la-715)))&((1<<(TSqlParserSNAPSHOT-715))|(1<<(TSqlParserSPATIAL_WINDOW_MAX_CELLS-715))|(1<<(TSqlParserSTATIC-715))|(1<<(TSqlParserSTATS_STREAM-715))|(1<<(TSqlParserSTDEV-715))|(1<<(TSqlParserSTDEVP-715))|(1<<(TSqlParserSUM-715))|(1<<(TSqlParserTEXTIMAGE_ON-715))|(1<<(TSqlParserTHROW-715))|(1<<(TSqlParserTIES-715))|(1<<(TSqlParserTIME-715)))) != 0) || (((_la-747)&-(0x1f+1)) == 0 && ((1<<uint((_la-747)))&((1<<(TSqlParserTRY-747))|(1<<(TSqlParserTYPE-747))|(1<<(TSqlParserTYPE_WARNING-747))|(1<<(TSqlParserUNBOUNDED-747))|(1<<(TSqlParserUNCOMMITTED-747))|(1<<(TSqlParserUNKNOWN-747))|(1<<(TSqlParserUSING-747))|(1<<(TSqlParserVALUE-747))|(1<<(TSqlParserVAR-747))|(1<<(TSqlParserVARP-747))|(1<<(TSqlParserVIEWS-747))|(1<<(TSqlParserVIEW_METADATA-747))|(1<<(TSqlParserWORK-747))|(1<<(TSqlParserXML-747))|(1<<(TSqlParserXMLNAMESPACES-747))|(1<<(TSqlParserID-747)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IComparison_operatorContext is an interface to support dynamic dispatch.
type IComparison_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_operatorContext differentiates from other interfaces.
	IsComparison_operatorContext()
}

type Comparison_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_operatorContext() *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_comparison_operator
	return p
}

func (*Comparison_operatorContext) IsComparison_operatorContext() {}

func NewComparison_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_comparison_operator

	return p
}

func (s *Comparison_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Comparison_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparison_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitComparison_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Comparison_operator() (localctx IComparison_operatorContext) {
	localctx = NewComparison_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 942, TSqlParserRULE_comparison_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(10438)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1470, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(10423)
			p.Match(TSqlParserEQUAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(10424)
			p.Match(TSqlParserGREATER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(10425)
			p.Match(TSqlParserLESS)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(10426)
			p.Match(TSqlParserLESS)
		}
		{
			p.SetState(10427)
			p.Match(TSqlParserEQUAL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(10428)
			p.Match(TSqlParserGREATER)
		}
		{
			p.SetState(10429)
			p.Match(TSqlParserEQUAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(10430)
			p.Match(TSqlParserLESS)
		}
		{
			p.SetState(10431)
			p.Match(TSqlParserGREATER)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(10432)
			p.Match(TSqlParserEXCLAMATION)
		}
		{
			p.SetState(10433)
			p.Match(TSqlParserEQUAL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(10434)
			p.Match(TSqlParserEXCLAMATION)
		}
		{
			p.SetState(10435)
			p.Match(TSqlParserGREATER)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(10436)
			p.Match(TSqlParserEXCLAMATION)
		}
		{
			p.SetState(10437)
			p.Match(TSqlParserLESS)
		}

	}

	return localctx
}

// IAssignment_operatorContext is an interface to support dynamic dispatch.
type IAssignment_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_operatorContext differentiates from other interfaces.
	IsAssignment_operatorContext()
}

type Assignment_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_operatorContext() *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_assignment_operator
	return p
}

func (*Assignment_operatorContext) IsAssignment_operatorContext() {}

func NewAssignment_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_operatorContext {
	var p = new(Assignment_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_assignment_operator

	return p
}

func (s *Assignment_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Assignment_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterAssignment_operator(s)
	}
}

func (s *Assignment_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitAssignment_operator(s)
	}
}

func (s *Assignment_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitAssignment_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) Assignment_operator() (localctx IAssignment_operatorContext) {
	localctx = NewAssignment_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 944, TSqlParserRULE_assignment_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(10440)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-789)&-(0x1f+1)) == 0 && ((1<<uint((_la-789)))&((1<<(TSqlParserPLUS_ASSIGN-789))|(1<<(TSqlParserMINUS_ASSIGN-789))|(1<<(TSqlParserMULT_ASSIGN-789))|(1<<(TSqlParserDIV_ASSIGN-789))|(1<<(TSqlParserMOD_ASSIGN-789))|(1<<(TSqlParserAND_ASSIGN-789))|(1<<(TSqlParserXOR_ASSIGN-789))|(1<<(TSqlParserOR_ASSIGN-789)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFile_sizeContext is an interface to support dynamic dispatch.
type IFile_sizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFile_sizeContext differentiates from other interfaces.
	IsFile_sizeContext()
}

type File_sizeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFile_sizeContext() *File_sizeContext {
	var p = new(File_sizeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = TSqlParserRULE_file_size
	return p
}

func (*File_sizeContext) IsFile_sizeContext() {}

func NewFile_sizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *File_sizeContext {
	var p = new(File_sizeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = TSqlParserRULE_file_size

	return p
}

func (s *File_sizeContext) GetParser() antlr.Parser { return s.parser }

func (s *File_sizeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(TSqlParserDECIMAL, 0)
}

func (s *File_sizeContext) KB() antlr.TerminalNode {
	return s.GetToken(TSqlParserKB, 0)
}

func (s *File_sizeContext) MB() antlr.TerminalNode {
	return s.GetToken(TSqlParserMB, 0)
}

func (s *File_sizeContext) GB() antlr.TerminalNode {
	return s.GetToken(TSqlParserGB, 0)
}

func (s *File_sizeContext) TB() antlr.TerminalNode {
	return s.GetToken(TSqlParserTB, 0)
}

func (s *File_sizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *File_sizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *File_sizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.EnterFile_size(s)
	}
}

func (s *File_sizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(TSqlParserListener); ok {
		listenerT.ExitFile_size(s)
	}
}

func (s *File_sizeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case TSqlParserVisitor:
		return t.VisitFile_size(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *TSqlParser) File_size() (localctx IFile_sizeContext) {
	localctx = NewFile_sizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 946, TSqlParserRULE_file_size)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(10442)
		p.Match(TSqlParserDECIMAL)
	}
	p.SetState(10444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == TSqlParserGB || _la == TSqlParserKB || _la == TSqlParserMB || _la == TSqlParserTB || _la == TSqlParserMODULE {
		p.SetState(10443)
		_la = p.GetTokenStream().LA(1)

		if !(_la == TSqlParserGB || _la == TSqlParserKB || _la == TSqlParserMB || _la == TSqlParserTB || _la == TSqlParserMODULE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

func (p *TSqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 46:
		var t *Assembly_optionContext = nil
		if localctx != nil {
			t = localctx.(*Assembly_optionContext)
		}
		return p.Assembly_option_Sempred(t, predIndex)

	case 352:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *TSqlParser) Assembly_option_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *TSqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
