// Generated from powerbuilder.g4 by ANTLR 4.7.

package powerbuilder // powerbuilder
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 170, 1274,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 3, 2, 3, 2, 7, 2, 209, 10, 2, 12, 2, 14, 2, 212,
	11, 2, 3, 2, 3, 2, 3, 3, 7, 3, 217, 10, 3, 12, 3, 14, 3, 220, 11, 3, 3,
	3, 5, 3, 223, 10, 3, 3, 3, 7, 3, 226, 10, 3, 12, 3, 14, 3, 229, 11, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	5, 4, 243, 10, 4, 3, 5, 3, 5, 3, 5, 5, 5, 248, 10, 5, 3, 5, 3, 5, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 7, 6, 7, 257, 10, 7, 13, 7, 14, 7, 258, 3, 8, 3, 8,
	5, 8, 263, 10, 8, 3, 8, 3, 8, 5, 8, 267, 10, 8, 3, 8, 3, 8, 3, 9, 6, 9,
	272, 10, 9, 13, 9, 14, 9, 273, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10,
	281, 10, 10, 3, 10, 5, 10, 284, 10, 10, 3, 10, 5, 10, 287, 10, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 5, 10, 293, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5,
	10, 299, 10, 10, 3, 10, 5, 10, 302, 10, 10, 3, 10, 5, 10, 305, 10, 10,
	5, 10, 307, 10, 10, 3, 11, 3, 11, 3, 11, 5, 11, 312, 10, 11, 3, 11, 5,
	11, 315, 10, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 5, 11, 323,
	10, 11, 7, 11, 325, 10, 11, 12, 11, 14, 11, 328, 11, 11, 3, 12, 3, 12,
	3, 12, 5, 12, 333, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	5, 12, 352, 10, 12, 3, 12, 3, 12, 3, 12, 5, 12, 357, 10, 12, 5, 12, 359,
	10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 366, 10, 12, 3, 12, 3,
	12, 3, 12, 5, 12, 371, 10, 12, 5, 12, 373, 10, 12, 3, 12, 3, 12, 7, 12,
	377, 10, 12, 12, 12, 14, 12, 380, 11, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 5, 12, 388, 10, 12, 5, 12, 390, 10, 12, 3, 13, 3, 13, 3, 13,
	6, 13, 395, 10, 13, 13, 13, 14, 13, 396, 3, 13, 3, 13, 3, 13, 3, 14, 5,
	14, 403, 10, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 411,
	10, 14, 3, 14, 3, 14, 3, 14, 5, 14, 416, 10, 14, 3, 14, 5, 14, 419, 10,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 425, 10, 14, 3, 14, 3, 14, 7, 14,
	429, 10, 14, 12, 14, 14, 14, 432, 11, 14, 3, 14, 3, 14, 3, 14, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 7, 15, 442, 10, 15, 12, 15, 14, 15, 445, 11, 15,
	3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 454, 10, 16, 12,
	16, 14, 16, 457, 11, 16, 3, 16, 3, 16, 3, 16, 3, 17, 5, 17, 463, 10, 17,
	3, 17, 5, 17, 466, 10, 17, 3, 17, 5, 17, 469, 10, 17, 3, 18, 3, 18, 3,
	18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 5, 20, 481, 10, 20,
	3, 20, 3, 20, 3, 20, 5, 20, 486, 10, 20, 3, 20, 5, 20, 489, 10, 20, 3,
	20, 3, 20, 5, 20, 493, 10, 20, 3, 20, 3, 20, 3, 20, 5, 20, 498, 10, 20,
	3, 20, 5, 20, 501, 10, 20, 7, 20, 503, 10, 20, 12, 20, 14, 20, 506, 11,
	20, 5, 20, 508, 10, 20, 3, 20, 5, 20, 511, 10, 20, 3, 21, 3, 21, 3, 22,
	3, 22, 3, 22, 3, 23, 5, 23, 519, 10, 23, 3, 23, 5, 23, 522, 10, 23, 3,
	23, 3, 23, 3, 23, 5, 23, 527, 10, 23, 3, 23, 3, 23, 3, 23, 5, 23, 532,
	10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 540, 10, 23, 5,
	23, 542, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 548, 10, 23, 3, 23,
	3, 23, 5, 23, 552, 10, 23, 3, 24, 5, 24, 555, 10, 24, 3, 24, 5, 24, 558,
	10, 24, 3, 24, 3, 24, 5, 24, 562, 10, 24, 3, 24, 3, 24, 5, 24, 566, 10,
	24, 3, 25, 3, 25, 3, 25, 7, 25, 571, 10, 25, 12, 25, 14, 25, 574, 11, 25,
	3, 26, 3, 26, 3, 26, 6, 26, 579, 10, 26, 13, 26, 14, 26, 580, 3, 26, 3,
	26, 3, 26, 3, 27, 5, 27, 587, 10, 27, 3, 27, 5, 27, 590, 10, 27, 3, 27,
	3, 27, 3, 27, 5, 27, 595, 10, 27, 3, 27, 3, 27, 3, 27, 5, 27, 600, 10,
	27, 3, 27, 3, 27, 3, 27, 5, 27, 605, 10, 27, 3, 27, 3, 27, 7, 27, 609,
	10, 27, 12, 27, 14, 27, 612, 11, 27, 3, 27, 3, 27, 3, 27, 3, 28, 3, 28,
	3, 28, 3, 28, 5, 28, 621, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 627,
	10, 29, 3, 29, 5, 29, 630, 10, 29, 3, 29, 3, 29, 5, 29, 634, 10, 29, 3,
	29, 5, 29, 637, 10, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29,
	645, 10, 29, 3, 29, 3, 29, 5, 29, 649, 10, 29, 3, 30, 3, 30, 3, 31, 3,
	31, 3, 31, 5, 31, 656, 10, 31, 3, 31, 3, 31, 3, 31, 5, 31, 661, 10, 31,
	3, 31, 3, 31, 3, 31, 5, 31, 666, 10, 31, 3, 31, 3, 31, 5, 31, 670, 10,
	31, 3, 31, 5, 31, 673, 10, 31, 3, 31, 3, 31, 7, 31, 677, 10, 31, 12, 31,
	14, 31, 680, 11, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 3, 32, 5, 32, 694, 10, 32, 3, 33, 3, 33, 3, 34,
	3, 34, 3, 35, 3, 35, 5, 35, 702, 10, 35, 3, 36, 5, 36, 705, 10, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 5, 36, 711, 10, 36, 3, 36, 7, 36, 714, 10, 36,
	12, 36, 14, 36, 717, 11, 36, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 7, 38,
	724, 10, 38, 12, 38, 14, 38, 727, 11, 38, 3, 39, 3, 39, 3, 39, 7, 39, 732,
	10, 39, 12, 39, 14, 39, 735, 11, 39, 3, 40, 5, 40, 738, 10, 40, 3, 40,
	3, 40, 3, 41, 3, 41, 3, 41, 5, 41, 745, 10, 41, 3, 42, 3, 42, 3, 42, 7,
	42, 750, 10, 42, 12, 42, 14, 42, 753, 11, 42, 3, 43, 3, 43, 3, 43, 7, 43,
	758, 10, 43, 12, 43, 14, 43, 761, 11, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 5, 44, 768, 10, 44, 3, 44, 5, 44, 771, 10, 44, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3,
	45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 802, 10, 45, 3, 46, 3, 46, 3,
	46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46,
	816, 10, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 824, 10,
	47, 3, 48, 3, 48, 5, 48, 828, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	3, 49, 3, 49, 3, 49, 5, 49, 838, 10, 49, 3, 50, 3, 50, 5, 50, 842, 10,
	50, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52, 851, 10, 52,
	3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 857, 10, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 3, 53, 3, 53, 3, 53, 3, 53, 5, 53, 867, 10, 53, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 881,
	10, 55, 3, 56, 3, 56, 3, 56, 3, 56, 5, 56, 887, 10, 56, 3, 57, 3, 57, 3,
	57, 3, 57, 5, 57, 893, 10, 57, 3, 57, 3, 57, 5, 57, 897, 10, 57, 3, 58,
	3, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5, 59, 906, 10, 59, 3, 59, 3,
	59, 5, 59, 910, 10, 59, 3, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 61, 3, 61,
	5, 61, 919, 10, 61, 3, 61, 3, 61, 3, 61, 5, 61, 924, 10, 61, 3, 61, 3,
	61, 3, 61, 5, 61, 929, 10, 61, 3, 61, 5, 61, 932, 10, 61, 3, 62, 3, 62,
	3, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 3, 65, 3, 65, 5, 65, 949, 10, 65, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66,
	3, 66, 3, 66, 7, 66, 958, 10, 66, 12, 66, 14, 66, 961, 11, 66, 3, 66, 3,
	66, 3, 67, 3, 67, 7, 67, 967, 10, 67, 12, 67, 14, 67, 970, 11, 67, 3, 67,
	3, 67, 3, 67, 3, 67, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 980, 10, 68, 12,
	68, 14, 68, 983, 11, 68, 3, 68, 3, 68, 3, 68, 3, 68, 7, 68, 989, 10, 68,
	12, 68, 14, 68, 992, 11, 68, 7, 68, 994, 10, 68, 12, 68, 14, 68, 997, 11,
	68, 3, 68, 3, 68, 7, 68, 1001, 10, 68, 12, 68, 14, 68, 1004, 11, 68, 5,
	68, 1006, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 1012, 10, 68, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 71, 3, 71, 3, 72, 3, 72, 3,
	72, 5, 72, 1026, 10, 72, 3, 72, 3, 72, 5, 72, 1030, 10, 72, 3, 72, 3, 72,
	3, 72, 5, 72, 1035, 10, 72, 3, 72, 3, 72, 3, 73, 3, 73, 3, 74, 3, 74, 3,
	75, 3, 75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 6, 76, 1052,
	10, 76, 13, 76, 14, 76, 1053, 3, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77,
	3, 77, 7, 77, 1063, 10, 77, 12, 77, 14, 77, 1066, 11, 77, 3, 77, 7, 77,
	1069, 10, 77, 12, 77, 14, 77, 1072, 11, 77, 3, 78, 3, 78, 3, 78, 3, 78,
	3, 78, 7, 78, 1079, 10, 78, 12, 78, 14, 78, 1082, 11, 78, 3, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 7, 79, 1089, 10, 79, 12, 79, 14, 79, 1092, 11, 79,
	3, 80, 3, 80, 3, 80, 7, 80, 1097, 10, 80, 12, 80, 14, 80, 1100, 11, 80,
	3, 81, 3, 81, 3, 81, 3, 82, 3, 82, 3, 83, 3, 83, 3, 83, 3, 84, 3, 84, 7,
	84, 1112, 10, 84, 12, 84, 14, 84, 1115, 11, 84, 3, 84, 3, 84, 3, 84, 3,
	84, 3, 84, 7, 84, 1122, 10, 84, 12, 84, 14, 84, 1125, 11, 84, 7, 84, 1127,
	10, 84, 12, 84, 14, 84, 1130, 11, 84, 3, 84, 3, 84, 7, 84, 1134, 10, 84,
	12, 84, 14, 84, 1137, 11, 84, 5, 84, 1139, 10, 84, 3, 84, 3, 84, 3, 84,
	3, 85, 3, 85, 3, 85, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3,
	87, 5, 87, 1155, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87,
	3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 5, 87, 1169, 10, 87, 3, 88, 3, 88, 3,
	89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89,
	3, 89, 5, 89, 1185, 10, 89, 3, 90, 3, 90, 3, 90, 3, 90, 5, 90, 1191, 10,
	90, 3, 90, 3, 90, 3, 90, 5, 90, 1196, 10, 90, 3, 91, 3, 91, 5, 91, 1200,
	10, 91, 3, 91, 3, 91, 5, 91, 1204, 10, 91, 3, 91, 3, 91, 3, 92, 3, 92,
	3, 92, 3, 92, 3, 92, 3, 93, 3, 93, 3, 93, 3, 94, 3, 94, 3, 95, 3, 95, 3,
	95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95,
	3, 95, 3, 95, 3, 95, 3, 95, 5, 95, 1235, 10, 95, 3, 96, 6, 96, 1238, 10,
	96, 13, 96, 14, 96, 1239, 3, 97, 6, 97, 1243, 10, 97, 13, 97, 14, 97, 1244,
	3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 3, 99, 3, 100, 3, 100, 3, 101,
	3, 101, 3, 101, 3, 101, 3, 101, 7, 101, 1261, 10, 101, 12, 101, 14, 101,
	1264, 11, 101, 3, 101, 3, 101, 3, 102, 3, 102, 3, 103, 3, 103, 5, 103,
	1272, 10, 103, 3, 103, 2, 2, 104, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
	60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
	96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
	126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154,
	156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184,
	186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 2, 21, 3, 3, 142, 142,
	3, 2, 23, 24, 4, 2, 11, 11, 30, 30, 3, 2, 127, 128, 4, 2, 6, 6, 16, 16,
	3, 2, 41, 43, 3, 2, 32, 33, 4, 2, 41, 43, 52, 55, 4, 2, 23, 23, 56, 56,
	4, 2, 5, 5, 60, 64, 3, 2, 65, 67, 4, 2, 5, 5, 70, 73, 3, 2, 82, 83, 3,
	2, 90, 91, 3, 2, 46, 47, 3, 2, 132, 132, 3, 2, 142, 142, 3, 2, 103, 104,
	4, 2, 102, 102, 105, 126, 2, 1441, 2, 206, 3, 2, 2, 2, 4, 218, 3, 2, 2,
	2, 6, 242, 3, 2, 2, 2, 8, 247, 3, 2, 2, 2, 10, 251, 3, 2, 2, 2, 12, 256,
	3, 2, 2, 2, 14, 260, 3, 2, 2, 2, 16, 271, 3, 2, 2, 2, 18, 306, 3, 2, 2,
	2, 20, 311, 3, 2, 2, 2, 22, 389, 3, 2, 2, 2, 24, 391, 3, 2, 2, 2, 26, 402,
	3, 2, 2, 2, 28, 436, 3, 2, 2, 2, 30, 449, 3, 2, 2, 2, 32, 462, 3, 2, 2,
	2, 34, 470, 3, 2, 2, 2, 36, 473, 3, 2, 2, 2, 38, 510, 3, 2, 2, 2, 40, 512,
	3, 2, 2, 2, 42, 514, 3, 2, 2, 2, 44, 518, 3, 2, 2, 2, 46, 554, 3, 2, 2,
	2, 48, 567, 3, 2, 2, 2, 50, 575, 3, 2, 2, 2, 52, 586, 3, 2, 2, 2, 54, 616,
	3, 2, 2, 2, 56, 648, 3, 2, 2, 2, 58, 650, 3, 2, 2, 2, 60, 652, 3, 2, 2,
	2, 62, 693, 3, 2, 2, 2, 64, 695, 3, 2, 2, 2, 66, 697, 3, 2, 2, 2, 68, 701,
	3, 2, 2, 2, 70, 704, 3, 2, 2, 2, 72, 718, 3, 2, 2, 2, 74, 720, 3, 2, 2,
	2, 76, 728, 3, 2, 2, 2, 78, 737, 3, 2, 2, 2, 80, 741, 3, 2, 2, 2, 82, 746,
	3, 2, 2, 2, 84, 754, 3, 2, 2, 2, 86, 770, 3, 2, 2, 2, 88, 801, 3, 2, 2,
	2, 90, 815, 3, 2, 2, 2, 92, 817, 3, 2, 2, 2, 94, 825, 3, 2, 2, 2, 96, 837,
	3, 2, 2, 2, 98, 839, 3, 2, 2, 2, 100, 843, 3, 2, 2, 2, 102, 850, 3, 2,
	2, 2, 104, 866, 3, 2, 2, 2, 106, 868, 3, 2, 2, 2, 108, 880, 3, 2, 2, 2,
	110, 886, 3, 2, 2, 2, 112, 888, 3, 2, 2, 2, 114, 898, 3, 2, 2, 2, 116,
	909, 3, 2, 2, 2, 118, 914, 3, 2, 2, 2, 120, 916, 3, 2, 2, 2, 122, 933,
	3, 2, 2, 2, 124, 935, 3, 2, 2, 2, 126, 938, 3, 2, 2, 2, 128, 940, 3, 2,
	2, 2, 130, 953, 3, 2, 2, 2, 132, 964, 3, 2, 2, 2, 134, 975, 3, 2, 2, 2,
	136, 1013, 3, 2, 2, 2, 138, 1018, 3, 2, 2, 2, 140, 1020, 3, 2, 2, 2, 142,
	1025, 3, 2, 2, 2, 144, 1038, 3, 2, 2, 2, 146, 1040, 3, 2, 2, 2, 148, 1042,
	3, 2, 2, 2, 150, 1044, 3, 2, 2, 2, 152, 1058, 3, 2, 2, 2, 154, 1073, 3,
	2, 2, 2, 156, 1083, 3, 2, 2, 2, 158, 1093, 3, 2, 2, 2, 160, 1101, 3, 2,
	2, 2, 162, 1104, 3, 2, 2, 2, 164, 1106, 3, 2, 2, 2, 166, 1109, 3, 2, 2,
	2, 168, 1143, 3, 2, 2, 2, 170, 1146, 3, 2, 2, 2, 172, 1168, 3, 2, 2, 2,
	174, 1170, 3, 2, 2, 2, 176, 1184, 3, 2, 2, 2, 178, 1195, 3, 2, 2, 2, 180,
	1199, 3, 2, 2, 2, 182, 1207, 3, 2, 2, 2, 184, 1212, 3, 2, 2, 2, 186, 1215,
	3, 2, 2, 2, 188, 1234, 3, 2, 2, 2, 190, 1237, 3, 2, 2, 2, 192, 1242, 3,
	2, 2, 2, 194, 1246, 3, 2, 2, 2, 196, 1251, 3, 2, 2, 2, 198, 1253, 3, 2,
	2, 2, 200, 1255, 3, 2, 2, 2, 202, 1267, 3, 2, 2, 2, 204, 1271, 3, 2, 2,
	2, 206, 210, 5, 4, 3, 2, 207, 209, 5, 6, 4, 2, 208, 207, 3, 2, 2, 2, 209,
	212, 3, 2, 2, 2, 210, 208, 3, 2, 2, 2, 210, 211, 3, 2, 2, 2, 211, 213,
	3, 2, 2, 2, 212, 210, 3, 2, 2, 2, 213, 214, 7, 2, 2, 3, 214, 3, 3, 2, 2,
	2, 215, 217, 5, 8, 5, 2, 216, 215, 3, 2, 2, 2, 217, 220, 3, 2, 2, 2, 218,
	216, 3, 2, 2, 2, 218, 219, 3, 2, 2, 2, 219, 222, 3, 2, 2, 2, 220, 218,
	3, 2, 2, 2, 221, 223, 5, 10, 6, 2, 222, 221, 3, 2, 2, 2, 222, 223, 3, 2,
	2, 2, 223, 227, 3, 2, 2, 2, 224, 226, 5, 12, 7, 2, 225, 224, 3, 2, 2, 2,
	226, 229, 3, 2, 2, 2, 227, 225, 3, 2, 2, 2, 227, 228, 3, 2, 2, 2, 228,
	5, 3, 2, 2, 2, 229, 227, 3, 2, 2, 2, 230, 243, 5, 26, 14, 2, 231, 243,
	5, 62, 32, 2, 232, 243, 5, 24, 13, 2, 233, 243, 5, 28, 15, 2, 234, 243,
	5, 30, 16, 2, 235, 243, 5, 34, 18, 2, 236, 243, 5, 42, 22, 2, 237, 243,
	5, 44, 23, 2, 238, 243, 5, 50, 26, 2, 239, 243, 5, 52, 27, 2, 240, 243,
	5, 54, 28, 2, 241, 243, 5, 60, 31, 2, 242, 230, 3, 2, 2, 2, 242, 231, 3,
	2, 2, 2, 242, 232, 3, 2, 2, 2, 242, 233, 3, 2, 2, 2, 242, 234, 3, 2, 2,
	2, 242, 235, 3, 2, 2, 2, 242, 236, 3, 2, 2, 2, 242, 237, 3, 2, 2, 2, 242,
	238, 3, 2, 2, 2, 242, 239, 3, 2, 2, 2, 242, 240, 3, 2, 2, 2, 242, 241,
	3, 2, 2, 2, 243, 7, 3, 2, 2, 2, 244, 248, 5, 192, 97, 2, 245, 248, 7, 144,
	2, 2, 246, 248, 7, 170, 2, 2, 247, 244, 3, 2, 2, 2, 247, 245, 3, 2, 2,
	2, 247, 246, 3, 2, 2, 2, 248, 249, 3, 2, 2, 2, 249, 250, 9, 2, 2, 2, 250,
	9, 3, 2, 2, 2, 251, 252, 7, 3, 2, 2, 252, 253, 7, 136, 2, 2, 253, 254,
	7, 132, 2, 2, 254, 11, 3, 2, 2, 2, 255, 257, 5, 14, 8, 2, 256, 255, 3,
	2, 2, 2, 257, 258, 3, 2, 2, 2, 258, 256, 3, 2, 2, 2, 258, 259, 3, 2, 2,
	2, 259, 13, 3, 2, 2, 2, 260, 262, 5, 20, 11, 2, 261, 263, 5, 38, 20, 2,
	262, 261, 3, 2, 2, 2, 262, 263, 3, 2, 2, 2, 263, 264, 3, 2, 2, 2, 264,
	266, 7, 133, 2, 2, 265, 267, 5, 16, 9, 2, 266, 265, 3, 2, 2, 2, 266, 267,
	3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 269, 7, 134, 2, 2, 269, 15, 3, 2,
	2, 2, 270, 272, 5, 18, 10, 2, 271, 270, 3, 2, 2, 2, 272, 273, 3, 2, 2,
	2, 273, 271, 3, 2, 2, 2, 273, 274, 3, 2, 2, 2, 274, 17, 3, 2, 2, 2, 275,
	281, 7, 4, 2, 2, 276, 281, 5, 196, 99, 2, 277, 281, 7, 127, 2, 2, 278,
	281, 7, 145, 2, 2, 279, 281, 7, 146, 2, 2, 280, 275, 3, 2, 2, 2, 280, 276,
	3, 2, 2, 2, 280, 277, 3, 2, 2, 2, 280, 278, 3, 2, 2, 2, 280, 279, 3, 2,
	2, 2, 281, 283, 3, 2, 2, 2, 282, 284, 7, 142, 2, 2, 283, 282, 3, 2, 2,
	2, 283, 284, 3, 2, 2, 2, 284, 286, 3, 2, 2, 2, 285, 287, 7, 130, 2, 2,
	286, 285, 3, 2, 2, 2, 286, 287, 3, 2, 2, 2, 287, 307, 3, 2, 2, 2, 288,
	289, 5, 20, 11, 2, 289, 298, 7, 5, 2, 2, 290, 292, 5, 22, 12, 2, 291, 293,
	5, 38, 20, 2, 292, 291, 3, 2, 2, 2, 292, 293, 3, 2, 2, 2, 293, 299, 3,
	2, 2, 2, 294, 295, 7, 133, 2, 2, 295, 296, 5, 16, 9, 2, 296, 297, 7, 134,
	2, 2, 297, 299, 3, 2, 2, 2, 298, 290, 3, 2, 2, 2, 298, 294, 3, 2, 2, 2,
	299, 301, 3, 2, 2, 2, 300, 302, 7, 142, 2, 2, 301, 300, 3, 2, 2, 2, 301,
	302, 3, 2, 2, 2, 302, 304, 3, 2, 2, 2, 303, 305, 7, 130, 2, 2, 304, 303,
	3, 2, 2, 2, 304, 305, 3, 2, 2, 2, 305, 307, 3, 2, 2, 2, 306, 280, 3, 2,
	2, 2, 306, 288, 3, 2, 2, 2, 307, 19, 3, 2, 2, 2, 308, 312, 5, 174, 88,
	2, 309, 312, 7, 6, 2, 2, 310, 312, 7, 7, 2, 2, 311, 308, 3, 2, 2, 2, 311,
	309, 3, 2, 2, 2, 311, 310, 3, 2, 2, 2, 312, 314, 3, 2, 2, 2, 313, 315,
	7, 136, 2, 2, 314, 313, 3, 2, 2, 2, 314, 315, 3, 2, 2, 2, 315, 326, 3,
	2, 2, 2, 316, 322, 7, 137, 2, 2, 317, 323, 5, 174, 88, 2, 318, 323, 7,
	8, 2, 2, 319, 323, 7, 6, 2, 2, 320, 323, 7, 9, 2, 2, 321, 323, 7, 10, 2,
	2, 322, 317, 3, 2, 2, 2, 322, 318, 3, 2, 2, 2, 322, 319, 3, 2, 2, 2, 322,
	320, 3, 2, 2, 2, 322, 321, 3, 2, 2, 2, 323, 325, 3, 2, 2, 2, 324, 316,
	3, 2, 2, 2, 325, 328, 3, 2, 2, 2, 326, 324, 3, 2, 2, 2, 326, 327, 3, 2,
	2, 2, 327, 21, 3, 2, 2, 2, 328, 326, 3, 2, 2, 2, 329, 390, 5, 180, 91,
	2, 330, 390, 5, 186, 94, 2, 331, 333, 7, 11, 2, 2, 332, 331, 3, 2, 2, 2,
	332, 333, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 390, 5, 196, 99, 2, 335,
	390, 5, 198, 100, 2, 336, 390, 7, 129, 2, 2, 337, 390, 7, 127, 2, 2, 338,
	390, 7, 128, 2, 2, 339, 390, 7, 145, 2, 2, 340, 390, 7, 146, 2, 2, 341,
	390, 7, 6, 2, 2, 342, 390, 7, 12, 2, 2, 343, 390, 7, 13, 2, 2, 344, 390,
	7, 14, 2, 2, 345, 390, 7, 4, 2, 2, 346, 390, 7, 15, 2, 2, 347, 348, 7,
	133, 2, 2, 348, 351, 7, 133, 2, 2, 349, 352, 5, 68, 35, 2, 350, 352, 5,
	202, 102, 2, 351, 349, 3, 2, 2, 2, 351, 350, 3, 2, 2, 2, 352, 358, 3, 2,
	2, 2, 353, 356, 7, 130, 2, 2, 354, 357, 5, 68, 35, 2, 355, 357, 5, 202,
	102, 2, 356, 354, 3, 2, 2, 2, 356, 355, 3, 2, 2, 2, 357, 359, 3, 2, 2,
	2, 358, 353, 3, 2, 2, 2, 358, 359, 3, 2, 2, 2, 359, 360, 3, 2, 2, 2, 360,
	378, 7, 134, 2, 2, 361, 362, 7, 130, 2, 2, 362, 365, 7, 133, 2, 2, 363,
	366, 5, 68, 35, 2, 364, 366, 5, 202, 102, 2, 365, 363, 3, 2, 2, 2, 365,
	364, 3, 2, 2, 2, 366, 372, 3, 2, 2, 2, 367, 370, 7, 130, 2, 2, 368, 371,
	5, 68, 35, 2, 369, 371, 5, 202, 102, 2, 370, 368, 3, 2, 2, 2, 370, 369,
	3, 2, 2, 2, 371, 373, 3, 2, 2, 2, 372, 367, 3, 2, 2, 2, 372, 373, 3, 2,
	2, 2, 373, 374, 3, 2, 2, 2, 374, 375, 7, 134, 2, 2, 375, 377, 3, 2, 2,
	2, 376, 361, 3, 2, 2, 2, 377, 380, 3, 2, 2, 2, 378, 376, 3, 2, 2, 2, 378,
	379, 3, 2, 2, 2, 379, 381, 3, 2, 2, 2, 380, 378, 3, 2, 2, 2, 381, 382,
	7, 134, 2, 2, 382, 390, 3, 2, 2, 2, 383, 387, 5, 202, 102, 2, 384, 385,
	7, 133, 2, 2, 385, 386, 7, 136, 2, 2, 386, 388, 7, 134, 2, 2, 387, 384,
	3, 2, 2, 2, 387, 388, 3, 2, 2, 2, 388, 390, 3, 2, 2, 2, 389, 329, 3, 2,
	2, 2, 389, 330, 3, 2, 2, 2, 389, 332, 3, 2, 2, 2, 389, 335, 3, 2, 2, 2,
	389, 336, 3, 2, 2, 2, 389, 337, 3, 2, 2, 2, 389, 338, 3, 2, 2, 2, 389,
	339, 3, 2, 2, 2, 389, 340, 3, 2, 2, 2, 389, 341, 3, 2, 2, 2, 389, 342,
	3, 2, 2, 2, 389, 343, 3, 2, 2, 2, 389, 344, 3, 2, 2, 2, 389, 345, 3, 2,
	2, 2, 389, 346, 3, 2, 2, 2, 389, 347, 3, 2, 2, 2, 389, 383, 3, 2, 2, 2,
	390, 23, 3, 2, 2, 2, 391, 394, 7, 16, 2, 2, 392, 395, 5, 26, 14, 2, 393,
	395, 5, 34, 18, 2, 394, 392, 3, 2, 2, 2, 394, 393, 3, 2, 2, 2, 395, 396,
	3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 396, 397, 3, 2, 2, 2, 397, 398, 3, 2,
	2, 2, 398, 399, 7, 17, 2, 2, 399, 400, 7, 16, 2, 2, 400, 25, 3, 2, 2, 2,
	401, 403, 5, 66, 34, 2, 402, 401, 3, 2, 2, 2, 402, 403, 3, 2, 2, 2, 403,
	404, 3, 2, 2, 2, 404, 405, 7, 6, 2, 2, 405, 406, 5, 174, 88, 2, 406, 410,
	7, 13, 2, 2, 407, 408, 5, 174, 88, 2, 408, 409, 7, 18, 2, 2, 409, 411,
	3, 2, 2, 2, 410, 407, 3, 2, 2, 2, 410, 411, 3, 2, 2, 2, 411, 412, 3, 2,
	2, 2, 412, 415, 5, 204, 103, 2, 413, 414, 7, 19, 2, 2, 414, 416, 5, 174,
	88, 2, 415, 413, 3, 2, 2, 2, 415, 416, 3, 2, 2, 2, 416, 418, 3, 2, 2, 2,
	417, 419, 7, 20, 2, 2, 418, 417, 3, 2, 2, 2, 418, 419, 3, 2, 2, 2, 419,
	424, 3, 2, 2, 2, 420, 421, 7, 21, 2, 2, 421, 422, 7, 127, 2, 2, 422, 423,
	7, 5, 2, 2, 423, 425, 7, 127, 2, 2, 424, 420, 3, 2, 2, 2, 424, 425, 3,
	2, 2, 2, 425, 430, 3, 2, 2, 2, 426, 429, 5, 34, 18, 2, 427, 429, 5, 58,
	30, 2, 428, 426, 3, 2, 2, 2, 428, 427, 3, 2, 2, 2, 429, 432, 3, 2, 2, 2,
	430, 428, 3, 2, 2, 2, 430, 431, 3, 2, 2, 2, 431, 433, 3, 2, 2, 2, 432,
	430, 3, 2, 2, 2, 433, 434, 7, 17, 2, 2, 434, 435, 7, 6, 2, 2, 435, 27,
	3, 2, 2, 2, 436, 437, 7, 6, 2, 2, 437, 443, 7, 22, 2, 2, 438, 442, 5, 62,
	32, 2, 439, 442, 5, 34, 18, 2, 440, 442, 5, 42, 22, 2, 441, 438, 3, 2,
	2, 2, 441, 439, 3, 2, 2, 2, 441, 440, 3, 2, 2, 2, 442, 445, 3, 2, 2, 2,
	443, 441, 3, 2, 2, 2, 443, 444, 3, 2, 2, 2, 444, 446, 3, 2, 2, 2, 445,
	443, 3, 2, 2, 2, 446, 447, 7, 17, 2, 2, 447, 448, 7, 22, 2, 2, 448, 29,
	3, 2, 2, 2, 449, 450, 9, 3, 2, 2, 450, 455, 7, 22, 2, 2, 451, 454, 5, 34,
	18, 2, 452, 454, 5, 42, 22, 2, 453, 451, 3, 2, 2, 2, 453, 452, 3, 2, 2,
	2, 454, 457, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 455, 456, 3, 2, 2, 2, 456,
	458, 3, 2, 2, 2, 457, 455, 3, 2, 2, 2, 458, 459, 7, 17, 2, 2, 459, 460,
	7, 22, 2, 2, 460, 31, 3, 2, 2, 2, 461, 463, 7, 25, 2, 2, 462, 461, 3, 2,
	2, 2, 462, 463, 3, 2, 2, 2, 463, 465, 3, 2, 2, 2, 464, 466, 5, 64, 33,
	2, 465, 464, 3, 2, 2, 2, 465, 466, 3, 2, 2, 2, 466, 468, 3, 2, 2, 2, 467,
	469, 5, 66, 34, 2, 468, 467, 3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 33,
	3, 2, 2, 2, 470, 471, 5, 32, 17, 2, 471, 472, 7, 132, 2, 2, 472, 35, 3,
	2, 2, 2, 473, 474, 7, 26, 2, 2, 474, 475, 7, 136, 2, 2, 475, 476, 7, 27,
	2, 2, 476, 37, 3, 2, 2, 2, 477, 511, 7, 28, 2, 2, 478, 507, 7, 29, 2, 2,
	479, 481, 9, 4, 2, 2, 480, 479, 3, 2, 2, 2, 480, 481, 3, 2, 2, 2, 481,
	482, 3, 2, 2, 2, 482, 488, 7, 136, 2, 2, 483, 485, 7, 12, 2, 2, 484, 486,
	9, 4, 2, 2, 485, 484, 3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 487, 3, 2,
	2, 2, 487, 489, 7, 136, 2, 2, 488, 483, 3, 2, 2, 2, 488, 489, 3, 2, 2,
	2, 489, 504, 3, 2, 2, 2, 490, 492, 7, 130, 2, 2, 491, 493, 9, 4, 2, 2,
	492, 491, 3, 2, 2, 2, 492, 493, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494,
	500, 7, 136, 2, 2, 495, 497, 7, 12, 2, 2, 496, 498, 9, 4, 2, 2, 497, 496,
	3, 2, 2, 2, 497, 498, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 501, 7, 136,
	2, 2, 500, 495, 3, 2, 2, 2, 500, 501, 3, 2, 2, 2, 501, 503, 3, 2, 2, 2,
	502, 490, 3, 2, 2, 2, 503, 506, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 504,
	505, 3, 2, 2, 2, 505, 508, 3, 2, 2, 2, 506, 504, 3, 2, 2, 2, 507, 480,
	3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509, 511, 7, 31,
	2, 2, 510, 477, 3, 2, 2, 2, 510, 478, 3, 2, 2, 2, 511, 39, 3, 2, 2, 2,
	512, 513, 3, 2, 2, 2, 513, 41, 3, 2, 2, 2, 514, 515, 5, 40, 21, 2, 515,
	516, 7, 132, 2, 2, 516, 43, 3, 2, 2, 2, 517, 519, 5, 64, 33, 2, 518, 517,
	3, 2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 521, 3, 2, 2, 2, 520, 522, 5, 66,
	34, 2, 521, 520, 3, 2, 2, 2, 521, 522, 3, 2, 2, 2, 522, 526, 3, 2, 2, 2,
	523, 524, 7, 32, 2, 2, 524, 527, 5, 204, 103, 2, 525, 527, 7, 33, 2, 2,
	526, 523, 3, 2, 2, 2, 526, 525, 3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528,
	529, 5, 174, 88, 2, 529, 531, 7, 133, 2, 2, 530, 532, 5, 48, 25, 2, 531,
	530, 3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 533, 3, 2, 2, 2, 533, 541,
	7, 134, 2, 2, 534, 535, 7, 34, 2, 2, 535, 539, 9, 5, 2, 2, 536, 537, 7,
	35, 2, 2, 537, 538, 7, 36, 2, 2, 538, 540, 9, 5, 2, 2, 539, 536, 3, 2,
	2, 2, 539, 540, 3, 2, 2, 2, 540, 542, 3, 2, 2, 2, 541, 534, 3, 2, 2, 2,
	541, 542, 3, 2, 2, 2, 542, 547, 3, 2, 2, 2, 543, 544, 7, 37, 2, 2, 544,
	545, 7, 35, 2, 2, 545, 546, 7, 36, 2, 2, 546, 548, 9, 5, 2, 2, 547, 543,
	3, 2, 2, 2, 547, 548, 3, 2, 2, 2, 548, 551, 3, 2, 2, 2, 549, 550, 7, 38,
	2, 2, 550, 552, 5, 174, 88, 2, 551, 549, 3, 2, 2, 2, 551, 552, 3, 2, 2,
	2, 552, 45, 3, 2, 2, 2, 553, 555, 7, 39, 2, 2, 554, 553, 3, 2, 2, 2, 554,
	555, 3, 2, 2, 2, 555, 557, 3, 2, 2, 2, 556, 558, 7, 14, 2, 2, 557, 556,
	3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559, 561, 5, 204,
	103, 2, 560, 562, 5, 36, 19, 2, 561, 560, 3, 2, 2, 2, 561, 562, 3, 2, 2,
	2, 562, 563, 3, 2, 2, 2, 563, 565, 5, 174, 88, 2, 564, 566, 5, 38, 20,
	2, 565, 564, 3, 2, 2, 2, 565, 566, 3, 2, 2, 2, 566, 47, 3, 2, 2, 2, 567,
	572, 5, 46, 24, 2, 568, 569, 7, 130, 2, 2, 569, 571, 5, 46, 24, 2, 570,
	568, 3, 2, 2, 2, 571, 574, 3, 2, 2, 2, 572, 570, 3, 2, 2, 2, 572, 573,
	3, 2, 2, 2, 573, 49, 3, 2, 2, 2, 574, 572, 3, 2, 2, 2, 575, 576, 9, 6,
	2, 2, 576, 578, 7, 40, 2, 2, 577, 579, 5, 44, 23, 2, 578, 577, 3, 2, 2,
	2, 579, 580, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 580, 581, 3, 2, 2, 2, 581,
	582, 3, 2, 2, 2, 582, 583, 7, 17, 2, 2, 583, 584, 7, 40, 2, 2, 584, 51,
	3, 2, 2, 2, 585, 587, 9, 7, 2, 2, 586, 585, 3, 2, 2, 2, 586, 587, 3, 2,
	2, 2, 587, 589, 3, 2, 2, 2, 588, 590, 5, 66, 34, 2, 589, 588, 3, 2, 2,
	2, 589, 590, 3, 2, 2, 2, 590, 594, 3, 2, 2, 2, 591, 592, 7, 32, 2, 2, 592,
	595, 5, 204, 103, 2, 593, 595, 7, 33, 2, 2, 594, 591, 3, 2, 2, 2, 594,
	593, 3, 2, 2, 2, 595, 596, 3, 2, 2, 2, 596, 597, 5, 174, 88, 2, 597, 599,
	7, 133, 2, 2, 598, 600, 5, 48, 25, 2, 599, 598, 3, 2, 2, 2, 599, 600, 3,
	2, 2, 2, 600, 601, 3, 2, 2, 2, 601, 604, 7, 134, 2, 2, 602, 603, 7, 38,
	2, 2, 603, 605, 5, 174, 88, 2, 604, 602, 3, 2, 2, 2, 604, 605, 3, 2, 2,
	2, 605, 610, 3, 2, 2, 2, 606, 607, 7, 132, 2, 2, 607, 609, 5, 88, 45, 2,
	608, 606, 3, 2, 2, 2, 609, 612, 3, 2, 2, 2, 610, 608, 3, 2, 2, 2, 610,
	611, 3, 2, 2, 2, 611, 613, 3, 2, 2, 2, 612, 610, 3, 2, 2, 2, 613, 614,
	7, 17, 2, 2, 614, 615, 9, 8, 2, 2, 615, 53, 3, 2, 2, 2, 616, 620, 7, 9,
	2, 2, 617, 621, 5, 172, 87, 2, 618, 621, 7, 15, 2, 2, 619, 621, 7, 44,
	2, 2, 620, 617, 3, 2, 2, 2, 620, 618, 3, 2, 2, 2, 620, 619, 3, 2, 2, 2,
	621, 55, 3, 2, 2, 2, 622, 626, 7, 45, 2, 2, 623, 627, 5, 174, 88, 2, 624,
	627, 7, 46, 2, 2, 625, 627, 7, 47, 2, 2, 626, 623, 3, 2, 2, 2, 626, 624,
	3, 2, 2, 2, 626, 625, 3, 2, 2, 2, 627, 629, 3, 2, 2, 2, 628, 630, 5, 174,
	88, 2, 629, 628, 3, 2, 2, 2, 629, 630, 3, 2, 2, 2, 630, 636, 3, 2, 2, 2,
	631, 633, 7, 133, 2, 2, 632, 634, 5, 48, 25, 2, 633, 632, 3, 2, 2, 2, 633,
	634, 3, 2, 2, 2, 634, 635, 3, 2, 2, 2, 635, 637, 7, 134, 2, 2, 636, 631,
	3, 2, 2, 2, 636, 637, 3, 2, 2, 2, 637, 649, 3, 2, 2, 2, 638, 639, 7, 45,
	2, 2, 639, 640, 7, 6, 2, 2, 640, 641, 5, 204, 103, 2, 641, 642, 5, 174,
	88, 2, 642, 644, 7, 133, 2, 2, 643, 645, 5, 48, 25, 2, 644, 643, 3, 2,
	2, 2, 644, 645, 3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 647, 7, 134, 2,
	2, 647, 649, 3, 2, 2, 2, 648, 622, 3, 2, 2, 2, 648, 638, 3, 2, 2, 2, 649,
	57, 3, 2, 2, 2, 650, 651, 5, 56, 29, 2, 651, 59, 3, 2, 2, 2, 652, 655,
	7, 45, 2, 2, 653, 654, 7, 6, 2, 2, 654, 656, 5, 204, 103, 2, 655, 653,
	3, 2, 2, 2, 655, 656, 3, 2, 2, 2, 656, 660, 3, 2, 2, 2, 657, 658, 5, 174,
	88, 2, 658, 659, 7, 48, 2, 2, 659, 661, 3, 2, 2, 2, 660, 657, 3, 2, 2,
	2, 660, 661, 3, 2, 2, 2, 661, 665, 3, 2, 2, 2, 662, 666, 5, 174, 88, 2,
	663, 666, 7, 15, 2, 2, 664, 666, 7, 44, 2, 2, 665, 662, 3, 2, 2, 2, 665,
	663, 3, 2, 2, 2, 665, 664, 3, 2, 2, 2, 666, 672, 3, 2, 2, 2, 667, 669,
	7, 133, 2, 2, 668, 670, 5, 48, 25, 2, 669, 668, 3, 2, 2, 2, 669, 670, 3,
	2, 2, 2, 670, 671, 3, 2, 2, 2, 671, 673, 7, 134, 2, 2, 672, 667, 3, 2,
	2, 2, 672, 673, 3, 2, 2, 2, 673, 678, 3, 2, 2, 2, 674, 675, 7, 132, 2,
	2, 675, 677, 5, 88, 45, 2, 676, 674, 3, 2, 2, 2, 677, 680, 3, 2, 2, 2,
	678, 676, 3, 2, 2, 2, 678, 679, 3, 2, 2, 2, 679, 681, 3, 2, 2, 2, 680,
	678, 3, 2, 2, 2, 681, 682, 7, 17, 2, 2, 682, 683, 7, 45, 2, 2, 683, 61,
	3, 2, 2, 2, 684, 694, 7, 49, 2, 2, 685, 686, 7, 41, 2, 2, 686, 694, 7,
	135, 2, 2, 687, 694, 7, 50, 2, 2, 688, 689, 7, 42, 2, 2, 689, 694, 7, 135,
	2, 2, 690, 694, 7, 51, 2, 2, 691, 692, 7, 43, 2, 2, 692, 694, 7, 135, 2,
	2, 693, 684, 3, 2, 2, 2, 693, 685, 3, 2, 2, 2, 693, 687, 3, 2, 2, 2, 693,
	688, 3, 2, 2, 2, 693, 690, 3, 2, 2, 2, 693, 691, 3, 2, 2, 2, 694, 63, 3,
	2, 2, 2, 695, 696, 9, 9, 2, 2, 696, 65, 3, 2, 2, 2, 697, 698, 9, 10, 2,
	2, 698, 67, 3, 2, 2, 2, 699, 702, 5, 108, 55, 2, 700, 702, 7, 26, 2, 2,
	701, 699, 3, 2, 2, 2, 701, 700, 3, 2, 2, 2, 702, 69, 3, 2, 2, 2, 703, 705,
	7, 14, 2, 2, 704, 703, 3, 2, 2, 2, 704, 705, 3, 2, 2, 2, 705, 706, 3, 2,
	2, 2, 706, 707, 5, 68, 35, 2, 707, 715, 3, 2, 2, 2, 708, 710, 7, 130, 2,
	2, 709, 711, 7, 14, 2, 2, 710, 709, 3, 2, 2, 2, 710, 711, 3, 2, 2, 2, 711,
	712, 3, 2, 2, 2, 712, 714, 5, 68, 35, 2, 713, 708, 3, 2, 2, 2, 714, 717,
	3, 2, 2, 2, 715, 713, 3, 2, 2, 2, 715, 716, 3, 2, 2, 2, 716, 71, 3, 2,
	2, 2, 717, 715, 3, 2, 2, 2, 718, 719, 5, 74, 38, 2, 719, 73, 3, 2, 2, 2,
	720, 725, 5, 76, 39, 2, 721, 722, 7, 57, 2, 2, 722, 724, 5, 76, 39, 2,
	723, 721, 3, 2, 2, 2, 724, 727, 3, 2, 2, 2, 725, 723, 3, 2, 2, 2, 725,
	726, 3, 2, 2, 2, 726, 75, 3, 2, 2, 2, 727, 725, 3, 2, 2, 2, 728, 733, 5,
	78, 40, 2, 729, 730, 7, 58, 2, 2, 730, 732, 5, 78, 40, 2, 731, 729, 3,
	2, 2, 2, 732, 735, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2, 733, 734, 3, 2, 2,
	2, 734, 77, 3, 2, 2, 2, 735, 733, 3, 2, 2, 2, 736, 738, 7, 59, 2, 2, 737,
	736, 3, 2, 2, 2, 737, 738, 3, 2, 2, 2, 738, 739, 3, 2, 2, 2, 739, 740,
	5, 80, 41, 2, 740, 79, 3, 2, 2, 2, 741, 744, 5, 82, 42, 2, 742, 743, 9,
	11, 2, 2, 743, 745, 5, 82, 42, 2, 744, 742, 3, 2, 2, 2, 744, 745, 3, 2,
	2, 2, 745, 81, 3, 2, 2, 2, 746, 751, 5, 84, 43, 2, 747, 748, 9, 4, 2, 2,
	748, 750, 5, 84, 43, 2, 749, 747, 3, 2, 2, 2, 750, 753, 3, 2, 2, 2, 751,
	749, 3, 2, 2, 2, 751, 752, 3, 2, 2, 2, 752, 83, 3, 2, 2, 2, 753, 751, 3,
	2, 2, 2, 754, 759, 5, 86, 44, 2, 755, 756, 9, 12, 2, 2, 756, 758, 5, 86,
	44, 2, 757, 755, 3, 2, 2, 2, 758, 761, 3, 2, 2, 2, 759, 757, 3, 2, 2, 2,
	759, 760, 3, 2, 2, 2, 760, 85, 3, 2, 2, 2, 761, 759, 3, 2, 2, 2, 762, 763,
	7, 133, 2, 2, 763, 764, 5, 68, 35, 2, 764, 765, 7, 134, 2, 2, 765, 771,
	3, 2, 2, 2, 766, 768, 9, 4, 2, 2, 767, 766, 3, 2, 2, 2, 767, 768, 3, 2,
	2, 2, 768, 769, 3, 2, 2, 2, 769, 771, 5, 188, 95, 2, 770, 762, 3, 2, 2,
	2, 770, 767, 3, 2, 2, 2, 771, 87, 3, 2, 2, 2, 772, 802, 5, 136, 69, 2,
	773, 774, 7, 68, 2, 2, 774, 802, 5, 174, 88, 2, 775, 802, 5, 94, 48, 2,
	776, 777, 5, 90, 46, 2, 777, 778, 7, 132, 2, 2, 778, 802, 3, 2, 2, 2, 779,
	802, 5, 134, 68, 2, 780, 802, 7, 69, 2, 2, 781, 802, 5, 144, 73, 2, 782,
	802, 5, 110, 56, 2, 783, 802, 5, 118, 60, 2, 784, 802, 5, 42, 22, 2, 785,
	802, 5, 34, 18, 2, 786, 802, 5, 114, 58, 2, 787, 802, 5, 132, 67, 2, 788,
	802, 5, 130, 66, 2, 789, 802, 5, 122, 62, 2, 790, 802, 5, 126, 64, 2, 791,
	802, 5, 164, 83, 2, 792, 802, 5, 172, 87, 2, 793, 802, 5, 170, 86, 2, 794,
	802, 5, 162, 82, 2, 795, 802, 5, 150, 76, 2, 796, 802, 5, 100, 51, 2, 797,
	802, 5, 128, 65, 2, 798, 802, 5, 140, 71, 2, 799, 802, 5, 148, 75, 2, 800,
	802, 5, 188, 95, 2, 801, 772, 3, 2, 2, 2, 801, 773, 3, 2, 2, 2, 801, 775,
	3, 2, 2, 2, 801, 776, 3, 2, 2, 2, 801, 779, 3, 2, 2, 2, 801, 780, 3, 2,
	2, 2, 801, 781, 3, 2, 2, 2, 801, 782, 3, 2, 2, 2, 801, 783, 3, 2, 2, 2,
	801, 784, 3, 2, 2, 2, 801, 785, 3, 2, 2, 2, 801, 786, 3, 2, 2, 2, 801,
	787, 3, 2, 2, 2, 801, 788, 3, 2, 2, 2, 801, 789, 3, 2, 2, 2, 801, 790,
	3, 2, 2, 2, 801, 791, 3, 2, 2, 2, 801, 792, 3, 2, 2, 2, 801, 793, 3, 2,
	2, 2, 801, 794, 3, 2, 2, 2, 801, 795, 3, 2, 2, 2, 801, 796, 3, 2, 2, 2,
	801, 797, 3, 2, 2, 2, 801, 798, 3, 2, 2, 2, 801, 799, 3, 2, 2, 2, 801,
	800, 3, 2, 2, 2, 802, 89, 3, 2, 2, 2, 803, 816, 5, 104, 53, 2, 804, 816,
	5, 102, 52, 2, 805, 816, 5, 98, 50, 2, 806, 816, 5, 106, 54, 2, 807, 816,
	5, 108, 55, 2, 808, 816, 5, 32, 17, 2, 809, 816, 5, 112, 57, 2, 810, 816,
	5, 120, 61, 2, 811, 816, 5, 124, 63, 2, 812, 816, 5, 138, 70, 2, 813, 816,
	5, 160, 81, 2, 814, 816, 5, 92, 47, 2, 815, 803, 3, 2, 2, 2, 815, 804,
	3, 2, 2, 2, 815, 805, 3, 2, 2, 2, 815, 806, 3, 2, 2, 2, 815, 807, 3, 2,
	2, 2, 815, 808, 3, 2, 2, 2, 815, 809, 3, 2, 2, 2, 815, 810, 3, 2, 2, 2,
	815, 811, 3, 2, 2, 2, 815, 812, 3, 2, 2, 2, 815, 813, 3, 2, 2, 2, 815,
	814, 3, 2, 2, 2, 816, 91, 3, 2, 2, 2, 817, 818, 5, 96, 49, 2, 818, 823,
	9, 13, 2, 2, 819, 824, 7, 59, 2, 2, 820, 824, 7, 26, 2, 2, 821, 824, 5,
	72, 37, 2, 822, 824, 5, 68, 35, 2, 823, 819, 3, 2, 2, 2, 823, 820, 3, 2,
	2, 2, 823, 821, 3, 2, 2, 2, 823, 822, 3, 2, 2, 2, 824, 93, 3, 2, 2, 2,
	825, 827, 5, 92, 47, 2, 826, 828, 7, 132, 2, 2, 827, 826, 3, 2, 2, 2, 827,
	828, 3, 2, 2, 2, 828, 95, 3, 2, 2, 2, 829, 830, 5, 178, 90, 2, 830, 831,
	7, 137, 2, 2, 831, 832, 5, 176, 89, 2, 832, 838, 3, 2, 2, 2, 833, 838,
	5, 180, 91, 2, 834, 838, 5, 182, 92, 2, 835, 838, 5, 184, 93, 2, 836, 838,
	5, 186, 94, 2, 837, 829, 3, 2, 2, 2, 837, 833, 3, 2, 2, 2, 837, 834, 3,
	2, 2, 2, 837, 835, 3, 2, 2, 2, 837, 836, 3, 2, 2, 2, 838, 97, 3, 2, 2,
	2, 839, 841, 7, 74, 2, 2, 840, 842, 5, 68, 35, 2, 841, 840, 3, 2, 2, 2,
	841, 842, 3, 2, 2, 2, 842, 99, 3, 2, 2, 2, 843, 844, 5, 98, 50, 2, 844,
	101, 3, 2, 2, 2, 845, 846, 5, 178, 90, 2, 846, 847, 7, 137, 2, 2, 847,
	848, 5, 176, 89, 2, 848, 851, 3, 2, 2, 2, 849, 851, 5, 180, 91, 2, 850,
	845, 3, 2, 2, 2, 850, 849, 3, 2, 2, 2, 851, 103, 3, 2, 2, 2, 852, 853,
	5, 174, 88, 2, 853, 854, 7, 137, 2, 2, 854, 856, 7, 10, 2, 2, 855, 857,
	7, 45, 2, 2, 856, 855, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 858, 3, 2,
	2, 2, 858, 859, 5, 102, 52, 2, 859, 867, 3, 2, 2, 2, 860, 861, 5, 174,
	88, 2, 861, 862, 7, 137, 2, 2, 862, 863, 7, 45, 2, 2, 863, 864, 7, 10,
	2, 2, 864, 865, 5, 102, 52, 2, 865, 867, 3, 2, 2, 2, 866, 852, 3, 2, 2,
	2, 866, 860, 3, 2, 2, 2, 867, 105, 3, 2, 2, 2, 868, 869, 7, 15, 2, 2, 869,
	870, 7, 133, 2, 2, 870, 871, 5, 70, 36, 2, 871, 872, 7, 134, 2, 2, 872,
	107, 3, 2, 2, 2, 873, 874, 7, 44, 2, 2, 874, 875, 7, 133, 2, 2, 875, 876,
	5, 70, 36, 2, 876, 877, 7, 134, 2, 2, 877, 881, 3, 2, 2, 2, 878, 879, 7,
	75, 2, 2, 879, 881, 7, 44, 2, 2, 880, 873, 3, 2, 2, 2, 880, 878, 3, 2,
	2, 2, 881, 109, 3, 2, 2, 2, 882, 887, 5, 102, 52, 2, 883, 887, 5, 104,
	53, 2, 884, 887, 5, 106, 54, 2, 885, 887, 5, 108, 55, 2, 886, 882, 3, 2,
	2, 2, 886, 883, 3, 2, 2, 2, 886, 884, 3, 2, 2, 2, 886, 885, 3, 2, 2, 2,
	887, 111, 3, 2, 2, 2, 888, 892, 7, 76, 2, 2, 889, 890, 5, 174, 88, 2, 890,
	891, 7, 18, 2, 2, 891, 893, 3, 2, 2, 2, 892, 889, 3, 2, 2, 2, 892, 893,
	3, 2, 2, 2, 893, 896, 3, 2, 2, 2, 894, 897, 5, 180, 91, 2, 895, 897, 5,
	186, 94, 2, 896, 894, 3, 2, 2, 2, 896, 895, 3, 2, 2, 2, 897, 113, 3, 2,
	2, 2, 898, 899, 5, 112, 57, 2, 899, 115, 3, 2, 2, 2, 900, 901, 5, 174,
	88, 2, 901, 905, 7, 137, 2, 2, 902, 903, 5, 174, 88, 2, 903, 904, 7, 137,
	2, 2, 904, 906, 3, 2, 2, 2, 905, 902, 3, 2, 2, 2, 905, 906, 3, 2, 2, 2,
	906, 910, 3, 2, 2, 2, 907, 908, 7, 77, 2, 2, 908, 910, 7, 48, 2, 2, 909,
	900, 3, 2, 2, 2, 909, 907, 3, 2, 2, 2, 909, 910, 3, 2, 2, 2, 910, 911,
	3, 2, 2, 2, 911, 912, 7, 45, 2, 2, 912, 913, 5, 180, 91, 2, 913, 117, 3,
	2, 2, 2, 914, 915, 5, 116, 59, 2, 915, 119, 3, 2, 2, 2, 916, 918, 7, 46,
	2, 2, 917, 919, 7, 78, 2, 2, 918, 917, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2,
	919, 923, 3, 2, 2, 2, 920, 921, 5, 174, 88, 2, 921, 922, 7, 137, 2, 2,
	922, 924, 3, 2, 2, 2, 923, 920, 3, 2, 2, 2, 923, 924, 3, 2, 2, 2, 924,
	925, 3, 2, 2, 2, 925, 931, 5, 204, 103, 2, 926, 928, 7, 133, 2, 2, 927,
	929, 5, 70, 36, 2, 928, 927, 3, 2, 2, 2, 928, 929, 3, 2, 2, 2, 929, 930,
	3, 2, 2, 2, 930, 932, 7, 134, 2, 2, 931, 926, 3, 2, 2, 2, 931, 932, 3,
	2, 2, 2, 932, 121, 3, 2, 2, 2, 933, 934, 5, 120, 61, 2, 934, 123, 3, 2,
	2, 2, 935, 936, 7, 47, 2, 2, 936, 937, 5, 68, 35, 2, 937, 125, 3, 2, 2,
	2, 938, 939, 5, 124, 63, 2, 939, 127, 3, 2, 2, 2, 940, 941, 7, 36, 2, 2,
	941, 942, 5, 96, 49, 2, 942, 943, 7, 5, 2, 2, 943, 944, 5, 68, 35, 2, 944,
	945, 7, 12, 2, 2, 945, 948, 5, 68, 35, 2, 946, 947, 7, 79, 2, 2, 947, 949,
	5, 68, 35, 2, 948, 946, 3, 2, 2, 2, 948, 949, 3, 2, 2, 2, 949, 950, 3,
	2, 2, 2, 950, 951, 5, 88, 45, 2, 951, 952, 7, 80, 2, 2, 952, 129, 3, 2,
	2, 2, 953, 954, 7, 81, 2, 2, 954, 955, 9, 14, 2, 2, 955, 959, 5, 72, 37,
	2, 956, 958, 5, 88, 45, 2, 957, 956, 3, 2, 2, 2, 958, 961, 3, 2, 2, 2,
	959, 957, 3, 2, 2, 2, 959, 960, 3, 2, 2, 2, 960, 962, 3, 2, 2, 2, 961,
	959, 3, 2, 2, 2, 962, 963, 7, 84, 2, 2, 963, 131, 3, 2, 2, 2, 964, 968,
	7, 81, 2, 2, 965, 967, 5, 88, 45, 2, 966, 965, 3, 2, 2, 2, 967, 970, 3,
	2, 2, 2, 968, 966, 3, 2, 2, 2, 968, 969, 3, 2, 2, 2, 969, 971, 3, 2, 2,
	2, 970, 968, 3, 2, 2, 2, 971, 972, 7, 84, 2, 2, 972, 973, 9, 14, 2, 2,
	973, 974, 5, 72, 37, 2, 974, 133, 3, 2, 2, 2, 975, 976, 7, 85, 2, 2, 976,
	977, 5, 72, 37, 2, 977, 981, 7, 86, 2, 2, 978, 980, 5, 88, 45, 2, 979,
	978, 3, 2, 2, 2, 980, 983, 3, 2, 2, 2, 981, 979, 3, 2, 2, 2, 981, 982,
	3, 2, 2, 2, 982, 995, 3, 2, 2, 2, 983, 981, 3, 2, 2, 2, 984, 985, 7, 87,
	2, 2, 985, 986, 5, 72, 37, 2, 986, 990, 7, 86, 2, 2, 987, 989, 5, 88, 45,
	2, 988, 987, 3, 2, 2, 2, 989, 992, 3, 2, 2, 2, 990, 988, 3, 2, 2, 2, 990,
	991, 3, 2, 2, 2, 991, 994, 3, 2, 2, 2, 992, 990, 3, 2, 2, 2, 993, 984,
	3, 2, 2, 2, 994, 997, 3, 2, 2, 2, 995, 993, 3, 2, 2, 2, 995, 996, 3, 2,
	2, 2, 996, 1005, 3, 2, 2, 2, 997, 995, 3, 2, 2, 2, 998, 1002, 7, 88, 2,
	2, 999, 1001, 5, 88, 45, 2, 1000, 999, 3, 2, 2, 2, 1001, 1004, 3, 2, 2,
	2, 1002, 1000, 3, 2, 2, 2, 1002, 1003, 3, 2, 2, 2, 1003, 1006, 3, 2, 2,
	2, 1004, 1002, 3, 2, 2, 2, 1005, 998, 3, 2, 2, 2, 1005, 1006, 3, 2, 2,
	2, 1006, 1007, 3, 2, 2, 2, 1007, 1008, 7, 17, 2, 2, 1008, 1011, 7, 85,
	2, 2, 1009, 1012, 7, 132, 2, 2, 1010, 1012, 3, 2, 2, 2, 1011, 1009, 3,
	2, 2, 2, 1011, 1010, 3, 2, 2, 2, 1012, 135, 3, 2, 2, 2, 1013, 1014, 7,
	85, 2, 2, 1014, 1015, 5, 72, 37, 2, 1015, 1016, 7, 86, 2, 2, 1016, 1017,
	5, 88, 45, 2, 1017, 137, 3, 2, 2, 2, 1018, 1019, 7, 89, 2, 2, 1019, 139,
	3, 2, 2, 2, 1020, 1021, 5, 138, 70, 2, 1021, 141, 3, 2, 2, 2, 1022, 1023,
	5, 186, 94, 2, 1023, 1024, 7, 137, 2, 2, 1024, 1026, 3, 2, 2, 2, 1025,
	1022, 3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026, 1027, 3, 2, 2, 2, 1027,
	1029, 9, 15, 2, 2, 1028, 1030, 7, 45, 2, 2, 1029, 1028, 3, 2, 2, 2, 1029,
	1030, 3, 2, 2, 2, 1030, 1031, 3, 2, 2, 2, 1031, 1032, 5, 176, 89, 2, 1032,
	1034, 7, 133, 2, 2, 1033, 1035, 5, 70, 36, 2, 1034, 1033, 3, 2, 2, 2, 1034,
	1035, 3, 2, 2, 2, 1035, 1036, 3, 2, 2, 2, 1036, 1037, 7, 134, 2, 2, 1037,
	143, 3, 2, 2, 2, 1038, 1039, 5, 142, 72, 2, 1039, 145, 3, 2, 2, 2, 1040,
	1041, 7, 92, 2, 2, 1041, 147, 3, 2, 2, 2, 1042, 1043, 5, 146, 74, 2, 1043,
	149, 3, 2, 2, 2, 1044, 1045, 7, 93, 2, 2, 1045, 1046, 7, 8, 2, 2, 1046,
	1051, 5, 68, 35, 2, 1047, 1052, 5, 156, 79, 2, 1048, 1052, 5, 154, 78,
	2, 1049, 1052, 5, 158, 80, 2, 1050, 1052, 5, 152, 77, 2, 1051, 1047, 3,
	2, 2, 2, 1051, 1048, 3, 2, 2, 2, 1051, 1049, 3, 2, 2, 2, 1051, 1050, 3,
	2, 2, 2, 1052, 1053, 3, 2, 2, 2, 1053, 1051, 3, 2, 2, 2, 1053, 1054, 3,
	2, 2, 2, 1054, 1055, 3, 2, 2, 2, 1055, 1056, 7, 17, 2, 2, 1056, 1057, 7,
	93, 2, 2, 1057, 151, 3, 2, 2, 2, 1058, 1059, 7, 8, 2, 2, 1059, 1064, 5,
	68, 35, 2, 1060, 1061, 7, 130, 2, 2, 1061, 1063, 5, 68, 35, 2, 1062, 1060,
	3, 2, 2, 2, 1063, 1066, 3, 2, 2, 2, 1064, 1062, 3, 2, 2, 2, 1064, 1065,
	3, 2, 2, 2, 1065, 1070, 3, 2, 2, 2, 1066, 1064, 3, 2, 2, 2, 1067, 1069,
	5, 88, 45, 2, 1068, 1067, 3, 2, 2, 2, 1069, 1072, 3, 2, 2, 2, 1070, 1068,
	3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 153, 3, 2, 2, 2, 1072, 1070,
	3, 2, 2, 2, 1073, 1074, 7, 8, 2, 2, 1074, 1075, 7, 94, 2, 2, 1075, 1076,
	9, 11, 2, 2, 1076, 1080, 5, 68, 35, 2, 1077, 1079, 5, 88, 45, 2, 1078,
	1077, 3, 2, 2, 2, 1079, 1082, 3, 2, 2, 2, 1080, 1078, 3, 2, 2, 2, 1080,
	1081, 3, 2, 2, 2, 1081, 155, 3, 2, 2, 2, 1082, 1080, 3, 2, 2, 2, 1083,
	1084, 7, 8, 2, 2, 1084, 1085, 5, 188, 95, 2, 1085, 1086, 7, 12, 2, 2, 1086,
	1090, 5, 188, 95, 2, 1087, 1089, 5, 88, 45, 2, 1088, 1087, 3, 2, 2, 2,
	1089, 1092, 3, 2, 2, 2, 1090, 1088, 3, 2, 2, 2, 1090, 1091, 3, 2, 2, 2,
	1091, 157, 3, 2, 2, 2, 1092, 1090, 3, 2, 2, 2, 1093, 1094, 7, 8, 2, 2,
	1094, 1098, 7, 88, 2, 2, 1095, 1097, 5, 88, 45, 2, 1096, 1095, 3, 2, 2,
	2, 1097, 1100, 3, 2, 2, 2, 1098, 1096, 3, 2, 2, 2, 1098, 1099, 3, 2, 2,
	2, 1099, 159, 3, 2, 2, 2, 1100, 1098, 3, 2, 2, 2, 1101, 1102, 7, 95, 2,
	2, 1102, 1103, 5, 174, 88, 2, 1103, 161, 3, 2, 2, 2, 1104, 1105, 5, 160,
	81, 2, 1105, 163, 3, 2, 2, 2, 1106, 1107, 5, 174, 88, 2, 1107, 1108, 7,
	135, 2, 2, 1108, 165, 3, 2, 2, 2, 1109, 1113, 7, 69, 2, 2, 1110, 1112,
	5, 88, 45, 2, 1111, 1110, 3, 2, 2, 2, 1112, 1115, 3, 2, 2, 2, 1113, 1111,
	3, 2, 2, 2, 1113, 1114, 3, 2, 2, 2, 1114, 1128, 3, 2, 2, 2, 1115, 1113,
	3, 2, 2, 2, 1116, 1117, 7, 96, 2, 2, 1117, 1118, 7, 133, 2, 2, 1118, 1119,
	5, 32, 17, 2, 1119, 1123, 7, 134, 2, 2, 1120, 1122, 5, 88, 45, 2, 1121,
	1120, 3, 2, 2, 2, 1122, 1125, 3, 2, 2, 2, 1123, 1121, 3, 2, 2, 2, 1123,
	1124, 3, 2, 2, 2, 1124, 1127, 3, 2, 2, 2, 1125, 1123, 3, 2, 2, 2, 1126,
	1116, 3, 2, 2, 2, 1127, 1130, 3, 2, 2, 2, 1128, 1126, 3, 2, 2, 2, 1128,
	1129, 3, 2, 2, 2, 1129, 1138, 3, 2, 2, 2, 1130, 1128, 3, 2, 2, 2, 1131,
	1135, 7, 97, 2, 2, 1132, 1134, 5, 88, 45, 2, 1133, 1132, 3, 2, 2, 2, 1134,
	1137, 3, 2, 2, 2, 1135, 1133, 3, 2, 2, 2, 1135, 1136, 3, 2, 2, 2, 1136,
	1139, 3, 2, 2, 2, 1137, 1135, 3, 2, 2, 2, 1138, 1131, 3, 2, 2, 2, 1138,
	1139, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140, 1141, 7, 17, 2, 2, 1141,
	1142, 7, 69, 2, 2, 1142, 167, 3, 2, 2, 2, 1143, 1144, 7, 98, 2, 2, 1144,
	1145, 5, 68, 35, 2, 1145, 169, 3, 2, 2, 2, 1146, 1147, 5, 168, 85, 2, 1147,
	171, 3, 2, 2, 2, 1148, 1169, 5, 174, 88, 2, 1149, 1150, 7, 77, 2, 2, 1150,
	1154, 7, 48, 2, 2, 1151, 1155, 7, 46, 2, 2, 1152, 1155, 7, 47, 2, 2, 1153,
	1155, 5, 176, 89, 2, 1154, 1151, 3, 2, 2, 2, 1154, 1152, 3, 2, 2, 2, 1154,
	1153, 3, 2, 2, 2, 1155, 1169, 3, 2, 2, 2, 1156, 1157, 5, 174, 88, 2, 1157,
	1158, 7, 48, 2, 2, 1158, 1159, 9, 16, 2, 2, 1159, 1169, 3, 2, 2, 2, 1160,
	1161, 5, 174, 88, 2, 1161, 1162, 7, 137, 2, 2, 1162, 1163, 9, 16, 2, 2,
	1163, 1169, 3, 2, 2, 2, 1164, 1165, 5, 174, 88, 2, 1165, 1166, 7, 48, 2,
	2, 1166, 1167, 5, 176, 89, 2, 1167, 1169, 3, 2, 2, 2, 1168, 1148, 3, 2,
	2, 2, 1168, 1149, 3, 2, 2, 2, 1168, 1156, 3, 2, 2, 2, 1168, 1160, 3, 2,
	2, 2, 1168, 1164, 3, 2, 2, 2, 1169, 173, 3, 2, 2, 2, 1170, 1171, 7, 131,
	2, 2, 1171, 175, 3, 2, 2, 2, 1172, 1185, 5, 174, 88, 2, 1173, 1185, 7,
	99, 2, 2, 1174, 1185, 7, 6, 2, 2, 1175, 1185, 7, 7, 2, 2, 1176, 1185, 7,
	100, 2, 2, 1177, 1185, 7, 15, 2, 2, 1178, 1185, 7, 44, 2, 2, 1179, 1185,
	7, 95, 2, 2, 1180, 1185, 7, 101, 2, 2, 1181, 1185, 7, 68, 2, 2, 1182, 1185,
	7, 102, 2, 2, 1183, 1185, 7, 39, 2, 2, 1184, 1172, 3, 2, 2, 2, 1184, 1173,
	3, 2, 2, 2, 1184, 1174, 3, 2, 2, 2, 1184, 1175, 3, 2, 2, 2, 1184, 1176,
	3, 2, 2, 2, 1184, 1177, 3, 2, 2, 2, 1184, 1178, 3, 2, 2, 2, 1184, 1179,
	3, 2, 2, 2, 1184, 1180, 3, 2, 2, 2, 1184, 1181, 3, 2, 2, 2, 1184, 1182,
	3, 2, 2, 2, 1184, 1183, 3, 2, 2, 2, 1185, 177, 3, 2, 2, 2, 1186, 1196,
	5, 194, 98, 2, 1187, 1188, 5, 174, 88, 2, 1188, 1190, 7, 133, 2, 2, 1189,
	1191, 5, 70, 36, 2, 1190, 1189, 3, 2, 2, 2, 1190, 1191, 3, 2, 2, 2, 1191,
	1192, 3, 2, 2, 2, 1192, 1193, 7, 134, 2, 2, 1193, 1196, 3, 2, 2, 2, 1194,
	1196, 5, 174, 88, 2, 1195, 1186, 3, 2, 2, 2, 1195, 1187, 3, 2, 2, 2, 1195,
	1194, 3, 2, 2, 2, 1196, 179, 3, 2, 2, 2, 1197, 1200, 5, 172, 87, 2, 1198,
	1200, 7, 68, 2, 2, 1199, 1197, 3, 2, 2, 2, 1199, 1198, 3, 2, 2, 2, 1200,
	1201, 3, 2, 2, 2, 1201, 1203, 7, 133, 2, 2, 1202, 1204, 5, 70, 36, 2, 1203,
	1202, 3, 2, 2, 2, 1203, 1204, 3, 2, 2, 2, 1204, 1205, 3, 2, 2, 2, 1205,
	1206, 7, 134, 2, 2, 1206, 181, 3, 2, 2, 2, 1207, 1208, 5, 174, 88, 2, 1208,
	1209, 7, 29, 2, 2, 1209, 1210, 5, 70, 36, 2, 1210, 1211, 7, 31, 2, 2, 1211,
	183, 3, 2, 2, 2, 1212, 1213, 5, 174, 88, 2, 1213, 1214, 7, 28, 2, 2, 1214,
	185, 3, 2, 2, 2, 1215, 1216, 5, 172, 87, 2, 1216, 187, 3, 2, 2, 2, 1217,
	1235, 5, 116, 59, 2, 1218, 1219, 5, 178, 90, 2, 1219, 1220, 7, 137, 2,
	2, 1220, 1221, 5, 176, 89, 2, 1221, 1235, 3, 2, 2, 2, 1222, 1235, 5, 200,
	101, 2, 1223, 1235, 5, 180, 91, 2, 1224, 1235, 5, 182, 92, 2, 1225, 1235,
	5, 184, 93, 2, 1226, 1235, 5, 186, 94, 2, 1227, 1235, 5, 196, 99, 2, 1228,
	1235, 5, 198, 100, 2, 1229, 1235, 7, 129, 2, 2, 1230, 1235, 7, 127, 2,
	2, 1231, 1235, 7, 128, 2, 2, 1232, 1235, 7, 145, 2, 2, 1233, 1235, 7, 146,
	2, 2, 1234, 1217, 3, 2, 2, 2, 1234, 1218, 3, 2, 2, 2, 1234, 1222, 3, 2,
	2, 2, 1234, 1223, 3, 2, 2, 2, 1234, 1224, 3, 2, 2, 2, 1234, 1225, 3, 2,
	2, 2, 1234, 1226, 3, 2, 2, 2, 1234, 1227, 3, 2, 2, 2, 1234, 1228, 3, 2,
	2, 2, 1234, 1229, 3, 2, 2, 2, 1234, 1230, 3, 2, 2, 2, 1234, 1231, 3, 2,
	2, 2, 1234, 1232, 3, 2, 2, 2, 1234, 1233, 3, 2, 2, 2, 1235, 189, 3, 2,
	2, 2, 1236, 1238, 10, 17, 2, 2, 1237, 1236, 3, 2, 2, 2, 1238, 1239, 3,
	2, 2, 2, 1239, 1237, 3, 2, 2, 2, 1239, 1240, 3, 2, 2, 2, 1240, 191, 3,
	2, 2, 2, 1241, 1243, 10, 18, 2, 2, 1242, 1241, 3, 2, 2, 2, 1243, 1244,
	3, 2, 2, 2, 1244, 1242, 3, 2, 2, 2, 1244, 1245, 3, 2, 2, 2, 1245, 193,
	3, 2, 2, 2, 1246, 1247, 5, 174, 88, 2, 1247, 1248, 7, 29, 2, 2, 1248, 1249,
	5, 70, 36, 2, 1249, 1250, 7, 31, 2, 2, 1250, 195, 3, 2, 2, 2, 1251, 1252,
	7, 136, 2, 2, 1252, 197, 3, 2, 2, 2, 1253, 1254, 9, 19, 2, 2, 1254, 199,
	3, 2, 2, 2, 1255, 1256, 5, 202, 102, 2, 1256, 1257, 7, 133, 2, 2, 1257,
	1262, 5, 68, 35, 2, 1258, 1259, 7, 130, 2, 2, 1259, 1261, 5, 68, 35, 2,
	1260, 1258, 3, 2, 2, 2, 1261, 1264, 3, 2, 2, 2, 1262, 1260, 3, 2, 2, 2,
	1262, 1263, 3, 2, 2, 2, 1263, 1265, 3, 2, 2, 2, 1264, 1262, 3, 2, 2, 2,
	1265, 1266, 7, 134, 2, 2, 1266, 201, 3, 2, 2, 2, 1267, 1268, 9, 20, 2,
	2, 1268, 203, 3, 2, 2, 2, 1269, 1272, 5, 202, 102, 2, 1270, 1272, 5, 174,
	88, 2, 1271, 1269, 3, 2, 2, 2, 1271, 1270, 3, 2, 2, 2, 1272, 205, 3, 2,
	2, 2, 160, 210, 218, 222, 227, 242, 247, 258, 262, 266, 273, 280, 283,
	286, 292, 298, 301, 304, 306, 311, 314, 322, 326, 332, 351, 356, 358, 365,
	370, 372, 378, 387, 389, 394, 396, 402, 410, 415, 418, 424, 428, 430, 441,
	443, 453, 455, 462, 465, 468, 480, 485, 488, 492, 497, 500, 504, 507, 510,
	518, 521, 526, 531, 539, 541, 547, 551, 554, 557, 561, 565, 572, 580, 586,
	589, 594, 599, 604, 610, 620, 626, 629, 633, 636, 644, 648, 655, 660, 665,
	669, 672, 678, 693, 701, 704, 710, 715, 725, 733, 737, 744, 751, 759, 767,
	770, 801, 815, 823, 827, 837, 841, 850, 856, 866, 880, 886, 892, 896, 905,
	909, 918, 923, 928, 931, 948, 959, 968, 981, 990, 995, 1002, 1005, 1011,
	1025, 1029, 1034, 1051, 1053, 1064, 1070, 1080, 1090, 1098, 1113, 1123,
	1128, 1135, 1138, 1154, 1168, 1184, 1190, 1195, 1199, 1203, 1234, 1239,
	1244, 1262, 1271,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'RELEASE'", "'NULL'", "'='", "'TYPE'", "'UPDATE'", "'CASE'", "'ON'",
	"'DYNAMIC'", "'-'", "'TO'", "'FROM'", "'REF'", "'OPEN'", "'FORWARD'", "'END'",
	"'`'", "'WITHIN'", "'AUTOINSTANTIATE'", "'DESCRIPTOR'", "'VARIABLES'",
	"'GLOBAL'", "'SHARED'", "'INDIRECT'", "'{'", "'}'", "'[]'", "'['", "'+'",
	"']'", "'FUNCTION'", "'SUBROUTINE'", "'LIBRARY'", "'ALIAS'", "'FOR'", "'RPCFUNC'",
	"'THROWS'", "'READONLY'", "'PROTOTYPES'", "'PUBLIC'", "'PRIVATE'", "'PROTECTED'",
	"'CLOSE'", "'EVENT'", "'CREATE'", "'DESTROY'", "'::'", "'PUBLIC:'", "'PRIVATE:'",
	"'PROTECTED:'", "'PRIVATEREAD'", "'PRIVATEWRITE'", "'PROTECTEDREAD'", "'PROTECTEDWRITE'",
	"'LOCAL'", "'OR'", "'AND'", "'NOT'", "'>'", "'<'", "'<>'", "'>='", "'<='",
	"'*'", "'/'", "'^'", "'DESCRIBE'", "'TRY'", "'+='", "'-='", "'*='", "'/='",
	"'RETURN'", "'HALT'", "'CALL'", "'SUPER'", "'USING'", "'STEP'", "'NEXT'",
	"'DO'", "'WHILE'", "'UNTIL'", "'LOOP'", "'IF'", "'THEN'", "'ELSEIF'", "'ELSE'",
	"'CONTINUE'", "'POST'", "'TRIGGER'", "'EXIT'", "'CHOOSE'", "'IS'", "'GOTO'",
	"'CATCH'", "'FINALLY'", "'THROW'", "'SELECT'", "'DELETE'", "'INSERT'",
	"'TIME'", "'TRUE'", "'FALSE'", "'ANY'", "'BLOB'", "'BOOLEAN'", "'BYTE'",
	"'CHARACTER'", "'CHAR'", "'DATE'", "'DATETIME'", "'DECIMAL'", "'DEC'",
	"'DOUBLE'", "'INTEGER'", "'INT'", "'LONG'", "'LONGLONG'", "'REAL'", "'STRING'",
	"'UNSIGNEDINTEGER'", "'UINT'", "'UNSIGNEDLONG'", "'ULONG'", "'WINDOW'",
	"", "", "", "','", "", "';'", "'('", "')'", "':'", "", "", "'\"'", "",
	"", "", "'\r\n'", "", "", "", "", "", "'???'", "'||'", "'astroot'", "'header'",
	"'body'", "'datatypedecl'", "'forwarddecl'", "'typevariablesdecl'", "'globalvariablesdecl'",
	"'variabledecl'", "'constantdecl'", "'functionforwarddecl'", "'functionsforwarddecl'",
	"'functionbody'", "'onbody'", "'eventbody'", "'statement'", "'sqlstatement'",
	"'windowprop'", "'windowsubprop'", "'windowsubpropname'", "'windowsubpropval'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "DQUOTED_STRING",
	"QUOTED_STRING", "ENUM", "COMMA", "ID", "SEMI", "LPAREN", "RPAREN", "COLON",
	"NUMBER", "DOT", "DQUOTE", "SL_COMMENT", "ML_COMMENT", "WS", "NEWLINE",
	"LINE_CONTINUATION", "EXPORT_HEADER", "DATE", "TIME", "BINDPAR", "TQ",
	"DOUBLE_PIPE", "ASTROOT", "HEADER", "BOODY", "DATATYPEDECL", "FORWARDDECL",
	"TYPEVARIABLESDECL", "GLOBALVARIABLESDECL", "VARIABLEDECL", "CONSTANTDECL",
	"FUNCTIONFORWARDDECL", "FUNCTIONSFORWARDDECL", "FUNCTIONBODY", "ONBODY",
	"EVENTBODY", "STATEMENT", "SQLSTATEMENT", "WINDOWPROP", "WINDOWSUBPROP",
	"WINDOWSUBPROPNAME", "WINDOWSUBPROPVAL", "PBSELECT",
}

var ruleNames = []string{
	"start_rule", "header_rule", "body_rule", "export_header", "release_information",
	"window_property_line", "window_property", "window_property_attributes_sub",
	"window_property_attribute_sub", "attribute_name", "attribute_value", "forward_decl",
	"datatype_decl", "type_variables_decl", "global_variables_decl", "variable_decl_sub",
	"variable_decl", "decimal_decl_sub", "array_decl_sub", "constant_decl_sub",
	"constant_decl", "function_forward_decl", "parameter_sub", "parameters_list_sub",
	"functions_forward_decl", "function_body", "on_body", "event_forward_decl_sub",
	"event_forward_decl", "event_body", "access_modif", "access_modif_part",
	"scope_modif", "expression", "expression_list", "boolean_expression", "condition_or",
	"condition_and", "condition_not", "condition_comparison", "add_expr", "mul_expr",
	"unary_sign_expr", "statement", "statement_sub", "assignment_sub", "assignment_statement",
	"lvalue_sub", "return_sub", "return_statement", "function_call_expression_sub",
	"function_virtual_call_expression_sub", "open_call_sub", "close_call_sub",
	"function_call_statement", "super_call_sub", "super_call_statement", "event_call_statement_sub",
	"event_call_statement", "create_call_sub", "create_call_statement", "destroy_call_sub",
	"destroy_call_statement", "for_loop_statement", "do_while_loop_statement",
	"do_loop_while_statement", "if_statement", "if_simple_statement", "continue_sub",
	"continue_statement", "post_event_sub", "post_event", "exit_statement_sub",
	"exit_statement", "choose_statement", "choose_case_value_sub", "choose_case_cond_sub",
	"choose_case_range_sub", "choose_case_else_sub", "goto_stat_sub", "goto_stat",
	"label_stat", "try_catch_block", "throw_stat_sub", "throw_stat", "identifier",
	"identifier_name", "identifier_name_ex", "atom_sub", "atom_sub_call1",
	"atom_sub_array1", "atom_sub_ref1", "atom_sub_member1", "atom", "swallow_to_semi",
	"swallow_to_newline", "array_access_atom", "numeric_atom", "boolean_atom",
	"cast_expression", "data_type_sub", "data_type_name",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type powerbuilderParser struct {
	*antlr.BaseParser
}

func NewpowerbuilderParser(input antlr.TokenStream) *powerbuilderParser {
	this := new(powerbuilderParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "powerbuilder.g4"

	return this
}

// powerbuilderParser tokens.
const (
	powerbuilderParserEOF                  = antlr.TokenEOF
	powerbuilderParserT__0                 = 1
	powerbuilderParserT__1                 = 2
	powerbuilderParserT__2                 = 3
	powerbuilderParserT__3                 = 4
	powerbuilderParserT__4                 = 5
	powerbuilderParserT__5                 = 6
	powerbuilderParserT__6                 = 7
	powerbuilderParserT__7                 = 8
	powerbuilderParserT__8                 = 9
	powerbuilderParserT__9                 = 10
	powerbuilderParserT__10                = 11
	powerbuilderParserT__11                = 12
	powerbuilderParserT__12                = 13
	powerbuilderParserT__13                = 14
	powerbuilderParserT__14                = 15
	powerbuilderParserT__15                = 16
	powerbuilderParserT__16                = 17
	powerbuilderParserT__17                = 18
	powerbuilderParserT__18                = 19
	powerbuilderParserT__19                = 20
	powerbuilderParserT__20                = 21
	powerbuilderParserT__21                = 22
	powerbuilderParserT__22                = 23
	powerbuilderParserT__23                = 24
	powerbuilderParserT__24                = 25
	powerbuilderParserT__25                = 26
	powerbuilderParserT__26                = 27
	powerbuilderParserT__27                = 28
	powerbuilderParserT__28                = 29
	powerbuilderParserT__29                = 30
	powerbuilderParserT__30                = 31
	powerbuilderParserT__31                = 32
	powerbuilderParserT__32                = 33
	powerbuilderParserT__33                = 34
	powerbuilderParserT__34                = 35
	powerbuilderParserT__35                = 36
	powerbuilderParserT__36                = 37
	powerbuilderParserT__37                = 38
	powerbuilderParserT__38                = 39
	powerbuilderParserT__39                = 40
	powerbuilderParserT__40                = 41
	powerbuilderParserT__41                = 42
	powerbuilderParserT__42                = 43
	powerbuilderParserT__43                = 44
	powerbuilderParserT__44                = 45
	powerbuilderParserT__45                = 46
	powerbuilderParserT__46                = 47
	powerbuilderParserT__47                = 48
	powerbuilderParserT__48                = 49
	powerbuilderParserT__49                = 50
	powerbuilderParserT__50                = 51
	powerbuilderParserT__51                = 52
	powerbuilderParserT__52                = 53
	powerbuilderParserT__53                = 54
	powerbuilderParserT__54                = 55
	powerbuilderParserT__55                = 56
	powerbuilderParserT__56                = 57
	powerbuilderParserT__57                = 58
	powerbuilderParserT__58                = 59
	powerbuilderParserT__59                = 60
	powerbuilderParserT__60                = 61
	powerbuilderParserT__61                = 62
	powerbuilderParserT__62                = 63
	powerbuilderParserT__63                = 64
	powerbuilderParserT__64                = 65
	powerbuilderParserT__65                = 66
	powerbuilderParserT__66                = 67
	powerbuilderParserT__67                = 68
	powerbuilderParserT__68                = 69
	powerbuilderParserT__69                = 70
	powerbuilderParserT__70                = 71
	powerbuilderParserT__71                = 72
	powerbuilderParserT__72                = 73
	powerbuilderParserT__73                = 74
	powerbuilderParserT__74                = 75
	powerbuilderParserT__75                = 76
	powerbuilderParserT__76                = 77
	powerbuilderParserT__77                = 78
	powerbuilderParserT__78                = 79
	powerbuilderParserT__79                = 80
	powerbuilderParserT__80                = 81
	powerbuilderParserT__81                = 82
	powerbuilderParserT__82                = 83
	powerbuilderParserT__83                = 84
	powerbuilderParserT__84                = 85
	powerbuilderParserT__85                = 86
	powerbuilderParserT__86                = 87
	powerbuilderParserT__87                = 88
	powerbuilderParserT__88                = 89
	powerbuilderParserT__89                = 90
	powerbuilderParserT__90                = 91
	powerbuilderParserT__91                = 92
	powerbuilderParserT__92                = 93
	powerbuilderParserT__93                = 94
	powerbuilderParserT__94                = 95
	powerbuilderParserT__95                = 96
	powerbuilderParserT__96                = 97
	powerbuilderParserT__97                = 98
	powerbuilderParserT__98                = 99
	powerbuilderParserT__99                = 100
	powerbuilderParserT__100               = 101
	powerbuilderParserT__101               = 102
	powerbuilderParserT__102               = 103
	powerbuilderParserT__103               = 104
	powerbuilderParserT__104               = 105
	powerbuilderParserT__105               = 106
	powerbuilderParserT__106               = 107
	powerbuilderParserT__107               = 108
	powerbuilderParserT__108               = 109
	powerbuilderParserT__109               = 110
	powerbuilderParserT__110               = 111
	powerbuilderParserT__111               = 112
	powerbuilderParserT__112               = 113
	powerbuilderParserT__113               = 114
	powerbuilderParserT__114               = 115
	powerbuilderParserT__115               = 116
	powerbuilderParserT__116               = 117
	powerbuilderParserT__117               = 118
	powerbuilderParserT__118               = 119
	powerbuilderParserT__119               = 120
	powerbuilderParserT__120               = 121
	powerbuilderParserT__121               = 122
	powerbuilderParserT__122               = 123
	powerbuilderParserT__123               = 124
	powerbuilderParserDQUOTED_STRING       = 125
	powerbuilderParserQUOTED_STRING        = 126
	powerbuilderParserENUM                 = 127
	powerbuilderParserCOMMA                = 128
	powerbuilderParserID                   = 129
	powerbuilderParserSEMI                 = 130
	powerbuilderParserLPAREN               = 131
	powerbuilderParserRPAREN               = 132
	powerbuilderParserCOLON                = 133
	powerbuilderParserNUMBER               = 134
	powerbuilderParserDOT                  = 135
	powerbuilderParserDQUOTE               = 136
	powerbuilderParserSL_COMMENT           = 137
	powerbuilderParserML_COMMENT           = 138
	powerbuilderParserWS                   = 139
	powerbuilderParserNEWLINE              = 140
	powerbuilderParserLINE_CONTINUATION    = 141
	powerbuilderParserEXPORT_HEADER        = 142
	powerbuilderParserDATE                 = 143
	powerbuilderParserTIME                 = 144
	powerbuilderParserBINDPAR              = 145
	powerbuilderParserTQ                   = 146
	powerbuilderParserDOUBLE_PIPE          = 147
	powerbuilderParserASTROOT              = 148
	powerbuilderParserHEADER               = 149
	powerbuilderParserBOODY                = 150
	powerbuilderParserDATATYPEDECL         = 151
	powerbuilderParserFORWARDDECL          = 152
	powerbuilderParserTYPEVARIABLESDECL    = 153
	powerbuilderParserGLOBALVARIABLESDECL  = 154
	powerbuilderParserVARIABLEDECL         = 155
	powerbuilderParserCONSTANTDECL         = 156
	powerbuilderParserFUNCTIONFORWARDDECL  = 157
	powerbuilderParserFUNCTIONSFORWARDDECL = 158
	powerbuilderParserFUNCTIONBODY         = 159
	powerbuilderParserONBODY               = 160
	powerbuilderParserEVENTBODY            = 161
	powerbuilderParserSTATEMENT            = 162
	powerbuilderParserSQLSTATEMENT         = 163
	powerbuilderParserWINDOWPROP           = 164
	powerbuilderParserWINDOWSUBPROP        = 165
	powerbuilderParserWINDOWSUBPROPNAME    = 166
	powerbuilderParserWINDOWSUBPROPVAL     = 167
	powerbuilderParserPBSELECT             = 168
)

// powerbuilderParser rules.
const (
	powerbuilderParserRULE_start_rule                           = 0
	powerbuilderParserRULE_header_rule                          = 1
	powerbuilderParserRULE_body_rule                            = 2
	powerbuilderParserRULE_export_header                        = 3
	powerbuilderParserRULE_release_information                  = 4
	powerbuilderParserRULE_window_property_line                 = 5
	powerbuilderParserRULE_window_property                      = 6
	powerbuilderParserRULE_window_property_attributes_sub       = 7
	powerbuilderParserRULE_window_property_attribute_sub        = 8
	powerbuilderParserRULE_attribute_name                       = 9
	powerbuilderParserRULE_attribute_value                      = 10
	powerbuilderParserRULE_forward_decl                         = 11
	powerbuilderParserRULE_datatype_decl                        = 12
	powerbuilderParserRULE_type_variables_decl                  = 13
	powerbuilderParserRULE_global_variables_decl                = 14
	powerbuilderParserRULE_variable_decl_sub                    = 15
	powerbuilderParserRULE_variable_decl                        = 16
	powerbuilderParserRULE_decimal_decl_sub                     = 17
	powerbuilderParserRULE_array_decl_sub                       = 18
	powerbuilderParserRULE_constant_decl_sub                    = 19
	powerbuilderParserRULE_constant_decl                        = 20
	powerbuilderParserRULE_function_forward_decl                = 21
	powerbuilderParserRULE_parameter_sub                        = 22
	powerbuilderParserRULE_parameters_list_sub                  = 23
	powerbuilderParserRULE_functions_forward_decl               = 24
	powerbuilderParserRULE_function_body                        = 25
	powerbuilderParserRULE_on_body                              = 26
	powerbuilderParserRULE_event_forward_decl_sub               = 27
	powerbuilderParserRULE_event_forward_decl                   = 28
	powerbuilderParserRULE_event_body                           = 29
	powerbuilderParserRULE_access_modif                         = 30
	powerbuilderParserRULE_access_modif_part                    = 31
	powerbuilderParserRULE_scope_modif                          = 32
	powerbuilderParserRULE_expression                           = 33
	powerbuilderParserRULE_expression_list                      = 34
	powerbuilderParserRULE_boolean_expression                   = 35
	powerbuilderParserRULE_condition_or                         = 36
	powerbuilderParserRULE_condition_and                        = 37
	powerbuilderParserRULE_condition_not                        = 38
	powerbuilderParserRULE_condition_comparison                 = 39
	powerbuilderParserRULE_add_expr                             = 40
	powerbuilderParserRULE_mul_expr                             = 41
	powerbuilderParserRULE_unary_sign_expr                      = 42
	powerbuilderParserRULE_statement                            = 43
	powerbuilderParserRULE_statement_sub                        = 44
	powerbuilderParserRULE_assignment_sub                       = 45
	powerbuilderParserRULE_assignment_statement                 = 46
	powerbuilderParserRULE_lvalue_sub                           = 47
	powerbuilderParserRULE_return_sub                           = 48
	powerbuilderParserRULE_return_statement                     = 49
	powerbuilderParserRULE_function_call_expression_sub         = 50
	powerbuilderParserRULE_function_virtual_call_expression_sub = 51
	powerbuilderParserRULE_open_call_sub                        = 52
	powerbuilderParserRULE_close_call_sub                       = 53
	powerbuilderParserRULE_function_call_statement              = 54
	powerbuilderParserRULE_super_call_sub                       = 55
	powerbuilderParserRULE_super_call_statement                 = 56
	powerbuilderParserRULE_event_call_statement_sub             = 57
	powerbuilderParserRULE_event_call_statement                 = 58
	powerbuilderParserRULE_create_call_sub                      = 59
	powerbuilderParserRULE_create_call_statement                = 60
	powerbuilderParserRULE_destroy_call_sub                     = 61
	powerbuilderParserRULE_destroy_call_statement               = 62
	powerbuilderParserRULE_for_loop_statement                   = 63
	powerbuilderParserRULE_do_while_loop_statement              = 64
	powerbuilderParserRULE_do_loop_while_statement              = 65
	powerbuilderParserRULE_if_statement                         = 66
	powerbuilderParserRULE_if_simple_statement                  = 67
	powerbuilderParserRULE_continue_sub                         = 68
	powerbuilderParserRULE_continue_statement                   = 69
	powerbuilderParserRULE_post_event_sub                       = 70
	powerbuilderParserRULE_post_event                           = 71
	powerbuilderParserRULE_exit_statement_sub                   = 72
	powerbuilderParserRULE_exit_statement                       = 73
	powerbuilderParserRULE_choose_statement                     = 74
	powerbuilderParserRULE_choose_case_value_sub                = 75
	powerbuilderParserRULE_choose_case_cond_sub                 = 76
	powerbuilderParserRULE_choose_case_range_sub                = 77
	powerbuilderParserRULE_choose_case_else_sub                 = 78
	powerbuilderParserRULE_goto_stat_sub                        = 79
	powerbuilderParserRULE_goto_stat                            = 80
	powerbuilderParserRULE_label_stat                           = 81
	powerbuilderParserRULE_try_catch_block                      = 82
	powerbuilderParserRULE_throw_stat_sub                       = 83
	powerbuilderParserRULE_throw_stat                           = 84
	powerbuilderParserRULE_identifier                           = 85
	powerbuilderParserRULE_identifier_name                      = 86
	powerbuilderParserRULE_identifier_name_ex                   = 87
	powerbuilderParserRULE_atom_sub                             = 88
	powerbuilderParserRULE_atom_sub_call1                       = 89
	powerbuilderParserRULE_atom_sub_array1                      = 90
	powerbuilderParserRULE_atom_sub_ref1                        = 91
	powerbuilderParserRULE_atom_sub_member1                     = 92
	powerbuilderParserRULE_atom                                 = 93
	powerbuilderParserRULE_swallow_to_semi                      = 94
	powerbuilderParserRULE_swallow_to_newline                   = 95
	powerbuilderParserRULE_array_access_atom                    = 96
	powerbuilderParserRULE_numeric_atom                         = 97
	powerbuilderParserRULE_boolean_atom                         = 98
	powerbuilderParserRULE_cast_expression                      = 99
	powerbuilderParserRULE_data_type_sub                        = 100
	powerbuilderParserRULE_data_type_name                       = 101
)

// IStart_ruleContext is an interface to support dynamic dispatch.
type IStart_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_ruleContext differentiates from other interfaces.
	IsStart_ruleContext()
}

type Start_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_ruleContext() *Start_ruleContext {
	var p = new(Start_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_start_rule
	return p
}

func (*Start_ruleContext) IsStart_ruleContext() {}

func NewStart_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_ruleContext {
	var p = new(Start_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_start_rule

	return p
}

func (s *Start_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_ruleContext) Header_rule() IHeader_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHeader_ruleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHeader_ruleContext)
}

func (s *Start_ruleContext) EOF() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserEOF, 0)
}

func (s *Start_ruleContext) AllBody_rule() []IBody_ruleContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBody_ruleContext)(nil)).Elem())
	var tst = make([]IBody_ruleContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBody_ruleContext)
		}
	}

	return tst
}

func (s *Start_ruleContext) Body_rule(i int) IBody_ruleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBody_ruleContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBody_ruleContext)
}

func (s *Start_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterStart_rule(s)
	}
}

func (s *Start_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitStart_rule(s)
	}
}

func (s *Start_ruleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitStart_rule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Start_rule() (localctx IStart_ruleContext) {
	localctx = NewStart_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, powerbuilderParserRULE_start_rule)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(204)
		p.Header_rule()
	}
	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__6)|(1<<powerbuilderParserT__13)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__21)|(1<<powerbuilderParserT__22)|(1<<powerbuilderParserT__29)|(1<<powerbuilderParserT__30))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__42-39))|(1<<(powerbuilderParserT__46-39))|(1<<(powerbuilderParserT__47-39))|(1<<(powerbuilderParserT__48-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) || _la == powerbuilderParserSEMI {
		{
			p.SetState(205)
			p.Body_rule()
		}

		p.SetState(210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(211)
		p.Match(powerbuilderParserEOF)
	}

	return localctx
}

// IHeader_ruleContext is an interface to support dynamic dispatch.
type IHeader_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHeader_ruleContext differentiates from other interfaces.
	IsHeader_ruleContext()
}

type Header_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHeader_ruleContext() *Header_ruleContext {
	var p = new(Header_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_header_rule
	return p
}

func (*Header_ruleContext) IsHeader_ruleContext() {}

func NewHeader_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Header_ruleContext {
	var p = new(Header_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_header_rule

	return p
}

func (s *Header_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Header_ruleContext) AllExport_header() []IExport_headerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExport_headerContext)(nil)).Elem())
	var tst = make([]IExport_headerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExport_headerContext)
		}
	}

	return tst
}

func (s *Header_ruleContext) Export_header(i int) IExport_headerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExport_headerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExport_headerContext)
}

func (s *Header_ruleContext) Release_information() IRelease_informationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelease_informationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelease_informationContext)
}

func (s *Header_ruleContext) AllWindow_property_line() []IWindow_property_lineContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_property_lineContext)(nil)).Elem())
	var tst = make([]IWindow_property_lineContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_property_lineContext)
		}
	}

	return tst
}

func (s *Header_ruleContext) Window_property_line(i int) IWindow_property_lineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_property_lineContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_property_lineContext)
}

func (s *Header_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Header_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Header_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterHeader_rule(s)
	}
}

func (s *Header_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitHeader_rule(s)
	}
}

func (s *Header_ruleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitHeader_rule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Header_rule() (localctx IHeader_ruleContext) {
	localctx = NewHeader_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, powerbuilderParserRULE_header_rule)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(216)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(213)
				p.Export_header()
			}

		}
		p.SetState(218)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
	}
	p.SetState(220)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__0 {
		{
			p.SetState(219)
			p.Release_information()
		}

	}
	p.SetState(225)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(222)
				p.Window_property_line()
			}

		}
		p.SetState(227)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// IBody_ruleContext is an interface to support dynamic dispatch.
type IBody_ruleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBody_ruleContext differentiates from other interfaces.
	IsBody_ruleContext()
}

type Body_ruleContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBody_ruleContext() *Body_ruleContext {
	var p = new(Body_ruleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_body_rule
	return p
}

func (*Body_ruleContext) IsBody_ruleContext() {}

func NewBody_ruleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Body_ruleContext {
	var p = new(Body_ruleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_body_rule

	return p
}

func (s *Body_ruleContext) GetParser() antlr.Parser { return s.parser }

func (s *Body_ruleContext) Datatype_decl() IDatatype_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDatatype_declContext)
}

func (s *Body_ruleContext) Access_modif() IAccess_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modifContext)
}

func (s *Body_ruleContext) Forward_decl() IForward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForward_declContext)
}

func (s *Body_ruleContext) Type_variables_decl() IType_variables_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_variables_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_variables_declContext)
}

func (s *Body_ruleContext) Global_variables_decl() IGlobal_variables_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGlobal_variables_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGlobal_variables_declContext)
}

func (s *Body_ruleContext) Variable_decl() IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Body_ruleContext) Constant_decl() IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *Body_ruleContext) Function_forward_decl() IFunction_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_forward_declContext)
}

func (s *Body_ruleContext) Functions_forward_decl() IFunctions_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctions_forward_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctions_forward_declContext)
}

func (s *Body_ruleContext) Function_body() IFunction_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_bodyContext)
}

func (s *Body_ruleContext) On_body() IOn_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_bodyContext)
}

func (s *Body_ruleContext) Event_body() IEvent_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_bodyContext)
}

func (s *Body_ruleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Body_ruleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Body_ruleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterBody_rule(s)
	}
}

func (s *Body_ruleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitBody_rule(s)
	}
}

func (s *Body_ruleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitBody_rule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Body_rule() (localctx IBody_ruleContext) {
	localctx = NewBody_ruleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, powerbuilderParserRULE_body_rule)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(240)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(228)
			p.Datatype_decl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(229)
			p.Access_modif()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(230)
			p.Forward_decl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(231)
			p.Type_variables_decl()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(232)
			p.Global_variables_decl()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(233)
			p.Variable_decl()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(234)
			p.Constant_decl()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(235)
			p.Function_forward_decl()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(236)
			p.Functions_forward_decl()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(237)
			p.Function_body()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(238)
			p.On_body()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(239)
			p.Event_body()
		}

	}

	return localctx
}

// IExport_headerContext is an interface to support dynamic dispatch.
type IExport_headerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExport_headerContext differentiates from other interfaces.
	IsExport_headerContext()
}

type Export_headerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExport_headerContext() *Export_headerContext {
	var p = new(Export_headerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_export_header
	return p
}

func (*Export_headerContext) IsExport_headerContext() {}

func NewExport_headerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Export_headerContext {
	var p = new(Export_headerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_export_header

	return p
}

func (s *Export_headerContext) GetParser() antlr.Parser { return s.parser }

func (s *Export_headerContext) NEWLINE() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNEWLINE, 0)
}

func (s *Export_headerContext) EOF() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserEOF, 0)
}

func (s *Export_headerContext) Swallow_to_newline() ISwallow_to_newlineContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwallow_to_newlineContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwallow_to_newlineContext)
}

func (s *Export_headerContext) EXPORT_HEADER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserEXPORT_HEADER, 0)
}

func (s *Export_headerContext) PBSELECT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserPBSELECT, 0)
}

func (s *Export_headerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Export_headerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Export_headerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterExport_header(s)
	}
}

func (s *Export_headerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitExport_header(s)
	}
}

func (s *Export_headerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitExport_header(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Export_header() (localctx IExport_headerContext) {
	localctx = NewExport_headerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, powerbuilderParserRULE_export_header)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(245)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(242)
			p.Swallow_to_newline()
		}

	case 2:
		{
			p.SetState(243)
			p.Match(powerbuilderParserEXPORT_HEADER)
		}

	case 3:
		{
			p.SetState(244)
			p.Match(powerbuilderParserPBSELECT)
		}

	}
	p.SetState(247)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserEOF || _la == powerbuilderParserNEWLINE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IRelease_informationContext is an interface to support dynamic dispatch.
type IRelease_informationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelease_informationContext differentiates from other interfaces.
	IsRelease_informationContext()
}

type Release_informationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_informationContext() *Release_informationContext {
	var p = new(Release_informationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_release_information
	return p
}

func (*Release_informationContext) IsRelease_informationContext() {}

func NewRelease_informationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_informationContext {
	var p = new(Release_informationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_release_information

	return p
}

func (s *Release_informationContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_informationContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, 0)
}

func (s *Release_informationContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *Release_informationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_informationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_informationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterRelease_information(s)
	}
}

func (s *Release_informationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitRelease_information(s)
	}
}

func (s *Release_informationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitRelease_information(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Release_information() (localctx IRelease_informationContext) {
	localctx = NewRelease_informationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, powerbuilderParserRULE_release_information)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(249)
		p.Match(powerbuilderParserT__0)
	}
	{
		p.SetState(250)
		p.Match(powerbuilderParserNUMBER)
	}
	{
		p.SetState(251)
		p.Match(powerbuilderParserSEMI)
	}

	return localctx
}

// IWindow_property_lineContext is an interface to support dynamic dispatch.
type IWindow_property_lineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_property_lineContext differentiates from other interfaces.
	IsWindow_property_lineContext()
}

type Window_property_lineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_property_lineContext() *Window_property_lineContext {
	var p = new(Window_property_lineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_window_property_line
	return p
}

func (*Window_property_lineContext) IsWindow_property_lineContext() {}

func NewWindow_property_lineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_property_lineContext {
	var p = new(Window_property_lineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_window_property_line

	return p
}

func (s *Window_property_lineContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_property_lineContext) AllWindow_property() []IWindow_propertyContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_propertyContext)(nil)).Elem())
	var tst = make([]IWindow_propertyContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_propertyContext)
		}
	}

	return tst
}

func (s *Window_property_lineContext) Window_property(i int) IWindow_propertyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_propertyContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_propertyContext)
}

func (s *Window_property_lineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_property_lineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_property_lineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterWindow_property_line(s)
	}
}

func (s *Window_property_lineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitWindow_property_line(s)
	}
}

func (s *Window_property_lineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitWindow_property_line(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Window_property_line() (localctx IWindow_property_lineContext) {
	localctx = NewWindow_property_lineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, powerbuilderParserRULE_window_property_line)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(254)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(253)
				p.Window_property()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IWindow_propertyContext is an interface to support dynamic dispatch.
type IWindow_propertyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_propertyContext differentiates from other interfaces.
	IsWindow_propertyContext()
}

type Window_propertyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_propertyContext() *Window_propertyContext {
	var p = new(Window_propertyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_window_property
	return p
}

func (*Window_propertyContext) IsWindow_propertyContext() {}

func NewWindow_propertyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_propertyContext {
	var p = new(Window_propertyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_window_property

	return p
}

func (s *Window_propertyContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_propertyContext) Attribute_name() IAttribute_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttribute_nameContext)
}

func (s *Window_propertyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Window_propertyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Window_propertyContext) Array_decl_sub() IArray_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_subContext)
}

func (s *Window_propertyContext) Window_property_attributes_sub() IWindow_property_attributes_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_property_attributes_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_property_attributes_subContext)
}

func (s *Window_propertyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_propertyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_propertyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterWindow_property(s)
	}
}

func (s *Window_propertyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitWindow_property(s)
	}
}

func (s *Window_propertyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitWindow_property(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Window_property() (localctx IWindow_propertyContext) {
	localctx = NewWindow_propertyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, powerbuilderParserRULE_window_property)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(258)
		p.Attribute_name()
	}
	p.SetState(260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__25 || _la == powerbuilderParserT__26 {
		{
			p.SetState(259)
			p.Array_decl_sub()
		}

	}
	{
		p.SetState(262)
		p.Match(powerbuilderParserLPAREN)
	}
	p.SetState(264)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__1)|(1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__4))) != 0) || (((_la-125)&-(0x1f+1)) == 0 && ((1<<uint((_la-125)))&((1<<(powerbuilderParserDQUOTED_STRING-125))|(1<<(powerbuilderParserID-125))|(1<<(powerbuilderParserNUMBER-125))|(1<<(powerbuilderParserDATE-125))|(1<<(powerbuilderParserTIME-125)))) != 0) {
		{
			p.SetState(263)
			p.Window_property_attributes_sub()
		}

	}
	{
		p.SetState(266)
		p.Match(powerbuilderParserRPAREN)
	}

	return localctx
}

// IWindow_property_attributes_subContext is an interface to support dynamic dispatch.
type IWindow_property_attributes_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWindow_property_attributes_subContext differentiates from other interfaces.
	IsWindow_property_attributes_subContext()
}

type Window_property_attributes_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWindow_property_attributes_subContext() *Window_property_attributes_subContext {
	var p = new(Window_property_attributes_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_window_property_attributes_sub
	return p
}

func (*Window_property_attributes_subContext) IsWindow_property_attributes_subContext() {}

func NewWindow_property_attributes_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_property_attributes_subContext {
	var p = new(Window_property_attributes_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_window_property_attributes_sub

	return p
}

func (s *Window_property_attributes_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_property_attributes_subContext) AllWindow_property_attribute_sub() []IWindow_property_attribute_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWindow_property_attribute_subContext)(nil)).Elem())
	var tst = make([]IWindow_property_attribute_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWindow_property_attribute_subContext)
		}
	}

	return tst
}

func (s *Window_property_attributes_subContext) Window_property_attribute_sub(i int) IWindow_property_attribute_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_property_attribute_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWindow_property_attribute_subContext)
}

func (s *Window_property_attributes_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_property_attributes_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_property_attributes_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterWindow_property_attributes_sub(s)
	}
}

func (s *Window_property_attributes_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitWindow_property_attributes_sub(s)
	}
}

func (s *Window_property_attributes_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitWindow_property_attributes_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Window_property_attributes_sub() (localctx IWindow_property_attributes_subContext) {
	localctx = NewWindow_property_attributes_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, powerbuilderParserRULE_window_property_attributes_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__1)|(1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__4))) != 0) || (((_la-125)&-(0x1f+1)) == 0 && ((1<<uint((_la-125)))&((1<<(powerbuilderParserDQUOTED_STRING-125))|(1<<(powerbuilderParserID-125))|(1<<(powerbuilderParserNUMBER-125))|(1<<(powerbuilderParserDATE-125))|(1<<(powerbuilderParserTIME-125)))) != 0) {
		{
			p.SetState(268)
			p.Window_property_attribute_sub()
		}

		p.SetState(271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IWindow_property_attribute_subContext is an interface to support dynamic dispatch.
type IWindow_property_attribute_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetEq returns the eq token.
	GetEq() antlr.Token

	// SetEq sets the eq token.
	SetEq(antlr.Token)

	// IsWindow_property_attribute_subContext differentiates from other interfaces.
	IsWindow_property_attribute_subContext()
}

type Window_property_attribute_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	eq     antlr.Token
}

func NewEmptyWindow_property_attribute_subContext() *Window_property_attribute_subContext {
	var p = new(Window_property_attribute_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_window_property_attribute_sub
	return p
}

func (*Window_property_attribute_subContext) IsWindow_property_attribute_subContext() {}

func NewWindow_property_attribute_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Window_property_attribute_subContext {
	var p = new(Window_property_attribute_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_window_property_attribute_sub

	return p
}

func (s *Window_property_attribute_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Window_property_attribute_subContext) GetEq() antlr.Token { return s.eq }

func (s *Window_property_attribute_subContext) SetEq(v antlr.Token) { s.eq = v }

func (s *Window_property_attribute_subContext) Numeric_atom() INumeric_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumeric_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumeric_atomContext)
}

func (s *Window_property_attribute_subContext) DQUOTED_STRING() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDQUOTED_STRING, 0)
}

func (s *Window_property_attribute_subContext) DATE() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDATE, 0)
}

func (s *Window_property_attribute_subContext) TIME() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserTIME, 0)
}

func (s *Window_property_attribute_subContext) NEWLINE() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNEWLINE, 0)
}

func (s *Window_property_attribute_subContext) COMMA() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, 0)
}

func (s *Window_property_attribute_subContext) Attribute_name() IAttribute_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttribute_nameContext)
}

func (s *Window_property_attribute_subContext) Attribute_value() IAttribute_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttribute_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttribute_valueContext)
}

func (s *Window_property_attribute_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Window_property_attribute_subContext) Window_property_attributes_sub() IWindow_property_attributes_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindow_property_attributes_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindow_property_attributes_subContext)
}

func (s *Window_property_attribute_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Window_property_attribute_subContext) Array_decl_sub() IArray_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_subContext)
}

func (s *Window_property_attribute_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Window_property_attribute_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Window_property_attribute_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterWindow_property_attribute_sub(s)
	}
}

func (s *Window_property_attribute_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitWindow_property_attribute_sub(s)
	}
}

func (s *Window_property_attribute_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitWindow_property_attribute_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Window_property_attribute_sub() (localctx IWindow_property_attribute_subContext) {
	localctx = NewWindow_property_attribute_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, powerbuilderParserRULE_window_property_attribute_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(304)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__1, powerbuilderParserDQUOTED_STRING, powerbuilderParserNUMBER, powerbuilderParserDATE, powerbuilderParserTIME:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(278)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserT__1:
			{
				p.SetState(273)
				p.Match(powerbuilderParserT__1)
			}

		case powerbuilderParserNUMBER:
			{
				p.SetState(274)
				p.Numeric_atom()
			}

		case powerbuilderParserDQUOTED_STRING:
			{
				p.SetState(275)
				p.Match(powerbuilderParserDQUOTED_STRING)
			}

		case powerbuilderParserDATE:
			{
				p.SetState(276)
				p.Match(powerbuilderParserDATE)
			}

		case powerbuilderParserTIME:
			{
				p.SetState(277)
				p.Match(powerbuilderParserTIME)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(281)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserNEWLINE {
			{
				p.SetState(280)
				p.Match(powerbuilderParserNEWLINE)
			}

		}
		p.SetState(284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserCOMMA {
			{
				p.SetState(283)
				p.Match(powerbuilderParserCOMMA)
			}

		}

	case powerbuilderParserT__3, powerbuilderParserT__4, powerbuilderParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(286)
			p.Attribute_name()
		}
		{
			p.SetState(287)

			var _m = p.Match(powerbuilderParserT__2)

			localctx.(*Window_property_attribute_subContext).eq = _m
		}
		p.SetState(296)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(288)
				p.Attribute_value()
			}
			p.SetState(290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == powerbuilderParserT__25 || _la == powerbuilderParserT__26 {
				{
					p.SetState(289)
					p.Array_decl_sub()
				}

			}

		case 2:
			{
				p.SetState(292)
				p.Match(powerbuilderParserLPAREN)
			}
			{
				p.SetState(293)
				p.Window_property_attributes_sub()
			}
			{
				p.SetState(294)
				p.Match(powerbuilderParserRPAREN)
			}

		}

		p.SetState(299)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserNEWLINE {
			{
				p.SetState(298)
				p.Match(powerbuilderParserNEWLINE)
			}

		}
		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserCOMMA {
			{
				p.SetState(301)
				p.Match(powerbuilderParserCOMMA)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttribute_nameContext is an interface to support dynamic dispatch.
type IAttribute_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttribute_nameContext differentiates from other interfaces.
	IsAttribute_nameContext()
}

type Attribute_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttribute_nameContext() *Attribute_nameContext {
	var p = new(Attribute_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_attribute_name
	return p
}

func (*Attribute_nameContext) IsAttribute_nameContext() {}

func NewAttribute_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attribute_nameContext {
	var p = new(Attribute_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_attribute_name

	return p
}

func (s *Attribute_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Attribute_nameContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Attribute_nameContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Attribute_nameContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, 0)
}

func (s *Attribute_nameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserDOT)
}

func (s *Attribute_nameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, i)
}

func (s *Attribute_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attribute_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attribute_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAttribute_name(s)
	}
}

func (s *Attribute_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAttribute_name(s)
	}
}

func (s *Attribute_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAttribute_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Attribute_name() (localctx IAttribute_nameContext) {
	localctx = NewAttribute_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, powerbuilderParserRULE_attribute_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(309)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserID:
		{
			p.SetState(306)
			p.Identifier_name()
		}

	case powerbuilderParserT__3:
		{
			p.SetState(307)
			p.Match(powerbuilderParserT__3)
		}

	case powerbuilderParserT__4:
		{
			p.SetState(308)
			p.Match(powerbuilderParserT__4)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(312)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserNUMBER {
		{
			p.SetState(311)
			p.Match(powerbuilderParserNUMBER)
		}

	}
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserDOT {
		{
			p.SetState(314)
			p.Match(powerbuilderParserDOT)
		}
		p.SetState(320)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserID:
			{
				p.SetState(315)
				p.Identifier_name()
			}

		case powerbuilderParserT__5:
			{
				p.SetState(316)
				p.Match(powerbuilderParserT__5)
			}

		case powerbuilderParserT__3:
			{
				p.SetState(317)
				p.Match(powerbuilderParserT__3)
			}

		case powerbuilderParserT__6:
			{
				p.SetState(318)
				p.Match(powerbuilderParserT__6)
			}

		case powerbuilderParserT__7:
			{
				p.SetState(319)
				p.Match(powerbuilderParserT__7)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAttribute_valueContext is an interface to support dynamic dispatch.
type IAttribute_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttribute_valueContext differentiates from other interfaces.
	IsAttribute_valueContext()
}

type Attribute_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttribute_valueContext() *Attribute_valueContext {
	var p = new(Attribute_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_attribute_value
	return p
}

func (*Attribute_valueContext) IsAttribute_valueContext() {}

func NewAttribute_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Attribute_valueContext {
	var p = new(Attribute_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_attribute_value

	return p
}

func (s *Attribute_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Attribute_valueContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Attribute_valueContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Attribute_valueContext) Numeric_atom() INumeric_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumeric_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumeric_atomContext)
}

func (s *Attribute_valueContext) Boolean_atom() IBoolean_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_atomContext)
}

func (s *Attribute_valueContext) ENUM() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserENUM, 0)
}

func (s *Attribute_valueContext) DQUOTED_STRING() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDQUOTED_STRING, 0)
}

func (s *Attribute_valueContext) QUOTED_STRING() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserQUOTED_STRING, 0)
}

func (s *Attribute_valueContext) DATE() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDATE, 0)
}

func (s *Attribute_valueContext) TIME() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserTIME, 0)
}

func (s *Attribute_valueContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserLPAREN)
}

func (s *Attribute_valueContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, i)
}

func (s *Attribute_valueContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserRPAREN)
}

func (s *Attribute_valueContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, i)
}

func (s *Attribute_valueContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Attribute_valueContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Attribute_valueContext) AllData_type_sub() []IData_type_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IData_type_subContext)(nil)).Elem())
	var tst = make([]IData_type_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IData_type_subContext)
		}
	}

	return tst
}

func (s *Attribute_valueContext) Data_type_sub(i int) IData_type_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IData_type_subContext)
}

func (s *Attribute_valueContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Attribute_valueContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Attribute_valueContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, 0)
}

func (s *Attribute_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Attribute_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Attribute_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAttribute_value(s)
	}
}

func (s *Attribute_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAttribute_value(s)
	}
}

func (s *Attribute_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAttribute_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Attribute_value() (localctx IAttribute_valueContext) {
	localctx = NewAttribute_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, powerbuilderParserRULE_attribute_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(387)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(327)
			p.Atom_sub_call1()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(328)
			p.Atom_sub_member1()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(330)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__8 {
			{
				p.SetState(329)
				p.Match(powerbuilderParserT__8)
			}

		}
		{
			p.SetState(332)
			p.Numeric_atom()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(333)
			p.Boolean_atom()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(334)
			p.Match(powerbuilderParserENUM)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(335)
			p.Match(powerbuilderParserDQUOTED_STRING)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(336)
			p.Match(powerbuilderParserQUOTED_STRING)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(337)
			p.Match(powerbuilderParserDATE)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(338)
			p.Match(powerbuilderParserTIME)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(339)
			p.Match(powerbuilderParserT__3)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(340)
			p.Match(powerbuilderParserT__9)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(341)
			p.Match(powerbuilderParserT__10)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(342)
			p.Match(powerbuilderParserT__11)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(343)
			p.Match(powerbuilderParserT__1)
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(344)
			p.Match(powerbuilderParserT__12)
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(345)
			p.Match(powerbuilderParserLPAREN)
		}
		{
			p.SetState(346)
			p.Match(powerbuilderParserLPAREN)
		}
		p.SetState(349)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserT__23, powerbuilderParserT__41, powerbuilderParserT__72:
			{
				p.SetState(347)
				p.Expression()
			}

		case powerbuilderParserT__99, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123:
			{
				p.SetState(348)
				p.Data_type_sub()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(356)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserCOMMA {
			{
				p.SetState(351)
				p.Match(powerbuilderParserCOMMA)
			}
			p.SetState(354)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case powerbuilderParserT__23, powerbuilderParserT__41, powerbuilderParserT__72:
				{
					p.SetState(352)
					p.Expression()
				}

			case powerbuilderParserT__99, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123:
				{
					p.SetState(353)
					p.Data_type_sub()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		{
			p.SetState(358)
			p.Match(powerbuilderParserRPAREN)
		}
		p.SetState(376)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == powerbuilderParserCOMMA {
			{
				p.SetState(359)
				p.Match(powerbuilderParserCOMMA)
			}
			{
				p.SetState(360)
				p.Match(powerbuilderParserLPAREN)
			}
			p.SetState(363)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case powerbuilderParserT__23, powerbuilderParserT__41, powerbuilderParserT__72:
				{
					p.SetState(361)
					p.Expression()
				}

			case powerbuilderParserT__99, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123:
				{
					p.SetState(362)
					p.Data_type_sub()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}
			p.SetState(370)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == powerbuilderParserCOMMA {
				{
					p.SetState(365)
					p.Match(powerbuilderParserCOMMA)
				}
				p.SetState(368)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case powerbuilderParserT__23, powerbuilderParserT__41, powerbuilderParserT__72:
					{
						p.SetState(366)
						p.Expression()
					}

				case powerbuilderParserT__99, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123:
					{
						p.SetState(367)
						p.Data_type_sub()
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			}
			{
				p.SetState(372)
				p.Match(powerbuilderParserRPAREN)
			}

			p.SetState(378)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(379)
			p.Match(powerbuilderParserRPAREN)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(381)
			p.Data_type_sub()
		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserLPAREN {
			{
				p.SetState(382)
				p.Match(powerbuilderParserLPAREN)
			}
			{
				p.SetState(383)
				p.Match(powerbuilderParserNUMBER)
			}
			{
				p.SetState(384)
				p.Match(powerbuilderParserRPAREN)
			}

		}

	}

	return localctx
}

// IForward_declContext is an interface to support dynamic dispatch.
type IForward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForward_declContext differentiates from other interfaces.
	IsForward_declContext()
}

type Forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForward_declContext() *Forward_declContext {
	var p = new(Forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_forward_decl
	return p
}

func (*Forward_declContext) IsForward_declContext() {}

func NewForward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Forward_declContext {
	var p = new(Forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_forward_decl

	return p
}

func (s *Forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Forward_declContext) AllDatatype_decl() []IDatatype_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem())
	var tst = make([]IDatatype_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDatatype_declContext)
		}
	}

	return tst
}

func (s *Forward_declContext) Datatype_decl(i int) IDatatype_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDatatype_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDatatype_declContext)
}

func (s *Forward_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Forward_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterForward_decl(s)
	}
}

func (s *Forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitForward_decl(s)
	}
}

func (s *Forward_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitForward_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Forward_decl() (localctx IForward_declContext) {
	localctx = NewForward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, powerbuilderParserRULE_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(389)
		p.Match(powerbuilderParserT__13)
	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) || _la == powerbuilderParserSEMI {
		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(390)
				p.Datatype_decl()
			}

		case 2:
			{
				p.SetState(391)
				p.Variable_decl()
			}

		}

		p.SetState(394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(396)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(397)
		p.Match(powerbuilderParserT__13)
	}

	return localctx
}

// IDatatype_declContext is an interface to support dynamic dispatch.
type IDatatype_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDatatype_declContext differentiates from other interfaces.
	IsDatatype_declContext()
}

type Datatype_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDatatype_declContext() *Datatype_declContext {
	var p = new(Datatype_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_datatype_decl
	return p
}

func (*Datatype_declContext) IsDatatype_declContext() {}

func NewDatatype_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Datatype_declContext {
	var p = new(Datatype_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_datatype_decl

	return p
}

func (s *Datatype_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Datatype_declContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Datatype_declContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Datatype_declContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Datatype_declContext) AllDQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserDQUOTED_STRING)
}

func (s *Datatype_declContext) DQUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDQUOTED_STRING, i)
}

func (s *Datatype_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Datatype_declContext) AllEvent_forward_decl() []IEvent_forward_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEvent_forward_declContext)(nil)).Elem())
	var tst = make([]IEvent_forward_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEvent_forward_declContext)
		}
	}

	return tst
}

func (s *Datatype_declContext) Event_forward_decl(i int) IEvent_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_forward_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEvent_forward_declContext)
}

func (s *Datatype_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Datatype_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Datatype_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDatatype_decl(s)
	}
}

func (s *Datatype_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDatatype_decl(s)
	}
}

func (s *Datatype_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDatatype_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Datatype_decl() (localctx IDatatype_declContext) {
	localctx = NewDatatype_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, powerbuilderParserRULE_datatype_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__20 || _la == powerbuilderParserT__53 {
		{
			p.SetState(399)
			p.Scope_modif()
		}

	}
	{
		p.SetState(402)
		p.Match(powerbuilderParserT__3)
	}
	{
		p.SetState(403)
		p.Identifier_name()
	}
	{
		p.SetState(404)
		p.Match(powerbuilderParserT__10)
	}
	p.SetState(408)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(405)
			p.Identifier_name()
		}
		{
			p.SetState(406)
			p.Match(powerbuilderParserT__15)
		}

	}
	{
		p.SetState(410)
		p.Data_type_name()
	}
	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__16 {
		{
			p.SetState(411)
			p.Match(powerbuilderParserT__16)
		}
		{
			p.SetState(412)
			p.Identifier_name()
		}

	}
	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__17 {
		{
			p.SetState(415)
			p.Match(powerbuilderParserT__17)
		}

	}
	p.SetState(422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__18 {
		{
			p.SetState(418)
			p.Match(powerbuilderParserT__18)
		}
		{
			p.SetState(419)
			p.Match(powerbuilderParserDQUOTED_STRING)
		}
		{
			p.SetState(420)
			p.Match(powerbuilderParserT__2)
		}
		{
			p.SetState(421)
			p.Match(powerbuilderParserDQUOTED_STRING)
		}

	}
	p.SetState(428)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__20 || _la == powerbuilderParserT__22 || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__42-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) || _la == powerbuilderParserSEMI {
		p.SetState(426)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserT__20, powerbuilderParserT__22, powerbuilderParserT__38, powerbuilderParserT__39, powerbuilderParserT__40, powerbuilderParserT__49, powerbuilderParserT__50, powerbuilderParserT__51, powerbuilderParserT__52, powerbuilderParserT__53, powerbuilderParserSEMI:
			{
				p.SetState(424)
				p.Variable_decl()
			}

		case powerbuilderParserT__42:
			{
				p.SetState(425)
				p.Event_forward_decl()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(431)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(432)
		p.Match(powerbuilderParserT__3)
	}

	return localctx
}

// IType_variables_declContext is an interface to support dynamic dispatch.
type IType_variables_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_variables_declContext differentiates from other interfaces.
	IsType_variables_declContext()
}

type Type_variables_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_variables_declContext() *Type_variables_declContext {
	var p = new(Type_variables_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_type_variables_decl
	return p
}

func (*Type_variables_declContext) IsType_variables_declContext() {}

func NewType_variables_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_variables_declContext {
	var p = new(Type_variables_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_type_variables_decl

	return p
}

func (s *Type_variables_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_variables_declContext) AllAccess_modif() []IAccess_modifContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAccess_modifContext)(nil)).Elem())
	var tst = make([]IAccess_modifContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAccess_modifContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Access_modif(i int) IAccess_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modifContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAccess_modifContext)
}

func (s *Type_variables_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Type_variables_declContext) AllConstant_decl() []IConstant_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_declContext)(nil)).Elem())
	var tst = make([]IConstant_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_declContext)
		}
	}

	return tst
}

func (s *Type_variables_declContext) Constant_decl(i int) IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *Type_variables_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_variables_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_variables_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterType_variables_decl(s)
	}
}

func (s *Type_variables_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitType_variables_decl(s)
	}
}

func (s *Type_variables_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitType_variables_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Type_variables_decl() (localctx IType_variables_declContext) {
	localctx = NewType_variables_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, powerbuilderParserRULE_type_variables_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(434)
		p.Match(powerbuilderParserT__3)
	}
	{
		p.SetState(435)
		p.Match(powerbuilderParserT__19)
	}
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__20 || _la == powerbuilderParserT__22 || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__46-39))|(1<<(powerbuilderParserT__47-39))|(1<<(powerbuilderParserT__48-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) || _la == powerbuilderParserSEMI {
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(436)
				p.Access_modif()
			}

		case 2:
			{
				p.SetState(437)
				p.Variable_decl()
			}

		case 3:
			{
				p.SetState(438)
				p.Constant_decl()
			}

		}

		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(444)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(445)
		p.Match(powerbuilderParserT__19)
	}

	return localctx
}

// IGlobal_variables_declContext is an interface to support dynamic dispatch.
type IGlobal_variables_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGlobal_variables_declContext differentiates from other interfaces.
	IsGlobal_variables_declContext()
}

type Global_variables_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGlobal_variables_declContext() *Global_variables_declContext {
	var p = new(Global_variables_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_global_variables_decl
	return p
}

func (*Global_variables_declContext) IsGlobal_variables_declContext() {}

func NewGlobal_variables_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Global_variables_declContext {
	var p = new(Global_variables_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_global_variables_decl

	return p
}

func (s *Global_variables_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Global_variables_declContext) AllVariable_decl() []IVariable_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_declContext)(nil)).Elem())
	var tst = make([]IVariable_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_declContext)
		}
	}

	return tst
}

func (s *Global_variables_declContext) Variable_decl(i int) IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *Global_variables_declContext) AllConstant_decl() []IConstant_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstant_declContext)(nil)).Elem())
	var tst = make([]IConstant_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstant_declContext)
		}
	}

	return tst
}

func (s *Global_variables_declContext) Constant_decl(i int) IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *Global_variables_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Global_variables_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Global_variables_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterGlobal_variables_decl(s)
	}
}

func (s *Global_variables_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitGlobal_variables_decl(s)
	}
}

func (s *Global_variables_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitGlobal_variables_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Global_variables_decl() (localctx IGlobal_variables_declContext) {
	localctx = NewGlobal_variables_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, powerbuilderParserRULE_global_variables_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(447)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__20 || _la == powerbuilderParserT__21) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(448)
		p.Match(powerbuilderParserT__19)
	}
	p.SetState(453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__20 || _la == powerbuilderParserT__22 || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) || _la == powerbuilderParserSEMI {
		p.SetState(451)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(449)
				p.Variable_decl()
			}

		case 2:
			{
				p.SetState(450)
				p.Constant_decl()
			}

		}

		p.SetState(455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(456)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(457)
		p.Match(powerbuilderParserT__19)
	}

	return localctx
}

// IVariable_decl_subContext is an interface to support dynamic dispatch.
type IVariable_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_decl_subContext differentiates from other interfaces.
	IsVariable_decl_subContext()
}

type Variable_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_decl_subContext() *Variable_decl_subContext {
	var p = new(Variable_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_variable_decl_sub
	return p
}

func (*Variable_decl_subContext) IsVariable_decl_subContext() {}

func NewVariable_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_decl_subContext {
	var p = new(Variable_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_variable_decl_sub

	return p
}

func (s *Variable_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_decl_subContext) Access_modif_part() IAccess_modif_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modif_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modif_partContext)
}

func (s *Variable_decl_subContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Variable_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterVariable_decl_sub(s)
	}
}

func (s *Variable_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitVariable_decl_sub(s)
	}
}

func (s *Variable_decl_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitVariable_decl_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Variable_decl_sub() (localctx IVariable_decl_subContext) {
	localctx = NewVariable_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, powerbuilderParserRULE_variable_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(460)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__22 {
		{
			p.SetState(459)
			p.Match(powerbuilderParserT__22)
		}

	}
	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39)))) != 0 {
		{
			p.SetState(462)
			p.Access_modif_part()
		}

	}
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__20 || _la == powerbuilderParserT__53 {
		{
			p.SetState(465)
			p.Scope_modif()
		}

	}

	return localctx
}

// IVariable_declContext is an interface to support dynamic dispatch.
type IVariable_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_declContext differentiates from other interfaces.
	IsVariable_declContext()
}

type Variable_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_declContext() *Variable_declContext {
	var p = new(Variable_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_variable_decl
	return p
}

func (*Variable_declContext) IsVariable_declContext() {}

func NewVariable_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_declContext {
	var p = new(Variable_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_variable_decl

	return p
}

func (s *Variable_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_declContext) Variable_decl_sub() IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Variable_declContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *Variable_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterVariable_decl(s)
	}
}

func (s *Variable_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitVariable_decl(s)
	}
}

func (s *Variable_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitVariable_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Variable_decl() (localctx IVariable_declContext) {
	localctx = NewVariable_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, powerbuilderParserRULE_variable_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(468)
		p.Variable_decl_sub()
	}

	{
		p.SetState(469)
		p.Match(powerbuilderParserSEMI)
	}

	return localctx
}

// IDecimal_decl_subContext is an interface to support dynamic dispatch.
type IDecimal_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimal_decl_subContext differentiates from other interfaces.
	IsDecimal_decl_subContext()
}

type Decimal_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimal_decl_subContext() *Decimal_decl_subContext {
	var p = new(Decimal_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_decimal_decl_sub
	return p
}

func (*Decimal_decl_subContext) IsDecimal_decl_subContext() {}

func NewDecimal_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decimal_decl_subContext {
	var p = new(Decimal_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_decimal_decl_sub

	return p
}

func (s *Decimal_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Decimal_decl_subContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, 0)
}

func (s *Decimal_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decimal_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDecimal_decl_sub(s)
	}
}

func (s *Decimal_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDecimal_decl_sub(s)
	}
}

func (s *Decimal_decl_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDecimal_decl_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Decimal_decl_sub() (localctx IDecimal_decl_subContext) {
	localctx = NewDecimal_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, powerbuilderParserRULE_decimal_decl_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(471)
		p.Match(powerbuilderParserT__23)
	}
	{
		p.SetState(472)
		p.Match(powerbuilderParserNUMBER)
	}
	{
		p.SetState(473)
		p.Match(powerbuilderParserT__24)
	}

	return localctx
}

// IArray_decl_subContext is an interface to support dynamic dispatch.
type IArray_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_decl_subContext differentiates from other interfaces.
	IsArray_decl_subContext()
}

type Array_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_decl_subContext() *Array_decl_subContext {
	var p = new(Array_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_array_decl_sub
	return p
}

func (*Array_decl_subContext) IsArray_decl_subContext() {}

func NewArray_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_decl_subContext {
	var p = new(Array_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_array_decl_sub

	return p
}

func (s *Array_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_decl_subContext) AllNUMBER() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserNUMBER)
}

func (s *Array_decl_subContext) NUMBER(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, i)
}

func (s *Array_decl_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Array_decl_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Array_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterArray_decl_sub(s)
	}
}

func (s *Array_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitArray_decl_sub(s)
	}
}

func (s *Array_decl_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitArray_decl_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Array_decl_sub() (localctx IArray_decl_subContext) {
	localctx = NewArray_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, powerbuilderParserRULE_array_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(508)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__25:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(475)
			p.Match(powerbuilderParserT__25)
		}

	case powerbuilderParserT__26:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(476)
			p.Match(powerbuilderParserT__26)
		}
		p.SetState(505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 || _la == powerbuilderParserNUMBER {
			p.SetState(478)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
				p.SetState(477)
				_la = p.GetTokenStream().LA(1)

				if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			{
				p.SetState(480)
				p.Match(powerbuilderParserNUMBER)
			}
			p.SetState(486)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == powerbuilderParserT__9 {
				{
					p.SetState(481)
					p.Match(powerbuilderParserT__9)
				}
				p.SetState(483)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
					p.SetState(482)
					_la = p.GetTokenStream().LA(1)

					if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}
				{
					p.SetState(485)
					p.Match(powerbuilderParserNUMBER)
				}

			}
			p.SetState(502)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == powerbuilderParserCOMMA {
				{
					p.SetState(488)
					p.Match(powerbuilderParserCOMMA)
				}
				p.SetState(490)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
					p.SetState(489)
					_la = p.GetTokenStream().LA(1)

					if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}

				}
				{
					p.SetState(492)
					p.Match(powerbuilderParserNUMBER)
				}
				p.SetState(498)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == powerbuilderParserT__9 {
					{
						p.SetState(493)
						p.Match(powerbuilderParserT__9)
					}
					p.SetState(495)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
						p.SetState(494)
						_la = p.GetTokenStream().LA(1)

						if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
							p.GetErrorHandler().RecoverInline(p)
						} else {
							p.GetErrorHandler().ReportMatch(p)
							p.Consume()
						}

					}
					{
						p.SetState(497)
						p.Match(powerbuilderParserNUMBER)
					}

				}

				p.SetState(504)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(507)
			p.Match(powerbuilderParserT__28)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstant_decl_subContext is an interface to support dynamic dispatch.
type IConstant_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_decl_subContext differentiates from other interfaces.
	IsConstant_decl_subContext()
}

type Constant_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_decl_subContext() *Constant_decl_subContext {
	var p = new(Constant_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_constant_decl_sub
	return p
}

func (*Constant_decl_subContext) IsConstant_decl_subContext() {}

func NewConstant_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_decl_subContext {
	var p = new(Constant_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_constant_decl_sub

	return p
}

func (s *Constant_decl_subContext) GetParser() antlr.Parser { return s.parser }
func (s *Constant_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterConstant_decl_sub(s)
	}
}

func (s *Constant_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitConstant_decl_sub(s)
	}
}

func (s *Constant_decl_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitConstant_decl_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Constant_decl_sub() (localctx IConstant_decl_subContext) {
	localctx = NewConstant_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, powerbuilderParserRULE_constant_decl_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)

	return localctx
}

// IConstant_declContext is an interface to support dynamic dispatch.
type IConstant_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_declContext differentiates from other interfaces.
	IsConstant_declContext()
}

type Constant_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_declContext() *Constant_declContext {
	var p = new(Constant_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_constant_decl
	return p
}

func (*Constant_declContext) IsConstant_declContext() {}

func NewConstant_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_declContext {
	var p = new(Constant_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_constant_decl

	return p
}

func (s *Constant_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_declContext) Constant_decl_sub() IConstant_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_decl_subContext)
}

func (s *Constant_declContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *Constant_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterConstant_decl(s)
	}
}

func (s *Constant_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitConstant_decl(s)
	}
}

func (s *Constant_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitConstant_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Constant_decl() (localctx IConstant_declContext) {
	localctx = NewConstant_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, powerbuilderParserRULE_constant_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(512)
		p.Constant_decl_sub()
	}

	{
		p.SetState(513)
		p.Match(powerbuilderParserSEMI)
	}

	return localctx
}

// IFunction_forward_declContext is an interface to support dynamic dispatch.
type IFunction_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_forward_declContext differentiates from other interfaces.
	IsFunction_forward_declContext()
}

type Function_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_forward_declContext() *Function_forward_declContext {
	var p = new(Function_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_function_forward_decl
	return p
}

func (*Function_forward_declContext) IsFunction_forward_declContext() {}

func NewFunction_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_forward_declContext {
	var p = new(Function_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_function_forward_decl

	return p
}

func (s *Function_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_forward_declContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Function_forward_declContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_forward_declContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Function_forward_declContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Function_forward_declContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Function_forward_declContext) Access_modif_part() IAccess_modif_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAccess_modif_partContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAccess_modif_partContext)
}

func (s *Function_forward_declContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Function_forward_declContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Function_forward_declContext) AllDQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserDQUOTED_STRING)
}

func (s *Function_forward_declContext) DQUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDQUOTED_STRING, i)
}

func (s *Function_forward_declContext) AllQUOTED_STRING() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserQUOTED_STRING)
}

func (s *Function_forward_declContext) QUOTED_STRING(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserQUOTED_STRING, i)
}

func (s *Function_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunction_forward_decl(s)
	}
}

func (s *Function_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunction_forward_decl(s)
	}
}

func (s *Function_forward_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunction_forward_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Function_forward_decl() (localctx IFunction_forward_declContext) {
	localctx = NewFunction_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, powerbuilderParserRULE_function_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39)))) != 0 {
		{
			p.SetState(515)
			p.Access_modif_part()
		}

	}
	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__20 || _la == powerbuilderParserT__53 {
		{
			p.SetState(518)
			p.Scope_modif()
		}

	}
	p.SetState(524)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__29:
		{
			p.SetState(521)
			p.Match(powerbuilderParserT__29)
		}
		{
			p.SetState(522)
			p.Data_type_name()
		}

	case powerbuilderParserT__30:
		{
			p.SetState(523)
			p.Match(powerbuilderParserT__30)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(526)
		p.Identifier_name()
	}
	{
		p.SetState(527)
		p.Match(powerbuilderParserLPAREN)
	}
	p.SetState(529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__36 || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserID-100)))) != 0) {
		{
			p.SetState(528)
			p.Parameters_list_sub()
		}

	}
	{
		p.SetState(531)
		p.Match(powerbuilderParserRPAREN)
	}
	p.SetState(539)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__31 {
		{
			p.SetState(532)
			p.Match(powerbuilderParserT__31)
		}
		p.SetState(533)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserDQUOTED_STRING || _la == powerbuilderParserQUOTED_STRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(537)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__32 {
			{
				p.SetState(534)
				p.Match(powerbuilderParserT__32)
			}
			{
				p.SetState(535)
				p.Match(powerbuilderParserT__33)
			}
			p.SetState(536)
			_la = p.GetTokenStream().LA(1)

			if !(_la == powerbuilderParserDQUOTED_STRING || _la == powerbuilderParserQUOTED_STRING) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	}
	p.SetState(545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__34 {
		{
			p.SetState(541)
			p.Match(powerbuilderParserT__34)
		}
		{
			p.SetState(542)
			p.Match(powerbuilderParserT__32)
		}
		{
			p.SetState(543)
			p.Match(powerbuilderParserT__33)
		}
		p.SetState(544)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserDQUOTED_STRING || _la == powerbuilderParserQUOTED_STRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__35 {
		{
			p.SetState(547)
			p.Match(powerbuilderParserT__35)
		}
		{
			p.SetState(548)
			p.Identifier_name()
		}

	}

	return localctx
}

// IParameter_subContext is an interface to support dynamic dispatch.
type IParameter_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameter_subContext differentiates from other interfaces.
	IsParameter_subContext()
}

type Parameter_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameter_subContext() *Parameter_subContext {
	var p = new(Parameter_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_parameter_sub
	return p
}

func (*Parameter_subContext) IsParameter_subContext() {}

func NewParameter_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameter_subContext {
	var p = new(Parameter_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_parameter_sub

	return p
}

func (s *Parameter_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameter_subContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Parameter_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Parameter_subContext) Decimal_decl_sub() IDecimal_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_decl_subContext)
}

func (s *Parameter_subContext) Array_decl_sub() IArray_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_decl_subContext)
}

func (s *Parameter_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameter_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameter_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterParameter_sub(s)
	}
}

func (s *Parameter_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitParameter_sub(s)
	}
}

func (s *Parameter_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitParameter_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Parameter_sub() (localctx IParameter_subContext) {
	localctx = NewParameter_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, powerbuilderParserRULE_parameter_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__36 {
		{
			p.SetState(551)
			p.Match(powerbuilderParserT__36)
		}

	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 {
		{
			p.SetState(554)
			p.Match(powerbuilderParserT__11)
		}

	}
	{
		p.SetState(557)
		p.Data_type_name()
	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__23 {
		{
			p.SetState(558)
			p.Decimal_decl_sub()
		}

	}
	{
		p.SetState(561)
		p.Identifier_name()
	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__25 || _la == powerbuilderParserT__26 {
		{
			p.SetState(562)
			p.Array_decl_sub()
		}

	}

	return localctx
}

// IParameters_list_subContext is an interface to support dynamic dispatch.
type IParameters_list_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameters_list_subContext differentiates from other interfaces.
	IsParameters_list_subContext()
}

type Parameters_list_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameters_list_subContext() *Parameters_list_subContext {
	var p = new(Parameters_list_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_parameters_list_sub
	return p
}

func (*Parameters_list_subContext) IsParameters_list_subContext() {}

func NewParameters_list_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Parameters_list_subContext {
	var p = new(Parameters_list_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_parameters_list_sub

	return p
}

func (s *Parameters_list_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Parameters_list_subContext) AllParameter_sub() []IParameter_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameter_subContext)(nil)).Elem())
	var tst = make([]IParameter_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameter_subContext)
		}
	}

	return tst
}

func (s *Parameters_list_subContext) Parameter_sub(i int) IParameter_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameter_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameter_subContext)
}

func (s *Parameters_list_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Parameters_list_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Parameters_list_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Parameters_list_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Parameters_list_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterParameters_list_sub(s)
	}
}

func (s *Parameters_list_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitParameters_list_sub(s)
	}
}

func (s *Parameters_list_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitParameters_list_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Parameters_list_sub() (localctx IParameters_list_subContext) {
	localctx = NewParameters_list_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, powerbuilderParserRULE_parameters_list_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(565)
		p.Parameter_sub()
	}
	p.SetState(570)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserCOMMA {
		{
			p.SetState(566)
			p.Match(powerbuilderParserCOMMA)
		}
		{
			p.SetState(567)
			p.Parameter_sub()
		}

		p.SetState(572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctions_forward_declContext is an interface to support dynamic dispatch.
type IFunctions_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctions_forward_declContext differentiates from other interfaces.
	IsFunctions_forward_declContext()
}

type Functions_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctions_forward_declContext() *Functions_forward_declContext {
	var p = new(Functions_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_functions_forward_decl
	return p
}

func (*Functions_forward_declContext) IsFunctions_forward_declContext() {}

func NewFunctions_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Functions_forward_declContext {
	var p = new(Functions_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_functions_forward_decl

	return p
}

func (s *Functions_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Functions_forward_declContext) AllFunction_forward_decl() []IFunction_forward_declContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem())
	var tst = make([]IFunction_forward_declContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_forward_declContext)
		}
	}

	return tst
}

func (s *Functions_forward_declContext) Function_forward_decl(i int) IFunction_forward_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_forward_declContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_forward_declContext)
}

func (s *Functions_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Functions_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Functions_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunctions_forward_decl(s)
	}
}

func (s *Functions_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunctions_forward_decl(s)
	}
}

func (s *Functions_forward_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunctions_forward_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Functions_forward_decl() (localctx IFunctions_forward_declContext) {
	localctx = NewFunctions_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, powerbuilderParserRULE_functions_forward_decl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(573)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__3 || _la == powerbuilderParserT__13) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(574)
		p.Match(powerbuilderParserT__37)
	}
	p.SetState(576)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__29)|(1<<powerbuilderParserT__30))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39))|(1<<(powerbuilderParserT__53-39)))) != 0) {
		{
			p.SetState(575)
			p.Function_forward_decl()
		}

		p.SetState(578)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(580)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(581)
		p.Match(powerbuilderParserT__37)
	}

	return localctx
}

// IFunction_bodyContext is an interface to support dynamic dispatch.
type IFunction_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_bodyContext differentiates from other interfaces.
	IsFunction_bodyContext()
}

type Function_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_bodyContext() *Function_bodyContext {
	var p = new(Function_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_function_body
	return p
}

func (*Function_bodyContext) IsFunction_bodyContext() {}

func NewFunction_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_bodyContext {
	var p = new(Function_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_function_body

	return p
}

func (s *Function_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_bodyContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Function_bodyContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_bodyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Function_bodyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Function_bodyContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Function_bodyContext) Scope_modif() IScope_modifContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScope_modifContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScope_modifContext)
}

func (s *Function_bodyContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Function_bodyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserSEMI)
}

func (s *Function_bodyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, i)
}

func (s *Function_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Function_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Function_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunction_body(s)
	}
}

func (s *Function_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunction_body(s)
	}
}

func (s *Function_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunction_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Function_body() (localctx IFunction_bodyContext) {
	localctx = NewFunction_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, powerbuilderParserRULE_function_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(584)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39)))) != 0 {
		p.SetState(583)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(587)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__20 || _la == powerbuilderParserT__53 {
		{
			p.SetState(586)
			p.Scope_modif()
		}

	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__29:
		{
			p.SetState(589)
			p.Match(powerbuilderParserT__29)
		}
		{
			p.SetState(590)
			p.Data_type_name()
		}

	case powerbuilderParserT__30:
		{
			p.SetState(591)
			p.Match(powerbuilderParserT__30)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(594)
		p.Identifier_name()
	}
	{
		p.SetState(595)
		p.Match(powerbuilderParserLPAREN)
	}
	p.SetState(597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__36 || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserID-100)))) != 0) {
		{
			p.SetState(596)
			p.Parameters_list_sub()
		}

	}
	{
		p.SetState(599)
		p.Match(powerbuilderParserRPAREN)
	}
	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__35 {
		{
			p.SetState(600)
			p.Match(powerbuilderParserT__35)
		}
		{
			p.SetState(601)
			p.Identifier_name()
		}

	}
	p.SetState(608)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserSEMI {
		{
			p.SetState(604)
			p.Match(powerbuilderParserSEMI)
		}
		{
			p.SetState(605)
			p.Statement()
		}

		p.SetState(610)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(611)
		p.Match(powerbuilderParserT__14)
	}
	p.SetState(612)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__29 || _la == powerbuilderParserT__30) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IOn_bodyContext is an interface to support dynamic dispatch.
type IOn_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_bodyContext differentiates from other interfaces.
	IsOn_bodyContext()
}

type On_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_bodyContext() *On_bodyContext {
	var p = new(On_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_on_body
	return p
}

func (*On_bodyContext) IsOn_bodyContext() {}

func NewOn_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_bodyContext {
	var p = new(On_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_on_body

	return p
}

func (s *On_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *On_bodyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *On_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterOn_body(s)
	}
}

func (s *On_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitOn_body(s)
	}
}

func (s *On_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitOn_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) On_body() (localctx IOn_bodyContext) {
	localctx = NewOn_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, powerbuilderParserRULE_on_body)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(614)
		p.Match(powerbuilderParserT__6)
	}
	p.SetState(618)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__74, powerbuilderParserID:
		{
			p.SetState(615)
			p.Identifier()
		}

	case powerbuilderParserT__12:
		{
			p.SetState(616)
			p.Match(powerbuilderParserT__12)
		}

	case powerbuilderParserT__41:
		{
			p.SetState(617)
			p.Match(powerbuilderParserT__41)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEvent_forward_decl_subContext is an interface to support dynamic dispatch.
type IEvent_forward_decl_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_forward_decl_subContext differentiates from other interfaces.
	IsEvent_forward_decl_subContext()
}

type Event_forward_decl_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_forward_decl_subContext() *Event_forward_decl_subContext {
	var p = new(Event_forward_decl_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_event_forward_decl_sub
	return p
}

func (*Event_forward_decl_subContext) IsEvent_forward_decl_subContext() {}

func NewEvent_forward_decl_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_forward_decl_subContext {
	var p = new(Event_forward_decl_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_event_forward_decl_sub

	return p
}

func (s *Event_forward_decl_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_forward_decl_subContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Event_forward_decl_subContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Event_forward_decl_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Event_forward_decl_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Event_forward_decl_subContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Event_forward_decl_subContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Event_forward_decl_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_forward_decl_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_forward_decl_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterEvent_forward_decl_sub(s)
	}
}

func (s *Event_forward_decl_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitEvent_forward_decl_sub(s)
	}
}

func (s *Event_forward_decl_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitEvent_forward_decl_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Event_forward_decl_sub() (localctx IEvent_forward_decl_subContext) {
	localctx = NewEvent_forward_decl_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, powerbuilderParserRULE_event_forward_decl_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(620)
			p.Match(powerbuilderParserT__42)
		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserID:
			{
				p.SetState(621)
				p.Identifier_name()
			}

		case powerbuilderParserT__43:
			{
				p.SetState(622)
				p.Match(powerbuilderParserT__43)
			}

		case powerbuilderParserT__44:
			{
				p.SetState(623)
				p.Match(powerbuilderParserT__44)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(627)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserID {
			{
				p.SetState(626)
				p.Identifier_name()
			}

		}
		p.SetState(634)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserLPAREN {
			{
				p.SetState(629)
				p.Match(powerbuilderParserLPAREN)
			}
			p.SetState(631)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__36 || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserID-100)))) != 0) {
				{
					p.SetState(630)
					p.Parameters_list_sub()
				}

			}
			{
				p.SetState(633)
				p.Match(powerbuilderParserRPAREN)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(636)
			p.Match(powerbuilderParserT__42)
		}
		{
			p.SetState(637)
			p.Match(powerbuilderParserT__3)
		}
		{
			p.SetState(638)
			p.Data_type_name()
		}
		{
			p.SetState(639)
			p.Identifier_name()
		}

		{
			p.SetState(640)
			p.Match(powerbuilderParserLPAREN)
		}
		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__36 || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserID-100)))) != 0) {
			{
				p.SetState(641)
				p.Parameters_list_sub()
			}

		}
		{
			p.SetState(644)
			p.Match(powerbuilderParserRPAREN)
		}

	}

	return localctx
}

// IEvent_forward_declContext is an interface to support dynamic dispatch.
type IEvent_forward_declContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_forward_declContext differentiates from other interfaces.
	IsEvent_forward_declContext()
}

type Event_forward_declContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_forward_declContext() *Event_forward_declContext {
	var p = new(Event_forward_declContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_event_forward_decl
	return p
}

func (*Event_forward_declContext) IsEvent_forward_declContext() {}

func NewEvent_forward_declContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_forward_declContext {
	var p = new(Event_forward_declContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_event_forward_decl

	return p
}

func (s *Event_forward_declContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_forward_declContext) Event_forward_decl_sub() IEvent_forward_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_forward_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_forward_decl_subContext)
}

func (s *Event_forward_declContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_forward_declContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_forward_declContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterEvent_forward_decl(s)
	}
}

func (s *Event_forward_declContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitEvent_forward_decl(s)
	}
}

func (s *Event_forward_declContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitEvent_forward_decl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Event_forward_decl() (localctx IEvent_forward_declContext) {
	localctx = NewEvent_forward_declContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, powerbuilderParserRULE_event_forward_decl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Event_forward_decl_sub()
	}

	return localctx
}

// IEvent_bodyContext is an interface to support dynamic dispatch.
type IEvent_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_bodyContext differentiates from other interfaces.
	IsEvent_bodyContext()
}

type Event_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_bodyContext() *Event_bodyContext {
	var p = new(Event_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_event_body
	return p
}

func (*Event_bodyContext) IsEvent_bodyContext() {}

func NewEvent_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_bodyContext {
	var p = new(Event_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_event_body

	return p
}

func (s *Event_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_bodyContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Event_bodyContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Event_bodyContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Event_bodyContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Event_bodyContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Event_bodyContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserSEMI)
}

func (s *Event_bodyContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, i)
}

func (s *Event_bodyContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Event_bodyContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Event_bodyContext) Parameters_list_sub() IParameters_list_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameters_list_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameters_list_subContext)
}

func (s *Event_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterEvent_body(s)
	}
}

func (s *Event_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitEvent_body(s)
	}
}

func (s *Event_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitEvent_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Event_body() (localctx IEvent_bodyContext) {
	localctx = NewEvent_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, powerbuilderParserRULE_event_body)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(650)
		p.Match(powerbuilderParserT__42)
	}
	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__3 {
		{
			p.SetState(651)
			p.Match(powerbuilderParserT__3)
		}
		{
			p.SetState(652)
			p.Data_type_name()
		}

	}
	p.SetState(658)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(655)
			p.Identifier_name()
		}
		{
			p.SetState(656)
			p.Match(powerbuilderParserT__45)
		}

	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserID:
		{
			p.SetState(660)
			p.Identifier_name()
		}

	case powerbuilderParserT__12:
		{
			p.SetState(661)
			p.Match(powerbuilderParserT__12)
		}

	case powerbuilderParserT__41:
		{
			p.SetState(662)
			p.Match(powerbuilderParserT__41)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserLPAREN {
		{
			p.SetState(665)
			p.Match(powerbuilderParserLPAREN)
		}
		p.SetState(667)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__36 || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserID-100)))) != 0) {
			{
				p.SetState(666)
				p.Parameters_list_sub()
			}

		}
		{
			p.SetState(669)
			p.Match(powerbuilderParserRPAREN)
		}

	}
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserSEMI {
		{
			p.SetState(672)
			p.Match(powerbuilderParserSEMI)
		}
		{
			p.SetState(673)
			p.Statement()
		}

		p.SetState(678)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(679)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(680)
		p.Match(powerbuilderParserT__42)
	}

	return localctx
}

// IAccess_modifContext is an interface to support dynamic dispatch.
type IAccess_modifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccess_modifContext differentiates from other interfaces.
	IsAccess_modifContext()
}

type Access_modifContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_modifContext() *Access_modifContext {
	var p = new(Access_modifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_access_modif
	return p
}

func (*Access_modifContext) IsAccess_modifContext() {}

func NewAccess_modifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_modifContext {
	var p = new(Access_modifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_access_modif

	return p
}

func (s *Access_modifContext) GetParser() antlr.Parser { return s.parser }
func (s *Access_modifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_modifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_modifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAccess_modif(s)
	}
}

func (s *Access_modifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAccess_modif(s)
	}
}

func (s *Access_modifContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAccess_modif(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Access_modif() (localctx IAccess_modifContext) {
	localctx = NewAccess_modifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, powerbuilderParserRULE_access_modif)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(691)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__46:
		{
			p.SetState(682)
			p.Match(powerbuilderParserT__46)
		}

	case powerbuilderParserT__38:
		{
			p.SetState(683)
			p.Match(powerbuilderParserT__38)
		}
		{
			p.SetState(684)
			p.Match(powerbuilderParserCOLON)
		}

	case powerbuilderParserT__47:
		{
			p.SetState(685)
			p.Match(powerbuilderParserT__47)
		}

	case powerbuilderParserT__39:
		{
			p.SetState(686)
			p.Match(powerbuilderParserT__39)
		}
		{
			p.SetState(687)
			p.Match(powerbuilderParserCOLON)
		}

	case powerbuilderParserT__48:
		{
			p.SetState(688)
			p.Match(powerbuilderParserT__48)
		}

	case powerbuilderParserT__40:
		{
			p.SetState(689)
			p.Match(powerbuilderParserT__40)
		}
		{
			p.SetState(690)
			p.Match(powerbuilderParserCOLON)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAccess_modif_partContext is an interface to support dynamic dispatch.
type IAccess_modif_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAccess_modif_partContext differentiates from other interfaces.
	IsAccess_modif_partContext()
}

type Access_modif_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAccess_modif_partContext() *Access_modif_partContext {
	var p = new(Access_modif_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_access_modif_part
	return p
}

func (*Access_modif_partContext) IsAccess_modif_partContext() {}

func NewAccess_modif_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Access_modif_partContext {
	var p = new(Access_modif_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_access_modif_part

	return p
}

func (s *Access_modif_partContext) GetParser() antlr.Parser { return s.parser }
func (s *Access_modif_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Access_modif_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Access_modif_partContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAccess_modif_part(s)
	}
}

func (s *Access_modif_partContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAccess_modif_part(s)
	}
}

func (s *Access_modif_partContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAccess_modif_part(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Access_modif_part() (localctx IAccess_modif_partContext) {
	localctx = NewAccess_modif_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, powerbuilderParserRULE_access_modif_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(693)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(powerbuilderParserT__38-39))|(1<<(powerbuilderParserT__39-39))|(1<<(powerbuilderParserT__40-39))|(1<<(powerbuilderParserT__49-39))|(1<<(powerbuilderParserT__50-39))|(1<<(powerbuilderParserT__51-39))|(1<<(powerbuilderParserT__52-39)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IScope_modifContext is an interface to support dynamic dispatch.
type IScope_modifContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScope_modifContext differentiates from other interfaces.
	IsScope_modifContext()
}

type Scope_modifContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScope_modifContext() *Scope_modifContext {
	var p = new(Scope_modifContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_scope_modif
	return p
}

func (*Scope_modifContext) IsScope_modifContext() {}

func NewScope_modifContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scope_modifContext {
	var p = new(Scope_modifContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_scope_modif

	return p
}

func (s *Scope_modifContext) GetParser() antlr.Parser { return s.parser }
func (s *Scope_modifContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scope_modifContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scope_modifContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterScope_modif(s)
	}
}

func (s *Scope_modifContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitScope_modif(s)
	}
}

func (s *Scope_modifContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitScope_modif(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Scope_modif() (localctx IScope_modifContext) {
	localctx = NewScope_modifContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, powerbuilderParserRULE_scope_modif)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(695)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__20 || _la == powerbuilderParserT__53) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, powerbuilderParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(699)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__41, powerbuilderParserT__72:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(697)
			p.Close_call_sub()
		}

	case powerbuilderParserT__23:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(698)
			p.Match(powerbuilderParserT__23)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Expression_listContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (s *Expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitExpression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, powerbuilderParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 {
		{
			p.SetState(701)
			p.Match(powerbuilderParserT__11)
		}

	}
	{
		p.SetState(704)
		p.Expression()
	}

	p.SetState(713)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserCOMMA {
		{
			p.SetState(706)
			p.Match(powerbuilderParserCOMMA)
		}
		p.SetState(708)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__11 {
			{
				p.SetState(707)
				p.Match(powerbuilderParserT__11)
			}

		}
		{
			p.SetState(710)
			p.Expression()
		}

		p.SetState(715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IBoolean_expressionContext is an interface to support dynamic dispatch.
type IBoolean_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_expressionContext differentiates from other interfaces.
	IsBoolean_expressionContext()
}

type Boolean_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_expressionContext() *Boolean_expressionContext {
	var p = new(Boolean_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_boolean_expression
	return p
}

func (*Boolean_expressionContext) IsBoolean_expressionContext() {}

func NewBoolean_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_expressionContext {
	var p = new(Boolean_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_boolean_expression

	return p
}

func (s *Boolean_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_expressionContext) Condition_or() ICondition_orContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_orContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_orContext)
}

func (s *Boolean_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterBoolean_expression(s)
	}
}

func (s *Boolean_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitBoolean_expression(s)
	}
}

func (s *Boolean_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitBoolean_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Boolean_expression() (localctx IBoolean_expressionContext) {
	localctx = NewBoolean_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, powerbuilderParserRULE_boolean_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(716)
		p.Condition_or()
	}

	return localctx
}

// ICondition_orContext is an interface to support dynamic dispatch.
type ICondition_orContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_orContext differentiates from other interfaces.
	IsCondition_orContext()
}

type Condition_orContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_orContext() *Condition_orContext {
	var p = new(Condition_orContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_condition_or
	return p
}

func (*Condition_orContext) IsCondition_orContext() {}

func NewCondition_orContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_orContext {
	var p = new(Condition_orContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_condition_or

	return p
}

func (s *Condition_orContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_orContext) AllCondition_and() []ICondition_andContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICondition_andContext)(nil)).Elem())
	var tst = make([]ICondition_andContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICondition_andContext)
		}
	}

	return tst
}

func (s *Condition_orContext) Condition_and(i int) ICondition_andContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_andContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICondition_andContext)
}

func (s *Condition_orContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_orContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_orContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCondition_or(s)
	}
}

func (s *Condition_orContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCondition_or(s)
	}
}

func (s *Condition_orContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCondition_or(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Condition_or() (localctx ICondition_orContext) {
	localctx = NewCondition_orContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, powerbuilderParserRULE_condition_or)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(718)
		p.Condition_and()
	}
	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__54 {
		{
			p.SetState(719)
			p.Match(powerbuilderParserT__54)
		}
		{
			p.SetState(720)
			p.Condition_and()
		}

		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICondition_andContext is an interface to support dynamic dispatch.
type ICondition_andContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_andContext differentiates from other interfaces.
	IsCondition_andContext()
}

type Condition_andContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_andContext() *Condition_andContext {
	var p = new(Condition_andContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_condition_and
	return p
}

func (*Condition_andContext) IsCondition_andContext() {}

func NewCondition_andContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_andContext {
	var p = new(Condition_andContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_condition_and

	return p
}

func (s *Condition_andContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_andContext) AllCondition_not() []ICondition_notContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICondition_notContext)(nil)).Elem())
	var tst = make([]ICondition_notContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICondition_notContext)
		}
	}

	return tst
}

func (s *Condition_andContext) Condition_not(i int) ICondition_notContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_notContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICondition_notContext)
}

func (s *Condition_andContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_andContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_andContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCondition_and(s)
	}
}

func (s *Condition_andContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCondition_and(s)
	}
}

func (s *Condition_andContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCondition_and(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Condition_and() (localctx ICondition_andContext) {
	localctx = NewCondition_andContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, powerbuilderParserRULE_condition_and)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(726)
		p.Condition_not()
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__55 {
		{
			p.SetState(727)
			p.Match(powerbuilderParserT__55)
		}
		{
			p.SetState(728)
			p.Condition_not()
		}

		p.SetState(733)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICondition_notContext is an interface to support dynamic dispatch.
type ICondition_notContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_notContext differentiates from other interfaces.
	IsCondition_notContext()
}

type Condition_notContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_notContext() *Condition_notContext {
	var p = new(Condition_notContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_condition_not
	return p
}

func (*Condition_notContext) IsCondition_notContext() {}

func NewCondition_notContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_notContext {
	var p = new(Condition_notContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_condition_not

	return p
}

func (s *Condition_notContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_notContext) Condition_comparison() ICondition_comparisonContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICondition_comparisonContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICondition_comparisonContext)
}

func (s *Condition_notContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_notContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_notContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCondition_not(s)
	}
}

func (s *Condition_notContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCondition_not(s)
	}
}

func (s *Condition_notContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCondition_not(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Condition_not() (localctx ICondition_notContext) {
	localctx = NewCondition_notContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, powerbuilderParserRULE_condition_not)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__56 {
		{
			p.SetState(734)
			p.Match(powerbuilderParserT__56)
		}

	}
	{
		p.SetState(737)
		p.Condition_comparison()
	}

	return localctx
}

// ICondition_comparisonContext is an interface to support dynamic dispatch.
type ICondition_comparisonContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCondition_comparisonContext differentiates from other interfaces.
	IsCondition_comparisonContext()
}

type Condition_comparisonContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCondition_comparisonContext() *Condition_comparisonContext {
	var p = new(Condition_comparisonContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_condition_comparison
	return p
}

func (*Condition_comparisonContext) IsCondition_comparisonContext() {}

func NewCondition_comparisonContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Condition_comparisonContext {
	var p = new(Condition_comparisonContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_condition_comparison

	return p
}

func (s *Condition_comparisonContext) GetParser() antlr.Parser { return s.parser }

func (s *Condition_comparisonContext) AllAdd_expr() []IAdd_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAdd_exprContext)(nil)).Elem())
	var tst = make([]IAdd_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAdd_exprContext)
		}
	}

	return tst
}

func (s *Condition_comparisonContext) Add_expr(i int) IAdd_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdd_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAdd_exprContext)
}

func (s *Condition_comparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Condition_comparisonContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Condition_comparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCondition_comparison(s)
	}
}

func (s *Condition_comparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCondition_comparison(s)
	}
}

func (s *Condition_comparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCondition_comparison(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Condition_comparison() (localctx ICondition_comparisonContext) {
	localctx = NewCondition_comparisonContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, powerbuilderParserRULE_condition_comparison)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(739)
		p.Add_expr()
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__2 || (((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(powerbuilderParserT__57-58))|(1<<(powerbuilderParserT__58-58))|(1<<(powerbuilderParserT__59-58))|(1<<(powerbuilderParserT__60-58))|(1<<(powerbuilderParserT__61-58)))) != 0) {
		p.SetState(740)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserT__2 || (((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(powerbuilderParserT__57-58))|(1<<(powerbuilderParserT__58-58))|(1<<(powerbuilderParserT__59-58))|(1<<(powerbuilderParserT__60-58))|(1<<(powerbuilderParserT__61-58)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(741)
			p.Add_expr()
		}

	}

	return localctx
}

// IAdd_exprContext is an interface to support dynamic dispatch.
type IAdd_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdd_exprContext differentiates from other interfaces.
	IsAdd_exprContext()
}

type Add_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdd_exprContext() *Add_exprContext {
	var p = new(Add_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_add_expr
	return p
}

func (*Add_exprContext) IsAdd_exprContext() {}

func NewAdd_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Add_exprContext {
	var p = new(Add_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_add_expr

	return p
}

func (s *Add_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Add_exprContext) AllMul_expr() []IMul_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMul_exprContext)(nil)).Elem())
	var tst = make([]IMul_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMul_exprContext)
		}
	}

	return tst
}

func (s *Add_exprContext) Mul_expr(i int) IMul_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMul_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMul_exprContext)
}

func (s *Add_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Add_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Add_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAdd_expr(s)
	}
}

func (s *Add_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAdd_expr(s)
	}
}

func (s *Add_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAdd_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Add_expr() (localctx IAdd_exprContext) {
	localctx = NewAdd_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, powerbuilderParserRULE_add_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(744)
		p.Mul_expr()
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
		p.SetState(745)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(746)
			p.Mul_expr()
		}

		p.SetState(751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IMul_exprContext is an interface to support dynamic dispatch.
type IMul_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMul_exprContext differentiates from other interfaces.
	IsMul_exprContext()
}

type Mul_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMul_exprContext() *Mul_exprContext {
	var p = new(Mul_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_mul_expr
	return p
}

func (*Mul_exprContext) IsMul_exprContext() {}

func NewMul_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mul_exprContext {
	var p = new(Mul_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_mul_expr

	return p
}

func (s *Mul_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Mul_exprContext) AllUnary_sign_expr() []IUnary_sign_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem())
	var tst = make([]IUnary_sign_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnary_sign_exprContext)
		}
	}

	return tst
}

func (s *Mul_exprContext) Unary_sign_expr(i int) IUnary_sign_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_sign_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnary_sign_exprContext)
}

func (s *Mul_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mul_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mul_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterMul_expr(s)
	}
}

func (s *Mul_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitMul_expr(s)
	}
}

func (s *Mul_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitMul_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Mul_expr() (localctx IMul_exprContext) {
	localctx = NewMul_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, powerbuilderParserRULE_mul_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(752)
		p.Unary_sign_expr()
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-63)&-(0x1f+1)) == 0 && ((1<<uint((_la-63)))&((1<<(powerbuilderParserT__62-63))|(1<<(powerbuilderParserT__63-63))|(1<<(powerbuilderParserT__64-63)))) != 0 {
		p.SetState(753)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-63)&-(0x1f+1)) == 0 && ((1<<uint((_la-63)))&((1<<(powerbuilderParserT__62-63))|(1<<(powerbuilderParserT__63-63))|(1<<(powerbuilderParserT__64-63)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(754)
			p.Unary_sign_expr()
		}

		p.SetState(759)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnary_sign_exprContext is an interface to support dynamic dispatch.
type IUnary_sign_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_sign_exprContext differentiates from other interfaces.
	IsUnary_sign_exprContext()
}

type Unary_sign_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_sign_exprContext() *Unary_sign_exprContext {
	var p = new(Unary_sign_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_unary_sign_expr
	return p
}

func (*Unary_sign_exprContext) IsUnary_sign_exprContext() {}

func NewUnary_sign_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_sign_exprContext {
	var p = new(Unary_sign_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_unary_sign_expr

	return p
}

func (s *Unary_sign_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_sign_exprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Unary_sign_exprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Unary_sign_exprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Unary_sign_exprContext) Atom() IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *Unary_sign_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_sign_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_sign_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterUnary_sign_expr(s)
	}
}

func (s *Unary_sign_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitUnary_sign_expr(s)
	}
}

func (s *Unary_sign_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitUnary_sign_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Unary_sign_expr() (localctx IUnary_sign_exprContext) {
	localctx = NewUnary_sign_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, powerbuilderParserRULE_unary_sign_expr)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(768)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(760)
			p.Match(powerbuilderParserLPAREN)
		}
		{
			p.SetState(761)
			p.Expression()
		}
		{
			p.SetState(762)
			p.Match(powerbuilderParserRPAREN)
		}

	case powerbuilderParserT__8, powerbuilderParserT__27, powerbuilderParserT__42, powerbuilderParserT__65, powerbuilderParserT__74, powerbuilderParserT__99, powerbuilderParserT__100, powerbuilderParserT__101, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123, powerbuilderParserDQUOTED_STRING, powerbuilderParserQUOTED_STRING, powerbuilderParserENUM, powerbuilderParserID, powerbuilderParserNUMBER, powerbuilderParserDATE, powerbuilderParserTIME:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__8 || _la == powerbuilderParserT__27 {
			p.SetState(764)
			_la = p.GetTokenStream().LA(1)

			if !(_la == powerbuilderParserT__8 || _la == powerbuilderParserT__27) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(767)
			p.Atom()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) If_simple_statement() IIf_simple_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_simple_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_simple_statementContext)
}

func (s *StatementContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *StatementContext) Assignment_statement() IAssignment_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_statementContext)
}

func (s *StatementContext) Statement_sub() IStatement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatement_subContext)
}

func (s *StatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *StatementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *StatementContext) Post_event() IPost_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPost_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPost_eventContext)
}

func (s *StatementContext) Function_call_statement() IFunction_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_statementContext)
}

func (s *StatementContext) Event_call_statement() IEvent_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statementContext)
}

func (s *StatementContext) Constant_decl() IConstant_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_declContext)
}

func (s *StatementContext) Variable_decl() IVariable_declContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_declContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_declContext)
}

func (s *StatementContext) Super_call_statement() ISuper_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_statementContext)
}

func (s *StatementContext) Do_loop_while_statement() IDo_loop_while_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDo_loop_while_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDo_loop_while_statementContext)
}

func (s *StatementContext) Do_while_loop_statement() IDo_while_loop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDo_while_loop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDo_while_loop_statementContext)
}

func (s *StatementContext) Create_call_statement() ICreate_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_statementContext)
}

func (s *StatementContext) Destroy_call_statement() IDestroy_call_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_statementContext)
}

func (s *StatementContext) Label_stat() ILabel_statContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabel_statContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabel_statContext)
}

func (s *StatementContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StatementContext) Throw_stat() IThrow_statContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_statContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_statContext)
}

func (s *StatementContext) Goto_stat() IGoto_statContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_statContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_statContext)
}

func (s *StatementContext) Choose_statement() IChoose_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChoose_statementContext)
}

func (s *StatementContext) Return_statement() IReturn_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *StatementContext) For_loop_statement() IFor_loop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFor_loop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFor_loop_statementContext)
}

func (s *StatementContext) Continue_statement() IContinue_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_statementContext)
}

func (s *StatementContext) Exit_statement() IExit_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExit_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExit_statementContext)
}

func (s *StatementContext) Atom() IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, powerbuilderParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(799)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(770)
			p.If_simple_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(771)
			p.Match(powerbuilderParserT__65)
		}
		{
			p.SetState(772)
			p.Identifier_name()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(773)
			p.Assignment_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(774)
			p.Statement_sub()
		}
		{
			p.SetState(775)
			p.Match(powerbuilderParserSEMI)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(777)
			p.If_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(778)
			p.Match(powerbuilderParserT__66)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(779)
			p.Post_event()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(780)
			p.Function_call_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(781)
			p.Event_call_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(782)
			p.Constant_decl()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(783)
			p.Variable_decl()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(784)
			p.Super_call_statement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(785)
			p.Do_loop_while_statement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(786)
			p.Do_while_loop_statement()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(787)
			p.Create_call_statement()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(788)
			p.Destroy_call_statement()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(789)
			p.Label_stat()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(790)
			p.Identifier()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(791)
			p.Throw_stat()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(792)
			p.Goto_stat()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(793)
			p.Choose_statement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(794)
			p.Return_statement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(795)
			p.For_loop_statement()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(796)
			p.Continue_statement()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(797)
			p.Exit_statement()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(798)
			p.Atom()
		}

	}

	return localctx
}

// IStatement_subContext is an interface to support dynamic dispatch.
type IStatement_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatement_subContext differentiates from other interfaces.
	IsStatement_subContext()
}

type Statement_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatement_subContext() *Statement_subContext {
	var p = new(Statement_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_statement_sub
	return p
}

func (*Statement_subContext) IsStatement_subContext() {}

func NewStatement_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Statement_subContext {
	var p = new(Statement_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_statement_sub

	return p
}

func (s *Statement_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Statement_subContext) Function_virtual_call_expression_sub() IFunction_virtual_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_virtual_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_virtual_call_expression_subContext)
}

func (s *Statement_subContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Statement_subContext) Return_sub() IReturn_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_subContext)
}

func (s *Statement_subContext) Open_call_sub() IOpen_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_call_subContext)
}

func (s *Statement_subContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *Statement_subContext) Variable_decl_sub() IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Statement_subContext) Super_call_sub() ISuper_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_subContext)
}

func (s *Statement_subContext) Create_call_sub() ICreate_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_subContext)
}

func (s *Statement_subContext) Destroy_call_sub() IDestroy_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_subContext)
}

func (s *Statement_subContext) Continue_sub() IContinue_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_subContext)
}

func (s *Statement_subContext) Goto_stat_sub() IGoto_stat_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_stat_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_stat_subContext)
}

func (s *Statement_subContext) Assignment_sub() IAssignment_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_subContext)
}

func (s *Statement_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Statement_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Statement_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterStatement_sub(s)
	}
}

func (s *Statement_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitStatement_sub(s)
	}
}

func (s *Statement_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitStatement_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Statement_sub() (localctx IStatement_subContext) {
	localctx = NewStatement_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, powerbuilderParserRULE_statement_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(813)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(801)
			p.Function_virtual_call_expression_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(802)
			p.Function_call_expression_sub()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(803)
			p.Return_sub()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(804)
			p.Open_call_sub()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(805)
			p.Close_call_sub()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(806)
			p.Variable_decl_sub()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(807)
			p.Super_call_sub()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(808)
			p.Create_call_sub()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(809)
			p.Destroy_call_sub()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(810)
			p.Continue_sub()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(811)
			p.Goto_stat_sub()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(812)
			p.Assignment_sub()
		}

	}

	return localctx
}

// IAssignment_subContext is an interface to support dynamic dispatch.
type IAssignment_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_subContext differentiates from other interfaces.
	IsAssignment_subContext()
}

type Assignment_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_subContext() *Assignment_subContext {
	var p = new(Assignment_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_assignment_sub
	return p
}

func (*Assignment_subContext) IsAssignment_subContext() {}

func NewAssignment_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_subContext {
	var p = new(Assignment_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_assignment_sub

	return p
}

func (s *Assignment_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_subContext) Lvalue_sub() ILvalue_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_subContext)
}

func (s *Assignment_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Assignment_subContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Assignment_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAssignment_sub(s)
	}
}

func (s *Assignment_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAssignment_sub(s)
	}
}

func (s *Assignment_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAssignment_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Assignment_sub() (localctx IAssignment_subContext) {
	localctx = NewAssignment_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, powerbuilderParserRULE_assignment_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(815)
		p.Lvalue_sub()
	}
	p.SetState(816)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__2 || (((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(powerbuilderParserT__67-68))|(1<<(powerbuilderParserT__68-68))|(1<<(powerbuilderParserT__69-68))|(1<<(powerbuilderParserT__70-68)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(821)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(817)
			p.Match(powerbuilderParserT__56)
		}

	case 2:
		{
			p.SetState(818)
			p.Match(powerbuilderParserT__23)
		}

	case 3:
		{
			p.SetState(819)
			p.Boolean_expression()
		}

	case 4:
		{
			p.SetState(820)
			p.Expression()
		}

	}

	return localctx
}

// IAssignment_statementContext is an interface to support dynamic dispatch.
type IAssignment_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignment_statementContext differentiates from other interfaces.
	IsAssignment_statementContext()
}

type Assignment_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignment_statementContext() *Assignment_statementContext {
	var p = new(Assignment_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_assignment_statement
	return p
}

func (*Assignment_statementContext) IsAssignment_statementContext() {}

func NewAssignment_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assignment_statementContext {
	var p = new(Assignment_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_assignment_statement

	return p
}

func (s *Assignment_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Assignment_statementContext) Assignment_sub() IAssignment_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignment_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignment_subContext)
}

func (s *Assignment_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *Assignment_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assignment_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assignment_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAssignment_statement(s)
	}
}

func (s *Assignment_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAssignment_statement(s)
	}
}

func (s *Assignment_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAssignment_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Assignment_statement() (localctx IAssignment_statementContext) {
	localctx = NewAssignment_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, powerbuilderParserRULE_assignment_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(823)
		p.Assignment_sub()
	}
	p.SetState(825)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(824)
			p.Match(powerbuilderParserSEMI)
		}

	}

	return localctx
}

// ILvalue_subContext is an interface to support dynamic dispatch.
type ILvalue_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLvalue_subContext differentiates from other interfaces.
	IsLvalue_subContext()
}

type Lvalue_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLvalue_subContext() *Lvalue_subContext {
	var p = new(Lvalue_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_lvalue_sub
	return p
}

func (*Lvalue_subContext) IsLvalue_subContext() {}

func NewLvalue_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lvalue_subContext {
	var p = new(Lvalue_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_lvalue_sub

	return p
}

func (s *Lvalue_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Lvalue_subContext) Atom_sub() IAtom_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_subContext)
}

func (s *Lvalue_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *Lvalue_subContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *Lvalue_subContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Lvalue_subContext) Atom_sub_array1() IAtom_sub_array1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_array1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_array1Context)
}

func (s *Lvalue_subContext) Atom_sub_ref1() IAtom_sub_ref1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_ref1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_ref1Context)
}

func (s *Lvalue_subContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Lvalue_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lvalue_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lvalue_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterLvalue_sub(s)
	}
}

func (s *Lvalue_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitLvalue_sub(s)
	}
}

func (s *Lvalue_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitLvalue_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Lvalue_sub() (localctx ILvalue_subContext) {
	localctx = NewLvalue_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, powerbuilderParserRULE_lvalue_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(835)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(827)
			p.Atom_sub()
		}

		{
			p.SetState(828)
			p.Match(powerbuilderParserDOT)
		}
		{
			p.SetState(829)
			p.Identifier_name_ex()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(831)
			p.Atom_sub_call1()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(832)
			p.Atom_sub_array1()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(833)
			p.Atom_sub_ref1()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(834)
			p.Atom_sub_member1()
		}

	}

	return localctx
}

// IReturn_subContext is an interface to support dynamic dispatch.
type IReturn_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_subContext differentiates from other interfaces.
	IsReturn_subContext()
}

type Return_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_subContext() *Return_subContext {
	var p = new(Return_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_return_sub
	return p
}

func (*Return_subContext) IsReturn_subContext() {}

func NewReturn_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_subContext {
	var p = new(Return_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_return_sub

	return p
}

func (s *Return_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterReturn_sub(s)
	}
}

func (s *Return_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitReturn_sub(s)
	}
}

func (s *Return_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitReturn_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Return_sub() (localctx IReturn_subContext) {
	localctx = NewReturn_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, powerbuilderParserRULE_return_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Match(powerbuilderParserT__71)
	}
	p.SetState(839)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(838)
			p.Expression()
		}

	}

	return localctx
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_return_statement
	return p
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) Return_sub() IReturn_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_subContext)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (s *Return_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitReturn_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Return_statement() (localctx IReturn_statementContext) {
	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, powerbuilderParserRULE_return_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.Return_sub()
	}

	return localctx
}

// IFunction_call_expression_subContext is an interface to support dynamic dispatch.
type IFunction_call_expression_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_expression_subContext differentiates from other interfaces.
	IsFunction_call_expression_subContext()
}

type Function_call_expression_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_expression_subContext() *Function_call_expression_subContext {
	var p = new(Function_call_expression_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_function_call_expression_sub
	return p
}

func (*Function_call_expression_subContext) IsFunction_call_expression_subContext() {}

func NewFunction_call_expression_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_expression_subContext {
	var p = new(Function_call_expression_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_function_call_expression_sub

	return p
}

func (s *Function_call_expression_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_expression_subContext) Atom_sub() IAtom_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_subContext)
}

func (s *Function_call_expression_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *Function_call_expression_subContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *Function_call_expression_subContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Function_call_expression_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_expression_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_expression_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunction_call_expression_sub(s)
	}
}

func (s *Function_call_expression_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunction_call_expression_sub(s)
	}
}

func (s *Function_call_expression_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunction_call_expression_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Function_call_expression_sub() (localctx IFunction_call_expression_subContext) {
	localctx = NewFunction_call_expression_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, powerbuilderParserRULE_function_call_expression_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(848)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 109, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(843)
			p.Atom_sub()
		}

		{
			p.SetState(844)
			p.Match(powerbuilderParserDOT)
		}
		{
			p.SetState(845)
			p.Identifier_name_ex()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(847)
			p.Atom_sub_call1()
		}

	}

	return localctx
}

// IFunction_virtual_call_expression_subContext is an interface to support dynamic dispatch.
type IFunction_virtual_call_expression_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_virtual_call_expression_subContext differentiates from other interfaces.
	IsFunction_virtual_call_expression_subContext()
}

type Function_virtual_call_expression_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_virtual_call_expression_subContext() *Function_virtual_call_expression_subContext {
	var p = new(Function_virtual_call_expression_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_function_virtual_call_expression_sub
	return p
}

func (*Function_virtual_call_expression_subContext) IsFunction_virtual_call_expression_subContext() {}

func NewFunction_virtual_call_expression_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_virtual_call_expression_subContext {
	var p = new(Function_virtual_call_expression_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_function_virtual_call_expression_sub

	return p
}

func (s *Function_virtual_call_expression_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_virtual_call_expression_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Function_virtual_call_expression_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *Function_virtual_call_expression_subContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_virtual_call_expression_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_virtual_call_expression_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_virtual_call_expression_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunction_virtual_call_expression_sub(s)
	}
}

func (s *Function_virtual_call_expression_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunction_virtual_call_expression_sub(s)
	}
}

func (s *Function_virtual_call_expression_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunction_virtual_call_expression_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Function_virtual_call_expression_sub() (localctx IFunction_virtual_call_expression_subContext) {
	localctx = NewFunction_virtual_call_expression_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, powerbuilderParserRULE_function_virtual_call_expression_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(864)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(850)
			p.Identifier_name()
		}
		{
			p.SetState(851)
			p.Match(powerbuilderParserDOT)
		}
		{
			p.SetState(852)
			p.Match(powerbuilderParserT__7)
		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__42 {
			{
				p.SetState(853)
				p.Match(powerbuilderParserT__42)
			}

		}
		{
			p.SetState(856)
			p.Function_call_expression_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(858)
			p.Identifier_name()
		}
		{
			p.SetState(859)
			p.Match(powerbuilderParserDOT)
		}
		{
			p.SetState(860)
			p.Match(powerbuilderParserT__42)
		}
		{
			p.SetState(861)
			p.Match(powerbuilderParserT__7)
		}
		{
			p.SetState(862)
			p.Function_call_expression_sub()
		}

	}

	return localctx
}

// IOpen_call_subContext is an interface to support dynamic dispatch.
type IOpen_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOpen_call_subContext differentiates from other interfaces.
	IsOpen_call_subContext()
}

type Open_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOpen_call_subContext() *Open_call_subContext {
	var p = new(Open_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_open_call_sub
	return p
}

func (*Open_call_subContext) IsOpen_call_subContext() {}

func NewOpen_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Open_call_subContext {
	var p = new(Open_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_open_call_sub

	return p
}

func (s *Open_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Open_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Open_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Open_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Open_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Open_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Open_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterOpen_call_sub(s)
	}
}

func (s *Open_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitOpen_call_sub(s)
	}
}

func (s *Open_call_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitOpen_call_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Open_call_sub() (localctx IOpen_call_subContext) {
	localctx = NewOpen_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, powerbuilderParserRULE_open_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(866)
		p.Match(powerbuilderParserT__12)
	}
	{
		p.SetState(867)
		p.Match(powerbuilderParserLPAREN)
	}
	{
		p.SetState(868)
		p.Expression_list()
	}
	{
		p.SetState(869)
		p.Match(powerbuilderParserRPAREN)
	}

	return localctx
}

// IClose_call_subContext is an interface to support dynamic dispatch.
type IClose_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClose_call_subContext differentiates from other interfaces.
	IsClose_call_subContext()
}

type Close_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClose_call_subContext() *Close_call_subContext {
	var p = new(Close_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_close_call_sub
	return p
}

func (*Close_call_subContext) IsClose_call_subContext() {}

func NewClose_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Close_call_subContext {
	var p = new(Close_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_close_call_sub

	return p
}

func (s *Close_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Close_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Close_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Close_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Close_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Close_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Close_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterClose_call_sub(s)
	}
}

func (s *Close_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitClose_call_sub(s)
	}
}

func (s *Close_call_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitClose_call_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Close_call_sub() (localctx IClose_call_subContext) {
	localctx = NewClose_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, powerbuilderParserRULE_close_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(878)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__41:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(871)
			p.Match(powerbuilderParserT__41)
		}
		{
			p.SetState(872)
			p.Match(powerbuilderParserLPAREN)
		}
		{
			p.SetState(873)
			p.Expression_list()
		}
		{
			p.SetState(874)
			p.Match(powerbuilderParserRPAREN)
		}

	case powerbuilderParserT__72:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(876)
			p.Match(powerbuilderParserT__72)
		}
		{
			p.SetState(877)
			p.Match(powerbuilderParserT__41)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunction_call_statementContext is an interface to support dynamic dispatch.
type IFunction_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_call_statementContext differentiates from other interfaces.
	IsFunction_call_statementContext()
}

type Function_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_call_statementContext() *Function_call_statementContext {
	var p = new(Function_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_function_call_statement
	return p
}

func (*Function_call_statementContext) IsFunction_call_statementContext() {}

func NewFunction_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_call_statementContext {
	var p = new(Function_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_function_call_statement

	return p
}

func (s *Function_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_call_statementContext) Function_call_expression_sub() IFunction_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_call_expression_subContext)
}

func (s *Function_call_statementContext) Function_virtual_call_expression_sub() IFunction_virtual_call_expression_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_virtual_call_expression_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_virtual_call_expression_subContext)
}

func (s *Function_call_statementContext) Open_call_sub() IOpen_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOpen_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOpen_call_subContext)
}

func (s *Function_call_statementContext) Close_call_sub() IClose_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClose_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClose_call_subContext)
}

func (s *Function_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFunction_call_statement(s)
	}
}

func (s *Function_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFunction_call_statement(s)
	}
}

func (s *Function_call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFunction_call_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Function_call_statement() (localctx IFunction_call_statementContext) {
	localctx = NewFunction_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, powerbuilderParserRULE_function_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(884)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(880)
			p.Function_call_expression_sub()
		}

	case 2:
		{
			p.SetState(881)
			p.Function_virtual_call_expression_sub()
		}

	case 3:
		{
			p.SetState(882)
			p.Open_call_sub()
		}

	case 4:
		{
			p.SetState(883)
			p.Close_call_sub()
		}

	}

	return localctx
}

// ISuper_call_subContext is an interface to support dynamic dispatch.
type ISuper_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuper_call_subContext differentiates from other interfaces.
	IsSuper_call_subContext()
}

type Super_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuper_call_subContext() *Super_call_subContext {
	var p = new(Super_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_super_call_sub
	return p
}

func (*Super_call_subContext) IsSuper_call_subContext() {}

func NewSuper_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Super_call_subContext {
	var p = new(Super_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_super_call_sub

	return p
}

func (s *Super_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Super_call_subContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Super_call_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Super_call_subContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Super_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Super_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Super_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterSuper_call_sub(s)
	}
}

func (s *Super_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitSuper_call_sub(s)
	}
}

func (s *Super_call_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitSuper_call_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Super_call_sub() (localctx ISuper_call_subContext) {
	localctx = NewSuper_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, powerbuilderParserRULE_super_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.Match(powerbuilderParserT__73)
	}
	p.SetState(890)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(887)
			p.Identifier_name()
		}
		{
			p.SetState(888)
			p.Match(powerbuilderParserT__15)
		}

	}
	p.SetState(894)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(892)
			p.Atom_sub_call1()
		}

	case 2:
		{
			p.SetState(893)
			p.Atom_sub_member1()
		}

	}

	return localctx
}

// ISuper_call_statementContext is an interface to support dynamic dispatch.
type ISuper_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuper_call_statementContext differentiates from other interfaces.
	IsSuper_call_statementContext()
}

type Super_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuper_call_statementContext() *Super_call_statementContext {
	var p = new(Super_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_super_call_statement
	return p
}

func (*Super_call_statementContext) IsSuper_call_statementContext() {}

func NewSuper_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Super_call_statementContext {
	var p = new(Super_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_super_call_statement

	return p
}

func (s *Super_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Super_call_statementContext) Super_call_sub() ISuper_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuper_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISuper_call_subContext)
}

func (s *Super_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Super_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Super_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterSuper_call_statement(s)
	}
}

func (s *Super_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitSuper_call_statement(s)
	}
}

func (s *Super_call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitSuper_call_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Super_call_statement() (localctx ISuper_call_statementContext) {
	localctx = NewSuper_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, powerbuilderParserRULE_super_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.Super_call_sub()
	}

	return localctx
}

// IEvent_call_statement_subContext is an interface to support dynamic dispatch.
type IEvent_call_statement_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_call_statement_subContext differentiates from other interfaces.
	IsEvent_call_statement_subContext()
}

type Event_call_statement_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_call_statement_subContext() *Event_call_statement_subContext {
	var p = new(Event_call_statement_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_event_call_statement_sub
	return p
}

func (*Event_call_statement_subContext) IsEvent_call_statement_subContext() {}

func NewEvent_call_statement_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_call_statement_subContext {
	var p = new(Event_call_statement_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_event_call_statement_sub

	return p
}

func (s *Event_call_statement_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_call_statement_subContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *Event_call_statement_subContext) AllIdentifier_name() []IIdentifier_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem())
	var tst = make([]IIdentifier_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifier_nameContext)
		}
	}

	return tst
}

func (s *Event_call_statement_subContext) Identifier_name(i int) IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Event_call_statement_subContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserDOT)
}

func (s *Event_call_statement_subContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, i)
}

func (s *Event_call_statement_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_call_statement_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_call_statement_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterEvent_call_statement_sub(s)
	}
}

func (s *Event_call_statement_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitEvent_call_statement_sub(s)
	}
}

func (s *Event_call_statement_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitEvent_call_statement_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Event_call_statement_sub() (localctx IEvent_call_statement_subContext) {
	localctx = NewEvent_call_statement_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, powerbuilderParserRULE_event_call_statement_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(907)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserID:
		{
			p.SetState(898)
			p.Identifier_name()
		}
		{
			p.SetState(899)
			p.Match(powerbuilderParserDOT)
		}
		p.SetState(903)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserID {
			{
				p.SetState(900)
				p.Identifier_name()
			}
			{
				p.SetState(901)
				p.Match(powerbuilderParserDOT)
			}

		}

	case powerbuilderParserT__74:
		{
			p.SetState(905)
			p.Match(powerbuilderParserT__74)
		}
		{
			p.SetState(906)
			p.Match(powerbuilderParserT__45)
		}

	case powerbuilderParserT__42:

	default:
	}
	{
		p.SetState(909)
		p.Match(powerbuilderParserT__42)
	}
	{
		p.SetState(910)
		p.Atom_sub_call1()
	}

	return localctx
}

// IEvent_call_statementContext is an interface to support dynamic dispatch.
type IEvent_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEvent_call_statementContext differentiates from other interfaces.
	IsEvent_call_statementContext()
}

type Event_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEvent_call_statementContext() *Event_call_statementContext {
	var p = new(Event_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_event_call_statement
	return p
}

func (*Event_call_statementContext) IsEvent_call_statementContext() {}

func NewEvent_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Event_call_statementContext {
	var p = new(Event_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_event_call_statement

	return p
}

func (s *Event_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Event_call_statementContext) Event_call_statement_sub() IEvent_call_statement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statement_subContext)
}

func (s *Event_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Event_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Event_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterEvent_call_statement(s)
	}
}

func (s *Event_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitEvent_call_statement(s)
	}
}

func (s *Event_call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitEvent_call_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Event_call_statement() (localctx IEvent_call_statementContext) {
	localctx = NewEvent_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, powerbuilderParserRULE_event_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(912)
		p.Event_call_statement_sub()
	}

	return localctx
}

// ICreate_call_subContext is an interface to support dynamic dispatch.
type ICreate_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_call_subContext differentiates from other interfaces.
	IsCreate_call_subContext()
}

type Create_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_call_subContext() *Create_call_subContext {
	var p = new(Create_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_create_call_sub
	return p
}

func (*Create_call_subContext) IsCreate_call_subContext() {}

func NewCreate_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_call_subContext {
	var p = new(Create_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_create_call_sub

	return p
}

func (s *Create_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_call_subContext) Data_type_name() IData_type_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_nameContext)
}

func (s *Create_call_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Create_call_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *Create_call_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Create_call_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Create_call_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Create_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCreate_call_sub(s)
	}
}

func (s *Create_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCreate_call_sub(s)
	}
}

func (s *Create_call_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCreate_call_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Create_call_sub() (localctx ICreate_call_subContext) {
	localctx = NewCreate_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, powerbuilderParserRULE_create_call_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(914)
		p.Match(powerbuilderParserT__43)
	}
	p.SetState(916)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__75 {
		{
			p.SetState(915)
			p.Match(powerbuilderParserT__75)
		}

	}
	p.SetState(921)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(918)
			p.Identifier_name()
		}
		{
			p.SetState(919)
			p.Match(powerbuilderParserDOT)
		}

	}
	{
		p.SetState(923)
		p.Data_type_name()
	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserLPAREN {
		{
			p.SetState(924)
			p.Match(powerbuilderParserLPAREN)
		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__23 || _la == powerbuilderParserT__41 || _la == powerbuilderParserT__72 {
			{
				p.SetState(925)
				p.Expression_list()
			}

		}
		{
			p.SetState(928)
			p.Match(powerbuilderParserRPAREN)
		}

	}

	return localctx
}

// ICreate_call_statementContext is an interface to support dynamic dispatch.
type ICreate_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_call_statementContext differentiates from other interfaces.
	IsCreate_call_statementContext()
}

type Create_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_call_statementContext() *Create_call_statementContext {
	var p = new(Create_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_create_call_statement
	return p
}

func (*Create_call_statementContext) IsCreate_call_statementContext() {}

func NewCreate_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_call_statementContext {
	var p = new(Create_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_create_call_statement

	return p
}

func (s *Create_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_call_statementContext) Create_call_sub() ICreate_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_call_subContext)
}

func (s *Create_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCreate_call_statement(s)
	}
}

func (s *Create_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCreate_call_statement(s)
	}
}

func (s *Create_call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCreate_call_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Create_call_statement() (localctx ICreate_call_statementContext) {
	localctx = NewCreate_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, powerbuilderParserRULE_create_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(931)
		p.Create_call_sub()
	}

	return localctx
}

// IDestroy_call_subContext is an interface to support dynamic dispatch.
type IDestroy_call_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDestroy_call_subContext differentiates from other interfaces.
	IsDestroy_call_subContext()
}

type Destroy_call_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestroy_call_subContext() *Destroy_call_subContext {
	var p = new(Destroy_call_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_destroy_call_sub
	return p
}

func (*Destroy_call_subContext) IsDestroy_call_subContext() {}

func NewDestroy_call_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Destroy_call_subContext {
	var p = new(Destroy_call_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_destroy_call_sub

	return p
}

func (s *Destroy_call_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Destroy_call_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Destroy_call_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Destroy_call_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Destroy_call_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDestroy_call_sub(s)
	}
}

func (s *Destroy_call_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDestroy_call_sub(s)
	}
}

func (s *Destroy_call_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDestroy_call_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Destroy_call_sub() (localctx IDestroy_call_subContext) {
	localctx = NewDestroy_call_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, powerbuilderParserRULE_destroy_call_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(933)
		p.Match(powerbuilderParserT__44)
	}
	{
		p.SetState(934)
		p.Expression()
	}

	return localctx
}

// IDestroy_call_statementContext is an interface to support dynamic dispatch.
type IDestroy_call_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDestroy_call_statementContext differentiates from other interfaces.
	IsDestroy_call_statementContext()
}

type Destroy_call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDestroy_call_statementContext() *Destroy_call_statementContext {
	var p = new(Destroy_call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_destroy_call_statement
	return p
}

func (*Destroy_call_statementContext) IsDestroy_call_statementContext() {}

func NewDestroy_call_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Destroy_call_statementContext {
	var p = new(Destroy_call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_destroy_call_statement

	return p
}

func (s *Destroy_call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Destroy_call_statementContext) Destroy_call_sub() IDestroy_call_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDestroy_call_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDestroy_call_subContext)
}

func (s *Destroy_call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Destroy_call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Destroy_call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDestroy_call_statement(s)
	}
}

func (s *Destroy_call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDestroy_call_statement(s)
	}
}

func (s *Destroy_call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDestroy_call_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Destroy_call_statement() (localctx IDestroy_call_statementContext) {
	localctx = NewDestroy_call_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, powerbuilderParserRULE_destroy_call_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		p.Destroy_call_sub()
	}

	return localctx
}

// IFor_loop_statementContext is an interface to support dynamic dispatch.
type IFor_loop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFor_loop_statementContext differentiates from other interfaces.
	IsFor_loop_statementContext()
}

type For_loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFor_loop_statementContext() *For_loop_statementContext {
	var p = new(For_loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_for_loop_statement
	return p
}

func (*For_loop_statementContext) IsFor_loop_statementContext() {}

func NewFor_loop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *For_loop_statementContext {
	var p = new(For_loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_for_loop_statement

	return p
}

func (s *For_loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *For_loop_statementContext) Lvalue_sub() ILvalue_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILvalue_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILvalue_subContext)
}

func (s *For_loop_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *For_loop_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *For_loop_statementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *For_loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *For_loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *For_loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterFor_loop_statement(s)
	}
}

func (s *For_loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitFor_loop_statement(s)
	}
}

func (s *For_loop_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitFor_loop_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) For_loop_statement() (localctx IFor_loop_statementContext) {
	localctx = NewFor_loop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, powerbuilderParserRULE_for_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(938)
		p.Match(powerbuilderParserT__33)
	}
	{
		p.SetState(939)
		p.Lvalue_sub()
	}
	{
		p.SetState(940)
		p.Match(powerbuilderParserT__2)
	}
	{
		p.SetState(941)
		p.Expression()
	}
	{
		p.SetState(942)
		p.Match(powerbuilderParserT__9)
	}
	{
		p.SetState(943)
		p.Expression()
	}
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__76 {
		{
			p.SetState(944)
			p.Match(powerbuilderParserT__76)
		}
		{
			p.SetState(945)
			p.Expression()
		}

	}
	{
		p.SetState(948)
		p.Statement()
	}
	{
		p.SetState(949)
		p.Match(powerbuilderParserT__77)
	}

	return localctx
}

// IDo_while_loop_statementContext is an interface to support dynamic dispatch.
type IDo_while_loop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDo_while_loop_statementContext differentiates from other interfaces.
	IsDo_while_loop_statementContext()
}

type Do_while_loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDo_while_loop_statementContext() *Do_while_loop_statementContext {
	var p = new(Do_while_loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_do_while_loop_statement
	return p
}

func (*Do_while_loop_statementContext) IsDo_while_loop_statementContext() {}

func NewDo_while_loop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Do_while_loop_statementContext {
	var p = new(Do_while_loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_do_while_loop_statement

	return p
}

func (s *Do_while_loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Do_while_loop_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Do_while_loop_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Do_while_loop_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Do_while_loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Do_while_loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Do_while_loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDo_while_loop_statement(s)
	}
}

func (s *Do_while_loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDo_while_loop_statement(s)
	}
}

func (s *Do_while_loop_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDo_while_loop_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Do_while_loop_statement() (localctx IDo_while_loop_statementContext) {
	localctx = NewDo_while_loop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, powerbuilderParserRULE_do_while_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(951)
		p.Match(powerbuilderParserT__78)
	}
	p.SetState(952)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__79 || _la == powerbuilderParserT__80) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(953)
		p.Boolean_expression()
	}
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(954)
			p.Statement()
		}

		p.SetState(959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(960)
		p.Match(powerbuilderParserT__81)
	}

	return localctx
}

// IDo_loop_while_statementContext is an interface to support dynamic dispatch.
type IDo_loop_while_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDo_loop_while_statementContext differentiates from other interfaces.
	IsDo_loop_while_statementContext()
}

type Do_loop_while_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDo_loop_while_statementContext() *Do_loop_while_statementContext {
	var p = new(Do_loop_while_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_do_loop_while_statement
	return p
}

func (*Do_loop_while_statementContext) IsDo_loop_while_statementContext() {}

func NewDo_loop_while_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Do_loop_while_statementContext {
	var p = new(Do_loop_while_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_do_loop_while_statement

	return p
}

func (s *Do_loop_while_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Do_loop_while_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *Do_loop_while_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Do_loop_while_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Do_loop_while_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Do_loop_while_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Do_loop_while_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterDo_loop_while_statement(s)
	}
}

func (s *Do_loop_while_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitDo_loop_while_statement(s)
	}
}

func (s *Do_loop_while_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitDo_loop_while_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Do_loop_while_statement() (localctx IDo_loop_while_statementContext) {
	localctx = NewDo_loop_while_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, powerbuilderParserRULE_do_loop_while_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(962)
		p.Match(powerbuilderParserT__78)
	}
	p.SetState(966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(963)
			p.Statement()
		}

		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(969)
		p.Match(powerbuilderParserT__81)
	}
	p.SetState(970)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__79 || _la == powerbuilderParserT__80) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(971)
		p.Boolean_expression()
	}

	return localctx
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllBoolean_expression() []IBoolean_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem())
	var tst = make([]IBoolean_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBoolean_expressionContext)
		}
	}

	return tst
}

func (s *If_statementContext) Boolean_expression(i int) IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *If_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, 0)
}

func (s *If_statementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *If_statementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (s *If_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitIf_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, powerbuilderParserRULE_if_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(973)
		p.Match(powerbuilderParserT__82)
	}
	{
		p.SetState(974)
		p.Boolean_expression()
	}
	{
		p.SetState(975)
		p.Match(powerbuilderParserT__83)
	}
	p.SetState(979)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(976)
			p.Statement()
		}

		p.SetState(981)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(993)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__84 {
		{
			p.SetState(982)
			p.Match(powerbuilderParserT__84)
		}
		{
			p.SetState(983)
			p.Boolean_expression()
		}
		{
			p.SetState(984)
			p.Match(powerbuilderParserT__83)
		}
		p.SetState(988)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
			{
				p.SetState(985)
				p.Statement()
			}

			p.SetState(990)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(995)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1003)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__85 {
		{
			p.SetState(996)
			p.Match(powerbuilderParserT__85)
		}
		p.SetState(1000)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
			{
				p.SetState(997)
				p.Statement()
			}

			p.SetState(1002)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1005)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(1006)
		p.Match(powerbuilderParserT__82)
	}
	p.SetState(1009)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1007)
			p.Match(powerbuilderParserSEMI)
		}

	case 2:

	}

	return localctx
}

// IIf_simple_statementContext is an interface to support dynamic dispatch.
type IIf_simple_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_simple_statementContext differentiates from other interfaces.
	IsIf_simple_statementContext()
}

type If_simple_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_simple_statementContext() *If_simple_statementContext {
	var p = new(If_simple_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_if_simple_statement
	return p
}

func (*If_simple_statementContext) IsIf_simple_statementContext() {}

func NewIf_simple_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_simple_statementContext {
	var p = new(If_simple_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_if_simple_statement

	return p
}

func (s *If_simple_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_simple_statementContext) Boolean_expression() IBoolean_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_expressionContext)
}

func (s *If_simple_statementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *If_simple_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_simple_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_simple_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterIf_simple_statement(s)
	}
}

func (s *If_simple_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitIf_simple_statement(s)
	}
}

func (s *If_simple_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitIf_simple_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) If_simple_statement() (localctx IIf_simple_statementContext) {
	localctx = NewIf_simple_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, powerbuilderParserRULE_if_simple_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		p.Match(powerbuilderParserT__82)
	}
	{
		p.SetState(1012)
		p.Boolean_expression()
	}
	{
		p.SetState(1013)
		p.Match(powerbuilderParserT__83)
	}
	{
		p.SetState(1014)
		p.Statement()
	}

	return localctx
}

// IContinue_subContext is an interface to support dynamic dispatch.
type IContinue_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinue_subContext differentiates from other interfaces.
	IsContinue_subContext()
}

type Continue_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_subContext() *Continue_subContext {
	var p = new(Continue_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_continue_sub
	return p
}

func (*Continue_subContext) IsContinue_subContext() {}

func NewContinue_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_subContext {
	var p = new(Continue_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_continue_sub

	return p
}

func (s *Continue_subContext) GetParser() antlr.Parser { return s.parser }
func (s *Continue_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterContinue_sub(s)
	}
}

func (s *Continue_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitContinue_sub(s)
	}
}

func (s *Continue_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitContinue_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Continue_sub() (localctx IContinue_subContext) {
	localctx = NewContinue_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, powerbuilderParserRULE_continue_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1016)
		p.Match(powerbuilderParserT__86)
	}

	return localctx
}

// IContinue_statementContext is an interface to support dynamic dispatch.
type IContinue_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinue_statementContext differentiates from other interfaces.
	IsContinue_statementContext()
}

type Continue_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinue_statementContext() *Continue_statementContext {
	var p = new(Continue_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_continue_statement
	return p
}

func (*Continue_statementContext) IsContinue_statementContext() {}

func NewContinue_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Continue_statementContext {
	var p = new(Continue_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_continue_statement

	return p
}

func (s *Continue_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Continue_statementContext) Continue_sub() IContinue_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinue_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinue_subContext)
}

func (s *Continue_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Continue_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Continue_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterContinue_statement(s)
	}
}

func (s *Continue_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitContinue_statement(s)
	}
}

func (s *Continue_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitContinue_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Continue_statement() (localctx IContinue_statementContext) {
	localctx = NewContinue_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, powerbuilderParserRULE_continue_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1018)
		p.Continue_sub()
	}

	return localctx
}

// IPost_event_subContext is an interface to support dynamic dispatch.
type IPost_event_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPost_event_subContext differentiates from other interfaces.
	IsPost_event_subContext()
}

type Post_event_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPost_event_subContext() *Post_event_subContext {
	var p = new(Post_event_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_post_event_sub
	return p
}

func (*Post_event_subContext) IsPost_event_subContext() {}

func NewPost_event_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Post_event_subContext {
	var p = new(Post_event_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_post_event_sub

	return p
}

func (s *Post_event_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Post_event_subContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *Post_event_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Post_event_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Post_event_subContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *Post_event_subContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *Post_event_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Post_event_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Post_event_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Post_event_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterPost_event_sub(s)
	}
}

func (s *Post_event_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitPost_event_sub(s)
	}
}

func (s *Post_event_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitPost_event_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Post_event_sub() (localctx IPost_event_subContext) {
	localctx = NewPost_event_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, powerbuilderParserRULE_post_event_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__74 || _la == powerbuilderParserID {
		{
			p.SetState(1020)
			p.Atom_sub_member1()
		}
		{
			p.SetState(1021)
			p.Match(powerbuilderParserDOT)
		}

	}
	p.SetState(1025)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__87 || _la == powerbuilderParserT__88) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(1027)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__42 {
		{
			p.SetState(1026)
			p.Match(powerbuilderParserT__42)
		}

	}
	{
		p.SetState(1029)
		p.Identifier_name_ex()
	}
	{
		p.SetState(1030)
		p.Match(powerbuilderParserLPAREN)
	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__23 || _la == powerbuilderParserT__41 || _la == powerbuilderParserT__72 {
		{
			p.SetState(1031)
			p.Expression_list()
		}

	}
	{
		p.SetState(1034)
		p.Match(powerbuilderParserRPAREN)
	}

	return localctx
}

// IPost_eventContext is an interface to support dynamic dispatch.
type IPost_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPost_eventContext differentiates from other interfaces.
	IsPost_eventContext()
}

type Post_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPost_eventContext() *Post_eventContext {
	var p = new(Post_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_post_event
	return p
}

func (*Post_eventContext) IsPost_eventContext() {}

func NewPost_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Post_eventContext {
	var p = new(Post_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_post_event

	return p
}

func (s *Post_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Post_eventContext) Post_event_sub() IPost_event_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPost_event_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPost_event_subContext)
}

func (s *Post_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Post_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Post_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterPost_event(s)
	}
}

func (s *Post_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitPost_event(s)
	}
}

func (s *Post_eventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitPost_event(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Post_event() (localctx IPost_eventContext) {
	localctx = NewPost_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, powerbuilderParserRULE_post_event)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1036)
		p.Post_event_sub()
	}

	return localctx
}

// IExit_statement_subContext is an interface to support dynamic dispatch.
type IExit_statement_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExit_statement_subContext differentiates from other interfaces.
	IsExit_statement_subContext()
}

type Exit_statement_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExit_statement_subContext() *Exit_statement_subContext {
	var p = new(Exit_statement_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_exit_statement_sub
	return p
}

func (*Exit_statement_subContext) IsExit_statement_subContext() {}

func NewExit_statement_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exit_statement_subContext {
	var p = new(Exit_statement_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_exit_statement_sub

	return p
}

func (s *Exit_statement_subContext) GetParser() antlr.Parser { return s.parser }
func (s *Exit_statement_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exit_statement_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exit_statement_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterExit_statement_sub(s)
	}
}

func (s *Exit_statement_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitExit_statement_sub(s)
	}
}

func (s *Exit_statement_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitExit_statement_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Exit_statement_sub() (localctx IExit_statement_subContext) {
	localctx = NewExit_statement_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, powerbuilderParserRULE_exit_statement_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1038)
		p.Match(powerbuilderParserT__89)
	}

	return localctx
}

// IExit_statementContext is an interface to support dynamic dispatch.
type IExit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExit_statementContext differentiates from other interfaces.
	IsExit_statementContext()
}

type Exit_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExit_statementContext() *Exit_statementContext {
	var p = new(Exit_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_exit_statement
	return p
}

func (*Exit_statementContext) IsExit_statementContext() {}

func NewExit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Exit_statementContext {
	var p = new(Exit_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_exit_statement

	return p
}

func (s *Exit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Exit_statementContext) Exit_statement_sub() IExit_statement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExit_statement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExit_statement_subContext)
}

func (s *Exit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Exit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Exit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterExit_statement(s)
	}
}

func (s *Exit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitExit_statement(s)
	}
}

func (s *Exit_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitExit_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Exit_statement() (localctx IExit_statementContext) {
	localctx = NewExit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, powerbuilderParserRULE_exit_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1040)
		p.Exit_statement_sub()
	}

	return localctx
}

// IChoose_statementContext is an interface to support dynamic dispatch.
type IChoose_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_statementContext differentiates from other interfaces.
	IsChoose_statementContext()
}

type Choose_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_statementContext() *Choose_statementContext {
	var p = new(Choose_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_choose_statement
	return p
}

func (*Choose_statementContext) IsChoose_statementContext() {}

func NewChoose_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_statementContext {
	var p = new(Choose_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_choose_statement

	return p
}

func (s *Choose_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_statementContext) AllChoose_case_value_sub() []IChoose_case_value_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_value_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_value_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_value_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_value_sub(i int) IChoose_case_value_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_value_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_value_subContext)
}

func (s *Choose_statementContext) AllChoose_case_range_sub() []IChoose_case_range_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_range_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_range_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_range_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_range_sub(i int) IChoose_case_range_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_range_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_range_subContext)
}

func (s *Choose_statementContext) AllChoose_case_cond_sub() []IChoose_case_cond_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_cond_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_cond_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_cond_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_cond_sub(i int) IChoose_case_cond_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_cond_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_cond_subContext)
}

func (s *Choose_statementContext) AllChoose_case_else_sub() []IChoose_case_else_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IChoose_case_else_subContext)(nil)).Elem())
	var tst = make([]IChoose_case_else_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IChoose_case_else_subContext)
		}
	}

	return tst
}

func (s *Choose_statementContext) Choose_case_else_sub(i int) IChoose_case_else_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChoose_case_else_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IChoose_case_else_subContext)
}

func (s *Choose_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterChoose_statement(s)
	}
}

func (s *Choose_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitChoose_statement(s)
	}
}

func (s *Choose_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitChoose_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Choose_statement() (localctx IChoose_statementContext) {
	localctx = NewChoose_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, powerbuilderParserRULE_choose_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Match(powerbuilderParserT__90)
	}
	{
		p.SetState(1043)
		p.Match(powerbuilderParserT__5)
	}
	{
		p.SetState(1044)
		p.Expression()
	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == powerbuilderParserT__5 {
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1045)
				p.Choose_case_range_sub()
			}

		case 2:
			{
				p.SetState(1046)
				p.Choose_case_cond_sub()
			}

		case 3:
			{
				p.SetState(1047)
				p.Choose_case_else_sub()
			}

		case 4:
			{
				p.SetState(1048)
				p.Choose_case_value_sub()
			}

		}

		p.SetState(1051)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1053)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(1054)
		p.Match(powerbuilderParserT__90)
	}

	return localctx
}

// IChoose_case_value_subContext is an interface to support dynamic dispatch.
type IChoose_case_value_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_value_subContext differentiates from other interfaces.
	IsChoose_case_value_subContext()
}

type Choose_case_value_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_value_subContext() *Choose_case_value_subContext {
	var p = new(Choose_case_value_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_choose_case_value_sub
	return p
}

func (*Choose_case_value_subContext) IsChoose_case_value_subContext() {}

func NewChoose_case_value_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_value_subContext {
	var p = new(Choose_case_value_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_choose_case_value_sub

	return p
}

func (s *Choose_case_value_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_value_subContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Choose_case_value_subContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_case_value_subContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Choose_case_value_subContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Choose_case_value_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_value_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_value_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_value_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_value_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterChoose_case_value_sub(s)
	}
}

func (s *Choose_case_value_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitChoose_case_value_sub(s)
	}
}

func (s *Choose_case_value_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitChoose_case_value_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Choose_case_value_sub() (localctx IChoose_case_value_subContext) {
	localctx = NewChoose_case_value_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, powerbuilderParserRULE_choose_case_value_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1056)
		p.Match(powerbuilderParserT__5)
	}
	{
		p.SetState(1057)
		p.Expression()
	}
	p.SetState(1062)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserCOMMA {
		{
			p.SetState(1058)
			p.Match(powerbuilderParserCOMMA)
		}
		{
			p.SetState(1059)
			p.Expression()
		}

		p.SetState(1064)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(1065)
			p.Statement()
		}

		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChoose_case_cond_subContext is an interface to support dynamic dispatch.
type IChoose_case_cond_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_cond_subContext differentiates from other interfaces.
	IsChoose_case_cond_subContext()
}

type Choose_case_cond_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_cond_subContext() *Choose_case_cond_subContext {
	var p = new(Choose_case_cond_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_choose_case_cond_sub
	return p
}

func (*Choose_case_cond_subContext) IsChoose_case_cond_subContext() {}

func NewChoose_case_cond_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_cond_subContext {
	var p = new(Choose_case_cond_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_choose_case_cond_sub

	return p
}

func (s *Choose_case_cond_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_cond_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Choose_case_cond_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_cond_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_cond_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_cond_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_cond_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterChoose_case_cond_sub(s)
	}
}

func (s *Choose_case_cond_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitChoose_case_cond_sub(s)
	}
}

func (s *Choose_case_cond_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitChoose_case_cond_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Choose_case_cond_sub() (localctx IChoose_case_cond_subContext) {
	localctx = NewChoose_case_cond_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, powerbuilderParserRULE_choose_case_cond_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1071)
		p.Match(powerbuilderParserT__5)
	}
	{
		p.SetState(1072)
		p.Match(powerbuilderParserT__91)
	}
	p.SetState(1073)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__2 || (((_la-58)&-(0x1f+1)) == 0 && ((1<<uint((_la-58)))&((1<<(powerbuilderParserT__57-58))|(1<<(powerbuilderParserT__58-58))|(1<<(powerbuilderParserT__59-58))|(1<<(powerbuilderParserT__60-58))|(1<<(powerbuilderParserT__61-58)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(1074)
		p.Expression()
	}
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(1075)
			p.Statement()
		}

		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChoose_case_range_subContext is an interface to support dynamic dispatch.
type IChoose_case_range_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_range_subContext differentiates from other interfaces.
	IsChoose_case_range_subContext()
}

type Choose_case_range_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_range_subContext() *Choose_case_range_subContext {
	var p = new(Choose_case_range_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_choose_case_range_sub
	return p
}

func (*Choose_case_range_subContext) IsChoose_case_range_subContext() {}

func NewChoose_case_range_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_range_subContext {
	var p = new(Choose_case_range_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_choose_case_range_sub

	return p
}

func (s *Choose_case_range_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_range_subContext) AllAtom() []IAtomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAtomContext)(nil)).Elem())
	var tst = make([]IAtomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAtomContext)
		}
	}

	return tst
}

func (s *Choose_case_range_subContext) Atom(i int) IAtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAtomContext)
}

func (s *Choose_case_range_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_range_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_range_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_range_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_range_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterChoose_case_range_sub(s)
	}
}

func (s *Choose_case_range_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitChoose_case_range_sub(s)
	}
}

func (s *Choose_case_range_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitChoose_case_range_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Choose_case_range_sub() (localctx IChoose_case_range_subContext) {
	localctx = NewChoose_case_range_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, powerbuilderParserRULE_choose_case_range_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1081)
		p.Match(powerbuilderParserT__5)
	}
	{
		p.SetState(1082)
		p.Atom()
	}
	{
		p.SetState(1083)
		p.Match(powerbuilderParserT__9)
	}
	{
		p.SetState(1084)
		p.Atom()
	}
	p.SetState(1088)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(1085)
			p.Statement()
		}

		p.SetState(1090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChoose_case_else_subContext is an interface to support dynamic dispatch.
type IChoose_case_else_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChoose_case_else_subContext differentiates from other interfaces.
	IsChoose_case_else_subContext()
}

type Choose_case_else_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChoose_case_else_subContext() *Choose_case_else_subContext {
	var p = new(Choose_case_else_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_choose_case_else_sub
	return p
}

func (*Choose_case_else_subContext) IsChoose_case_else_subContext() {}

func NewChoose_case_else_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Choose_case_else_subContext {
	var p = new(Choose_case_else_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_choose_case_else_sub

	return p
}

func (s *Choose_case_else_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Choose_case_else_subContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Choose_case_else_subContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Choose_case_else_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Choose_case_else_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Choose_case_else_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterChoose_case_else_sub(s)
	}
}

func (s *Choose_case_else_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitChoose_case_else_sub(s)
	}
}

func (s *Choose_case_else_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitChoose_case_else_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Choose_case_else_sub() (localctx IChoose_case_else_subContext) {
	localctx = NewChoose_case_else_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, powerbuilderParserRULE_choose_case_else_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1091)
		p.Match(powerbuilderParserT__5)
	}
	{
		p.SetState(1092)
		p.Match(powerbuilderParserT__85)
	}
	p.SetState(1096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(1093)
			p.Statement()
		}

		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGoto_stat_subContext is an interface to support dynamic dispatch.
type IGoto_stat_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoto_stat_subContext differentiates from other interfaces.
	IsGoto_stat_subContext()
}

type Goto_stat_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoto_stat_subContext() *Goto_stat_subContext {
	var p = new(Goto_stat_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_goto_stat_sub
	return p
}

func (*Goto_stat_subContext) IsGoto_stat_subContext() {}

func NewGoto_stat_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Goto_stat_subContext {
	var p = new(Goto_stat_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_goto_stat_sub

	return p
}

func (s *Goto_stat_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Goto_stat_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Goto_stat_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_stat_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Goto_stat_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterGoto_stat_sub(s)
	}
}

func (s *Goto_stat_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitGoto_stat_sub(s)
	}
}

func (s *Goto_stat_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitGoto_stat_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Goto_stat_sub() (localctx IGoto_stat_subContext) {
	localctx = NewGoto_stat_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, powerbuilderParserRULE_goto_stat_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1099)
		p.Match(powerbuilderParserT__92)
	}
	{
		p.SetState(1100)
		p.Identifier_name()
	}

	return localctx
}

// IGoto_statContext is an interface to support dynamic dispatch.
type IGoto_statContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoto_statContext differentiates from other interfaces.
	IsGoto_statContext()
}

type Goto_statContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoto_statContext() *Goto_statContext {
	var p = new(Goto_statContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_goto_stat
	return p
}

func (*Goto_statContext) IsGoto_statContext() {}

func NewGoto_statContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Goto_statContext {
	var p = new(Goto_statContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_goto_stat

	return p
}

func (s *Goto_statContext) GetParser() antlr.Parser { return s.parser }

func (s *Goto_statContext) Goto_stat_sub() IGoto_stat_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoto_stat_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoto_stat_subContext)
}

func (s *Goto_statContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Goto_statContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Goto_statContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterGoto_stat(s)
	}
}

func (s *Goto_statContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitGoto_stat(s)
	}
}

func (s *Goto_statContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitGoto_stat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Goto_stat() (localctx IGoto_statContext) {
	localctx = NewGoto_statContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, powerbuilderParserRULE_goto_stat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1102)
		p.Goto_stat_sub()
	}

	return localctx
}

// ILabel_statContext is an interface to support dynamic dispatch.
type ILabel_statContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabel_statContext differentiates from other interfaces.
	IsLabel_statContext()
}

type Label_statContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabel_statContext() *Label_statContext {
	var p = new(Label_statContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_label_stat
	return p
}

func (*Label_statContext) IsLabel_statContext() {}

func NewLabel_statContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Label_statContext {
	var p = new(Label_statContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_label_stat

	return p
}

func (s *Label_statContext) GetParser() antlr.Parser { return s.parser }

func (s *Label_statContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Label_statContext) COLON() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOLON, 0)
}

func (s *Label_statContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Label_statContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Label_statContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterLabel_stat(s)
	}
}

func (s *Label_statContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitLabel_stat(s)
	}
}

func (s *Label_statContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitLabel_stat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Label_stat() (localctx ILabel_statContext) {
	localctx = NewLabel_statContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, powerbuilderParserRULE_label_stat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		p.Identifier_name()
	}
	{
		p.SetState(1105)
		p.Match(powerbuilderParserCOLON)
	}

	return localctx
}

// ITry_catch_blockContext is an interface to support dynamic dispatch.
type ITry_catch_blockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTry_catch_blockContext differentiates from other interfaces.
	IsTry_catch_blockContext()
}

type Try_catch_blockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTry_catch_blockContext() *Try_catch_blockContext {
	var p = new(Try_catch_blockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_try_catch_block
	return p
}

func (*Try_catch_blockContext) IsTry_catch_blockContext() {}

func NewTry_catch_blockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Try_catch_blockContext {
	var p = new(Try_catch_blockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_try_catch_block

	return p
}

func (s *Try_catch_blockContext) GetParser() antlr.Parser { return s.parser }

func (s *Try_catch_blockContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *Try_catch_blockContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *Try_catch_blockContext) AllLPAREN() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserLPAREN)
}

func (s *Try_catch_blockContext) LPAREN(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, i)
}

func (s *Try_catch_blockContext) AllVariable_decl_sub() []IVariable_decl_subContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem())
	var tst = make([]IVariable_decl_subContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_decl_subContext)
		}
	}

	return tst
}

func (s *Try_catch_blockContext) Variable_decl_sub(i int) IVariable_decl_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_decl_subContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_decl_subContext)
}

func (s *Try_catch_blockContext) AllRPAREN() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserRPAREN)
}

func (s *Try_catch_blockContext) RPAREN(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, i)
}

func (s *Try_catch_blockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Try_catch_blockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Try_catch_blockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterTry_catch_block(s)
	}
}

func (s *Try_catch_blockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitTry_catch_block(s)
	}
}

func (s *Try_catch_blockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitTry_catch_block(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Try_catch_block() (localctx ITry_catch_blockContext) {
	localctx = NewTry_catch_blockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, powerbuilderParserRULE_try_catch_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1107)
		p.Match(powerbuilderParserT__66)
	}
	p.SetState(1111)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
		{
			p.SetState(1108)
			p.Statement()
		}

		p.SetState(1113)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1126)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserT__93 {
		{
			p.SetState(1114)
			p.Match(powerbuilderParserT__93)
		}
		{
			p.SetState(1115)
			p.Match(powerbuilderParserLPAREN)
		}
		{
			p.SetState(1116)
			p.Variable_decl_sub()
		}
		{
			p.SetState(1117)
			p.Match(powerbuilderParserRPAREN)
		}
		p.SetState(1121)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
			{
				p.SetState(1118)
				p.Statement()
			}

			p.SetState(1123)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__94 {
		{
			p.SetState(1129)
			p.Match(powerbuilderParserT__94)
		}
		p.SetState(1133)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__22))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(powerbuilderParserT__33-34))|(1<<(powerbuilderParserT__38-34))|(1<<(powerbuilderParserT__39-34))|(1<<(powerbuilderParserT__40-34))|(1<<(powerbuilderParserT__41-34))|(1<<(powerbuilderParserT__42-34))|(1<<(powerbuilderParserT__43-34))|(1<<(powerbuilderParserT__44-34))|(1<<(powerbuilderParserT__49-34))|(1<<(powerbuilderParserT__50-34))|(1<<(powerbuilderParserT__51-34))|(1<<(powerbuilderParserT__52-34))|(1<<(powerbuilderParserT__53-34)))) != 0) || (((_la-66)&-(0x1f+1)) == 0 && ((1<<uint((_la-66)))&((1<<(powerbuilderParserT__65-66))|(1<<(powerbuilderParserT__66-66))|(1<<(powerbuilderParserT__71-66))|(1<<(powerbuilderParserT__72-66))|(1<<(powerbuilderParserT__73-66))|(1<<(powerbuilderParserT__74-66))|(1<<(powerbuilderParserT__78-66))|(1<<(powerbuilderParserT__82-66))|(1<<(powerbuilderParserT__86-66))|(1<<(powerbuilderParserT__87-66))|(1<<(powerbuilderParserT__88-66))|(1<<(powerbuilderParserT__89-66))|(1<<(powerbuilderParserT__90-66))|(1<<(powerbuilderParserT__92-66))|(1<<(powerbuilderParserT__95-66)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__100-100))|(1<<(powerbuilderParserT__101-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100))|(1<<(powerbuilderParserDQUOTED_STRING-100))|(1<<(powerbuilderParserQUOTED_STRING-100))|(1<<(powerbuilderParserENUM-100))|(1<<(powerbuilderParserID-100))|(1<<(powerbuilderParserSEMI-100)))) != 0) || (((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(powerbuilderParserNUMBER-134))|(1<<(powerbuilderParserDATE-134))|(1<<(powerbuilderParserTIME-134)))) != 0) {
			{
				p.SetState(1130)
				p.Statement()
			}

			p.SetState(1135)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1138)
		p.Match(powerbuilderParserT__14)
	}
	{
		p.SetState(1139)
		p.Match(powerbuilderParserT__66)
	}

	return localctx
}

// IThrow_stat_subContext is an interface to support dynamic dispatch.
type IThrow_stat_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_stat_subContext differentiates from other interfaces.
	IsThrow_stat_subContext()
}

type Throw_stat_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_stat_subContext() *Throw_stat_subContext {
	var p = new(Throw_stat_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_throw_stat_sub
	return p
}

func (*Throw_stat_subContext) IsThrow_stat_subContext() {}

func NewThrow_stat_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_stat_subContext {
	var p = new(Throw_stat_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_throw_stat_sub

	return p
}

func (s *Throw_stat_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_stat_subContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Throw_stat_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_stat_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_stat_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterThrow_stat_sub(s)
	}
}

func (s *Throw_stat_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitThrow_stat_sub(s)
	}
}

func (s *Throw_stat_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitThrow_stat_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Throw_stat_sub() (localctx IThrow_stat_subContext) {
	localctx = NewThrow_stat_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, powerbuilderParserRULE_throw_stat_sub)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1141)
		p.Match(powerbuilderParserT__95)
	}
	{
		p.SetState(1142)
		p.Expression()
	}

	return localctx
}

// IThrow_statContext is an interface to support dynamic dispatch.
type IThrow_statContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrow_statContext differentiates from other interfaces.
	IsThrow_statContext()
}

type Throw_statContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrow_statContext() *Throw_statContext {
	var p = new(Throw_statContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_throw_stat
	return p
}

func (*Throw_statContext) IsThrow_statContext() {}

func NewThrow_statContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Throw_statContext {
	var p = new(Throw_statContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_throw_stat

	return p
}

func (s *Throw_statContext) GetParser() antlr.Parser { return s.parser }

func (s *Throw_statContext) Throw_stat_sub() IThrow_stat_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrow_stat_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrow_stat_subContext)
}

func (s *Throw_statContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Throw_statContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Throw_statContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterThrow_stat(s)
	}
}

func (s *Throw_statContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitThrow_stat(s)
	}
}

func (s *Throw_statContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitThrow_stat(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Throw_stat() (localctx IThrow_statContext) {
	localctx = NewThrow_statContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, powerbuilderParserRULE_throw_stat)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1144)
		p.Throw_stat_sub()
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *IdentifierContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *IdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, powerbuilderParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1166)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1146)
			p.Identifier_name()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1147)
			p.Match(powerbuilderParserT__74)
		}
		{
			p.SetState(1148)
			p.Match(powerbuilderParserT__45)
		}
		p.SetState(1152)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case powerbuilderParserT__43:
			{
				p.SetState(1149)
				p.Match(powerbuilderParserT__43)
			}

		case powerbuilderParserT__44:
			{
				p.SetState(1150)
				p.Match(powerbuilderParserT__44)
			}

		case powerbuilderParserT__3, powerbuilderParserT__4, powerbuilderParserT__12, powerbuilderParserT__36, powerbuilderParserT__41, powerbuilderParserT__65, powerbuilderParserT__92, powerbuilderParserT__96, powerbuilderParserT__97, powerbuilderParserT__98, powerbuilderParserT__99, powerbuilderParserID:
			{
				p.SetState(1151)
				p.Identifier_name_ex()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1154)
			p.Identifier_name()
		}
		{
			p.SetState(1155)
			p.Match(powerbuilderParserT__45)
		}
		p.SetState(1156)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserT__43 || _la == powerbuilderParserT__44) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1158)
			p.Identifier_name()
		}
		{
			p.SetState(1159)
			p.Match(powerbuilderParserDOT)
		}
		p.SetState(1160)
		_la = p.GetTokenStream().LA(1)

		if !(_la == powerbuilderParserT__43 || _la == powerbuilderParserT__44) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1162)
			p.Identifier_name()
		}
		{
			p.SetState(1163)
			p.Match(powerbuilderParserT__45)
		}
		{
			p.SetState(1164)
			p.Identifier_name_ex()
		}

	}

	return localctx
}

// IIdentifier_nameContext is an interface to support dynamic dispatch.
type IIdentifier_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_nameContext differentiates from other interfaces.
	IsIdentifier_nameContext()
}

type Identifier_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_nameContext() *Identifier_nameContext {
	var p = new(Identifier_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_identifier_name
	return p
}

func (*Identifier_nameContext) IsIdentifier_nameContext() {}

func NewIdentifier_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_nameContext {
	var p = new(Identifier_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_identifier_name

	return p
}

func (s *Identifier_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_nameContext) ID() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserID, 0)
}

func (s *Identifier_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterIdentifier_name(s)
	}
}

func (s *Identifier_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitIdentifier_name(s)
	}
}

func (s *Identifier_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitIdentifier_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Identifier_name() (localctx IIdentifier_nameContext) {
	localctx = NewIdentifier_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, powerbuilderParserRULE_identifier_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1168)
		p.Match(powerbuilderParserID)
	}

	return localctx
}

// IIdentifier_name_exContext is an interface to support dynamic dispatch.
type IIdentifier_name_exContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifier_name_exContext differentiates from other interfaces.
	IsIdentifier_name_exContext()
}

type Identifier_name_exContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifier_name_exContext() *Identifier_name_exContext {
	var p = new(Identifier_name_exContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_identifier_name_ex
	return p
}

func (*Identifier_name_exContext) IsIdentifier_name_exContext() {}

func NewIdentifier_name_exContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Identifier_name_exContext {
	var p = new(Identifier_name_exContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_identifier_name_ex

	return p
}

func (s *Identifier_name_exContext) GetParser() antlr.Parser { return s.parser }

func (s *Identifier_name_exContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Identifier_name_exContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Identifier_name_exContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Identifier_name_exContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterIdentifier_name_ex(s)
	}
}

func (s *Identifier_name_exContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitIdentifier_name_ex(s)
	}
}

func (s *Identifier_name_exContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitIdentifier_name_ex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Identifier_name_ex() (localctx IIdentifier_name_exContext) {
	localctx = NewIdentifier_name_exContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, powerbuilderParserRULE_identifier_name_ex)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1182)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1170)
			p.Identifier_name()
		}

	case powerbuilderParserT__96:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1171)
			p.Match(powerbuilderParserT__96)
		}

	case powerbuilderParserT__3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1172)
			p.Match(powerbuilderParserT__3)
		}

	case powerbuilderParserT__4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1173)
			p.Match(powerbuilderParserT__4)
		}

	case powerbuilderParserT__97:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1174)
			p.Match(powerbuilderParserT__97)
		}

	case powerbuilderParserT__12:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1175)
			p.Match(powerbuilderParserT__12)
		}

	case powerbuilderParserT__41:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1176)
			p.Match(powerbuilderParserT__41)
		}

	case powerbuilderParserT__92:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1177)
			p.Match(powerbuilderParserT__92)
		}

	case powerbuilderParserT__98:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1178)
			p.Match(powerbuilderParserT__98)
		}

	case powerbuilderParserT__65:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1179)
			p.Match(powerbuilderParserT__65)
		}

	case powerbuilderParserT__99:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1180)
			p.Match(powerbuilderParserT__99)
		}

	case powerbuilderParserT__36:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1181)
			p.Match(powerbuilderParserT__36)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAtom_subContext is an interface to support dynamic dispatch.
type IAtom_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_subContext differentiates from other interfaces.
	IsAtom_subContext()
}

type Atom_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_subContext() *Atom_subContext {
	var p = new(Atom_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom_sub
	return p
}

func (*Atom_subContext) IsAtom_subContext() {}

func NewAtom_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_subContext {
	var p = new(Atom_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom_sub

	return p
}

func (s *Atom_subContext) GetParser() antlr.Parser { return s.parser }

func (s *Atom_subContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Atom_subContext) Array_access_atom() IArray_access_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArray_access_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArray_access_atomContext)
}

func (s *Atom_subContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Atom_subContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Atom_subContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Atom_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom_sub(s)
	}
}

func (s *Atom_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom_sub(s)
	}
}

func (s *Atom_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom_sub() (localctx IAtom_subContext) {
	localctx = NewAtom_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, powerbuilderParserRULE_atom_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1193)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 150, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1184)
			p.Array_access_atom()
		}

	case 2:
		{
			p.SetState(1185)
			p.Identifier_name()
		}
		{
			p.SetState(1186)
			p.Match(powerbuilderParserLPAREN)
		}
		p.SetState(1188)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__23 || _la == powerbuilderParserT__41 || _la == powerbuilderParserT__72 {
			{
				p.SetState(1187)
				p.Expression_list()
			}

		}
		{
			p.SetState(1190)
			p.Match(powerbuilderParserRPAREN)
		}

	case 3:
		{
			p.SetState(1192)
			p.Identifier_name()
		}

	}

	return localctx
}

// IAtom_sub_call1Context is an interface to support dynamic dispatch.
type IAtom_sub_call1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_call1Context differentiates from other interfaces.
	IsAtom_sub_call1Context()
}

type Atom_sub_call1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_call1Context() *Atom_sub_call1Context {
	var p = new(Atom_sub_call1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom_sub_call1
	return p
}

func (*Atom_sub_call1Context) IsAtom_sub_call1Context() {}

func NewAtom_sub_call1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_call1Context {
	var p = new(Atom_sub_call1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom_sub_call1

	return p
}

func (s *Atom_sub_call1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_call1Context) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Atom_sub_call1Context) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Atom_sub_call1Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Atom_sub_call1Context) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Atom_sub_call1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_call1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_call1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom_sub_call1(s)
	}
}

func (s *Atom_sub_call1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom_sub_call1(s)
	}
}

func (s *Atom_sub_call1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom_sub_call1(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom_sub_call1() (localctx IAtom_sub_call1Context) {
	localctx = NewAtom_sub_call1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, powerbuilderParserRULE_atom_sub_call1)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__74, powerbuilderParserID:
		{
			p.SetState(1195)
			p.Identifier()
		}

	case powerbuilderParserT__65:
		{
			p.SetState(1196)
			p.Match(powerbuilderParserT__65)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1199)
		p.Match(powerbuilderParserLPAREN)
	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == powerbuilderParserT__11 || _la == powerbuilderParserT__23 || _la == powerbuilderParserT__41 || _la == powerbuilderParserT__72 {
		{
			p.SetState(1200)
			p.Expression_list()
		}

	}
	{
		p.SetState(1203)
		p.Match(powerbuilderParserRPAREN)
	}

	return localctx
}

// IAtom_sub_array1Context is an interface to support dynamic dispatch.
type IAtom_sub_array1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_array1Context differentiates from other interfaces.
	IsAtom_sub_array1Context()
}

type Atom_sub_array1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_array1Context() *Atom_sub_array1Context {
	var p = new(Atom_sub_array1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom_sub_array1
	return p
}

func (*Atom_sub_array1Context) IsAtom_sub_array1Context() {}

func NewAtom_sub_array1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_array1Context {
	var p = new(Atom_sub_array1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom_sub_array1

	return p
}

func (s *Atom_sub_array1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_array1Context) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Atom_sub_array1Context) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Atom_sub_array1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_array1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_array1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom_sub_array1(s)
	}
}

func (s *Atom_sub_array1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom_sub_array1(s)
	}
}

func (s *Atom_sub_array1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom_sub_array1(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom_sub_array1() (localctx IAtom_sub_array1Context) {
	localctx = NewAtom_sub_array1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, powerbuilderParserRULE_atom_sub_array1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1205)
		p.Identifier_name()
	}
	{
		p.SetState(1206)
		p.Match(powerbuilderParserT__26)
	}
	{
		p.SetState(1207)
		p.Expression_list()
	}
	{
		p.SetState(1208)
		p.Match(powerbuilderParserT__28)
	}

	return localctx
}

// IAtom_sub_ref1Context is an interface to support dynamic dispatch.
type IAtom_sub_ref1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_ref1Context differentiates from other interfaces.
	IsAtom_sub_ref1Context()
}

type Atom_sub_ref1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_ref1Context() *Atom_sub_ref1Context {
	var p = new(Atom_sub_ref1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom_sub_ref1
	return p
}

func (*Atom_sub_ref1Context) IsAtom_sub_ref1Context() {}

func NewAtom_sub_ref1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_ref1Context {
	var p = new(Atom_sub_ref1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom_sub_ref1

	return p
}

func (s *Atom_sub_ref1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_ref1Context) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Atom_sub_ref1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_ref1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_ref1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom_sub_ref1(s)
	}
}

func (s *Atom_sub_ref1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom_sub_ref1(s)
	}
}

func (s *Atom_sub_ref1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom_sub_ref1(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom_sub_ref1() (localctx IAtom_sub_ref1Context) {
	localctx = NewAtom_sub_ref1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, powerbuilderParserRULE_atom_sub_ref1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1210)
		p.Identifier_name()
	}
	{
		p.SetState(1211)
		p.Match(powerbuilderParserT__25)
	}

	return localctx
}

// IAtom_sub_member1Context is an interface to support dynamic dispatch.
type IAtom_sub_member1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtom_sub_member1Context differentiates from other interfaces.
	IsAtom_sub_member1Context()
}

type Atom_sub_member1Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtom_sub_member1Context() *Atom_sub_member1Context {
	var p = new(Atom_sub_member1Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom_sub_member1
	return p
}

func (*Atom_sub_member1Context) IsAtom_sub_member1Context() {}

func NewAtom_sub_member1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Atom_sub_member1Context {
	var p = new(Atom_sub_member1Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom_sub_member1

	return p
}

func (s *Atom_sub_member1Context) GetParser() antlr.Parser { return s.parser }

func (s *Atom_sub_member1Context) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Atom_sub_member1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Atom_sub_member1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Atom_sub_member1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom_sub_member1(s)
	}
}

func (s *Atom_sub_member1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom_sub_member1(s)
	}
}

func (s *Atom_sub_member1Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom_sub_member1(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom_sub_member1() (localctx IAtom_sub_member1Context) {
	localctx = NewAtom_sub_member1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, powerbuilderParserRULE_atom_sub_member1)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1213)
		p.Identifier()
	}

	return localctx
}

// IAtomContext is an interface to support dynamic dispatch.
type IAtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomContext differentiates from other interfaces.
	IsAtomContext()
}

type AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomContext() *AtomContext {
	var p = new(AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_atom
	return p
}

func (*AtomContext) IsAtomContext() {}

func NewAtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomContext {
	var p = new(AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_atom

	return p
}

func (s *AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomContext) Event_call_statement_sub() IEvent_call_statement_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEvent_call_statement_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEvent_call_statement_subContext)
}

func (s *AtomContext) Atom_sub() IAtom_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_subContext)
}

func (s *AtomContext) DOT() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDOT, 0)
}

func (s *AtomContext) Identifier_name_ex() IIdentifier_name_exContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_name_exContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_name_exContext)
}

func (s *AtomContext) Cast_expression() ICast_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICast_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICast_expressionContext)
}

func (s *AtomContext) Atom_sub_call1() IAtom_sub_call1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_call1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_call1Context)
}

func (s *AtomContext) Atom_sub_array1() IAtom_sub_array1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_array1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_array1Context)
}

func (s *AtomContext) Atom_sub_ref1() IAtom_sub_ref1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_ref1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_ref1Context)
}

func (s *AtomContext) Atom_sub_member1() IAtom_sub_member1Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtom_sub_member1Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtom_sub_member1Context)
}

func (s *AtomContext) Numeric_atom() INumeric_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumeric_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumeric_atomContext)
}

func (s *AtomContext) Boolean_atom() IBoolean_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_atomContext)
}

func (s *AtomContext) ENUM() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserENUM, 0)
}

func (s *AtomContext) DQUOTED_STRING() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDQUOTED_STRING, 0)
}

func (s *AtomContext) QUOTED_STRING() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserQUOTED_STRING, 0)
}

func (s *AtomContext) DATE() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserDATE, 0)
}

func (s *AtomContext) TIME() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserTIME, 0)
}

func (s *AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterAtom(s)
	}
}

func (s *AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitAtom(s)
	}
}

func (s *AtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Atom() (localctx IAtomContext) {
	localctx = NewAtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, powerbuilderParserRULE_atom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1232)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 153, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1215)
			p.Event_call_statement_sub()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1216)
			p.Atom_sub()
		}

		{
			p.SetState(1217)
			p.Match(powerbuilderParserDOT)
		}
		{
			p.SetState(1218)
			p.Identifier_name_ex()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1220)
			p.Cast_expression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1221)
			p.Atom_sub_call1()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1222)
			p.Atom_sub_array1()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1223)
			p.Atom_sub_ref1()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1224)
			p.Atom_sub_member1()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1225)
			p.Numeric_atom()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1226)
			p.Boolean_atom()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1227)
			p.Match(powerbuilderParserENUM)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1228)
			p.Match(powerbuilderParserDQUOTED_STRING)
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1229)
			p.Match(powerbuilderParserQUOTED_STRING)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1230)
			p.Match(powerbuilderParserDATE)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1231)
			p.Match(powerbuilderParserTIME)
		}

	}

	return localctx
}

// ISwallow_to_semiContext is an interface to support dynamic dispatch.
type ISwallow_to_semiContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwallow_to_semiContext differentiates from other interfaces.
	IsSwallow_to_semiContext()
}

type Swallow_to_semiContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwallow_to_semiContext() *Swallow_to_semiContext {
	var p = new(Swallow_to_semiContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_swallow_to_semi
	return p
}

func (*Swallow_to_semiContext) IsSwallow_to_semiContext() {}

func NewSwallow_to_semiContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Swallow_to_semiContext {
	var p = new(Swallow_to_semiContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_swallow_to_semi

	return p
}

func (s *Swallow_to_semiContext) GetParser() antlr.Parser { return s.parser }

func (s *Swallow_to_semiContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserSEMI)
}

func (s *Swallow_to_semiContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserSEMI, i)
}

func (s *Swallow_to_semiContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Swallow_to_semiContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Swallow_to_semiContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterSwallow_to_semi(s)
	}
}

func (s *Swallow_to_semiContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitSwallow_to_semi(s)
	}
}

func (s *Swallow_to_semiContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitSwallow_to_semi(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Swallow_to_semi() (localctx ISwallow_to_semiContext) {
	localctx = NewSwallow_to_semiContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, powerbuilderParserRULE_swallow_to_semi)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1235)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__0)|(1<<powerbuilderParserT__1)|(1<<powerbuilderParserT__2)|(1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__4)|(1<<powerbuilderParserT__5)|(1<<powerbuilderParserT__6)|(1<<powerbuilderParserT__7)|(1<<powerbuilderParserT__8)|(1<<powerbuilderParserT__9)|(1<<powerbuilderParserT__10)|(1<<powerbuilderParserT__11)|(1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__13)|(1<<powerbuilderParserT__14)|(1<<powerbuilderParserT__15)|(1<<powerbuilderParserT__16)|(1<<powerbuilderParserT__17)|(1<<powerbuilderParserT__18)|(1<<powerbuilderParserT__19)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__21)|(1<<powerbuilderParserT__22)|(1<<powerbuilderParserT__23)|(1<<powerbuilderParserT__24)|(1<<powerbuilderParserT__25)|(1<<powerbuilderParserT__26)|(1<<powerbuilderParserT__27)|(1<<powerbuilderParserT__28)|(1<<powerbuilderParserT__29)|(1<<powerbuilderParserT__30))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(powerbuilderParserT__31-32))|(1<<(powerbuilderParserT__32-32))|(1<<(powerbuilderParserT__33-32))|(1<<(powerbuilderParserT__34-32))|(1<<(powerbuilderParserT__35-32))|(1<<(powerbuilderParserT__36-32))|(1<<(powerbuilderParserT__37-32))|(1<<(powerbuilderParserT__38-32))|(1<<(powerbuilderParserT__39-32))|(1<<(powerbuilderParserT__40-32))|(1<<(powerbuilderParserT__41-32))|(1<<(powerbuilderParserT__42-32))|(1<<(powerbuilderParserT__43-32))|(1<<(powerbuilderParserT__44-32))|(1<<(powerbuilderParserT__45-32))|(1<<(powerbuilderParserT__46-32))|(1<<(powerbuilderParserT__47-32))|(1<<(powerbuilderParserT__48-32))|(1<<(powerbuilderParserT__49-32))|(1<<(powerbuilderParserT__50-32))|(1<<(powerbuilderParserT__51-32))|(1<<(powerbuilderParserT__52-32))|(1<<(powerbuilderParserT__53-32))|(1<<(powerbuilderParserT__54-32))|(1<<(powerbuilderParserT__55-32))|(1<<(powerbuilderParserT__56-32))|(1<<(powerbuilderParserT__57-32))|(1<<(powerbuilderParserT__58-32))|(1<<(powerbuilderParserT__59-32))|(1<<(powerbuilderParserT__60-32))|(1<<(powerbuilderParserT__61-32))|(1<<(powerbuilderParserT__62-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(powerbuilderParserT__63-64))|(1<<(powerbuilderParserT__64-64))|(1<<(powerbuilderParserT__65-64))|(1<<(powerbuilderParserT__66-64))|(1<<(powerbuilderParserT__67-64))|(1<<(powerbuilderParserT__68-64))|(1<<(powerbuilderParserT__69-64))|(1<<(powerbuilderParserT__70-64))|(1<<(powerbuilderParserT__71-64))|(1<<(powerbuilderParserT__72-64))|(1<<(powerbuilderParserT__73-64))|(1<<(powerbuilderParserT__74-64))|(1<<(powerbuilderParserT__75-64))|(1<<(powerbuilderParserT__76-64))|(1<<(powerbuilderParserT__77-64))|(1<<(powerbuilderParserT__78-64))|(1<<(powerbuilderParserT__79-64))|(1<<(powerbuilderParserT__80-64))|(1<<(powerbuilderParserT__81-64))|(1<<(powerbuilderParserT__82-64))|(1<<(powerbuilderParserT__83-64))|(1<<(powerbuilderParserT__84-64))|(1<<(powerbuilderParserT__85-64))|(1<<(powerbuilderParserT__86-64))|(1<<(powerbuilderParserT__87-64))|(1<<(powerbuilderParserT__88-64))|(1<<(powerbuilderParserT__89-64))|(1<<(powerbuilderParserT__90-64))|(1<<(powerbuilderParserT__91-64))|(1<<(powerbuilderParserT__92-64))|(1<<(powerbuilderParserT__93-64))|(1<<(powerbuilderParserT__94-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(powerbuilderParserT__95-96))|(1<<(powerbuilderParserT__96-96))|(1<<(powerbuilderParserT__97-96))|(1<<(powerbuilderParserT__98-96))|(1<<(powerbuilderParserT__99-96))|(1<<(powerbuilderParserT__100-96))|(1<<(powerbuilderParserT__101-96))|(1<<(powerbuilderParserT__102-96))|(1<<(powerbuilderParserT__103-96))|(1<<(powerbuilderParserT__104-96))|(1<<(powerbuilderParserT__105-96))|(1<<(powerbuilderParserT__106-96))|(1<<(powerbuilderParserT__107-96))|(1<<(powerbuilderParserT__108-96))|(1<<(powerbuilderParserT__109-96))|(1<<(powerbuilderParserT__110-96))|(1<<(powerbuilderParserT__111-96))|(1<<(powerbuilderParserT__112-96))|(1<<(powerbuilderParserT__113-96))|(1<<(powerbuilderParserT__114-96))|(1<<(powerbuilderParserT__115-96))|(1<<(powerbuilderParserT__116-96))|(1<<(powerbuilderParserT__117-96))|(1<<(powerbuilderParserT__118-96))|(1<<(powerbuilderParserT__119-96))|(1<<(powerbuilderParserT__120-96))|(1<<(powerbuilderParserT__121-96))|(1<<(powerbuilderParserT__122-96))|(1<<(powerbuilderParserT__123-96))|(1<<(powerbuilderParserDQUOTED_STRING-96))|(1<<(powerbuilderParserQUOTED_STRING-96))|(1<<(powerbuilderParserENUM-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(powerbuilderParserCOMMA-128))|(1<<(powerbuilderParserID-128))|(1<<(powerbuilderParserLPAREN-128))|(1<<(powerbuilderParserRPAREN-128))|(1<<(powerbuilderParserCOLON-128))|(1<<(powerbuilderParserNUMBER-128))|(1<<(powerbuilderParserDOT-128))|(1<<(powerbuilderParserDQUOTE-128))|(1<<(powerbuilderParserSL_COMMENT-128))|(1<<(powerbuilderParserML_COMMENT-128))|(1<<(powerbuilderParserWS-128))|(1<<(powerbuilderParserNEWLINE-128))|(1<<(powerbuilderParserLINE_CONTINUATION-128))|(1<<(powerbuilderParserEXPORT_HEADER-128))|(1<<(powerbuilderParserDATE-128))|(1<<(powerbuilderParserTIME-128))|(1<<(powerbuilderParserBINDPAR-128))|(1<<(powerbuilderParserTQ-128))|(1<<(powerbuilderParserDOUBLE_PIPE-128))|(1<<(powerbuilderParserASTROOT-128))|(1<<(powerbuilderParserHEADER-128))|(1<<(powerbuilderParserBOODY-128))|(1<<(powerbuilderParserDATATYPEDECL-128))|(1<<(powerbuilderParserFORWARDDECL-128))|(1<<(powerbuilderParserTYPEVARIABLESDECL-128))|(1<<(powerbuilderParserGLOBALVARIABLESDECL-128))|(1<<(powerbuilderParserVARIABLEDECL-128))|(1<<(powerbuilderParserCONSTANTDECL-128))|(1<<(powerbuilderParserFUNCTIONFORWARDDECL-128))|(1<<(powerbuilderParserFUNCTIONSFORWARDDECL-128))|(1<<(powerbuilderParserFUNCTIONBODY-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(powerbuilderParserONBODY-160))|(1<<(powerbuilderParserEVENTBODY-160))|(1<<(powerbuilderParserSTATEMENT-160))|(1<<(powerbuilderParserSQLSTATEMENT-160))|(1<<(powerbuilderParserWINDOWPROP-160))|(1<<(powerbuilderParserWINDOWSUBPROP-160))|(1<<(powerbuilderParserWINDOWSUBPROPNAME-160))|(1<<(powerbuilderParserWINDOWSUBPROPVAL-160))|(1<<(powerbuilderParserPBSELECT-160)))) != 0) {
		p.SetState(1234)
		_la = p.GetTokenStream().LA(1)

		if _la <= 0 || _la == powerbuilderParserSEMI {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

		p.SetState(1237)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISwallow_to_newlineContext is an interface to support dynamic dispatch.
type ISwallow_to_newlineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwallow_to_newlineContext differentiates from other interfaces.
	IsSwallow_to_newlineContext()
}

type Swallow_to_newlineContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwallow_to_newlineContext() *Swallow_to_newlineContext {
	var p = new(Swallow_to_newlineContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_swallow_to_newline
	return p
}

func (*Swallow_to_newlineContext) IsSwallow_to_newlineContext() {}

func NewSwallow_to_newlineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Swallow_to_newlineContext {
	var p = new(Swallow_to_newlineContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_swallow_to_newline

	return p
}

func (s *Swallow_to_newlineContext) GetParser() antlr.Parser { return s.parser }

func (s *Swallow_to_newlineContext) AllNEWLINE() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserNEWLINE)
}

func (s *Swallow_to_newlineContext) NEWLINE(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNEWLINE, i)
}

func (s *Swallow_to_newlineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Swallow_to_newlineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Swallow_to_newlineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterSwallow_to_newline(s)
	}
}

func (s *Swallow_to_newlineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitSwallow_to_newline(s)
	}
}

func (s *Swallow_to_newlineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitSwallow_to_newline(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Swallow_to_newline() (localctx ISwallow_to_newlineContext) {
	localctx = NewSwallow_to_newlineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, powerbuilderParserRULE_swallow_to_newline)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<powerbuilderParserT__0)|(1<<powerbuilderParserT__1)|(1<<powerbuilderParserT__2)|(1<<powerbuilderParserT__3)|(1<<powerbuilderParserT__4)|(1<<powerbuilderParserT__5)|(1<<powerbuilderParserT__6)|(1<<powerbuilderParserT__7)|(1<<powerbuilderParserT__8)|(1<<powerbuilderParserT__9)|(1<<powerbuilderParserT__10)|(1<<powerbuilderParserT__11)|(1<<powerbuilderParserT__12)|(1<<powerbuilderParserT__13)|(1<<powerbuilderParserT__14)|(1<<powerbuilderParserT__15)|(1<<powerbuilderParserT__16)|(1<<powerbuilderParserT__17)|(1<<powerbuilderParserT__18)|(1<<powerbuilderParserT__19)|(1<<powerbuilderParserT__20)|(1<<powerbuilderParserT__21)|(1<<powerbuilderParserT__22)|(1<<powerbuilderParserT__23)|(1<<powerbuilderParserT__24)|(1<<powerbuilderParserT__25)|(1<<powerbuilderParserT__26)|(1<<powerbuilderParserT__27)|(1<<powerbuilderParserT__28)|(1<<powerbuilderParserT__29)|(1<<powerbuilderParserT__30))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(powerbuilderParserT__31-32))|(1<<(powerbuilderParserT__32-32))|(1<<(powerbuilderParserT__33-32))|(1<<(powerbuilderParserT__34-32))|(1<<(powerbuilderParserT__35-32))|(1<<(powerbuilderParserT__36-32))|(1<<(powerbuilderParserT__37-32))|(1<<(powerbuilderParserT__38-32))|(1<<(powerbuilderParserT__39-32))|(1<<(powerbuilderParserT__40-32))|(1<<(powerbuilderParserT__41-32))|(1<<(powerbuilderParserT__42-32))|(1<<(powerbuilderParserT__43-32))|(1<<(powerbuilderParserT__44-32))|(1<<(powerbuilderParserT__45-32))|(1<<(powerbuilderParserT__46-32))|(1<<(powerbuilderParserT__47-32))|(1<<(powerbuilderParserT__48-32))|(1<<(powerbuilderParserT__49-32))|(1<<(powerbuilderParserT__50-32))|(1<<(powerbuilderParserT__51-32))|(1<<(powerbuilderParserT__52-32))|(1<<(powerbuilderParserT__53-32))|(1<<(powerbuilderParserT__54-32))|(1<<(powerbuilderParserT__55-32))|(1<<(powerbuilderParserT__56-32))|(1<<(powerbuilderParserT__57-32))|(1<<(powerbuilderParserT__58-32))|(1<<(powerbuilderParserT__59-32))|(1<<(powerbuilderParserT__60-32))|(1<<(powerbuilderParserT__61-32))|(1<<(powerbuilderParserT__62-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(powerbuilderParserT__63-64))|(1<<(powerbuilderParserT__64-64))|(1<<(powerbuilderParserT__65-64))|(1<<(powerbuilderParserT__66-64))|(1<<(powerbuilderParserT__67-64))|(1<<(powerbuilderParserT__68-64))|(1<<(powerbuilderParserT__69-64))|(1<<(powerbuilderParserT__70-64))|(1<<(powerbuilderParserT__71-64))|(1<<(powerbuilderParserT__72-64))|(1<<(powerbuilderParserT__73-64))|(1<<(powerbuilderParserT__74-64))|(1<<(powerbuilderParserT__75-64))|(1<<(powerbuilderParserT__76-64))|(1<<(powerbuilderParserT__77-64))|(1<<(powerbuilderParserT__78-64))|(1<<(powerbuilderParserT__79-64))|(1<<(powerbuilderParserT__80-64))|(1<<(powerbuilderParserT__81-64))|(1<<(powerbuilderParserT__82-64))|(1<<(powerbuilderParserT__83-64))|(1<<(powerbuilderParserT__84-64))|(1<<(powerbuilderParserT__85-64))|(1<<(powerbuilderParserT__86-64))|(1<<(powerbuilderParserT__87-64))|(1<<(powerbuilderParserT__88-64))|(1<<(powerbuilderParserT__89-64))|(1<<(powerbuilderParserT__90-64))|(1<<(powerbuilderParserT__91-64))|(1<<(powerbuilderParserT__92-64))|(1<<(powerbuilderParserT__93-64))|(1<<(powerbuilderParserT__94-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(powerbuilderParserT__95-96))|(1<<(powerbuilderParserT__96-96))|(1<<(powerbuilderParserT__97-96))|(1<<(powerbuilderParserT__98-96))|(1<<(powerbuilderParserT__99-96))|(1<<(powerbuilderParserT__100-96))|(1<<(powerbuilderParserT__101-96))|(1<<(powerbuilderParserT__102-96))|(1<<(powerbuilderParserT__103-96))|(1<<(powerbuilderParserT__104-96))|(1<<(powerbuilderParserT__105-96))|(1<<(powerbuilderParserT__106-96))|(1<<(powerbuilderParserT__107-96))|(1<<(powerbuilderParserT__108-96))|(1<<(powerbuilderParserT__109-96))|(1<<(powerbuilderParserT__110-96))|(1<<(powerbuilderParserT__111-96))|(1<<(powerbuilderParserT__112-96))|(1<<(powerbuilderParserT__113-96))|(1<<(powerbuilderParserT__114-96))|(1<<(powerbuilderParserT__115-96))|(1<<(powerbuilderParserT__116-96))|(1<<(powerbuilderParserT__117-96))|(1<<(powerbuilderParserT__118-96))|(1<<(powerbuilderParserT__119-96))|(1<<(powerbuilderParserT__120-96))|(1<<(powerbuilderParserT__121-96))|(1<<(powerbuilderParserT__122-96))|(1<<(powerbuilderParserT__123-96))|(1<<(powerbuilderParserDQUOTED_STRING-96))|(1<<(powerbuilderParserQUOTED_STRING-96))|(1<<(powerbuilderParserENUM-96)))) != 0) || (((_la-128)&-(0x1f+1)) == 0 && ((1<<uint((_la-128)))&((1<<(powerbuilderParserCOMMA-128))|(1<<(powerbuilderParserID-128))|(1<<(powerbuilderParserSEMI-128))|(1<<(powerbuilderParserLPAREN-128))|(1<<(powerbuilderParserRPAREN-128))|(1<<(powerbuilderParserCOLON-128))|(1<<(powerbuilderParserNUMBER-128))|(1<<(powerbuilderParserDOT-128))|(1<<(powerbuilderParserDQUOTE-128))|(1<<(powerbuilderParserSL_COMMENT-128))|(1<<(powerbuilderParserML_COMMENT-128))|(1<<(powerbuilderParserWS-128))|(1<<(powerbuilderParserLINE_CONTINUATION-128))|(1<<(powerbuilderParserEXPORT_HEADER-128))|(1<<(powerbuilderParserDATE-128))|(1<<(powerbuilderParserTIME-128))|(1<<(powerbuilderParserBINDPAR-128))|(1<<(powerbuilderParserTQ-128))|(1<<(powerbuilderParserDOUBLE_PIPE-128))|(1<<(powerbuilderParserASTROOT-128))|(1<<(powerbuilderParserHEADER-128))|(1<<(powerbuilderParserBOODY-128))|(1<<(powerbuilderParserDATATYPEDECL-128))|(1<<(powerbuilderParserFORWARDDECL-128))|(1<<(powerbuilderParserTYPEVARIABLESDECL-128))|(1<<(powerbuilderParserGLOBALVARIABLESDECL-128))|(1<<(powerbuilderParserVARIABLEDECL-128))|(1<<(powerbuilderParserCONSTANTDECL-128))|(1<<(powerbuilderParserFUNCTIONFORWARDDECL-128))|(1<<(powerbuilderParserFUNCTIONSFORWARDDECL-128))|(1<<(powerbuilderParserFUNCTIONBODY-128)))) != 0) || (((_la-160)&-(0x1f+1)) == 0 && ((1<<uint((_la-160)))&((1<<(powerbuilderParserONBODY-160))|(1<<(powerbuilderParserEVENTBODY-160))|(1<<(powerbuilderParserSTATEMENT-160))|(1<<(powerbuilderParserSQLSTATEMENT-160))|(1<<(powerbuilderParserWINDOWPROP-160))|(1<<(powerbuilderParserWINDOWSUBPROP-160))|(1<<(powerbuilderParserWINDOWSUBPROPNAME-160))|(1<<(powerbuilderParserWINDOWSUBPROPVAL-160))|(1<<(powerbuilderParserPBSELECT-160)))) != 0) {
		p.SetState(1239)
		_la = p.GetTokenStream().LA(1)

		if _la <= 0 || _la == powerbuilderParserNEWLINE {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

		p.SetState(1242)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArray_access_atomContext is an interface to support dynamic dispatch.
type IArray_access_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArray_access_atomContext differentiates from other interfaces.
	IsArray_access_atomContext()
}

type Array_access_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArray_access_atomContext() *Array_access_atomContext {
	var p = new(Array_access_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_array_access_atom
	return p
}

func (*Array_access_atomContext) IsArray_access_atomContext() {}

func NewArray_access_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Array_access_atomContext {
	var p = new(Array_access_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_array_access_atom

	return p
}

func (s *Array_access_atomContext) GetParser() antlr.Parser { return s.parser }

func (s *Array_access_atomContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Array_access_atomContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Array_access_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Array_access_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Array_access_atomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterArray_access_atom(s)
	}
}

func (s *Array_access_atomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitArray_access_atom(s)
	}
}

func (s *Array_access_atomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitArray_access_atom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Array_access_atom() (localctx IArray_access_atomContext) {
	localctx = NewArray_access_atomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, powerbuilderParserRULE_array_access_atom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1244)
		p.Identifier_name()
	}
	{
		p.SetState(1245)
		p.Match(powerbuilderParserT__26)
	}
	{
		p.SetState(1246)
		p.Expression_list()
	}
	{
		p.SetState(1247)
		p.Match(powerbuilderParserT__28)
	}

	return localctx
}

// INumeric_atomContext is an interface to support dynamic dispatch.
type INumeric_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumeric_atomContext differentiates from other interfaces.
	IsNumeric_atomContext()
}

type Numeric_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumeric_atomContext() *Numeric_atomContext {
	var p = new(Numeric_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_numeric_atom
	return p
}

func (*Numeric_atomContext) IsNumeric_atomContext() {}

func NewNumeric_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Numeric_atomContext {
	var p = new(Numeric_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_numeric_atom

	return p
}

func (s *Numeric_atomContext) GetParser() antlr.Parser { return s.parser }

func (s *Numeric_atomContext) NUMBER() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserNUMBER, 0)
}

func (s *Numeric_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Numeric_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Numeric_atomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterNumeric_atom(s)
	}
}

func (s *Numeric_atomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitNumeric_atom(s)
	}
}

func (s *Numeric_atomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitNumeric_atom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Numeric_atom() (localctx INumeric_atomContext) {
	localctx = NewNumeric_atomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, powerbuilderParserRULE_numeric_atom)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1249)
		p.Match(powerbuilderParserNUMBER)
	}

	return localctx
}

// IBoolean_atomContext is an interface to support dynamic dispatch.
type IBoolean_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_atomContext differentiates from other interfaces.
	IsBoolean_atomContext()
}

type Boolean_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_atomContext() *Boolean_atomContext {
	var p = new(Boolean_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_boolean_atom
	return p
}

func (*Boolean_atomContext) IsBoolean_atomContext() {}

func NewBoolean_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_atomContext {
	var p = new(Boolean_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_boolean_atom

	return p
}

func (s *Boolean_atomContext) GetParser() antlr.Parser { return s.parser }
func (s *Boolean_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_atomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterBoolean_atom(s)
	}
}

func (s *Boolean_atomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitBoolean_atom(s)
	}
}

func (s *Boolean_atomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitBoolean_atom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Boolean_atom() (localctx IBoolean_atomContext) {
	localctx = NewBoolean_atomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, powerbuilderParserRULE_boolean_atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1251)
	_la = p.GetTokenStream().LA(1)

	if !(_la == powerbuilderParserT__100 || _la == powerbuilderParserT__101) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICast_expressionContext is an interface to support dynamic dispatch.
type ICast_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCast_expressionContext differentiates from other interfaces.
	IsCast_expressionContext()
}

type Cast_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCast_expressionContext() *Cast_expressionContext {
	var p = new(Cast_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_cast_expression
	return p
}

func (*Cast_expressionContext) IsCast_expressionContext() {}

func NewCast_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cast_expressionContext {
	var p = new(Cast_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_cast_expression

	return p
}

func (s *Cast_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Cast_expressionContext) Data_type_sub() IData_type_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_subContext)
}

func (s *Cast_expressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserLPAREN, 0)
}

func (s *Cast_expressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Cast_expressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Cast_expressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(powerbuilderParserRPAREN, 0)
}

func (s *Cast_expressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(powerbuilderParserCOMMA)
}

func (s *Cast_expressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(powerbuilderParserCOMMA, i)
}

func (s *Cast_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cast_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cast_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterCast_expression(s)
	}
}

func (s *Cast_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitCast_expression(s)
	}
}

func (s *Cast_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitCast_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Cast_expression() (localctx ICast_expressionContext) {
	localctx = NewCast_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, powerbuilderParserRULE_cast_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1253)
		p.Data_type_sub()
	}
	{
		p.SetState(1254)
		p.Match(powerbuilderParserLPAREN)
	}
	{
		p.SetState(1255)
		p.Expression()
	}
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == powerbuilderParserCOMMA {
		{
			p.SetState(1256)
			p.Match(powerbuilderParserCOMMA)
		}
		{
			p.SetState(1257)
			p.Expression()
		}

		p.SetState(1262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1263)
		p.Match(powerbuilderParserRPAREN)
	}

	return localctx
}

// IData_type_subContext is an interface to support dynamic dispatch.
type IData_type_subContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_subContext differentiates from other interfaces.
	IsData_type_subContext()
}

type Data_type_subContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_subContext() *Data_type_subContext {
	var p = new(Data_type_subContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_data_type_sub
	return p
}

func (*Data_type_subContext) IsData_type_subContext() {}

func NewData_type_subContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_subContext {
	var p = new(Data_type_subContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_data_type_sub

	return p
}

func (s *Data_type_subContext) GetParser() antlr.Parser { return s.parser }
func (s *Data_type_subContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_subContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_subContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterData_type_sub(s)
	}
}

func (s *Data_type_subContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitData_type_sub(s)
	}
}

func (s *Data_type_subContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitData_type_sub(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Data_type_sub() (localctx IData_type_subContext) {
	localctx = NewData_type_subContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, powerbuilderParserRULE_data_type_sub)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1265)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(powerbuilderParserT__99-100))|(1<<(powerbuilderParserT__102-100))|(1<<(powerbuilderParserT__103-100))|(1<<(powerbuilderParserT__104-100))|(1<<(powerbuilderParserT__105-100))|(1<<(powerbuilderParserT__106-100))|(1<<(powerbuilderParserT__107-100))|(1<<(powerbuilderParserT__108-100))|(1<<(powerbuilderParserT__109-100))|(1<<(powerbuilderParserT__110-100))|(1<<(powerbuilderParserT__111-100))|(1<<(powerbuilderParserT__112-100))|(1<<(powerbuilderParserT__113-100))|(1<<(powerbuilderParserT__114-100))|(1<<(powerbuilderParserT__115-100))|(1<<(powerbuilderParserT__116-100))|(1<<(powerbuilderParserT__117-100))|(1<<(powerbuilderParserT__118-100))|(1<<(powerbuilderParserT__119-100))|(1<<(powerbuilderParserT__120-100))|(1<<(powerbuilderParserT__121-100))|(1<<(powerbuilderParserT__122-100))|(1<<(powerbuilderParserT__123-100)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IData_type_nameContext is an interface to support dynamic dispatch.
type IData_type_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_nameContext differentiates from other interfaces.
	IsData_type_nameContext()
}

type Data_type_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_nameContext() *Data_type_nameContext {
	var p = new(Data_type_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = powerbuilderParserRULE_data_type_name
	return p
}

func (*Data_type_nameContext) IsData_type_nameContext() {}

func NewData_type_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_nameContext {
	var p = new(Data_type_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = powerbuilderParserRULE_data_type_name

	return p
}

func (s *Data_type_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_nameContext) Data_type_sub() IData_type_subContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_subContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_subContext)
}

func (s *Data_type_nameContext) Identifier_name() IIdentifier_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifier_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifier_nameContext)
}

func (s *Data_type_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.EnterData_type_name(s)
	}
}

func (s *Data_type_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(powerbuilderListener); ok {
		listenerT.ExitData_type_name(s)
	}
}

func (s *Data_type_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case powerbuilderVisitor:
		return t.VisitData_type_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *powerbuilderParser) Data_type_name() (localctx IData_type_nameContext) {
	localctx = NewData_type_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, powerbuilderParserRULE_data_type_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1269)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case powerbuilderParserT__99, powerbuilderParserT__102, powerbuilderParserT__103, powerbuilderParserT__104, powerbuilderParserT__105, powerbuilderParserT__106, powerbuilderParserT__107, powerbuilderParserT__108, powerbuilderParserT__109, powerbuilderParserT__110, powerbuilderParserT__111, powerbuilderParserT__112, powerbuilderParserT__113, powerbuilderParserT__114, powerbuilderParserT__115, powerbuilderParserT__116, powerbuilderParserT__117, powerbuilderParserT__118, powerbuilderParserT__119, powerbuilderParserT__120, powerbuilderParserT__121, powerbuilderParserT__122, powerbuilderParserT__123:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1267)
			p.Data_type_sub()
		}

	case powerbuilderParserID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1268)
			p.Identifier_name()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}
