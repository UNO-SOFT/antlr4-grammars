// Generated from MySqlParser.g4 by ANTLR 4.7.

package mysql // MySqlParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 973, 5864,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 4, 186, 9, 186, 4, 187, 9, 187,
	4, 188, 9, 188, 4, 189, 9, 189, 4, 190, 9, 190, 4, 191, 9, 191, 4, 192,
	9, 192, 4, 193, 9, 193, 4, 194, 9, 194, 4, 195, 9, 195, 4, 196, 9, 196,
	4, 197, 9, 197, 4, 198, 9, 198, 4, 199, 9, 199, 4, 200, 9, 200, 4, 201,
	9, 201, 4, 202, 9, 202, 4, 203, 9, 203, 4, 204, 9, 204, 4, 205, 9, 205,
	4, 206, 9, 206, 4, 207, 9, 207, 4, 208, 9, 208, 4, 209, 9, 209, 4, 210,
	9, 210, 4, 211, 9, 211, 4, 212, 9, 212, 4, 213, 9, 213, 4, 214, 9, 214,
	4, 215, 9, 215, 4, 216, 9, 216, 4, 217, 9, 217, 4, 218, 9, 218, 4, 219,
	9, 219, 4, 220, 9, 220, 4, 221, 9, 221, 4, 222, 9, 222, 4, 223, 9, 223,
	4, 224, 9, 224, 4, 225, 9, 225, 4, 226, 9, 226, 4, 227, 9, 227, 4, 228,
	9, 228, 4, 229, 9, 229, 4, 230, 9, 230, 4, 231, 9, 231, 4, 232, 9, 232,
	4, 233, 9, 233, 4, 234, 9, 234, 4, 235, 9, 235, 4, 236, 9, 236, 4, 237,
	9, 237, 4, 238, 9, 238, 4, 239, 9, 239, 4, 240, 9, 240, 4, 241, 9, 241,
	4, 242, 9, 242, 4, 243, 9, 243, 4, 244, 9, 244, 4, 245, 9, 245, 4, 246,
	9, 246, 4, 247, 9, 247, 4, 248, 9, 248, 4, 249, 9, 249, 4, 250, 9, 250,
	4, 251, 9, 251, 4, 252, 9, 252, 4, 253, 9, 253, 4, 254, 9, 254, 4, 255,
	9, 255, 4, 256, 9, 256, 4, 257, 9, 257, 4, 258, 9, 258, 4, 259, 9, 259,
	4, 260, 9, 260, 4, 261, 9, 261, 4, 262, 9, 262, 4, 263, 9, 263, 4, 264,
	9, 264, 4, 265, 9, 265, 4, 266, 9, 266, 4, 267, 9, 267, 4, 268, 9, 268,
	4, 269, 9, 269, 4, 270, 9, 270, 4, 271, 9, 271, 4, 272, 9, 272, 4, 273,
	9, 273, 4, 274, 9, 274, 4, 275, 9, 275, 4, 276, 9, 276, 4, 277, 9, 277,
	4, 278, 9, 278, 4, 279, 9, 279, 4, 280, 9, 280, 4, 281, 9, 281, 4, 282,
	9, 282, 4, 283, 9, 283, 4, 284, 9, 284, 4, 285, 9, 285, 4, 286, 9, 286,
	4, 287, 9, 287, 4, 288, 9, 288, 3, 2, 5, 2, 578, 10, 2, 3, 2, 3, 2, 5,
	2, 582, 10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 5, 3, 589, 10, 3, 3, 3, 3,
	3, 3, 3, 7, 3, 594, 10, 3, 12, 3, 14, 3, 597, 11, 3, 3, 3, 3, 3, 3, 3,
	5, 3, 602, 10, 3, 3, 3, 5, 3, 605, 10, 3, 3, 3, 5, 3, 608, 10, 3, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 5, 4, 617, 10, 4, 3, 5, 3, 5, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6,
	3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5, 6, 656,
	10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7,
	668, 10, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8,
	679, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 5, 9, 696, 10, 9, 3, 10, 3, 10, 3, 10, 5,
	10, 701, 10, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11,
	3, 11, 3, 11, 5, 11, 713, 10, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 5, 12, 740,
	10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 746, 10, 13, 3, 14, 3, 14, 3,
	14, 5, 14, 751, 10, 14, 3, 14, 3, 14, 7, 14, 755, 10, 14, 12, 14, 14, 14,
	758, 11, 14, 3, 15, 3, 15, 5, 15, 762, 10, 15, 3, 15, 3, 15, 5, 15, 766,
	10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 775, 10,
	15, 3, 15, 5, 15, 778, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15,
	785, 10, 15, 3, 15, 3, 15, 5, 15, 789, 10, 15, 3, 15, 3, 15, 3, 15, 3,
	16, 3, 16, 5, 16, 796, 10, 16, 3, 16, 5, 16, 799, 10, 16, 3, 16, 3, 16,
	3, 16, 5, 16, 804, 10, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 810, 10,
	16, 12, 16, 14, 16, 813, 11, 16, 3, 16, 3, 16, 5, 16, 817, 10, 16, 3, 16,
	3, 16, 3, 16, 5, 16, 822, 10, 16, 3, 16, 5, 16, 825, 10, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5, 17, 836, 10, 17,
	3, 17, 5, 17, 839, 10, 17, 3, 17, 3, 17, 5, 17, 843, 10, 17, 3, 17, 5,
	17, 846, 10, 17, 3, 17, 3, 17, 5, 17, 850, 10, 17, 3, 17, 5, 17, 853, 10,
	17, 3, 17, 3, 17, 5, 17, 857, 10, 17, 3, 17, 5, 17, 860, 10, 17, 3, 17,
	5, 17, 863, 10, 17, 3, 17, 3, 17, 5, 17, 867, 10, 17, 3, 17, 5, 17, 870,
	10, 17, 3, 17, 3, 17, 5, 17, 874, 10, 17, 3, 17, 3, 17, 3, 18, 3, 18, 5,
	18, 880, 10, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 886, 10, 18, 3, 18,
	3, 18, 7, 18, 890, 10, 18, 12, 18, 14, 18, 893, 11, 18, 3, 18, 3, 18, 7,
	18, 897, 10, 18, 12, 18, 14, 18, 900, 11, 18, 3, 18, 3, 18, 3, 19, 3, 19,
	5, 19, 906, 10, 19, 3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 912, 10, 19, 3,
	19, 3, 19, 7, 19, 916, 10, 19, 12, 19, 14, 19, 919, 11, 19, 3, 19, 3, 19,
	3, 19, 3, 19, 7, 19, 925, 10, 19, 12, 19, 14, 19, 928, 11, 19, 3, 19, 3,
	19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20,
	3, 20, 3, 20, 7, 20, 944, 10, 20, 12, 20, 14, 20, 947, 11, 20, 3, 20, 3,
	20, 3, 21, 3, 21, 5, 21, 953, 10, 21, 3, 21, 3, 21, 5, 21, 957, 10, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 967, 10,
	21, 3, 21, 3, 21, 5, 21, 971, 10, 21, 3, 21, 3, 21, 5, 21, 975, 10, 21,
	3, 21, 3, 21, 5, 21, 979, 10, 21, 3, 21, 3, 21, 5, 21, 983, 10, 21, 3,
	21, 7, 21, 986, 10, 21, 12, 21, 14, 21, 989, 11, 21, 5, 21, 991, 10, 21,
	3, 21, 5, 21, 994, 10, 21, 3, 21, 5, 21, 997, 10, 21, 3, 21, 5, 21, 1000,
	10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 1006, 10, 21, 3, 21, 3, 21,
	5, 21, 1010, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5, 21, 1016, 10, 21, 3,
	21, 7, 21, 1019, 10, 21, 12, 21, 14, 21, 1022, 11, 21, 5, 21, 1024, 10,
	21, 3, 21, 5, 21, 1027, 10, 21, 5, 21, 1029, 10, 21, 3, 22, 3, 22, 3, 22,
	3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 1040, 10, 22, 3, 22, 3,
	22, 5, 22, 1044, 10, 22, 3, 22, 5, 22, 1047, 10, 22, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 1061,
	10, 23, 3, 23, 5, 23, 1064, 10, 23, 3, 23, 3, 23, 5, 23, 1068, 10, 23,
	3, 23, 5, 23, 1071, 10, 23, 3, 23, 3, 23, 5, 23, 1075, 10, 23, 3, 23, 5,
	23, 1078, 10, 23, 3, 23, 3, 23, 5, 23, 1082, 10, 23, 3, 23, 5, 23, 1085,
	10, 23, 3, 23, 3, 23, 5, 23, 1089, 10, 23, 3, 23, 5, 23, 1092, 10, 23,
	3, 23, 5, 23, 1095, 10, 23, 3, 23, 3, 23, 5, 23, 1099, 10, 23, 3, 23, 5,
	23, 1102, 10, 23, 3, 23, 3, 23, 5, 23, 1106, 10, 23, 3, 23, 3, 23, 3, 24,
	3, 24, 5, 24, 1112, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 1125, 10, 24, 3, 24, 3, 24, 3, 25,
	3, 25, 3, 25, 5, 25, 1132, 10, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1137, 10,
	25, 3, 25, 5, 25, 1140, 10, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1145, 10, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 5, 25, 1153, 10, 25, 3, 25, 3,
	25, 3, 25, 3, 25, 5, 25, 1159, 10, 25, 3, 25, 3, 25, 5, 25, 1163, 10, 25,
	3, 26, 5, 26, 1166, 10, 26, 3, 26, 3, 26, 3, 26, 5, 26, 1171, 10, 26, 3,
	26, 3, 26, 5, 26, 1175, 10, 26, 3, 26, 3, 26, 5, 26, 1179, 10, 26, 3, 26,
	5, 26, 1182, 10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 1190,
	10, 27, 5, 27, 1192, 10, 27, 3, 28, 3, 28, 3, 28, 7, 28, 1197, 10, 28,
	12, 28, 14, 28, 1200, 11, 28, 3, 28, 3, 28, 3, 28, 5, 28, 1205, 10, 28,
	3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 1211, 10, 28, 12, 28, 14, 28, 1214,
	11, 28, 5, 28, 1216, 10, 28, 3, 28, 3, 28, 3, 28, 7, 28, 1221, 10, 28,
	12, 28, 14, 28, 1224, 11, 28, 5, 28, 1226, 10, 28, 5, 28, 1228, 10, 28,
	3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 1234, 10, 29, 3, 30, 3, 30, 3, 30, 3,
	30, 5, 30, 1240, 10, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 1257, 10,
	31, 3, 32, 3, 32, 3, 32, 3, 33, 3, 33, 5, 33, 1264, 10, 33, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 1273, 10, 33, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 5, 36,
	1287, 10, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 5, 36, 1300, 10, 36, 3, 36, 3, 36, 3, 36, 5, 36, 1305,
	10, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37,
	3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 1321, 10, 37, 3, 38, 3, 38, 3,
	38, 3, 38, 7, 38, 1327, 10, 38, 12, 38, 14, 38, 1330, 11, 38, 3, 38, 3,
	38, 3, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 1339, 10, 39, 3, 40, 3, 40,
	7, 40, 1343, 10, 40, 12, 40, 14, 40, 1346, 11, 40, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 5, 41, 1353, 10, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1358, 10,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 1367, 10, 41,
	3, 42, 3, 42, 5, 42, 1371, 10, 42, 5, 42, 1373, 10, 42, 3, 42, 3, 42, 3,
	42, 5, 42, 1378, 10, 42, 3, 42, 3, 42, 7, 42, 1382, 10, 42, 12, 42, 14,
	42, 1385, 11, 42, 3, 42, 3, 42, 5, 42, 1389, 10, 42, 5, 42, 1391, 10, 42,
	3, 42, 3, 42, 5, 42, 1395, 10, 42, 3, 42, 5, 42, 1398, 10, 42, 3, 42, 5,
	42, 1401, 10, 42, 3, 42, 3, 42, 7, 42, 1405, 10, 42, 12, 42, 14, 42, 1408,
	11, 42, 3, 42, 3, 42, 5, 42, 1412, 10, 42, 5, 42, 1414, 10, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 1419, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 3, 42, 5, 42, 1429, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	5, 43, 1436, 10, 43, 3, 43, 3, 43, 5, 43, 1440, 10, 43, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 5, 44, 1448, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 45, 3, 45, 5, 45, 1456, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 3,
	46, 5, 46, 1464, 10, 46, 3, 47, 3, 47, 5, 47, 1468, 10, 47, 3, 47, 5, 47,
	1471, 10, 47, 3, 47, 3, 47, 7, 47, 1475, 10, 47, 12, 47, 14, 47, 1478,
	11, 47, 3, 47, 3, 47, 5, 47, 1482, 10, 47, 3, 47, 5, 47, 1485, 10, 47,
	3, 47, 3, 47, 7, 47, 1489, 10, 47, 12, 47, 14, 47, 1492, 11, 47, 5, 47,
	1494, 10, 47, 3, 48, 3, 48, 5, 48, 1498, 10, 48, 3, 48, 3, 48, 3, 48, 5,
	48, 1503, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1508, 10, 48, 3, 48, 3, 48,
	5, 48, 1512, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1517, 10, 48, 3, 48, 5,
	48, 1520, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1525, 10, 48, 3, 48, 3, 48,
	5, 48, 1529, 10, 48, 3, 48, 3, 48, 5, 48, 1533, 10, 48, 3, 48, 3, 48, 3,
	48, 5, 48, 1538, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1543, 10, 48, 3, 48,
	3, 48, 3, 48, 5, 48, 1548, 10, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1554,
	10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1559, 10, 48, 3, 48, 3, 48, 3, 48,
	5, 48, 1564, 10, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1570, 10, 48, 3,
	48, 3, 48, 3, 48, 5, 48, 1575, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1580,
	10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1585, 10, 48, 3, 48, 3, 48, 3, 48,
	5, 48, 1590, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1595, 10, 48, 3, 48, 3,
	48, 3, 48, 5, 48, 1600, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1605, 10, 48,
	3, 48, 3, 48, 3, 48, 5, 48, 1610, 10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1615,
	10, 48, 3, 48, 3, 48, 3, 48, 5, 48, 1620, 10, 48, 3, 48, 3, 48, 3, 48,
	3, 48, 3, 48, 5, 48, 1627, 10, 48, 3, 48, 3, 48, 5, 48, 1631, 10, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 7, 48, 1637, 10, 48, 12, 48, 14, 48, 1640, 11,
	48, 3, 48, 3, 48, 5, 48, 1644, 10, 48, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49,
	5, 49, 1651, 10, 49, 3, 49, 3, 49, 3, 49, 3, 49, 3, 49, 5, 49, 1658, 10,
	49, 5, 49, 1660, 10, 49, 3, 49, 3, 49, 3, 49, 3, 49, 7, 49, 1666, 10, 49,
	12, 49, 14, 49, 1669, 11, 49, 3, 49, 3, 49, 5, 49, 1673, 10, 49, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5,
	50, 1686, 10, 50, 5, 50, 1688, 10, 50, 3, 51, 5, 51, 1691, 10, 51, 3, 51,
	3, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1699, 10, 51, 3, 51, 3, 51, 3,
	51, 3, 51, 5, 51, 1705, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 1711,
	10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 5, 52,
	1721, 10, 52, 3, 52, 3, 52, 3, 52, 5, 52, 1726, 10, 52, 3, 52, 3, 52, 3,
	52, 3, 52, 3, 52, 5, 52, 1733, 10, 52, 5, 52, 1735, 10, 52, 3, 52, 5, 52,
	1738, 10, 52, 3, 52, 3, 52, 5, 52, 1742, 10, 52, 3, 52, 5, 52, 1745, 10,
	52, 3, 52, 3, 52, 5, 52, 1749, 10, 52, 3, 52, 5, 52, 1752, 10, 52, 3, 52,
	3, 52, 3, 52, 5, 52, 1757, 10, 52, 3, 52, 5, 52, 1760, 10, 52, 3, 52, 3,
	52, 3, 52, 5, 52, 1765, 10, 52, 3, 52, 5, 52, 1768, 10, 52, 3, 52, 3, 52,
	5, 52, 1772, 10, 52, 3, 52, 5, 52, 1775, 10, 52, 3, 52, 3, 52, 5, 52, 1779,
	10, 52, 3, 52, 5, 52, 1782, 10, 52, 3, 52, 3, 52, 5, 52, 1786, 10, 52,
	3, 52, 5, 52, 1789, 10, 52, 3, 52, 3, 52, 5, 52, 1793, 10, 52, 3, 52, 5,
	52, 1796, 10, 52, 3, 52, 3, 52, 3, 52, 7, 52, 1801, 10, 52, 12, 52, 14,
	52, 1804, 11, 52, 5, 52, 1806, 10, 52, 3, 53, 3, 53, 3, 53, 5, 53, 1811,
	10, 53, 3, 53, 3, 53, 5, 53, 1815, 10, 53, 3, 53, 5, 53, 1818, 10, 53,
	3, 53, 3, 53, 5, 53, 1822, 10, 53, 3, 53, 5, 53, 1825, 10, 53, 3, 53, 3,
	53, 3, 53, 5, 53, 1830, 10, 53, 3, 53, 5, 53, 1833, 10, 53, 3, 53, 3, 53,
	3, 53, 5, 53, 1838, 10, 53, 3, 53, 5, 53, 1841, 10, 53, 3, 53, 3, 53, 5,
	53, 1845, 10, 53, 3, 53, 5, 53, 1848, 10, 53, 3, 53, 3, 53, 5, 53, 1852,
	10, 53, 3, 53, 5, 53, 1855, 10, 53, 3, 53, 3, 53, 5, 53, 1859, 10, 53,
	3, 53, 5, 53, 1862, 10, 53, 3, 53, 3, 53, 5, 53, 1866, 10, 53, 3, 53, 5,
	53, 1869, 10, 53, 3, 54, 3, 54, 3, 54, 5, 54, 1874, 10, 54, 3, 54, 6, 54,
	1877, 10, 54, 13, 54, 14, 54, 1878, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	3, 54, 3, 54, 3, 54, 5, 54, 1889, 10, 54, 3, 55, 3, 55, 5, 55, 1893, 10,
	55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 1900, 10, 55, 3, 55, 3, 55,
	3, 55, 5, 55, 1905, 10, 55, 3, 55, 5, 55, 1908, 10, 55, 3, 55, 3, 55, 3,
	55, 5, 55, 1913, 10, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 5, 55, 1920,
	10, 55, 3, 55, 3, 55, 5, 55, 1924, 10, 55, 3, 55, 3, 55, 5, 55, 1928, 10,
	55, 3, 56, 3, 56, 3, 56, 3, 56, 7, 56, 1934, 10, 56, 12, 56, 14, 56, 1937,
	11, 56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 1955, 10, 58, 3,
	58, 5, 58, 1958, 10, 58, 3, 58, 5, 58, 1961, 10, 58, 3, 58, 3, 58, 5, 58,
	1965, 10, 58, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59, 1973, 10,
	59, 12, 59, 14, 59, 1976, 11, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3,
	60, 3, 60, 3, 60, 7, 60, 1986, 10, 60, 12, 60, 14, 60, 1989, 11, 60, 3,
	60, 3, 60, 3, 61, 3, 61, 5, 61, 1995, 10, 61, 3, 61, 5, 61, 1998, 10, 61,
	3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 2005, 10, 61, 12, 61, 14, 61,
	2008, 11, 61, 3, 61, 7, 61, 2011, 10, 61, 12, 61, 14, 61, 2014, 11, 61,
	3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 62, 2025,
	10, 62, 3, 62, 5, 62, 2028, 10, 62, 3, 62, 3, 62, 5, 62, 2032, 10, 62,
	3, 62, 3, 62, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2040, 10, 63, 3, 63, 5,
	63, 2043, 10, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2048, 10, 63, 3, 63, 3, 63,
	3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 2056, 10, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 5, 63, 2062, 10, 63, 3, 63, 3, 63, 5, 63, 2066, 10, 63, 3, 64, 3, 64,
	3, 64, 5, 64, 2071, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2078,
	10, 64, 3, 64, 3, 64, 5, 64, 2082, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 7, 64, 2091, 10, 64, 12, 64, 14, 64, 2094, 11, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2101, 10, 64, 3, 64, 5, 64, 2104,
	10, 64, 3, 64, 3, 64, 7, 64, 2108, 10, 64, 12, 64, 14, 64, 2111, 11, 64,
	3, 64, 3, 64, 3, 64, 5, 64, 2116, 10, 64, 5, 64, 2118, 10, 64, 3, 64, 3,
	64, 3, 64, 5, 64, 2123, 10, 64, 3, 64, 3, 64, 7, 64, 2127, 10, 64, 12,
	64, 14, 64, 2130, 11, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2135, 10, 64, 5,
	64, 2137, 10, 64, 3, 64, 3, 64, 5, 64, 2141, 10, 64, 3, 64, 5, 64, 2144,
	10, 64, 3, 64, 5, 64, 2147, 10, 64, 3, 64, 3, 64, 7, 64, 2151, 10, 64,
	12, 64, 14, 64, 2154, 11, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2159, 10, 64,
	3, 64, 5, 64, 2162, 10, 64, 3, 64, 3, 64, 7, 64, 2166, 10, 64, 12, 64,
	14, 64, 2169, 11, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2174, 10, 64, 5, 64,
	2176, 10, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2181, 10, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 5, 64, 2188, 10, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2193,
	10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2201, 10, 64,
	3, 64, 3, 64, 5, 64, 2205, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 5, 64, 2213, 10, 64, 3, 64, 3, 64, 5, 64, 2217, 10, 64, 3, 64, 3, 64,
	3, 64, 5, 64, 2222, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2229,
	10, 64, 3, 64, 3, 64, 5, 64, 2233, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 5, 64, 2252, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2265, 10, 64, 3, 64, 5,
	64, 2268, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64,
	2277, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2296,
	10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2303, 10, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2310, 10, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 7, 64, 2323, 10, 64,
	12, 64, 14, 64, 2326, 11, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2338, 10, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 5, 64, 2344, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2350, 10, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2356, 10, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 5, 64, 2362, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2368, 10, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 2374, 10, 64, 3, 65, 3, 65, 3, 65, 5,
	65, 2379, 10, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 5, 66, 2386, 10, 66,
	3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 5, 67, 2393, 10, 67, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 5, 67, 2400, 10, 67, 3, 67, 5, 67, 2403, 10, 67, 3, 67,
	3, 67, 5, 67, 2407, 10, 67, 3, 67, 5, 67, 2410, 10, 67, 3, 68, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 5, 69, 2423,
	10, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 5, 70, 2430, 10, 70, 3, 70,
	3, 70, 3, 71, 3, 71, 3, 71, 5, 71, 2437, 10, 71, 3, 71, 3, 71, 3, 72, 3,
	72, 5, 72, 2443, 10, 72, 3, 72, 3, 72, 5, 72, 2447, 10, 72, 3, 72, 3, 72,
	5, 72, 2451, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 5, 73, 2458, 10,
	73, 3, 73, 5, 73, 2461, 10, 73, 3, 74, 3, 74, 3, 74, 5, 74, 2466, 10, 74,
	3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 5, 75, 2473, 10, 75, 3, 75, 3, 75, 3,
	75, 7, 75, 2478, 10, 75, 12, 75, 14, 75, 2481, 11, 75, 3, 75, 5, 75, 2484,
	10, 75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76,
	3, 76, 7, 76, 2496, 10, 76, 12, 76, 14, 76, 2499, 11, 76, 3, 77, 3, 77,
	5, 77, 2503, 10, 77, 3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5,
	78, 2512, 10, 78, 3, 78, 5, 78, 2515, 10, 78, 3, 79, 3, 79, 5, 79, 2519,
	10, 79, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 2528, 10,
	81, 3, 82, 3, 82, 5, 82, 2532, 10, 82, 3, 82, 5, 82, 2535, 10, 82, 3, 82,
	5, 82, 2538, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2546,
	10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 2552, 10, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 7, 82, 2559, 10, 82, 12, 82, 14, 82, 2562, 11, 82,
	5, 82, 2564, 10, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 7,
	82, 2573, 10, 82, 12, 82, 14, 82, 2576, 11, 82, 5, 82, 2578, 10, 82, 3,
	83, 3, 83, 3, 83, 5, 83, 2583, 10, 83, 3, 83, 5, 83, 2586, 10, 83, 3, 83,
	3, 83, 3, 83, 5, 83, 2591, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3,
	83, 3, 83, 3, 83, 5, 83, 2601, 10, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2606,
	10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2612, 10, 83, 3, 83, 5, 83,
	2615, 10, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2620, 10, 83, 3, 83, 3, 83, 3,
	83, 5, 83, 2625, 10, 83, 5, 83, 2627, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	5, 83, 2633, 10, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2638, 10, 83, 5, 83, 2640,
	10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 2646, 10, 83, 3, 83, 3, 83,
	3, 83, 3, 83, 7, 83, 2652, 10, 83, 12, 83, 14, 83, 2655, 11, 83, 3, 83,
	3, 83, 5, 83, 2659, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 7, 83, 2665, 10,
	83, 12, 83, 14, 83, 2668, 11, 83, 5, 83, 2670, 10, 83, 3, 84, 3, 84, 3,
	84, 5, 84, 2675, 10, 84, 3, 84, 5, 84, 2678, 10, 84, 3, 84, 3, 84, 3, 84,
	5, 84, 2683, 10, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 5, 84, 2691,
	10, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 84, 5, 84, 2699, 10, 84,
	3, 84, 3, 84, 3, 84, 3, 84, 5, 84, 2705, 10, 84, 3, 84, 3, 84, 3, 84, 3,
	84, 7, 84, 2711, 10, 84, 12, 84, 14, 84, 2714, 11, 84, 3, 84, 3, 84, 5,
	84, 2718, 10, 84, 3, 84, 3, 84, 3, 84, 3, 84, 7, 84, 2724, 10, 84, 12,
	84, 14, 84, 2727, 11, 84, 5, 84, 2729, 10, 84, 3, 85, 3, 85, 5, 85, 2733,
	10, 85, 3, 85, 5, 85, 2736, 10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 5, 85, 2744, 10, 85, 3, 85, 3, 85, 3, 85, 3, 85, 5, 85, 2750, 10,
	85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 7, 85, 2757, 10, 85, 12, 85, 14,
	85, 2760, 11, 85, 5, 85, 2762, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 3, 86, 5, 86, 2771, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3,
	86, 3, 86, 5, 86, 2780, 10, 86, 3, 86, 3, 86, 6, 86, 2784, 10, 86, 13,
	86, 14, 86, 2785, 3, 86, 3, 86, 5, 86, 2790, 10, 86, 3, 86, 3, 86, 5, 86,
	2794, 10, 86, 5, 86, 2796, 10, 86, 3, 86, 5, 86, 2799, 10, 86, 3, 86, 5,
	86, 2802, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 2810,
	10, 86, 3, 86, 3, 86, 6, 86, 2814, 10, 86, 13, 86, 14, 86, 2815, 3, 86,
	3, 86, 5, 86, 2820, 10, 86, 3, 86, 5, 86, 2823, 10, 86, 3, 86, 5, 86, 2826,
	10, 86, 3, 86, 5, 86, 2829, 10, 86, 3, 86, 3, 86, 3, 86, 3, 86, 3, 86,
	3, 86, 5, 86, 2837, 10, 86, 5, 86, 2839, 10, 86, 3, 87, 3, 87, 5, 87, 2843,
	10, 87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88,
	3, 88, 7, 88, 2855, 10, 88, 12, 88, 14, 88, 2858, 11, 88, 5, 88, 2860,
	10, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 90, 3, 90, 5, 90, 2868, 10, 90,
	3, 91, 3, 91, 5, 91, 2872, 10, 91, 3, 91, 5, 91, 2875, 10, 91, 3, 91, 5,
	91, 2878, 10, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 3, 91, 5, 91,
	2887, 10, 91, 3, 91, 3, 91, 5, 91, 2891, 10, 91, 3, 91, 5, 91, 2894, 10,
	91, 3, 91, 3, 91, 5, 91, 2898, 10, 91, 3, 92, 3, 92, 5, 92, 2902, 10, 92,
	3, 92, 5, 92, 2905, 10, 92, 3, 92, 5, 92, 2908, 10, 92, 3, 92, 3, 92, 3,
	92, 5, 92, 2913, 10, 92, 3, 92, 3, 92, 3, 92, 3, 92, 5, 92, 2919, 10, 92,
	7, 92, 2921, 10, 92, 12, 92, 14, 92, 2924, 11, 92, 3, 92, 3, 92, 3, 92,
	3, 92, 3, 92, 3, 92, 3, 92, 5, 92, 2933, 10, 92, 3, 92, 3, 92, 3, 92, 3,
	92, 5, 92, 2939, 10, 92, 7, 92, 2941, 10, 92, 12, 92, 14, 92, 2944, 11,
	92, 3, 92, 3, 92, 3, 92, 5, 92, 2949, 10, 92, 3, 92, 3, 92, 5, 92, 2953,
	10, 92, 3, 93, 3, 93, 3, 93, 3, 93, 5, 93, 2959, 10, 93, 3, 93, 5, 93,
	2962, 10, 93, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3, 94, 3,
	94, 3, 94, 5, 94, 2974, 10, 94, 3, 94, 3, 94, 5, 94, 2978, 10, 94, 3, 94,
	3, 94, 5, 94, 2982, 10, 94, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3, 95, 5,
	95, 2990, 10, 95, 3, 95, 3, 95, 5, 95, 2994, 10, 95, 3, 96, 3, 96, 3, 96,
	3, 96, 3, 97, 3, 97, 5, 97, 3002, 10, 97, 3, 97, 5, 97, 3005, 10, 97, 3,
	97, 3, 97, 5, 97, 3009, 10, 97, 3, 97, 5, 97, 3012, 10, 97, 3, 97, 3, 97,
	3, 97, 3, 97, 7, 97, 3018, 10, 97, 12, 97, 14, 97, 3021, 11, 97, 3, 97,
	3, 97, 5, 97, 3025, 10, 97, 3, 97, 5, 97, 3028, 10, 97, 3, 97, 5, 97, 3031,
	10, 97, 3, 98, 3, 98, 5, 98, 3035, 10, 98, 3, 98, 5, 98, 3038, 10, 98,
	3, 98, 3, 98, 3, 98, 3, 98, 3, 98, 7, 98, 3045, 10, 98, 12, 98, 14, 98,
	3048, 11, 98, 3, 98, 3, 98, 5, 98, 3052, 10, 98, 3, 99, 3, 99, 3, 99, 3,
	99, 3, 99, 7, 99, 3059, 10, 99, 12, 99, 14, 99, 3062, 11, 99, 3, 100, 3,
	100, 5, 100, 3066, 10, 100, 3, 101, 3, 101, 3, 101, 7, 101, 3071, 10, 101,
	12, 101, 14, 101, 3074, 11, 101, 3, 102, 3, 102, 7, 102, 3078, 10, 102,
	12, 102, 14, 102, 3081, 11, 102, 3, 102, 3, 102, 3, 102, 7, 102, 3086,
	10, 102, 12, 102, 14, 102, 3089, 11, 102, 3, 102, 3, 102, 5, 102, 3093,
	10, 102, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103, 5, 103, 3101,
	10, 103, 3, 103, 5, 103, 3104, 10, 103, 3, 103, 5, 103, 3107, 10, 103,
	3, 103, 3, 103, 3, 103, 7, 103, 3112, 10, 103, 12, 103, 14, 103, 3115,
	11, 103, 5, 103, 3117, 10, 103, 3, 103, 3, 103, 3, 103, 3, 103, 3, 103,
	5, 103, 3124, 10, 103, 3, 103, 5, 103, 3127, 10, 103, 3, 103, 3, 103, 3,
	103, 3, 103, 3, 103, 3, 103, 5, 103, 3135, 10, 103, 3, 104, 3, 104, 3,
	104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 104, 5, 104, 3145, 10, 104, 5,
	104, 3147, 10, 104, 3, 104, 3, 104, 3, 104, 3, 104, 3, 105, 5, 105, 3154,
	10, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105,
	3, 105, 5, 105, 3165, 10, 105, 3, 105, 3, 105, 3, 105, 3, 105, 5, 105,
	3171, 10, 105, 3, 105, 3, 105, 5, 105, 3175, 10, 105, 3, 105, 3, 105, 3,
	105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 3, 105, 5, 105, 3186, 10,
	105, 3, 105, 3, 105, 3, 105, 5, 105, 3191, 10, 105, 5, 105, 3193, 10, 105,
	3, 105, 3, 105, 5, 105, 3197, 10, 105, 3, 106, 3, 106, 3, 107, 3, 107,
	3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 3, 107, 5, 107, 3209, 10, 107,
	3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 3, 108, 5, 108,
	3219, 10, 108, 3, 109, 3, 109, 7, 109, 3223, 10, 109, 12, 109, 14, 109,
	3226, 11, 109, 3, 109, 3, 109, 5, 109, 3230, 10, 109, 3, 109, 5, 109, 3233,
	10, 109, 3, 109, 5, 109, 3236, 10, 109, 3, 109, 5, 109, 3239, 10, 109,
	3, 110, 3, 110, 7, 110, 3243, 10, 110, 12, 110, 14, 110, 3246, 11, 110,
	3, 110, 3, 110, 5, 110, 3250, 10, 110, 3, 110, 5, 110, 3253, 10, 110, 3,
	110, 5, 110, 3256, 10, 110, 3, 111, 3, 111, 5, 111, 3260, 10, 111, 3, 111,
	3, 111, 3, 112, 3, 112, 5, 112, 3266, 10, 112, 3, 112, 3, 112, 5, 112,
	3270, 10, 112, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113, 3, 113,
	3, 113, 5, 113, 3280, 10, 113, 3, 114, 3, 114, 5, 114, 3284, 10, 114, 3,
	114, 3, 114, 7, 114, 3288, 10, 114, 12, 114, 14, 114, 3291, 11, 114, 3,
	115, 3, 115, 3, 115, 3, 115, 3, 115, 3, 115, 5, 115, 3299, 10, 115, 3,
	115, 5, 115, 3302, 10, 115, 3, 115, 3, 115, 5, 115, 3306, 10, 115, 3, 115,
	5, 115, 3309, 10, 115, 3, 115, 3, 115, 5, 115, 3313, 10, 115, 3, 115, 3,
	115, 5, 115, 3317, 10, 115, 3, 115, 5, 115, 3320, 10, 115, 5, 115, 3322,
	10, 115, 3, 116, 3, 116, 3, 116, 5, 116, 3327, 10, 116, 3, 116, 3, 116,
	3, 116, 5, 116, 3332, 10, 116, 7, 116, 3334, 10, 116, 12, 116, 14, 116,
	3337, 11, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116, 3, 116,
	3, 116, 3, 116, 5, 116, 3348, 10, 116, 3, 116, 3, 116, 3, 116, 3, 116,
	5, 116, 3354, 10, 116, 3, 116, 5, 116, 3357, 10, 116, 3, 116, 3, 116, 3,
	116, 5, 116, 3362, 10, 116, 3, 116, 3, 116, 3, 116, 5, 116, 3367, 10, 116,
	5, 116, 3369, 10, 116, 3, 116, 3, 116, 3, 116, 3, 116, 5, 116, 3375, 10,
	116, 3, 116, 3, 116, 3, 116, 5, 116, 3380, 10, 116, 5, 116, 3382, 10, 116,
	5, 116, 3384, 10, 116, 3, 117, 3, 117, 3, 117, 3, 117, 5, 117, 3390, 10,
	117, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117, 7, 117, 3397, 10, 117, 12,
	117, 14, 117, 3400, 11, 117, 3, 117, 3, 117, 5, 117, 3404, 10, 117, 5,
	117, 3406, 10, 117, 3, 117, 3, 117, 5, 117, 3410, 10, 117, 3, 118, 3, 118,
	5, 118, 3414, 10, 118, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 3420, 10,
	119, 3, 119, 3, 119, 3, 119, 3, 119, 3, 119, 5, 119, 3427, 10, 119, 3,
	120, 3, 120, 3, 120, 3, 120, 3, 120, 7, 120, 3434, 10, 120, 12, 120, 14,
	120, 3437, 11, 120, 5, 120, 3439, 10, 120, 3, 121, 3, 121, 5, 121, 3443,
	10, 121, 3, 122, 3, 122, 5, 122, 3447, 10, 122, 3, 122, 3, 122, 5, 122,
	3451, 10, 122, 3, 122, 5, 122, 3454, 10, 122, 3, 122, 5, 122, 3457, 10,
	122, 3, 122, 5, 122, 3460, 10, 122, 3, 123, 3, 123, 5, 123, 3464, 10, 123,
	3, 123, 3, 123, 5, 123, 3468, 10, 123, 3, 123, 5, 123, 3471, 10, 123, 3,
	123, 5, 123, 3474, 10, 123, 3, 123, 5, 123, 3477, 10, 123, 3, 124, 3, 124,
	3, 124, 3, 125, 3, 125, 5, 125, 3484, 10, 125, 3, 125, 3, 125, 5, 125,
	3488, 10, 125, 3, 125, 3, 125, 3, 126, 3, 126, 3, 126, 3, 126, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 7, 127, 3501, 10, 127, 12, 127, 14, 127,
	3504, 11, 127, 3, 128, 3, 128, 3, 128, 3, 129, 3, 129, 3, 129, 3, 129,
	3, 129, 3, 130, 3, 130, 5, 130, 3516, 10, 130, 3, 130, 3, 130, 3, 130,
	3, 130, 7, 130, 3522, 10, 130, 12, 130, 14, 130, 3525, 11, 130, 3, 131,
	3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 3, 131, 5, 131, 3534, 10, 131,
	3, 132, 3, 132, 5, 132, 3538, 10, 132, 3, 132, 5, 132, 3541, 10, 132, 3,
	132, 3, 132, 5, 132, 3545, 10, 132, 3, 132, 5, 132, 3548, 10, 132, 3, 132,
	5, 132, 3551, 10, 132, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133, 3, 133,
	3, 133, 5, 133, 3560, 10, 133, 3, 134, 3, 134, 3, 134, 3, 134, 3, 134,
	3, 134, 3, 134, 5, 134, 3569, 10, 134, 3, 135, 3, 135, 3, 135, 3, 135,
	3, 135, 3, 135, 7, 135, 3577, 10, 135, 12, 135, 14, 135, 3580, 11, 135,
	3, 135, 5, 135, 3583, 10, 135, 3, 136, 3, 136, 3, 136, 3, 136, 3, 136,
	3, 136, 7, 136, 3591, 10, 136, 12, 136, 14, 136, 3594, 11, 136, 3, 137,
	3, 137, 3, 137, 3, 137, 3, 137, 3, 137, 3, 138, 3, 138, 3, 138, 3, 139,
	3, 139, 3, 139, 5, 139, 3608, 10, 139, 3, 139, 5, 139, 3611, 10, 139, 3,
	140, 3, 140, 3, 140, 3, 140, 3, 140, 7, 140, 3618, 10, 140, 12, 140, 14,
	140, 3621, 11, 140, 5, 140, 3623, 10, 140, 3, 140, 3, 140, 5, 140, 3627,
	10, 140, 3, 140, 7, 140, 3630, 10, 140, 12, 140, 14, 140, 3633, 11, 140,
	3, 140, 5, 140, 3636, 10, 140, 3, 141, 3, 141, 3, 141, 3, 141, 3, 141,
	7, 141, 3643, 10, 141, 12, 141, 14, 141, 3646, 11, 141, 5, 141, 3648, 10,
	141, 3, 142, 3, 142, 3, 142, 3, 143, 3, 143, 3, 143, 3, 144, 3, 144, 3,
	144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3, 144, 3,
	144, 7, 144, 3677, 10, 144, 12, 144, 14, 144, 3680, 11, 144, 5, 144, 3682,
	10, 144, 3, 144, 5, 144, 3685, 10, 144, 3, 145, 3, 145, 3, 146, 3, 146,
	3, 147, 3, 147, 3, 148, 3, 148, 3, 148, 3, 148, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149, 3, 149,
	3, 149, 3, 149, 3, 149, 5, 149, 3739, 10, 149, 3, 150, 3, 150, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151,
	3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 3, 151, 5, 151,
	3761, 10, 151, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 3, 152,
	3, 152, 3, 152, 3, 152, 3, 152, 3, 152, 5, 152, 3775, 10, 152, 3, 153,
	3, 153, 3, 153, 7, 153, 3780, 10, 153, 12, 153, 14, 153, 3783, 11, 153,
	3, 153, 5, 153, 3786, 10, 153, 3, 154, 3, 154, 3, 154, 3, 154, 5, 154,
	3792, 10, 154, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 3, 155, 5, 155,
	3800, 10, 155, 5, 155, 3802, 10, 155, 3, 156, 3, 156, 3, 156, 3, 156, 3,
	157, 3, 157, 3, 157, 3, 157, 3, 157, 5, 157, 3813, 10, 157, 3, 158, 3,
	158, 3, 158, 3, 158, 3, 159, 3, 159, 3, 159, 3, 159, 5, 159, 3823, 10,
	159, 3, 160, 3, 160, 3, 160, 3, 160, 3, 160, 3, 161, 3, 161, 3, 161, 3,
	161, 5, 161, 3834, 10, 161, 3, 162, 3, 162, 3, 162, 3, 162, 3, 163, 3,
	163, 5, 163, 3842, 10, 163, 3, 164, 3, 164, 3, 164, 5, 164, 3847, 10, 164,
	3, 164, 3, 164, 3, 164, 3, 164, 7, 164, 3853, 10, 164, 12, 164, 14, 164,
	3856, 11, 164, 3, 164, 3, 164, 3, 164, 7, 164, 3861, 10, 164, 12, 164,
	14, 164, 3864, 11, 164, 3, 164, 3, 164, 3, 164, 7, 164, 3869, 10, 164,
	12, 164, 14, 164, 3872, 11, 164, 3, 164, 3, 164, 3, 164, 7, 164, 3877,
	10, 164, 12, 164, 14, 164, 3880, 11, 164, 3, 164, 6, 164, 3883, 10, 164,
	13, 164, 14, 164, 3884, 5, 164, 3887, 10, 164, 3, 164, 3, 164, 5, 164,
	3891, 10, 164, 3, 165, 3, 165, 3, 165, 5, 165, 3896, 10, 165, 3, 165, 3,
	165, 3, 165, 5, 165, 3901, 10, 165, 3, 165, 3, 165, 6, 165, 3905, 10, 165,
	13, 165, 14, 165, 3906, 6, 165, 3909, 10, 165, 13, 165, 14, 165, 3910,
	3, 165, 3, 165, 6, 165, 3915, 10, 165, 13, 165, 14, 165, 3916, 5, 165,
	3919, 10, 165, 3, 165, 3, 165, 3, 165, 3, 166, 3, 166, 3, 166, 3, 166,
	6, 166, 3928, 10, 166, 13, 166, 14, 166, 3929, 3, 166, 3, 166, 3, 166,
	3, 166, 6, 166, 3936, 10, 166, 13, 166, 14, 166, 3937, 7, 166, 3940, 10,
	166, 12, 166, 14, 166, 3943, 11, 166, 3, 166, 3, 166, 6, 166, 3947, 10,
	166, 13, 166, 14, 166, 3948, 5, 166, 3951, 10, 166, 3, 166, 3, 166, 3,
	166, 3, 167, 3, 167, 3, 167, 3, 168, 3, 168, 3, 168, 3, 169, 3, 169, 3,
	169, 5, 169, 3965, 10, 169, 3, 169, 3, 169, 6, 169, 3969, 10, 169, 13,
	169, 14, 169, 3970, 3, 169, 3, 169, 3, 169, 5, 169, 3976, 10, 169, 3, 170,
	3, 170, 3, 170, 5, 170, 3981, 10, 170, 3, 170, 3, 170, 6, 170, 3985, 10,
	170, 13, 170, 14, 170, 3986, 3, 170, 3, 170, 3, 170, 3, 170, 3, 170, 5,
	170, 3994, 10, 170, 3, 171, 3, 171, 3, 171, 3, 172, 3, 172, 3, 172, 5,
	172, 4002, 10, 172, 3, 172, 3, 172, 3, 172, 3, 172, 6, 172, 4008, 10, 172,
	13, 172, 14, 172, 4009, 3, 172, 3, 172, 3, 172, 5, 172, 4015, 10, 172,
	3, 173, 3, 173, 3, 173, 3, 173, 5, 173, 4021, 10, 173, 3, 173, 5, 173,
	4024, 10, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 3, 173, 5, 173,
	4032, 10, 173, 3, 174, 3, 174, 3, 174, 3, 174, 3, 174, 5, 174, 4039, 10,
	174, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 3, 175, 5, 175, 4048,
	10, 175, 3, 175, 5, 175, 4051, 10, 175, 3, 176, 3, 176, 3, 176, 3, 176,
	3, 176, 3, 176, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177, 3, 177,
	7, 177, 4066, 10, 177, 12, 177, 14, 177, 4069, 11, 177, 3, 177, 3, 177,
	3, 178, 3, 178, 3, 178, 5, 178, 4076, 10, 178, 3, 178, 3, 178, 3, 178,
	3, 178, 3, 178, 3, 178, 5, 178, 4084, 10, 178, 3, 179, 3, 179, 5, 179,
	4088, 10, 179, 3, 179, 3, 179, 3, 180, 3, 180, 3, 180, 3, 180, 3, 180,
	3, 180, 3, 180, 3, 180, 7, 180, 4100, 10, 180, 12, 180, 14, 180, 4103,
	11, 180, 3, 180, 3, 180, 3, 180, 5, 180, 4108, 10, 180, 3, 180, 3, 180,
	3, 180, 7, 180, 4113, 10, 180, 12, 180, 14, 180, 4116, 11, 180, 3, 180,
	3, 180, 3, 180, 3, 180, 5, 180, 4122, 10, 180, 3, 180, 7, 180, 4125, 10,
	180, 12, 180, 14, 180, 4128, 11, 180, 5, 180, 4130, 10, 180, 5, 180, 4132,
	10, 180, 3, 180, 3, 180, 6, 180, 4136, 10, 180, 13, 180, 14, 180, 4137,
	5, 180, 4140, 10, 180, 3, 180, 3, 180, 7, 180, 4144, 10, 180, 12, 180,
	14, 180, 4147, 11, 180, 5, 180, 4149, 10, 180, 3, 181, 3, 181, 3, 181,
	3, 181, 3, 181, 7, 181, 4156, 10, 181, 12, 181, 14, 181, 4159, 11, 181,
	3, 181, 3, 181, 3, 181, 5, 181, 4164, 10, 181, 3, 181, 3, 181, 3, 181,
	7, 181, 4169, 10, 181, 12, 181, 14, 181, 4172, 11, 181, 3, 181, 3, 181,
	3, 181, 3, 181, 5, 181, 4178, 10, 181, 3, 181, 7, 181, 4181, 10, 181, 12,
	181, 14, 181, 4184, 11, 181, 5, 181, 4186, 10, 181, 5, 181, 4188, 10, 181,
	3, 181, 3, 181, 6, 181, 4192, 10, 181, 13, 181, 14, 181, 4193, 5, 181,
	4196, 10, 181, 3, 181, 3, 181, 7, 181, 4200, 10, 181, 12, 181, 14, 181,
	4203, 11, 181, 5, 181, 4205, 10, 181, 3, 182, 3, 182, 3, 182, 5, 182, 4210,
	10, 182, 3, 182, 3, 182, 3, 182, 7, 182, 4215, 10, 182, 12, 182, 14, 182,
	4218, 11, 182, 3, 183, 3, 183, 3, 183, 3, 183, 7, 183, 4224, 10, 183, 12,
	183, 14, 183, 4227, 11, 183, 3, 183, 3, 183, 5, 183, 4231, 10, 183, 3,
	183, 3, 183, 3, 183, 3, 183, 3, 183, 7, 183, 4238, 10, 183, 12, 183, 14,
	183, 4241, 11, 183, 3, 183, 3, 183, 3, 183, 3, 183, 5, 183, 4247, 10, 183,
	3, 183, 7, 183, 4250, 10, 183, 12, 183, 14, 183, 4253, 11, 183, 5, 183,
	4255, 10, 183, 5, 183, 4257, 10, 183, 3, 183, 3, 183, 3, 183, 3, 183, 7,
	183, 4263, 10, 183, 12, 183, 14, 183, 4266, 11, 183, 5, 183, 4268, 10,
	183, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 3, 184, 7,
	184, 4278, 10, 184, 12, 184, 14, 184, 4281, 11, 184, 3, 184, 3, 184, 3,
	184, 5, 184, 4286, 10, 184, 3, 185, 3, 185, 3, 185, 3, 185, 3, 185, 3,
	185, 3, 185, 3, 185, 3, 185, 3, 185, 3, 186, 3, 186, 3, 186, 3, 186, 7,
	186, 4302, 10, 186, 12, 186, 14, 186, 4305, 11, 186, 3, 186, 3, 186, 5,
	186, 4309, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 7, 186, 4316,
	10, 186, 12, 186, 14, 186, 4319, 11, 186, 3, 186, 3, 186, 3, 186, 5, 186,
	4324, 10, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186, 3, 186,
	7, 186, 4333, 10, 186, 12, 186, 14, 186, 4336, 11, 186, 5, 186, 4338, 10,
	186, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 3, 187, 7,
	187, 4348, 10, 187, 12, 187, 14, 187, 4351, 11, 187, 3, 188, 3, 188, 3,
	188, 3, 188, 5, 188, 4357, 10, 188, 3, 188, 3, 188, 3, 188, 3, 189, 3,
	189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 3, 189, 5, 189, 4370, 10,
	189, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 5, 190, 4382, 10, 190, 3, 190, 3, 190, 3, 190, 3, 190, 3,
	190, 3, 190, 3, 190, 3, 190, 3, 190, 5, 190, 4393, 10, 190, 5, 190, 4395,
	10, 190, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191, 3, 191,
	5, 191, 4405, 10, 191, 3, 192, 3, 192, 3, 192, 3, 192, 3, 192, 3, 192,
	3, 192, 3, 192, 5, 192, 4415, 10, 192, 3, 193, 3, 193, 3, 193, 3, 194,
	3, 194, 3, 194, 3, 194, 3, 194, 5, 194, 4425, 10, 194, 3, 195, 3, 195,
	5, 195, 4429, 10, 195, 3, 195, 3, 195, 5, 195, 4433, 10, 195, 3, 195, 3,
	195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4442, 10, 195, 3,
	195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3,
	195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3,
	195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 3, 195, 5, 195, 4469, 10,
	195, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3, 196, 3,
	196, 3, 196, 3, 196, 3, 196, 3, 196, 5, 196, 4484, 10, 196, 3, 197, 3,
	197, 3, 197, 3, 197, 3, 197, 5, 197, 4491, 10, 197, 3, 198, 3, 198, 5,
	198, 4495, 10, 198, 3, 198, 3, 198, 3, 198, 3, 199, 3, 199, 3, 199, 3,
	199, 7, 199, 4504, 10, 199, 12, 199, 14, 199, 4507, 11, 199, 3, 200, 3,
	200, 3, 200, 3, 200, 5, 200, 4513, 10, 200, 3, 201, 3, 201, 5, 201, 4517,
	10, 201, 3, 201, 3, 201, 3, 201, 3, 202, 3, 202, 5, 202, 4524, 10, 202,
	3, 202, 3, 202, 3, 202, 5, 202, 4529, 10, 202, 3, 202, 5, 202, 4532, 10,
	202, 3, 202, 5, 202, 4535, 10, 202, 3, 203, 3, 203, 3, 203, 3, 203, 3,
	203, 3, 203, 3, 203, 5, 203, 4544, 10, 203, 3, 204, 3, 204, 5, 204, 4548,
	10, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 204, 3, 205,
	3, 205, 3, 205, 3, 205, 3, 205, 3, 205, 3, 206, 3, 206, 3, 206, 3, 206,
	3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207,
	7, 207, 4576, 10, 207, 12, 207, 14, 207, 4579, 11, 207, 3, 207, 3, 207,
	3, 207, 3, 207, 5, 207, 4585, 10, 207, 3, 207, 3, 207, 5, 207, 4589, 10,
	207, 3, 207, 3, 207, 3, 207, 3, 207, 3, 207, 5, 207, 4596, 10, 207, 3,
	207, 5, 207, 4599, 10, 207, 3, 207, 3, 207, 3, 207, 5, 207, 4604, 10, 207,
	3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208,
	4614, 10, 208, 3, 208, 3, 208, 5, 208, 4618, 10, 208, 3, 208, 3, 208, 3,
	208, 3, 208, 5, 208, 4624, 10, 208, 3, 208, 5, 208, 4627, 10, 208, 3, 208,
	3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208,
	3, 208, 5, 208, 4640, 10, 208, 3, 208, 5, 208, 4643, 10, 208, 3, 208, 5,
	208, 4646, 10, 208, 3, 208, 3, 208, 5, 208, 4650, 10, 208, 3, 208, 3, 208,
	3, 208, 3, 208, 3, 208, 5, 208, 4657, 10, 208, 3, 208, 5, 208, 4660, 10,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4666, 10, 208, 3, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4684, 10, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4692, 10, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4700, 10, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4708, 10, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3,
	208, 3, 208, 3, 208, 5, 208, 4722, 10, 208, 3, 208, 3, 208, 5, 208, 4726,
	10, 208, 3, 208, 3, 208, 5, 208, 4730, 10, 208, 3, 208, 5, 208, 4733, 10,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5,
	208, 4743, 10, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5,
	208, 4751, 10, 208, 3, 208, 3, 208, 5, 208, 4755, 10, 208, 3, 208, 3, 208,
	3, 208, 3, 208, 3, 208, 5, 208, 4762, 10, 208, 3, 208, 5, 208, 4765, 10,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 7, 208, 4772, 10, 208, 12,
	208, 14, 208, 4775, 11, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4780, 10,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4786, 10, 208, 3, 208, 3,
	208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 3, 208, 5, 208, 4796, 10,
	208, 5, 208, 4798, 10, 208, 3, 209, 3, 209, 3, 209, 3, 209, 5, 209, 4804,
	10, 209, 3, 209, 5, 209, 4807, 10, 209, 3, 209, 5, 209, 4810, 10, 209,
	3, 210, 3, 210, 3, 210, 3, 210, 5, 210, 4816, 10, 210, 3, 211, 3, 211,
	3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211, 3, 211,
	3, 211, 5, 211, 4830, 10, 211, 3, 212, 3, 212, 3, 212, 3, 213, 3, 213,
	3, 213, 3, 213, 3, 213, 7, 213, 4840, 10, 213, 12, 213, 14, 213, 4843,
	11, 213, 3, 213, 3, 213, 3, 213, 3, 213, 5, 213, 4849, 10, 213, 3, 213,
	5, 213, 4852, 10, 213, 3, 213, 3, 213, 3, 213, 3, 214, 3, 214, 5, 214,
	4859, 10, 214, 3, 214, 3, 214, 3, 214, 7, 214, 4864, 10, 214, 12, 214,
	14, 214, 4867, 11, 214, 3, 215, 3, 215, 5, 215, 4871, 10, 215, 3, 215,
	6, 215, 4874, 10, 215, 13, 215, 14, 215, 4875, 3, 216, 3, 216, 3, 216,
	3, 216, 3, 216, 3, 216, 3, 216, 7, 216, 4885, 10, 216, 12, 216, 14, 216,
	4888, 11, 216, 3, 217, 3, 217, 3, 217, 3, 217, 3, 218, 3, 218, 3, 219,
	3, 219, 5, 219, 4898, 10, 219, 3, 219, 3, 219, 3, 219, 3, 219, 5, 219,
	4904, 10, 219, 3, 220, 3, 220, 3, 220, 5, 220, 4909, 10, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 5, 220, 4915, 10, 220, 3, 220, 3, 220, 3, 220, 3,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4927, 10,
	220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 3, 220, 5, 220, 4936,
	10, 220, 5, 220, 4938, 10, 220, 3, 221, 3, 221, 3, 221, 3, 221, 3, 221,
	5, 221, 4945, 10, 221, 3, 221, 5, 221, 4948, 10, 221, 3, 221, 5, 221, 4951,
	10, 221, 3, 221, 3, 221, 3, 221, 3, 221, 5, 221, 4957, 10, 221, 3, 221,
	3, 221, 5, 221, 4961, 10, 221, 3, 222, 3, 222, 3, 222, 3, 222, 5, 222,
	4967, 10, 222, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 3, 223, 5, 223,
	4975, 10, 223, 3, 223, 3, 223, 3, 224, 3, 224, 3, 224, 3, 225, 3, 225,
	3, 225, 3, 226, 3, 226, 3, 226, 3, 226, 3, 226, 5, 226, 4990, 10, 226,
	3, 226, 3, 226, 3, 226, 5, 226, 4995, 10, 226, 3, 227, 3, 227, 3, 227,
	3, 227, 5, 227, 5001, 10, 227, 3, 228, 3, 228, 3, 228, 3, 228, 5, 228,
	5007, 10, 228, 3, 229, 3, 229, 3, 229, 5, 229, 5012, 10, 229, 5, 229, 5014,
	10, 229, 3, 230, 3, 230, 3, 230, 3, 230, 3, 230, 5, 230, 5021, 10, 230,
	3, 230, 5, 230, 5024, 10, 230, 3, 231, 3, 231, 3, 232, 3, 232, 3, 233,
	3, 233, 3, 233, 3, 233, 5, 233, 5034, 10, 233, 3, 234, 3, 234, 5, 234,
	5038, 10, 234, 3, 235, 3, 235, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236,
	3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236, 3, 236,
	6, 236, 5056, 10, 236, 13, 236, 14, 236, 5057, 3, 237, 3, 237, 3, 237,
	3, 237, 3, 237, 5, 237, 5065, 10, 237, 5, 237, 5067, 10, 237, 3, 238, 3,
	238, 3, 238, 6, 238, 5072, 10, 238, 13, 238, 14, 238, 5073, 5, 238, 5076,
	10, 238, 3, 239, 3, 239, 5, 239, 5080, 10, 239, 3, 240, 3, 240, 3, 240,
	5, 240, 5085, 10, 240, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241, 3, 241,
	3, 241, 3, 241, 3, 241, 3, 241, 5, 241, 5097, 10, 241, 3, 242, 3, 242,
	3, 242, 5, 242, 5102, 10, 242, 3, 243, 3, 243, 3, 244, 3, 244, 5, 244,
	5108, 10, 244, 3, 245, 5, 245, 5111, 10, 245, 3, 245, 3, 245, 5, 245, 5115,
	10, 245, 3, 245, 6, 245, 5118, 10, 245, 13, 245, 14, 245, 5119, 3, 245,
	5, 245, 5123, 10, 245, 3, 245, 3, 245, 5, 245, 5127, 10, 245, 3, 245, 3,
	245, 5, 245, 5131, 10, 245, 5, 245, 5133, 10, 245, 3, 246, 3, 246, 3, 247,
	5, 247, 5138, 10, 247, 3, 247, 3, 247, 3, 248, 3, 248, 5, 248, 5144, 10,
	248, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 3, 249, 5,
	249, 5154, 10, 249, 3, 250, 3, 250, 5, 250, 5158, 10, 250, 3, 250, 5, 250,
	5161, 10, 250, 3, 250, 3, 250, 3, 250, 5, 250, 5166, 10, 250, 3, 250, 3,
	250, 5, 250, 5170, 10, 250, 3, 250, 3, 250, 5, 250, 5174, 10, 250, 3, 250,
	5, 250, 5177, 10, 250, 3, 250, 5, 250, 5180, 10, 250, 3, 250, 3, 250, 5,
	250, 5184, 10, 250, 3, 250, 5, 250, 5187, 10, 250, 3, 250, 5, 250, 5190,
	10, 250, 3, 250, 3, 250, 5, 250, 5194, 10, 250, 3, 250, 5, 250, 5197, 10,
	250, 3, 250, 5, 250, 5200, 10, 250, 3, 250, 3, 250, 3, 250, 5, 250, 5205,
	10, 250, 3, 250, 3, 250, 3, 250, 3, 250, 3, 250, 7, 250, 5212, 10, 250,
	12, 250, 14, 250, 5215, 11, 250, 3, 250, 3, 250, 5, 250, 5219, 10, 250,
	3, 250, 3, 250, 3, 250, 5, 250, 5224, 10, 250, 3, 250, 3, 250, 5, 250,
	5228, 10, 250, 3, 250, 5, 250, 5231, 10, 250, 3, 251, 3, 251, 5, 251, 5235,
	10, 251, 3, 251, 3, 251, 5, 251, 5239, 10, 251, 3, 251, 3, 251, 3, 251,
	5, 251, 5244, 10, 251, 3, 251, 3, 251, 3, 251, 3, 251, 3, 251, 5, 251,
	5251, 10, 251, 3, 251, 3, 251, 5, 251, 5255, 10, 251, 5, 251, 5257, 10,
	251, 3, 252, 3, 252, 3, 253, 3, 253, 3, 253, 3, 253, 3, 254, 3, 254, 3,
	254, 3, 254, 3, 254, 3, 254, 3, 255, 3, 255, 3, 255, 3, 255, 5, 255, 5275,
	10, 255, 3, 255, 3, 255, 3, 256, 3, 256, 3, 256, 7, 256, 5282, 10, 256,
	12, 256, 14, 256, 5285, 11, 256, 3, 257, 3, 257, 3, 257, 7, 257, 5290,
	10, 257, 12, 257, 14, 257, 5293, 11, 257, 3, 258, 3, 258, 3, 258, 3, 258,
	3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 3, 258, 7, 258,
	5307, 10, 258, 12, 258, 14, 258, 5310, 11, 258, 3, 259, 3, 259, 3, 259,
	3, 259, 7, 259, 5316, 10, 259, 12, 259, 14, 259, 5319, 11, 259, 3, 259,
	3, 259, 3, 260, 3, 260, 3, 260, 7, 260, 5326, 10, 260, 12, 260, 14, 260,
	5329, 11, 260, 3, 261, 3, 261, 3, 261, 7, 261, 5334, 10, 261, 12, 261,
	14, 261, 5337, 11, 261, 3, 262, 3, 262, 3, 262, 7, 262, 5342, 10, 262,
	12, 262, 14, 262, 5345, 11, 262, 3, 263, 3, 263, 3, 263, 7, 263, 5350,
	10, 263, 12, 263, 14, 263, 5353, 11, 263, 3, 264, 3, 264, 5, 264, 5357,
	10, 264, 3, 265, 3, 265, 3, 265, 3, 266, 3, 266, 3, 266, 3, 266, 3, 267,
	3, 267, 3, 267, 3, 267, 3, 267, 5, 267, 5371, 10, 267, 3, 267, 3, 267,
	3, 267, 3, 267, 5, 267, 5377, 10, 267, 3, 267, 3, 267, 5, 267, 5381, 10,
	267, 3, 267, 3, 267, 5, 267, 5385, 10, 267, 3, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 6, 268, 5421, 10, 268, 13, 268, 14, 268, 5422,
	3, 268, 3, 268, 5, 268, 5427, 10, 268, 3, 268, 3, 268, 3, 268, 3, 268,
	3, 268, 3, 268, 3, 268, 3, 268, 6, 268, 5437, 10, 268, 13, 268, 14, 268,
	5438, 3, 268, 3, 268, 5, 268, 5443, 10, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 5, 268, 5452, 10, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 5, 268, 5460, 10, 268, 3, 268, 3, 268, 3,
	268, 5, 268, 5465, 10, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 5, 268, 5473, 10, 268, 3, 268, 3, 268, 3, 268, 5, 268, 5478, 10, 268,
	3, 268, 3, 268, 3, 268, 5, 268, 5483, 10, 268, 5, 268, 5485, 10, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 5, 268, 5494, 10,
	268, 3, 268, 3, 268, 3, 268, 5, 268, 5499, 10, 268, 3, 268, 3, 268, 3,
	268, 3, 268, 3, 268, 3, 268, 5, 268, 5507, 10, 268, 3, 268, 3, 268, 3,
	268, 5, 268, 5512, 10, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 5, 268, 5520, 10, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3,
	268, 5, 268, 5528, 10, 268, 3, 268, 5, 268, 5531, 10, 268, 3, 268, 3, 268,
	3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 5, 268, 5541, 10, 268,
	3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268, 3, 268,
	5, 268, 5552, 10, 268, 3, 269, 3, 269, 3, 269, 5, 269, 5557, 10, 269, 3,
	269, 3, 269, 3, 269, 5, 269, 5562, 10, 269, 7, 269, 5564, 10, 269, 12,
	269, 14, 269, 5567, 11, 269, 3, 269, 3, 269, 3, 269, 3, 269, 3, 269, 5,
	269, 5574, 10, 269, 3, 270, 3, 270, 3, 270, 5, 270, 5579, 10, 270, 3, 270,
	3, 270, 3, 270, 3, 270, 3, 270, 3, 270, 3, 270, 5, 270, 5588, 10, 270,
	3, 270, 5, 270, 5591, 10, 270, 3, 270, 3, 270, 3, 270, 3, 270, 3, 270,
	3, 270, 3, 270, 3, 270, 3, 270, 3, 270, 5, 270, 5603, 10, 270, 3, 270,
	3, 270, 3, 270, 3, 270, 3, 270, 3, 270, 5, 270, 5611, 10, 270, 3, 270,
	3, 270, 3, 270, 3, 270, 3, 270, 3, 270, 7, 270, 5619, 10, 270, 12, 270,
	14, 270, 5622, 11, 270, 5, 270, 5624, 10, 270, 3, 270, 3, 270, 5, 270,
	5628, 10, 270, 3, 270, 3, 270, 5, 270, 5632, 10, 270, 3, 271, 3, 271, 3,
	271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3,
	271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3, 271, 3,
	271, 3, 271, 5, 271, 5656, 10, 271, 3, 272, 3, 272, 3, 272, 3, 272, 5,
	272, 5662, 10, 272, 3, 272, 3, 272, 3, 272, 3, 272, 3, 272, 5, 272, 5669,
	10, 272, 7, 272, 5671, 10, 272, 12, 272, 14, 272, 5674, 11, 272, 3, 273,
	3, 273, 3, 273, 3, 273, 5, 273, 5680, 10, 273, 3, 274, 3, 274, 3, 274,
	3, 274, 3, 274, 3, 274, 5, 274, 5688, 10, 274, 3, 274, 3, 274, 3, 274,
	5, 274, 5693, 10, 274, 3, 274, 3, 274, 3, 274, 3, 274, 7, 274, 5699, 10,
	274, 12, 274, 14, 274, 5702, 11, 274, 3, 275, 3, 275, 3, 275, 5, 275, 5707,
	10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275,
	5, 275, 5717, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275,
	3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 5730, 10, 275, 3, 275,
	3, 275, 3, 275, 3, 275, 5, 275, 5736, 10, 275, 3, 275, 3, 275, 3, 275,
	3, 275, 5, 275, 5742, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275,
	3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275, 3, 275,
	5, 275, 5758, 10, 275, 3, 275, 3, 275, 3, 275, 3, 275, 5, 275, 5764, 10,
	275, 7, 275, 5766, 10, 275, 12, 275, 14, 275, 5769, 11, 275, 3, 276, 3,
	276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3,
	276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 5, 276, 5787, 10, 276, 3,
	276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 5, 276, 5797,
	10, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276, 3, 276,
	7, 276, 5807, 10, 276, 12, 276, 14, 276, 5810, 11, 276, 3, 277, 3, 277,
	3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 3, 278,
	3, 278, 3, 278, 3, 278, 3, 278, 3, 278, 5, 278, 5828, 10, 278, 3, 279,
	3, 279, 3, 279, 3, 279, 3, 279, 3, 279, 3, 279, 5, 279, 5837, 10, 279,
	3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 3, 280, 5, 280, 5846, 10,
	280, 3, 281, 3, 281, 3, 282, 3, 282, 3, 283, 3, 283, 3, 284, 3, 284, 3,
	285, 3, 285, 3, 286, 3, 286, 3, 287, 3, 287, 3, 288, 3, 288, 3, 288, 2,
	5, 546, 548, 550, 289, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
	28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
	64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98,
	100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128,
	130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
	160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188,
	190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218,
	220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248,
	250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278,
	280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308,
	310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338,
	340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368,
	370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398,
	400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428,
	430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458,
	460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488,
	490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518,
	520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548,
	550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 2, 116,
	4, 2, 35, 35, 131, 131, 4, 2, 416, 416, 421, 421, 5, 2, 61, 61, 137, 137,
	157, 157, 5, 2, 38, 38, 289, 289, 351, 351, 6, 2, 38, 38, 320, 320, 415,
	415, 483, 483, 4, 2, 407, 407, 960, 960, 4, 2, 67, 67, 124, 124, 4, 2,
	14, 14, 249, 249, 5, 2, 40, 40, 73, 73, 160, 160, 4, 2, 333, 333, 439,
	439, 5, 2, 400, 400, 518, 518, 524, 524, 4, 2, 295, 295, 355, 355, 4, 2,
	265, 265, 369, 369, 4, 2, 263, 263, 342, 342, 5, 2, 68, 68, 72, 72, 109,
	109, 5, 2, 38, 38, 305, 305, 331, 331, 5, 2, 38, 38, 301, 301, 613, 613,
	4, 2, 69, 69, 79, 79, 5, 2, 335, 335, 430, 430, 485, 485, 4, 2, 61, 61,
	137, 137, 3, 2, 950, 951, 5, 2, 330, 330, 364, 364, 413, 413, 4, 2, 38,
	38, 950, 951, 8, 2, 38, 38, 279, 279, 281, 281, 305, 305, 331, 331, 452,
	452, 4, 2, 116, 116, 368, 368, 3, 2, 951, 952, 4, 2, 7, 7, 46, 46, 4, 2,
	12, 12, 151, 151, 4, 2, 168, 168, 540, 540, 4, 2, 19, 19, 126, 126, 5,
	2, 39, 39, 65, 65, 92, 92, 4, 2, 92, 92, 283, 283, 4, 2, 275, 275, 327,
	327, 4, 2, 88, 88, 475, 475, 4, 2, 39, 39, 92, 92, 4, 2, 8, 8, 44, 44,
	4, 2, 164, 164, 535, 535, 6, 2, 330, 330, 364, 364, 412, 412, 442, 442,
	4, 2, 330, 330, 412, 412, 4, 2, 13, 13, 41, 41, 5, 2, 58, 58, 67, 67, 162,
	162, 4, 2, 32, 32, 71, 71, 4, 2, 84, 84, 129, 129, 4, 2, 8, 8, 44, 45,
	3, 2, 498, 499, 4, 2, 338, 338, 481, 481, 4, 2, 190, 190, 372, 372, 4,
	2, 14, 14, 151, 151, 7, 2, 93, 93, 377, 378, 380, 380, 384, 392, 454, 454,
	6, 2, 374, 375, 379, 379, 381, 382, 455, 455, 5, 2, 94, 94, 373, 373, 383,
	383, 4, 2, 357, 357, 500, 500, 4, 2, 494, 494, 496, 496, 4, 2, 259, 259,
	501, 501, 4, 2, 78, 78, 469, 469, 4, 2, 960, 960, 971, 971, 4, 2, 46, 46,
	293, 293, 5, 2, 29, 29, 53, 53, 155, 155, 5, 2, 114, 114, 148, 148, 336,
	336, 4, 2, 90, 90, 158, 158, 4, 2, 271, 271, 486, 486, 4, 2, 36, 36, 537,
	537, 4, 2, 419, 419, 433, 433, 4, 2, 101, 101, 369, 369, 4, 2, 323, 323,
	448, 448, 6, 2, 176, 176, 178, 178, 181, 181, 509, 509, 4, 2, 260, 260,
	456, 456, 4, 2, 506, 506, 536, 536, 4, 2, 60, 60, 68, 68, 8, 2, 114, 114,
	148, 148, 153, 153, 316, 316, 336, 336, 537, 537, 4, 2, 406, 406, 506,
	506, 4, 2, 313, 313, 539, 539, 4, 2, 114, 114, 336, 336, 5, 2, 69, 69,
	80, 80, 349, 349, 4, 2, 284, 284, 447, 447, 8, 2, 190, 190, 310, 310, 312,
	312, 337, 337, 453, 453, 487, 487, 4, 2, 41, 42, 54, 54, 4, 2, 361, 361,
	520, 520, 3, 2, 971, 972, 3, 2, 608, 618, 4, 2, 950, 952, 961, 961, 4,
	2, 55, 55, 154, 154, 4, 2, 102, 102, 964, 964, 4, 2, 188, 189, 196, 199,
	3, 2, 172, 177, 3, 2, 178, 180, 3, 2, 181, 182, 5, 2, 183, 183, 187, 187,
	192, 195, 5, 2, 184, 186, 190, 191, 261, 261, 4, 2, 134, 134, 200, 200,
	4, 2, 190, 190, 410, 410, 4, 2, 159, 159, 484, 484, 3, 2, 623, 629, 4,
	2, 33, 33, 228, 231, 3, 2, 240, 241, 5, 2, 16, 16, 82, 82, 152, 152, 4,
	2, 188, 188, 190, 190, 4, 2, 183, 184, 186, 186, 5, 2, 13, 13, 41, 41,
	809, 809, 5, 2, 212, 212, 218, 219, 224, 224, 5, 2, 213, 215, 220, 223,
	225, 227, 4, 2, 100, 100, 939, 939, 5, 2, 55, 55, 154, 154, 528, 528, 4,
	2, 120, 120, 130, 130, 5, 2, 8, 8, 252, 252, 490, 490, 5, 2, 100, 100,
	932, 933, 939, 940, 3, 2, 929, 935, 3, 2, 568, 607, 3, 2, 619, 622, 3,
	2, 559, 567, 3, 2, 551, 558, 5, 2, 183, 187, 197, 197, 200, 200, 60, 2,
	248, 249, 251, 261, 263, 263, 265, 266, 269, 271, 273, 281, 283, 286, 288,
	289, 291, 292, 295, 296, 298, 306, 309, 311, 313, 321, 324, 324, 327, 327,
	330, 331, 335, 336, 338, 339, 342, 342, 344, 344, 346, 346, 348, 348, 350,
	352, 355, 355, 359, 360, 362, 364, 366, 372, 393, 398, 400, 401, 403, 403,
	405, 410, 413, 419, 421, 422, 425, 427, 429, 433, 437, 438, 441, 441, 443,
	449, 451, 452, 456, 459, 467, 467, 470, 472, 474, 486, 488, 490, 492, 492,
	497, 499, 501, 506, 508, 508, 510, 512, 516, 519, 521, 521, 523, 526, 528,
	528, 530, 531, 535, 539, 541, 543, 545, 545, 613, 613, 10, 2, 84, 84, 129,
	129, 183, 185, 187, 187, 216, 216, 239, 239, 551, 558, 623, 919, 2, 6888,
	2, 577, 3, 2, 2, 2, 4, 595, 3, 2, 2, 2, 6, 616, 3, 2, 2, 2, 8, 618, 3,
	2, 2, 2, 10, 655, 3, 2, 2, 2, 12, 667, 3, 2, 2, 2, 14, 678, 3, 2, 2, 2,
	16, 695, 3, 2, 2, 2, 18, 700, 3, 2, 2, 2, 20, 712, 3, 2, 2, 2, 22, 739,
	3, 2, 2, 2, 24, 745, 3, 2, 2, 2, 26, 747, 3, 2, 2, 2, 28, 759, 3, 2, 2,
	2, 30, 793, 3, 2, 2, 2, 32, 826, 3, 2, 2, 2, 34, 877, 3, 2, 2, 2, 36, 903,
	3, 2, 2, 2, 38, 931, 3, 2, 2, 2, 40, 1028, 3, 2, 2, 2, 42, 1030, 3, 2,
	2, 2, 44, 1048, 3, 2, 2, 2, 46, 1109, 3, 2, 2, 2, 48, 1128, 3, 2, 2, 2,
	50, 1181, 3, 2, 2, 2, 52, 1183, 3, 2, 2, 2, 54, 1227, 3, 2, 2, 2, 56, 1233,
	3, 2, 2, 2, 58, 1235, 3, 2, 2, 2, 60, 1256, 3, 2, 2, 2, 62, 1258, 3, 2,
	2, 2, 64, 1272, 3, 2, 2, 2, 66, 1274, 3, 2, 2, 2, 68, 1278, 3, 2, 2, 2,
	70, 1304, 3, 2, 2, 2, 72, 1320, 3, 2, 2, 2, 74, 1322, 3, 2, 2, 2, 76, 1338,
	3, 2, 2, 2, 78, 1340, 3, 2, 2, 2, 80, 1366, 3, 2, 2, 2, 82, 1428, 3, 2,
	2, 2, 84, 1430, 3, 2, 2, 2, 86, 1441, 3, 2, 2, 2, 88, 1449, 3, 2, 2, 2,
	90, 1463, 3, 2, 2, 2, 92, 1493, 3, 2, 2, 2, 94, 1643, 3, 2, 2, 2, 96, 1645,
	3, 2, 2, 2, 98, 1687, 3, 2, 2, 2, 100, 1710, 3, 2, 2, 2, 102, 1712, 3,
	2, 2, 2, 104, 1807, 3, 2, 2, 2, 106, 1888, 3, 2, 2, 2, 108, 1890, 3, 2,
	2, 2, 110, 1929, 3, 2, 2, 2, 112, 1938, 3, 2, 2, 2, 114, 1945, 3, 2, 2,
	2, 116, 1968, 3, 2, 2, 2, 118, 1977, 3, 2, 2, 2, 120, 1992, 3, 2, 2, 2,
	122, 2015, 3, 2, 2, 2, 124, 2035, 3, 2, 2, 2, 126, 2373, 3, 2, 2, 2, 128,
	2375, 3, 2, 2, 2, 130, 2382, 3, 2, 2, 2, 132, 2389, 3, 2, 2, 2, 134, 2411,
	3, 2, 2, 2, 136, 2419, 3, 2, 2, 2, 138, 2426, 3, 2, 2, 2, 140, 2433, 3,
	2, 2, 2, 142, 2440, 3, 2, 2, 2, 144, 2452, 3, 2, 2, 2, 146, 2462, 3, 2,
	2, 2, 148, 2469, 3, 2, 2, 2, 150, 2485, 3, 2, 2, 2, 152, 2500, 3, 2, 2,
	2, 154, 2506, 3, 2, 2, 2, 156, 2518, 3, 2, 2, 2, 158, 2520, 3, 2, 2, 2,
	160, 2527, 3, 2, 2, 2, 162, 2529, 3, 2, 2, 2, 164, 2579, 3, 2, 2, 2, 166,
	2671, 3, 2, 2, 2, 168, 2730, 3, 2, 2, 2, 170, 2838, 3, 2, 2, 2, 172, 2842,
	3, 2, 2, 2, 174, 2859, 3, 2, 2, 2, 176, 2861, 3, 2, 2, 2, 178, 2867, 3,
	2, 2, 2, 180, 2869, 3, 2, 2, 2, 182, 2899, 3, 2, 2, 2, 184, 2954, 3, 2,
	2, 2, 186, 2963, 3, 2, 2, 2, 188, 2983, 3, 2, 2, 2, 190, 2995, 3, 2, 2,
	2, 192, 2999, 3, 2, 2, 2, 194, 3032, 3, 2, 2, 2, 196, 3053, 3, 2, 2, 2,
	198, 3063, 3, 2, 2, 2, 200, 3067, 3, 2, 2, 2, 202, 3092, 3, 2, 2, 2, 204,
	3134, 3, 2, 2, 2, 206, 3136, 3, 2, 2, 2, 208, 3196, 3, 2, 2, 2, 210, 3198,
	3, 2, 2, 2, 212, 3208, 3, 2, 2, 2, 214, 3218, 3, 2, 2, 2, 216, 3220, 3,
	2, 2, 2, 218, 3240, 3, 2, 2, 2, 220, 3257, 3, 2, 2, 2, 222, 3263, 3, 2,
	2, 2, 224, 3279, 3, 2, 2, 2, 226, 3283, 3, 2, 2, 2, 228, 3321, 3, 2, 2,
	2, 230, 3383, 3, 2, 2, 2, 232, 3385, 3, 2, 2, 2, 234, 3411, 3, 2, 2, 2,
	236, 3415, 3, 2, 2, 2, 238, 3428, 3, 2, 2, 2, 240, 3440, 3, 2, 2, 2, 242,
	3444, 3, 2, 2, 2, 244, 3461, 3, 2, 2, 2, 246, 3478, 3, 2, 2, 2, 248, 3481,
	3, 2, 2, 2, 250, 3491, 3, 2, 2, 2, 252, 3495, 3, 2, 2, 2, 254, 3505, 3,
	2, 2, 2, 256, 3508, 3, 2, 2, 2, 258, 3513, 3, 2, 2, 2, 260, 3533, 3, 2,
	2, 2, 262, 3535, 3, 2, 2, 2, 264, 3559, 3, 2, 2, 2, 266, 3568, 3, 2, 2,
	2, 268, 3570, 3, 2, 2, 2, 270, 3584, 3, 2, 2, 2, 272, 3595, 3, 2, 2, 2,
	274, 3601, 3, 2, 2, 2, 276, 3604, 3, 2, 2, 2, 278, 3612, 3, 2, 2, 2, 280,
	3637, 3, 2, 2, 2, 282, 3649, 3, 2, 2, 2, 284, 3652, 3, 2, 2, 2, 286, 3684,
	3, 2, 2, 2, 288, 3686, 3, 2, 2, 2, 290, 3688, 3, 2, 2, 2, 292, 3690, 3,
	2, 2, 2, 294, 3692, 3, 2, 2, 2, 296, 3738, 3, 2, 2, 2, 298, 3740, 3, 2,
	2, 2, 300, 3760, 3, 2, 2, 2, 302, 3774, 3, 2, 2, 2, 304, 3785, 3, 2, 2,
	2, 306, 3787, 3, 2, 2, 2, 308, 3793, 3, 2, 2, 2, 310, 3803, 3, 2, 2, 2,
	312, 3807, 3, 2, 2, 2, 314, 3814, 3, 2, 2, 2, 316, 3818, 3, 2, 2, 2, 318,
	3824, 3, 2, 2, 2, 320, 3829, 3, 2, 2, 2, 322, 3835, 3, 2, 2, 2, 324, 3841,
	3, 2, 2, 2, 326, 3846, 3, 2, 2, 2, 328, 3892, 3, 2, 2, 2, 330, 3923, 3,
	2, 2, 2, 332, 3955, 3, 2, 2, 2, 334, 3958, 3, 2, 2, 2, 336, 3964, 3, 2,
	2, 2, 338, 3980, 3, 2, 2, 2, 340, 3995, 3, 2, 2, 2, 342, 4001, 3, 2, 2,
	2, 344, 4031, 3, 2, 2, 2, 346, 4033, 3, 2, 2, 2, 348, 4040, 3, 2, 2, 2,
	350, 4052, 3, 2, 2, 2, 352, 4058, 3, 2, 2, 2, 354, 4083, 3, 2, 2, 2, 356,
	4087, 3, 2, 2, 2, 358, 4148, 3, 2, 2, 2, 360, 4204, 3, 2, 2, 2, 362, 4206,
	3, 2, 2, 2, 364, 4219, 3, 2, 2, 2, 366, 4269, 3, 2, 2, 2, 368, 4287, 3,
	2, 2, 2, 370, 4337, 3, 2, 2, 2, 372, 4339, 3, 2, 2, 2, 374, 4352, 3, 2,
	2, 2, 376, 4361, 3, 2, 2, 2, 378, 4394, 3, 2, 2, 2, 380, 4404, 3, 2, 2,
	2, 382, 4414, 3, 2, 2, 2, 384, 4416, 3, 2, 2, 2, 386, 4419, 3, 2, 2, 2,
	388, 4468, 3, 2, 2, 2, 390, 4483, 3, 2, 2, 2, 392, 4490, 3, 2, 2, 2, 394,
	4492, 3, 2, 2, 2, 396, 4499, 3, 2, 2, 2, 398, 4508, 3, 2, 2, 2, 400, 4514,
	3, 2, 2, 2, 402, 4521, 3, 2, 2, 2, 404, 4543, 3, 2, 2, 2, 406, 4545, 3,
	2, 2, 2, 408, 4556, 3, 2, 2, 2, 410, 4562, 3, 2, 2, 2, 412, 4603, 3, 2,
	2, 2, 414, 4797, 3, 2, 2, 2, 416, 4809, 3, 2, 2, 2, 418, 4815, 3, 2, 2,
	2, 420, 4829, 3, 2, 2, 2, 422, 4831, 3, 2, 2, 2, 424, 4834, 3, 2, 2, 2,
	426, 4856, 3, 2, 2, 2, 428, 4868, 3, 2, 2, 2, 430, 4877, 3, 2, 2, 2, 432,
	4889, 3, 2, 2, 2, 434, 4893, 3, 2, 2, 2, 436, 4895, 3, 2, 2, 2, 438, 4937,
	3, 2, 2, 2, 440, 4939, 3, 2, 2, 2, 442, 4962, 3, 2, 2, 2, 444, 4968, 3,
	2, 2, 2, 446, 4978, 3, 2, 2, 2, 448, 4981, 3, 2, 2, 2, 450, 4994, 3, 2,
	2, 2, 452, 4996, 3, 2, 2, 2, 454, 5002, 3, 2, 2, 2, 456, 5008, 3, 2, 2,
	2, 458, 5015, 3, 2, 2, 2, 460, 5025, 3, 2, 2, 2, 462, 5027, 3, 2, 2, 2,
	464, 5033, 3, 2, 2, 2, 466, 5037, 3, 2, 2, 2, 468, 5039, 3, 2, 2, 2, 470,
	5041, 3, 2, 2, 2, 472, 5059, 3, 2, 2, 2, 474, 5075, 3, 2, 2, 2, 476, 5079,
	3, 2, 2, 2, 478, 5084, 3, 2, 2, 2, 480, 5096, 3, 2, 2, 2, 482, 5101, 3,
	2, 2, 2, 484, 5103, 3, 2, 2, 2, 486, 5107, 3, 2, 2, 2, 488, 5132, 3, 2,
	2, 2, 490, 5134, 3, 2, 2, 2, 492, 5137, 3, 2, 2, 2, 494, 5143, 3, 2, 2,
	2, 496, 5153, 3, 2, 2, 2, 498, 5230, 3, 2, 2, 2, 500, 5256, 3, 2, 2, 2,
	502, 5258, 3, 2, 2, 2, 504, 5260, 3, 2, 2, 2, 506, 5264, 3, 2, 2, 2, 508,
	5270, 3, 2, 2, 2, 510, 5278, 3, 2, 2, 2, 512, 5286, 3, 2, 2, 2, 514, 5294,
	3, 2, 2, 2, 516, 5311, 3, 2, 2, 2, 518, 5322, 3, 2, 2, 2, 520, 5330, 3,
	2, 2, 2, 522, 5338, 3, 2, 2, 2, 524, 5346, 3, 2, 2, 2, 526, 5356, 3, 2,
	2, 2, 528, 5358, 3, 2, 2, 2, 530, 5361, 3, 2, 2, 2, 532, 5384, 3, 2, 2,
	2, 534, 5551, 3, 2, 2, 2, 536, 5573, 3, 2, 2, 2, 538, 5631, 3, 2, 2, 2,
	540, 5655, 3, 2, 2, 2, 542, 5661, 3, 2, 2, 2, 544, 5679, 3, 2, 2, 2, 546,
	5692, 3, 2, 2, 2, 548, 5703, 3, 2, 2, 2, 550, 5796, 3, 2, 2, 2, 552, 5811,
	3, 2, 2, 2, 554, 5827, 3, 2, 2, 2, 556, 5836, 3, 2, 2, 2, 558, 5845, 3,
	2, 2, 2, 560, 5847, 3, 2, 2, 2, 562, 5849, 3, 2, 2, 2, 564, 5851, 3, 2,
	2, 2, 566, 5853, 3, 2, 2, 2, 568, 5855, 3, 2, 2, 2, 570, 5857, 3, 2, 2,
	2, 572, 5859, 3, 2, 2, 2, 574, 5861, 3, 2, 2, 2, 576, 578, 5, 4, 3, 2,
	577, 576, 3, 2, 2, 2, 577, 578, 3, 2, 2, 2, 578, 581, 3, 2, 2, 2, 579,
	580, 7, 933, 2, 2, 580, 582, 7, 933, 2, 2, 581, 579, 3, 2, 2, 2, 581, 582,
	3, 2, 2, 2, 582, 583, 3, 2, 2, 2, 583, 584, 7, 2, 2, 3, 584, 3, 3, 2, 2,
	2, 585, 588, 5, 6, 4, 2, 586, 587, 7, 933, 2, 2, 587, 589, 7, 933, 2, 2,
	588, 586, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 590, 3, 2, 2, 2, 590,
	591, 7, 948, 2, 2, 591, 594, 3, 2, 2, 2, 592, 594, 5, 8, 5, 2, 593, 585,
	3, 2, 2, 2, 593, 592, 3, 2, 2, 2, 594, 597, 3, 2, 2, 2, 595, 593, 3, 2,
	2, 2, 595, 596, 3, 2, 2, 2, 596, 607, 3, 2, 2, 2, 597, 595, 3, 2, 2, 2,
	598, 604, 5, 6, 4, 2, 599, 600, 7, 933, 2, 2, 600, 602, 7, 933, 2, 2, 601,
	599, 3, 2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 605,
	7, 948, 2, 2, 604, 601, 3, 2, 2, 2, 604, 605, 3, 2, 2, 2, 605, 608, 3,
	2, 2, 2, 606, 608, 5, 8, 5, 2, 607, 598, 3, 2, 2, 2, 607, 606, 3, 2, 2,
	2, 608, 5, 3, 2, 2, 2, 609, 617, 5, 10, 6, 2, 610, 617, 5, 12, 7, 2, 611,
	617, 5, 14, 8, 2, 612, 617, 5, 16, 9, 2, 613, 617, 5, 18, 10, 2, 614, 617,
	5, 22, 12, 2, 615, 617, 5, 24, 13, 2, 616, 609, 3, 2, 2, 2, 616, 610, 3,
	2, 2, 2, 616, 611, 3, 2, 2, 2, 616, 612, 3, 2, 2, 2, 616, 613, 3, 2, 2,
	2, 616, 614, 3, 2, 2, 2, 616, 615, 3, 2, 2, 2, 617, 7, 3, 2, 2, 2, 618,
	619, 7, 948, 2, 2, 619, 9, 3, 2, 2, 2, 620, 656, 5, 26, 14, 2, 621, 656,
	5, 28, 15, 2, 622, 656, 5, 30, 16, 2, 623, 656, 5, 32, 17, 2, 624, 656,
	5, 34, 18, 2, 625, 656, 5, 36, 19, 2, 626, 656, 5, 38, 20, 2, 627, 656,
	5, 40, 21, 2, 628, 656, 5, 42, 22, 2, 629, 656, 5, 44, 23, 2, 630, 656,
	5, 46, 24, 2, 631, 656, 5, 48, 25, 2, 632, 656, 5, 106, 54, 2, 633, 656,
	5, 108, 55, 2, 634, 656, 5, 110, 56, 2, 635, 656, 5, 112, 57, 2, 636, 656,
	5, 114, 58, 2, 637, 656, 5, 116, 59, 2, 638, 656, 5, 118, 60, 2, 639, 656,
	5, 120, 61, 2, 640, 656, 5, 122, 62, 2, 641, 656, 5, 124, 63, 2, 642, 656,
	5, 128, 65, 2, 643, 656, 5, 130, 66, 2, 644, 656, 5, 132, 67, 2, 645, 656,
	5, 134, 68, 2, 646, 656, 5, 136, 69, 2, 647, 656, 5, 138, 70, 2, 648, 656,
	5, 140, 71, 2, 649, 656, 5, 142, 72, 2, 650, 656, 5, 144, 73, 2, 651, 656,
	5, 146, 74, 2, 652, 656, 5, 148, 75, 2, 653, 656, 5, 150, 76, 2, 654, 656,
	5, 152, 77, 2, 655, 620, 3, 2, 2, 2, 655, 621, 3, 2, 2, 2, 655, 622, 3,
	2, 2, 2, 655, 623, 3, 2, 2, 2, 655, 624, 3, 2, 2, 2, 655, 625, 3, 2, 2,
	2, 655, 626, 3, 2, 2, 2, 655, 627, 3, 2, 2, 2, 655, 628, 3, 2, 2, 2, 655,
	629, 3, 2, 2, 2, 655, 630, 3, 2, 2, 2, 655, 631, 3, 2, 2, 2, 655, 632,
	3, 2, 2, 2, 655, 633, 3, 2, 2, 2, 655, 634, 3, 2, 2, 2, 655, 635, 3, 2,
	2, 2, 655, 636, 3, 2, 2, 2, 655, 637, 3, 2, 2, 2, 655, 638, 3, 2, 2, 2,
	655, 639, 3, 2, 2, 2, 655, 640, 3, 2, 2, 2, 655, 641, 3, 2, 2, 2, 655,
	642, 3, 2, 2, 2, 655, 643, 3, 2, 2, 2, 655, 644, 3, 2, 2, 2, 655, 645,
	3, 2, 2, 2, 655, 646, 3, 2, 2, 2, 655, 647, 3, 2, 2, 2, 655, 648, 3, 2,
	2, 2, 655, 649, 3, 2, 2, 2, 655, 650, 3, 2, 2, 2, 655, 651, 3, 2, 2, 2,
	655, 652, 3, 2, 2, 2, 655, 653, 3, 2, 2, 2, 655, 654, 3, 2, 2, 2, 656,
	11, 3, 2, 2, 2, 657, 668, 5, 170, 86, 2, 658, 668, 5, 162, 82, 2, 659,
	668, 5, 172, 87, 2, 660, 668, 5, 156, 79, 2, 661, 668, 5, 168, 85, 2, 662,
	668, 5, 154, 78, 2, 663, 668, 5, 164, 83, 2, 664, 668, 5, 166, 84, 2, 665,
	668, 5, 158, 80, 2, 666, 668, 5, 160, 81, 2, 667, 657, 3, 2, 2, 2, 667,
	658, 3, 2, 2, 2, 667, 659, 3, 2, 2, 2, 667, 660, 3, 2, 2, 2, 667, 661,
	3, 2, 2, 2, 667, 662, 3, 2, 2, 2, 667, 663, 3, 2, 2, 2, 667, 664, 3, 2,
	2, 2, 667, 665, 3, 2, 2, 2, 667, 666, 3, 2, 2, 2, 668, 13, 3, 2, 2, 2,
	669, 679, 5, 238, 120, 2, 670, 679, 5, 240, 121, 2, 671, 679, 5, 242, 122,
	2, 672, 679, 5, 244, 123, 2, 673, 679, 5, 246, 124, 2, 674, 679, 5, 248,
	125, 2, 675, 679, 5, 250, 126, 2, 676, 679, 5, 252, 127, 2, 677, 679, 5,
	254, 128, 2, 678, 669, 3, 2, 2, 2, 678, 670, 3, 2, 2, 2, 678, 671, 3, 2,
	2, 2, 678, 672, 3, 2, 2, 2, 678, 673, 3, 2, 2, 2, 678, 674, 3, 2, 2, 2,
	678, 675, 3, 2, 2, 2, 678, 676, 3, 2, 2, 2, 678, 677, 3, 2, 2, 2, 679,
	15, 3, 2, 2, 2, 680, 696, 5, 268, 135, 2, 681, 696, 5, 270, 136, 2, 682,
	696, 5, 272, 137, 2, 683, 696, 5, 274, 138, 2, 684, 696, 5, 276, 139, 2,
	685, 696, 5, 278, 140, 2, 686, 696, 5, 280, 141, 2, 687, 696, 5, 282, 142,
	2, 688, 696, 5, 284, 143, 2, 689, 696, 5, 306, 154, 2, 690, 696, 5, 308,
	155, 2, 691, 696, 5, 310, 156, 2, 692, 696, 5, 312, 157, 2, 693, 696, 5,
	314, 158, 2, 694, 696, 5, 316, 159, 2, 695, 680, 3, 2, 2, 2, 695, 681,
	3, 2, 2, 2, 695, 682, 3, 2, 2, 2, 695, 683, 3, 2, 2, 2, 695, 684, 3, 2,
	2, 2, 695, 685, 3, 2, 2, 2, 695, 686, 3, 2, 2, 2, 695, 687, 3, 2, 2, 2,
	695, 688, 3, 2, 2, 2, 695, 689, 3, 2, 2, 2, 695, 690, 3, 2, 2, 2, 695,
	691, 3, 2, 2, 2, 695, 692, 3, 2, 2, 2, 695, 693, 3, 2, 2, 2, 695, 694,
	3, 2, 2, 2, 696, 17, 3, 2, 2, 2, 697, 701, 5, 318, 160, 2, 698, 701, 5,
	320, 161, 2, 699, 701, 5, 322, 162, 2, 700, 697, 3, 2, 2, 2, 700, 698,
	3, 2, 2, 2, 700, 699, 3, 2, 2, 2, 701, 19, 3, 2, 2, 2, 702, 713, 5, 326,
	164, 2, 703, 713, 5, 328, 165, 2, 704, 713, 5, 330, 166, 2, 705, 713, 5,
	334, 168, 2, 706, 713, 5, 336, 169, 2, 707, 713, 5, 338, 170, 2, 708, 713,
	5, 342, 172, 2, 709, 713, 5, 332, 167, 2, 710, 713, 5, 340, 171, 2, 711,
	713, 5, 344, 173, 2, 712, 702, 3, 2, 2, 2, 712, 703, 3, 2, 2, 2, 712, 704,
	3, 2, 2, 2, 712, 705, 3, 2, 2, 2, 712, 706, 3, 2, 2, 2, 712, 707, 3, 2,
	2, 2, 712, 708, 3, 2, 2, 2, 712, 709, 3, 2, 2, 2, 712, 710, 3, 2, 2, 2,
	712, 711, 3, 2, 2, 2, 713, 21, 3, 2, 2, 2, 714, 740, 5, 358, 180, 2, 715,
	740, 5, 360, 181, 2, 716, 740, 5, 362, 182, 2, 717, 740, 5, 364, 183, 2,
	718, 740, 5, 366, 184, 2, 719, 740, 5, 368, 185, 2, 720, 740, 5, 370, 186,
	2, 721, 740, 5, 372, 187, 2, 722, 740, 5, 394, 198, 2, 723, 740, 5, 396,
	199, 2, 724, 740, 5, 398, 200, 2, 725, 740, 5, 400, 201, 2, 726, 740, 5,
	402, 202, 2, 727, 740, 5, 406, 204, 2, 728, 740, 5, 408, 205, 2, 729, 740,
	5, 410, 206, 2, 730, 740, 5, 412, 207, 2, 731, 740, 5, 414, 208, 2, 732,
	740, 5, 422, 212, 2, 733, 740, 5, 424, 213, 2, 734, 740, 5, 426, 214, 2,
	735, 740, 5, 428, 215, 2, 736, 740, 5, 430, 216, 2, 737, 740, 5, 432, 217,
	2, 738, 740, 5, 434, 218, 2, 739, 714, 3, 2, 2, 2, 739, 715, 3, 2, 2, 2,
	739, 716, 3, 2, 2, 2, 739, 717, 3, 2, 2, 2, 739, 718, 3, 2, 2, 2, 739,
	719, 3, 2, 2, 2, 739, 720, 3, 2, 2, 2, 739, 721, 3, 2, 2, 2, 739, 722,
	3, 2, 2, 2, 739, 723, 3, 2, 2, 2, 739, 724, 3, 2, 2, 2, 739, 725, 3, 2,
	2, 2, 739, 726, 3, 2, 2, 2, 739, 727, 3, 2, 2, 2, 739, 728, 3, 2, 2, 2,
	739, 729, 3, 2, 2, 2, 739, 730, 3, 2, 2, 2, 739, 731, 3, 2, 2, 2, 739,
	732, 3, 2, 2, 2, 739, 733, 3, 2, 2, 2, 739, 734, 3, 2, 2, 2, 739, 735,
	3, 2, 2, 2, 739, 736, 3, 2, 2, 2, 739, 737, 3, 2, 2, 2, 739, 738, 3, 2,
	2, 2, 740, 23, 3, 2, 2, 2, 741, 746, 5, 442, 222, 2, 742, 746, 5, 444,
	223, 2, 743, 746, 5, 446, 224, 2, 744, 746, 5, 448, 225, 2, 745, 741, 3,
	2, 2, 2, 745, 742, 3, 2, 2, 2, 745, 743, 3, 2, 2, 2, 745, 744, 3, 2, 2,
	2, 746, 25, 3, 2, 2, 2, 747, 748, 7, 31, 2, 2, 748, 750, 9, 2, 2, 2, 749,
	751, 5, 530, 266, 2, 750, 749, 3, 2, 2, 2, 750, 751, 3, 2, 2, 2, 751, 752,
	3, 2, 2, 2, 752, 756, 5, 478, 240, 2, 753, 755, 5, 50, 26, 2, 754, 753,
	3, 2, 2, 2, 755, 758, 3, 2, 2, 2, 756, 754, 3, 2, 2, 2, 756, 757, 3, 2,
	2, 2, 757, 27, 3, 2, 2, 2, 758, 756, 3, 2, 2, 2, 759, 761, 7, 31, 2, 2,
	760, 762, 5, 52, 27, 2, 761, 760, 3, 2, 2, 2, 761, 762, 3, 2, 2, 2, 762,
	763, 3, 2, 2, 2, 763, 765, 7, 316, 2, 2, 764, 766, 5, 530, 266, 2, 765,
	764, 3, 2, 2, 2, 765, 766, 3, 2, 2, 2, 766, 767, 3, 2, 2, 2, 767, 768,
	5, 454, 228, 2, 768, 769, 7, 103, 2, 2, 769, 770, 7, 478, 2, 2, 770, 777,
	5, 54, 28, 2, 771, 772, 7, 103, 2, 2, 772, 774, 7, 280, 2, 2, 773, 775,
	7, 100, 2, 2, 774, 773, 3, 2, 2, 2, 774, 775, 3, 2, 2, 2, 775, 776, 3,
	2, 2, 2, 776, 778, 7, 441, 2, 2, 777, 771, 3, 2, 2, 2, 777, 778, 3, 2,
	2, 2, 778, 784, 3, 2, 2, 2, 779, 785, 7, 306, 2, 2, 780, 785, 7, 299, 2,
	2, 781, 782, 7, 299, 2, 2, 782, 783, 7, 103, 2, 2, 783, 785, 7, 486, 2,
	2, 784, 779, 3, 2, 2, 2, 784, 780, 3, 2, 2, 2, 784, 781, 3, 2, 2, 2, 784,
	785, 3, 2, 2, 2, 785, 788, 3, 2, 2, 2, 786, 787, 7, 277, 2, 2, 787, 789,
	7, 960, 2, 2, 788, 786, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 790, 3,
	2, 2, 2, 790, 791, 7, 302, 2, 2, 791, 792, 5, 324, 163, 2, 792, 29, 3,
	2, 2, 2, 793, 795, 7, 31, 2, 2, 794, 796, 9, 3, 2, 2, 795, 794, 3, 2, 2,
	2, 795, 796, 3, 2, 2, 2, 796, 798, 3, 2, 2, 2, 797, 799, 9, 4, 2, 2, 798,
	797, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 800, 3, 2, 2, 2, 800, 801,
	7, 69, 2, 2, 801, 803, 5, 478, 240, 2, 802, 804, 5, 62, 32, 2, 803, 802,
	3, 2, 2, 2, 803, 804, 3, 2, 2, 2, 804, 805, 3, 2, 2, 2, 805, 806, 7, 103,
	2, 2, 806, 807, 5, 452, 227, 2, 807, 811, 5, 516, 259, 2, 808, 810, 5,
	64, 33, 2, 809, 808, 3, 2, 2, 2, 810, 813, 3, 2, 2, 2, 811, 809, 3, 2,
	2, 2, 811, 812, 3, 2, 2, 2, 812, 824, 3, 2, 2, 2, 813, 811, 3, 2, 2, 2,
	814, 816, 7, 251, 2, 2, 815, 817, 7, 936, 2, 2, 816, 815, 3, 2, 2, 2, 816,
	817, 3, 2, 2, 2, 817, 818, 3, 2, 2, 2, 818, 825, 9, 5, 2, 2, 819, 821,
	7, 90, 2, 2, 820, 822, 7, 936, 2, 2, 821, 820, 3, 2, 2, 2, 821, 822, 3,
	2, 2, 2, 822, 823, 3, 2, 2, 2, 823, 825, 9, 6, 2, 2, 824, 814, 3, 2, 2,
	2, 824, 819, 3, 2, 2, 2, 824, 825, 3, 2, 2, 2, 825, 31, 3, 2, 2, 2, 826,
	827, 7, 31, 2, 2, 827, 828, 7, 370, 2, 2, 828, 829, 7, 63, 2, 2, 829, 830,
	5, 478, 240, 2, 830, 831, 7, 7, 2, 2, 831, 832, 7, 525, 2, 2, 832, 838,
	7, 960, 2, 2, 833, 835, 7, 350, 2, 2, 834, 836, 7, 936, 2, 2, 835, 834,
	3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836, 837, 3, 2, 2, 2, 837, 839, 5, 486,
	244, 2, 838, 833, 3, 2, 2, 2, 838, 839, 3, 2, 2, 2, 839, 845, 3, 2, 2,
	2, 840, 842, 7, 526, 2, 2, 841, 843, 7, 936, 2, 2, 842, 841, 3, 2, 2, 2,
	842, 843, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 846, 5, 486, 244, 2, 845,
	840, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 852, 3, 2, 2, 2, 847, 849,
	7, 451, 2, 2, 848, 850, 7, 936, 2, 2, 849, 848, 3, 2, 2, 2, 849, 850, 3,
	2, 2, 2, 850, 851, 3, 2, 2, 2, 851, 853, 5, 486, 244, 2, 852, 847, 3, 2,
	2, 2, 852, 853, 3, 2, 2, 2, 853, 859, 3, 2, 2, 2, 854, 856, 7, 414, 2,
	2, 855, 857, 7, 936, 2, 2, 856, 855, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2,
	857, 858, 3, 2, 2, 2, 858, 860, 5, 478, 240, 2, 859, 854, 3, 2, 2, 2, 859,
	860, 3, 2, 2, 2, 860, 862, 3, 2, 2, 2, 861, 863, 7, 538, 2, 2, 862, 861,
	3, 2, 2, 2, 862, 863, 3, 2, 2, 2, 863, 869, 3, 2, 2, 2, 864, 866, 7, 277,
	2, 2, 865, 867, 7, 936, 2, 2, 866, 865, 3, 2, 2, 2, 866, 867, 3, 2, 2,
	2, 867, 868, 3, 2, 2, 2, 868, 870, 7, 960, 2, 2, 869, 864, 3, 2, 2, 2,
	869, 870, 3, 2, 2, 2, 870, 871, 3, 2, 2, 2, 871, 873, 7, 310, 2, 2, 872,
	874, 7, 936, 2, 2, 873, 872, 3, 2, 2, 2, 873, 874, 3, 2, 2, 2, 874, 875,
	3, 2, 2, 2, 875, 876, 5, 468, 235, 2, 876, 33, 3, 2, 2, 2, 877, 879, 7,
	31, 2, 2, 878, 880, 5, 52, 27, 2, 879, 878, 3, 2, 2, 2, 879, 880, 3, 2,
	2, 2, 880, 881, 3, 2, 2, 2, 881, 882, 7, 114, 2, 2, 882, 883, 5, 454, 228,
	2, 883, 885, 7, 945, 2, 2, 884, 886, 5, 66, 34, 2, 885, 884, 3, 2, 2, 2,
	885, 886, 3, 2, 2, 2, 886, 891, 3, 2, 2, 2, 887, 888, 7, 947, 2, 2, 888,
	890, 5, 66, 34, 2, 889, 887, 3, 2, 2, 2, 890, 893, 3, 2, 2, 2, 891, 889,
	3, 2, 2, 2, 891, 892, 3, 2, 2, 2, 892, 894, 3, 2, 2, 2, 893, 891, 3, 2,
	2, 2, 894, 898, 7, 946, 2, 2, 895, 897, 5, 70, 36, 2, 896, 895, 3, 2, 2,
	2, 897, 900, 3, 2, 2, 2, 898, 896, 3, 2, 2, 2, 898, 899, 3, 2, 2, 2, 899,
	901, 3, 2, 2, 2, 900, 898, 3, 2, 2, 2, 901, 902, 5, 324, 163, 2, 902, 35,
	3, 2, 2, 2, 903, 905, 7, 31, 2, 2, 904, 906, 5, 52, 27, 2, 905, 904, 3,
	2, 2, 2, 905, 906, 3, 2, 2, 2, 906, 907, 3, 2, 2, 2, 907, 908, 7, 336,
	2, 2, 908, 909, 5, 454, 228, 2, 909, 911, 7, 945, 2, 2, 910, 912, 5, 68,
	35, 2, 911, 910, 3, 2, 2, 2, 911, 912, 3, 2, 2, 2, 912, 917, 3, 2, 2, 2,
	913, 914, 7, 947, 2, 2, 914, 916, 5, 68, 35, 2, 915, 913, 3, 2, 2, 2, 916,
	919, 3, 2, 2, 2, 917, 915, 3, 2, 2, 2, 917, 918, 3, 2, 2, 2, 918, 920,
	3, 2, 2, 2, 919, 917, 3, 2, 2, 2, 920, 921, 7, 946, 2, 2, 921, 922, 7,
	470, 2, 2, 922, 926, 5, 498, 250, 2, 923, 925, 5, 70, 36, 2, 924, 923,
	3, 2, 2, 2, 925, 928, 3, 2, 2, 2, 926, 924, 3, 2, 2, 2, 926, 927, 3, 2,
	2, 2, 927, 929, 3, 2, 2, 2, 928, 926, 3, 2, 2, 2, 929, 930, 5, 324, 163,
	2, 930, 37, 3, 2, 2, 2, 931, 932, 7, 31, 2, 2, 932, 933, 7, 480, 2, 2,
	933, 934, 5, 478, 240, 2, 934, 935, 7, 59, 2, 2, 935, 936, 7, 291, 2, 2,
	936, 937, 7, 542, 2, 2, 937, 938, 9, 7, 2, 2, 938, 939, 7, 425, 2, 2, 939,
	940, 7, 945, 2, 2, 940, 945, 5, 72, 37, 2, 941, 942, 7, 947, 2, 2, 942,
	944, 5, 72, 37, 2, 943, 941, 3, 2, 2, 2, 944, 947, 3, 2, 2, 2, 945, 943,
	3, 2, 2, 2, 945, 946, 3, 2, 2, 2, 946, 948, 3, 2, 2, 2, 947, 945, 3, 2,
	2, 2, 948, 949, 7, 946, 2, 2, 949, 39, 3, 2, 2, 2, 950, 952, 7, 31, 2,
	2, 951, 953, 7, 517, 2, 2, 952, 951, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2,
	953, 954, 3, 2, 2, 2, 954, 956, 7, 148, 2, 2, 955, 957, 5, 530, 266, 2,
	956, 955, 3, 2, 2, 2, 956, 957, 3, 2, 2, 2, 957, 958, 3, 2, 2, 2, 958,
	966, 5, 452, 227, 2, 959, 960, 7, 85, 2, 2, 960, 967, 5, 452, 227, 2, 961,
	962, 7, 945, 2, 2, 962, 963, 7, 85, 2, 2, 963, 964, 5, 452, 227, 2, 964,
	965, 7, 946, 2, 2, 965, 967, 3, 2, 2, 2, 966, 959, 3, 2, 2, 2, 966, 961,
	3, 2, 2, 2, 967, 1029, 3, 2, 2, 2, 968, 970, 7, 31, 2, 2, 969, 971, 7,
	517, 2, 2, 970, 969, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 972, 3, 2,
	2, 2, 972, 974, 7, 148, 2, 2, 973, 975, 5, 530, 266, 2, 974, 973, 3, 2,
	2, 2, 974, 975, 3, 2, 2, 2, 975, 976, 3, 2, 2, 2, 976, 978, 5, 452, 227,
	2, 977, 979, 5, 74, 38, 2, 978, 977, 3, 2, 2, 2, 978, 979, 3, 2, 2, 2,
	979, 990, 3, 2, 2, 2, 980, 987, 5, 94, 48, 2, 981, 983, 7, 947, 2, 2, 982,
	981, 3, 2, 2, 2, 982, 983, 3, 2, 2, 2, 983, 984, 3, 2, 2, 2, 984, 986,
	5, 94, 48, 2, 985, 982, 3, 2, 2, 2, 986, 989, 3, 2, 2, 2, 987, 985, 3,
	2, 2, 2, 987, 988, 3, 2, 2, 2, 988, 991, 3, 2, 2, 2, 989, 987, 3, 2, 2,
	2, 990, 980, 3, 2, 2, 2, 990, 991, 3, 2, 2, 2, 991, 993, 3, 2, 2, 2, 992,
	994, 5, 96, 49, 2, 993, 992, 3, 2, 2, 2, 993, 994, 3, 2, 2, 2, 994, 996,
	3, 2, 2, 2, 995, 997, 9, 8, 2, 2, 996, 995, 3, 2, 2, 2, 996, 997, 3, 2,
	2, 2, 997, 999, 3, 2, 2, 2, 998, 1000, 7, 12, 2, 2, 999, 998, 3, 2, 2,
	2, 999, 1000, 3, 2, 2, 2, 1000, 1001, 3, 2, 2, 2, 1001, 1002, 5, 170, 86,
	2, 1002, 1029, 3, 2, 2, 2, 1003, 1005, 7, 31, 2, 2, 1004, 1006, 7, 517,
	2, 2, 1005, 1004, 3, 2, 2, 2, 1005, 1006, 3, 2, 2, 2, 1006, 1007, 3, 2,
	2, 2, 1007, 1009, 7, 148, 2, 2, 1008, 1010, 5, 530, 266, 2, 1009, 1008,
	3, 2, 2, 2, 1009, 1010, 3, 2, 2, 2, 1010, 1011, 3, 2, 2, 2, 1011, 1012,
	5, 452, 227, 2, 1012, 1023, 5, 74, 38, 2, 1013, 1020, 5, 94, 48, 2, 1014,
	1016, 7, 947, 2, 2, 1015, 1014, 3, 2, 2, 2, 1015, 1016, 3, 2, 2, 2, 1016,
	1017, 3, 2, 2, 2, 1017, 1019, 5, 94, 48, 2, 1018, 1015, 3, 2, 2, 2, 1019,
	1022, 3, 2, 2, 2, 1020, 1018, 3, 2, 2, 2, 1020, 1021, 3, 2, 2, 2, 1021,
	1024, 3, 2, 2, 2, 1022, 1020, 3, 2, 2, 2, 1023, 1013, 3, 2, 2, 2, 1023,
	1024, 3, 2, 2, 2, 1024, 1026, 3, 2, 2, 2, 1025, 1027, 5, 96, 49, 2, 1026,
	1025, 3, 2, 2, 2, 1026, 1027, 3, 2, 2, 2, 1027, 1029, 3, 2, 2, 2, 1028,
	950, 3, 2, 2, 2, 1028, 968, 3, 2, 2, 2, 1028, 1003, 3, 2, 2, 2, 1029, 41,
	3, 2, 2, 2, 1030, 1031, 7, 31, 2, 2, 1031, 1032, 7, 516, 2, 2, 1032, 1033,
	5, 478, 240, 2, 1033, 1034, 7, 7, 2, 2, 1034, 1035, 7, 292, 2, 2, 1035,
	1039, 7, 960, 2, 2, 1036, 1037, 7, 328, 2, 2, 1037, 1038, 7, 936, 2, 2,
	1038, 1040, 5, 486, 244, 2, 1039, 1036, 3, 2, 2, 2, 1039, 1040, 3, 2, 2,
	2, 1040, 1046, 3, 2, 2, 2, 1041, 1043, 7, 310, 2, 2, 1042, 1044, 7, 936,
	2, 2, 1043, 1042, 3, 2, 2, 2, 1043, 1044, 3, 2, 2, 2, 1044, 1045, 3, 2,
	2, 2, 1045, 1047, 5, 468, 235, 2, 1046, 1041, 3, 2, 2, 2, 1046, 1047, 3,
	2, 2, 2, 1047, 43, 3, 2, 2, 2, 1048, 1049, 7, 31, 2, 2, 1049, 1050, 7,
	516, 2, 2, 1050, 1051, 5, 478, 240, 2, 1051, 1052, 7, 7, 2, 2, 1052, 1053,
	7, 292, 2, 2, 1053, 1054, 7, 960, 2, 2, 1054, 1055, 7, 162, 2, 2, 1055,
	1056, 7, 370, 2, 2, 1056, 1057, 7, 63, 2, 2, 1057, 1063, 5, 478, 240, 2,
	1058, 1060, 7, 324, 2, 2, 1059, 1061, 7, 936, 2, 2, 1060, 1059, 3, 2, 2,
	2, 1060, 1061, 3, 2, 2, 2, 1061, 1062, 3, 2, 2, 2, 1062, 1064, 5, 486,
	244, 2, 1063, 1058, 3, 2, 2, 2, 1063, 1064, 3, 2, 2, 2, 1064, 1070, 3,
	2, 2, 2, 1065, 1067, 7, 350, 2, 2, 1066, 1068, 7, 936, 2, 2, 1067, 1066,
	3, 2, 2, 2, 1067, 1068, 3, 2, 2, 2, 1068, 1069, 3, 2, 2, 2, 1069, 1071,
	5, 486, 244, 2, 1070, 1065, 3, 2, 2, 2, 1070, 1071, 3, 2, 2, 2, 1071, 1077,
	3, 2, 2, 2, 1072, 1074, 7, 256, 2, 2, 1073, 1075, 7, 936, 2, 2, 1074, 1073,
	3, 2, 2, 2, 1074, 1075, 3, 2, 2, 2, 1075, 1076, 3, 2, 2, 2, 1076, 1078,
	5, 486, 244, 2, 1077, 1072, 3, 2, 2, 2, 1077, 1078, 3, 2, 2, 2, 1078, 1084,
	3, 2, 2, 2, 1079, 1081, 7, 396, 2, 2, 1080, 1082, 7, 936, 2, 2, 1081, 1080,
	3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1083, 3, 2, 2, 2, 1083, 1085,
	5, 486, 244, 2, 1084, 1079, 3, 2, 2, 2, 1084, 1085, 3, 2, 2, 2, 1085, 1091,
	3, 2, 2, 2, 1086, 1088, 7, 414, 2, 2, 1087, 1089, 7, 936, 2, 2, 1088, 1087,
	3, 2, 2, 2, 1088, 1089, 3, 2, 2, 2, 1089, 1090, 3, 2, 2, 2, 1090, 1092,
	5, 478, 240, 2, 1091, 1086, 3, 2, 2, 2, 1091, 1092, 3, 2, 2, 2, 1092, 1094,
	3, 2, 2, 2, 1093, 1095, 7, 538, 2, 2, 1094, 1093, 3, 2, 2, 2, 1094, 1095,
	3, 2, 2, 2, 1095, 1101, 3, 2, 2, 2, 1096, 1098, 7, 277, 2, 2, 1097, 1099,
	7, 936, 2, 2, 1098, 1097, 3, 2, 2, 2, 1098, 1099, 3, 2, 2, 2, 1099, 1100,
	3, 2, 2, 2, 1100, 1102, 7, 960, 2, 2, 1101, 1096, 3, 2, 2, 2, 1101, 1102,
	3, 2, 2, 2, 1102, 1103, 3, 2, 2, 2, 1103, 1105, 7, 310, 2, 2, 1104, 1106,
	7, 936, 2, 2, 1105, 1104, 3, 2, 2, 2, 1105, 1106, 3, 2, 2, 2, 1106, 1107,
	3, 2, 2, 2, 1107, 1108, 5, 468, 235, 2, 1108, 45, 3, 2, 2, 2, 1109, 1111,
	7, 31, 2, 2, 1110, 1112, 5, 52, 27, 2, 1111, 1110, 3, 2, 2, 2, 1111, 1112,
	3, 2, 2, 2, 1112, 1113, 3, 2, 2, 2, 1113, 1114, 7, 153, 2, 2, 1114, 1115,
	5, 454, 228, 2, 1115, 1116, 9, 9, 2, 2, 1116, 1117, 9, 10, 2, 2, 1117,
	1118, 7, 103, 2, 2, 1118, 1119, 5, 452, 227, 2, 1119, 1120, 7, 57, 2, 2,
	1120, 1121, 7, 47, 2, 2, 1121, 1124, 7, 474, 2, 2, 1122, 1123, 9, 11, 2,
	2, 1123, 1125, 5, 454, 228, 2, 1124, 1122, 3, 2, 2, 2, 1124, 1125, 3, 2,
	2, 2, 1125, 1126, 3, 2, 2, 2, 1126, 1127, 5, 324, 163, 2, 1127, 47, 3,
	2, 2, 2, 1128, 1131, 7, 31, 2, 2, 1129, 1130, 7, 107, 2, 2, 1130, 1132,
	7, 124, 2, 2, 1131, 1129, 3, 2, 2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 1136,
	3, 2, 2, 2, 1133, 1134, 7, 251, 2, 2, 1134, 1135, 7, 936, 2, 2, 1135, 1137,
	9, 12, 2, 2, 1136, 1133, 3, 2, 2, 2, 1136, 1137, 3, 2, 2, 2, 1137, 1139,
	3, 2, 2, 2, 1138, 1140, 5, 52, 27, 2, 1139, 1138, 3, 2, 2, 2, 1139, 1140,
	3, 2, 2, 2, 1140, 1144, 3, 2, 2, 2, 1141, 1142, 7, 138, 2, 2, 1142, 1143,
	7, 479, 2, 2, 1143, 1145, 9, 13, 2, 2, 1144, 1141, 3, 2, 2, 2, 1144, 1145,
	3, 2, 2, 2, 1145, 1146, 3, 2, 2, 2, 1146, 1147, 7, 537, 2, 2, 1147, 1152,
	5, 454, 228, 2, 1148, 1149, 7, 945, 2, 2, 1149, 1150, 5, 510, 256, 2, 1150,
	1151, 7, 946, 2, 2, 1151, 1153, 3, 2, 2, 2, 1152, 1148, 3, 2, 2, 2, 1152,
	1153, 3, 2, 2, 2, 1153, 1154, 3, 2, 2, 2, 1154, 1155, 7, 12, 2, 2, 1155,
	1162, 5, 170, 86, 2, 1156, 1158, 7, 168, 2, 2, 1157, 1159, 9, 14, 2, 2,
	1158, 1157, 3, 2, 2, 2, 1158, 1159, 3, 2, 2, 2, 1159, 1160, 3, 2, 2, 2,
	1160, 1161, 7, 24, 2, 2, 1161, 1163, 7, 105, 2, 2, 1162, 1156, 3, 2, 2,
	2, 1162, 1163, 3, 2, 2, 2, 1163, 49, 3, 2, 2, 2, 1164, 1166, 7, 38, 2,
	2, 1165, 1164, 3, 2, 2, 2, 1165, 1166, 3, 2, 2, 2, 1166, 1167, 3, 2, 2,
	2, 1167, 1168, 7, 23, 2, 2, 1168, 1170, 7, 134, 2, 2, 1169, 1171, 7, 936,
	2, 2, 1170, 1169, 3, 2, 2, 2, 1170, 1171, 3, 2, 2, 2, 1171, 1172, 3, 2,
	2, 2, 1172, 1182, 5, 464, 233, 2, 1173, 1175, 7, 38, 2, 2, 1174, 1173,
	3, 2, 2, 2, 1174, 1175, 3, 2, 2, 2, 1175, 1176, 3, 2, 2, 2, 1176, 1178,
	7, 25, 2, 2, 1177, 1179, 7, 936, 2, 2, 1178, 1177, 3, 2, 2, 2, 1178, 1179,
	3, 2, 2, 2, 1179, 1180, 3, 2, 2, 2, 1180, 1182, 5, 466, 234, 2, 1181, 1165,
	3, 2, 2, 2, 1181, 1174, 3, 2, 2, 2, 1182, 51, 3, 2, 2, 2, 1183, 1184, 7,
	295, 2, 2, 1184, 1191, 7, 936, 2, 2, 1185, 1192, 5, 460, 231, 2, 1186,
	1189, 7, 33, 2, 2, 1187, 1188, 7, 945, 2, 2, 1188, 1190, 7, 946, 2, 2,
	1189, 1187, 3, 2, 2, 2, 1189, 1190, 3, 2, 2, 2, 1190, 1192, 3, 2, 2, 2,
	1191, 1185, 3, 2, 2, 2, 1191, 1186, 3, 2, 2, 2, 1192, 53, 3, 2, 2, 2, 1193,
	1194, 7, 253, 2, 2, 1194, 1198, 5, 56, 29, 2, 1195, 1197, 5, 58, 30, 2,
	1196, 1195, 3, 2, 2, 2, 1197, 1200, 3, 2, 2, 2, 1198, 1196, 3, 2, 2, 2,
	1198, 1199, 3, 2, 2, 2, 1199, 1228, 3, 2, 2, 2, 1200, 1198, 3, 2, 2, 2,
	1201, 1204, 7, 318, 2, 2, 1202, 1205, 5, 484, 243, 2, 1203, 1205, 5, 546,
	274, 2, 1204, 1202, 3, 2, 2, 2, 1204, 1203, 3, 2, 2, 2, 1205, 1206, 3,
	2, 2, 2, 1206, 1215, 5, 60, 31, 2, 1207, 1208, 7, 502, 2, 2, 1208, 1212,
	5, 56, 29, 2, 1209, 1211, 5, 58, 30, 2, 1210, 1209, 3, 2, 2, 2, 1211, 1214,
	3, 2, 2, 2, 1212, 1210, 3, 2, 2, 2, 1212, 1213, 3, 2, 2, 2, 1213, 1216,
	3, 2, 2, 2, 1214, 1212, 3, 2, 2, 2, 1215, 1207, 3, 2, 2, 2, 1215, 1216,
	3, 2, 2, 2, 1216, 1225, 3, 2, 2, 2, 1217, 1218, 7, 309, 2, 2, 1218, 1222,
	5, 56, 29, 2, 1219, 1221, 5, 58, 30, 2, 1220, 1219, 3, 2, 2, 2, 1221, 1224,
	3, 2, 2, 2, 1222, 1220, 3, 2, 2, 2, 1222, 1223, 3, 2, 2, 2, 1223, 1226,
	3, 2, 2, 2, 1224, 1222, 3, 2, 2, 2, 1225, 1217, 3, 2, 2, 2, 1225, 1226,
	3, 2, 2, 2, 1226, 1228, 3, 2, 2, 2, 1227, 1193, 3, 2, 2, 2, 1227, 1201,
	3, 2, 2, 2, 1228, 55, 3, 2, 2, 2, 1229, 1234, 7, 230, 2, 2, 1230, 1234,
	5, 488, 245, 2, 1231, 1234, 5, 484, 243, 2, 1232, 1234, 5, 546, 274, 2,
	1233, 1229, 3, 2, 2, 2, 1233, 1230, 3, 2, 2, 2, 1233, 1231, 3, 2, 2, 2,
	1233, 1232, 3, 2, 2, 2, 1234, 57, 3, 2, 2, 2, 1235, 1236, 7, 932, 2, 2,
	1236, 1239, 7, 74, 2, 2, 1237, 1240, 5, 484, 243, 2, 1238, 1240, 5, 546,
	274, 2, 1239, 1237, 3, 2, 2, 2, 1239, 1238, 3, 2, 2, 2, 1240, 1241, 3,
	2, 2, 2, 1241, 1242, 5, 60, 31, 2, 1242, 59, 3, 2, 2, 2, 1243, 1257, 5,
	568, 285, 2, 1244, 1257, 7, 187, 2, 2, 1245, 1257, 7, 201, 2, 2, 1246,
	1257, 7, 202, 2, 2, 1247, 1257, 7, 203, 2, 2, 1248, 1257, 7, 204, 2, 2,
	1249, 1257, 7, 205, 2, 2, 1250, 1257, 7, 206, 2, 2, 1251, 1257, 7, 207,
	2, 2, 1252, 1257, 7, 208, 2, 2, 1253, 1257, 7, 209, 2, 2, 1254, 1257, 7,
	210, 2, 2, 1255, 1257, 7, 211, 2, 2, 1256, 1243, 3, 2, 2, 2, 1256, 1244,
	3, 2, 2, 2, 1256, 1245, 3, 2, 2, 2, 1256, 1246, 3, 2, 2, 2, 1256, 1247,
	3, 2, 2, 2, 1256, 1248, 3, 2, 2, 2, 1256, 1249, 3, 2, 2, 2, 1256, 1250,
	3, 2, 2, 2, 1256, 1251, 3, 2, 2, 2, 1256, 1252, 3, 2, 2, 2, 1256, 1253,
	3, 2, 2, 2, 1256, 1254, 3, 2, 2, 2, 1256, 1255, 3, 2, 2, 2, 1257, 61, 3,
	2, 2, 2, 1258, 1259, 7, 163, 2, 2, 1259, 1260, 9, 15, 2, 2, 1260, 63, 3,
	2, 2, 2, 1261, 1263, 7, 362, 2, 2, 1262, 1264, 7, 936, 2, 2, 1263, 1262,
	3, 2, 2, 2, 1263, 1264, 3, 2, 2, 2, 1264, 1265, 3, 2, 2, 2, 1265, 1273,
	5, 486, 244, 2, 1266, 1273, 5, 62, 32, 2, 1267, 1268, 7, 168, 2, 2, 1268,
	1269, 7, 429, 2, 2, 1269, 1273, 5, 478, 240, 2, 1270, 1271, 7, 277, 2,
	2, 1271, 1273, 7, 960, 2, 2, 1272, 1261, 3, 2, 2, 2, 1272, 1266, 3, 2,
	2, 2, 1272, 1267, 3, 2, 2, 2, 1272, 1270, 3, 2, 2, 2, 1273, 65, 3, 2, 2,
	2, 1274, 1275, 9, 16, 2, 2, 1275, 1276, 5, 478, 240, 2, 1276, 1277, 5,
	498, 250, 2, 1277, 67, 3, 2, 2, 2, 1278, 1279, 5, 478, 240, 2, 1279, 1280,
	5, 498, 250, 2, 1280, 69, 3, 2, 2, 2, 1281, 1282, 7, 277, 2, 2, 1282, 1305,
	7, 960, 2, 2, 1283, 1284, 7, 363, 2, 2, 1284, 1305, 7, 138, 2, 2, 1285,
	1287, 7, 100, 2, 2, 1286, 1285, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287,
	1288, 3, 2, 2, 2, 1288, 1305, 7, 43, 2, 2, 1289, 1290, 7, 286, 2, 2, 1290,
	1300, 7, 138, 2, 2, 1291, 1292, 7, 413, 2, 2, 1292, 1300, 7, 138, 2, 2,
	1293, 1294, 7, 118, 2, 2, 1294, 1295, 7, 138, 2, 2, 1295, 1300, 7, 291,
	2, 2, 1296, 1297, 7, 97, 2, 2, 1297, 1298, 7, 138, 2, 2, 1298, 1300, 7,
	291, 2, 2, 1299, 1289, 3, 2, 2, 2, 1299, 1291, 3, 2, 2, 2, 1299, 1293,
	3, 2, 2, 2, 1299, 1296, 3, 2, 2, 2, 1300, 1305, 3, 2, 2, 2, 1301, 1302,
	7, 138, 2, 2, 1302, 1303, 7, 479, 2, 2, 1303, 1305, 9, 13, 2, 2, 1304,
	1281, 3, 2, 2, 2, 1304, 1283, 3, 2, 2, 2, 1304, 1286, 3, 2, 2, 2, 1304,
	1299, 3, 2, 2, 2, 1304, 1301, 3, 2, 2, 2, 1305, 71, 3, 2, 2, 2, 1306, 1307,
	7, 344, 2, 2, 1307, 1321, 7, 960, 2, 2, 1308, 1309, 7, 35, 2, 2, 1309,
	1321, 7, 960, 2, 2, 1310, 1311, 7, 531, 2, 2, 1311, 1321, 7, 960, 2, 2,
	1312, 1313, 7, 433, 2, 2, 1313, 1321, 7, 960, 2, 2, 1314, 1315, 7, 489,
	2, 2, 1315, 1321, 7, 960, 2, 2, 1316, 1317, 7, 426, 2, 2, 1317, 1321, 7,
	960, 2, 2, 1318, 1319, 7, 438, 2, 2, 1319, 1321, 5, 484, 243, 2, 1320,
	1306, 3, 2, 2, 2, 1320, 1308, 3, 2, 2, 2, 1320, 1310, 3, 2, 2, 2, 1320,
	1312, 3, 2, 2, 2, 1320, 1314, 3, 2, 2, 2, 1320, 1316, 3, 2, 2, 2, 1320,
	1318, 3, 2, 2, 2, 1321, 73, 3, 2, 2, 2, 1322, 1323, 7, 945, 2, 2, 1323,
	1328, 5, 76, 39, 2, 1324, 1325, 7, 947, 2, 2, 1325, 1327, 5, 76, 39, 2,
	1326, 1324, 3, 2, 2, 2, 1327, 1330, 3, 2, 2, 2, 1328, 1326, 3, 2, 2, 2,
	1328, 1329, 3, 2, 2, 2, 1329, 1331, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2,
	1331, 1332, 7, 946, 2, 2, 1332, 75, 3, 2, 2, 2, 1333, 1334, 5, 478, 240,
	2, 1334, 1335, 5, 78, 40, 2, 1335, 1339, 3, 2, 2, 2, 1336, 1339, 5, 82,
	42, 2, 1337, 1339, 5, 92, 47, 2, 1338, 1333, 3, 2, 2, 2, 1338, 1336, 3,
	2, 2, 2, 1338, 1337, 3, 2, 2, 2, 1339, 77, 3, 2, 2, 2, 1340, 1344, 5, 498,
	250, 2, 1341, 1343, 5, 80, 41, 2, 1342, 1341, 3, 2, 2, 2, 1343, 1346, 3,
	2, 2, 2, 1344, 1342, 3, 2, 2, 2, 1344, 1345, 3, 2, 2, 2, 1345, 79, 3, 2,
	2, 2, 1346, 1344, 3, 2, 2, 2, 1347, 1367, 5, 494, 248, 2, 1348, 1349, 7,
	38, 2, 2, 1349, 1367, 5, 526, 264, 2, 1350, 1367, 7, 257, 2, 2, 1351, 1353,
	7, 113, 2, 2, 1352, 1351, 3, 2, 2, 2, 1352, 1353, 3, 2, 2, 2, 1353, 1354,
	3, 2, 2, 2, 1354, 1367, 7, 79, 2, 2, 1355, 1357, 7, 157, 2, 2, 1356, 1358,
	7, 79, 2, 2, 1357, 1356, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1367,
	3, 2, 2, 2, 1359, 1360, 7, 277, 2, 2, 1360, 1367, 7, 960, 2, 2, 1361, 1362,
	7, 276, 2, 2, 1362, 1367, 9, 17, 2, 2, 1363, 1364, 7, 508, 2, 2, 1364,
	1367, 9, 18, 2, 2, 1365, 1367, 5, 84, 43, 2, 1366, 1347, 3, 2, 2, 2, 1366,
	1348, 3, 2, 2, 2, 1366, 1350, 3, 2, 2, 2, 1366, 1352, 3, 2, 2, 2, 1366,
	1355, 3, 2, 2, 2, 1366, 1359, 3, 2, 2, 2, 1366, 1361, 3, 2, 2, 2, 1366,
	1363, 3, 2, 2, 2, 1366, 1365, 3, 2, 2, 2, 1367, 81, 3, 2, 2, 2, 1368, 1370,
	7, 28, 2, 2, 1369, 1371, 5, 478, 240, 2, 1370, 1369, 3, 2, 2, 2, 1370,
	1371, 3, 2, 2, 2, 1371, 1373, 3, 2, 2, 2, 1372, 1368, 3, 2, 2, 2, 1372,
	1373, 3, 2, 2, 2, 1373, 1374, 3, 2, 2, 2, 1374, 1375, 7, 113, 2, 2, 1375,
	1377, 7, 79, 2, 2, 1376, 1378, 5, 62, 32, 2, 1377, 1376, 3, 2, 2, 2, 1377,
	1378, 3, 2, 2, 2, 1378, 1379, 3, 2, 2, 2, 1379, 1383, 5, 516, 259, 2, 1380,
	1382, 5, 64, 33, 2, 1381, 1380, 3, 2, 2, 2, 1382, 1385, 3, 2, 2, 2, 1383,
	1381, 3, 2, 2, 2, 1383, 1384, 3, 2, 2, 2, 1384, 1429, 3, 2, 2, 2, 1385,
	1383, 3, 2, 2, 2, 1386, 1388, 7, 28, 2, 2, 1387, 1389, 5, 478, 240, 2,
	1388, 1387, 3, 2, 2, 2, 1388, 1389, 3, 2, 2, 2, 1389, 1391, 3, 2, 2, 2,
	1390, 1386, 3, 2, 2, 2, 1390, 1391, 3, 2, 2, 2, 1391, 1392, 3, 2, 2, 2,
	1392, 1394, 7, 157, 2, 2, 1393, 1395, 9, 19, 2, 2, 1394, 1393, 3, 2, 2,
	2, 1394, 1395, 3, 2, 2, 2, 1395, 1397, 3, 2, 2, 2, 1396, 1398, 5, 478,
	240, 2, 1397, 1396, 3, 2, 2, 2, 1397, 1398, 3, 2, 2, 2, 1398, 1400, 3,
	2, 2, 2, 1399, 1401, 5, 62, 32, 2, 1400, 1399, 3, 2, 2, 2, 1400, 1401,
	3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402, 1406, 5, 516, 259, 2, 1403, 1405,
	5, 64, 33, 2, 1404, 1403, 3, 2, 2, 2, 1405, 1408, 3, 2, 2, 2, 1406, 1404,
	3, 2, 2, 2, 1406, 1407, 3, 2, 2, 2, 1407, 1429, 3, 2, 2, 2, 1408, 1406,
	3, 2, 2, 2, 1409, 1411, 7, 28, 2, 2, 1410, 1412, 5, 478, 240, 2, 1411,
	1410, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412, 1414, 3, 2, 2, 2, 1413,
	1409, 3, 2, 2, 2, 1413, 1414, 3, 2, 2, 2, 1414, 1415, 3, 2, 2, 2, 1415,
	1416, 7, 59, 2, 2, 1416, 1418, 7, 79, 2, 2, 1417, 1419, 5, 478, 240, 2,
	1418, 1417, 3, 2, 2, 2, 1418, 1419, 3, 2, 2, 2, 1419, 1420, 3, 2, 2, 2,
	1420, 1421, 5, 516, 259, 2, 1421, 1422, 5, 84, 43, 2, 1422, 1429, 3, 2,
	2, 2, 1423, 1424, 7, 24, 2, 2, 1424, 1425, 7, 945, 2, 2, 1425, 1426, 5,
	546, 274, 2, 1426, 1427, 7, 946, 2, 2, 1427, 1429, 3, 2, 2, 2, 1428, 1372,
	3, 2, 2, 2, 1428, 1390, 3, 2, 2, 2, 1428, 1413, 3, 2, 2, 2, 1428, 1423,
	3, 2, 2, 2, 1429, 83, 3, 2, 2, 2, 1430, 1431, 7, 119, 2, 2, 1431, 1432,
	5, 452, 227, 2, 1432, 1435, 5, 516, 259, 2, 1433, 1434, 7, 95, 2, 2, 1434,
	1436, 9, 20, 2, 2, 1435, 1433, 3, 2, 2, 2, 1435, 1436, 3, 2, 2, 2, 1436,
	1439, 3, 2, 2, 2, 1437, 1440, 5, 86, 44, 2, 1438, 1440, 5, 88, 45, 2, 1439,
	1437, 3, 2, 2, 2, 1439, 1438, 3, 2, 2, 2, 1439, 1440, 3, 2, 2, 2, 1440,
	85, 3, 2, 2, 2, 1441, 1442, 7, 103, 2, 2, 1442, 1443, 7, 40, 2, 2, 1443,
	1447, 5, 90, 46, 2, 1444, 1445, 7, 103, 2, 2, 1445, 1446, 7, 160, 2, 2,
	1446, 1448, 5, 90, 46, 2, 1447, 1444, 3, 2, 2, 2, 1447, 1448, 3, 2, 2,
	2, 1448, 87, 3, 2, 2, 2, 1449, 1450, 7, 103, 2, 2, 1450, 1451, 7, 160,
	2, 2, 1451, 1455, 5, 90, 46, 2, 1452, 1453, 7, 103, 2, 2, 1453, 1454, 7,
	40, 2, 2, 1454, 1456, 5, 90, 46, 2, 1455, 1452, 3, 2, 2, 2, 1455, 1456,
	3, 2, 2, 2, 1456, 89, 3, 2, 2, 2, 1457, 1464, 7, 126, 2, 2, 1458, 1464,
	7, 19, 2, 2, 1459, 1460, 7, 134, 2, 2, 1460, 1464, 7, 102, 2, 2, 1461,
	1462, 7, 413, 2, 2, 1462, 1464, 7, 248, 2, 2, 1463, 1457, 3, 2, 2, 2, 1463,
	1458, 3, 2, 2, 2, 1463, 1459, 3, 2, 2, 2, 1463, 1461, 3, 2, 2, 2, 1464,
	91, 3, 2, 2, 2, 1465, 1467, 9, 19, 2, 2, 1466, 1468, 5, 478, 240, 2, 1467,
	1466, 3, 2, 2, 2, 1467, 1468, 3, 2, 2, 2, 1468, 1470, 3, 2, 2, 2, 1469,
	1471, 5, 62, 32, 2, 1470, 1469, 3, 2, 2, 2, 1470, 1471, 3, 2, 2, 2, 1471,
	1472, 3, 2, 2, 2, 1472, 1476, 5, 516, 259, 2, 1473, 1475, 5, 64, 33, 2,
	1474, 1473, 3, 2, 2, 2, 1475, 1478, 3, 2, 2, 2, 1476, 1474, 3, 2, 2, 2,
	1476, 1477, 3, 2, 2, 2, 1477, 1494, 3, 2, 2, 2, 1478, 1476, 3, 2, 2, 2,
	1479, 1481, 9, 21, 2, 2, 1480, 1482, 9, 19, 2, 2, 1481, 1480, 3, 2, 2,
	2, 1481, 1482, 3, 2, 2, 2, 1482, 1484, 3, 2, 2, 2, 1483, 1485, 5, 478,
	240, 2, 1484, 1483, 3, 2, 2, 2, 1484, 1485, 3, 2, 2, 2, 1485, 1486, 3,
	2, 2, 2, 1486, 1490, 5, 516, 259, 2, 1487, 1489, 5, 64, 33, 2, 1488, 1487,
	3, 2, 2, 2, 1489, 1492, 3, 2, 2, 2, 1490, 1488, 3, 2, 2, 2, 1490, 1491,
	3, 2, 2, 2, 1491, 1494, 3, 2, 2, 2, 1492, 1490, 3, 2, 2, 2, 1493, 1465,
	3, 2, 2, 2, 1493, 1479, 3, 2, 2, 2, 1494, 93, 3, 2, 2, 2, 1495, 1497, 7,
	310, 2, 2, 1496, 1498, 7, 936, 2, 2, 1497, 1496, 3, 2, 2, 2, 1497, 1498,
	3, 2, 2, 2, 1498, 1499, 3, 2, 2, 2, 1499, 1644, 5, 468, 235, 2, 1500, 1502,
	7, 257, 2, 2, 1501, 1503, 7, 936, 2, 2, 1502, 1501, 3, 2, 2, 2, 1502, 1503,
	3, 2, 2, 2, 1503, 1504, 3, 2, 2, 2, 1504, 1644, 5, 484, 243, 2, 1505, 1507,
	7, 258, 2, 2, 1506, 1508, 7, 936, 2, 2, 1507, 1506, 3, 2, 2, 2, 1507, 1508,
	3, 2, 2, 2, 1508, 1509, 3, 2, 2, 2, 1509, 1644, 5, 484, 243, 2, 1510, 1512,
	7, 38, 2, 2, 1511, 1510, 3, 2, 2, 2, 1511, 1512, 3, 2, 2, 2, 1512, 1516,
	3, 2, 2, 2, 1513, 1514, 7, 23, 2, 2, 1514, 1517, 7, 134, 2, 2, 1515, 1517,
	7, 658, 2, 2, 1516, 1513, 3, 2, 2, 2, 1516, 1515, 3, 2, 2, 2, 1517, 1519,
	3, 2, 2, 2, 1518, 1520, 7, 936, 2, 2, 1519, 1518, 3, 2, 2, 2, 1519, 1520,
	3, 2, 2, 2, 1520, 1521, 3, 2, 2, 2, 1521, 1644, 5, 464, 233, 2, 1522, 1524,
	7, 269, 2, 2, 1523, 1525, 7, 936, 2, 2, 1524, 1523, 3, 2, 2, 2, 1524, 1525,
	3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526, 1644, 9, 22, 2, 2, 1527, 1529,
	7, 38, 2, 2, 1528, 1527, 3, 2, 2, 2, 1528, 1529, 3, 2, 2, 2, 1529, 1530,
	3, 2, 2, 2, 1530, 1532, 7, 25, 2, 2, 1531, 1533, 7, 936, 2, 2, 1532, 1531,
	3, 2, 2, 2, 1532, 1533, 3, 2, 2, 2, 1533, 1534, 3, 2, 2, 2, 1534, 1644,
	5, 466, 234, 2, 1535, 1537, 7, 277, 2, 2, 1536, 1538, 7, 936, 2, 2, 1537,
	1536, 3, 2, 2, 2, 1537, 1538, 3, 2, 2, 2, 1538, 1539, 3, 2, 2, 2, 1539,
	1644, 7, 960, 2, 2, 1540, 1542, 7, 282, 2, 2, 1541, 1543, 7, 936, 2, 2,
	1542, 1541, 3, 2, 2, 2, 1542, 1543, 3, 2, 2, 2, 1543, 1544, 3, 2, 2, 2,
	1544, 1644, 7, 960, 2, 2, 1545, 1547, 7, 284, 2, 2, 1546, 1548, 7, 936,
	2, 2, 1547, 1546, 3, 2, 2, 2, 1547, 1548, 3, 2, 2, 2, 1548, 1549, 3, 2,
	2, 2, 1549, 1644, 7, 960, 2, 2, 1550, 1551, 7, 291, 2, 2, 1551, 1553, 7,
	298, 2, 2, 1552, 1554, 7, 936, 2, 2, 1553, 1552, 3, 2, 2, 2, 1553, 1554,
	3, 2, 2, 2, 1554, 1555, 3, 2, 2, 2, 1555, 1644, 7, 960, 2, 2, 1556, 1558,
	7, 296, 2, 2, 1557, 1559, 7, 936, 2, 2, 1558, 1557, 3, 2, 2, 2, 1558, 1559,
	3, 2, 2, 2, 1559, 1560, 3, 2, 2, 2, 1560, 1644, 9, 22, 2, 2, 1561, 1563,
	7, 307, 2, 2, 1562, 1564, 7, 936, 2, 2, 1563, 1562, 3, 2, 2, 2, 1563, 1564,
	3, 2, 2, 2, 1564, 1565, 3, 2, 2, 2, 1565, 1644, 7, 960, 2, 2, 1566, 1567,
	7, 69, 2, 2, 1567, 1569, 7, 298, 2, 2, 1568, 1570, 7, 936, 2, 2, 1569,
	1568, 3, 2, 2, 2, 1569, 1570, 3, 2, 2, 2, 1570, 1571, 3, 2, 2, 2, 1571,
	1644, 7, 960, 2, 2, 1572, 1574, 7, 352, 2, 2, 1573, 1575, 7, 936, 2, 2,
	1574, 1573, 3, 2, 2, 2, 1574, 1575, 3, 2, 2, 2, 1575, 1576, 3, 2, 2, 2,
	1576, 1644, 9, 23, 2, 2, 1577, 1579, 7, 362, 2, 2, 1578, 1580, 7, 936,
	2, 2, 1579, 1578, 3, 2, 2, 2, 1579, 1580, 3, 2, 2, 2, 1580, 1581, 3, 2,
	2, 2, 1581, 1644, 5, 486, 244, 2, 1582, 1584, 7, 395, 2, 2, 1583, 1585,
	7, 936, 2, 2, 1584, 1583, 3, 2, 2, 2, 1584, 1585, 3, 2, 2, 2, 1585, 1586,
	3, 2, 2, 2, 1586, 1644, 5, 484, 243, 2, 1587, 1589, 7, 403, 2, 2, 1588,
	1590, 7, 936, 2, 2, 1589, 1588, 3, 2, 2, 2, 1589, 1590, 3, 2, 2, 2, 1590,
	1591, 3, 2, 2, 2, 1591, 1644, 5, 484, 243, 2, 1592, 1594, 7, 427, 2, 2,
	1593, 1595, 7, 936, 2, 2, 1594, 1593, 3, 2, 2, 2, 1594, 1595, 3, 2, 2,
	2, 1595, 1596, 3, 2, 2, 2, 1596, 1644, 9, 24, 2, 2, 1597, 1599, 7, 433,
	2, 2, 1598, 1600, 7, 936, 2, 2, 1599, 1598, 3, 2, 2, 2, 1599, 1600, 3,
	2, 2, 2, 1600, 1601, 3, 2, 2, 2, 1601, 1644, 7, 960, 2, 2, 1602, 1604,
	7, 476, 2, 2, 1603, 1605, 7, 936, 2, 2, 1604, 1603, 3, 2, 2, 2, 1604, 1605,
	3, 2, 2, 2, 1605, 1606, 3, 2, 2, 2, 1606, 1644, 9, 25, 2, 2, 1607, 1609,
	7, 503, 2, 2, 1608, 1610, 7, 936, 2, 2, 1609, 1608, 3, 2, 2, 2, 1609, 1610,
	3, 2, 2, 2, 1610, 1611, 3, 2, 2, 2, 1611, 1644, 9, 24, 2, 2, 1612, 1614,
	7, 504, 2, 2, 1613, 1615, 7, 936, 2, 2, 1614, 1613, 3, 2, 2, 2, 1614, 1615,
	3, 2, 2, 2, 1615, 1616, 3, 2, 2, 2, 1616, 1644, 9, 24, 2, 2, 1617, 1619,
	7, 505, 2, 2, 1618, 1620, 7, 936, 2, 2, 1619, 1618, 3, 2, 2, 2, 1619, 1620,
	3, 2, 2, 2, 1620, 1621, 3, 2, 2, 2, 1621, 1644, 5, 484, 243, 2, 1622, 1623,
	7, 516, 2, 2, 1623, 1626, 5, 478, 240, 2, 1624, 1625, 7, 508, 2, 2, 1625,
	1627, 9, 18, 2, 2, 1626, 1624, 3, 2, 2, 2, 1626, 1627, 3, 2, 2, 2, 1627,
	1644, 3, 2, 2, 2, 1628, 1630, 7, 156, 2, 2, 1629, 1631, 7, 936, 2, 2, 1630,
	1629, 3, 2, 2, 2, 1630, 1631, 3, 2, 2, 2, 1631, 1632, 3, 2, 2, 2, 1632,
	1633, 7, 945, 2, 2, 1633, 1638, 5, 452, 227, 2, 1634, 1635, 7, 947, 2,
	2, 1635, 1637, 5, 452, 227, 2, 1636, 1634, 3, 2, 2, 2, 1637, 1640, 3, 2,
	2, 2, 1638, 1636, 3, 2, 2, 2, 1638, 1639, 3, 2, 2, 2, 1639, 1641, 3, 2,
	2, 2, 1640, 1638, 3, 2, 2, 2, 1641, 1642, 7, 946, 2, 2, 1642, 1644, 3,
	2, 2, 2, 1643, 1495, 3, 2, 2, 2, 1643, 1500, 3, 2, 2, 2, 1643, 1505, 3,
	2, 2, 2, 1643, 1511, 3, 2, 2, 2, 1643, 1522, 3, 2, 2, 2, 1643, 1528, 3,
	2, 2, 2, 1643, 1535, 3, 2, 2, 2, 1643, 1540, 3, 2, 2, 2, 1643, 1545, 3,
	2, 2, 2, 1643, 1550, 3, 2, 2, 2, 1643, 1556, 3, 2, 2, 2, 1643, 1561, 3,
	2, 2, 2, 1643, 1566, 3, 2, 2, 2, 1643, 1572, 3, 2, 2, 2, 1643, 1577, 3,
	2, 2, 2, 1643, 1582, 3, 2, 2, 2, 1643, 1587, 3, 2, 2, 2, 1643, 1592, 3,
	2, 2, 2, 1643, 1597, 3, 2, 2, 2, 1643, 1602, 3, 2, 2, 2, 1643, 1607, 3,
	2, 2, 2, 1643, 1612, 3, 2, 2, 2, 1643, 1617, 3, 2, 2, 2, 1643, 1622, 3,
	2, 2, 2, 1643, 1628, 3, 2, 2, 2, 1644, 95, 3, 2, 2, 2, 1645, 1646, 7, 112,
	2, 2, 1646, 1647, 7, 17, 2, 2, 1647, 1650, 5, 98, 50, 2, 1648, 1649, 7,
	432, 2, 2, 1649, 1651, 5, 484, 243, 2, 1650, 1648, 3, 2, 2, 2, 1650, 1651,
	3, 2, 2, 2, 1651, 1659, 3, 2, 2, 2, 1652, 1653, 7, 511, 2, 2, 1653, 1654,
	7, 17, 2, 2, 1654, 1657, 5, 100, 51, 2, 1655, 1656, 7, 512, 2, 2, 1656,
	1658, 5, 484, 243, 2, 1657, 1655, 3, 2, 2, 2, 1657, 1658, 3, 2, 2, 2, 1658,
	1660, 3, 2, 2, 2, 1659, 1652, 3, 2, 2, 2, 1659, 1660, 3, 2, 2, 2, 1660,
	1672, 3, 2, 2, 2, 1661, 1662, 7, 945, 2, 2, 1662, 1667, 5, 102, 52, 2,
	1663, 1664, 7, 947, 2, 2, 1664, 1666, 5, 102, 52, 2, 1665, 1663, 3, 2,
	2, 2, 1666, 1669, 3, 2, 2, 2, 1667, 1665, 3, 2, 2, 2, 1667, 1668, 3, 2,
	2, 2, 1668, 1670, 3, 2, 2, 2, 1669, 1667, 3, 2, 2, 2, 1670, 1671, 7, 946,
	2, 2, 1671, 1673, 3, 2, 2, 2, 1672, 1661, 3, 2, 2, 2, 1672, 1673, 3, 2,
	2, 2, 1673, 97, 3, 2, 2, 2, 1674, 1688, 5, 100, 51, 2, 1675, 1685, 9, 26,
	2, 2, 1676, 1677, 7, 945, 2, 2, 1677, 1678, 5, 546, 274, 2, 1678, 1679,
	7, 946, 2, 2, 1679, 1686, 3, 2, 2, 2, 1680, 1681, 7, 275, 2, 2, 1681, 1682,
	7, 945, 2, 2, 1682, 1683, 5, 510, 256, 2, 1683, 1684, 7, 946, 2, 2, 1684,
	1686, 3, 2, 2, 2, 1685, 1676, 3, 2, 2, 2, 1685, 1680, 3, 2, 2, 2, 1686,
	1688, 3, 2, 2, 2, 1687, 1674, 3, 2, 2, 2, 1687, 1675, 3, 2, 2, 2, 1688,
	99, 3, 2, 2, 2, 1689, 1691, 7, 87, 2, 2, 1690, 1689, 3, 2, 2, 2, 1690,
	1691, 3, 2, 2, 2, 1691, 1692, 3, 2, 2, 2, 1692, 1693, 7, 342, 2, 2, 1693,
	1694, 7, 945, 2, 2, 1694, 1695, 5, 546, 274, 2, 1695, 1696, 7, 946, 2,
	2, 1696, 1711, 3, 2, 2, 2, 1697, 1699, 7, 87, 2, 2, 1698, 1697, 3, 2, 2,
	2, 1698, 1699, 3, 2, 2, 2, 1699, 1700, 3, 2, 2, 2, 1700, 1704, 7, 79, 2,
	2, 1701, 1702, 7, 251, 2, 2, 1702, 1703, 7, 936, 2, 2, 1703, 1705, 9, 27,
	2, 2, 1704, 1701, 3, 2, 2, 2, 1704, 1705, 3, 2, 2, 2, 1705, 1706, 3, 2,
	2, 2, 1706, 1707, 7, 945, 2, 2, 1707, 1708, 5, 510, 256, 2, 1708, 1709,
	7, 946, 2, 2, 1709, 1711, 3, 2, 2, 2, 1710, 1690, 3, 2, 2, 2, 1710, 1698,
	3, 2, 2, 2, 1711, 101, 3, 2, 2, 2, 1712, 1713, 7, 112, 2, 2, 1713, 1734,
	5, 478, 240, 2, 1714, 1732, 7, 164, 2, 2, 1715, 1716, 7, 366, 2, 2, 1716,
	1725, 7, 519, 2, 2, 1717, 1720, 7, 945, 2, 2, 1718, 1721, 5, 546, 274,
	2, 1719, 1721, 5, 520, 261, 2, 1720, 1718, 3, 2, 2, 2, 1720, 1719, 3, 2,
	2, 2, 1721, 1722, 3, 2, 2, 2, 1722, 1723, 7, 946, 2, 2, 1723, 1726, 3,
	2, 2, 2, 1724, 1726, 7, 96, 2, 2, 1725, 1717, 3, 2, 2, 2, 1725, 1724, 3,
	2, 2, 2, 1726, 1733, 3, 2, 2, 2, 1727, 1728, 7, 68, 2, 2, 1728, 1729, 7,
	945, 2, 2, 1729, 1730, 5, 520, 261, 2, 1730, 1731, 7, 946, 2, 2, 1731,
	1733, 3, 2, 2, 2, 1732, 1715, 3, 2, 2, 2, 1732, 1727, 3, 2, 2, 2, 1733,
	1735, 3, 2, 2, 2, 1734, 1714, 3, 2, 2, 2, 1734, 1735, 3, 2, 2, 2, 1735,
	1744, 3, 2, 2, 2, 1736, 1738, 7, 508, 2, 2, 1737, 1736, 3, 2, 2, 2, 1737,
	1738, 3, 2, 2, 2, 1738, 1739, 3, 2, 2, 2, 1739, 1741, 7, 310, 2, 2, 1740,
	1742, 7, 936, 2, 2, 1741, 1740, 3, 2, 2, 2, 1741, 1742, 3, 2, 2, 2, 1742,
	1743, 3, 2, 2, 2, 1743, 1745, 5, 468, 235, 2, 1744, 1737, 3, 2, 2, 2, 1744,
	1745, 3, 2, 2, 2, 1745, 1751, 3, 2, 2, 2, 1746, 1748, 7, 277, 2, 2, 1747,
	1749, 7, 936, 2, 2, 1748, 1747, 3, 2, 2, 2, 1748, 1749, 3, 2, 2, 2, 1749,
	1750, 3, 2, 2, 2, 1750, 1752, 7, 960, 2, 2, 1751, 1746, 3, 2, 2, 2, 1751,
	1752, 3, 2, 2, 2, 1752, 1759, 3, 2, 2, 2, 1753, 1754, 7, 291, 2, 2, 1754,
	1756, 7, 298, 2, 2, 1755, 1757, 7, 936, 2, 2, 1756, 1755, 3, 2, 2, 2, 1756,
	1757, 3, 2, 2, 2, 1757, 1758, 3, 2, 2, 2, 1758, 1760, 7, 960, 2, 2, 1759,
	1753, 3, 2, 2, 2, 1759, 1760, 3, 2, 2, 2, 1760, 1767, 3, 2, 2, 2, 1761,
	1762, 7, 69, 2, 2, 1762, 1764, 7, 298, 2, 2, 1763, 1765, 7, 936, 2, 2,
	1764, 1763, 3, 2, 2, 2, 1764, 1765, 3, 2, 2, 2, 1765, 1766, 3, 2, 2, 2,
	1766, 1768, 7, 960, 2, 2, 1767, 1761, 3, 2, 2, 2, 1767, 1768, 3, 2, 2,
	2, 1768, 1774, 3, 2, 2, 2, 1769, 1771, 7, 395, 2, 2, 1770, 1772, 7, 936,
	2, 2, 1771, 1770, 3, 2, 2, 2, 1771, 1772, 3, 2, 2, 2, 1772, 1773, 3, 2,
	2, 2, 1773, 1775, 5, 484, 243, 2, 1774, 1769, 3, 2, 2, 2, 1774, 1775, 3,
	2, 2, 2, 1775, 1781, 3, 2, 2, 2, 1776, 1778, 7, 403, 2, 2, 1777, 1779,
	7, 936, 2, 2, 1778, 1777, 3, 2, 2, 2, 1778, 1779, 3, 2, 2, 2, 1779, 1780,
	3, 2, 2, 2, 1780, 1782, 5, 484, 243, 2, 1781, 1776, 3, 2, 2, 2, 1781, 1782,
	3, 2, 2, 2, 1782, 1788, 3, 2, 2, 2, 1783, 1785, 7, 516, 2, 2, 1784, 1786,
	7, 936, 2, 2, 1785, 1784, 3, 2, 2, 2, 1785, 1786, 3, 2, 2, 2, 1786, 1787,
	3, 2, 2, 2, 1787, 1789, 5, 478, 240, 2, 1788, 1783, 3, 2, 2, 2, 1788, 1789,
	3, 2, 2, 2, 1789, 1795, 3, 2, 2, 2, 1790, 1792, 7, 414, 2, 2, 1791, 1793,
	7, 936, 2, 2, 1792, 1791, 3, 2, 2, 2, 1792, 1793, 3, 2, 2, 2, 1793, 1794,
	3, 2, 2, 2, 1794, 1796, 5, 478, 240, 2, 1795, 1790, 3, 2, 2, 2, 1795, 1796,
	3, 2, 2, 2, 1796, 1805, 3, 2, 2, 2, 1797, 1802, 5, 104, 53, 2, 1798, 1799,
	7, 947, 2, 2, 1799, 1801, 5, 104, 53, 2, 1800, 1798, 3, 2, 2, 2, 1801,
	1804, 3, 2, 2, 2, 1802, 1800, 3, 2, 2, 2, 1802, 1803, 3, 2, 2, 2, 1803,
	1806, 3, 2, 2, 2, 1804, 1802, 3, 2, 2, 2, 1805, 1797, 3, 2, 2, 2, 1805,
	1806, 3, 2, 2, 2, 1806, 103, 3, 2, 2, 2, 1807, 1808, 7, 511, 2, 2, 1808,
	1817, 5, 478, 240, 2, 1809, 1811, 7, 508, 2, 2, 1810, 1809, 3, 2, 2, 2,
	1810, 1811, 3, 2, 2, 2, 1811, 1812, 3, 2, 2, 2, 1812, 1814, 7, 310, 2,
	2, 1813, 1815, 7, 936, 2, 2, 1814, 1813, 3, 2, 2, 2, 1814, 1815, 3, 2,
	2, 2, 1815, 1816, 3, 2, 2, 2, 1816, 1818, 5, 468, 235, 2, 1817, 1810, 3,
	2, 2, 2, 1817, 1818, 3, 2, 2, 2, 1818, 1824, 3, 2, 2, 2, 1819, 1821, 7,
	277, 2, 2, 1820, 1822, 7, 936, 2, 2, 1821, 1820, 3, 2, 2, 2, 1821, 1822,
	3, 2, 2, 2, 1822, 1823, 3, 2, 2, 2, 1823, 1825, 7, 960, 2, 2, 1824, 1819,
	3, 2, 2, 2, 1824, 1825, 3, 2, 2, 2, 1825, 1832, 3, 2, 2, 2, 1826, 1827,
	7, 291, 2, 2, 1827, 1829, 7, 298, 2, 2, 1828, 1830, 7, 936, 2, 2, 1829,
	1828, 3, 2, 2, 2, 1829, 1830, 3, 2, 2, 2, 1830, 1831, 3, 2, 2, 2, 1831,
	1833, 7, 960, 2, 2, 1832, 1826, 3, 2, 2, 2, 1832, 1833, 3, 2, 2, 2, 1833,
	1840, 3, 2, 2, 2, 1834, 1835, 7, 69, 2, 2, 1835, 1837, 7, 298, 2, 2, 1836,
	1838, 7, 936, 2, 2, 1837, 1836, 3, 2, 2, 2, 1837, 1838, 3, 2, 2, 2, 1838,
	1839, 3, 2, 2, 2, 1839, 1841, 7, 960, 2, 2, 1840, 1834, 3, 2, 2, 2, 1840,
	1841, 3, 2, 2, 2, 1841, 1847, 3, 2, 2, 2, 1842, 1844, 7, 395, 2, 2, 1843,
	1845, 7, 936, 2, 2, 1844, 1843, 3, 2, 2, 2, 1844, 1845, 3, 2, 2, 2, 1845,
	1846, 3, 2, 2, 2, 1846, 1848, 5, 484, 243, 2, 1847, 1842, 3, 2, 2, 2, 1847,
	1848, 3, 2, 2, 2, 1848, 1854, 3, 2, 2, 2, 1849, 1851, 7, 403, 2, 2, 1850,
	1852, 7, 936, 2, 2, 1851, 1850, 3, 2, 2, 2, 1851, 1852, 3, 2, 2, 2, 1852,
	1853, 3, 2, 2, 2, 1853, 1855, 5, 484, 243, 2, 1854, 1849, 3, 2, 2, 2, 1854,
	1855, 3, 2, 2, 2, 1855, 1861, 3, 2, 2, 2, 1856, 1858, 7, 516, 2, 2, 1857,
	1859, 7, 936, 2, 2, 1858, 1857, 3, 2, 2, 2, 1858, 1859, 3, 2, 2, 2, 1859,
	1860, 3, 2, 2, 2, 1860, 1862, 5, 478, 240, 2, 1861, 1856, 3, 2, 2, 2, 1861,
	1862, 3, 2, 2, 2, 1862, 1868, 3, 2, 2, 2, 1863, 1865, 7, 414, 2, 2, 1864,
	1866, 7, 936, 2, 2, 1865, 1864, 3, 2, 2, 2, 1865, 1866, 3, 2, 2, 2, 1866,
	1867, 3, 2, 2, 2, 1867, 1869, 5, 478, 240, 2, 1868, 1863, 3, 2, 2, 2, 1868,
	1869, 3, 2, 2, 2, 1869, 105, 3, 2, 2, 2, 1870, 1871, 7, 9, 2, 2, 1871,
	1873, 9, 2, 2, 2, 1872, 1874, 5, 478, 240, 2, 1873, 1872, 3, 2, 2, 2, 1873,
	1874, 3, 2, 2, 2, 1874, 1876, 3, 2, 2, 2, 1875, 1877, 5, 50, 26, 2, 1876,
	1875, 3, 2, 2, 2, 1877, 1878, 3, 2, 2, 2, 1878, 1876, 3, 2, 2, 2, 1878,
	1879, 3, 2, 2, 2, 1879, 1889, 3, 2, 2, 2, 1880, 1881, 7, 9, 2, 2, 1881,
	1882, 9, 2, 2, 2, 1882, 1883, 5, 478, 240, 2, 1883, 1884, 7, 530, 2, 2,
	1884, 1885, 7, 291, 2, 2, 1885, 1886, 7, 298, 2, 2, 1886, 1887, 7, 408,
	2, 2, 1887, 1889, 3, 2, 2, 2, 1888, 1870, 3, 2, 2, 2, 1888, 1880, 3, 2,
	2, 2, 1889, 107, 3, 2, 2, 2, 1890, 1892, 7, 9, 2, 2, 1891, 1893, 5, 52,
	27, 2, 1892, 1891, 3, 2, 2, 2, 1892, 1893, 3, 2, 2, 2, 1893, 1894, 3, 2,
	2, 2, 1894, 1895, 7, 316, 2, 2, 1895, 1899, 5, 454, 228, 2, 1896, 1897,
	7, 103, 2, 2, 1897, 1898, 7, 478, 2, 2, 1898, 1900, 5, 54, 28, 2, 1899,
	1896, 3, 2, 2, 2, 1899, 1900, 3, 2, 2, 2, 1900, 1907, 3, 2, 2, 2, 1901,
	1902, 7, 103, 2, 2, 1902, 1904, 7, 280, 2, 2, 1903, 1905, 7, 100, 2, 2,
	1904, 1903, 3, 2, 2, 2, 1904, 1905, 3, 2, 2, 2, 1905, 1906, 3, 2, 2, 2,
	1906, 1908, 7, 441, 2, 2, 1907, 1901, 3, 2, 2, 2, 1907, 1908, 3, 2, 2,
	2, 1908, 1912, 3, 2, 2, 2, 1909, 1910, 7, 122, 2, 2, 1910, 1911, 7, 151,
	2, 2, 1911, 1913, 5, 454, 228, 2, 1912, 1909, 3, 2, 2, 2, 1912, 1913, 3,
	2, 2, 2, 1913, 1919, 3, 2, 2, 2, 1914, 1920, 7, 306, 2, 2, 1915, 1920,
	7, 299, 2, 2, 1916, 1917, 7, 299, 2, 2, 1917, 1918, 7, 103, 2, 2, 1918,
	1920, 7, 486, 2, 2, 1919, 1914, 3, 2, 2, 2, 1919, 1915, 3, 2, 2, 2, 1919,
	1916, 3, 2, 2, 2, 1919, 1920, 3, 2, 2, 2, 1920, 1923, 3, 2, 2, 2, 1921,
	1922, 7, 277, 2, 2, 1922, 1924, 7, 960, 2, 2, 1923, 1921, 3, 2, 2, 2, 1923,
	1924, 3, 2, 2, 2, 1924, 1927, 3, 2, 2, 2, 1925, 1926, 7, 302, 2, 2, 1926,
	1928, 5, 324, 163, 2, 1927, 1925, 3, 2, 2, 2, 1927, 1928, 3, 2, 2, 2, 1928,
	109, 3, 2, 2, 2, 1929, 1930, 7, 9, 2, 2, 1930, 1931, 7, 336, 2, 2, 1931,
	1935, 5, 454, 228, 2, 1932, 1934, 5, 70, 36, 2, 1933, 1932, 3, 2, 2, 2,
	1934, 1937, 3, 2, 2, 2, 1935, 1933, 3, 2, 2, 2, 1935, 1936, 3, 2, 2, 2,
	1936, 111, 3, 2, 2, 2, 1937, 1935, 3, 2, 2, 2, 1938, 1939, 7, 9, 2, 2,
	1939, 1940, 7, 354, 2, 2, 1940, 1941, 7, 473, 2, 2, 1941, 1942, 7, 612,
	2, 2, 1942, 1943, 7, 372, 2, 2, 1943, 1944, 7, 79, 2, 2, 1944, 113, 3,
	2, 2, 2, 1945, 1946, 7, 9, 2, 2, 1946, 1947, 7, 370, 2, 2, 1947, 1948,
	7, 63, 2, 2, 1948, 1949, 5, 478, 240, 2, 1949, 1950, 7, 7, 2, 2, 1950,
	1951, 7, 525, 2, 2, 1951, 1957, 7, 960, 2, 2, 1952, 1954, 7, 350, 2, 2,
	1953, 1955, 7, 936, 2, 2, 1954, 1953, 3, 2, 2, 2, 1954, 1955, 3, 2, 2,
	2, 1955, 1956, 3, 2, 2, 2, 1956, 1958, 5, 486, 244, 2, 1957, 1952, 3, 2,
	2, 2, 1957, 1958, 3, 2, 2, 2, 1958, 1960, 3, 2, 2, 2, 1959, 1961, 7, 538,
	2, 2, 1960, 1959, 3, 2, 2, 2, 1960, 1961, 3, 2, 2, 2, 1961, 1962, 3, 2,
	2, 2, 1962, 1964, 7, 310, 2, 2, 1963, 1965, 7, 936, 2, 2, 1964, 1963, 3,
	2, 2, 2, 1964, 1965, 3, 2, 2, 2, 1965, 1966, 3, 2, 2, 2, 1966, 1967, 5,
	468, 235, 2, 1967, 115, 3, 2, 2, 2, 1968, 1969, 7, 9, 2, 2, 1969, 1970,
	7, 114, 2, 2, 1970, 1974, 5, 454, 228, 2, 1971, 1973, 5, 70, 36, 2, 1972,
	1971, 3, 2, 2, 2, 1973, 1976, 3, 2, 2, 2, 1974, 1972, 3, 2, 2, 2, 1974,
	1975, 3, 2, 2, 2, 1975, 117, 3, 2, 2, 2, 1976, 1974, 3, 2, 2, 2, 1977,
	1978, 7, 9, 2, 2, 1978, 1979, 7, 480, 2, 2, 1979, 1980, 5, 478, 240, 2,
	1980, 1981, 7, 425, 2, 2, 1981, 1982, 7, 945, 2, 2, 1982, 1987, 5, 72,
	37, 2, 1983, 1984, 7, 947, 2, 2, 1984, 1986, 5, 72, 37, 2, 1985, 1983,
	3, 2, 2, 2, 1986, 1989, 3, 2, 2, 2, 1987, 1985, 3, 2, 2, 2, 1987, 1988,
	3, 2, 2, 2, 1988, 1990, 3, 2, 2, 2, 1989, 1987, 3, 2, 2, 2, 1990, 1991,
	7, 946, 2, 2, 1991, 119, 3, 2, 2, 2, 1992, 1994, 7, 9, 2, 2, 1993, 1995,
	9, 3, 2, 2, 1994, 1993, 3, 2, 2, 2, 1994, 1995, 3, 2, 2, 2, 1995, 1997,
	3, 2, 2, 2, 1996, 1998, 7, 67, 2, 2, 1997, 1996, 3, 2, 2, 2, 1997, 1998,
	3, 2, 2, 2, 1998, 1999, 3, 2, 2, 2, 1999, 2000, 7, 148, 2, 2, 2000, 2001,
	5, 452, 227, 2, 2001, 2006, 5, 126, 64, 2, 2002, 2003, 7, 947, 2, 2, 2003,
	2005, 5, 126, 64, 2, 2004, 2002, 3, 2, 2, 2, 2005, 2008, 3, 2, 2, 2, 2006,
	2004, 3, 2, 2, 2, 2006, 2007, 3, 2, 2, 2, 2007, 2012, 3, 2, 2, 2, 2008,
	2006, 3, 2, 2, 2, 2009, 2011, 5, 96, 49, 2, 2010, 2009, 3, 2, 2, 2, 2011,
	2014, 3, 2, 2, 2, 2012, 2010, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013,
	121, 3, 2, 2, 2, 2014, 2012, 3, 2, 2, 2, 2015, 2016, 7, 9, 2, 2, 2016,
	2017, 7, 516, 2, 2, 2017, 2018, 5, 478, 240, 2, 2018, 2019, 9, 28, 2, 2,
	2019, 2020, 7, 292, 2, 2, 2020, 2024, 7, 960, 2, 2, 2021, 2022, 7, 350,
	2, 2, 2022, 2023, 7, 936, 2, 2, 2023, 2025, 5, 486, 244, 2, 2024, 2021,
	3, 2, 2, 2, 2024, 2025, 3, 2, 2, 2, 2025, 2027, 3, 2, 2, 2, 2026, 2028,
	7, 538, 2, 2, 2027, 2026, 3, 2, 2, 2, 2027, 2028, 3, 2, 2, 2, 2028, 2029,
	3, 2, 2, 2, 2029, 2031, 7, 310, 2, 2, 2030, 2032, 7, 936, 2, 2, 2031, 2030,
	3, 2, 2, 2, 2031, 2032, 3, 2, 2, 2, 2032, 2033, 3, 2, 2, 2, 2033, 2034,
	5, 468, 235, 2, 2034, 123, 3, 2, 2, 2, 2035, 2039, 7, 9, 2, 2, 2036, 2037,
	7, 251, 2, 2, 2037, 2038, 7, 936, 2, 2, 2038, 2040, 9, 12, 2, 2, 2039,
	2036, 3, 2, 2, 2, 2039, 2040, 3, 2, 2, 2, 2040, 2042, 3, 2, 2, 2, 2041,
	2043, 5, 52, 27, 2, 2042, 2041, 3, 2, 2, 2, 2042, 2043, 3, 2, 2, 2, 2043,
	2047, 3, 2, 2, 2, 2044, 2045, 7, 138, 2, 2, 2045, 2046, 7, 479, 2, 2, 2046,
	2048, 9, 13, 2, 2, 2047, 2044, 3, 2, 2, 2, 2047, 2048, 3, 2, 2, 2, 2048,
	2049, 3, 2, 2, 2, 2049, 2050, 7, 537, 2, 2, 2050, 2055, 5, 454, 228, 2,
	2051, 2052, 7, 945, 2, 2, 2052, 2053, 5, 510, 256, 2, 2053, 2054, 7, 946,
	2, 2, 2054, 2056, 3, 2, 2, 2, 2055, 2051, 3, 2, 2, 2, 2055, 2056, 3, 2,
	2, 2, 2056, 2057, 3, 2, 2, 2, 2057, 2058, 7, 12, 2, 2, 2058, 2065, 5, 170,
	86, 2, 2059, 2061, 7, 168, 2, 2, 2060, 2062, 9, 14, 2, 2, 2061, 2060, 3,
	2, 2, 2, 2061, 2062, 3, 2, 2, 2, 2062, 2063, 3, 2, 2, 2, 2063, 2064, 7,
	24, 2, 2, 2064, 2066, 7, 105, 2, 2, 2065, 2059, 3, 2, 2, 2, 2065, 2066,
	3, 2, 2, 2, 2066, 125, 3, 2, 2, 2, 2067, 2374, 5, 94, 48, 2, 2068, 2070,
	7, 7, 2, 2, 2069, 2071, 7, 26, 2, 2, 2070, 2069, 3, 2, 2, 2, 2070, 2071,
	3, 2, 2, 2, 2071, 2072, 3, 2, 2, 2, 2072, 2073, 5, 478, 240, 2, 2073, 2077,
	5, 78, 40, 2, 2074, 2078, 7, 330, 2, 2, 2075, 2076, 7, 249, 2, 2, 2076,
	2078, 5, 478, 240, 2, 2077, 2074, 3, 2, 2, 2, 2077, 2075, 3, 2, 2, 2, 2077,
	2078, 3, 2, 2, 2, 2078, 2374, 3, 2, 2, 2, 2079, 2081, 7, 7, 2, 2, 2080,
	2082, 7, 26, 2, 2, 2081, 2080, 3, 2, 2, 2, 2081, 2082, 3, 2, 2, 2, 2082,
	2083, 3, 2, 2, 2, 2083, 2084, 7, 945, 2, 2, 2084, 2085, 5, 478, 240, 2,
	2085, 2092, 5, 78, 40, 2, 2086, 2087, 7, 947, 2, 2, 2087, 2088, 5, 478,
	240, 2, 2088, 2089, 5, 78, 40, 2, 2089, 2091, 3, 2, 2, 2, 2090, 2086, 3,
	2, 2, 2, 2091, 2094, 3, 2, 2, 2, 2092, 2090, 3, 2, 2, 2, 2092, 2093, 3,
	2, 2, 2, 2093, 2095, 3, 2, 2, 2, 2094, 2092, 3, 2, 2, 2, 2095, 2096, 7,
	946, 2, 2, 2096, 2374, 3, 2, 2, 2, 2097, 2098, 7, 7, 2, 2, 2098, 2100,
	9, 19, 2, 2, 2099, 2101, 5, 478, 240, 2, 2100, 2099, 3, 2, 2, 2, 2100,
	2101, 3, 2, 2, 2, 2101, 2103, 3, 2, 2, 2, 2102, 2104, 5, 62, 32, 2, 2103,
	2102, 3, 2, 2, 2, 2103, 2104, 3, 2, 2, 2, 2104, 2105, 3, 2, 2, 2, 2105,
	2109, 5, 516, 259, 2, 2106, 2108, 5, 64, 33, 2, 2107, 2106, 3, 2, 2, 2,
	2108, 2111, 3, 2, 2, 2, 2109, 2107, 3, 2, 2, 2, 2109, 2110, 3, 2, 2, 2,
	2110, 2374, 3, 2, 2, 2, 2111, 2109, 3, 2, 2, 2, 2112, 2117, 7, 7, 2, 2,
	2113, 2115, 7, 28, 2, 2, 2114, 2116, 5, 478, 240, 2, 2115, 2114, 3, 2,
	2, 2, 2115, 2116, 3, 2, 2, 2, 2116, 2118, 3, 2, 2, 2, 2117, 2113, 3, 2,
	2, 2, 2117, 2118, 3, 2, 2, 2, 2118, 2119, 3, 2, 2, 2, 2119, 2120, 7, 113,
	2, 2, 2120, 2122, 7, 79, 2, 2, 2121, 2123, 5, 62, 32, 2, 2122, 2121, 3,
	2, 2, 2, 2122, 2123, 3, 2, 2, 2, 2123, 2124, 3, 2, 2, 2, 2124, 2128, 5,
	516, 259, 2, 2125, 2127, 5, 64, 33, 2, 2126, 2125, 3, 2, 2, 2, 2127, 2130,
	3, 2, 2, 2, 2128, 2126, 3, 2, 2, 2, 2128, 2129, 3, 2, 2, 2, 2129, 2374,
	3, 2, 2, 2, 2130, 2128, 3, 2, 2, 2, 2131, 2136, 7, 7, 2, 2, 2132, 2134,
	7, 28, 2, 2, 2133, 2135, 5, 478, 240, 2, 2134, 2133, 3, 2, 2, 2, 2134,
	2135, 3, 2, 2, 2, 2135, 2137, 3, 2, 2, 2, 2136, 2132, 3, 2, 2, 2, 2136,
	2137, 3, 2, 2, 2, 2137, 2138, 3, 2, 2, 2, 2138, 2140, 7, 157, 2, 2, 2139,
	2141, 9, 19, 2, 2, 2140, 2139, 3, 2, 2, 2, 2140, 2141, 3, 2, 2, 2, 2141,
	2143, 3, 2, 2, 2, 2142, 2144, 5, 478, 240, 2, 2143, 2142, 3, 2, 2, 2, 2143,
	2144, 3, 2, 2, 2, 2144, 2146, 3, 2, 2, 2, 2145, 2147, 5, 62, 32, 2, 2146,
	2145, 3, 2, 2, 2, 2146, 2147, 3, 2, 2, 2, 2147, 2148, 3, 2, 2, 2, 2148,
	2152, 5, 516, 259, 2, 2149, 2151, 5, 64, 33, 2, 2150, 2149, 3, 2, 2, 2,
	2151, 2154, 3, 2, 2, 2, 2152, 2150, 3, 2, 2, 2, 2152, 2153, 3, 2, 2, 2,
	2153, 2374, 3, 2, 2, 2, 2154, 2152, 3, 2, 2, 2, 2155, 2156, 7, 7, 2, 2,
	2156, 2158, 9, 21, 2, 2, 2157, 2159, 9, 19, 2, 2, 2158, 2157, 3, 2, 2,
	2, 2158, 2159, 3, 2, 2, 2, 2159, 2161, 3, 2, 2, 2, 2160, 2162, 5, 478,
	240, 2, 2161, 2160, 3, 2, 2, 2, 2161, 2162, 3, 2, 2, 2, 2162, 2163, 3,
	2, 2, 2, 2163, 2167, 5, 516, 259, 2, 2164, 2166, 5, 64, 33, 2, 2165, 2164,
	3, 2, 2, 2, 2166, 2169, 3, 2, 2, 2, 2167, 2165, 3, 2, 2, 2, 2167, 2168,
	3, 2, 2, 2, 2168, 2374, 3, 2, 2, 2, 2169, 2167, 3, 2, 2, 2, 2170, 2175,
	7, 7, 2, 2, 2171, 2173, 7, 28, 2, 2, 2172, 2174, 5, 478, 240, 2, 2173,
	2172, 3, 2, 2, 2, 2173, 2174, 3, 2, 2, 2, 2174, 2176, 3, 2, 2, 2, 2175,
	2171, 3, 2, 2, 2, 2175, 2176, 3, 2, 2, 2, 2176, 2177, 3, 2, 2, 2, 2177,
	2178, 7, 59, 2, 2, 2178, 2180, 7, 79, 2, 2, 2179, 2181, 5, 478, 240, 2,
	2180, 2179, 3, 2, 2, 2, 2180, 2181, 3, 2, 2, 2, 2181, 2182, 3, 2, 2, 2,
	2182, 2183, 5, 516, 259, 2, 2183, 2184, 5, 84, 43, 2, 2184, 2374, 3, 2,
	2, 2, 2185, 2187, 7, 251, 2, 2, 2186, 2188, 7, 936, 2, 2, 2187, 2186, 3,
	2, 2, 2, 2187, 2188, 3, 2, 2, 2, 2188, 2189, 3, 2, 2, 2, 2189, 2374, 9,
	5, 2, 2, 2190, 2192, 7, 9, 2, 2, 2191, 2193, 7, 26, 2, 2, 2192, 2191, 3,
	2, 2, 2, 2192, 2193, 3, 2, 2, 2, 2193, 2194, 3, 2, 2, 2, 2194, 2200, 5,
	478, 240, 2, 2195, 2196, 7, 134, 2, 2, 2196, 2197, 7, 38, 2, 2, 2197, 2201,
	5, 526, 264, 2, 2198, 2199, 7, 46, 2, 2, 2199, 2201, 7, 38, 2, 2, 2200,
	2195, 3, 2, 2, 2, 2200, 2198, 3, 2, 2, 2, 2201, 2374, 3, 2, 2, 2, 2202,
	2204, 7, 22, 2, 2, 2203, 2205, 7, 26, 2, 2, 2204, 2203, 3, 2, 2, 2, 2204,
	2205, 3, 2, 2, 2, 2205, 2206, 3, 2, 2, 2, 2206, 2207, 5, 478, 240, 2, 2207,
	2208, 5, 478, 240, 2, 2208, 2212, 5, 78, 40, 2, 2209, 2213, 7, 330, 2,
	2, 2210, 2211, 7, 249, 2, 2, 2211, 2213, 5, 478, 240, 2, 2212, 2209, 3,
	2, 2, 2, 2212, 2210, 3, 2, 2, 2, 2212, 2213, 3, 2, 2, 2, 2213, 2374, 3,
	2, 2, 2, 2214, 2216, 7, 90, 2, 2, 2215, 2217, 7, 936, 2, 2, 2216, 2215,
	3, 2, 2, 2, 2216, 2217, 3, 2, 2, 2, 2217, 2218, 3, 2, 2, 2, 2218, 2374,
	9, 6, 2, 2, 2219, 2221, 7, 405, 2, 2, 2220, 2222, 7, 26, 2, 2, 2221, 2220,
	3, 2, 2, 2, 2221, 2222, 3, 2, 2, 2, 2222, 2223, 3, 2, 2, 2, 2223, 2224,
	5, 478, 240, 2, 2224, 2228, 5, 78, 40, 2, 2225, 2229, 7, 330, 2, 2, 2226,
	2227, 7, 249, 2, 2, 2227, 2229, 5, 478, 240, 2, 2228, 2225, 3, 2, 2, 2,
	2228, 2226, 3, 2, 2, 2, 2228, 2229, 3, 2, 2, 2, 2229, 2374, 3, 2, 2, 2,
	2230, 2232, 7, 46, 2, 2, 2231, 2233, 7, 26, 2, 2, 2232, 2231, 3, 2, 2,
	2, 2232, 2233, 3, 2, 2, 2, 2233, 2234, 3, 2, 2, 2, 2234, 2374, 5, 478,
	240, 2, 2235, 2236, 7, 46, 2, 2, 2236, 2237, 7, 113, 2, 2, 2237, 2374,
	7, 79, 2, 2, 2238, 2239, 7, 46, 2, 2, 2239, 2240, 9, 19, 2, 2, 2240, 2374,
	5, 478, 240, 2, 2241, 2242, 7, 46, 2, 2, 2242, 2243, 7, 59, 2, 2, 2243,
	2244, 7, 79, 2, 2, 2244, 2374, 5, 478, 240, 2, 2245, 2246, 7, 299, 2, 2,
	2246, 2374, 7, 80, 2, 2, 2247, 2248, 7, 306, 2, 2, 2248, 2374, 7, 80, 2,
	2, 2249, 2251, 7, 122, 2, 2, 2250, 2252, 9, 29, 2, 2, 2251, 2250, 3, 2,
	2, 2, 2251, 2252, 3, 2, 2, 2, 2252, 2253, 3, 2, 2, 2, 2253, 2374, 5, 478,
	240, 2, 2254, 2255, 7, 108, 2, 2, 2255, 2256, 7, 17, 2, 2, 2256, 2374,
	5, 510, 256, 2, 2257, 2258, 7, 30, 2, 2, 2258, 2259, 7, 151, 2, 2, 2259,
	2260, 7, 23, 2, 2, 2260, 2261, 7, 134, 2, 2, 2261, 2264, 5, 464, 233, 2,
	2262, 2263, 7, 25, 2, 2, 2263, 2265, 5, 466, 234, 2, 2264, 2262, 3, 2,
	2, 2, 2264, 2265, 3, 2, 2, 2, 2265, 2374, 3, 2, 2, 2, 2266, 2268, 7, 38,
	2, 2, 2267, 2266, 3, 2, 2, 2, 2267, 2268, 3, 2, 2, 2, 2268, 2269, 3, 2,
	2, 2, 2269, 2270, 7, 23, 2, 2, 2270, 2271, 7, 134, 2, 2, 2271, 2272, 7,
	936, 2, 2, 2272, 2276, 5, 464, 233, 2, 2273, 2274, 7, 25, 2, 2, 2274, 2275,
	7, 936, 2, 2, 2275, 2277, 5, 466, 234, 2, 2276, 2273, 3, 2, 2, 2, 2276,
	2277, 3, 2, 2, 2, 2277, 2374, 3, 2, 2, 2, 2278, 2279, 7, 300, 2, 2, 2279,
	2374, 7, 516, 2, 2, 2280, 2281, 7, 348, 2, 2, 2281, 2374, 7, 516, 2, 2,
	2282, 2374, 7, 58, 2, 2, 2283, 2284, 9, 30, 2, 2, 2284, 2374, 7, 534, 2,
	2, 2285, 2286, 7, 7, 2, 2, 2286, 2287, 7, 112, 2, 2, 2287, 2374, 5, 102,
	52, 2, 2288, 2289, 7, 46, 2, 2, 2289, 2290, 7, 112, 2, 2, 2290, 2374, 5,
	510, 256, 2, 2291, 2292, 7, 300, 2, 2, 2292, 2295, 7, 112, 2, 2, 2293,
	2296, 5, 510, 256, 2, 2294, 2296, 7, 8, 2, 2, 2295, 2293, 3, 2, 2, 2, 2295,
	2294, 3, 2, 2, 2, 2296, 2297, 3, 2, 2, 2, 2297, 2374, 7, 516, 2, 2, 2298,
	2299, 7, 348, 2, 2, 2299, 2302, 7, 112, 2, 2, 2300, 2303, 5, 510, 256,
	2, 2301, 2303, 7, 8, 2, 2, 2302, 2300, 3, 2, 2, 2, 2302, 2301, 3, 2, 2,
	2, 2303, 2304, 3, 2, 2, 2, 2304, 2374, 7, 516, 2, 2, 2305, 2306, 7, 523,
	2, 2, 2306, 2309, 7, 112, 2, 2, 2307, 2310, 5, 510, 256, 2, 2308, 2310,
	7, 8, 2, 2, 2309, 2307, 3, 2, 2, 2, 2309, 2308, 3, 2, 2, 2, 2310, 2374,
	3, 2, 2, 2, 2311, 2312, 7, 273, 2, 2, 2312, 2313, 7, 112, 2, 2, 2313, 2374,
	5, 484, 243, 2, 2314, 2315, 7, 458, 2, 2, 2315, 2316, 7, 112, 2, 2, 2316,
	2317, 5, 510, 256, 2, 2317, 2318, 7, 75, 2, 2, 2318, 2319, 7, 945, 2, 2,
	2319, 2324, 5, 102, 52, 2, 2320, 2321, 7, 947, 2, 2, 2321, 2323, 5, 102,
	52, 2, 2322, 2320, 3, 2, 2, 2, 2323, 2326, 3, 2, 2, 2, 2324, 2322, 3, 2,
	2, 2, 2324, 2325, 3, 2, 2, 2, 2325, 2327, 3, 2, 2, 2, 2326, 2324, 3, 2,
	2, 2, 2327, 2328, 7, 946, 2, 2, 2328, 2374, 3, 2, 2, 2, 2329, 2330, 7,
	319, 2, 2, 2330, 2331, 7, 112, 2, 2, 2331, 2332, 5, 478, 240, 2, 2332,
	2333, 7, 168, 2, 2, 2333, 2334, 7, 148, 2, 2, 2334, 2337, 5, 452, 227,
	2, 2335, 2336, 9, 30, 2, 2, 2336, 2338, 7, 534, 2, 2, 2337, 2335, 3, 2,
	2, 2, 2337, 2338, 3, 2, 2, 2, 2338, 2374, 3, 2, 2, 2, 2339, 2340, 7, 10,
	2, 2, 2340, 2343, 7, 112, 2, 2, 2341, 2344, 5, 510, 256, 2, 2342, 2344,
	7, 8, 2, 2, 2343, 2341, 3, 2, 2, 2, 2343, 2342, 3, 2, 2, 2, 2344, 2374,
	3, 2, 2, 2, 2345, 2346, 7, 24, 2, 2, 2346, 2349, 7, 112, 2, 2, 2347, 2350,
	5, 510, 256, 2, 2348, 2350, 7, 8, 2, 2, 2349, 2347, 3, 2, 2, 2, 2349, 2348,
	3, 2, 2, 2, 2350, 2374, 3, 2, 2, 2, 2351, 2352, 7, 104, 2, 2, 2352, 2355,
	7, 112, 2, 2, 2353, 2356, 5, 510, 256, 2, 2354, 2356, 7, 8, 2, 2, 2355,
	2353, 3, 2, 2, 2, 2355, 2354, 3, 2, 2, 2, 2356, 2374, 3, 2, 2, 2, 2357,
	2358, 7, 449, 2, 2, 2358, 2361, 7, 112, 2, 2, 2359, 2362, 5, 510, 256,
	2, 2360, 2362, 7, 8, 2, 2, 2361, 2359, 3, 2, 2, 2, 2361, 2360, 3, 2, 2,
	2, 2362, 2374, 3, 2, 2, 2, 2363, 2364, 7, 459, 2, 2, 2364, 2367, 7, 112,
	2, 2, 2365, 2368, 5, 510, 256, 2, 2366, 2368, 7, 8, 2, 2, 2367, 2365, 3,
	2, 2, 2, 2367, 2366, 3, 2, 2, 2, 2368, 2374, 3, 2, 2, 2, 2369, 2370, 7,
	457, 2, 2, 2370, 2374, 7, 431, 2, 2, 2371, 2372, 7, 530, 2, 2, 2372, 2374,
	7, 431, 2, 2, 2373, 2067, 3, 2, 2, 2, 2373, 2068, 3, 2, 2, 2, 2373, 2079,
	3, 2, 2, 2, 2373, 2097, 3, 2, 2, 2, 2373, 2112, 3, 2, 2, 2, 2373, 2131,
	3, 2, 2, 2, 2373, 2155, 3, 2, 2, 2, 2373, 2170, 3, 2, 2, 2, 2373, 2185,
	3, 2, 2, 2, 2373, 2190, 3, 2, 2, 2, 2373, 2202, 3, 2, 2, 2, 2373, 2214,
	3, 2, 2, 2, 2373, 2219, 3, 2, 2, 2, 2373, 2230, 3, 2, 2, 2, 2373, 2235,
	3, 2, 2, 2, 2373, 2238, 3, 2, 2, 2, 2373, 2241, 3, 2, 2, 2, 2373, 2245,
	3, 2, 2, 2, 2373, 2247, 3, 2, 2, 2, 2373, 2249, 3, 2, 2, 2, 2373, 2254,
	3, 2, 2, 2, 2373, 2257, 3, 2, 2, 2, 2373, 2267, 3, 2, 2, 2, 2373, 2278,
	3, 2, 2, 2, 2373, 2280, 3, 2, 2, 2, 2373, 2282, 3, 2, 2, 2, 2373, 2283,
	3, 2, 2, 2, 2373, 2285, 3, 2, 2, 2, 2373, 2288, 3, 2, 2, 2, 2373, 2291,
	3, 2, 2, 2, 2373, 2298, 3, 2, 2, 2, 2373, 2305, 3, 2, 2, 2, 2373, 2311,
	3, 2, 2, 2, 2373, 2314, 3, 2, 2, 2, 2373, 2329, 3, 2, 2, 2, 2373, 2339,
	3, 2, 2, 2, 2373, 2345, 3, 2, 2, 2, 2373, 2351, 3, 2, 2, 2, 2373, 2357,
	3, 2, 2, 2, 2373, 2363, 3, 2, 2, 2, 2373, 2369, 3, 2, 2, 2, 2373, 2371,
	3, 2, 2, 2, 2374, 127, 3, 2, 2, 2, 2375, 2376, 7, 46, 2, 2, 2376, 2378,
	9, 2, 2, 2, 2377, 2379, 5, 528, 265, 2, 2378, 2377, 3, 2, 2, 2, 2378, 2379,
	3, 2, 2, 2, 2379, 2380, 3, 2, 2, 2, 2380, 2381, 5, 478, 240, 2, 2381, 129,
	3, 2, 2, 2, 2382, 2383, 7, 46, 2, 2, 2383, 2385, 7, 316, 2, 2, 2384, 2386,
	5, 528, 265, 2, 2385, 2384, 3, 2, 2, 2, 2385, 2386, 3, 2, 2, 2, 2386, 2387,
	3, 2, 2, 2, 2387, 2388, 5, 454, 228, 2, 2388, 131, 3, 2, 2, 2, 2389, 2390,
	7, 46, 2, 2, 2390, 2392, 7, 69, 2, 2, 2391, 2393, 9, 3, 2, 2, 2392, 2391,
	3, 2, 2, 2, 2392, 2393, 3, 2, 2, 2, 2393, 2394, 3, 2, 2, 2, 2394, 2395,
	5, 478, 240, 2, 2395, 2396, 7, 103, 2, 2, 2396, 2402, 5, 452, 227, 2, 2397,
	2399, 7, 251, 2, 2, 2398, 2400, 7, 936, 2, 2, 2399, 2398, 3, 2, 2, 2, 2399,
	2400, 3, 2, 2, 2, 2400, 2401, 3, 2, 2, 2, 2401, 2403, 9, 5, 2, 2, 2402,
	2397, 3, 2, 2, 2, 2402, 2403, 3, 2, 2, 2, 2403, 2409, 3, 2, 2, 2, 2404,
	2406, 7, 90, 2, 2, 2405, 2407, 7, 936, 2, 2, 2406, 2405, 3, 2, 2, 2, 2406,
	2407, 3, 2, 2, 2, 2407, 2408, 3, 2, 2, 2, 2408, 2410, 9, 6, 2, 2, 2409,
	2404, 3, 2, 2, 2, 2409, 2410, 3, 2, 2, 2, 2410, 133, 3, 2, 2, 2, 2411,
	2412, 7, 46, 2, 2, 2412, 2413, 7, 370, 2, 2, 2413, 2414, 7, 63, 2, 2, 2414,
	2415, 5, 478, 240, 2, 2415, 2416, 7, 310, 2, 2, 2416, 2417, 7, 936, 2,
	2, 2417, 2418, 5, 468, 235, 2, 2418, 135, 3, 2, 2, 2, 2419, 2420, 7, 46,
	2, 2, 2420, 2422, 7, 114, 2, 2, 2421, 2423, 5, 528, 265, 2, 2422, 2421,
	3, 2, 2, 2, 2422, 2423, 3, 2, 2, 2, 2423, 2424, 3, 2, 2, 2, 2424, 2425,
	5, 454, 228, 2, 2425, 137, 3, 2, 2, 2, 2426, 2427, 7, 46, 2, 2, 2427, 2429,
	7, 336, 2, 2, 2428, 2430, 5, 528, 265, 2, 2429, 2428, 3, 2, 2, 2, 2429,
	2430, 3, 2, 2, 2, 2430, 2431, 3, 2, 2, 2, 2431, 2432, 5, 454, 228, 2, 2432,
	139, 3, 2, 2, 2, 2433, 2434, 7, 46, 2, 2, 2434, 2436, 7, 480, 2, 2, 2435,
	2437, 5, 528, 265, 2, 2436, 2435, 3, 2, 2, 2, 2436, 2437, 3, 2, 2, 2, 2437,
	2438, 3, 2, 2, 2, 2438, 2439, 5, 478, 240, 2, 2439, 141, 3, 2, 2, 2, 2440,
	2442, 7, 46, 2, 2, 2441, 2443, 7, 517, 2, 2, 2442, 2441, 3, 2, 2, 2, 2442,
	2443, 3, 2, 2, 2, 2443, 2444, 3, 2, 2, 2, 2444, 2446, 7, 148, 2, 2, 2445,
	2447, 5, 528, 265, 2, 2446, 2445, 3, 2, 2, 2, 2446, 2447, 3, 2, 2, 2, 2447,
	2448, 3, 2, 2, 2, 2448, 2450, 5, 512, 257, 2, 2449, 2451, 9, 31, 2, 2,
	2450, 2449, 3, 2, 2, 2, 2450, 2451, 3, 2, 2, 2, 2451, 143, 3, 2, 2, 2,
	2452, 2453, 7, 46, 2, 2, 2453, 2454, 7, 516, 2, 2, 2454, 2460, 5, 478,
	240, 2, 2455, 2457, 7, 310, 2, 2, 2456, 2458, 7, 936, 2, 2, 2457, 2456,
	3, 2, 2, 2, 2457, 2458, 3, 2, 2, 2, 2458, 2459, 3, 2, 2, 2, 2459, 2461,
	5, 468, 235, 2, 2460, 2455, 3, 2, 2, 2, 2460, 2461, 3, 2, 2, 2, 2461, 145,
	3, 2, 2, 2, 2462, 2463, 7, 46, 2, 2, 2463, 2465, 7, 153, 2, 2, 2464, 2466,
	5, 528, 265, 2, 2465, 2464, 3, 2, 2, 2, 2465, 2466, 3, 2, 2, 2, 2466, 2467,
	3, 2, 2, 2, 2467, 2468, 5, 454, 228, 2, 2468, 147, 3, 2, 2, 2, 2469, 2470,
	7, 46, 2, 2, 2470, 2472, 7, 537, 2, 2, 2471, 2473, 5, 528, 265, 2, 2472,
	2471, 3, 2, 2, 2, 2472, 2473, 3, 2, 2, 2, 2473, 2474, 3, 2, 2, 2, 2474,
	2479, 5, 454, 228, 2, 2475, 2476, 7, 947, 2, 2, 2476, 2478, 5, 454, 228,
	2, 2477, 2475, 3, 2, 2, 2, 2478, 2481, 3, 2, 2, 2, 2479, 2477, 3, 2, 2,
	2, 2479, 2480, 3, 2, 2, 2, 2480, 2483, 3, 2, 2, 2, 2481, 2479, 3, 2, 2,
	2, 2482, 2484, 9, 31, 2, 2, 2483, 2482, 3, 2, 2, 2, 2483, 2484, 3, 2, 2,
	2, 2484, 149, 3, 2, 2, 2, 2485, 2486, 7, 122, 2, 2, 2486, 2487, 7, 148,
	2, 2, 2487, 2488, 5, 452, 227, 2, 2488, 2489, 7, 151, 2, 2, 2489, 2497,
	5, 452, 227, 2, 2490, 2491, 7, 947, 2, 2, 2491, 2492, 5, 452, 227, 2, 2492,
	2493, 7, 151, 2, 2, 2493, 2494, 5, 452, 227, 2, 2494, 2496, 3, 2, 2, 2,
	2495, 2490, 3, 2, 2, 2, 2496, 2499, 3, 2, 2, 2, 2497, 2495, 3, 2, 2, 2,
	2497, 2498, 3, 2, 2, 2, 2498, 151, 3, 2, 2, 2, 2499, 2497, 3, 2, 2, 2,
	2500, 2502, 7, 523, 2, 2, 2501, 2503, 7, 148, 2, 2, 2502, 2501, 3, 2, 2,
	2, 2502, 2503, 3, 2, 2, 2, 2503, 2504, 3, 2, 2, 2, 2504, 2505, 5, 452,
	227, 2, 2505, 153, 3, 2, 2, 2, 2506, 2507, 7, 18, 2, 2, 2507, 2514, 5,
	454, 228, 2, 2508, 2511, 7, 945, 2, 2, 2509, 2512, 5, 520, 261, 2, 2510,
	2512, 5, 518, 260, 2, 2511, 2509, 3, 2, 2, 2, 2511, 2510, 3, 2, 2, 2, 2511,
	2512, 3, 2, 2, 2, 2512, 2513, 3, 2, 2, 2, 2513, 2515, 7, 946, 2, 2, 2514,
	2508, 3, 2, 2, 2, 2514, 2515, 3, 2, 2, 2, 2515, 155, 3, 2, 2, 2, 2516,
	2519, 5, 180, 91, 2, 2517, 2519, 5, 182, 92, 2, 2518, 2516, 3, 2, 2, 2,
	2518, 2517, 3, 2, 2, 2, 2519, 157, 3, 2, 2, 2, 2520, 2521, 7, 302, 2, 2,
	2521, 2522, 5, 518, 260, 2, 2522, 159, 3, 2, 2, 2, 2523, 2528, 5, 184,
	93, 2, 2524, 2528, 5, 186, 94, 2, 2525, 2528, 5, 188, 95, 2, 2526, 2528,
	5, 190, 96, 2, 2527, 2523, 3, 2, 2, 2, 2527, 2524, 3, 2, 2, 2, 2527, 2525,
	3, 2, 2, 2, 2527, 2526, 3, 2, 2, 2, 2528, 161, 3, 2, 2, 2, 2529, 2531,
	7, 73, 2, 2, 2530, 2532, 9, 32, 2, 2, 2531, 2530, 3, 2, 2, 2, 2531, 2532,
	3, 2, 2, 2, 2532, 2534, 3, 2, 2, 2, 2533, 2535, 7, 67, 2, 2, 2534, 2533,
	3, 2, 2, 2, 2534, 2535, 3, 2, 2, 2, 2535, 2537, 3, 2, 2, 2, 2536, 2538,
	7, 75, 2, 2, 2537, 2536, 3, 2, 2, 2, 2537, 2538, 3, 2, 2, 2, 2538, 2539,
	3, 2, 2, 2, 2539, 2545, 5, 452, 227, 2, 2540, 2541, 7, 112, 2, 2, 2541,
	2542, 7, 945, 2, 2, 2542, 2543, 5, 510, 256, 2, 2543, 2544, 7, 946, 2,
	2, 2544, 2546, 3, 2, 2, 2, 2545, 2540, 3, 2, 2, 2, 2545, 2546, 3, 2, 2,
	2, 2546, 2563, 3, 2, 2, 2, 2547, 2548, 7, 945, 2, 2, 2548, 2549, 5, 510,
	256, 2, 2549, 2550, 7, 946, 2, 2, 2550, 2552, 3, 2, 2, 2, 2551, 2547, 3,
	2, 2, 2, 2551, 2552, 3, 2, 2, 2, 2552, 2553, 3, 2, 2, 2, 2553, 2564, 5,
	174, 88, 2, 2554, 2555, 7, 134, 2, 2, 2555, 2560, 5, 176, 89, 2, 2556,
	2557, 7, 947, 2, 2, 2557, 2559, 5, 176, 89, 2, 2558, 2556, 3, 2, 2, 2,
	2559, 2562, 3, 2, 2, 2, 2560, 2558, 3, 2, 2, 2, 2560, 2561, 3, 2, 2, 2,
	2561, 2564, 3, 2, 2, 2, 2562, 2560, 3, 2, 2, 2, 2563, 2551, 3, 2, 2, 2,
	2563, 2554, 3, 2, 2, 2, 2564, 2577, 3, 2, 2, 2, 2565, 2566, 7, 103, 2,
	2, 2566, 2567, 7, 304, 2, 2, 2567, 2568, 7, 79, 2, 2, 2568, 2569, 7, 160,
	2, 2, 2569, 2574, 5, 176, 89, 2, 2570, 2571, 7, 947, 2, 2, 2571, 2573,
	5, 176, 89, 2, 2572, 2570, 3, 2, 2, 2, 2573, 2576, 3, 2, 2, 2, 2574, 2572,
	3, 2, 2, 2, 2574, 2575, 3, 2, 2, 2, 2575, 2578, 3, 2, 2, 2, 2576, 2574,
	3, 2, 2, 2, 2577, 2565, 3, 2, 2, 2, 2577, 2578, 3, 2, 2, 2, 2578, 163,
	3, 2, 2, 2, 2579, 2580, 7, 89, 2, 2, 2580, 2582, 7, 291, 2, 2, 2581, 2583,
	9, 33, 2, 2, 2582, 2581, 3, 2, 2, 2, 2582, 2583, 3, 2, 2, 2, 2583, 2585,
	3, 2, 2, 2, 2584, 2586, 7, 369, 2, 2, 2585, 2584, 3, 2, 2, 2, 2585, 2586,
	3, 2, 2, 2, 2586, 2587, 3, 2, 2, 2, 2587, 2588, 7, 70, 2, 2, 2588, 2590,
	7, 960, 2, 2, 2589, 2591, 9, 8, 2, 2, 2590, 2589, 3, 2, 2, 2, 2590, 2591,
	3, 2, 2, 2, 2591, 2592, 3, 2, 2, 2, 2592, 2593, 7, 75, 2, 2, 2593, 2594,
	7, 148, 2, 2, 2594, 2600, 5, 452, 227, 2, 2595, 2596, 7, 112, 2, 2, 2596,
	2597, 7, 945, 2, 2, 2597, 2598, 5, 510, 256, 2, 2598, 2599, 7, 946, 2,
	2, 2599, 2601, 3, 2, 2, 2, 2600, 2595, 3, 2, 2, 2, 2600, 2601, 3, 2, 2,
	2, 2601, 2605, 3, 2, 2, 2, 2602, 2603, 7, 23, 2, 2, 2603, 2604, 7, 134,
	2, 2, 2604, 2606, 5, 464, 233, 2, 2605, 2602, 3, 2, 2, 2, 2605, 2606, 3,
	2, 2, 2, 2606, 2626, 3, 2, 2, 2, 2607, 2611, 9, 34, 2, 2, 2608, 2609, 7,
	149, 2, 2, 2609, 2610, 7, 17, 2, 2, 2610, 2612, 7, 960, 2, 2, 2611, 2608,
	3, 2, 2, 2, 2611, 2612, 3, 2, 2, 2, 2612, 2619, 3, 2, 2, 2, 2613, 2615,
	7, 106, 2, 2, 2614, 2613, 3, 2, 2, 2, 2614, 2615, 3, 2, 2, 2, 2615, 2616,
	3, 2, 2, 2, 2616, 2617, 7, 50, 2, 2, 2617, 2618, 7, 17, 2, 2, 2618, 2620,
	7, 960, 2, 2, 2619, 2614, 3, 2, 2, 2, 2619, 2620, 3, 2, 2, 2, 2620, 2624,
	3, 2, 2, 2, 2621, 2622, 7, 51, 2, 2, 2622, 2623, 7, 17, 2, 2, 2623, 2625,
	7, 960, 2, 2, 2624, 2621, 3, 2, 2, 2, 2624, 2625, 3, 2, 2, 2, 2625, 2627,
	3, 2, 2, 2, 2626, 2607, 3, 2, 2, 2, 2626, 2627, 3, 2, 2, 2, 2627, 2639,
	3, 2, 2, 2, 2628, 2632, 7, 88, 2, 2, 2629, 2630, 7, 146, 2, 2, 2630, 2631,
	7, 17, 2, 2, 2631, 2633, 7, 960, 2, 2, 2632, 2629, 3, 2, 2, 2, 2632, 2633,
	3, 2, 2, 2, 2633, 2637, 3, 2, 2, 2, 2634, 2635, 7, 149, 2, 2, 2635, 2636,
	7, 17, 2, 2, 2636, 2638, 7, 960, 2, 2, 2637, 2634, 3, 2, 2, 2, 2637, 2638,
	3, 2, 2, 2, 2638, 2640, 3, 2, 2, 2, 2639, 2628, 3, 2, 2, 2, 2639, 2640,
	3, 2, 2, 2, 2640, 2645, 3, 2, 2, 2, 2641, 2642, 7, 67, 2, 2, 2642, 2643,
	5, 484, 243, 2, 2643, 2644, 9, 35, 2, 2, 2644, 2646, 3, 2, 2, 2, 2645,
	2641, 3, 2, 2, 2, 2645, 2646, 3, 2, 2, 2, 2646, 2658, 3, 2, 2, 2, 2647,
	2648, 7, 945, 2, 2, 2648, 2653, 5, 178, 90, 2, 2649, 2650, 7, 947, 2, 2,
	2650, 2652, 5, 178, 90, 2, 2651, 2649, 3, 2, 2, 2, 2652, 2655, 3, 2, 2,
	2, 2653, 2651, 3, 2, 2, 2, 2653, 2654, 3, 2, 2, 2, 2654, 2656, 3, 2, 2,
	2, 2655, 2653, 3, 2, 2, 2, 2656, 2657, 7, 946, 2, 2, 2657, 2659, 3, 2,
	2, 2, 2658, 2647, 3, 2, 2, 2, 2658, 2659, 3, 2, 2, 2, 2659, 2669, 3, 2,
	2, 2, 2660, 2661, 7, 134, 2, 2, 2661, 2666, 5, 176, 89, 2, 2662, 2663,
	7, 947, 2, 2, 2663, 2665, 5, 176, 89, 2, 2664, 2662, 3, 2, 2, 2, 2665,
	2668, 3, 2, 2, 2, 2666, 2664, 3, 2, 2, 2, 2666, 2667, 3, 2, 2, 2, 2667,
	2670, 3, 2, 2, 2, 2668, 2666, 3, 2, 2, 2, 2669, 2660, 3, 2, 2, 2, 2669,
	2670, 3, 2, 2, 2, 2670, 165, 3, 2, 2, 2, 2671, 2672, 7, 89, 2, 2, 2672,
	2674, 7, 545, 2, 2, 2673, 2675, 9, 33, 2, 2, 2674, 2673, 3, 2, 2, 2, 2674,
	2675, 3, 2, 2, 2, 2675, 2677, 3, 2, 2, 2, 2676, 2678, 7, 369, 2, 2, 2677,
	2676, 3, 2, 2, 2, 2677, 2678, 3, 2, 2, 2, 2678, 2679, 3, 2, 2, 2, 2679,
	2680, 7, 70, 2, 2, 2680, 2682, 7, 960, 2, 2, 2681, 2683, 9, 8, 2, 2, 2682,
	2681, 3, 2, 2, 2, 2682, 2683, 3, 2, 2, 2, 2683, 2684, 3, 2, 2, 2, 2684,
	2685, 7, 75, 2, 2, 2685, 2686, 7, 148, 2, 2, 2686, 2690, 5, 452, 227, 2,
	2687, 2688, 7, 23, 2, 2, 2688, 2689, 7, 134, 2, 2, 2689, 2691, 5, 464,
	233, 2, 2690, 2687, 3, 2, 2, 2, 2690, 2691, 3, 2, 2, 2, 2691, 2698, 3,
	2, 2, 2, 2692, 2693, 7, 475, 2, 2, 2693, 2694, 7, 346, 2, 2, 2694, 2695,
	7, 17, 2, 2, 2695, 2696, 7, 938, 2, 2, 2696, 2697, 7, 960, 2, 2, 2697,
	2699, 7, 937, 2, 2, 2698, 2692, 3, 2, 2, 2, 2698, 2699, 3, 2, 2, 2, 2699,
	2704, 3, 2, 2, 2, 2700, 2701, 7, 67, 2, 2, 2701, 2702, 5, 484, 243, 2,
	2702, 2703, 9, 35, 2, 2, 2703, 2705, 3, 2, 2, 2, 2704, 2700, 3, 2, 2, 2,
	2704, 2705, 3, 2, 2, 2, 2705, 2717, 3, 2, 2, 2, 2706, 2707, 7, 945, 2,
	2, 2707, 2712, 5, 178, 90, 2, 2708, 2709, 7, 947, 2, 2, 2709, 2711, 5,
	178, 90, 2, 2710, 2708, 3, 2, 2, 2, 2711, 2714, 3, 2, 2, 2, 2712, 2710,
	3, 2, 2, 2, 2712, 2713, 3, 2, 2, 2, 2713, 2715, 3, 2, 2, 2, 2714, 2712,
	3, 2, 2, 2, 2715, 2716, 7, 946, 2, 2, 2716, 2718, 3, 2, 2, 2, 2717, 2706,
	3, 2, 2, 2, 2717, 2718, 3, 2, 2, 2, 2718, 2728, 3, 2, 2, 2, 2719, 2720,
	7, 134, 2, 2, 2720, 2725, 5, 176, 89, 2, 2721, 2722, 7, 947, 2, 2, 2722,
	2724, 5, 176, 89, 2, 2723, 2721, 3, 2, 2, 2, 2724, 2727, 3, 2, 2, 2, 2725,
	2723, 3, 2, 2, 2, 2725, 2726, 3, 2, 2, 2, 2726, 2729, 3, 2, 2, 2, 2727,
	2725, 3, 2, 2, 2, 2728, 2719, 3, 2, 2, 2, 2728, 2729, 3, 2, 2, 2, 2729,
	167, 3, 2, 2, 2, 2730, 2732, 7, 124, 2, 2, 2731, 2733, 9, 36, 2, 2, 2732,
	2731, 3, 2, 2, 2, 2732, 2733, 3, 2, 2, 2, 2733, 2735, 3, 2, 2, 2, 2734,
	2736, 7, 75, 2, 2, 2735, 2734, 3, 2, 2, 2, 2735, 2736, 3, 2, 2, 2, 2736,
	2737, 3, 2, 2, 2, 2737, 2743, 5, 452, 227, 2, 2738, 2739, 7, 112, 2, 2,
	2739, 2740, 7, 945, 2, 2, 2740, 2741, 5, 510, 256, 2, 2741, 2742, 7, 946,
	2, 2, 2742, 2744, 3, 2, 2, 2, 2743, 2738, 3, 2, 2, 2, 2743, 2744, 3, 2,
	2, 2, 2744, 2761, 3, 2, 2, 2, 2745, 2746, 7, 945, 2, 2, 2746, 2747, 5,
	510, 256, 2, 2747, 2748, 7, 946, 2, 2, 2748, 2750, 3, 2, 2, 2, 2749, 2745,
	3, 2, 2, 2, 2749, 2750, 3, 2, 2, 2, 2750, 2751, 3, 2, 2, 2, 2751, 2762,
	5, 174, 88, 2, 2752, 2753, 7, 134, 2, 2, 2753, 2758, 5, 176, 89, 2, 2754,
	2755, 7, 947, 2, 2, 2755, 2757, 5, 176, 89, 2, 2756, 2754, 3, 2, 2, 2,
	2757, 2760, 3, 2, 2, 2, 2758, 2756, 3, 2, 2, 2, 2758, 2759, 3, 2, 2, 2,
	2759, 2762, 3, 2, 2, 2, 2760, 2758, 3, 2, 2, 2, 2761, 2749, 3, 2, 2, 2,
	2761, 2752, 3, 2, 2, 2, 2762, 169, 3, 2, 2, 2, 2763, 2770, 5, 216, 109,
	2, 2764, 2765, 7, 57, 2, 2, 2765, 2771, 7, 160, 2, 2, 2766, 2767, 7, 90,
	2, 2, 2767, 2768, 7, 68, 2, 2, 2768, 2769, 7, 482, 2, 2, 2769, 2771, 7,
	404, 2, 2, 2770, 2764, 3, 2, 2, 2, 2770, 2766, 3, 2, 2, 2, 2770, 2771,
	3, 2, 2, 2, 2771, 2839, 3, 2, 2, 2, 2772, 2779, 5, 212, 107, 2, 2773, 2774,
	7, 57, 2, 2, 2774, 2780, 7, 160, 2, 2, 2775, 2776, 7, 90, 2, 2, 2776, 2777,
	7, 68, 2, 2, 2777, 2778, 7, 482, 2, 2, 2778, 2780, 7, 404, 2, 2, 2779,
	2773, 3, 2, 2, 2, 2779, 2775, 3, 2, 2, 2, 2779, 2780, 3, 2, 2, 2, 2780,
	2839, 3, 2, 2, 2, 2781, 2783, 5, 218, 110, 2, 2782, 2784, 5, 222, 112,
	2, 2783, 2782, 3, 2, 2, 2, 2784, 2785, 3, 2, 2, 2, 2785, 2783, 3, 2, 2,
	2, 2785, 2786, 3, 2, 2, 2, 2786, 2795, 3, 2, 2, 2, 2787, 2789, 7, 156,
	2, 2, 2788, 2790, 9, 37, 2, 2, 2789, 2788, 3, 2, 2, 2, 2789, 2790, 3, 2,
	2, 2, 2790, 2793, 3, 2, 2, 2, 2791, 2794, 5, 216, 109, 2, 2792, 2794, 5,
	212, 107, 2, 2793, 2791, 3, 2, 2, 2, 2793, 2792, 3, 2, 2, 2, 2794, 2796,
	3, 2, 2, 2, 2795, 2787, 3, 2, 2, 2, 2795, 2796, 3, 2, 2, 2, 2796, 2798,
	3, 2, 2, 2, 2797, 2799, 5, 196, 99, 2, 2798, 2797, 3, 2, 2, 2, 2798, 2799,
	3, 2, 2, 2, 2799, 2801, 3, 2, 2, 2, 2800, 2802, 5, 236, 119, 2, 2801, 2800,
	3, 2, 2, 2, 2801, 2802, 3, 2, 2, 2, 2802, 2809, 3, 2, 2, 2, 2803, 2804,
	7, 57, 2, 2, 2804, 2810, 7, 160, 2, 2, 2805, 2806, 7, 90, 2, 2, 2806, 2807,
	7, 68, 2, 2, 2807, 2808, 7, 482, 2, 2, 2808, 2810, 7, 404, 2, 2, 2809,
	2803, 3, 2, 2, 2, 2809, 2805, 3, 2, 2, 2, 2809, 2810, 3, 2, 2, 2, 2810,
	2839, 3, 2, 2, 2, 2811, 2813, 5, 214, 108, 2, 2812, 2814, 5, 220, 111,
	2, 2813, 2812, 3, 2, 2, 2, 2814, 2815, 3, 2, 2, 2, 2815, 2813, 3, 2, 2,
	2, 2815, 2816, 3, 2, 2, 2, 2816, 2822, 3, 2, 2, 2, 2817, 2819, 7, 156,
	2, 2, 2818, 2820, 9, 37, 2, 2, 2819, 2818, 3, 2, 2, 2, 2819, 2820, 3, 2,
	2, 2, 2820, 2821, 3, 2, 2, 2, 2821, 2823, 5, 212, 107, 2, 2822, 2817, 3,
	2, 2, 2, 2822, 2823, 3, 2, 2, 2, 2823, 2825, 3, 2, 2, 2, 2824, 2826, 5,
	196, 99, 2, 2825, 2824, 3, 2, 2, 2, 2825, 2826, 3, 2, 2, 2, 2826, 2828,
	3, 2, 2, 2, 2827, 2829, 5, 236, 119, 2, 2828, 2827, 3, 2, 2, 2, 2828, 2829,
	3, 2, 2, 2, 2829, 2836, 3, 2, 2, 2, 2830, 2831, 7, 57, 2, 2, 2831, 2837,
	7, 160, 2, 2, 2832, 2833, 7, 90, 2, 2, 2833, 2834, 7, 68, 2, 2, 2834, 2835,
	7, 482, 2, 2, 2835, 2837, 7, 404, 2, 2, 2836, 2830, 3, 2, 2, 2, 2836, 2832,
	3, 2, 2, 2, 2836, 2837, 3, 2, 2, 2, 2837, 2839, 3, 2, 2, 2, 2838, 2763,
	3, 2, 2, 2, 2838, 2772, 3, 2, 2, 2, 2838, 2781, 3, 2, 2, 2, 2838, 2811,
	3, 2, 2, 2, 2839, 171, 3, 2, 2, 2, 2840, 2843, 5, 192, 97, 2, 2841, 2843,
	5, 194, 98, 2, 2842, 2840, 3, 2, 2, 2, 2842, 2841, 3, 2, 2, 2, 2843, 173,
	3, 2, 2, 2, 2844, 2860, 5, 170, 86, 2, 2845, 2846, 9, 38, 2, 2, 2846, 2847,
	7, 945, 2, 2, 2847, 2848, 5, 518, 260, 2, 2848, 2856, 7, 946, 2, 2, 2849,
	2850, 7, 947, 2, 2, 2850, 2851, 7, 945, 2, 2, 2851, 2852, 5, 518, 260,
	2, 2852, 2853, 7, 946, 2, 2, 2853, 2855, 3, 2, 2, 2, 2854, 2849, 3, 2,
	2, 2, 2855, 2858, 3, 2, 2, 2, 2856, 2854, 3, 2, 2, 2, 2856, 2857, 3, 2,
	2, 2, 2857, 2860, 3, 2, 2, 2, 2858, 2856, 3, 2, 2, 2, 2859, 2844, 3, 2,
	2, 2, 2859, 2845, 3, 2, 2, 2, 2860, 175, 3, 2, 2, 2, 2861, 2862, 5, 456,
	229, 2, 2862, 2863, 7, 936, 2, 2, 2863, 2864, 5, 546, 274, 2, 2864, 177,
	3, 2, 2, 2, 2865, 2868, 5, 478, 240, 2, 2866, 2868, 7, 971, 2, 2, 2867,
	2865, 3, 2, 2, 2, 2867, 2866, 3, 2, 2, 2, 2868, 179, 3, 2, 2, 2, 2869,
	2871, 7, 40, 2, 2, 2870, 2872, 7, 92, 2, 2, 2871, 2870, 3, 2, 2, 2, 2871,
	2872, 3, 2, 2, 2, 2872, 2874, 3, 2, 2, 2, 2873, 2875, 7, 448, 2, 2, 2874,
	2873, 3, 2, 2, 2, 2874, 2875, 3, 2, 2, 2, 2875, 2877, 3, 2, 2, 2, 2876,
	2878, 7, 67, 2, 2, 2877, 2876, 3, 2, 2, 2, 2877, 2878, 3, 2, 2, 2, 2878,
	2879, 3, 2, 2, 2, 2879, 2880, 7, 60, 2, 2, 2880, 2886, 5, 452, 227, 2,
	2881, 2882, 7, 112, 2, 2, 2882, 2883, 7, 945, 2, 2, 2883, 2884, 5, 510,
	256, 2, 2884, 2885, 7, 946, 2, 2, 2885, 2887, 3, 2, 2, 2, 2886, 2881, 3,
	2, 2, 2, 2886, 2887, 3, 2, 2, 2, 2887, 2890, 3, 2, 2, 2, 2888, 2889, 7,
	166, 2, 2, 2889, 2891, 5, 546, 274, 2, 2890, 2888, 3, 2, 2, 2, 2890, 2891,
	3, 2, 2, 2, 2891, 2893, 3, 2, 2, 2, 2892, 2894, 5, 196, 99, 2, 2893, 2892,
	3, 2, 2, 2, 2893, 2894, 3, 2, 2, 2, 2894, 2897, 3, 2, 2, 2, 2895, 2896,
	7, 86, 2, 2, 2896, 2898, 5, 484, 243, 2, 2897, 2895, 3, 2, 2, 2, 2897,
	2898, 3, 2, 2, 2, 2898, 181, 3, 2, 2, 2, 2899, 2901, 7, 40, 2, 2, 2900,
	2902, 7, 92, 2, 2, 2901, 2900, 3, 2, 2, 2, 2901, 2902, 3, 2, 2, 2, 2902,
	2904, 3, 2, 2, 2, 2903, 2905, 7, 448, 2, 2, 2904, 2903, 3, 2, 2, 2, 2904,
	2905, 3, 2, 2, 2, 2905, 2907, 3, 2, 2, 2, 2906, 2908, 7, 67, 2, 2, 2907,
	2906, 3, 2, 2, 2, 2907, 2908, 3, 2, 2, 2, 2908, 2948, 3, 2, 2, 2, 2909,
	2912, 5, 452, 227, 2, 2910, 2911, 7, 944, 2, 2, 2911, 2913, 7, 929, 2,
	2, 2912, 2910, 3, 2, 2, 2, 2912, 2913, 3, 2, 2, 2, 2913, 2922, 3, 2, 2,
	2, 2914, 2915, 7, 947, 2, 2, 2915, 2918, 5, 452, 227, 2, 2916, 2917, 7,
	944, 2, 2, 2917, 2919, 7, 929, 2, 2, 2918, 2916, 3, 2, 2, 2, 2918, 2919,
	3, 2, 2, 2, 2919, 2921, 3, 2, 2, 2, 2920, 2914, 3, 2, 2, 2, 2921, 2924,
	3, 2, 2, 2, 2922, 2920, 3, 2, 2, 2, 2922, 2923, 3, 2, 2, 2, 2923, 2925,
	3, 2, 2, 2, 2924, 2922, 3, 2, 2, 2, 2925, 2926, 7, 60, 2, 2, 2926, 2927,
	5, 200, 101, 2, 2927, 2949, 3, 2, 2, 2, 2928, 2929, 7, 60, 2, 2, 2929,
	2932, 5, 452, 227, 2, 2930, 2931, 7, 944, 2, 2, 2931, 2933, 7, 929, 2,
	2, 2932, 2930, 3, 2, 2, 2, 2932, 2933, 3, 2, 2, 2, 2933, 2942, 3, 2, 2,
	2, 2934, 2935, 7, 947, 2, 2, 2935, 2938, 5, 452, 227, 2, 2936, 2937, 7,
	944, 2, 2, 2937, 2939, 7, 929, 2, 2, 2938, 2936, 3, 2, 2, 2, 2938, 2939,
	3, 2, 2, 2, 2939, 2941, 3, 2, 2, 2, 2940, 2934, 3, 2, 2, 2, 2941, 2944,
	3, 2, 2, 2, 2942, 2940, 3, 2, 2, 2, 2942, 2943, 3, 2, 2, 2, 2943, 2945,
	3, 2, 2, 2, 2944, 2942, 3, 2, 2, 2, 2945, 2946, 7, 163, 2, 2, 2946, 2947,
	5, 200, 101, 2, 2947, 2949, 3, 2, 2, 2, 2948, 2909, 3, 2, 2, 2, 2948, 2928,
	3, 2, 2, 2, 2949, 2952, 3, 2, 2, 2, 2950, 2951, 7, 166, 2, 2, 2951, 2953,
	5, 546, 274, 2, 2952, 2950, 3, 2, 2, 2, 2952, 2953, 3, 2, 2, 2, 2953, 183,
	3, 2, 2, 2, 2954, 2955, 7, 341, 2, 2, 2955, 2956, 5, 452, 227, 2, 2956,
	2961, 7, 423, 2, 2, 2957, 2959, 7, 12, 2, 2, 2958, 2957, 3, 2, 2, 2, 2958,
	2959, 3, 2, 2, 2, 2959, 2960, 3, 2, 2, 2, 2960, 2962, 5, 478, 240, 2, 2961,
	2958, 3, 2, 2, 2, 2961, 2962, 3, 2, 2, 2, 2962, 185, 3, 2, 2, 2, 2963,
	2964, 7, 341, 2, 2, 2964, 2965, 5, 452, 227, 2, 2965, 2966, 7, 117, 2,
	2, 2966, 2973, 5, 454, 228, 2, 2967, 2968, 5, 554, 278, 2, 2968, 2969,
	7, 945, 2, 2, 2969, 2970, 5, 520, 261, 2, 2970, 2971, 7, 946, 2, 2, 2971,
	2974, 3, 2, 2, 2, 2972, 2974, 9, 39, 2, 2, 2973, 2967, 3, 2, 2, 2, 2973,
	2972, 3, 2, 2, 2, 2974, 2977, 3, 2, 2, 2, 2975, 2976, 7, 166, 2, 2, 2976,
	2978, 5, 546, 274, 2, 2977, 2975, 3, 2, 2, 2, 2977, 2978, 3, 2, 2, 2, 2978,
	2981, 3, 2, 2, 2, 2979, 2980, 7, 86, 2, 2, 2980, 2982, 5, 484, 243, 2,
	2981, 2979, 3, 2, 2, 2, 2981, 2982, 3, 2, 2, 2, 2982, 187, 3, 2, 2, 2,
	2983, 2984, 7, 341, 2, 2, 2984, 2985, 5, 452, 227, 2, 2985, 2986, 7, 117,
	2, 2, 2986, 2989, 9, 40, 2, 2, 2987, 2988, 7, 166, 2, 2, 2988, 2990, 5,
	546, 274, 2, 2989, 2987, 3, 2, 2, 2, 2989, 2990, 3, 2, 2, 2, 2990, 2993,
	3, 2, 2, 2, 2991, 2992, 7, 86, 2, 2, 2992, 2994, 5, 484, 243, 2, 2993,
	2991, 3, 2, 2, 2, 2993, 2994, 3, 2, 2, 2, 2994, 189, 3, 2, 2, 2, 2995,
	2996, 7, 341, 2, 2, 2996, 2997, 5, 452, 227, 2, 2997, 2998, 7, 272, 2,
	2, 2998, 191, 3, 2, 2, 2, 2999, 3001, 7, 160, 2, 2, 3000, 3002, 7, 92,
	2, 2, 3001, 3000, 3, 2, 2, 2, 3001, 3002, 3, 2, 2, 2, 3002, 3004, 3, 2,
	2, 2, 3003, 3005, 7, 67, 2, 2, 3004, 3003, 3, 2, 2, 2, 3004, 3005, 3, 2,
	2, 2, 3005, 3006, 3, 2, 2, 2, 3006, 3011, 5, 452, 227, 2, 3007, 3009, 7,
	12, 2, 2, 3008, 3007, 3, 2, 2, 2, 3008, 3009, 3, 2, 2, 2, 3009, 3010, 3,
	2, 2, 2, 3010, 3012, 5, 478, 240, 2, 3011, 3008, 3, 2, 2, 2, 3011, 3012,
	3, 2, 2, 2, 3012, 3013, 3, 2, 2, 2, 3013, 3014, 7, 134, 2, 2, 3014, 3019,
	5, 176, 89, 2, 3015, 3016, 7, 947, 2, 2, 3016, 3018, 5, 176, 89, 2, 3017,
	3015, 3, 2, 2, 2, 3018, 3021, 3, 2, 2, 2, 3019, 3017, 3, 2, 2, 2, 3019,
	3020, 3, 2, 2, 2, 3020, 3024, 3, 2, 2, 2, 3021, 3019, 3, 2, 2, 2, 3022,
	3023, 7, 166, 2, 2, 3023, 3025, 5, 546, 274, 2, 3024, 3022, 3, 2, 2, 2,
	3024, 3025, 3, 2, 2, 2, 3025, 3027, 3, 2, 2, 2, 3026, 3028, 5, 196, 99,
	2, 3027, 3026, 3, 2, 2, 2, 3027, 3028, 3, 2, 2, 2, 3028, 3030, 3, 2, 2,
	2, 3029, 3031, 5, 236, 119, 2, 3030, 3029, 3, 2, 2, 2, 3030, 3031, 3, 2,
	2, 2, 3031, 193, 3, 2, 2, 2, 3032, 3034, 7, 160, 2, 2, 3033, 3035, 7, 92,
	2, 2, 3034, 3033, 3, 2, 2, 2, 3034, 3035, 3, 2, 2, 2, 3035, 3037, 3, 2,
	2, 2, 3036, 3038, 7, 67, 2, 2, 3037, 3036, 3, 2, 2, 2, 3037, 3038, 3, 2,
	2, 2, 3038, 3039, 3, 2, 2, 2, 3039, 3040, 5, 200, 101, 2, 3040, 3041, 7,
	134, 2, 2, 3041, 3046, 5, 176, 89, 2, 3042, 3043, 7, 947, 2, 2, 3043, 3045,
	5, 176, 89, 2, 3044, 3042, 3, 2, 2, 2, 3045, 3048, 3, 2, 2, 2, 3046, 3044,
	3, 2, 2, 2, 3046, 3047, 3, 2, 2, 2, 3047, 3051, 3, 2, 2, 2, 3048, 3046,
	3, 2, 2, 2, 3049, 3050, 7, 166, 2, 2, 3050, 3052, 5, 546, 274, 2, 3051,
	3049, 3, 2, 2, 2, 3051, 3052, 3, 2, 2, 2, 3052, 195, 3, 2, 2, 2, 3053,
	3054, 7, 108, 2, 2, 3054, 3055, 7, 17, 2, 2, 3055, 3060, 5, 198, 100, 2,
	3056, 3057, 7, 947, 2, 2, 3057, 3059, 5, 198, 100, 2, 3058, 3056, 3, 2,
	2, 2, 3059, 3062, 3, 2, 2, 2, 3060, 3058, 3, 2, 2, 2, 3060, 3061, 3, 2,
	2, 2, 3061, 197, 3, 2, 2, 2, 3062, 3060, 3, 2, 2, 2, 3063, 3065, 5, 546,
	274, 2, 3064, 3066, 9, 41, 2, 2, 3065, 3064, 3, 2, 2, 2, 3065, 3066, 3,
	2, 2, 2, 3066, 199, 3, 2, 2, 2, 3067, 3072, 5, 202, 102, 2, 3068, 3069,
	7, 947, 2, 2, 3069, 3071, 5, 202, 102, 2, 3070, 3068, 3, 2, 2, 2, 3071,
	3074, 3, 2, 2, 2, 3072, 3070, 3, 2, 2, 2, 3072, 3073, 3, 2, 2, 2, 3073,
	201, 3, 2, 2, 2, 3074, 3072, 3, 2, 2, 2, 3075, 3079, 5, 204, 103, 2, 3076,
	3078, 5, 208, 105, 2, 3077, 3076, 3, 2, 2, 2, 3078, 3081, 3, 2, 2, 2, 3079,
	3077, 3, 2, 2, 2, 3079, 3080, 3, 2, 2, 2, 3080, 3093, 3, 2, 2, 2, 3081,
	3079, 3, 2, 2, 2, 3082, 3083, 7, 945, 2, 2, 3083, 3087, 5, 204, 103, 2,
	3084, 3086, 5, 208, 105, 2, 3085, 3084, 3, 2, 2, 2, 3086, 3089, 3, 2, 2,
	2, 3087, 3085, 3, 2, 2, 2, 3087, 3088, 3, 2, 2, 2, 3088, 3090, 3, 2, 2,
	2, 3089, 3087, 3, 2, 2, 2, 3090, 3091, 7, 946, 2, 2, 3091, 3093, 3, 2,
	2, 2, 3092, 3075, 3, 2, 2, 2, 3092, 3082, 3, 2, 2, 2, 3093, 203, 3, 2,
	2, 2, 3094, 3100, 5, 452, 227, 2, 3095, 3096, 7, 112, 2, 2, 3096, 3097,
	7, 945, 2, 2, 3097, 3098, 5, 510, 256, 2, 3098, 3099, 7, 946, 2, 2, 3099,
	3101, 3, 2, 2, 2, 3100, 3095, 3, 2, 2, 2, 3100, 3101, 3, 2, 2, 2, 3101,
	3106, 3, 2, 2, 2, 3102, 3104, 7, 12, 2, 2, 3103, 3102, 3, 2, 2, 2, 3103,
	3104, 3, 2, 2, 2, 3104, 3105, 3, 2, 2, 2, 3105, 3107, 5, 478, 240, 2, 3106,
	3103, 3, 2, 2, 2, 3106, 3107, 3, 2, 2, 2, 3107, 3116, 3, 2, 2, 2, 3108,
	3113, 5, 206, 104, 2, 3109, 3110, 7, 947, 2, 2, 3110, 3112, 5, 206, 104,
	2, 3111, 3109, 3, 2, 2, 2, 3112, 3115, 3, 2, 2, 2, 3113, 3111, 3, 2, 2,
	2, 3113, 3114, 3, 2, 2, 2, 3114, 3117, 3, 2, 2, 2, 3115, 3113, 3, 2, 2,
	2, 3116, 3108, 3, 2, 2, 2, 3116, 3117, 3, 2, 2, 2, 3117, 3135, 3, 2, 2,
	2, 3118, 3124, 5, 210, 106, 2, 3119, 3120, 7, 945, 2, 2, 3120, 3121, 5,
	210, 106, 2, 3121, 3122, 7, 946, 2, 2, 3122, 3124, 3, 2, 2, 2, 3123, 3118,
	3, 2, 2, 2, 3123, 3119, 3, 2, 2, 2, 3124, 3126, 3, 2, 2, 2, 3125, 3127,
	7, 12, 2, 2, 3126, 3125, 3, 2, 2, 2, 3126, 3127, 3, 2, 2, 2, 3127, 3128,
	3, 2, 2, 2, 3128, 3129, 5, 478, 240, 2, 3129, 3135, 3, 2, 2, 2, 3130, 3131,
	7, 945, 2, 2, 3131, 3132, 5, 200, 101, 2, 3132, 3133, 7, 946, 2, 2, 3133,
	3135, 3, 2, 2, 2, 3134, 3094, 3, 2, 2, 2, 3134, 3123, 3, 2, 2, 2, 3134,
	3130, 3, 2, 2, 2, 3135, 205, 3, 2, 2, 2, 3136, 3137, 9, 42, 2, 2, 3137,
	3146, 9, 19, 2, 2, 3138, 3144, 7, 57, 2, 2, 3139, 3145, 7, 78, 2, 2, 3140,
	3141, 7, 108, 2, 2, 3141, 3145, 7, 17, 2, 2, 3142, 3143, 7, 63, 2, 2, 3143,
	3145, 7, 17, 2, 2, 3144, 3139, 3, 2, 2, 2, 3144, 3140, 3, 2, 2, 2, 3144,
	3142, 3, 2, 2, 2, 3145, 3147, 3, 2, 2, 2, 3146, 3138, 3, 2, 2, 2, 3146,
	3147, 3, 2, 2, 2, 3147, 3148, 3, 2, 2, 2, 3148, 3149, 7, 945, 2, 2, 3149,
	3150, 5, 510, 256, 2, 3150, 3151, 7, 946, 2, 2, 3151, 207, 3, 2, 2, 2,
	3152, 3154, 9, 43, 2, 2, 3153, 3152, 3, 2, 2, 2, 3153, 3154, 3, 2, 2, 2,
	3154, 3155, 3, 2, 2, 2, 3155, 3156, 7, 78, 2, 2, 3156, 3164, 5, 204, 103,
	2, 3157, 3158, 7, 103, 2, 2, 3158, 3165, 5, 546, 274, 2, 3159, 3160, 7,
	163, 2, 2, 3160, 3161, 7, 945, 2, 2, 3161, 3162, 5, 510, 256, 2, 3162,
	3163, 7, 946, 2, 2, 3163, 3165, 3, 2, 2, 2, 3164, 3157, 3, 2, 2, 2, 3164,
	3159, 3, 2, 2, 2, 3164, 3165, 3, 2, 2, 2, 3165, 3197, 3, 2, 2, 2, 3166,
	3167, 7, 147, 2, 2, 3167, 3170, 5, 204, 103, 2, 3168, 3169, 7, 103, 2,
	2, 3169, 3171, 5, 546, 274, 2, 3170, 3168, 3, 2, 2, 2, 3170, 3171, 3, 2,
	2, 2, 3171, 3197, 3, 2, 2, 2, 3172, 3174, 9, 44, 2, 2, 3173, 3175, 7, 110,
	2, 2, 3174, 3173, 3, 2, 2, 2, 3174, 3175, 3, 2, 2, 2, 3175, 3176, 3, 2,
	2, 2, 3176, 3177, 7, 78, 2, 2, 3177, 3185, 5, 204, 103, 2, 3178, 3179,
	7, 103, 2, 2, 3179, 3186, 5, 546, 274, 2, 3180, 3181, 7, 163, 2, 2, 3181,
	3182, 7, 945, 2, 2, 3182, 3183, 5, 510, 256, 2, 3183, 3184, 7, 946, 2,
	2, 3184, 3186, 3, 2, 2, 2, 3185, 3178, 3, 2, 2, 2, 3185, 3180, 3, 2, 2,
	2, 3186, 3197, 3, 2, 2, 2, 3187, 3192, 7, 98, 2, 2, 3188, 3190, 9, 44,
	2, 2, 3189, 3191, 7, 110, 2, 2, 3190, 3189, 3, 2, 2, 2, 3190, 3191, 3,
	2, 2, 2, 3191, 3193, 3, 2, 2, 2, 3192, 3188, 3, 2, 2, 2, 3192, 3193, 3,
	2, 2, 2, 3193, 3194, 3, 2, 2, 2, 3194, 3195, 7, 78, 2, 2, 3195, 3197, 5,
	204, 103, 2, 3196, 3153, 3, 2, 2, 2, 3196, 3166, 3, 2, 2, 2, 3196, 3172,
	3, 2, 2, 2, 3196, 3187, 3, 2, 2, 2, 3197, 209, 3, 2, 2, 2, 3198, 3199,
	5, 170, 86, 2, 3199, 211, 3, 2, 2, 2, 3200, 3201, 7, 945, 2, 2, 3201, 3202,
	5, 216, 109, 2, 3202, 3203, 7, 946, 2, 2, 3203, 3209, 3, 2, 2, 2, 3204,
	3205, 7, 945, 2, 2, 3205, 3206, 5, 212, 107, 2, 3206, 3207, 7, 946, 2,
	2, 3207, 3209, 3, 2, 2, 2, 3208, 3200, 3, 2, 2, 2, 3208, 3204, 3, 2, 2,
	2, 3209, 213, 3, 2, 2, 2, 3210, 3211, 7, 945, 2, 2, 3211, 3212, 5, 218,
	110, 2, 3212, 3213, 7, 946, 2, 2, 3213, 3219, 3, 2, 2, 2, 3214, 3215, 7,
	945, 2, 2, 3215, 3216, 5, 214, 108, 2, 3216, 3217, 7, 946, 2, 2, 3217,
	3219, 3, 2, 2, 2, 3218, 3210, 3, 2, 2, 2, 3218, 3214, 3, 2, 2, 2, 3219,
	215, 3, 2, 2, 2, 3220, 3224, 7, 133, 2, 2, 3221, 3223, 5, 224, 113, 2,
	3222, 3221, 3, 2, 2, 2, 3223, 3226, 3, 2, 2, 2, 3224, 3222, 3, 2, 2, 2,
	3224, 3225, 3, 2, 2, 2, 3225, 3227, 3, 2, 2, 2, 3226, 3224, 3, 2, 2, 2,
	3227, 3229, 5, 226, 114, 2, 3228, 3230, 5, 230, 116, 2, 3229, 3228, 3,
	2, 2, 2, 3229, 3230, 3, 2, 2, 2, 3230, 3232, 3, 2, 2, 2, 3231, 3233, 5,
	232, 117, 2, 3232, 3231, 3, 2, 2, 2, 3232, 3233, 3, 2, 2, 2, 3233, 3235,
	3, 2, 2, 2, 3234, 3236, 5, 196, 99, 2, 3235, 3234, 3, 2, 2, 2, 3235, 3236,
	3, 2, 2, 2, 3236, 3238, 3, 2, 2, 2, 3237, 3239, 5, 236, 119, 2, 3238, 3237,
	3, 2, 2, 2, 3238, 3239, 3, 2, 2, 2, 3239, 217, 3, 2, 2, 2, 3240, 3244,
	7, 133, 2, 2, 3241, 3243, 5, 224, 113, 2, 3242, 3241, 3, 2, 2, 2, 3243,
	3246, 3, 2, 2, 2, 3244, 3242, 3, 2, 2, 2, 3244, 3245, 3, 2, 2, 2, 3245,
	3247, 3, 2, 2, 2, 3246, 3244, 3, 2, 2, 2, 3247, 3249, 5, 226, 114, 2, 3248,
	3250, 5, 232, 117, 2, 3249, 3248, 3, 2, 2, 2, 3249, 3250, 3, 2, 2, 2, 3250,
	3252, 3, 2, 2, 2, 3251, 3253, 5, 196, 99, 2, 3252, 3251, 3, 2, 2, 2, 3252,
	3253, 3, 2, 2, 2, 3253, 3255, 3, 2, 2, 2, 3254, 3256, 5, 236, 119, 2, 3255,
	3254, 3, 2, 2, 2, 3255, 3256, 3, 2, 2, 2, 3256, 219, 3, 2, 2, 2, 3257,
	3259, 7, 156, 2, 2, 3258, 3260, 9, 37, 2, 2, 3259, 3258, 3, 2, 2, 2, 3259,
	3260, 3, 2, 2, 2, 3260, 3261, 3, 2, 2, 2, 3261, 3262, 5, 214, 108, 2, 3262,
	221, 3, 2, 2, 2, 3263, 3265, 7, 156, 2, 2, 3264, 3266, 9, 37, 2, 2, 3265,
	3264, 3, 2, 2, 2, 3265, 3266, 3, 2, 2, 2, 3266, 3269, 3, 2, 2, 2, 3267,
	3270, 5, 218, 110, 2, 3268, 3270, 5, 214, 108, 2, 3269, 3267, 3, 2, 2,
	2, 3269, 3268, 3, 2, 2, 2, 3270, 223, 3, 2, 2, 2, 3271, 3280, 9, 45, 2,
	2, 3272, 3280, 7, 65, 2, 2, 3273, 3280, 7, 147, 2, 2, 3274, 3280, 7, 144,
	2, 2, 3275, 3280, 7, 142, 2, 2, 3276, 3280, 7, 497, 2, 2, 3277, 3280, 9,
	46, 2, 2, 3278, 3280, 7, 143, 2, 2, 3279, 3271, 3, 2, 2, 2, 3279, 3272,
	3, 2, 2, 2, 3279, 3273, 3, 2, 2, 2, 3279, 3274, 3, 2, 2, 2, 3279, 3275,
	3, 2, 2, 2, 3279, 3276, 3, 2, 2, 2, 3279, 3277, 3, 2, 2, 2, 3279, 3278,
	3, 2, 2, 2, 3280, 225, 3, 2, 2, 2, 3281, 3284, 7, 929, 2, 2, 3282, 3284,
	5, 228, 115, 2, 3283, 3281, 3, 2, 2, 2, 3283, 3282, 3, 2, 2, 2, 3284, 3289,
	3, 2, 2, 2, 3285, 3286, 7, 947, 2, 2, 3286, 3288, 5, 228, 115, 2, 3287,
	3285, 3, 2, 2, 2, 3288, 3291, 3, 2, 2, 2, 3289, 3287, 3, 2, 2, 2, 3289,
	3290, 3, 2, 2, 2, 3290, 227, 3, 2, 2, 2, 3291, 3289, 3, 2, 2, 2, 3292,
	3293, 5, 454, 228, 2, 3293, 3294, 7, 944, 2, 2, 3294, 3295, 7, 929, 2,
	2, 3295, 3322, 3, 2, 2, 2, 3296, 3301, 5, 456, 229, 2, 3297, 3299, 7, 12,
	2, 2, 3298, 3297, 3, 2, 2, 2, 3298, 3299, 3, 2, 2, 2, 3299, 3300, 3, 2,
	2, 2, 3300, 3302, 5, 478, 240, 2, 3301, 3298, 3, 2, 2, 2, 3301, 3302, 3,
	2, 2, 2, 3302, 3322, 3, 2, 2, 2, 3303, 3308, 5, 532, 267, 2, 3304, 3306,
	7, 12, 2, 2, 3305, 3304, 3, 2, 2, 2, 3305, 3306, 3, 2, 2, 2, 3306, 3307,
	3, 2, 2, 2, 3307, 3309, 5, 478, 240, 2, 3308, 3305, 3, 2, 2, 2, 3308, 3309,
	3, 2, 2, 2, 3309, 3322, 3, 2, 2, 2, 3310, 3311, 7, 971, 2, 2, 3311, 3313,
	7, 920, 2, 2, 3312, 3310, 3, 2, 2, 2, 3312, 3313, 3, 2, 2, 2, 3313, 3314,
	3, 2, 2, 2, 3314, 3319, 5, 546, 274, 2, 3315, 3317, 7, 12, 2, 2, 3316,
	3315, 3, 2, 2, 2, 3316, 3317, 3, 2, 2, 2, 3317, 3318, 3, 2, 2, 2, 3318,
	3320, 5, 478, 240, 2, 3319, 3316, 3, 2, 2, 2, 3319, 3320, 3, 2, 2, 2, 3320,
	3322, 3, 2, 2, 2, 3321, 3292, 3, 2, 2, 2, 3321, 3296, 3, 2, 2, 2, 3321,
	3303, 3, 2, 2, 2, 3321, 3312, 3, 2, 2, 2, 3322, 229, 3, 2, 2, 2, 3323,
	3326, 7, 75, 2, 2, 3324, 3327, 7, 971, 2, 2, 3325, 3327, 5, 478, 240, 2,
	3326, 3324, 3, 2, 2, 2, 3326, 3325, 3, 2, 2, 2, 3327, 3335, 3, 2, 2, 2,
	3328, 3331, 7, 947, 2, 2, 3329, 3332, 7, 971, 2, 2, 3330, 3332, 5, 478,
	240, 2, 3331, 3329, 3, 2, 2, 2, 3331, 3330, 3, 2, 2, 2, 3332, 3334, 3,
	2, 2, 2, 3333, 3328, 3, 2, 2, 2, 3334, 3337, 3, 2, 2, 2, 3335, 3333, 3,
	2, 2, 2, 3335, 3336, 3, 2, 2, 2, 3336, 3384, 3, 2, 2, 2, 3337, 3335, 3,
	2, 2, 2, 3338, 3339, 7, 75, 2, 2, 3339, 3340, 7, 303, 2, 2, 3340, 3384,
	7, 960, 2, 2, 3341, 3342, 7, 75, 2, 2, 3342, 3343, 7, 111, 2, 2, 3343,
	3347, 7, 960, 2, 2, 3344, 3345, 7, 23, 2, 2, 3345, 3346, 7, 134, 2, 2,
	3346, 3348, 5, 464, 233, 2, 3347, 3344, 3, 2, 2, 2, 3347, 3348, 3, 2, 2,
	2, 3348, 3368, 3, 2, 2, 2, 3349, 3353, 9, 34, 2, 2, 3350, 3351, 7, 149,
	2, 2, 3351, 3352, 7, 17, 2, 2, 3352, 3354, 7, 960, 2, 2, 3353, 3350, 3,
	2, 2, 2, 3353, 3354, 3, 2, 2, 2, 3354, 3361, 3, 2, 2, 2, 3355, 3357, 7,
	106, 2, 2, 3356, 3355, 3, 2, 2, 2, 3356, 3357, 3, 2, 2, 2, 3357, 3358,
	3, 2, 2, 2, 3358, 3359, 7, 50, 2, 2, 3359, 3360, 7, 17, 2, 2, 3360, 3362,
	7, 960, 2, 2, 3361, 3356, 3, 2, 2, 2, 3361, 3362, 3, 2, 2, 2, 3362, 3366,
	3, 2, 2, 2, 3363, 3364, 7, 51, 2, 2, 3364, 3365, 7, 17, 2, 2, 3365, 3367,
	7, 960, 2, 2, 3366, 3363, 3, 2, 2, 2, 3366, 3367, 3, 2, 2, 2, 3367, 3369,
	3, 2, 2, 2, 3368, 3349, 3, 2, 2, 2, 3368, 3369, 3, 2, 2, 2, 3369, 3381,
	3, 2, 2, 2, 3370, 3374, 7, 88, 2, 2, 3371, 3372, 7, 146, 2, 2, 3372, 3373,
	7, 17, 2, 2, 3373, 3375, 7, 960, 2, 2, 3374, 3371, 3, 2, 2, 2, 3374, 3375,
	3, 2, 2, 2, 3375, 3379, 3, 2, 2, 2, 3376, 3377, 7, 149, 2, 2, 3377, 3378,
	7, 17, 2, 2, 3378, 3380, 7, 960, 2, 2, 3379, 3376, 3, 2, 2, 2, 3379, 3380,
	3, 2, 2, 2, 3380, 3382, 3, 2, 2, 2, 3381, 3370, 3, 2, 2, 2, 3381, 3382,
	3, 2, 2, 2, 3382, 3384, 3, 2, 2, 2, 3383, 3323, 3, 2, 2, 2, 3383, 3338,
	3, 2, 2, 2, 3383, 3341, 3, 2, 2, 2, 3384, 231, 3, 2, 2, 2, 3385, 3386,
	7, 60, 2, 2, 3386, 3389, 5, 200, 101, 2, 3387, 3388, 7, 166, 2, 2, 3388,
	3390, 5, 546, 274, 2, 3389, 3387, 3, 2, 2, 2, 3389, 3390, 3, 2, 2, 2, 3390,
	3405, 3, 2, 2, 2, 3391, 3392, 7, 63, 2, 2, 3392, 3393, 7, 17, 2, 2, 3393,
	3398, 5, 234, 118, 2, 3394, 3395, 7, 947, 2, 2, 3395, 3397, 5, 234, 118,
	2, 3396, 3394, 3, 2, 2, 2, 3397, 3400, 3, 2, 2, 2, 3398, 3396, 3, 2, 2,
	2, 3398, 3399, 3, 2, 2, 2, 3399, 3403, 3, 2, 2, 2, 3400, 3398, 3, 2, 2,
	2, 3401, 3402, 7, 168, 2, 2, 3402, 3404, 7, 472, 2, 2, 3403, 3401, 3, 2,
	2, 2, 3403, 3404, 3, 2, 2, 2, 3404, 3406, 3, 2, 2, 2, 3405, 3391, 3, 2,
	2, 2, 3405, 3406, 3, 2, 2, 2, 3406, 3409, 3, 2, 2, 2, 3407, 3408, 7, 64,
	2, 2, 3408, 3410, 5, 546, 274, 2, 3409, 3407, 3, 2, 2, 2, 3409, 3410, 3,
	2, 2, 2, 3410, 233, 3, 2, 2, 2, 3411, 3413, 5, 546, 274, 2, 3412, 3414,
	9, 41, 2, 2, 3413, 3412, 3, 2, 2, 2, 3413, 3414, 3, 2, 2, 2, 3414, 235,
	3, 2, 2, 2, 3415, 3426, 7, 86, 2, 2, 3416, 3417, 5, 484, 243, 2, 3417,
	3418, 7, 947, 2, 2, 3418, 3420, 3, 2, 2, 2, 3419, 3416, 3, 2, 2, 2, 3419,
	3420, 3, 2, 2, 2, 3420, 3421, 3, 2, 2, 2, 3421, 3427, 5, 484, 243, 2, 3422,
	3423, 5, 484, 243, 2, 3423, 3424, 7, 417, 2, 2, 3424, 3425, 5, 484, 243,
	2, 3425, 3427, 3, 2, 2, 2, 3426, 3419, 3, 2, 2, 2, 3426, 3422, 3, 2, 2,
	2, 3427, 237, 3, 2, 2, 2, 3428, 3429, 7, 501, 2, 2, 3429, 3438, 7, 521,
	2, 2, 3430, 3435, 5, 260, 131, 2, 3431, 3432, 7, 947, 2, 2, 3432, 3434,
	5, 260, 131, 2, 3433, 3431, 3, 2, 2, 2, 3434, 3437, 3, 2, 2, 2, 3435, 3433,
	3, 2, 2, 2, 3435, 3436, 3, 2, 2, 2, 3436, 3439, 3, 2, 2, 2, 3437, 3435,
	3, 2, 2, 2, 3438, 3430, 3, 2, 2, 2, 3438, 3439, 3, 2, 2, 2, 3439, 239,
	3, 2, 2, 2, 3440, 3442, 7, 259, 2, 2, 3441, 3443, 7, 541, 2, 2, 3442, 3441,
	3, 2, 2, 2, 3442, 3443, 3, 2, 2, 2, 3443, 241, 3, 2, 2, 2, 3444, 3446,
	7, 278, 2, 2, 3445, 3447, 7, 541, 2, 2, 3446, 3445, 3, 2, 2, 2, 3446, 3447,
	3, 2, 2, 2, 3447, 3453, 3, 2, 2, 2, 3448, 3450, 7, 11, 2, 2, 3449, 3451,
	7, 413, 2, 2, 3450, 3449, 3, 2, 2, 2, 3450, 3451, 3, 2, 2, 2, 3451, 3452,
	3, 2, 2, 2, 3452, 3454, 7, 266, 2, 2, 3453, 3448, 3, 2, 2, 2, 3453, 3454,
	3, 2, 2, 2, 3454, 3459, 3, 2, 2, 2, 3455, 3457, 7, 413, 2, 2, 3456, 3455,
	3, 2, 2, 2, 3456, 3457, 3, 2, 2, 2, 3457, 3458, 3, 2, 2, 2, 3458, 3460,
	7, 121, 2, 2, 3459, 3456, 3, 2, 2, 2, 3459, 3460, 3, 2, 2, 2, 3460, 243,
	3, 2, 2, 2, 3461, 3463, 7, 471, 2, 2, 3462, 3464, 7, 541, 2, 2, 3463, 3462,
	3, 2, 2, 2, 3463, 3464, 3, 2, 2, 2, 3464, 3470, 3, 2, 2, 2, 3465, 3467,
	7, 11, 2, 2, 3466, 3468, 7, 413, 2, 2, 3467, 3466, 3, 2, 2, 2, 3467, 3468,
	3, 2, 2, 2, 3468, 3469, 3, 2, 2, 2, 3469, 3471, 7, 266, 2, 2, 3470, 3465,
	3, 2, 2, 2, 3470, 3471, 3, 2, 2, 2, 3471, 3476, 3, 2, 2, 2, 3472, 3474,
	7, 413, 2, 2, 3473, 3472, 3, 2, 2, 2, 3473, 3474, 3, 2, 2, 2, 3474, 3475,
	3, 2, 2, 2, 3475, 3477, 7, 121, 2, 2, 3476, 3473, 3, 2, 2, 2, 3476, 3477,
	3, 2, 2, 2, 3477, 245, 3, 2, 2, 2, 3478, 3479, 7, 477, 2, 2, 3479, 3480,
	5, 478, 240, 2, 3480, 247, 3, 2, 2, 2, 3481, 3483, 7, 471, 2, 2, 3482,
	3484, 7, 541, 2, 2, 3483, 3482, 3, 2, 2, 2, 3483, 3484, 3, 2, 2, 2, 3484,
	3485, 3, 2, 2, 2, 3485, 3487, 7, 151, 2, 2, 3486, 3488, 7, 477, 2, 2, 3487,
	3486, 3, 2, 2, 2, 3487, 3488, 3, 2, 2, 2, 3488, 3489, 3, 2, 2, 2, 3489,
	3490, 5, 478, 240, 2, 3490, 249, 3, 2, 2, 2, 3491, 3492, 7, 121, 2, 2,
	3492, 3493, 7, 477, 2, 2, 3493, 3494, 5, 478, 240, 2, 3494, 251, 3, 2,
	2, 2, 3495, 3496, 7, 90, 2, 2, 3496, 3497, 7, 559, 2, 2, 3497, 3502, 5,
	262, 132, 2, 3498, 3499, 7, 947, 2, 2, 3499, 3501, 5, 262, 132, 2, 3500,
	3498, 3, 2, 2, 2, 3501, 3504, 3, 2, 2, 2, 3502, 3500, 3, 2, 2, 2, 3502,
	3503, 3, 2, 2, 2, 3503, 253, 3, 2, 2, 2, 3504, 3502, 3, 2, 2, 2, 3505,
	3506, 7, 158, 2, 2, 3506, 3507, 7, 559, 2, 2, 3507, 255, 3, 2, 2, 2, 3508,
	3509, 7, 134, 2, 2, 3509, 3510, 7, 255, 2, 2, 3510, 3511, 7, 936, 2, 2,
	3511, 3512, 9, 22, 2, 2, 3512, 257, 3, 2, 2, 2, 3513, 3515, 7, 134, 2,
	2, 3514, 3516, 9, 47, 2, 2, 3515, 3514, 3, 2, 2, 2, 3515, 3516, 3, 2, 2,
	2, 3516, 3517, 3, 2, 2, 2, 3517, 3518, 7, 521, 2, 2, 3518, 3523, 5, 264,
	133, 2, 3519, 3520, 7, 947, 2, 2, 3520, 3522, 5, 264, 133, 2, 3521, 3519,
	3, 2, 2, 2, 3522, 3525, 3, 2, 2, 2, 3523, 3521, 3, 2, 2, 2, 3523, 3524,
	3, 2, 2, 2, 3524, 259, 3, 2, 2, 2, 3525, 3523, 3, 2, 2, 2, 3526, 3527,
	7, 168, 2, 2, 3527, 3528, 7, 285, 2, 2, 3528, 3534, 7, 488, 2, 2, 3529,
	3530, 7, 117, 2, 2, 3530, 3534, 7, 169, 2, 2, 3531, 3532, 7, 117, 2, 2,
	3532, 3534, 7, 422, 2, 2, 3533, 3526, 3, 2, 2, 2, 3533, 3529, 3, 2, 2,
	2, 3533, 3531, 3, 2, 2, 2, 3534, 261, 3, 2, 2, 2, 3535, 3540, 5, 452, 227,
	2, 3536, 3538, 7, 12, 2, 2, 3537, 3536, 3, 2, 2, 2, 3537, 3538, 3, 2, 2,
	2, 3538, 3539, 3, 2, 2, 2, 3539, 3541, 5, 478, 240, 2, 3540, 3537, 3, 2,
	2, 2, 3540, 3541, 3, 2, 2, 2, 3541, 3550, 3, 2, 2, 2, 3542, 3544, 7, 117,
	2, 2, 3543, 3545, 7, 369, 2, 2, 3544, 3543, 3, 2, 2, 2, 3544, 3545, 3,
	2, 2, 2, 3545, 3551, 3, 2, 2, 2, 3546, 3548, 7, 92, 2, 2, 3547, 3546, 3,
	2, 2, 2, 3547, 3548, 3, 2, 2, 2, 3548, 3549, 3, 2, 2, 2, 3549, 3551, 7,
	169, 2, 2, 3550, 3542, 3, 2, 2, 2, 3550, 3547, 3, 2, 2, 2, 3551, 263, 3,
	2, 2, 2, 3552, 3553, 7, 359, 2, 2, 3553, 3554, 7, 367, 2, 2, 3554, 3560,
	5, 266, 134, 2, 3555, 3556, 7, 117, 2, 2, 3556, 3560, 7, 169, 2, 2, 3557,
	3558, 7, 117, 2, 2, 3558, 3560, 7, 422, 2, 2, 3559, 3552, 3, 2, 2, 2, 3559,
	3555, 3, 2, 2, 2, 3559, 3557, 3, 2, 2, 2, 3560, 265, 3, 2, 2, 2, 3561,
	3562, 7, 619, 2, 2, 3562, 3569, 7, 117, 2, 2, 3563, 3564, 7, 117, 2, 2,
	3564, 3569, 7, 620, 2, 2, 3565, 3566, 7, 117, 2, 2, 3566, 3569, 7, 621,
	2, 2, 3567, 3569, 7, 622, 2, 2, 3568, 3561, 3, 2, 2, 2, 3568, 3563, 3,
	2, 2, 2, 3568, 3565, 3, 2, 2, 2, 3568, 3567, 3, 2, 2, 2, 3569, 267, 3,
	2, 2, 2, 3570, 3571, 7, 22, 2, 2, 3571, 3572, 7, 372, 2, 2, 3572, 3573,
	7, 151, 2, 2, 3573, 3578, 5, 286, 144, 2, 3574, 3575, 7, 947, 2, 2, 3575,
	3577, 5, 286, 144, 2, 3576, 3574, 3, 2, 2, 2, 3577, 3580, 3, 2, 2, 2, 3578,
	3576, 3, 2, 2, 2, 3578, 3579, 3, 2, 2, 2, 3579, 3582, 3, 2, 2, 2, 3580,
	3578, 3, 2, 2, 2, 3581, 3583, 5, 294, 148, 2, 3582, 3581, 3, 2, 2, 2, 3582,
	3583, 3, 2, 2, 2, 3583, 269, 3, 2, 2, 2, 3584, 3585, 7, 22, 2, 2, 3585,
	3586, 7, 467, 2, 2, 3586, 3587, 7, 329, 2, 2, 3587, 3592, 5, 296, 149,
	2, 3588, 3589, 7, 947, 2, 2, 3589, 3591, 5, 296, 149, 2, 3590, 3588, 3,
	2, 2, 2, 3591, 3594, 3, 2, 2, 2, 3592, 3590, 3, 2, 2, 2, 3592, 3593, 3,
	2, 2, 2, 3593, 271, 3, 2, 2, 2, 3594, 3592, 3, 2, 2, 2, 3595, 3596, 7,
	115, 2, 2, 3596, 3597, 9, 48, 2, 2, 3597, 3598, 7, 371, 2, 2, 3598, 3599,
	9, 49, 2, 2, 3599, 3600, 7, 960, 2, 2, 3600, 273, 3, 2, 2, 2, 3601, 3602,
	7, 468, 2, 2, 3602, 3603, 7, 372, 2, 2, 3603, 275, 3, 2, 2, 2, 3604, 3605,
	7, 468, 2, 2, 3605, 3607, 7, 486, 2, 2, 3606, 3608, 7, 8, 2, 2, 3607, 3606,
	3, 2, 2, 2, 3607, 3608, 3, 2, 2, 2, 3608, 3610, 3, 2, 2, 2, 3609, 3611,
	5, 294, 148, 2, 3610, 3609, 3, 2, 2, 2, 3610, 3611, 3, 2, 2, 2, 3611, 277,
	3, 2, 2, 2, 3612, 3613, 7, 501, 2, 2, 3613, 3622, 7, 486, 2, 2, 3614, 3619,
	5, 298, 150, 2, 3615, 3616, 7, 947, 2, 2, 3616, 3618, 5, 298, 150, 2, 3617,
	3615, 3, 2, 2, 2, 3618, 3621, 3, 2, 2, 2, 3619, 3617, 3, 2, 2, 2, 3619,
	3620, 3, 2, 2, 2, 3620, 3623, 3, 2, 2, 2, 3621, 3619, 3, 2, 2, 2, 3622,
	3614, 3, 2, 2, 2, 3622, 3623, 3, 2, 2, 2, 3623, 3624, 3, 2, 2, 2, 3624,
	3626, 7, 529, 2, 2, 3625, 3627, 5, 300, 151, 2, 3626, 3625, 3, 2, 2, 2,
	3626, 3627, 3, 2, 2, 2, 3627, 3631, 3, 2, 2, 2, 3628, 3630, 5, 302, 152,
	2, 3629, 3628, 3, 2, 2, 2, 3630, 3633, 3, 2, 2, 2, 3631, 3629, 3, 2, 2,
	2, 3631, 3632, 3, 2, 2, 2, 3632, 3635, 3, 2, 2, 2, 3633, 3631, 3, 2, 2,
	2, 3634, 3636, 5, 294, 148, 2, 3635, 3634, 3, 2, 2, 2, 3635, 3636, 3, 2,
	2, 2, 3636, 279, 3, 2, 2, 2, 3637, 3638, 7, 507, 2, 2, 3638, 3647, 7, 486,
	2, 2, 3639, 3644, 5, 298, 150, 2, 3640, 3641, 7, 947, 2, 2, 3641, 3643,
	5, 298, 150, 2, 3642, 3640, 3, 2, 2, 2, 3643, 3646, 3, 2, 2, 2, 3644, 3642,
	3, 2, 2, 2, 3644, 3645, 3, 2, 2, 2, 3645, 3648, 3, 2, 2, 2, 3646, 3644,
	3, 2, 2, 2, 3647, 3639, 3, 2, 2, 2, 3647, 3648, 3, 2, 2, 2, 3648, 281,
	3, 2, 2, 2, 3649, 3650, 7, 501, 2, 2, 3650, 3651, 7, 340, 2, 2, 3651, 283,
	3, 2, 2, 2, 3652, 3653, 7, 501, 2, 2, 3653, 3654, 7, 340, 2, 2, 3654, 285,
	3, 2, 2, 2, 3655, 3656, 5, 288, 145, 2, 3656, 3657, 7, 936, 2, 2, 3657,
	3658, 7, 960, 2, 2, 3658, 3685, 3, 2, 2, 2, 3659, 3660, 5, 290, 146, 2,
	3660, 3661, 7, 936, 2, 2, 3661, 3662, 5, 484, 243, 2, 3662, 3685, 3, 2,
	2, 2, 3663, 3664, 5, 292, 147, 2, 3664, 3665, 7, 936, 2, 2, 3665, 3666,
	9, 22, 2, 2, 3666, 3685, 3, 2, 2, 2, 3667, 3668, 7, 376, 2, 2, 3668, 3669,
	7, 936, 2, 2, 3669, 3685, 7, 963, 2, 2, 3670, 3671, 7, 347, 2, 2, 3671,
	3672, 7, 936, 2, 2, 3672, 3681, 7, 945, 2, 2, 3673, 3678, 5, 478, 240,
	2, 3674, 3675, 7, 947, 2, 2, 3675, 3677, 5, 478, 240, 2, 3676, 3674, 3,
	2, 2, 2, 3677, 3680, 3, 2, 2, 2, 3678, 3676, 3, 2, 2, 2, 3678, 3679, 3,
	2, 2, 2, 3679, 3682, 3, 2, 2, 2, 3680, 3678, 3, 2, 2, 2, 3681, 3673, 3,
	2, 2, 2, 3681, 3682, 3, 2, 2, 2, 3682, 3683, 3, 2, 2, 2, 3683, 3685, 7,
	946, 2, 2, 3684, 3655, 3, 2, 2, 2, 3684, 3659, 3, 2, 2, 2, 3684, 3663,
	3, 2, 2, 2, 3684, 3667, 3, 2, 2, 2, 3684, 3670, 3, 2, 2, 2, 3685, 287,
	3, 2, 2, 2, 3686, 3687, 9, 50, 2, 2, 3687, 289, 3, 2, 2, 2, 3688, 3689,
	9, 51, 2, 2, 3689, 291, 3, 2, 2, 2, 3690, 3691, 9, 52, 2, 2, 3691, 293,
	3, 2, 2, 2, 3692, 3693, 7, 57, 2, 2, 3693, 3694, 7, 268, 2, 2, 3694, 3695,
	7, 960, 2, 2, 3695, 295, 3, 2, 2, 2, 3696, 3697, 7, 460, 2, 2, 3697, 3698,
	7, 936, 2, 2, 3698, 3699, 7, 945, 2, 2, 3699, 3700, 5, 510, 256, 2, 3700,
	3701, 7, 946, 2, 2, 3701, 3739, 3, 2, 2, 2, 3702, 3703, 7, 462, 2, 2, 3703,
	3704, 7, 936, 2, 2, 3704, 3705, 7, 945, 2, 2, 3705, 3706, 5, 510, 256,
	2, 3706, 3707, 7, 946, 2, 2, 3707, 3739, 3, 2, 2, 2, 3708, 3709, 7, 461,
	2, 2, 3709, 3710, 7, 936, 2, 2, 3710, 3711, 7, 945, 2, 2, 3711, 3712, 5,
	512, 257, 2, 3712, 3713, 7, 946, 2, 2, 3713, 3739, 3, 2, 2, 2, 3714, 3715,
	7, 463, 2, 2, 3715, 3716, 7, 936, 2, 2, 3716, 3717, 7, 945, 2, 2, 3717,
	3718, 5, 512, 257, 2, 3718, 3719, 7, 946, 2, 2, 3719, 3739, 3, 2, 2, 2,
	3720, 3721, 7, 465, 2, 2, 3721, 3722, 7, 936, 2, 2, 3722, 3723, 7, 945,
	2, 2, 3723, 3724, 5, 522, 262, 2, 3724, 3725, 7, 946, 2, 2, 3725, 3739,
	3, 2, 2, 2, 3726, 3727, 7, 466, 2, 2, 3727, 3728, 7, 936, 2, 2, 3728, 3729,
	7, 945, 2, 2, 3729, 3730, 5, 522, 262, 2, 3730, 3731, 7, 946, 2, 2, 3731,
	3739, 3, 2, 2, 2, 3732, 3733, 7, 464, 2, 2, 3733, 3734, 7, 936, 2, 2, 3734,
	3735, 7, 945, 2, 2, 3735, 3736, 5, 514, 258, 2, 3736, 3737, 7, 946, 2,
	2, 3737, 3739, 3, 2, 2, 2, 3738, 3696, 3, 2, 2, 2, 3738, 3702, 3, 2, 2,
	2, 3738, 3708, 3, 2, 2, 2, 3738, 3714, 3, 2, 2, 2, 3738, 3720, 3, 2, 2,
	2, 3738, 3726, 3, 2, 2, 2, 3738, 3732, 3, 2, 2, 2, 3739, 297, 3, 2, 2,
	2, 3740, 3741, 9, 53, 2, 2, 3741, 299, 3, 2, 2, 2, 3742, 3743, 9, 54, 2,
	2, 3743, 3744, 7, 936, 2, 2, 3744, 3761, 5, 304, 153, 2, 3745, 3746, 7,
	378, 2, 2, 3746, 3747, 7, 936, 2, 2, 3747, 3748, 7, 960, 2, 2, 3748, 3749,
	7, 947, 2, 2, 3749, 3750, 7, 379, 2, 2, 3750, 3751, 7, 936, 2, 2, 3751,
	3761, 5, 484, 243, 2, 3752, 3753, 7, 454, 2, 2, 3753, 3754, 7, 936, 2,
	2, 3754, 3755, 7, 960, 2, 2, 3755, 3756, 7, 947, 2, 2, 3756, 3757, 7, 455,
	2, 2, 3757, 3758, 7, 936, 2, 2, 3758, 3761, 5, 484, 243, 2, 3759, 3761,
	7, 495, 2, 2, 3760, 3742, 3, 2, 2, 2, 3760, 3745, 3, 2, 2, 2, 3760, 3752,
	3, 2, 2, 2, 3760, 3759, 3, 2, 2, 2, 3761, 301, 3, 2, 2, 2, 3762, 3763,
	7, 531, 2, 2, 3763, 3764, 7, 936, 2, 2, 3764, 3775, 7, 960, 2, 2, 3765,
	3766, 7, 433, 2, 2, 3766, 3767, 7, 936, 2, 2, 3767, 3775, 7, 960, 2, 2,
	3768, 3769, 7, 294, 2, 2, 3769, 3770, 7, 936, 2, 2, 3770, 3775, 7, 960,
	2, 2, 3771, 3772, 7, 436, 2, 2, 3772, 3773, 7, 936, 2, 2, 3773, 3775, 7,
	960, 2, 2, 3774, 3762, 3, 2, 2, 2, 3774, 3765, 3, 2, 2, 2, 3774, 3768,
	3, 2, 2, 2, 3774, 3771, 3, 2, 2, 2, 3775, 303, 3, 2, 2, 2, 3776, 3781,
	5, 470, 236, 2, 3777, 3778, 7, 947, 2, 2, 3778, 3780, 5, 470, 236, 2, 3779,
	3777, 3, 2, 2, 2, 3780, 3783, 3, 2, 2, 2, 3781, 3779, 3, 2, 2, 2, 3781,
	3782, 3, 2, 2, 2, 3782, 3786, 3, 2, 2, 2, 3783, 3781, 3, 2, 2, 2, 3784,
	3786, 7, 960, 2, 2, 3785, 3776, 3, 2, 2, 2, 3785, 3784, 3, 2, 2, 2, 3786,
	305, 3, 2, 2, 2, 3787, 3788, 7, 544, 2, 2, 3788, 3789, 9, 55, 2, 2, 3789,
	3791, 5, 472, 237, 2, 3790, 3792, 9, 56, 2, 2, 3791, 3790, 3, 2, 2, 2,
	3791, 3792, 3, 2, 2, 2, 3792, 307, 3, 2, 2, 2, 3793, 3794, 7, 544, 2, 2,
	3794, 3795, 7, 308, 2, 2, 3795, 3801, 5, 472, 237, 2, 3796, 3799, 7, 513,
	2, 2, 3797, 3798, 7, 57, 2, 2, 3798, 3800, 7, 402, 2, 2, 3799, 3797, 3,
	2, 2, 2, 3799, 3800, 3, 2, 2, 2, 3800, 3802, 3, 2, 2, 2, 3801, 3796, 3,
	2, 2, 2, 3801, 3802, 3, 2, 2, 2, 3802, 309, 3, 2, 2, 2, 3803, 3804, 7,
	544, 2, 2, 3804, 3805, 7, 440, 2, 2, 3805, 3806, 5, 472, 237, 2, 3806,
	311, 3, 2, 2, 2, 3807, 3808, 7, 544, 2, 2, 3808, 3809, 7, 278, 2, 2, 3809,
	3812, 5, 472, 237, 2, 3810, 3811, 7, 420, 2, 2, 3811, 3813, 7, 434, 2,
	2, 3812, 3810, 3, 2, 2, 2, 3812, 3813, 3, 2, 2, 2, 3813, 313, 3, 2, 2,
	2, 3814, 3815, 7, 544, 2, 2, 3815, 3816, 7, 471, 2, 2, 3816, 3817, 5, 472,
	237, 2, 3817, 315, 3, 2, 2, 2, 3818, 3819, 7, 544, 2, 2, 3819, 3822, 7,
	450, 2, 2, 3820, 3821, 7, 30, 2, 2, 3821, 3823, 5, 472, 237, 2, 3822, 3820,
	3, 2, 2, 2, 3822, 3823, 3, 2, 2, 2, 3823, 317, 3, 2, 2, 2, 3824, 3825,
	7, 440, 2, 2, 3825, 3826, 5, 478, 240, 2, 3826, 3827, 7, 60, 2, 2, 3827,
	3828, 9, 57, 2, 2, 3828, 319, 3, 2, 2, 2, 3829, 3830, 7, 561, 2, 2, 3830,
	3833, 5, 478, 240, 2, 3831, 3832, 7, 163, 2, 2, 3832, 3834, 5, 524, 263,
	2, 3833, 3831, 3, 2, 2, 2, 3833, 3834, 3, 2, 2, 2, 3834, 321, 3, 2, 2,
	2, 3835, 3836, 9, 58, 2, 2, 3836, 3837, 7, 440, 2, 2, 3837, 3838, 5, 478,
	240, 2, 3838, 323, 3, 2, 2, 2, 3839, 3842, 5, 326, 164, 2, 3840, 3842,
	5, 6, 4, 2, 3841, 3839, 3, 2, 2, 2, 3841, 3840, 3, 2, 2, 2, 3842, 325,
	3, 2, 2, 2, 3843, 3844, 5, 478, 240, 2, 3844, 3845, 7, 956, 2, 2, 3845,
	3847, 3, 2, 2, 2, 3846, 3843, 3, 2, 2, 2, 3846, 3847, 3, 2, 2, 2, 3847,
	3848, 3, 2, 2, 2, 3848, 3886, 7, 259, 2, 2, 3849, 3850, 5, 346, 174, 2,
	3850, 3851, 7, 948, 2, 2, 3851, 3853, 3, 2, 2, 2, 3852, 3849, 3, 2, 2,
	2, 3853, 3856, 3, 2, 2, 2, 3854, 3852, 3, 2, 2, 2, 3854, 3855, 3, 2, 2,
	2, 3855, 3862, 3, 2, 2, 2, 3856, 3854, 3, 2, 2, 2, 3857, 3858, 5, 348,
	175, 2, 3858, 3859, 7, 948, 2, 2, 3859, 3861, 3, 2, 2, 2, 3860, 3857, 3,
	2, 2, 2, 3861, 3864, 3, 2, 2, 2, 3862, 3860, 3, 2, 2, 2, 3862, 3863, 3,
	2, 2, 2, 3863, 3870, 3, 2, 2, 2, 3864, 3862, 3, 2, 2, 2, 3865, 3866, 5,
	350, 176, 2, 3866, 3867, 7, 948, 2, 2, 3867, 3869, 3, 2, 2, 2, 3868, 3865,
	3, 2, 2, 2, 3869, 3872, 3, 2, 2, 2, 3870, 3868, 3, 2, 2, 2, 3870, 3871,
	3, 2, 2, 2, 3871, 3878, 3, 2, 2, 2, 3872, 3870, 3, 2, 2, 2, 3873, 3874,
	5, 352, 177, 2, 3874, 3875, 7, 948, 2, 2, 3875, 3877, 3, 2, 2, 2, 3876,
	3873, 3, 2, 2, 2, 3877, 3880, 3, 2, 2, 2, 3878, 3876, 3, 2, 2, 2, 3878,
	3879, 3, 2, 2, 2, 3879, 3882, 3, 2, 2, 2, 3880, 3878, 3, 2, 2, 2, 3881,
	3883, 5, 356, 179, 2, 3882, 3881, 3, 2, 2, 2, 3883, 3884, 3, 2, 2, 2, 3884,
	3882, 3, 2, 2, 2, 3884, 3885, 3, 2, 2, 2, 3885, 3887, 3, 2, 2, 2, 3886,
	3854, 3, 2, 2, 2, 3886, 3887, 3, 2, 2, 2, 3887, 3888, 3, 2, 2, 2, 3888,
	3890, 7, 308, 2, 2, 3889, 3891, 5, 478, 240, 2, 3890, 3889, 3, 2, 2, 2,
	3890, 3891, 3, 2, 2, 2, 3891, 327, 3, 2, 2, 2, 3892, 3895, 7, 20, 2, 2,
	3893, 3896, 5, 478, 240, 2, 3894, 3896, 5, 546, 274, 2, 3895, 3893, 3,
	2, 2, 2, 3895, 3894, 3, 2, 2, 2, 3895, 3896, 3, 2, 2, 2, 3896, 3908, 3,
	2, 2, 2, 3897, 3900, 7, 165, 2, 2, 3898, 3901, 5, 496, 249, 2, 3899, 3901,
	5, 546, 274, 2, 3900, 3898, 3, 2, 2, 2, 3900, 3899, 3, 2, 2, 2, 3901, 3902,
	3, 2, 2, 2, 3902, 3904, 7, 150, 2, 2, 3903, 3905, 5, 356, 179, 2, 3904,
	3903, 3, 2, 2, 2, 3905, 3906, 3, 2, 2, 2, 3906, 3904, 3, 2, 2, 2, 3906,
	3907, 3, 2, 2, 2, 3907, 3909, 3, 2, 2, 2, 3908, 3897, 3, 2, 2, 2, 3909,
	3910, 3, 2, 2, 2, 3910, 3908, 3, 2, 2, 2, 3910, 3911, 3, 2, 2, 2, 3911,
	3918, 3, 2, 2, 2, 3912, 3914, 7, 48, 2, 2, 3913, 3915, 5, 356, 179, 2,
	3914, 3913, 3, 2, 2, 2, 3915, 3916, 3, 2, 2, 2, 3916, 3914, 3, 2, 2, 2,
	3916, 3917, 3, 2, 2, 2, 3917, 3919, 3, 2, 2, 2, 3918, 3912, 3, 2, 2, 2,
	3918, 3919, 3, 2, 2, 2, 3919, 3920, 3, 2, 2, 2, 3920, 3921, 7, 308, 2,
	2, 3921, 3922, 7, 20, 2, 2, 3922, 329, 3, 2, 2, 2, 3923, 3924, 7, 66, 2,
	2, 3924, 3925, 5, 546, 274, 2, 3925, 3927, 7, 150, 2, 2, 3926, 3928, 5,
	356, 179, 2, 3927, 3926, 3, 2, 2, 2, 3928, 3929, 3, 2, 2, 2, 3929, 3927,
	3, 2, 2, 2, 3929, 3930, 3, 2, 2, 2, 3930, 3941, 3, 2, 2, 2, 3931, 3932,
	7, 49, 2, 2, 3932, 3933, 5, 546, 274, 2, 3933, 3935, 7, 150, 2, 2, 3934,
	3936, 5, 356, 179, 2, 3935, 3934, 3, 2, 2, 2, 3936, 3937, 3, 2, 2, 2, 3937,
	3935, 3, 2, 2, 2, 3937, 3938, 3, 2, 2, 2, 3938, 3940, 3, 2, 2, 2, 3939,
	3931, 3, 2, 2, 2, 3940, 3943, 3, 2, 2, 2, 3941, 3939, 3, 2, 2, 2, 3941,
	3942, 3, 2, 2, 2, 3942, 3950, 3, 2, 2, 2, 3943, 3941, 3, 2, 2, 2, 3944,
	3946, 7, 48, 2, 2, 3945, 3947, 5, 356, 179, 2, 3946, 3945, 3, 2, 2, 2,
	3947, 3948, 3, 2, 2, 2, 3948, 3946, 3, 2, 2, 2, 3948, 3949, 3, 2, 2, 2,
	3949, 3951, 3, 2, 2, 2, 3950, 3944, 3, 2, 2, 2, 3950, 3951, 3, 2, 2, 2,
	3951, 3952, 3, 2, 2, 2, 3952, 3953, 7, 308, 2, 2, 3953, 3954, 7, 66, 2,
	2, 3954, 331, 3, 2, 2, 2, 3955, 3956, 7, 77, 2, 2, 3956, 3957, 5, 478,
	240, 2, 3957, 333, 3, 2, 2, 2, 3958, 3959, 7, 83, 2, 2, 3959, 3960, 5,
	478, 240, 2, 3960, 335, 3, 2, 2, 2, 3961, 3962, 5, 478, 240, 2, 3962, 3963,
	7, 956, 2, 2, 3963, 3965, 3, 2, 2, 2, 3964, 3961, 3, 2, 2, 2, 3964, 3965,
	3, 2, 2, 2, 3965, 3966, 3, 2, 2, 2, 3966, 3968, 7, 91, 2, 2, 3967, 3969,
	5, 356, 179, 2, 3968, 3967, 3, 2, 2, 2, 3969, 3970, 3, 2, 2, 2, 3970, 3968,
	3, 2, 2, 2, 3970, 3971, 3, 2, 2, 2, 3971, 3972, 3, 2, 2, 2, 3972, 3973,
	7, 308, 2, 2, 3973, 3975, 7, 91, 2, 2, 3974, 3976, 5, 478, 240, 2, 3975,
	3974, 3, 2, 2, 2, 3975, 3976, 3, 2, 2, 2, 3976, 337, 3, 2, 2, 2, 3977,
	3978, 5, 478, 240, 2, 3978, 3979, 7, 956, 2, 2, 3979, 3981, 3, 2, 2, 2,
	3980, 3977, 3, 2, 2, 2, 3980, 3981, 3, 2, 2, 2, 3981, 3982, 3, 2, 2, 2,
	3982, 3984, 7, 123, 2, 2, 3983, 3985, 5, 356, 179, 2, 3984, 3983, 3, 2,
	2, 2, 3985, 3986, 3, 2, 2, 2, 3986, 3984, 3, 2, 2, 2, 3986, 3987, 3, 2,
	2, 2, 3987, 3988, 3, 2, 2, 2, 3988, 3989, 7, 529, 2, 2, 3989, 3990, 5,
	546, 274, 2, 3990, 3991, 7, 308, 2, 2, 3991, 3993, 7, 123, 2, 2, 3992,
	3994, 5, 478, 240, 2, 3993, 3992, 3, 2, 2, 2, 3993, 3994, 3, 2, 2, 2, 3994,
	339, 3, 2, 2, 2, 3995, 3996, 7, 127, 2, 2, 3996, 3997, 5, 546, 274, 2,
	3997, 341, 3, 2, 2, 2, 3998, 3999, 5, 478, 240, 2, 3999, 4000, 7, 956,
	2, 2, 4000, 4002, 3, 2, 2, 2, 4001, 3998, 3, 2, 2, 2, 4001, 4002, 3, 2,
	2, 2, 4002, 4003, 3, 2, 2, 2, 4003, 4004, 7, 167, 2, 2, 4004, 4005, 5,
	546, 274, 2, 4005, 4007, 7, 302, 2, 2, 4006, 4008, 5, 356, 179, 2, 4007,
	4006, 3, 2, 2, 2, 4008, 4009, 3, 2, 2, 2, 4009, 4007, 3, 2, 2, 2, 4009,
	4010, 3, 2, 2, 2, 4010, 4011, 3, 2, 2, 2, 4011, 4012, 7, 308, 2, 2, 4012,
	4014, 7, 167, 2, 2, 4013, 4015, 5, 478, 240, 2, 4014, 4013, 3, 2, 2, 2,
	4014, 4015, 3, 2, 2, 2, 4015, 343, 3, 2, 2, 2, 4016, 4017, 7, 272, 2, 2,
	4017, 4032, 5, 478, 240, 2, 4018, 4023, 7, 56, 2, 2, 4019, 4021, 7, 412,
	2, 2, 4020, 4019, 3, 2, 2, 2, 4020, 4021, 3, 2, 2, 2, 4021, 4022, 3, 2,
	2, 2, 4022, 4024, 7, 60, 2, 2, 4023, 4020, 3, 2, 2, 2, 4023, 4024, 3, 2,
	2, 2, 4024, 4025, 3, 2, 2, 2, 4025, 4026, 5, 478, 240, 2, 4026, 4027, 7,
	75, 2, 2, 4027, 4028, 5, 510, 256, 2, 4028, 4032, 3, 2, 2, 2, 4029, 4030,
	7, 423, 2, 2, 4030, 4032, 5, 478, 240, 2, 4031, 4016, 3, 2, 2, 2, 4031,
	4018, 3, 2, 2, 2, 4031, 4029, 3, 2, 2, 2, 4032, 345, 3, 2, 2, 2, 4033,
	4034, 7, 37, 2, 2, 4034, 4035, 5, 510, 256, 2, 4035, 4038, 5, 498, 250,
	2, 4036, 4037, 7, 38, 2, 2, 4037, 4039, 5, 526, 264, 2, 4038, 4036, 3,
	2, 2, 2, 4038, 4039, 3, 2, 2, 2, 4039, 347, 3, 2, 2, 2, 4040, 4041, 7,
	37, 2, 2, 4041, 4042, 5, 478, 240, 2, 4042, 4043, 7, 27, 2, 2, 4043, 4050,
	7, 57, 2, 2, 4044, 4051, 5, 484, 243, 2, 4045, 4047, 7, 140, 2, 2, 4046,
	4048, 7, 535, 2, 2, 4047, 4046, 3, 2, 2, 2, 4047, 4048, 3, 2, 2, 2, 4048,
	4049, 3, 2, 2, 2, 4049, 4051, 7, 960, 2, 2, 4050, 4044, 3, 2, 2, 2, 4050,
	4045, 3, 2, 2, 2, 4051, 349, 3, 2, 2, 2, 4052, 4053, 7, 37, 2, 2, 4053,
	4054, 5, 478, 240, 2, 4054, 4055, 7, 34, 2, 2, 4055, 4056, 7, 57, 2, 2,
	4056, 4057, 5, 170, 86, 2, 4057, 351, 3, 2, 2, 2, 4058, 4059, 7, 37, 2,
	2, 4059, 4060, 9, 59, 2, 2, 4060, 4061, 7, 341, 2, 2, 4061, 4062, 7, 57,
	2, 2, 4062, 4067, 5, 354, 178, 2, 4063, 4064, 7, 947, 2, 2, 4064, 4066,
	5, 354, 178, 2, 4065, 4063, 3, 2, 2, 2, 4066, 4069, 3, 2, 2, 2, 4067, 4065,
	3, 2, 2, 2, 4067, 4068, 3, 2, 2, 2, 4068, 4070, 3, 2, 2, 2, 4069, 4067,
	3, 2, 2, 2, 4070, 4071, 5, 324, 163, 2, 4071, 353, 3, 2, 2, 2, 4072, 4084,
	5, 484, 243, 2, 4073, 4075, 7, 140, 2, 2, 4074, 4076, 7, 535, 2, 2, 4075,
	4074, 3, 2, 2, 2, 4075, 4076, 3, 2, 2, 2, 4076, 4077, 3, 2, 2, 2, 4077,
	4084, 7, 960, 2, 2, 4078, 4084, 5, 478, 240, 2, 4079, 4084, 7, 141, 2,
	2, 4080, 4081, 7, 100, 2, 2, 4081, 4084, 7, 334, 2, 2, 4082, 4084, 7, 139,
	2, 2, 4083, 4072, 3, 2, 2, 2, 4083, 4073, 3, 2, 2, 2, 4083, 4078, 3, 2,
	2, 2, 4083, 4079, 3, 2, 2, 2, 4083, 4080, 3, 2, 2, 2, 4083, 4082, 3, 2,
	2, 2, 4084, 355, 3, 2, 2, 2, 4085, 4088, 5, 20, 11, 2, 4086, 4088, 5, 6,
	4, 2, 4087, 4085, 3, 2, 2, 2, 4087, 4086, 3, 2, 2, 2, 4088, 4089, 3, 2,
	2, 2, 4089, 4090, 7, 948, 2, 2, 4090, 357, 3, 2, 2, 2, 4091, 4092, 7, 9,
	2, 2, 4092, 4093, 7, 531, 2, 2, 4093, 4094, 5, 460, 231, 2, 4094, 4101,
	5, 376, 189, 2, 4095, 4096, 7, 947, 2, 2, 4096, 4097, 5, 460, 231, 2, 4097,
	4098, 5, 376, 189, 2, 4098, 4100, 3, 2, 2, 2, 4099, 4095, 3, 2, 2, 2, 4100,
	4103, 3, 2, 2, 2, 4101, 4099, 3, 2, 2, 2, 4101, 4102, 3, 2, 2, 2, 4102,
	4149, 3, 2, 2, 2, 4103, 4101, 3, 2, 2, 2, 4104, 4105, 7, 9, 2, 2, 4105,
	4107, 7, 531, 2, 2, 4106, 4108, 5, 528, 265, 2, 4107, 4106, 3, 2, 2, 2,
	4107, 4108, 3, 2, 2, 2, 4108, 4109, 3, 2, 2, 2, 4109, 4114, 5, 378, 190,
	2, 4110, 4111, 7, 947, 2, 2, 4111, 4113, 5, 378, 190, 2, 4112, 4110, 3,
	2, 2, 2, 4113, 4116, 3, 2, 2, 2, 4114, 4112, 3, 2, 2, 2, 4114, 4115, 3,
	2, 2, 2, 4115, 4131, 3, 2, 2, 2, 4116, 4114, 3, 2, 2, 2, 4117, 4129, 7,
	125, 2, 2, 4118, 4130, 7, 415, 2, 2, 4119, 4126, 5, 380, 191, 2, 4120,
	4122, 7, 11, 2, 2, 4121, 4120, 3, 2, 2, 2, 4121, 4122, 3, 2, 2, 2, 4122,
	4123, 3, 2, 2, 2, 4123, 4125, 5, 380, 191, 2, 4124, 4121, 3, 2, 2, 2, 4125,
	4128, 3, 2, 2, 2, 4126, 4124, 3, 2, 2, 2, 4126, 4127, 3, 2, 2, 2, 4127,
	4130, 3, 2, 2, 2, 4128, 4126, 3, 2, 2, 2, 4129, 4118, 3, 2, 2, 2, 4129,
	4119, 3, 2, 2, 2, 4130, 4132, 3, 2, 2, 2, 4131, 4117, 3, 2, 2, 2, 4131,
	4132, 3, 2, 2, 2, 4132, 4139, 3, 2, 2, 2, 4133, 4135, 7, 168, 2, 2, 4134,
	4136, 5, 382, 192, 2, 4135, 4134, 3, 2, 2, 2, 4136, 4137, 3, 2, 2, 2, 4137,
	4135, 3, 2, 2, 2, 4137, 4138, 3, 2, 2, 2, 4138, 4140, 3, 2, 2, 2, 4139,
	4133, 3, 2, 2, 2, 4139, 4140, 3, 2, 2, 2, 4140, 4145, 3, 2, 2, 2, 4141,
	4144, 5, 376, 189, 2, 4142, 4144, 5, 384, 193, 2, 4143, 4141, 3, 2, 2,
	2, 4143, 4142, 3, 2, 2, 2, 4144, 4147, 3, 2, 2, 2, 4145, 4143, 3, 2, 2,
	2, 4145, 4146, 3, 2, 2, 2, 4146, 4149, 3, 2, 2, 2, 4147, 4145, 3, 2, 2,
	2, 4148, 4091, 3, 2, 2, 2, 4148, 4104, 3, 2, 2, 2, 4149, 359, 3, 2, 2,
	2, 4150, 4151, 7, 31, 2, 2, 4151, 4152, 7, 531, 2, 2, 4152, 4157, 5, 378,
	190, 2, 4153, 4154, 7, 947, 2, 2, 4154, 4156, 5, 378, 190, 2, 4155, 4153,
	3, 2, 2, 2, 4156, 4159, 3, 2, 2, 2, 4157, 4155, 3, 2, 2, 2, 4157, 4158,
	3, 2, 2, 2, 4158, 4205, 3, 2, 2, 2, 4159, 4157, 3, 2, 2, 2, 4160, 4161,
	7, 31, 2, 2, 4161, 4163, 7, 531, 2, 2, 4162, 4164, 5, 530, 266, 2, 4163,
	4162, 3, 2, 2, 2, 4163, 4164, 3, 2, 2, 2, 4164, 4165, 3, 2, 2, 2, 4165,
	4170, 5, 378, 190, 2, 4166, 4167, 7, 947, 2, 2, 4167, 4169, 5, 378, 190,
	2, 4168, 4166, 3, 2, 2, 2, 4169, 4172, 3, 2, 2, 2, 4170, 4168, 3, 2, 2,
	2, 4170, 4171, 3, 2, 2, 2, 4171, 4187, 3, 2, 2, 2, 4172, 4170, 3, 2, 2,
	2, 4173, 4185, 7, 125, 2, 2, 4174, 4186, 7, 415, 2, 2, 4175, 4182, 5, 380,
	191, 2, 4176, 4178, 7, 11, 2, 2, 4177, 4176, 3, 2, 2, 2, 4177, 4178, 3,
	2, 2, 2, 4178, 4179, 3, 2, 2, 2, 4179, 4181, 5, 380, 191, 2, 4180, 4177,
	3, 2, 2, 2, 4181, 4184, 3, 2, 2, 2, 4182, 4180, 3, 2, 2, 2, 4182, 4183,
	3, 2, 2, 2, 4183, 4186, 3, 2, 2, 2, 4184, 4182, 3, 2, 2, 2, 4185, 4174,
	3, 2, 2, 2, 4185, 4175, 3, 2, 2, 2, 4186, 4188, 3, 2, 2, 2, 4187, 4173,
	3, 2, 2, 2, 4187, 4188, 3, 2, 2, 2, 4188, 4195, 3, 2, 2, 2, 4189, 4191,
	7, 168, 2, 2, 4190, 4192, 5, 382, 192, 2, 4191, 4190, 3, 2, 2, 2, 4192,
	4193, 3, 2, 2, 2, 4193, 4191, 3, 2, 2, 2, 4193, 4194, 3, 2, 2, 2, 4194,
	4196, 3, 2, 2, 2, 4195, 4189, 3, 2, 2, 2, 4195, 4196, 3, 2, 2, 2, 4196,
	4201, 3, 2, 2, 2, 4197, 4200, 5, 376, 189, 2, 4198, 4200, 5, 384, 193,
	2, 4199, 4197, 3, 2, 2, 2, 4199, 4198, 3, 2, 2, 2, 4200, 4203, 3, 2, 2,
	2, 4201, 4199, 3, 2, 2, 2, 4201, 4202, 3, 2, 2, 2, 4202, 4205, 3, 2, 2,
	2, 4203, 4201, 3, 2, 2, 2, 4204, 4150, 3, 2, 2, 2, 4204, 4160, 3, 2, 2,
	2, 4205, 361, 3, 2, 2, 2, 4206, 4207, 7, 46, 2, 2, 4207, 4209, 7, 531,
	2, 2, 4208, 4210, 5, 528, 265, 2, 4209, 4208, 3, 2, 2, 2, 4209, 4210, 3,
	2, 2, 2, 4210, 4211, 3, 2, 2, 2, 4211, 4216, 5, 460, 231, 2, 4212, 4213,
	7, 947, 2, 2, 4213, 4215, 5, 460, 231, 2, 4214, 4212, 3, 2, 2, 2, 4215,
	4218, 3, 2, 2, 2, 4216, 4214, 3, 2, 2, 2, 4216, 4217, 3, 2, 2, 2, 4217,
	363, 3, 2, 2, 2, 4218, 4216, 3, 2, 2, 2, 4219, 4220, 7, 62, 2, 2, 4220,
	4225, 5, 386, 194, 2, 4221, 4222, 7, 947, 2, 2, 4222, 4224, 5, 386, 194,
	2, 4223, 4221, 3, 2, 2, 2, 4224, 4227, 3, 2, 2, 2, 4225, 4223, 3, 2, 2,
	2, 4225, 4226, 3, 2, 2, 2, 4226, 4228, 3, 2, 2, 2, 4227, 4225, 3, 2, 2,
	2, 4228, 4230, 7, 103, 2, 2, 4229, 4231, 9, 60, 2, 2, 4230, 4229, 3, 2,
	2, 2, 4230, 4231, 3, 2, 2, 2, 4231, 4232, 3, 2, 2, 2, 4232, 4233, 5, 390,
	196, 2, 4233, 4234, 7, 151, 2, 2, 4234, 4239, 5, 378, 190, 2, 4235, 4236,
	7, 947, 2, 2, 4236, 4238, 5, 378, 190, 2, 4237, 4235, 3, 2, 2, 2, 4238,
	4241, 3, 2, 2, 2, 4239, 4237, 3, 2, 2, 2, 4239, 4240, 3, 2, 2, 2, 4240,
	4256, 3, 2, 2, 2, 4241, 4239, 3, 2, 2, 2, 4242, 4254, 7, 125, 2, 2, 4243,
	4255, 7, 415, 2, 2, 4244, 4251, 5, 380, 191, 2, 4245, 4247, 7, 11, 2, 2,
	4246, 4245, 3, 2, 2, 2, 4246, 4247, 3, 2, 2, 2, 4247, 4248, 3, 2, 2, 2,
	4248, 4250, 5, 380, 191, 2, 4249, 4246, 3, 2, 2, 2, 4250, 4253, 3, 2, 2,
	2, 4251, 4249, 3, 2, 2, 2, 4251, 4252, 3, 2, 2, 2, 4252, 4255, 3, 2, 2,
	2, 4253, 4251, 3, 2, 2, 2, 4254, 4243, 3, 2, 2, 2, 4254, 4244, 3, 2, 2,
	2, 4255, 4257, 3, 2, 2, 2, 4256, 4242, 3, 2, 2, 2, 4256, 4257, 3, 2, 2,
	2, 4257, 4267, 3, 2, 2, 2, 4258, 4264, 7, 168, 2, 2, 4259, 4260, 7, 62,
	2, 2, 4260, 4263, 7, 105, 2, 2, 4261, 4263, 5, 382, 192, 2, 4262, 4259,
	3, 2, 2, 2, 4262, 4261, 3, 2, 2, 2, 4263, 4266, 3, 2, 2, 2, 4264, 4262,
	3, 2, 2, 2, 4264, 4265, 3, 2, 2, 2, 4265, 4268, 3, 2, 2, 2, 4266, 4264,
	3, 2, 2, 2, 4267, 4258, 3, 2, 2, 2, 4267, 4268, 3, 2, 2, 2, 4268, 365,
	3, 2, 2, 2, 4269, 4270, 7, 62, 2, 2, 4270, 4271, 7, 446, 2, 2, 4271, 4272,
	7, 103, 2, 2, 4272, 4273, 5, 460, 231, 2, 4273, 4274, 7, 151, 2, 2, 4274,
	4279, 5, 460, 231, 2, 4275, 4276, 7, 947, 2, 2, 4276, 4278, 5, 460, 231,
	2, 4277, 4275, 3, 2, 2, 2, 4278, 4281, 3, 2, 2, 2, 4279, 4277, 3, 2, 2,
	2, 4279, 4280, 3, 2, 2, 2, 4280, 4285, 3, 2, 2, 2, 4281, 4279, 3, 2, 2,
	2, 4282, 4283, 7, 168, 2, 2, 4283, 4284, 7, 62, 2, 2, 4284, 4286, 7, 105,
	2, 2, 4285, 4282, 3, 2, 2, 2, 4285, 4286, 3, 2, 2, 2, 4286, 367, 3, 2,
	2, 2, 4287, 4288, 7, 122, 2, 2, 4288, 4289, 7, 531, 2, 2, 4289, 4290, 5,
	460, 231, 2, 4290, 4291, 7, 151, 2, 2, 4291, 4292, 5, 460, 231, 2, 4292,
	4293, 7, 947, 2, 2, 4293, 4294, 5, 460, 231, 2, 4294, 4295, 7, 151, 2,
	2, 4295, 4296, 5, 460, 231, 2, 4296, 369, 3, 2, 2, 2, 4297, 4298, 7, 128,
	2, 2, 4298, 4303, 5, 386, 194, 2, 4299, 4300, 7, 947, 2, 2, 4300, 4302,
	5, 386, 194, 2, 4301, 4299, 3, 2, 2, 2, 4302, 4305, 3, 2, 2, 2, 4303, 4301,
	3, 2, 2, 2, 4303, 4304, 3, 2, 2, 2, 4304, 4306, 3, 2, 2, 2, 4305, 4303,
	3, 2, 2, 2, 4306, 4308, 7, 103, 2, 2, 4307, 4309, 9, 60, 2, 2, 4308, 4307,
	3, 2, 2, 2, 4308, 4309, 3, 2, 2, 2, 4309, 4310, 3, 2, 2, 2, 4310, 4311,
	5, 390, 196, 2, 4311, 4312, 7, 60, 2, 2, 4312, 4317, 5, 460, 231, 2, 4313,
	4314, 7, 947, 2, 2, 4314, 4316, 5, 460, 231, 2, 4315, 4313, 3, 2, 2, 2,
	4316, 4319, 3, 2, 2, 2, 4317, 4315, 3, 2, 2, 2, 4317, 4318, 3, 2, 2, 2,
	4318, 4338, 3, 2, 2, 2, 4319, 4317, 3, 2, 2, 2, 4320, 4321, 7, 128, 2,
	2, 4321, 4323, 7, 8, 2, 2, 4322, 4324, 7, 567, 2, 2, 4323, 4322, 3, 2,
	2, 2, 4323, 4324, 3, 2, 2, 2, 4324, 4325, 3, 2, 2, 2, 4325, 4326, 7, 947,
	2, 2, 4326, 4327, 7, 62, 2, 2, 4327, 4328, 7, 105, 2, 2, 4328, 4329, 7,
	60, 2, 2, 4329, 4334, 5, 460, 231, 2, 4330, 4331, 7, 947, 2, 2, 4331, 4333,
	5, 460, 231, 2, 4332, 4330, 3, 2, 2, 2, 4333, 4336, 3, 2, 2, 2, 4334, 4332,
	3, 2, 2, 2, 4334, 4335, 3, 2, 2, 2, 4335, 4338, 3, 2, 2, 2, 4336, 4334,
	3, 2, 2, 2, 4337, 4297, 3, 2, 2, 2, 4337, 4320, 3, 2, 2, 2, 4338, 371,
	3, 2, 2, 2, 4339, 4340, 7, 128, 2, 2, 4340, 4341, 7, 446, 2, 2, 4341, 4342,
	7, 103, 2, 2, 4342, 4343, 5, 460, 231, 2, 4343, 4344, 7, 60, 2, 2, 4344,
	4349, 5, 460, 231, 2, 4345, 4346, 7, 947, 2, 2, 4346, 4348, 5, 460, 231,
	2, 4347, 4345, 3, 2, 2, 2, 4348, 4351, 3, 2, 2, 2, 4349, 4347, 3, 2, 2,
	2, 4349, 4350, 3, 2, 2, 2, 4350, 373, 3, 2, 2, 2, 4351, 4349, 3, 2, 2,
	2, 4352, 4353, 7, 134, 2, 2, 4353, 4356, 7, 433, 2, 2, 4354, 4355, 7, 57,
	2, 2, 4355, 4357, 5, 460, 231, 2, 4356, 4354, 3, 2, 2, 2, 4356, 4357, 3,
	2, 2, 2, 4357, 4358, 3, 2, 2, 2, 4358, 4359, 7, 936, 2, 2, 4359, 4360,
	5, 392, 197, 2, 4360, 375, 3, 2, 2, 2, 4361, 4362, 7, 433, 2, 2, 4362,
	4369, 7, 321, 2, 2, 4363, 4370, 7, 38, 2, 2, 4364, 4370, 7, 411, 2, 2,
	4365, 4366, 7, 74, 2, 2, 4366, 4367, 5, 484, 243, 2, 4367, 4368, 7, 553,
	2, 2, 4368, 4370, 3, 2, 2, 2, 4369, 4363, 3, 2, 2, 2, 4369, 4364, 3, 2,
	2, 2, 4369, 4365, 3, 2, 2, 2, 4369, 4370, 3, 2, 2, 2, 4370, 377, 3, 2,
	2, 2, 4371, 4372, 5, 460, 231, 2, 4372, 4373, 7, 346, 2, 2, 4373, 4374,
	7, 17, 2, 2, 4374, 4375, 7, 433, 2, 2, 4375, 4376, 7, 960, 2, 2, 4376,
	4395, 3, 2, 2, 2, 4377, 4378, 5, 460, 231, 2, 4378, 4381, 7, 346, 2, 2,
	4379, 4380, 7, 168, 2, 2, 4380, 4382, 5, 476, 239, 2, 4381, 4379, 3, 2,
	2, 2, 4381, 4382, 3, 2, 2, 2, 4382, 4383, 3, 2, 2, 2, 4383, 4384, 7, 17,
	2, 2, 4384, 4385, 7, 960, 2, 2, 4385, 4395, 3, 2, 2, 2, 4386, 4387, 5,
	460, 231, 2, 4387, 4388, 7, 346, 2, 2, 4388, 4389, 7, 168, 2, 2, 4389,
	4392, 5, 476, 239, 2, 4390, 4391, 7, 12, 2, 2, 4391, 4393, 7, 960, 2, 2,
	4392, 4390, 3, 2, 2, 2, 4392, 4393, 3, 2, 2, 2, 4393, 4395, 3, 2, 2, 2,
	4394, 4371, 3, 2, 2, 2, 4394, 4377, 3, 2, 2, 2, 4394, 4386, 3, 2, 2, 2,
	4395, 379, 3, 2, 2, 2, 4396, 4405, 7, 145, 2, 2, 4397, 4405, 7, 543, 2,
	2, 4398, 4399, 7, 270, 2, 2, 4399, 4405, 7, 960, 2, 2, 4400, 4401, 7, 360,
	2, 2, 4401, 4405, 7, 960, 2, 2, 4402, 4403, 7, 510, 2, 2, 4403, 4405, 7,
	960, 2, 2, 4404, 4396, 3, 2, 2, 2, 4404, 4397, 3, 2, 2, 2, 4404, 4398,
	3, 2, 2, 2, 4404, 4400, 3, 2, 2, 2, 4404, 4402, 3, 2, 2, 2, 4405, 381,
	3, 2, 2, 2, 4406, 4407, 7, 394, 2, 2, 4407, 4415, 5, 484, 243, 2, 4408,
	4409, 7, 397, 2, 2, 4409, 4415, 5, 484, 243, 2, 4410, 4411, 7, 393, 2,
	2, 4411, 4415, 5, 484, 243, 2, 4412, 4413, 7, 398, 2, 2, 4413, 4415, 5,
	484, 243, 2, 4414, 4406, 3, 2, 2, 2, 4414, 4408, 3, 2, 2, 2, 4414, 4410,
	3, 2, 2, 2, 4414, 4412, 3, 2, 2, 2, 4415, 383, 3, 2, 2, 2, 4416, 4417,
	7, 247, 2, 2, 4417, 4418, 9, 61, 2, 2, 4418, 385, 3, 2, 2, 2, 4419, 4424,
	5, 388, 195, 2, 4420, 4421, 7, 945, 2, 2, 4421, 4422, 5, 510, 256, 2, 4422,
	4423, 7, 946, 2, 2, 4423, 4425, 3, 2, 2, 2, 4424, 4420, 3, 2, 2, 2, 4424,
	4425, 3, 2, 2, 2, 4425, 387, 3, 2, 2, 2, 4426, 4428, 7, 8, 2, 2, 4427,
	4429, 7, 567, 2, 2, 4428, 4427, 3, 2, 2, 2, 4428, 4429, 3, 2, 2, 2, 4429,
	4469, 3, 2, 2, 2, 4430, 4432, 7, 9, 2, 2, 4431, 4433, 7, 560, 2, 2, 4432,
	4431, 3, 2, 2, 2, 4432, 4433, 3, 2, 2, 2, 4433, 4469, 3, 2, 2, 2, 4434,
	4441, 7, 31, 2, 2, 4435, 4436, 7, 517, 2, 2, 4436, 4442, 7, 559, 2, 2,
	4437, 4442, 7, 560, 2, 2, 4438, 4442, 7, 537, 2, 2, 4439, 4442, 7, 531,
	2, 2, 4440, 4442, 7, 516, 2, 2, 4441, 4435, 3, 2, 2, 2, 4441, 4437, 3,
	2, 2, 2, 4441, 4438, 3, 2, 2, 2, 4441, 4439, 3, 2, 2, 2, 4441, 4440, 3,
	2, 2, 2, 4441, 4442, 3, 2, 2, 2, 4442, 4469, 3, 2, 2, 2, 4443, 4469, 7,
	40, 2, 2, 4444, 4469, 7, 46, 2, 2, 4445, 4469, 7, 316, 2, 2, 4446, 4469,
	7, 561, 2, 2, 4447, 4469, 7, 562, 2, 2, 4448, 4449, 7, 62, 2, 2, 4449,
	4469, 7, 105, 2, 2, 4450, 4469, 7, 69, 2, 2, 4451, 4469, 7, 73, 2, 2, 4452,
	4453, 7, 90, 2, 2, 4453, 4469, 7, 559, 2, 2, 4454, 4469, 7, 563, 2, 2,
	4455, 4469, 7, 446, 2, 2, 4456, 4469, 7, 119, 2, 2, 4457, 4469, 7, 564,
	2, 2, 4458, 4459, 7, 467, 2, 2, 4459, 4469, 9, 62, 2, 2, 4460, 4469, 7,
	133, 2, 2, 4461, 4462, 7, 136, 2, 2, 4462, 4469, 9, 63, 2, 2, 4463, 4469,
	7, 565, 2, 2, 4464, 4469, 7, 566, 2, 2, 4465, 4469, 7, 153, 2, 2, 4466,
	4469, 7, 160, 2, 2, 4467, 4469, 7, 161, 2, 2, 4468, 4426, 3, 2, 2, 2, 4468,
	4430, 3, 2, 2, 2, 4468, 4434, 3, 2, 2, 2, 4468, 4443, 3, 2, 2, 2, 4468,
	4444, 3, 2, 2, 2, 4468, 4445, 3, 2, 2, 2, 4468, 4446, 3, 2, 2, 2, 4468,
	4447, 3, 2, 2, 2, 4468, 4448, 3, 2, 2, 2, 4468, 4450, 3, 2, 2, 2, 4468,
	4451, 3, 2, 2, 2, 4468, 4452, 3, 2, 2, 2, 4468, 4454, 3, 2, 2, 2, 4468,
	4455, 3, 2, 2, 2, 4468, 4456, 3, 2, 2, 2, 4468, 4457, 3, 2, 2, 2, 4468,
	4458, 3, 2, 2, 2, 4468, 4460, 3, 2, 2, 2, 4468, 4461, 3, 2, 2, 2, 4468,
	4463, 3, 2, 2, 2, 4468, 4464, 3, 2, 2, 2, 4468, 4465, 3, 2, 2, 2, 4468,
	4466, 3, 2, 2, 2, 4468, 4467, 3, 2, 2, 2, 4469, 389, 3, 2, 2, 2, 4470,
	4484, 7, 929, 2, 2, 4471, 4472, 7, 929, 2, 2, 4472, 4473, 7, 944, 2, 2,
	4473, 4484, 7, 929, 2, 2, 4474, 4475, 5, 478, 240, 2, 4475, 4476, 7, 944,
	2, 2, 4476, 4477, 7, 929, 2, 2, 4477, 4484, 3, 2, 2, 2, 4478, 4479, 5,
	478, 240, 2, 4479, 4480, 7, 944, 2, 2, 4480, 4481, 5, 478, 240, 2, 4481,
	4484, 3, 2, 2, 2, 4482, 4484, 5, 478, 240, 2, 4483, 4470, 3, 2, 2, 2, 4483,
	4471, 3, 2, 2, 2, 4483, 4474, 3, 2, 2, 2, 4483, 4478, 3, 2, 2, 2, 4483,
	4482, 3, 2, 2, 2, 4484, 391, 3, 2, 2, 2, 4485, 4486, 9, 64, 2, 2, 4486,
	4487, 7, 945, 2, 2, 4487, 4488, 7, 960, 2, 2, 4488, 4491, 7, 946, 2, 2,
	4489, 4491, 7, 960, 2, 2, 4490, 4485, 3, 2, 2, 2, 4490, 4489, 3, 2, 2,
	2, 4491, 393, 3, 2, 2, 2, 4492, 4494, 7, 10, 2, 2, 4493, 4495, 9, 65, 2,
	2, 4494, 4493, 3, 2, 2, 2, 4494, 4495, 3, 2, 2, 2, 4495, 4496, 3, 2, 2,
	2, 4496, 4497, 7, 148, 2, 2, 4497, 4498, 5, 512, 257, 2, 4498, 395, 3,
	2, 2, 2, 4499, 4500, 7, 24, 2, 2, 4500, 4501, 7, 148, 2, 2, 4501, 4505,
	5, 512, 257, 2, 4502, 4504, 5, 404, 203, 2, 4503, 4502, 3, 2, 2, 2, 4504,
	4507, 3, 2, 2, 2, 4505, 4503, 3, 2, 2, 2, 4505, 4506, 3, 2, 2, 2, 4506,
	397, 3, 2, 2, 2, 4507, 4505, 3, 2, 2, 2, 4508, 4509, 7, 269, 2, 2, 4509,
	4510, 7, 148, 2, 2, 4510, 4512, 5, 512, 257, 2, 4511, 4513, 9, 66, 2, 2,
	4512, 4511, 3, 2, 2, 2, 4512, 4513, 3, 2, 2, 2, 4513, 399, 3, 2, 2, 2,
	4514, 4516, 7, 104, 2, 2, 4515, 4517, 9, 65, 2, 2, 4516, 4515, 3, 2, 2,
	2, 4516, 4517, 3, 2, 2, 2, 4517, 4518, 3, 2, 2, 2, 4518, 4519, 7, 148,
	2, 2, 4519, 4520, 5, 512, 257, 2, 4520, 401, 3, 2, 2, 2, 4521, 4523, 7,
	459, 2, 2, 4522, 4524, 9, 65, 2, 2, 4523, 4522, 3, 2, 2, 2, 4523, 4524,
	3, 2, 2, 2, 4524, 4525, 3, 2, 2, 2, 4525, 4526, 7, 148, 2, 2, 4526, 4528,
	5, 512, 257, 2, 4527, 4529, 7, 448, 2, 2, 4528, 4527, 3, 2, 2, 2, 4528,
	4529, 3, 2, 2, 2, 4529, 4531, 3, 2, 2, 2, 4530, 4532, 7, 323, 2, 2, 4531,
	4530, 3, 2, 2, 2, 4531, 4532, 3, 2, 2, 2, 4532, 4534, 3, 2, 2, 2, 4533,
	4535, 7, 532, 2, 2, 4534, 4533, 3, 2, 2, 2, 4534, 4535, 3, 2, 2, 2, 4535,
	403, 3, 2, 2, 2, 4536, 4537, 7, 57, 2, 2, 4537, 4544, 7, 530, 2, 2, 4538,
	4544, 7, 448, 2, 2, 4539, 4544, 7, 325, 2, 2, 4540, 4544, 7, 399, 2, 2,
	4541, 4544, 7, 323, 2, 2, 4542, 4544, 7, 267, 2, 2, 4543, 4536, 3, 2, 2,
	2, 4543, 4538, 3, 2, 2, 2, 4543, 4539, 3, 2, 2, 2, 4543, 4540, 3, 2, 2,
	2, 4543, 4541, 3, 2, 2, 2, 4543, 4542, 3, 2, 2, 2, 4544, 405, 3, 2, 2,
	2, 4545, 4547, 7, 31, 2, 2, 4546, 4548, 7, 250, 2, 2, 4547, 4546, 3, 2,
	2, 2, 4547, 4548, 3, 2, 2, 2, 4548, 4549, 3, 2, 2, 2, 4549, 4550, 7, 336,
	2, 2, 4550, 4551, 5, 478, 240, 2, 4551, 4552, 7, 470, 2, 2, 4552, 4553,
	9, 67, 2, 2, 4553, 4554, 7, 491, 2, 2, 4554, 4555, 7, 960, 2, 2, 4555,
	407, 3, 2, 2, 2, 4556, 4557, 7, 353, 2, 2, 4557, 4558, 7, 435, 2, 2, 4558,
	4559, 5, 478, 240, 2, 4559, 4560, 7, 491, 2, 2, 4560, 4561, 7, 960, 2,
	2, 4561, 409, 3, 2, 2, 2, 4562, 4563, 7, 527, 2, 2, 4563, 4564, 7, 435,
	2, 2, 4564, 4565, 5, 478, 240, 2, 4565, 411, 3, 2, 2, 2, 4566, 4567, 7,
	134, 2, 2, 4567, 4568, 5, 416, 209, 2, 4568, 4569, 7, 936, 2, 2, 4569,
	4577, 5, 546, 274, 2, 4570, 4571, 7, 947, 2, 2, 4571, 4572, 5, 416, 209,
	2, 4572, 4573, 7, 936, 2, 2, 4573, 4574, 5, 546, 274, 2, 4574, 4576, 3,
	2, 2, 2, 4575, 4570, 3, 2, 2, 2, 4576, 4579, 3, 2, 2, 2, 4577, 4575, 3,
	2, 2, 2, 4577, 4578, 3, 2, 2, 2, 4578, 4604, 3, 2, 2, 2, 4579, 4577, 3,
	2, 2, 2, 4580, 4584, 7, 134, 2, 2, 4581, 4582, 7, 23, 2, 2, 4582, 4585,
	7, 134, 2, 2, 4583, 4585, 7, 658, 2, 2, 4584, 4581, 3, 2, 2, 2, 4584, 4583,
	3, 2, 2, 2, 4585, 4588, 3, 2, 2, 2, 4586, 4589, 5, 464, 233, 2, 4587, 4589,
	7, 38, 2, 2, 4588, 4586, 3, 2, 2, 2, 4588, 4587, 3, 2, 2, 2, 4589, 4604,
	3, 2, 2, 2, 4590, 4591, 7, 134, 2, 2, 4591, 4598, 7, 409, 2, 2, 4592, 4595,
	5, 464, 233, 2, 4593, 4594, 7, 25, 2, 2, 4594, 4596, 5, 466, 234, 2, 4595,
	4593, 3, 2, 2, 2, 4595, 4596, 3, 2, 2, 2, 4596, 4599, 3, 2, 2, 2, 4597,
	4599, 7, 38, 2, 2, 4598, 4592, 3, 2, 2, 2, 4598, 4597, 3, 2, 2, 2, 4599,
	4604, 3, 2, 2, 2, 4600, 4604, 5, 374, 188, 2, 4601, 4604, 5, 258, 130,
	2, 4602, 4604, 5, 256, 129, 2, 4603, 4566, 3, 2, 2, 2, 4603, 4580, 3, 2,
	2, 2, 4603, 4590, 3, 2, 2, 2, 4603, 4600, 3, 2, 2, 2, 4603, 4601, 3, 2,
	2, 2, 4603, 4602, 3, 2, 2, 2, 4604, 413, 3, 2, 2, 2, 4605, 4606, 7, 136,
	2, 2, 4606, 4607, 9, 48, 2, 2, 4607, 4798, 7, 371, 2, 2, 4608, 4609, 7,
	136, 2, 2, 4609, 4610, 9, 68, 2, 2, 4610, 4613, 7, 317, 2, 2, 4611, 4612,
	7, 68, 2, 2, 4612, 4614, 7, 960, 2, 2, 4613, 4611, 3, 2, 2, 2, 4613, 4614,
	3, 2, 2, 2, 4614, 4617, 3, 2, 2, 2, 4615, 4616, 7, 60, 2, 2, 4616, 4618,
	5, 484, 243, 2, 4617, 4615, 3, 2, 2, 2, 4617, 4618, 3, 2, 2, 2, 4618, 4626,
	3, 2, 2, 2, 4619, 4623, 7, 86, 2, 2, 4620, 4621, 5, 484, 243, 2, 4621,
	4622, 7, 947, 2, 2, 4622, 4624, 3, 2, 2, 2, 4623, 4620, 3, 2, 2, 2, 4623,
	4624, 3, 2, 2, 2, 4624, 4625, 3, 2, 2, 2, 4625, 4627, 5, 484, 243, 2, 4626,
	4619, 3, 2, 2, 2, 4626, 4627, 3, 2, 2, 2, 4627, 4798, 3, 2, 2, 2, 4628,
	4642, 7, 136, 2, 2, 4629, 4630, 7, 23, 2, 2, 4630, 4643, 7, 134, 2, 2,
	4631, 4643, 7, 661, 2, 2, 4632, 4643, 7, 36, 2, 2, 4633, 4643, 7, 132,
	2, 2, 4634, 4635, 7, 336, 2, 2, 4635, 4643, 7, 506, 2, 2, 4636, 4637, 7,
	114, 2, 2, 4637, 4643, 7, 506, 2, 2, 4638, 4640, 9, 47, 2, 2, 4639, 4638,
	3, 2, 2, 2, 4639, 4640, 3, 2, 2, 2, 4640, 4641, 3, 2, 2, 2, 4641, 4643,
	9, 69, 2, 2, 4642, 4629, 3, 2, 2, 2, 4642, 4631, 3, 2, 2, 2, 4642, 4632,
	3, 2, 2, 2, 4642, 4633, 3, 2, 2, 2, 4642, 4634, 3, 2, 2, 2, 4642, 4636,
	3, 2, 2, 2, 4642, 4639, 3, 2, 2, 2, 4643, 4645, 3, 2, 2, 2, 4644, 4646,
	5, 418, 210, 2, 4645, 4644, 3, 2, 2, 2, 4645, 4646, 3, 2, 2, 2, 4646, 4798,
	3, 2, 2, 2, 4647, 4649, 7, 136, 2, 2, 4648, 4650, 7, 335, 2, 2, 4649, 4648,
	3, 2, 2, 2, 4649, 4650, 3, 2, 2, 2, 4650, 4651, 3, 2, 2, 2, 4651, 4652,
	9, 34, 2, 2, 4652, 4653, 9, 70, 2, 2, 4653, 4656, 5, 452, 227, 2, 4654,
	4655, 9, 70, 2, 2, 4655, 4657, 5, 478, 240, 2, 4656, 4654, 3, 2, 2, 2,
	4656, 4657, 3, 2, 2, 2, 4657, 4659, 3, 2, 2, 2, 4658, 4660, 5, 418, 210,
	2, 4659, 4658, 3, 2, 2, 2, 4659, 4660, 3, 2, 2, 2, 4660, 4798, 3, 2, 2,
	2, 4661, 4662, 7, 136, 2, 2, 4662, 4663, 7, 31, 2, 2, 4663, 4665, 9, 2,
	2, 2, 4664, 4666, 5, 530, 266, 2, 4665, 4664, 3, 2, 2, 2, 4665, 4666, 3,
	2, 2, 2, 4666, 4667, 3, 2, 2, 2, 4667, 4798, 5, 478, 240, 2, 4668, 4669,
	7, 136, 2, 2, 4669, 4670, 7, 31, 2, 2, 4670, 4671, 9, 71, 2, 2, 4671, 4798,
	5, 454, 228, 2, 4672, 4673, 7, 136, 2, 2, 4673, 4674, 7, 31, 2, 2, 4674,
	4675, 7, 531, 2, 2, 4675, 4798, 5, 460, 231, 2, 4676, 4677, 7, 136, 2,
	2, 4677, 4678, 7, 310, 2, 2, 4678, 4679, 5, 468, 235, 2, 4679, 4680, 9,
	72, 2, 2, 4680, 4798, 3, 2, 2, 2, 4681, 4699, 7, 136, 2, 2, 4682, 4684,
	7, 508, 2, 2, 4683, 4682, 3, 2, 2, 2, 4683, 4684, 3, 2, 2, 2, 4684, 4685,
	3, 2, 2, 2, 4685, 4700, 7, 311, 2, 2, 4686, 4687, 7, 372, 2, 2, 4687, 4700,
	7, 506, 2, 2, 4688, 4700, 7, 437, 2, 2, 4689, 4700, 7, 567, 2, 2, 4690,
	4692, 7, 335, 2, 2, 4691, 4690, 3, 2, 2, 2, 4691, 4692, 3, 2, 2, 2, 4692,
	4693, 3, 2, 2, 2, 4693, 4700, 7, 443, 2, 2, 4694, 4700, 7, 445, 2, 2, 4695,
	4696, 7, 486, 2, 2, 4696, 4700, 7, 345, 2, 2, 4697, 4700, 7, 254, 2, 2,
	4698, 4700, 7, 288, 2, 2, 4699, 4683, 3, 2, 2, 2, 4699, 4686, 3, 2, 2,
	2, 4699, 4688, 3, 2, 2, 2, 4699, 4689, 3, 2, 2, 2, 4699, 4691, 3, 2, 2,
	2, 4699, 4694, 3, 2, 2, 2, 4699, 4695, 3, 2, 2, 2, 4699, 4697, 3, 2, 2,
	2, 4699, 4698, 3, 2, 2, 2, 4700, 4798, 3, 2, 2, 2, 4701, 4702, 7, 136,
	2, 2, 4702, 4703, 9, 73, 2, 2, 4703, 4707, 7, 86, 2, 2, 4704, 4705, 5,
	484, 243, 2, 4705, 4706, 7, 947, 2, 2, 4706, 4708, 3, 2, 2, 2, 4707, 4704,
	3, 2, 2, 2, 4707, 4708, 3, 2, 2, 2, 4708, 4709, 3, 2, 2, 2, 4709, 4798,
	5, 484, 243, 2, 4710, 4711, 7, 136, 2, 2, 4711, 4712, 7, 216, 2, 2, 4712,
	4713, 7, 945, 2, 2, 4713, 4714, 7, 929, 2, 2, 4714, 4715, 7, 946, 2, 2,
	4715, 4798, 9, 73, 2, 2, 4716, 4725, 7, 136, 2, 2, 4717, 4726, 7, 317,
	2, 2, 4718, 4719, 7, 148, 2, 2, 4719, 4726, 7, 506, 2, 2, 4720, 4722, 7,
	335, 2, 2, 4721, 4720, 3, 2, 2, 2, 4721, 4722, 3, 2, 2, 2, 4722, 4723,
	3, 2, 2, 2, 4723, 4726, 7, 559, 2, 2, 4724, 4726, 7, 522, 2, 2, 4725, 4717,
	3, 2, 2, 2, 4725, 4718, 3, 2, 2, 2, 4725, 4721, 3, 2, 2, 2, 4725, 4724,
	3, 2, 2, 2, 4726, 4729, 3, 2, 2, 2, 4727, 4728, 9, 70, 2, 2, 4728, 4730,
	5, 478, 240, 2, 4729, 4727, 3, 2, 2, 2, 4729, 4730, 3, 2, 2, 2, 4730, 4732,
	3, 2, 2, 2, 4731, 4733, 5, 418, 210, 2, 4732, 4731, 3, 2, 2, 2, 4732, 4733,
	3, 2, 2, 2, 4733, 4798, 3, 2, 2, 2, 4734, 4735, 7, 136, 2, 2, 4735, 4736,
	9, 74, 2, 2, 4736, 4737, 7, 274, 2, 2, 4737, 4798, 5, 454, 228, 2, 4738,
	4739, 7, 136, 2, 2, 4739, 4742, 7, 339, 2, 2, 4740, 4741, 7, 57, 2, 2,
	4741, 4743, 5, 460, 231, 2, 4742, 4740, 3, 2, 2, 2, 4742, 4743, 3, 2, 2,
	2, 4743, 4798, 3, 2, 2, 2, 4744, 4745, 7, 136, 2, 2, 4745, 4746, 9, 75,
	2, 2, 4746, 4747, 9, 70, 2, 2, 4747, 4750, 5, 452, 227, 2, 4748, 4749,
	9, 70, 2, 2, 4749, 4751, 5, 478, 240, 2, 4750, 4748, 3, 2, 2, 2, 4750,
	4751, 3, 2, 2, 2, 4751, 4754, 3, 2, 2, 2, 4752, 4753, 7, 166, 2, 2, 4753,
	4755, 5, 546, 274, 2, 4754, 4752, 3, 2, 2, 2, 4754, 4755, 3, 2, 2, 2, 4755,
	4798, 3, 2, 2, 2, 4756, 4757, 7, 136, 2, 2, 4757, 4758, 7, 423, 2, 2, 4758,
	4761, 7, 559, 2, 2, 4759, 4760, 9, 70, 2, 2, 4760, 4762, 5, 478, 240, 2,
	4761, 4759, 3, 2, 2, 2, 4761, 4762, 3, 2, 2, 2, 4762, 4764, 3, 2, 2, 2,
	4763, 4765, 5, 418, 210, 2, 4764, 4763, 3, 2, 2, 2, 4764, 4765, 3, 2, 2,
	2, 4765, 4798, 3, 2, 2, 2, 4766, 4767, 7, 136, 2, 2, 4767, 4768, 7, 444,
	2, 2, 4768, 4773, 5, 420, 211, 2, 4769, 4770, 7, 947, 2, 2, 4770, 4772,
	5, 420, 211, 2, 4771, 4769, 3, 2, 2, 2, 4772, 4775, 3, 2, 2, 2, 4773, 4771,
	3, 2, 2, 2, 4773, 4774, 3, 2, 2, 2, 4774, 4779, 3, 2, 2, 2, 4775, 4773,
	3, 2, 2, 2, 4776, 4777, 7, 57, 2, 2, 4777, 4778, 7, 447, 2, 2, 4778, 4780,
	5, 484, 243, 2, 4779, 4776, 3, 2, 2, 2, 4779, 4780, 3, 2, 2, 2, 4780, 4781,
	3, 2, 2, 2, 4781, 4785, 7, 86, 2, 2, 4782, 4783, 5, 484, 243, 2, 4783,
	4784, 7, 947, 2, 2, 4784, 4786, 3, 2, 2, 2, 4785, 4782, 3, 2, 2, 2, 4785,
	4786, 3, 2, 2, 2, 4786, 4787, 3, 2, 2, 2, 4787, 4788, 5, 484, 243, 2, 4788,
	4798, 3, 2, 2, 2, 4789, 4790, 7, 136, 2, 2, 4790, 4791, 7, 486, 2, 2, 4791,
	4795, 7, 506, 2, 2, 4792, 4793, 7, 57, 2, 2, 4793, 4794, 7, 268, 2, 2,
	4794, 4796, 7, 960, 2, 2, 4795, 4792, 3, 2, 2, 2, 4795, 4796, 3, 2, 2,
	2, 4796, 4798, 3, 2, 2, 2, 4797, 4605, 3, 2, 2, 2, 4797, 4608, 3, 2, 2,
	2, 4797, 4628, 3, 2, 2, 2, 4797, 4647, 3, 2, 2, 2, 4797, 4661, 3, 2, 2,
	2, 4797, 4668, 3, 2, 2, 2, 4797, 4672, 3, 2, 2, 2, 4797, 4676, 3, 2, 2,
	2, 4797, 4681, 3, 2, 2, 2, 4797, 4701, 3, 2, 2, 2, 4797, 4710, 3, 2, 2,
	2, 4797, 4716, 3, 2, 2, 2, 4797, 4734, 3, 2, 2, 2, 4797, 4738, 3, 2, 2,
	2, 4797, 4744, 3, 2, 2, 2, 4797, 4756, 3, 2, 2, 2, 4797, 4766, 3, 2, 2,
	2, 4797, 4789, 3, 2, 2, 2, 4798, 415, 3, 2, 2, 2, 4799, 4810, 7, 971, 2,
	2, 4800, 4810, 7, 972, 2, 2, 4801, 4802, 7, 949, 2, 2, 4802, 4804, 7, 949,
	2, 2, 4803, 4801, 3, 2, 2, 2, 4803, 4804, 3, 2, 2, 2, 4804, 4805, 3, 2,
	2, 2, 4805, 4807, 9, 47, 2, 2, 4806, 4803, 3, 2, 2, 2, 4806, 4807, 3, 2,
	2, 2, 4807, 4808, 3, 2, 2, 2, 4808, 4810, 5, 478, 240, 2, 4809, 4799, 3,
	2, 2, 2, 4809, 4800, 3, 2, 2, 2, 4809, 4806, 3, 2, 2, 2, 4810, 417, 3,
	2, 2, 2, 4811, 4812, 7, 85, 2, 2, 4812, 4816, 7, 960, 2, 2, 4813, 4814,
	7, 166, 2, 2, 4814, 4816, 5, 546, 274, 2, 4815, 4811, 3, 2, 2, 2, 4815,
	4813, 3, 2, 2, 2, 4816, 419, 3, 2, 2, 2, 4817, 4830, 7, 8, 2, 2, 4818,
	4819, 7, 262, 2, 2, 4819, 4830, 7, 356, 2, 2, 4820, 4821, 7, 287, 2, 2,
	4821, 4830, 7, 515, 2, 2, 4822, 4830, 7, 290, 2, 2, 4823, 4830, 7, 358,
	2, 2, 4824, 4830, 7, 613, 2, 2, 4825, 4826, 7, 428, 2, 2, 4826, 4830, 7,
	326, 2, 2, 4827, 4830, 7, 493, 2, 2, 4828, 4830, 7, 514, 2, 2, 4829, 4817,
	3, 2, 2, 2, 4829, 4818, 3, 2, 2, 2, 4829, 4820, 3, 2, 2, 2, 4829, 4822,
	3, 2, 2, 2, 4829, 4823, 3, 2, 2, 2, 4829, 4824, 3, 2, 2, 2, 4829, 4825,
	3, 2, 2, 2, 4829, 4827, 3, 2, 2, 2, 4829, 4828, 3, 2, 2, 2, 4830, 421,
	3, 2, 2, 2, 4831, 4832, 7, 260, 2, 2, 4832, 4833, 7, 960, 2, 2, 4833, 423,
	3, 2, 2, 2, 4834, 4835, 7, 264, 2, 2, 4835, 4836, 7, 69, 2, 2, 4836, 4841,
	5, 436, 219, 2, 4837, 4838, 7, 947, 2, 2, 4838, 4840, 5, 436, 219, 2, 4839,
	4837, 3, 2, 2, 2, 4840, 4843, 3, 2, 2, 2, 4841, 4839, 3, 2, 2, 2, 4841,
	4842, 3, 2, 2, 2, 4842, 4851, 3, 2, 2, 2, 4843, 4841, 3, 2, 2, 2, 4844,
	4845, 7, 112, 2, 2, 4845, 4848, 7, 945, 2, 2, 4846, 4849, 5, 510, 256,
	2, 4847, 4849, 7, 8, 2, 2, 4848, 4846, 3, 2, 2, 2, 4848, 4847, 3, 2, 2,
	2, 4849, 4850, 3, 2, 2, 2, 4850, 4852, 7, 946, 2, 2, 4851, 4844, 3, 2,
	2, 2, 4851, 4852, 3, 2, 2, 2, 4852, 4853, 3, 2, 2, 2, 4853, 4854, 7, 68,
	2, 2, 4854, 4855, 5, 478, 240, 2, 4855, 425, 3, 2, 2, 2, 4856, 4858, 7,
	332, 2, 2, 4857, 4859, 9, 65, 2, 2, 4858, 4857, 3, 2, 2, 2, 4858, 4859,
	3, 2, 2, 2, 4859, 4860, 3, 2, 2, 2, 4860, 4865, 5, 438, 220, 2, 4861, 4862,
	7, 947, 2, 2, 4862, 4864, 5, 438, 220, 2, 4863, 4861, 3, 2, 2, 2, 4864,
	4867, 3, 2, 2, 2, 4865, 4863, 3, 2, 2, 2, 4865, 4866, 3, 2, 2, 2, 4866,
	427, 3, 2, 2, 2, 4867, 4865, 3, 2, 2, 2, 4868, 4870, 7, 81, 2, 2, 4869,
	4871, 9, 76, 2, 2, 4870, 4869, 3, 2, 2, 2, 4870, 4871, 3, 2, 2, 2, 4871,
	4873, 3, 2, 2, 2, 4872, 4874, 5, 484, 243, 2, 4873, 4872, 3, 2, 2, 2, 4874,
	4875, 3, 2, 2, 2, 4875, 4873, 3, 2, 2, 2, 4875, 4876, 3, 2, 2, 2, 4876,
	429, 3, 2, 2, 2, 4877, 4878, 7, 89, 2, 2, 4878, 4879, 7, 69, 2, 2, 4879,
	4880, 7, 75, 2, 2, 4880, 4881, 7, 264, 2, 2, 4881, 4886, 5, 440, 221, 2,
	4882, 4883, 7, 947, 2, 2, 4883, 4885, 5, 440, 221, 2, 4884, 4882, 3, 2,
	2, 2, 4885, 4888, 3, 2, 2, 2, 4886, 4884, 3, 2, 2, 2, 4886, 4887, 3, 2,
	2, 2, 4887, 431, 3, 2, 2, 2, 4888, 4886, 3, 2, 2, 2, 4889, 4890, 7, 468,
	2, 2, 4890, 4891, 7, 447, 2, 2, 4891, 4892, 7, 264, 2, 2, 4892, 433, 3,
	2, 2, 2, 4893, 4894, 7, 565, 2, 2, 4894, 435, 3, 2, 2, 2, 4895, 4903, 5,
	452, 227, 2, 4896, 4898, 9, 19, 2, 2, 4897, 4896, 3, 2, 2, 2, 4897, 4898,
	3, 2, 2, 2, 4898, 4899, 3, 2, 2, 2, 4899, 4900, 7, 945, 2, 2, 4900, 4901,
	5, 510, 256, 2, 4901, 4902, 7, 946, 2, 2, 4902, 4904, 3, 2, 2, 2, 4903,
	4897, 3, 2, 2, 2, 4903, 4904, 3, 2, 2, 2, 4904, 437, 3, 2, 2, 2, 4905,
	4938, 7, 297, 2, 2, 4906, 4938, 7, 345, 2, 2, 4907, 4909, 9, 77, 2, 2,
	4908, 4907, 3, 2, 2, 2, 4908, 4909, 3, 2, 2, 2, 4909, 4910, 3, 2, 2, 2,
	4910, 4938, 7, 371, 2, 2, 4911, 4912, 7, 453, 2, 2, 4912, 4914, 7, 371,
	2, 2, 4913, 4915, 5, 294, 148, 2, 4914, 4913, 3, 2, 2, 2, 4914, 4915, 3,
	2, 2, 2, 4915, 4938, 3, 2, 2, 2, 4916, 4938, 7, 424, 2, 2, 4917, 4938,
	7, 567, 2, 2, 4918, 4919, 7, 447, 2, 2, 4919, 4938, 7, 264, 2, 2, 4920,
	4938, 7, 506, 2, 2, 4921, 4938, 7, 533, 2, 2, 4922, 4926, 7, 559, 2, 2,
	4923, 4924, 7, 168, 2, 2, 4924, 4925, 7, 117, 2, 2, 4925, 4927, 7, 90,
	2, 2, 4926, 4923, 3, 2, 2, 2, 4926, 4927, 3, 2, 2, 2, 4927, 4938, 3, 2,
	2, 2, 4928, 4929, 7, 559, 2, 2, 4929, 4935, 5, 512, 257, 2, 4930, 4931,
	7, 168, 2, 2, 4931, 4932, 7, 117, 2, 2, 4932, 4936, 7, 90, 2, 2, 4933,
	4934, 7, 57, 2, 2, 4934, 4936, 7, 322, 2, 2, 4935, 4930, 3, 2, 2, 2, 4935,
	4933, 3, 2, 2, 2, 4935, 4936, 3, 2, 2, 2, 4936, 4938, 3, 2, 2, 2, 4937,
	4905, 3, 2, 2, 2, 4937, 4906, 3, 2, 2, 2, 4937, 4908, 3, 2, 2, 2, 4937,
	4911, 3, 2, 2, 2, 4937, 4916, 3, 2, 2, 2, 4937, 4917, 3, 2, 2, 2, 4937,
	4918, 3, 2, 2, 2, 4937, 4920, 3, 2, 2, 2, 4937, 4921, 3, 2, 2, 2, 4937,
	4922, 3, 2, 2, 2, 4937, 4928, 3, 2, 2, 2, 4938, 439, 3, 2, 2, 2, 4939,
	4947, 5, 452, 227, 2, 4940, 4941, 7, 112, 2, 2, 4941, 4944, 7, 945, 2,
	2, 4942, 4945, 5, 510, 256, 2, 4943, 4945, 7, 8, 2, 2, 4944, 4942, 3, 2,
	2, 2, 4944, 4943, 3, 2, 2, 2, 4945, 4946, 3, 2, 2, 2, 4946, 4948, 7, 946,
	2, 2, 4947, 4940, 3, 2, 2, 2, 4947, 4948, 3, 2, 2, 2, 4948, 4956, 3, 2,
	2, 2, 4949, 4951, 9, 19, 2, 2, 4950, 4949, 3, 2, 2, 2, 4950, 4951, 3, 2,
	2, 2, 4951, 4952, 3, 2, 2, 2, 4952, 4953, 7, 945, 2, 2, 4953, 4954, 5,
	510, 256, 2, 4954, 4955, 7, 946, 2, 2, 4955, 4957, 3, 2, 2, 2, 4956, 4950,
	3, 2, 2, 2, 4956, 4957, 3, 2, 2, 2, 4957, 4960, 3, 2, 2, 2, 4958, 4959,
	7, 67, 2, 2, 4959, 4961, 7, 365, 2, 2, 4960, 4958, 3, 2, 2, 2, 4960, 4961,
	3, 2, 2, 2, 4961, 441, 3, 2, 2, 2, 4962, 4963, 9, 78, 2, 2, 4963, 4966,
	5, 452, 227, 2, 4964, 4967, 5, 478, 240, 2, 4965, 4967, 7, 960, 2, 2, 4966,
	4964, 3, 2, 2, 2, 4966, 4965, 3, 2, 2, 2, 4966, 4967, 3, 2, 2, 2, 4967,
	443, 3, 2, 2, 2, 4968, 4974, 9, 78, 2, 2, 4969, 4975, 7, 323, 2, 2, 4970,
	4975, 7, 432, 2, 2, 4971, 4972, 7, 701, 2, 2, 4972, 4973, 7, 936, 2, 2,
	4973, 4975, 9, 79, 2, 2, 4974, 4969, 3, 2, 2, 2, 4974, 4970, 3, 2, 2, 2,
	4974, 4971, 3, 2, 2, 2, 4974, 4975, 3, 2, 2, 2, 4975, 4976, 3, 2, 2, 2,
	4976, 4977, 5, 450, 226, 2, 4977, 445, 3, 2, 2, 2, 4978, 4979, 7, 343,
	2, 2, 4979, 4980, 7, 960, 2, 2, 4980, 447, 3, 2, 2, 2, 4981, 4982, 7, 162,
	2, 2, 4982, 4983, 5, 478, 240, 2, 4983, 449, 3, 2, 2, 2, 4984, 4990, 5,
	170, 86, 2, 4985, 4990, 5, 156, 79, 2, 4986, 4990, 5, 162, 82, 2, 4987,
	4990, 5, 168, 85, 2, 4988, 4990, 5, 172, 87, 2, 4989, 4984, 3, 2, 2, 2,
	4989, 4985, 3, 2, 2, 2, 4989, 4986, 3, 2, 2, 2, 4989, 4987, 3, 2, 2, 2,
	4989, 4988, 3, 2, 2, 2, 4990, 4995, 3, 2, 2, 2, 4991, 4992, 7, 57, 2, 2,
	4992, 4993, 7, 284, 2, 2, 4993, 4995, 5, 478, 240, 2, 4994, 4989, 3, 2,
	2, 2, 4994, 4991, 3, 2, 2, 2, 4995, 451, 3, 2, 2, 2, 4996, 5000, 5, 478,
	240, 2, 4997, 5001, 7, 967, 2, 2, 4998, 4999, 7, 944, 2, 2, 4999, 5001,
	5, 478, 240, 2, 5000, 4997, 3, 2, 2, 2, 5000, 4998, 3, 2, 2, 2, 5000, 5001,
	3, 2, 2, 2, 5001, 453, 3, 2, 2, 2, 5002, 5006, 5, 478, 240, 2, 5003, 5007,
	7, 967, 2, 2, 5004, 5005, 7, 944, 2, 2, 5005, 5007, 5, 478, 240, 2, 5006,
	5003, 3, 2, 2, 2, 5006, 5004, 3, 2, 2, 2, 5006, 5007, 3, 2, 2, 2, 5007,
	455, 3, 2, 2, 2, 5008, 5013, 5, 478, 240, 2, 5009, 5011, 5, 482, 242, 2,
	5010, 5012, 5, 482, 242, 2, 5011, 5010, 3, 2, 2, 2, 5011, 5012, 3, 2, 2,
	2, 5012, 5014, 3, 2, 2, 2, 5013, 5009, 3, 2, 2, 2, 5013, 5014, 3, 2, 2,
	2, 5014, 457, 3, 2, 2, 2, 5015, 5020, 5, 478, 240, 2, 5016, 5017, 7, 945,
	2, 2, 5017, 5018, 5, 484, 243, 2, 5018, 5019, 7, 946, 2, 2, 5019, 5021,
	3, 2, 2, 2, 5020, 5016, 3, 2, 2, 2, 5020, 5021, 3, 2, 2, 2, 5021, 5023,
	3, 2, 2, 2, 5022, 5024, 9, 41, 2, 2, 5023, 5022, 3, 2, 2, 2, 5023, 5024,
	3, 2, 2, 2, 5024, 459, 3, 2, 2, 2, 5025, 5026, 7, 970, 2, 2, 5026, 461,
	3, 2, 2, 2, 5027, 5028, 9, 80, 2, 2, 5028, 463, 3, 2, 2, 2, 5029, 5034,
	7, 190, 2, 2, 5030, 5034, 5, 562, 282, 2, 5031, 5034, 7, 960, 2, 2, 5032,
	5034, 7, 957, 2, 2, 5033, 5029, 3, 2, 2, 2, 5033, 5030, 3, 2, 2, 2, 5033,
	5031, 3, 2, 2, 2, 5033, 5032, 3, 2, 2, 2, 5034, 465, 3, 2, 2, 2, 5035,
	5038, 5, 478, 240, 2, 5036, 5038, 7, 960, 2, 2, 5037, 5035, 3, 2, 2, 2,
	5037, 5036, 3, 2, 2, 2, 5038, 467, 3, 2, 2, 2, 5039, 5040, 9, 81, 2, 2,
	5040, 469, 3, 2, 2, 2, 5041, 5042, 5, 484, 243, 2, 5042, 5043, 7, 933,
	2, 2, 5043, 5044, 5, 484, 243, 2, 5044, 5045, 7, 933, 2, 2, 5045, 5046,
	5, 484, 243, 2, 5046, 5047, 7, 933, 2, 2, 5047, 5048, 5, 484, 243, 2, 5048,
	5049, 7, 933, 2, 2, 5049, 5055, 5, 484, 243, 2, 5050, 5051, 7, 956, 2,
	2, 5051, 5052, 5, 484, 243, 2, 5052, 5053, 7, 933, 2, 2, 5053, 5054, 5,
	484, 243, 2, 5054, 5056, 3, 2, 2, 2, 5055, 5050, 3, 2, 2, 2, 5056, 5057,
	3, 2, 2, 2, 5057, 5055, 3, 2, 2, 2, 5057, 5058, 3, 2, 2, 2, 5058, 471,
	3, 2, 2, 2, 5059, 5066, 5, 474, 238, 2, 5060, 5061, 7, 947, 2, 2, 5061,
	5064, 5, 474, 238, 2, 5062, 5063, 7, 947, 2, 2, 5063, 5065, 5, 484, 243,
	2, 5064, 5062, 3, 2, 2, 2, 5064, 5065, 3, 2, 2, 2, 5065, 5067, 3, 2, 2,
	2, 5066, 5060, 3, 2, 2, 2, 5066, 5067, 3, 2, 2, 2, 5067, 473, 3, 2, 2,
	2, 5068, 5076, 7, 960, 2, 2, 5069, 5076, 7, 965, 2, 2, 5070, 5072, 7, 962,
	2, 2, 5071, 5070, 3, 2, 2, 2, 5072, 5073, 3, 2, 2, 2, 5073, 5071, 3, 2,
	2, 2, 5073, 5074, 3, 2, 2, 2, 5074, 5076, 3, 2, 2, 2, 5075, 5068, 3, 2,
	2, 2, 5075, 5069, 3, 2, 2, 2, 5075, 5071, 3, 2, 2, 2, 5076, 475, 3, 2,
	2, 2, 5077, 5080, 5, 478, 240, 2, 5078, 5080, 7, 960, 2, 2, 5079, 5077,
	3, 2, 2, 2, 5079, 5078, 3, 2, 2, 2, 5080, 477, 3, 2, 2, 2, 5081, 5085,
	5, 480, 241, 2, 5082, 5085, 7, 969, 2, 2, 5083, 5085, 7, 957, 2, 2, 5084,
	5081, 3, 2, 2, 2, 5084, 5082, 3, 2, 2, 2, 5084, 5083, 3, 2, 2, 2, 5085,
	479, 3, 2, 2, 2, 5086, 5097, 7, 968, 2, 2, 5087, 5097, 5, 562, 282, 2,
	5088, 5097, 5, 564, 283, 2, 5089, 5097, 5, 468, 235, 2, 5090, 5097, 5,
	566, 284, 2, 5091, 5097, 5, 568, 285, 2, 5092, 5097, 5, 570, 286, 2, 5093,
	5097, 5, 572, 287, 2, 5094, 5097, 5, 574, 288, 2, 5095, 5097, 5, 502, 252,
	2, 5096, 5086, 3, 2, 2, 2, 5096, 5087, 3, 2, 2, 2, 5096, 5088, 3, 2, 2,
	2, 5096, 5089, 3, 2, 2, 2, 5096, 5090, 3, 2, 2, 2, 5096, 5091, 3, 2, 2,
	2, 5096, 5092, 3, 2, 2, 2, 5096, 5093, 3, 2, 2, 2, 5096, 5094, 3, 2, 2,
	2, 5096, 5095, 3, 2, 2, 2, 5097, 481, 3, 2, 2, 2, 5098, 5102, 7, 967, 2,
	2, 5099, 5100, 7, 944, 2, 2, 5100, 5102, 5, 478, 240, 2, 5101, 5098, 3,
	2, 2, 2, 5101, 5099, 3, 2, 2, 2, 5102, 483, 3, 2, 2, 2, 5103, 5104, 9,
	82, 2, 2, 5104, 485, 3, 2, 2, 2, 5105, 5108, 7, 958, 2, 2, 5106, 5108,
	5, 484, 243, 2, 5107, 5105, 3, 2, 2, 2, 5107, 5106, 3, 2, 2, 2, 5108, 487,
	3, 2, 2, 2, 5109, 5111, 7, 966, 2, 2, 5110, 5109, 3, 2, 2, 2, 5110, 5111,
	3, 2, 2, 2, 5111, 5112, 3, 2, 2, 2, 5112, 5115, 7, 960, 2, 2, 5113, 5115,
	7, 959, 2, 2, 5114, 5110, 3, 2, 2, 2, 5114, 5113, 3, 2, 2, 2, 5115, 5117,
	3, 2, 2, 2, 5116, 5118, 7, 960, 2, 2, 5117, 5116, 3, 2, 2, 2, 5118, 5119,
	3, 2, 2, 2, 5119, 5117, 3, 2, 2, 2, 5119, 5120, 3, 2, 2, 2, 5120, 5133,
	3, 2, 2, 2, 5121, 5123, 7, 966, 2, 2, 5122, 5121, 3, 2, 2, 2, 5122, 5123,
	3, 2, 2, 2, 5123, 5124, 3, 2, 2, 2, 5124, 5127, 7, 960, 2, 2, 5125, 5127,
	7, 959, 2, 2, 5126, 5122, 3, 2, 2, 2, 5126, 5125, 3, 2, 2, 2, 5127, 5130,
	3, 2, 2, 2, 5128, 5129, 7, 25, 2, 2, 5129, 5131, 5, 466, 234, 2, 5130,
	5128, 3, 2, 2, 2, 5130, 5131, 3, 2, 2, 2, 5131, 5133, 3, 2, 2, 2, 5132,
	5114, 3, 2, 2, 2, 5132, 5126, 3, 2, 2, 2, 5133, 489, 3, 2, 2, 2, 5134,
	5135, 9, 83, 2, 2, 5135, 491, 3, 2, 2, 2, 5136, 5138, 7, 966, 2, 2, 5137,
	5136, 3, 2, 2, 2, 5137, 5138, 3, 2, 2, 2, 5138, 5139, 3, 2, 2, 2, 5139,
	5140, 7, 962, 2, 2, 5140, 493, 3, 2, 2, 2, 5141, 5144, 7, 99, 2, 2, 5142,
	5144, 9, 84, 2, 2, 5143, 5141, 3, 2, 2, 2, 5143, 5142, 3, 2, 2, 2, 5144,
	495, 3, 2, 2, 2, 5145, 5154, 5, 488, 245, 2, 5146, 5154, 5, 484, 243, 2,
	5147, 5154, 5, 492, 247, 2, 5148, 5154, 5, 490, 246, 2, 5149, 5154, 7,
	963, 2, 2, 5150, 5154, 7, 965, 2, 2, 5151, 5154, 7, 99, 2, 2, 5152, 5154,
	9, 84, 2, 2, 5153, 5145, 3, 2, 2, 2, 5153, 5146, 3, 2, 2, 2, 5153, 5147,
	3, 2, 2, 2, 5153, 5148, 3, 2, 2, 2, 5153, 5149, 3, 2, 2, 2, 5153, 5150,
	3, 2, 2, 2, 5153, 5151, 3, 2, 2, 2, 5153, 5152, 3, 2, 2, 2, 5154, 497,
	3, 2, 2, 2, 5155, 5157, 9, 85, 2, 2, 5156, 5158, 5, 504, 253, 2, 5157,
	5156, 3, 2, 2, 2, 5157, 5158, 3, 2, 2, 2, 5158, 5160, 3, 2, 2, 2, 5159,
	5161, 7, 190, 2, 2, 5160, 5159, 3, 2, 2, 2, 5160, 5161, 3, 2, 2, 2, 5161,
	5165, 3, 2, 2, 2, 5162, 5163, 7, 23, 2, 2, 5163, 5164, 7, 134, 2, 2, 5164,
	5166, 5, 464, 233, 2, 5165, 5162, 3, 2, 2, 2, 5165, 5166, 3, 2, 2, 2, 5166,
	5169, 3, 2, 2, 2, 5167, 5168, 7, 25, 2, 2, 5168, 5170, 5, 466, 234, 2,
	5169, 5167, 3, 2, 2, 2, 5169, 5170, 3, 2, 2, 2, 5170, 5231, 3, 2, 2, 2,
	5171, 5173, 9, 86, 2, 2, 5172, 5174, 5, 504, 253, 2, 5173, 5172, 3, 2,
	2, 2, 5173, 5174, 3, 2, 2, 2, 5174, 5176, 3, 2, 2, 2, 5175, 5177, 7, 159,
	2, 2, 5176, 5175, 3, 2, 2, 2, 5176, 5177, 3, 2, 2, 2, 5177, 5179, 3, 2,
	2, 2, 5178, 5180, 7, 171, 2, 2, 5179, 5178, 3, 2, 2, 2, 5179, 5180, 3,
	2, 2, 2, 5180, 5231, 3, 2, 2, 2, 5181, 5183, 9, 87, 2, 2, 5182, 5184, 5,
	506, 254, 2, 5183, 5182, 3, 2, 2, 2, 5183, 5184, 3, 2, 2, 2, 5184, 5186,
	3, 2, 2, 2, 5185, 5187, 7, 159, 2, 2, 5186, 5185, 3, 2, 2, 2, 5186, 5187,
	3, 2, 2, 2, 5187, 5189, 3, 2, 2, 2, 5188, 5190, 7, 171, 2, 2, 5189, 5188,
	3, 2, 2, 2, 5189, 5190, 3, 2, 2, 2, 5190, 5231, 3, 2, 2, 2, 5191, 5193,
	9, 88, 2, 2, 5192, 5194, 5, 508, 255, 2, 5193, 5192, 3, 2, 2, 2, 5193,
	5194, 3, 2, 2, 2, 5194, 5196, 3, 2, 2, 2, 5195, 5197, 7, 159, 2, 2, 5196,
	5195, 3, 2, 2, 2, 5196, 5197, 3, 2, 2, 2, 5197, 5199, 3, 2, 2, 2, 5198,
	5200, 7, 171, 2, 2, 5199, 5198, 3, 2, 2, 2, 5199, 5200, 3, 2, 2, 2, 5200,
	5231, 3, 2, 2, 2, 5201, 5231, 9, 89, 2, 2, 5202, 5204, 9, 90, 2, 2, 5203,
	5205, 5, 504, 253, 2, 5204, 5203, 3, 2, 2, 2, 5204, 5205, 3, 2, 2, 2, 5205,
	5231, 3, 2, 2, 2, 5206, 5207, 9, 91, 2, 2, 5207, 5208, 7, 945, 2, 2, 5208,
	5213, 7, 960, 2, 2, 5209, 5210, 7, 947, 2, 2, 5210, 5212, 7, 960, 2, 2,
	5211, 5209, 3, 2, 2, 2, 5212, 5215, 3, 2, 2, 2, 5213, 5211, 3, 2, 2, 2,
	5213, 5214, 3, 2, 2, 2, 5214, 5216, 3, 2, 2, 2, 5215, 5213, 3, 2, 2, 2,
	5216, 5218, 7, 946, 2, 2, 5217, 5219, 7, 190, 2, 2, 5218, 5217, 3, 2, 2,
	2, 5218, 5219, 3, 2, 2, 2, 5219, 5223, 3, 2, 2, 2, 5220, 5221, 7, 23, 2,
	2, 5221, 5222, 7, 134, 2, 2, 5222, 5224, 5, 464, 233, 2, 5223, 5220, 3,
	2, 2, 2, 5223, 5224, 3, 2, 2, 2, 5224, 5227, 3, 2, 2, 2, 5225, 5226, 7,
	25, 2, 2, 5226, 5228, 5, 466, 234, 2, 5227, 5225, 3, 2, 2, 2, 5227, 5228,
	3, 2, 2, 2, 5228, 5231, 3, 2, 2, 2, 5229, 5231, 5, 502, 252, 2, 5230, 5155,
	3, 2, 2, 2, 5230, 5171, 3, 2, 2, 2, 5230, 5181, 3, 2, 2, 2, 5230, 5191,
	3, 2, 2, 2, 5230, 5201, 3, 2, 2, 2, 5230, 5202, 3, 2, 2, 2, 5230, 5206,
	3, 2, 2, 2, 5230, 5229, 3, 2, 2, 2, 5231, 499, 3, 2, 2, 2, 5232, 5234,
	9, 92, 2, 2, 5233, 5235, 5, 504, 253, 2, 5234, 5233, 3, 2, 2, 2, 5234,
	5235, 3, 2, 2, 2, 5235, 5257, 3, 2, 2, 2, 5236, 5238, 7, 188, 2, 2, 5237,
	5239, 5, 504, 253, 2, 5238, 5237, 3, 2, 2, 2, 5238, 5239, 3, 2, 2, 2, 5239,
	5243, 3, 2, 2, 2, 5240, 5241, 7, 23, 2, 2, 5241, 5242, 7, 134, 2, 2, 5242,
	5244, 5, 464, 233, 2, 5243, 5240, 3, 2, 2, 2, 5243, 5244, 3, 2, 2, 2, 5244,
	5257, 3, 2, 2, 2, 5245, 5257, 7, 183, 2, 2, 5246, 5257, 7, 186, 2, 2, 5247,
	5257, 7, 184, 2, 2, 5248, 5250, 7, 181, 2, 2, 5249, 5251, 5, 506, 254,
	2, 5250, 5249, 3, 2, 2, 2, 5250, 5251, 3, 2, 2, 2, 5251, 5257, 3, 2, 2,
	2, 5252, 5254, 9, 93, 2, 2, 5253, 5255, 7, 176, 2, 2, 5254, 5253, 3, 2,
	2, 2, 5254, 5255, 3, 2, 2, 2, 5255, 5257, 3, 2, 2, 2, 5256, 5232, 3, 2,
	2, 2, 5256, 5236, 3, 2, 2, 2, 5256, 5245, 3, 2, 2, 2, 5256, 5246, 3, 2,
	2, 2, 5256, 5247, 3, 2, 2, 2, 5256, 5248, 3, 2, 2, 2, 5256, 5252, 3, 2,
	2, 2, 5257, 501, 3, 2, 2, 2, 5258, 5259, 9, 94, 2, 2, 5259, 503, 3, 2,
	2, 2, 5260, 5261, 7, 945, 2, 2, 5261, 5262, 5, 484, 243, 2, 5262, 5263,
	7, 946, 2, 2, 5263, 505, 3, 2, 2, 2, 5264, 5265, 7, 945, 2, 2, 5265, 5266,
	5, 484, 243, 2, 5266, 5267, 7, 947, 2, 2, 5267, 5268, 5, 484, 243, 2, 5268,
	5269, 7, 946, 2, 2, 5269, 507, 3, 2, 2, 2, 5270, 5271, 7, 945, 2, 2, 5271,
	5274, 5, 484, 243, 2, 5272, 5273, 7, 947, 2, 2, 5273, 5275, 5, 484, 243,
	2, 5274, 5272, 3, 2, 2, 2, 5274, 5275, 3, 2, 2, 2, 5275, 5276, 3, 2, 2,
	2, 5276, 5277, 7, 946, 2, 2, 5277, 509, 3, 2, 2, 2, 5278, 5283, 5, 478,
	240, 2, 5279, 5280, 7, 947, 2, 2, 5280, 5282, 5, 478, 240, 2, 5281, 5279,
	3, 2, 2, 2, 5282, 5285, 3, 2, 2, 2, 5283, 5281, 3, 2, 2, 2, 5283, 5284,
	3, 2, 2, 2, 5284, 511, 3, 2, 2, 2, 5285, 5283, 3, 2, 2, 2, 5286, 5291,
	5, 452, 227, 2, 5287, 5288, 7, 947, 2, 2, 5288, 5290, 5, 452, 227, 2, 5289,
	5287, 3, 2, 2, 2, 5290, 5293, 3, 2, 2, 2, 5291, 5289, 3, 2, 2, 2, 5291,
	5292, 3, 2, 2, 2, 5292, 513, 3, 2, 2, 2, 5293, 5291, 3, 2, 2, 2, 5294,
	5295, 7, 945, 2, 2, 5295, 5296, 5, 452, 227, 2, 5296, 5297, 7, 947, 2,
	2, 5297, 5298, 5, 452, 227, 2, 5298, 5308, 7, 946, 2, 2, 5299, 5300, 7,
	947, 2, 2, 5300, 5301, 7, 945, 2, 2, 5301, 5302, 5, 452, 227, 2, 5302,
	5303, 7, 947, 2, 2, 5303, 5304, 5, 452, 227, 2, 5304, 5305, 7, 946, 2,
	2, 5305, 5307, 3, 2, 2, 2, 5306, 5299, 3, 2, 2, 2, 5307, 5310, 3, 2, 2,
	2, 5308, 5306, 3, 2, 2, 2, 5308, 5309, 3, 2, 2, 2, 5309, 515, 3, 2, 2,
	2, 5310, 5308, 3, 2, 2, 2, 5311, 5312, 7, 945, 2, 2, 5312, 5317, 5, 458,
	230, 2, 5313, 5314, 7, 947, 2, 2, 5314, 5316, 5, 458, 230, 2, 5315, 5313,
	3, 2, 2, 2, 5316, 5319, 3, 2, 2, 2, 5317, 5315, 3, 2, 2, 2, 5317, 5318,
	3, 2, 2, 2, 5318, 5320, 3, 2, 2, 2, 5319, 5317, 3, 2, 2, 2, 5320, 5321,
	7, 946, 2, 2, 5321, 517, 3, 2, 2, 2, 5322, 5327, 5, 546, 274, 2, 5323,
	5324, 7, 947, 2, 2, 5324, 5326, 5, 546, 274, 2, 5325, 5323, 3, 2, 2, 2,
	5326, 5329, 3, 2, 2, 2, 5327, 5325, 3, 2, 2, 2, 5327, 5328, 3, 2, 2, 2,
	5328, 519, 3, 2, 2, 2, 5329, 5327, 3, 2, 2, 2, 5330, 5335, 5, 496, 249,
	2, 5331, 5332, 7, 947, 2, 2, 5332, 5334, 5, 496, 249, 2, 5333, 5331, 3,
	2, 2, 2, 5334, 5337, 3, 2, 2, 2, 5335, 5333, 3, 2, 2, 2, 5335, 5336, 3,
	2, 2, 2, 5336, 521, 3, 2, 2, 2, 5337, 5335, 3, 2, 2, 2, 5338, 5343, 7,
	960, 2, 2, 5339, 5340, 7, 947, 2, 2, 5340, 5342, 7, 960, 2, 2, 5341, 5339,
	3, 2, 2, 2, 5342, 5345, 3, 2, 2, 2, 5343, 5341, 3, 2, 2, 2, 5343, 5344,
	3, 2, 2, 2, 5344, 523, 3, 2, 2, 2, 5345, 5343, 3, 2, 2, 2, 5346, 5351,
	7, 971, 2, 2, 5347, 5348, 7, 947, 2, 2, 5348, 5350, 7, 971, 2, 2, 5349,
	5347, 3, 2, 2, 2, 5350, 5353, 3, 2, 2, 2, 5351, 5349, 3, 2, 2, 2, 5351,
	5352, 3, 2, 2, 2, 5352, 525, 3, 2, 2, 2, 5353, 5351, 3, 2, 2, 2, 5354,
	5357, 7, 102, 2, 2, 5355, 5357, 5, 496, 249, 2, 5356, 5354, 3, 2, 2, 2,
	5356, 5355, 3, 2, 2, 2, 5357, 527, 3, 2, 2, 2, 5358, 5359, 7, 66, 2, 2,
	5359, 5360, 7, 52, 2, 2, 5360, 529, 3, 2, 2, 2, 5361, 5362, 7, 66, 2, 2,
	5362, 5363, 7, 100, 2, 2, 5363, 5364, 7, 52, 2, 2, 5364, 531, 3, 2, 2,
	2, 5365, 5385, 5, 534, 268, 2, 5366, 5385, 5, 538, 270, 2, 5367, 5368,
	5, 540, 271, 2, 5368, 5370, 7, 945, 2, 2, 5369, 5371, 5, 542, 272, 2, 5370,
	5369, 3, 2, 2, 2, 5370, 5371, 3, 2, 2, 2, 5371, 5372, 3, 2, 2, 2, 5372,
	5373, 7, 946, 2, 2, 5373, 5385, 3, 2, 2, 2, 5374, 5376, 5, 478, 240, 2,
	5375, 5377, 5, 482, 242, 2, 5376, 5375, 3, 2, 2, 2, 5376, 5377, 3, 2, 2,
	2, 5377, 5378, 3, 2, 2, 2, 5378, 5380, 7, 945, 2, 2, 5379, 5381, 5, 542,
	272, 2, 5380, 5379, 3, 2, 2, 2, 5380, 5381, 3, 2, 2, 2, 5381, 5382, 3,
	2, 2, 2, 5382, 5383, 7, 946, 2, 2, 5383, 5385, 3, 2, 2, 2, 5384, 5365,
	3, 2, 2, 2, 5384, 5366, 3, 2, 2, 2, 5384, 5367, 3, 2, 2, 2, 5384, 5374,
	3, 2, 2, 2, 5385, 533, 3, 2, 2, 2, 5386, 5552, 9, 95, 2, 2, 5387, 5388,
	7, 30, 2, 2, 5388, 5389, 7, 945, 2, 2, 5389, 5390, 5, 546, 274, 2, 5390,
	5391, 7, 947, 2, 2, 5391, 5392, 5, 500, 251, 2, 5392, 5393, 7, 946, 2,
	2, 5393, 5552, 3, 2, 2, 2, 5394, 5395, 7, 30, 2, 2, 5395, 5396, 7, 945,
	2, 2, 5396, 5397, 5, 546, 274, 2, 5397, 5398, 7, 163, 2, 2, 5398, 5399,
	5, 464, 233, 2, 5399, 5400, 7, 946, 2, 2, 5400, 5552, 3, 2, 2, 2, 5401,
	5402, 7, 21, 2, 2, 5402, 5403, 7, 945, 2, 2, 5403, 5404, 5, 546, 274, 2,
	5404, 5405, 7, 12, 2, 2, 5405, 5406, 5, 500, 251, 2, 5406, 5407, 7, 946,
	2, 2, 5407, 5552, 3, 2, 2, 2, 5408, 5409, 7, 164, 2, 2, 5409, 5410, 7,
	945, 2, 2, 5410, 5411, 5, 456, 229, 2, 5411, 5412, 7, 946, 2, 2, 5412,
	5552, 3, 2, 2, 2, 5413, 5414, 7, 20, 2, 2, 5414, 5420, 5, 546, 274, 2,
	5415, 5416, 7, 165, 2, 2, 5416, 5417, 5, 544, 273, 2, 5417, 5418, 7, 150,
	2, 2, 5418, 5419, 5, 544, 273, 2, 5419, 5421, 3, 2, 2, 2, 5420, 5415, 3,
	2, 2, 2, 5421, 5422, 3, 2, 2, 2, 5422, 5420, 3, 2, 2, 2, 5422, 5423, 3,
	2, 2, 2, 5423, 5426, 3, 2, 2, 2, 5424, 5425, 7, 48, 2, 2, 5425, 5427, 5,
	544, 273, 2, 5426, 5424, 3, 2, 2, 2, 5426, 5427, 3, 2, 2, 2, 5427, 5428,
	3, 2, 2, 2, 5428, 5429, 7, 308, 2, 2, 5429, 5552, 3, 2, 2, 2, 5430, 5436,
	7, 20, 2, 2, 5431, 5432, 7, 165, 2, 2, 5432, 5433, 5, 544, 273, 2, 5433,
	5434, 7, 150, 2, 2, 5434, 5435, 5, 544, 273, 2, 5435, 5437, 3, 2, 2, 2,
	5436, 5431, 3, 2, 2, 2, 5437, 5438, 3, 2, 2, 2, 5438, 5436, 3, 2, 2, 2,
	5438, 5439, 3, 2, 2, 2, 5439, 5442, 3, 2, 2, 2, 5440, 5441, 7, 48, 2, 2,
	5441, 5443, 5, 544, 273, 2, 5442, 5440, 3, 2, 2, 2, 5442, 5443, 3, 2, 2,
	2, 5443, 5444, 3, 2, 2, 2, 5444, 5445, 7, 308, 2, 2, 5445, 5552, 3, 2,
	2, 2, 5446, 5447, 7, 188, 2, 2, 5447, 5448, 7, 945, 2, 2, 5448, 5451, 5,
	542, 272, 2, 5449, 5450, 7, 163, 2, 2, 5450, 5452, 5, 464, 233, 2, 5451,
	5449, 3, 2, 2, 2, 5451, 5452, 3, 2, 2, 2, 5452, 5453, 3, 2, 2, 2, 5453,
	5454, 7, 946, 2, 2, 5454, 5552, 3, 2, 2, 2, 5455, 5456, 7, 239, 2, 2, 5456,
	5459, 7, 945, 2, 2, 5457, 5460, 5, 488, 245, 2, 5458, 5460, 5, 546, 274,
	2, 5459, 5457, 3, 2, 2, 2, 5459, 5458, 3, 2, 2, 2, 5460, 5461, 3, 2, 2,
	2, 5461, 5464, 7, 68, 2, 2, 5462, 5465, 5, 488, 245, 2, 5463, 5465, 5,
	546, 274, 2, 5464, 5462, 3, 2, 2, 2, 5464, 5463, 3, 2, 2, 2, 5465, 5466,
	3, 2, 2, 2, 5466, 5467, 7, 946, 2, 2, 5467, 5552, 3, 2, 2, 2, 5468, 5469,
	9, 96, 2, 2, 5469, 5472, 7, 945, 2, 2, 5470, 5473, 5, 488, 245, 2, 5471,
	5473, 5, 546, 274, 2, 5472, 5470, 3, 2, 2, 2, 5472, 5471, 3, 2, 2, 2, 5473,
	5474, 3, 2, 2, 2, 5474, 5477, 7, 60, 2, 2, 5475, 5478, 5, 484, 243, 2,
	5476, 5478, 5, 546, 274, 2, 5477, 5475, 3, 2, 2, 2, 5477, 5476, 3, 2, 2,
	2, 5478, 5484, 3, 2, 2, 2, 5479, 5482, 7, 57, 2, 2, 5480, 5483, 5, 484,
	243, 2, 5481, 5483, 5, 546, 274, 2, 5482, 5480, 3, 2, 2, 2, 5482, 5481,
	3, 2, 2, 2, 5483, 5485, 3, 2, 2, 2, 5484, 5479, 3, 2, 2, 2, 5484, 5485,
	3, 2, 2, 2, 5485, 5486, 3, 2, 2, 2, 5486, 5487, 7, 946, 2, 2, 5487, 5552,
	3, 2, 2, 2, 5488, 5489, 7, 243, 2, 2, 5489, 5490, 7, 945, 2, 2, 5490, 5493,
	9, 97, 2, 2, 5491, 5494, 5, 488, 245, 2, 5492, 5494, 5, 546, 274, 2, 5493,
	5491, 3, 2, 2, 2, 5493, 5492, 3, 2, 2, 2, 5493, 5494, 3, 2, 2, 2, 5494,
	5495, 3, 2, 2, 2, 5495, 5498, 7, 60, 2, 2, 5496, 5499, 5, 488, 245, 2,
	5497, 5499, 5, 546, 274, 2, 5498, 5496, 3, 2, 2, 2, 5498, 5497, 3, 2, 2,
	2, 5499, 5500, 3, 2, 2, 2, 5500, 5501, 7, 946, 2, 2, 5501, 5552, 3, 2,
	2, 2, 5502, 5503, 7, 243, 2, 2, 5503, 5506, 7, 945, 2, 2, 5504, 5507, 5,
	488, 245, 2, 5505, 5507, 5, 546, 274, 2, 5506, 5504, 3, 2, 2, 2, 5506,
	5505, 3, 2, 2, 2, 5507, 5508, 3, 2, 2, 2, 5508, 5511, 7, 60, 2, 2, 5509,
	5512, 5, 488, 245, 2, 5510, 5512, 5, 546, 274, 2, 5511, 5509, 3, 2, 2,
	2, 5511, 5510, 3, 2, 2, 2, 5512, 5513, 3, 2, 2, 2, 5513, 5514, 7, 946,
	2, 2, 5514, 5552, 3, 2, 2, 2, 5515, 5516, 7, 915, 2, 2, 5516, 5519, 7,
	945, 2, 2, 5517, 5520, 5, 488, 245, 2, 5518, 5520, 5, 546, 274, 2, 5519,
	5517, 3, 2, 2, 2, 5519, 5518, 3, 2, 2, 2, 5520, 5527, 3, 2, 2, 2, 5521,
	5522, 7, 12, 2, 2, 5522, 5523, 9, 98, 2, 2, 5523, 5524, 7, 945, 2, 2, 5524,
	5525, 5, 484, 243, 2, 5525, 5526, 7, 946, 2, 2, 5526, 5528, 3, 2, 2, 2,
	5527, 5521, 3, 2, 2, 2, 5527, 5528, 3, 2, 2, 2, 5528, 5530, 3, 2, 2, 2,
	5529, 5531, 5, 536, 269, 2, 5530, 5529, 3, 2, 2, 2, 5530, 5531, 3, 2, 2,
	2, 5531, 5532, 3, 2, 2, 2, 5532, 5533, 7, 946, 2, 2, 5533, 5552, 3, 2,
	2, 2, 5534, 5535, 7, 236, 2, 2, 5535, 5536, 7, 945, 2, 2, 5536, 5537, 5,
	60, 31, 2, 5537, 5540, 7, 60, 2, 2, 5538, 5541, 5, 488, 245, 2, 5539, 5541,
	5, 546, 274, 2, 5540, 5538, 3, 2, 2, 2, 5540, 5539, 3, 2, 2, 2, 5541, 5542,
	3, 2, 2, 2, 5542, 5543, 7, 946, 2, 2, 5543, 5552, 3, 2, 2, 2, 5544, 5545,
	7, 716, 2, 2, 5545, 5546, 7, 945, 2, 2, 5546, 5547, 9, 99, 2, 2, 5547,
	5548, 7, 947, 2, 2, 5548, 5549, 5, 488, 245, 2, 5549, 5550, 7, 946, 2,
	2, 5550, 5552, 3, 2, 2, 2, 5551, 5386, 3, 2, 2, 2, 5551, 5387, 3, 2, 2,
	2, 5551, 5394, 3, 2, 2, 2, 5551, 5401, 3, 2, 2, 2, 5551, 5408, 3, 2, 2,
	2, 5551, 5413, 3, 2, 2, 2, 5551, 5430, 3, 2, 2, 2, 5551, 5446, 3, 2, 2,
	2, 5551, 5455, 3, 2, 2, 2, 5551, 5468, 3, 2, 2, 2, 5551, 5488, 3, 2, 2,
	2, 5551, 5502, 3, 2, 2, 2, 5551, 5515, 3, 2, 2, 2, 5551, 5534, 3, 2, 2,
	2, 5551, 5544, 3, 2, 2, 2, 5552, 535, 3, 2, 2, 2, 5553, 5554, 7, 367, 2,
	2, 5554, 5556, 5, 484, 243, 2, 5555, 5557, 9, 100, 2, 2, 5556, 5555, 3,
	2, 2, 2, 5556, 5557, 3, 2, 2, 2, 5557, 5565, 3, 2, 2, 2, 5558, 5559, 7,
	947, 2, 2, 5559, 5561, 5, 484, 243, 2, 5560, 5562, 9, 100, 2, 2, 5561,
	5560, 3, 2, 2, 2, 5561, 5562, 3, 2, 2, 2, 5562, 5564, 3, 2, 2, 2, 5563,
	5558, 3, 2, 2, 2, 5564, 5567, 3, 2, 2, 2, 5565, 5563, 3, 2, 2, 2, 5565,
	5566, 3, 2, 2, 2, 5566, 5574, 3, 2, 2, 2, 5567, 5565, 3, 2, 2, 2, 5568,
	5569, 7, 367, 2, 2, 5569, 5570, 5, 484, 243, 2, 5570, 5571, 7, 933, 2,
	2, 5571, 5572, 5, 484, 243, 2, 5572, 5574, 3, 2, 2, 2, 5573, 5553, 3, 2,
	2, 2, 5573, 5568, 3, 2, 2, 2, 5574, 537, 3, 2, 2, 2, 5575, 5576, 9, 101,
	2, 2, 5576, 5578, 7, 945, 2, 2, 5577, 5579, 9, 37, 2, 2, 5578, 5577, 3,
	2, 2, 2, 5578, 5579, 3, 2, 2, 2, 5579, 5580, 3, 2, 2, 2, 5580, 5581, 5,
	544, 273, 2, 5581, 5582, 7, 946, 2, 2, 5582, 5632, 3, 2, 2, 2, 5583, 5584,
	7, 216, 2, 2, 5584, 5590, 7, 945, 2, 2, 5585, 5591, 7, 929, 2, 2, 5586,
	5588, 7, 8, 2, 2, 5587, 5586, 3, 2, 2, 2, 5587, 5588, 3, 2, 2, 2, 5588,
	5589, 3, 2, 2, 2, 5589, 5591, 5, 544, 273, 2, 5590, 5585, 3, 2, 2, 2, 5590,
	5587, 3, 2, 2, 2, 5591, 5592, 3, 2, 2, 2, 5592, 5632, 7, 946, 2, 2, 5593,
	5594, 7, 216, 2, 2, 5594, 5595, 7, 945, 2, 2, 5595, 5596, 7, 44, 2, 2,
	5596, 5597, 5, 542, 272, 2, 5597, 5598, 7, 946, 2, 2, 5598, 5632, 3, 2,
	2, 2, 5599, 5600, 9, 102, 2, 2, 5600, 5602, 7, 945, 2, 2, 5601, 5603, 7,
	8, 2, 2, 5602, 5601, 3, 2, 2, 2, 5602, 5603, 3, 2, 2, 2, 5603, 5604, 3,
	2, 2, 2, 5604, 5605, 5, 544, 273, 2, 5605, 5606, 7, 946, 2, 2, 5606, 5632,
	3, 2, 2, 2, 5607, 5608, 7, 217, 2, 2, 5608, 5610, 7, 945, 2, 2, 5609, 5611,
	7, 44, 2, 2, 5610, 5609, 3, 2, 2, 2, 5610, 5611, 3, 2, 2, 2, 5611, 5612,
	3, 2, 2, 2, 5612, 5623, 5, 542, 272, 2, 5613, 5614, 7, 108, 2, 2, 5614,
	5615, 7, 17, 2, 2, 5615, 5620, 5, 198, 100, 2, 5616, 5617, 7, 947, 2, 2,
	5617, 5619, 5, 198, 100, 2, 5618, 5616, 3, 2, 2, 2, 5619, 5622, 3, 2, 2,
	2, 5620, 5618, 3, 2, 2, 2, 5620, 5621, 3, 2, 2, 2, 5621, 5624, 3, 2, 2,
	2, 5622, 5620, 3, 2, 2, 2, 5623, 5613, 3, 2, 2, 2, 5623, 5624, 3, 2, 2,
	2, 5624, 5627, 3, 2, 2, 2, 5625, 5626, 7, 135, 2, 2, 5626, 5628, 7, 960,
	2, 2, 5627, 5625, 3, 2, 2, 2, 5627, 5628, 3, 2, 2, 2, 5628, 5629, 3, 2,
	2, 2, 5629, 5630, 7, 946, 2, 2, 5630, 5632, 3, 2, 2, 2, 5631, 5575, 3,
	2, 2, 2, 5631, 5583, 3, 2, 2, 2, 5631, 5593, 3, 2, 2, 2, 5631, 5599, 3,
	2, 2, 2, 5631, 5607, 3, 2, 2, 2, 5632, 539, 3, 2, 2, 2, 5633, 5656, 5,
	574, 288, 2, 5634, 5656, 7, 569, 2, 2, 5635, 5656, 7, 232, 2, 2, 5636,
	5656, 7, 228, 2, 2, 5637, 5656, 7, 229, 2, 2, 5638, 5656, 7, 230, 2, 2,
	5639, 5656, 7, 233, 2, 2, 5640, 5656, 7, 234, 2, 2, 5641, 5656, 7, 235,
	2, 2, 5642, 5656, 7, 66, 2, 2, 5643, 5656, 7, 231, 2, 2, 5644, 5656, 7,
	237, 2, 2, 5645, 5656, 7, 401, 2, 2, 5646, 5656, 7, 238, 2, 2, 5647, 5656,
	7, 124, 2, 2, 5648, 5656, 7, 240, 2, 2, 5649, 5656, 7, 241, 2, 2, 5650,
	5656, 7, 242, 2, 2, 5651, 5656, 7, 243, 2, 2, 5652, 5656, 7, 244, 2, 2,
	5653, 5656, 7, 245, 2, 2, 5654, 5656, 7, 246, 2, 2, 5655, 5633, 3, 2, 2,
	2, 5655, 5634, 3, 2, 2, 2, 5655, 5635, 3, 2, 2, 2, 5655, 5636, 3, 2, 2,
	2, 5655, 5637, 3, 2, 2, 2, 5655, 5638, 3, 2, 2, 2, 5655, 5639, 3, 2, 2,
	2, 5655, 5640, 3, 2, 2, 2, 5655, 5641, 3, 2, 2, 2, 5655, 5642, 3, 2, 2,
	2, 5655, 5643, 3, 2, 2, 2, 5655, 5644, 3, 2, 2, 2, 5655, 5645, 3, 2, 2,
	2, 5655, 5646, 3, 2, 2, 2, 5655, 5647, 3, 2, 2, 2, 5655, 5648, 3, 2, 2,
	2, 5655, 5649, 3, 2, 2, 2, 5655, 5650, 3, 2, 2, 2, 5655, 5651, 3, 2, 2,
	2, 5655, 5652, 3, 2, 2, 2, 5655, 5653, 3, 2, 2, 2, 5655, 5654, 3, 2, 2,
	2, 5656, 541, 3, 2, 2, 2, 5657, 5662, 5, 496, 249, 2, 5658, 5662, 5, 456,
	229, 2, 5659, 5662, 5, 532, 267, 2, 5660, 5662, 5, 546, 274, 2, 5661, 5657,
	3, 2, 2, 2, 5661, 5658, 3, 2, 2, 2, 5661, 5659, 3, 2, 2, 2, 5661, 5660,
	3, 2, 2, 2, 5662, 5672, 3, 2, 2, 2, 5663, 5668, 7, 947, 2, 2, 5664, 5669,
	5, 496, 249, 2, 5665, 5669, 5, 456, 229, 2, 5666, 5669, 5, 532, 267, 2,
	5667, 5669, 5, 546, 274, 2, 5668, 5664, 3, 2, 2, 2, 5668, 5665, 3, 2, 2,
	2, 5668, 5666, 3, 2, 2, 2, 5668, 5667, 3, 2, 2, 2, 5669, 5671, 3, 2, 2,
	2, 5670, 5663, 3, 2, 2, 2, 5671, 5674, 3, 2, 2, 2, 5672, 5670, 3, 2, 2,
	2, 5672, 5673, 3, 2, 2, 2, 5673, 543, 3, 2, 2, 2, 5674, 5672, 3, 2, 2,
	2, 5675, 5680, 5, 496, 249, 2, 5676, 5680, 5, 456, 229, 2, 5677, 5680,
	5, 532, 267, 2, 5678, 5680, 5, 546, 274, 2, 5679, 5675, 3, 2, 2, 2, 5679,
	5676, 3, 2, 2, 2, 5679, 5677, 3, 2, 2, 2, 5679, 5678, 3, 2, 2, 2, 5680,
	545, 3, 2, 2, 2, 5681, 5682, 8, 274, 1, 2, 5682, 5683, 9, 103, 2, 2, 5683,
	5693, 5, 546, 274, 6, 5684, 5685, 5, 548, 275, 2, 5685, 5687, 7, 76, 2,
	2, 5686, 5688, 7, 100, 2, 2, 5687, 5686, 3, 2, 2, 2, 5687, 5688, 3, 2,
	2, 2, 5688, 5689, 3, 2, 2, 2, 5689, 5690, 9, 104, 2, 2, 5690, 5693, 3,
	2, 2, 2, 5691, 5693, 5, 548, 275, 2, 5692, 5681, 3, 2, 2, 2, 5692, 5684,
	3, 2, 2, 2, 5692, 5691, 3, 2, 2, 2, 5693, 5700, 3, 2, 2, 2, 5694, 5695,
	12, 5, 2, 2, 5695, 5696, 5, 556, 279, 2, 5696, 5697, 5, 546, 274, 6, 5697,
	5699, 3, 2, 2, 2, 5698, 5694, 3, 2, 2, 2, 5699, 5702, 3, 2, 2, 2, 5700,
	5698, 3, 2, 2, 2, 5700, 5701, 3, 2, 2, 2, 5701, 547, 3, 2, 2, 2, 5702,
	5700, 3, 2, 2, 2, 5703, 5706, 8, 275, 1, 2, 5704, 5705, 7, 971, 2, 2, 5705,
	5707, 7, 920, 2, 2, 5706, 5704, 3, 2, 2, 2, 5706, 5707, 3, 2, 2, 2, 5707,
	5708, 3, 2, 2, 2, 5708, 5709, 5, 550, 276, 2, 5709, 5767, 3, 2, 2, 2, 5710,
	5711, 12, 9, 2, 2, 5711, 5712, 5, 554, 278, 2, 5712, 5713, 5, 548, 275,
	10, 5713, 5766, 3, 2, 2, 2, 5714, 5716, 12, 7, 2, 2, 5715, 5717, 7, 100,
	2, 2, 5716, 5715, 3, 2, 2, 2, 5716, 5717, 3, 2, 2, 2, 5717, 5718, 3, 2,
	2, 2, 5718, 5719, 7, 15, 2, 2, 5719, 5720, 5, 548, 275, 2, 5720, 5721,
	7, 11, 2, 2, 5721, 5722, 5, 548, 275, 8, 5722, 5766, 3, 2, 2, 2, 5723,
	5724, 12, 6, 2, 2, 5724, 5725, 7, 492, 2, 2, 5725, 5726, 7, 85, 2, 2, 5726,
	5766, 5, 548, 275, 7, 5727, 5729, 12, 4, 2, 2, 5728, 5730, 7, 100, 2, 2,
	5729, 5728, 3, 2, 2, 2, 5729, 5730, 3, 2, 2, 2, 5730, 5731, 3, 2, 2, 2,
	5731, 5732, 9, 105, 2, 2, 5732, 5766, 5, 548, 275, 5, 5733, 5735, 12, 11,
	2, 2, 5734, 5736, 7, 100, 2, 2, 5735, 5734, 3, 2, 2, 2, 5735, 5736, 3,
	2, 2, 2, 5736, 5737, 3, 2, 2, 2, 5737, 5738, 7, 68, 2, 2, 5738, 5741, 7,
	945, 2, 2, 5739, 5742, 5, 210, 106, 2, 5740, 5742, 5, 518, 260, 2, 5741,
	5739, 3, 2, 2, 2, 5741, 5740, 3, 2, 2, 2, 5742, 5743, 3, 2, 2, 2, 5743,
	5744, 7, 946, 2, 2, 5744, 5766, 3, 2, 2, 2, 5745, 5746, 12, 10, 2, 2, 5746,
	5747, 7, 76, 2, 2, 5747, 5766, 5, 494, 248, 2, 5748, 5749, 12, 8, 2, 2,
	5749, 5750, 5, 554, 278, 2, 5750, 5751, 9, 106, 2, 2, 5751, 5752, 7, 945,
	2, 2, 5752, 5753, 5, 210, 106, 2, 5753, 5754, 7, 946, 2, 2, 5754, 5766,
	3, 2, 2, 2, 5755, 5757, 12, 5, 2, 2, 5756, 5758, 7, 100, 2, 2, 5757, 5756,
	3, 2, 2, 2, 5757, 5758, 3, 2, 2, 2, 5758, 5759, 3, 2, 2, 2, 5759, 5760,
	7, 85, 2, 2, 5760, 5763, 5, 548, 275, 2, 5761, 5762, 7, 314, 2, 2, 5762,
	5764, 5, 488, 245, 2, 5763, 5761, 3, 2, 2, 2, 5763, 5764, 3, 2, 2, 2, 5764,
	5766, 3, 2, 2, 2, 5765, 5710, 3, 2, 2, 2, 5765, 5714, 3, 2, 2, 2, 5765,
	5723, 3, 2, 2, 2, 5765, 5727, 3, 2, 2, 2, 5765, 5733, 3, 2, 2, 2, 5765,
	5745, 3, 2, 2, 2, 5765, 5748, 3, 2, 2, 2, 5765, 5755, 3, 2, 2, 2, 5766,
	5769, 3, 2, 2, 2, 5767, 5765, 3, 2, 2, 2, 5767, 5768, 3, 2, 2, 2, 5768,
	549, 3, 2, 2, 2, 5769, 5767, 3, 2, 2, 2, 5770, 5771, 8, 276, 1, 2, 5771,
	5797, 7, 38, 2, 2, 5772, 5797, 5, 496, 249, 2, 5773, 5797, 5, 456, 229,
	2, 5774, 5797, 5, 532, 267, 2, 5775, 5797, 5, 462, 232, 2, 5776, 5777,
	5, 552, 277, 2, 5777, 5778, 5, 550, 276, 9, 5778, 5797, 3, 2, 2, 2, 5779,
	5780, 7, 190, 2, 2, 5780, 5797, 5, 550, 276, 8, 5781, 5782, 7, 945, 2,
	2, 5782, 5783, 5, 546, 274, 2, 5783, 5784, 7, 946, 2, 2, 5784, 5797, 3,
	2, 2, 2, 5785, 5787, 7, 52, 2, 2, 5786, 5785, 3, 2, 2, 2, 5786, 5787, 3,
	2, 2, 2, 5787, 5788, 3, 2, 2, 2, 5788, 5789, 7, 945, 2, 2, 5789, 5790,
	5, 210, 106, 2, 5790, 5791, 7, 946, 2, 2, 5791, 5797, 3, 2, 2, 2, 5792,
	5793, 7, 74, 2, 2, 5793, 5794, 5, 546, 274, 2, 5794, 5795, 5, 60, 31, 2,
	5795, 5797, 3, 2, 2, 2, 5796, 5770, 3, 2, 2, 2, 5796, 5772, 3, 2, 2, 2,
	5796, 5773, 3, 2, 2, 2, 5796, 5774, 3, 2, 2, 2, 5796, 5775, 3, 2, 2, 2,
	5796, 5776, 3, 2, 2, 2, 5796, 5779, 3, 2, 2, 2, 5796, 5781, 3, 2, 2, 2,
	5796, 5786, 3, 2, 2, 2, 5796, 5792, 3, 2, 2, 2, 5797, 5808, 3, 2, 2, 2,
	5798, 5799, 12, 4, 2, 2, 5799, 5800, 5, 558, 280, 2, 5800, 5801, 5, 550,
	276, 5, 5801, 5807, 3, 2, 2, 2, 5802, 5803, 12, 3, 2, 2, 5803, 5804, 5,
	560, 281, 2, 5804, 5805, 5, 550, 276, 4, 5805, 5807, 3, 2, 2, 2, 5806,
	5798, 3, 2, 2, 2, 5806, 5802, 3, 2, 2, 2, 5807, 5810, 3, 2, 2, 2, 5808,
	5806, 3, 2, 2, 2, 5808, 5809, 3, 2, 2, 2, 5809, 551, 3, 2, 2, 2, 5810,
	5808, 3, 2, 2, 2, 5811, 5812, 9, 107, 2, 2, 5812, 553, 3, 2, 2, 2, 5813,
	5828, 7, 936, 2, 2, 5814, 5828, 7, 937, 2, 2, 5815, 5828, 7, 938, 2, 2,
	5816, 5817, 7, 938, 2, 2, 5817, 5828, 7, 936, 2, 2, 5818, 5819, 7, 937,
	2, 2, 5819, 5828, 7, 936, 2, 2, 5820, 5821, 7, 938, 2, 2, 5821, 5828, 7,
	937, 2, 2, 5822, 5823, 7, 939, 2, 2, 5823, 5828, 7, 936, 2, 2, 5824, 5825,
	7, 938, 2, 2, 5825, 5826, 7, 936, 2, 2, 5826, 5828, 7, 937, 2, 2, 5827,
	5813, 3, 2, 2, 2, 5827, 5814, 3, 2, 2, 2, 5827, 5815, 3, 2, 2, 2, 5827,
	5816, 3, 2, 2, 2, 5827, 5818, 3, 2, 2, 2, 5827, 5820, 3, 2, 2, 2, 5827,
	5822, 3, 2, 2, 2, 5827, 5824, 3, 2, 2, 2, 5828, 555, 3, 2, 2, 2, 5829,
	5837, 7, 11, 2, 2, 5830, 5831, 7, 942, 2, 2, 5831, 5837, 7, 942, 2, 2,
	5832, 5837, 7, 170, 2, 2, 5833, 5837, 7, 107, 2, 2, 5834, 5835, 7, 941,
	2, 2, 5835, 5837, 7, 941, 2, 2, 5836, 5829, 3, 2, 2, 2, 5836, 5830, 3,
	2, 2, 2, 5836, 5832, 3, 2, 2, 2, 5836, 5833, 3, 2, 2, 2, 5836, 5834, 3,
	2, 2, 2, 5837, 557, 3, 2, 2, 2, 5838, 5839, 7, 938, 2, 2, 5839, 5846, 7,
	938, 2, 2, 5840, 5841, 7, 937, 2, 2, 5841, 5846, 7, 937, 2, 2, 5842, 5846,
	7, 942, 2, 2, 5843, 5846, 7, 943, 2, 2, 5844, 5846, 7, 941, 2, 2, 5845,
	5838, 3, 2, 2, 2, 5845, 5840, 3, 2, 2, 2, 5845, 5842, 3, 2, 2, 2, 5845,
	5843, 3, 2, 2, 2, 5845, 5844, 3, 2, 2, 2, 5846, 559, 3, 2, 2, 2, 5847,
	5848, 9, 108, 2, 2, 5848, 561, 3, 2, 2, 2, 5849, 5850, 9, 109, 2, 2, 5850,
	563, 3, 2, 2, 2, 5851, 5852, 9, 110, 2, 2, 5852, 565, 3, 2, 2, 2, 5853,
	5854, 9, 111, 2, 2, 5854, 567, 3, 2, 2, 2, 5855, 5856, 9, 112, 2, 2, 5856,
	569, 3, 2, 2, 2, 5857, 5858, 9, 113, 2, 2, 5858, 571, 3, 2, 2, 2, 5859,
	5860, 9, 114, 2, 2, 5860, 573, 3, 2, 2, 2, 5861, 5862, 9, 115, 2, 2, 5862,
	575, 3, 2, 2, 2, 857, 577, 581, 588, 593, 595, 601, 604, 607, 616, 655,
	667, 678, 695, 700, 712, 739, 745, 750, 756, 761, 765, 774, 777, 784, 788,
	795, 798, 803, 811, 816, 821, 824, 835, 838, 842, 845, 849, 852, 856, 859,
	862, 866, 869, 873, 879, 885, 891, 898, 905, 911, 917, 926, 945, 952, 956,
	966, 970, 974, 978, 982, 987, 990, 993, 996, 999, 1005, 1009, 1015, 1020,
	1023, 1026, 1028, 1039, 1043, 1046, 1060, 1063, 1067, 1070, 1074, 1077,
	1081, 1084, 1088, 1091, 1094, 1098, 1101, 1105, 1111, 1124, 1131, 1136,
	1139, 1144, 1152, 1158, 1162, 1165, 1170, 1174, 1178, 1181, 1189, 1191,
	1198, 1204, 1212, 1215, 1222, 1225, 1227, 1233, 1239, 1256, 1263, 1272,
	1286, 1299, 1304, 1320, 1328, 1338, 1344, 1352, 1357, 1366, 1370, 1372,
	1377, 1383, 1388, 1390, 1394, 1397, 1400, 1406, 1411, 1413, 1418, 1428,
	1435, 1439, 1447, 1455, 1463, 1467, 1470, 1476, 1481, 1484, 1490, 1493,
	1497, 1502, 1507, 1511, 1516, 1519, 1524, 1528, 1532, 1537, 1542, 1547,
	1553, 1558, 1563, 1569, 1574, 1579, 1584, 1589, 1594, 1599, 1604, 1609,
	1614, 1619, 1626, 1630, 1638, 1643, 1650, 1657, 1659, 1667, 1672, 1685,
	1687, 1690, 1698, 1704, 1710, 1720, 1725, 1732, 1734, 1737, 1741, 1744,
	1748, 1751, 1756, 1759, 1764, 1767, 1771, 1774, 1778, 1781, 1785, 1788,
	1792, 1795, 1802, 1805, 1810, 1814, 1817, 1821, 1824, 1829, 1832, 1837,
	1840, 1844, 1847, 1851, 1854, 1858, 1861, 1865, 1868, 1873, 1878, 1888,
	1892, 1899, 1904, 1907, 1912, 1919, 1923, 1927, 1935, 1954, 1957, 1960,
	1964, 1974, 1987, 1994, 1997, 2006, 2012, 2024, 2027, 2031, 2039, 2042,
	2047, 2055, 2061, 2065, 2070, 2077, 2081, 2092, 2100, 2103, 2109, 2115,
	2117, 2122, 2128, 2134, 2136, 2140, 2143, 2146, 2152, 2158, 2161, 2167,
	2173, 2175, 2180, 2187, 2192, 2200, 2204, 2212, 2216, 2221, 2228, 2232,
	2251, 2264, 2267, 2276, 2295, 2302, 2309, 2324, 2337, 2343, 2349, 2355,
	2361, 2367, 2373, 2378, 2385, 2392, 2399, 2402, 2406, 2409, 2422, 2429,
	2436, 2442, 2446, 2450, 2457, 2460, 2465, 2472, 2479, 2483, 2497, 2502,
	2511, 2514, 2518, 2527, 2531, 2534, 2537, 2545, 2551, 2560, 2563, 2574,
	2577, 2582, 2585, 2590, 2600, 2605, 2611, 2614, 2619, 2624, 2626, 2632,
	2637, 2639, 2645, 2653, 2658, 2666, 2669, 2674, 2677, 2682, 2690, 2698,
	2704, 2712, 2717, 2725, 2728, 2732, 2735, 2743, 2749, 2758, 2761, 2770,
	2779, 2785, 2789, 2793, 2795, 2798, 2801, 2809, 2815, 2819, 2822, 2825,
	2828, 2836, 2838, 2842, 2856, 2859, 2867, 2871, 2874, 2877, 2886, 2890,
	2893, 2897, 2901, 2904, 2907, 2912, 2918, 2922, 2932, 2938, 2942, 2948,
	2952, 2958, 2961, 2973, 2977, 2981, 2989, 2993, 3001, 3004, 3008, 3011,
	3019, 3024, 3027, 3030, 3034, 3037, 3046, 3051, 3060, 3065, 3072, 3079,
	3087, 3092, 3100, 3103, 3106, 3113, 3116, 3123, 3126, 3134, 3144, 3146,
	3153, 3164, 3170, 3174, 3185, 3190, 3192, 3196, 3208, 3218, 3224, 3229,
	3232, 3235, 3238, 3244, 3249, 3252, 3255, 3259, 3265, 3269, 3279, 3283,
	3289, 3298, 3301, 3305, 3308, 3312, 3316, 3319, 3321, 3326, 3331, 3335,
	3347, 3353, 3356, 3361, 3366, 3368, 3374, 3379, 3381, 3383, 3389, 3398,
	3403, 3405, 3409, 3413, 3419, 3426, 3435, 3438, 3442, 3446, 3450, 3453,
	3456, 3459, 3463, 3467, 3470, 3473, 3476, 3483, 3487, 3502, 3515, 3523,
	3533, 3537, 3540, 3544, 3547, 3550, 3559, 3568, 3578, 3582, 3592, 3607,
	3610, 3619, 3622, 3626, 3631, 3635, 3644, 3647, 3678, 3681, 3684, 3738,
	3760, 3774, 3781, 3785, 3791, 3799, 3801, 3812, 3822, 3833, 3841, 3846,
	3854, 3862, 3870, 3878, 3884, 3886, 3890, 3895, 3900, 3906, 3910, 3916,
	3918, 3929, 3937, 3941, 3948, 3950, 3964, 3970, 3975, 3980, 3986, 3993,
	4001, 4009, 4014, 4020, 4023, 4031, 4038, 4047, 4050, 4067, 4075, 4083,
	4087, 4101, 4107, 4114, 4121, 4126, 4129, 4131, 4137, 4139, 4143, 4145,
	4148, 4157, 4163, 4170, 4177, 4182, 4185, 4187, 4193, 4195, 4199, 4201,
	4204, 4209, 4216, 4225, 4230, 4239, 4246, 4251, 4254, 4256, 4262, 4264,
	4267, 4279, 4285, 4303, 4308, 4317, 4323, 4334, 4337, 4349, 4356, 4369,
	4381, 4392, 4394, 4404, 4414, 4424, 4428, 4432, 4441, 4468, 4483, 4490,
	4494, 4505, 4512, 4516, 4523, 4528, 4531, 4534, 4543, 4547, 4577, 4584,
	4588, 4595, 4598, 4603, 4613, 4617, 4623, 4626, 4639, 4642, 4645, 4649,
	4656, 4659, 4665, 4683, 4691, 4699, 4707, 4721, 4725, 4729, 4732, 4742,
	4750, 4754, 4761, 4764, 4773, 4779, 4785, 4795, 4797, 4803, 4806, 4809,
	4815, 4829, 4841, 4848, 4851, 4858, 4865, 4870, 4875, 4886, 4897, 4903,
	4908, 4914, 4926, 4935, 4937, 4944, 4947, 4950, 4956, 4960, 4966, 4974,
	4989, 4994, 5000, 5006, 5011, 5013, 5020, 5023, 5033, 5037, 5057, 5064,
	5066, 5073, 5075, 5079, 5084, 5096, 5101, 5107, 5110, 5114, 5119, 5122,
	5126, 5130, 5132, 5137, 5143, 5153, 5157, 5160, 5165, 5169, 5173, 5176,
	5179, 5183, 5186, 5189, 5193, 5196, 5199, 5204, 5213, 5218, 5223, 5227,
	5230, 5234, 5238, 5243, 5250, 5254, 5256, 5274, 5283, 5291, 5308, 5317,
	5327, 5335, 5343, 5351, 5356, 5370, 5376, 5380, 5384, 5422, 5426, 5438,
	5442, 5451, 5459, 5464, 5472, 5477, 5482, 5484, 5493, 5498, 5506, 5511,
	5519, 5527, 5530, 5540, 5551, 5556, 5561, 5565, 5573, 5578, 5587, 5590,
	5602, 5610, 5620, 5623, 5627, 5631, 5655, 5661, 5668, 5672, 5679, 5687,
	5692, 5700, 5706, 5716, 5729, 5735, 5741, 5757, 5763, 5765, 5767, 5786,
	5796, 5806, 5808, 5827, 5836, 5845,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "", "", "", "", "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'",
	"'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", "'CASCADE'",
	"'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'",
	"'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'",
	"'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'",
	"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'",
	"'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'",
	"'ENCLOSED'", "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'",
	"'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GRANT'",
	"'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'",
	"'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'",
	"'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'",
	"'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'",
	"'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'",
	"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "", "'NOT'", "'NO_WRITE_TO_BINLOG'",
	"'NULL'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'",
	"'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'",
	"'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'",
	"'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'",
	"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'",
	"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'",
	"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'",
	"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'",
	"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'",
	"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'",
	"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'",
	"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'",
	"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'",
	"'FLOAT'", "'DECIMAL'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'",
	"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'",
	"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'",
	"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'",
	"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'",
	"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'AVG'",
	"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'",
	"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'",
	"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'",
	"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'",
	"'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'",
	"'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'",
	"'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'",
	"'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'",
	"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BTREE'",
	"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'",
	"'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'",
	"'COLUMN_FORMAT'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'",
	"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'",
	"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'",
	"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'",
	"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'",
	"'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'",
	"'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'",
	"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'",
	"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'",
	"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'",
	"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'",
	"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'",
	"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'",
	"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVOKER'",
	"'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'",
	"'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'",
	"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'",
	"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'",
	"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'",
	"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'",
	"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'",
	"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'",
	"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'",
	"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MID'", "'MIGRATE'",
	"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'",
	"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'",
	"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'",
	"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'",
	"'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'",
	"'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PREPARE'",
	"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'",
	"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'",
	"'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'",
	"'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'",
	"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'",
	"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'",
	"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'",
	"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'",
	"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'",
	"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'",
	"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'",
	"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'",
	"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'",
	"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'",
	"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'",
	"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'",
	"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'",
	"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'",
	"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'",
	"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'",
	"'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'",
	"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'",
	"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'",
	"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'ARMSCII8'", "'ASCII'", "'BIG5'",
	"'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", "'CP866'",
	"'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'",
	"'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'",
	"'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'",
	"'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'",
	"'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'",
	"'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'",
	"'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'",
	"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'LINESTRING'", "'MULTILINESTRING'",
	"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'",
	"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'",
	"'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'",
	"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'",
	"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'",
	"'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'",
	"'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'",
	"'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'", "'COT'",
	"'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'",
	"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'",
	"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'",
	"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'",
	"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'",
	"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'",
	"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'",
	"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'",
	"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'",
	"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'",
	"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'",
	"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'",
	"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'",
	"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'",
	"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'",
	"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'",
	"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'",
	"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'",
	"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'",
	"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'",
	"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'",
	"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'",
	"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'",
	"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'",
	"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'",
	"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'",
	"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'",
	"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'",
	"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'",
	"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'",
	"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'",
	"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'",
	"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'",
	"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'",
	"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'",
	"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'",
	"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'",
	"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'",
	"'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'",
	"'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'",
	"'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'",
	"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'",
	"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'",
	"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'",
	"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'",
	"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'",
	"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'",
	"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'",
	"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'",
	"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'",
	"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'",
	"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'",
	"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'",
	"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='",
	"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'",
	"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'",
	"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'",
	"'`'", "':'",
}
var symbolicNames = []string{
	"", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", "ADD",
	"ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH",
	"BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK",
	"COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT",
	"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", "DECLARE",
	"DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT",
	"DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED",
	"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN",
	"FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF",
	"IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL",
	"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE",
	"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY",
	"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES",
	"NATURAL", "NOTNULL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON",
	"OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE",
	"PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS",
	"REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE",
	"RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS",
	"SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION",
	"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT",
	"SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO",
	"TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED",
	"UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE",
	"WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT",
	"INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC",
	"DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY",
	"VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT",
	"TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE",
	"DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND",
	"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND",
	"BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV",
	"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE",
	"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE",
	"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW",
	"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME",
	"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM",
	"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT",
	"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BTREE", "CACHE",
	"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT",
	"CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT",
	"COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION",
	"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA",
	"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE",
	"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE",
	"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE",
	"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY",
	"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE",
	"FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED",
	"FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS",
	"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED",
	"IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD",
	"INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION",
	"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS",
	"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION",
	"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST",
	"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT",
	"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH",
	"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH",
	"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR",
	"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR",
	"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS",
	"MODE", "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER",
	"NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD",
	"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER",
	"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS",
	"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES",
	"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY",
	"QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT",
	"RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE",
	"REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB",
	"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE",
	"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS",
	"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT",
	"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED",
	"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS",
	"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS",
	"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START",
	"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES",
	"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS",
	"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE",
	"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED",
	"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE",
	"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES",
	"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA",
	"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY",
	"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE",
	"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES",
	"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850",
	"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK",
	"GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1",
	"LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620",
	"UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4",
	"ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM",
	"MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", "REPEATABLE", "COMMITTED",
	"UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING",
	"MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE",
	"ADDTIME", "AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT",
	"ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT",
	"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN",
	"BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", "CHARACTER_LENGTH",
	"CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT",
	"CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", "COS", "COT", "CRC32",
	"CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS",
	"CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH",
	"DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT",
	"DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", "ENVELOPE",
	"EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD",
	"FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS",
	"FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT",
	"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN",
	"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK",
	"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL",
	"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN",
	"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK",
	"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK",
	"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB",
	"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE",
	"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME",
	"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL",
	"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT",
	"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT",
	"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT",
	"MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST",
	"NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH",
	"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT",
	"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT",
	"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES",
	"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME",
	"SESSION_USER", "SHA", "SHA1", "SHA2", "SIGN", "SIN", "SLEEP", "SOUNDEX",
	"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP",
	"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT",
	"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE",
	"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE",
	"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT",
	"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB",
	"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE",
	"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION",
	"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT",
	"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES",
	"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS",
	"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT",
	"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID",
	"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN",
	"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER",
	"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC",
	"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS",
	"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER",
	"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS",
	"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION",
	"X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN",
	"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR",
	"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL",
	"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP",
	"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN",
	"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
	"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL",
	"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL",
	"REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME",
	"DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID",
	"ERROR_RECONGNIGION",
}

var ruleNames = []string{
	"root", "sql_statements", "sql_statement", "empty_statement", "ddl_statement",
	"dml_statement", "transaction_statement", "replication_statement", "prepared_statement",
	"compound_statement", "administration_statement", "utility_statement",
	"create_database", "create_event", "create_index", "create_logfile_group",
	"create_procedure", "create_function", "create_server", "create_table",
	"create_tablespace_innodb", "create_tablespace_ndb", "create_trigger",
	"create_view", "create_database_option", "owner_statement", "schedule_expression",
	"timestamp_value", "interval_expr", "interval_type", "index_type", "index_option",
	"proc_param", "func_param", "routine_characteristic", "server_option",
	"column_def_table_constraints", "column_def_table_constraint", "column_definition",
	"separate_column_constraint", "table_constraint", "reference_definition",
	"on_delete_action", "on_update_action", "reference_action_control_type",
	"index_column_definition", "table_option", "partition_options", "partition_function_definition",
	"linear_partition_func_def", "partition_def", "subpartition_def", "alter_database",
	"alter_event", "alter_function", "alter_instance", "alter_logfile_group",
	"alter_procedure", "alter_server", "alter_table", "alter_tablespace", "alter_view",
	"alter_table_spec", "drop_database", "drop_event", "drop_index", "drop_logfile_group",
	"drop_procedure", "drop_function", "drop_server", "drop_table", "drop_tablespace",
	"drop_trigger", "drop_view", "rename_table", "truncate_table", "call_statement",
	"delete_statement", "do_statement", "handler_statement", "insert_statement",
	"load_data_statement", "load_xml_statement", "replace_statement", "select_statement",
	"update_statement", "insert_statement_value", "update_elem", "col_or_uservar",
	"single_delete_statement", "multiple_delete_statement", "handler_open_statement",
	"handler_read_index_statement", "handler_read_statement", "handler_close_statement",
	"single_update_statement", "multiple_update_statement", "order_by_clause",
	"order_by_expression", "table_sources", "table_source", "table_source_item",
	"index_hint", "join_part", "subquery", "query_expression", "query_expression_nointo",
	"query_specification", "query_specification_nointo", "union_parenth", "union_statement",
	"select_spec", "select_list", "select_list_elem", "select_into_expression",
	"from_clause", "group_by_item", "limit_clause", "start_transaction", "begin_work",
	"commit_work", "rollback_work", "savepoint_statement", "rollback_statement",
	"release_statement", "lock_tables", "unlock_tables", "set_autocommit_statement",
	"set_transaction_statement", "transact_option", "lock_table_element", "trans_characteristic",
	"transaction_level", "change_master", "change_repl_filter", "purge_binary_logs",
	"reset_master", "reset_slave", "start_slave", "stop_slave", "start_group_repl",
	"stop_group_repl", "master_option", "string_master_option", "decimal_master_option",
	"bool_master_option", "channel_option", "repl_filter", "thread_type", "until_option",
	"start_slave_connection_option", "gtid_set", "xa_start_transaction", "xa_end_transaction",
	"xa_prepare", "xa_commit_work", "xa_rollback_work", "xa_recover_work",
	"prepare_statement", "execute_statement", "deallocate_prepare", "routine_body",
	"block_statement", "case_statement", "if_statement", "iterate_statement",
	"leave_statement", "loop_statement", "repeat_statement", "return_statement",
	"while_statement", "cursor_statement", "declare_variable", "declare_condition",
	"declare_cursor", "declare_handler", "handler_condition_value", "procedure_sql_statement",
	"alter_user", "create_user", "drop_user", "grant_statement", "grant_proxy",
	"rename_user", "revoke_statement", "revoke_proxy", "set_password_statement",
	"user_password_option", "user_auth_option", "tls_option", "user_resource_option",
	"user_lock_option", "privelege_clause", "privilege", "privilege_level",
	"set_password_option", "analyze_table", "check_table", "checksum_table",
	"optimize_table", "repair_table", "check_table_option", "create_udfunction",
	"install_plugin", "uninstall_plugin", "set_statement", "show_statement",
	"variable_clause", "show_filter", "show_profile_type", "binlog_statement",
	"cache_index_statement", "flush_statement", "kill_statement", "load_index_into_cache",
	"reset_statement", "shutdown_statement", "tbl_index_list", "flush_option",
	"load_tbl_index_list", "simple_describe_statement", "full_describe_statement",
	"help_statement", "use_statement", "describe_object_clause", "table_name",
	"full_id", "full_column_name", "index_col_name", "user_name", "mysql_variable",
	"charset_name", "collation_name", "engine_name", "uuid_set", "xid", "xid_string_id",
	"auth_plugin", "id_", "simple_id", "dot_ext_id", "decimal_literal", "filesize_literal",
	"string_literal", "boolean_literal", "hexadecimal_literal", "null_notnull",
	"constant", "data_type", "data_type_to_convert", "spatial_data_type", "length_one_dimension",
	"length_two_dimension", "length_two_optional_dimension", "id_list", "table_list",
	"table_pair_list", "index_colname_list", "expression_list", "constant_list",
	"simple_string_list", "user_var_list", "default_value", "if_exists", "if_not_exists",
	"function_call", "specific_function_call", "levels_in_weight_string", "aggregate_windowed_function",
	"scalar_function_name", "function_args", "function_arg", "expression",
	"predicate", "expression_atom", "unary_operator", "comparison_operator",
	"logical_operator", "bit_operator", "math_operator", "charset_name_base",
	"transaction_level_base", "privileges_base", "interval_type_base", "data_type_base",
	"keywords_can_be_id", "function_name_base",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type MySqlParser struct {
	*antlr.BaseParser
}

func NewMySqlParser(input antlr.TokenStream) *MySqlParser {
	this := new(MySqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MySqlParser.g4"

	return this
}

// MySqlParser tokens.
const (
	MySqlParserEOF                               = antlr.TokenEOF
	MySqlParserSPACE                             = 1
	MySqlParserSPEC_MYSQL_COMMENT                = 2
	MySqlParserCOMMENT_INPUT                     = 3
	MySqlParserLINE_COMMENT                      = 4
	MySqlParserADD                               = 5
	MySqlParserALL                               = 6
	MySqlParserALTER                             = 7
	MySqlParserANALYZE                           = 8
	MySqlParserAND                               = 9
	MySqlParserAS                                = 10
	MySqlParserASC                               = 11
	MySqlParserBEFORE                            = 12
	MySqlParserBETWEEN                           = 13
	MySqlParserBOTH                              = 14
	MySqlParserBY                                = 15
	MySqlParserCALL                              = 16
	MySqlParserCASCADE                           = 17
	MySqlParserCASE                              = 18
	MySqlParserCAST                              = 19
	MySqlParserCHANGE                            = 20
	MySqlParserCHARACTER                         = 21
	MySqlParserCHECK                             = 22
	MySqlParserCOLLATE                           = 23
	MySqlParserCOLUMN                            = 24
	MySqlParserCONDITION                         = 25
	MySqlParserCONSTRAINT                        = 26
	MySqlParserCONTINUE                          = 27
	MySqlParserCONVERT                           = 28
	MySqlParserCREATE                            = 29
	MySqlParserCROSS                             = 30
	MySqlParserCURRENT_USER                      = 31
	MySqlParserCURSOR                            = 32
	MySqlParserDATABASE                          = 33
	MySqlParserDATABASES                         = 34
	MySqlParserDECLARE                           = 35
	MySqlParserDEFAULT                           = 36
	MySqlParserDELAYED                           = 37
	MySqlParserDELETE                            = 38
	MySqlParserDESC                              = 39
	MySqlParserDESCRIBE                          = 40
	MySqlParserDETERMINISTIC                     = 41
	MySqlParserDISTINCT                          = 42
	MySqlParserDISTINCTROW                       = 43
	MySqlParserDROP                              = 44
	MySqlParserEACH                              = 45
	MySqlParserELSE                              = 46
	MySqlParserELSEIF                            = 47
	MySqlParserENCLOSED                          = 48
	MySqlParserESCAPED                           = 49
	MySqlParserEXISTS                            = 50
	MySqlParserEXIT                              = 51
	MySqlParserEXPLAIN                           = 52
	MySqlParserFALSE                             = 53
	MySqlParserFETCH                             = 54
	MySqlParserFOR                               = 55
	MySqlParserFORCE                             = 56
	MySqlParserFOREIGN                           = 57
	MySqlParserFROM                              = 58
	MySqlParserFULLTEXT                          = 59
	MySqlParserGRANT                             = 60
	MySqlParserGROUP                             = 61
	MySqlParserHAVING                            = 62
	MySqlParserHIGH_PRIORITY                     = 63
	MySqlParserIF                                = 64
	MySqlParserIGNORE                            = 65
	MySqlParserIN                                = 66
	MySqlParserINDEX                             = 67
	MySqlParserINFILE                            = 68
	MySqlParserINNER                             = 69
	MySqlParserINOUT                             = 70
	MySqlParserINSERT                            = 71
	MySqlParserINTERVAL                          = 72
	MySqlParserINTO                              = 73
	MySqlParserIS                                = 74
	MySqlParserITERATE                           = 75
	MySqlParserJOIN                              = 76
	MySqlParserKEY                               = 77
	MySqlParserKEYS                              = 78
	MySqlParserKILL                              = 79
	MySqlParserLEADING                           = 80
	MySqlParserLEAVE                             = 81
	MySqlParserLEFT                              = 82
	MySqlParserLIKE                              = 83
	MySqlParserLIMIT                             = 84
	MySqlParserLINEAR                            = 85
	MySqlParserLINES                             = 86
	MySqlParserLOAD                              = 87
	MySqlParserLOCK                              = 88
	MySqlParserLOOP                              = 89
	MySqlParserLOW_PRIORITY                      = 90
	MySqlParserMASTER_BIND                       = 91
	MySqlParserMASTER_SSL_VERIFY_SERVER_CERT     = 92
	MySqlParserMATCH                             = 93
	MySqlParserMAXVALUE                          = 94
	MySqlParserMODIFIES                          = 95
	MySqlParserNATURAL                           = 96
	MySqlParserNOTNULL                           = 97
	MySqlParserNOT                               = 98
	MySqlParserNO_WRITE_TO_BINLOG                = 99
	MySqlParserNULL_LITERAL                      = 100
	MySqlParserON                                = 101
	MySqlParserOPTIMIZE                          = 102
	MySqlParserOPTION                            = 103
	MySqlParserOPTIONALLY                        = 104
	MySqlParserOR                                = 105
	MySqlParserORDER                             = 106
	MySqlParserOUT                               = 107
	MySqlParserOUTER                             = 108
	MySqlParserOUTFILE                           = 109
	MySqlParserPARTITION                         = 110
	MySqlParserPRIMARY                           = 111
	MySqlParserPROCEDURE                         = 112
	MySqlParserPURGE                             = 113
	MySqlParserRANGE                             = 114
	MySqlParserREAD                              = 115
	MySqlParserREADS                             = 116
	MySqlParserREFERENCES                        = 117
	MySqlParserREGEXP                            = 118
	MySqlParserRELEASE                           = 119
	MySqlParserRENAME                            = 120
	MySqlParserREPEAT                            = 121
	MySqlParserREPLACE                           = 122
	MySqlParserREQUIRE                           = 123
	MySqlParserRESTRICT                          = 124
	MySqlParserRETURN                            = 125
	MySqlParserREVOKE                            = 126
	MySqlParserRIGHT                             = 127
	MySqlParserRLIKE                             = 128
	MySqlParserSCHEMA                            = 129
	MySqlParserSCHEMAS                           = 130
	MySqlParserSELECT                            = 131
	MySqlParserSET                               = 132
	MySqlParserSEPARATOR                         = 133
	MySqlParserSHOW                              = 134
	MySqlParserSPATIAL                           = 135
	MySqlParserSQL                               = 136
	MySqlParserSQLEXCEPTION                      = 137
	MySqlParserSQLSTATE                          = 138
	MySqlParserSQLWARNING                        = 139
	MySqlParserSQL_BIG_RESULT                    = 140
	MySqlParserSQL_CALC_FOUND_ROWS               = 141
	MySqlParserSQL_SMALL_RESULT                  = 142
	MySqlParserSSL                               = 143
	MySqlParserSTARTING                          = 144
	MySqlParserSTRAIGHT_JOIN                     = 145
	MySqlParserTABLE                             = 146
	MySqlParserTERMINATED                        = 147
	MySqlParserTHEN                              = 148
	MySqlParserTO                                = 149
	MySqlParserTRAILING                          = 150
	MySqlParserTRIGGER                           = 151
	MySqlParserTRUE                              = 152
	MySqlParserUNDO                              = 153
	MySqlParserUNION                             = 154
	MySqlParserUNIQUE                            = 155
	MySqlParserUNLOCK                            = 156
	MySqlParserUNSIGNED                          = 157
	MySqlParserUPDATE                            = 158
	MySqlParserUSAGE                             = 159
	MySqlParserUSE                               = 160
	MySqlParserUSING                             = 161
	MySqlParserVALUES                            = 162
	MySqlParserWHEN                              = 163
	MySqlParserWHERE                             = 164
	MySqlParserWHILE                             = 165
	MySqlParserWITH                              = 166
	MySqlParserWRITE                             = 167
	MySqlParserXOR                               = 168
	MySqlParserZEROFILL                          = 169
	MySqlParserTINYINT                           = 170
	MySqlParserSMALLINT                          = 171
	MySqlParserMEDIUMINT                         = 172
	MySqlParserINT                               = 173
	MySqlParserINTEGER                           = 174
	MySqlParserBIGINT                            = 175
	MySqlParserREAL                              = 176
	MySqlParserDOUBLE                            = 177
	MySqlParserFLOAT                             = 178
	MySqlParserDECIMAL                           = 179
	MySqlParserNUMERIC                           = 180
	MySqlParserDATE                              = 181
	MySqlParserTIME                              = 182
	MySqlParserTIMESTAMP                         = 183
	MySqlParserDATETIME                          = 184
	MySqlParserYEAR                              = 185
	MySqlParserCHAR                              = 186
	MySqlParserVARCHAR                           = 187
	MySqlParserBINARY                            = 188
	MySqlParserVARBINARY                         = 189
	MySqlParserTINYBLOB                          = 190
	MySqlParserBLOB                              = 191
	MySqlParserMEDIUMBLOB                        = 192
	MySqlParserLONGBLOB                          = 193
	MySqlParserTINYTEXT                          = 194
	MySqlParserTEXT                              = 195
	MySqlParserMEDIUMTEXT                        = 196
	MySqlParserLONGTEXT                          = 197
	MySqlParserENUM                              = 198
	MySqlParserYEAR_MONTH                        = 199
	MySqlParserDAY_HOUR                          = 200
	MySqlParserDAY_MINUTE                        = 201
	MySqlParserDAY_SECOND                        = 202
	MySqlParserHOUR_MINUTE                       = 203
	MySqlParserHOUR_SECOND                       = 204
	MySqlParserMINUTE_SECOND                     = 205
	MySqlParserSECOND_MICROSECOND                = 206
	MySqlParserMINUTE_MICROSECOND                = 207
	MySqlParserHOUR_MICROSECOND                  = 208
	MySqlParserDAY_MICROSECOND                   = 209
	MySqlParserAVG                               = 210
	MySqlParserBIT_AND                           = 211
	MySqlParserBIT_OR                            = 212
	MySqlParserBIT_XOR                           = 213
	MySqlParserCOUNT                             = 214
	MySqlParserGROUP_CONCAT                      = 215
	MySqlParserMAX                               = 216
	MySqlParserMIN                               = 217
	MySqlParserSTD                               = 218
	MySqlParserSTDDEV                            = 219
	MySqlParserSTDDEV_POP                        = 220
	MySqlParserSTDDEV_SAMP                       = 221
	MySqlParserSUM                               = 222
	MySqlParserVAR_POP                           = 223
	MySqlParserVAR_SAMP                          = 224
	MySqlParserVARIANCE                          = 225
	MySqlParserCURRENT_DATE                      = 226
	MySqlParserCURRENT_TIME                      = 227
	MySqlParserCURRENT_TIMESTAMP                 = 228
	MySqlParserLOCALTIME                         = 229
	MySqlParserCURDATE                           = 230
	MySqlParserCURTIME                           = 231
	MySqlParserDATE_ADD                          = 232
	MySqlParserDATE_SUB                          = 233
	MySqlParserEXTRACT                           = 234
	MySqlParserLOCALTIMESTAMP                    = 235
	MySqlParserNOW                               = 236
	MySqlParserPOSITION                          = 237
	MySqlParserSUBSTR                            = 238
	MySqlParserSUBSTRING                         = 239
	MySqlParserSYSDATE                           = 240
	MySqlParserTRIM                              = 241
	MySqlParserUTC_DATE                          = 242
	MySqlParserUTC_TIME                          = 243
	MySqlParserUTC_TIMESTAMP                     = 244
	MySqlParserACCOUNT                           = 245
	MySqlParserACTION                            = 246
	MySqlParserAFTER                             = 247
	MySqlParserAGGREGATE                         = 248
	MySqlParserALGORITHM                         = 249
	MySqlParserANY                               = 250
	MySqlParserAT                                = 251
	MySqlParserAUTHORS                           = 252
	MySqlParserAUTOCOMMIT                        = 253
	MySqlParserAUTOEXTEND_SIZE                   = 254
	MySqlParserAUTO_INCREMENT                    = 255
	MySqlParserAVG_ROW_LENGTH                    = 256
	MySqlParserBEGIN                             = 257
	MySqlParserBINLOG                            = 258
	MySqlParserBIT                               = 259
	MySqlParserBLOCK                             = 260
	MySqlParserBTREE                             = 261
	MySqlParserCACHE                             = 262
	MySqlParserCASCADED                          = 263
	MySqlParserCHAIN                             = 264
	MySqlParserCHANGED                           = 265
	MySqlParserCHANNEL                           = 266
	MySqlParserCHECKSUM                          = 267
	MySqlParserCIPHER                            = 268
	MySqlParserCLIENT                            = 269
	MySqlParserCLOSE                             = 270
	MySqlParserCOALESCE                          = 271
	MySqlParserCODE                              = 272
	MySqlParserCOLUMNS                           = 273
	MySqlParserCOLUMN_FORMAT                     = 274
	MySqlParserCOMMENT                           = 275
	MySqlParserCOMMIT                            = 276
	MySqlParserCOMPACT                           = 277
	MySqlParserCOMPLETION                        = 278
	MySqlParserCOMPRESSED                        = 279
	MySqlParserCOMPRESSION                       = 280
	MySqlParserCONCURRENT                        = 281
	MySqlParserCONNECTION                        = 282
	MySqlParserCONSISTENT                        = 283
	MySqlParserCONTAINS                          = 284
	MySqlParserCONTEXT                           = 285
	MySqlParserCONTRIBUTORS                      = 286
	MySqlParserCOPY                              = 287
	MySqlParserCPU                               = 288
	MySqlParserDATA                              = 289
	MySqlParserDATAFILE                          = 290
	MySqlParserDEALLOCATE                        = 291
	MySqlParserDEFAULT_AUTH                      = 292
	MySqlParserDEFINER                           = 293
	MySqlParserDELAY_KEY_WRITE                   = 294
	MySqlParserDES_KEY_FILE                      = 295
	MySqlParserDIRECTORY                         = 296
	MySqlParserDISABLE                           = 297
	MySqlParserDISCARD                           = 298
	MySqlParserDISK                              = 299
	MySqlParserDO                                = 300
	MySqlParserDUMPFILE                          = 301
	MySqlParserDUPLICATE                         = 302
	MySqlParserDYNAMIC                           = 303
	MySqlParserENABLE                            = 304
	MySqlParserENCRYPTION                        = 305
	MySqlParserEND                               = 306
	MySqlParserENDS                              = 307
	MySqlParserENGINE                            = 308
	MySqlParserENGINES                           = 309
	MySqlParserERROR                             = 310
	MySqlParserERRORS                            = 311
	MySqlParserESCAPE                            = 312
	MySqlParserEVEN                              = 313
	MySqlParserEVENT                             = 314
	MySqlParserEVENTS                            = 315
	MySqlParserEVERY                             = 316
	MySqlParserEXCHANGE                          = 317
	MySqlParserEXCLUSIVE                         = 318
	MySqlParserEXPIRE                            = 319
	MySqlParserEXPORT                            = 320
	MySqlParserEXTENDED                          = 321
	MySqlParserEXTENT_SIZE                       = 322
	MySqlParserFAST                              = 323
	MySqlParserFAULTS                            = 324
	MySqlParserFIELDS                            = 325
	MySqlParserFILE_BLOCK_SIZE                   = 326
	MySqlParserFILTER                            = 327
	MySqlParserFIRST                             = 328
	MySqlParserFIXED                             = 329
	MySqlParserFLUSH                             = 330
	MySqlParserFOLLOWS                           = 331
	MySqlParserFOUND                             = 332
	MySqlParserFULL                              = 333
	MySqlParserFUNCTION                          = 334
	MySqlParserGENERAL                           = 335
	MySqlParserGLOBAL                            = 336
	MySqlParserGRANTS                            = 337
	MySqlParserGROUP_REPLICATION                 = 338
	MySqlParserHANDLER                           = 339
	MySqlParserHASH                              = 340
	MySqlParserHELP                              = 341
	MySqlParserHOST                              = 342
	MySqlParserHOSTS                             = 343
	MySqlParserIDENTIFIED                        = 344
	MySqlParserIGNORE_SERVER_IDS                 = 345
	MySqlParserIMPORT                            = 346
	MySqlParserINDEXES                           = 347
	MySqlParserINITIAL_SIZE                      = 348
	MySqlParserINPLACE                           = 349
	MySqlParserINSERT_METHOD                     = 350
	MySqlParserINSTALL                           = 351
	MySqlParserINSTANCE                          = 352
	MySqlParserINVOKER                           = 353
	MySqlParserIO                                = 354
	MySqlParserIO_THREAD                         = 355
	MySqlParserIPC                               = 356
	MySqlParserISOLATION                         = 357
	MySqlParserISSUER                            = 358
	MySqlParserJSON                              = 359
	MySqlParserKEY_BLOCK_SIZE                    = 360
	MySqlParserLANGUAGE                          = 361
	MySqlParserLAST                              = 362
	MySqlParserLEAVES                            = 363
	MySqlParserLESS                              = 364
	MySqlParserLEVEL                             = 365
	MySqlParserLIST                              = 366
	MySqlParserLOCAL                             = 367
	MySqlParserLOGFILE                           = 368
	MySqlParserLOGS                              = 369
	MySqlParserMASTER                            = 370
	MySqlParserMASTER_AUTO_POSITION              = 371
	MySqlParserMASTER_CONNECT_RETRY              = 372
	MySqlParserMASTER_DELAY                      = 373
	MySqlParserMASTER_HEARTBEAT_PERIOD           = 374
	MySqlParserMASTER_HOST                       = 375
	MySqlParserMASTER_LOG_FILE                   = 376
	MySqlParserMASTER_LOG_POS                    = 377
	MySqlParserMASTER_PASSWORD                   = 378
	MySqlParserMASTER_PORT                       = 379
	MySqlParserMASTER_RETRY_COUNT                = 380
	MySqlParserMASTER_SSL                        = 381
	MySqlParserMASTER_SSL_CA                     = 382
	MySqlParserMASTER_SSL_CAPATH                 = 383
	MySqlParserMASTER_SSL_CERT                   = 384
	MySqlParserMASTER_SSL_CIPHER                 = 385
	MySqlParserMASTER_SSL_CRL                    = 386
	MySqlParserMASTER_SSL_CRLPATH                = 387
	MySqlParserMASTER_SSL_KEY                    = 388
	MySqlParserMASTER_TLS_VERSION                = 389
	MySqlParserMASTER_USER                       = 390
	MySqlParserMAX_CONNECTIONS_PER_HOUR          = 391
	MySqlParserMAX_QUERIES_PER_HOUR              = 392
	MySqlParserMAX_ROWS                          = 393
	MySqlParserMAX_SIZE                          = 394
	MySqlParserMAX_UPDATES_PER_HOUR              = 395
	MySqlParserMAX_USER_CONNECTIONS              = 396
	MySqlParserMEDIUM                            = 397
	MySqlParserMERGE                             = 398
	MySqlParserMID                               = 399
	MySqlParserMIGRATE                           = 400
	MySqlParserMIN_ROWS                          = 401
	MySqlParserMODE                              = 402
	MySqlParserMODIFY                            = 403
	MySqlParserMUTEX                             = 404
	MySqlParserMYSQL                             = 405
	MySqlParserNAME                              = 406
	MySqlParserNAMES                             = 407
	MySqlParserNCHAR                             = 408
	MySqlParserNEVER                             = 409
	MySqlParserNEXT                              = 410
	MySqlParserNO                                = 411
	MySqlParserNODEGROUP                         = 412
	MySqlParserNONE                              = 413
	MySqlParserOFFLINE                           = 414
	MySqlParserOFFSET                            = 415
	MySqlParserOJ                                = 416
	MySqlParserOLD_PASSWORD                      = 417
	MySqlParserONE                               = 418
	MySqlParserONLINE                            = 419
	MySqlParserONLY                              = 420
	MySqlParserOPEN                              = 421
	MySqlParserOPTIMIZER_COSTS                   = 422
	MySqlParserOPTIONS                           = 423
	MySqlParserOWNER                             = 424
	MySqlParserPACK_KEYS                         = 425
	MySqlParserPAGE                              = 426
	MySqlParserPARSER                            = 427
	MySqlParserPARTIAL                           = 428
	MySqlParserPARTITIONING                      = 429
	MySqlParserPARTITIONS                        = 430
	MySqlParserPASSWORD                          = 431
	MySqlParserPHASE                             = 432
	MySqlParserPLUGIN                            = 433
	MySqlParserPLUGIN_DIR                        = 434
	MySqlParserPLUGINS                           = 435
	MySqlParserPORT                              = 436
	MySqlParserPRECEDES                          = 437
	MySqlParserPREPARE                           = 438
	MySqlParserPRESERVE                          = 439
	MySqlParserPREV                              = 440
	MySqlParserPROCESSLIST                       = 441
	MySqlParserPROFILE                           = 442
	MySqlParserPROFILES                          = 443
	MySqlParserPROXY                             = 444
	MySqlParserQUERY                             = 445
	MySqlParserQUICK                             = 446
	MySqlParserREBUILD                           = 447
	MySqlParserRECOVER                           = 448
	MySqlParserREDO_BUFFER_SIZE                  = 449
	MySqlParserREDUNDANT                         = 450
	MySqlParserRELAY                             = 451
	MySqlParserRELAY_LOG_FILE                    = 452
	MySqlParserRELAY_LOG_POS                     = 453
	MySqlParserRELAYLOG                          = 454
	MySqlParserREMOVE                            = 455
	MySqlParserREORGANIZE                        = 456
	MySqlParserREPAIR                            = 457
	MySqlParserREPLICATE_DO_DB                   = 458
	MySqlParserREPLICATE_DO_TABLE                = 459
	MySqlParserREPLICATE_IGNORE_DB               = 460
	MySqlParserREPLICATE_IGNORE_TABLE            = 461
	MySqlParserREPLICATE_REWRITE_DB              = 462
	MySqlParserREPLICATE_WILD_DO_TABLE           = 463
	MySqlParserREPLICATE_WILD_IGNORE_TABLE       = 464
	MySqlParserREPLICATION                       = 465
	MySqlParserRESET                             = 466
	MySqlParserRESUME                            = 467
	MySqlParserRETURNS                           = 468
	MySqlParserROLLBACK                          = 469
	MySqlParserROLLUP                            = 470
	MySqlParserROTATE                            = 471
	MySqlParserROW                               = 472
	MySqlParserROWS                              = 473
	MySqlParserROW_FORMAT                        = 474
	MySqlParserSAVEPOINT                         = 475
	MySqlParserSCHEDULE                          = 476
	MySqlParserSECURITY                          = 477
	MySqlParserSERVER                            = 478
	MySqlParserSESSION                           = 479
	MySqlParserSHARE                             = 480
	MySqlParserSHARED                            = 481
	MySqlParserSIGNED                            = 482
	MySqlParserSIMPLE                            = 483
	MySqlParserSLAVE                             = 484
	MySqlParserSLOW                              = 485
	MySqlParserSNAPSHOT                          = 486
	MySqlParserSOCKET                            = 487
	MySqlParserSOME                              = 488
	MySqlParserSONAME                            = 489
	MySqlParserSOUNDS                            = 490
	MySqlParserSOURCE                            = 491
	MySqlParserSQL_AFTER_GTIDS                   = 492
	MySqlParserSQL_AFTER_MTS_GAPS                = 493
	MySqlParserSQL_BEFORE_GTIDS                  = 494
	MySqlParserSQL_BUFFER_RESULT                 = 495
	MySqlParserSQL_CACHE                         = 496
	MySqlParserSQL_NO_CACHE                      = 497
	MySqlParserSQL_THREAD                        = 498
	MySqlParserSTART                             = 499
	MySqlParserSTARTS                            = 500
	MySqlParserSTATS_AUTO_RECALC                 = 501
	MySqlParserSTATS_PERSISTENT                  = 502
	MySqlParserSTATS_SAMPLE_PAGES                = 503
	MySqlParserSTATUS                            = 504
	MySqlParserSTOP                              = 505
	MySqlParserSTORAGE                           = 506
	MySqlParserSTRING                            = 507
	MySqlParserSUBJECT                           = 508
	MySqlParserSUBPARTITION                      = 509
	MySqlParserSUBPARTITIONS                     = 510
	MySqlParserSUSPEND                           = 511
	MySqlParserSWAPS                             = 512
	MySqlParserSWITCHES                          = 513
	MySqlParserTABLESPACE                        = 514
	MySqlParserTEMPORARY                         = 515
	MySqlParserTEMPTABLE                         = 516
	MySqlParserTHAN                              = 517
	MySqlParserTRADITIONAL                       = 518
	MySqlParserTRANSACTION                       = 519
	MySqlParserTRIGGERS                          = 520
	MySqlParserTRUNCATE                          = 521
	MySqlParserUNDEFINED                         = 522
	MySqlParserUNDOFILE                          = 523
	MySqlParserUNDO_BUFFER_SIZE                  = 524
	MySqlParserUNINSTALL                         = 525
	MySqlParserUNKNOWN                           = 526
	MySqlParserUNTIL                             = 527
	MySqlParserUPGRADE                           = 528
	MySqlParserUSER                              = 529
	MySqlParserUSE_FRM                           = 530
	MySqlParserUSER_RESOURCES                    = 531
	MySqlParserVALIDATION                        = 532
	MySqlParserVALUE                             = 533
	MySqlParserVARIABLES                         = 534
	MySqlParserVIEW                              = 535
	MySqlParserWAIT                              = 536
	MySqlParserWARNINGS                          = 537
	MySqlParserWITHOUT                           = 538
	MySqlParserWORK                              = 539
	MySqlParserWRAPPER                           = 540
	MySqlParserX509                              = 541
	MySqlParserXA                                = 542
	MySqlParserXML                               = 543
	MySqlParserEUR                               = 544
	MySqlParserUSA                               = 545
	MySqlParserJIS                               = 546
	MySqlParserISO                               = 547
	MySqlParserINTERNAL                          = 548
	MySqlParserQUARTER                           = 549
	MySqlParserMONTH                             = 550
	MySqlParserDAY                               = 551
	MySqlParserHOUR                              = 552
	MySqlParserMINUTE                            = 553
	MySqlParserWEEK                              = 554
	MySqlParserSECOND                            = 555
	MySqlParserMICROSECOND                       = 556
	MySqlParserTABLES                            = 557
	MySqlParserROUTINE                           = 558
	MySqlParserEXECUTE                           = 559
	MySqlParserFILE                              = 560
	MySqlParserPROCESS                           = 561
	MySqlParserRELOAD                            = 562
	MySqlParserSHUTDOWN                          = 563
	MySqlParserSUPER                             = 564
	MySqlParserPRIVILEGES                        = 565
	MySqlParserARMSCII8                          = 566
	MySqlParserASCII                             = 567
	MySqlParserBIG5                              = 568
	MySqlParserCP1250                            = 569
	MySqlParserCP1251                            = 570
	MySqlParserCP1256                            = 571
	MySqlParserCP1257                            = 572
	MySqlParserCP850                             = 573
	MySqlParserCP852                             = 574
	MySqlParserCP866                             = 575
	MySqlParserCP932                             = 576
	MySqlParserDEC8                              = 577
	MySqlParserEUCJPMS                           = 578
	MySqlParserEUCKR                             = 579
	MySqlParserGB2312                            = 580
	MySqlParserGBK                               = 581
	MySqlParserGEOSTD8                           = 582
	MySqlParserGREEK                             = 583
	MySqlParserHEBREW                            = 584
	MySqlParserHP8                               = 585
	MySqlParserKEYBCS2                           = 586
	MySqlParserKOI8R                             = 587
	MySqlParserKOI8U                             = 588
	MySqlParserLATIN1                            = 589
	MySqlParserLATIN2                            = 590
	MySqlParserLATIN5                            = 591
	MySqlParserLATIN7                            = 592
	MySqlParserMACCE                             = 593
	MySqlParserMACROMAN                          = 594
	MySqlParserSJIS                              = 595
	MySqlParserSWE7                              = 596
	MySqlParserTIS620                            = 597
	MySqlParserUCS2                              = 598
	MySqlParserUJIS                              = 599
	MySqlParserUTF16                             = 600
	MySqlParserUTF16LE                           = 601
	MySqlParserUTF32                             = 602
	MySqlParserUTF8                              = 603
	MySqlParserUTF8MB3                           = 604
	MySqlParserUTF8MB4                           = 605
	MySqlParserARCHIVE                           = 606
	MySqlParserBLACKHOLE                         = 607
	MySqlParserCSV                               = 608
	MySqlParserFEDERATED                         = 609
	MySqlParserINNODB                            = 610
	MySqlParserMEMORY                            = 611
	MySqlParserMRG_MYISAM                        = 612
	MySqlParserMYISAM                            = 613
	MySqlParserNDB                               = 614
	MySqlParserNDBCLUSTER                        = 615
	MySqlParserPERFOMANCE_SCHEMA                 = 616
	MySqlParserREPEATABLE                        = 617
	MySqlParserCOMMITTED                         = 618
	MySqlParserUNCOMMITTED                       = 619
	MySqlParserSERIALIZABLE                      = 620
	MySqlParserGEOMETRYCOLLECTION                = 621
	MySqlParserLINESTRING                        = 622
	MySqlParserMULTILINESTRING                   = 623
	MySqlParserMULTIPOINT                        = 624
	MySqlParserMULTIPOLYGON                      = 625
	MySqlParserPOINT                             = 626
	MySqlParserPOLYGON                           = 627
	MySqlParserABS                               = 628
	MySqlParserACOS                              = 629
	MySqlParserADDDATE                           = 630
	MySqlParserADDTIME                           = 631
	MySqlParserAES_DECRYPT                       = 632
	MySqlParserAES_ENCRYPT                       = 633
	MySqlParserAREA                              = 634
	MySqlParserASBINARY                          = 635
	MySqlParserASIN                              = 636
	MySqlParserASTEXT                            = 637
	MySqlParserASWKB                             = 638
	MySqlParserASWKT                             = 639
	MySqlParserASYMMETRIC_DECRYPT                = 640
	MySqlParserASYMMETRIC_DERIVE                 = 641
	MySqlParserASYMMETRIC_ENCRYPT                = 642
	MySqlParserASYMMETRIC_SIGN                   = 643
	MySqlParserASYMMETRIC_VERIFY                 = 644
	MySqlParserATAN                              = 645
	MySqlParserATAN2                             = 646
	MySqlParserBENCHMARK                         = 647
	MySqlParserBIN                               = 648
	MySqlParserBIT_COUNT                         = 649
	MySqlParserBIT_LENGTH                        = 650
	MySqlParserBUFFER                            = 651
	MySqlParserCEIL                              = 652
	MySqlParserCEILING                           = 653
	MySqlParserCENTROID                          = 654
	MySqlParserCHARACTER_LENGTH                  = 655
	MySqlParserCHARSET                           = 656
	MySqlParserCHAR_LENGTH                       = 657
	MySqlParserCOERCIBILITY                      = 658
	MySqlParserCOLLATION                         = 659
	MySqlParserCOMPRESS                          = 660
	MySqlParserCONCAT                            = 661
	MySqlParserCONCAT_WS                         = 662
	MySqlParserCONNECTION_ID                     = 663
	MySqlParserCONV                              = 664
	MySqlParserCONVERT_TZ                        = 665
	MySqlParserCOS                               = 666
	MySqlParserCOT                               = 667
	MySqlParserCRC32                             = 668
	MySqlParserCREATE_ASYMMETRIC_PRIV_KEY        = 669
	MySqlParserCREATE_ASYMMETRIC_PUB_KEY         = 670
	MySqlParserCREATE_DH_PARAMETERS              = 671
	MySqlParserCREATE_DIGEST                     = 672
	MySqlParserCROSSES                           = 673
	MySqlParserDATEDIFF                          = 674
	MySqlParserDATE_FORMAT                       = 675
	MySqlParserDAYNAME                           = 676
	MySqlParserDAYOFMONTH                        = 677
	MySqlParserDAYOFWEEK                         = 678
	MySqlParserDAYOFYEAR                         = 679
	MySqlParserDECODE                            = 680
	MySqlParserDEGREES                           = 681
	MySqlParserDES_DECRYPT                       = 682
	MySqlParserDES_ENCRYPT                       = 683
	MySqlParserDIMENSION                         = 684
	MySqlParserDISJOINT                          = 685
	MySqlParserELT                               = 686
	MySqlParserENCODE                            = 687
	MySqlParserENCRYPT                           = 688
	MySqlParserENDPOINT                          = 689
	MySqlParserENVELOPE                          = 690
	MySqlParserEQUALS                            = 691
	MySqlParserEXP                               = 692
	MySqlParserEXPORT_SET                        = 693
	MySqlParserEXTERIORRING                      = 694
	MySqlParserEXTRACTVALUE                      = 695
	MySqlParserFIELD                             = 696
	MySqlParserFIND_IN_SET                       = 697
	MySqlParserFLOOR                             = 698
	MySqlParserFORMAT                            = 699
	MySqlParserFOUND_ROWS                        = 700
	MySqlParserFROM_BASE64                       = 701
	MySqlParserFROM_DAYS                         = 702
	MySqlParserFROM_UNIXTIME                     = 703
	MySqlParserGEOMCOLLFROMTEXT                  = 704
	MySqlParserGEOMCOLLFROMWKB                   = 705
	MySqlParserGEOMETRYCOLLECTIONFROMTEXT        = 706
	MySqlParserGEOMETRYCOLLECTIONFROMWKB         = 707
	MySqlParserGEOMETRYFROMTEXT                  = 708
	MySqlParserGEOMETRYFROMWKB                   = 709
	MySqlParserGEOMETRYN                         = 710
	MySqlParserGEOMETRYTYPE                      = 711
	MySqlParserGEOMFROMTEXT                      = 712
	MySqlParserGEOMFROMWKB                       = 713
	MySqlParserGET_FORMAT                        = 714
	MySqlParserGET_LOCK                          = 715
	MySqlParserGLENGTH                           = 716
	MySqlParserGREATEST                          = 717
	MySqlParserGTID_SUBSET                       = 718
	MySqlParserGTID_SUBTRACT                     = 719
	MySqlParserHEX                               = 720
	MySqlParserIFNULL                            = 721
	MySqlParserINET6_ATON                        = 722
	MySqlParserINET6_NTOA                        = 723
	MySqlParserINET_ATON                         = 724
	MySqlParserINET_NTOA                         = 725
	MySqlParserINSTR                             = 726
	MySqlParserINTERIORRINGN                     = 727
	MySqlParserINTERSECTS                        = 728
	MySqlParserISCLOSED                          = 729
	MySqlParserISEMPTY                           = 730
	MySqlParserISNULL                            = 731
	MySqlParserISSIMPLE                          = 732
	MySqlParserIS_FREE_LOCK                      = 733
	MySqlParserIS_IPV4                           = 734
	MySqlParserIS_IPV4_COMPAT                    = 735
	MySqlParserIS_IPV4_MAPPED                    = 736
	MySqlParserIS_IPV6                           = 737
	MySqlParserIS_USED_LOCK                      = 738
	MySqlParserLAST_INSERT_ID                    = 739
	MySqlParserLCASE                             = 740
	MySqlParserLEAST                             = 741
	MySqlParserLENGTH                            = 742
	MySqlParserLINEFROMTEXT                      = 743
	MySqlParserLINEFROMWKB                       = 744
	MySqlParserLINESTRINGFROMTEXT                = 745
	MySqlParserLINESTRINGFROMWKB                 = 746
	MySqlParserLN                                = 747
	MySqlParserLOAD_FILE                         = 748
	MySqlParserLOCATE                            = 749
	MySqlParserLOG                               = 750
	MySqlParserLOG10                             = 751
	MySqlParserLOG2                              = 752
	MySqlParserLOWER                             = 753
	MySqlParserLPAD                              = 754
	MySqlParserLTRIM                             = 755
	MySqlParserMAKEDATE                          = 756
	MySqlParserMAKETIME                          = 757
	MySqlParserMAKE_SET                          = 758
	MySqlParserMASTER_POS_WAIT                   = 759
	MySqlParserMBRCONTAINS                       = 760
	MySqlParserMBRDISJOINT                       = 761
	MySqlParserMBREQUAL                          = 762
	MySqlParserMBRINTERSECTS                     = 763
	MySqlParserMBROVERLAPS                       = 764
	MySqlParserMBRTOUCHES                        = 765
	MySqlParserMBRWITHIN                         = 766
	MySqlParserMD5                               = 767
	MySqlParserMLINEFROMTEXT                     = 768
	MySqlParserMLINEFROMWKB                      = 769
	MySqlParserMONTHNAME                         = 770
	MySqlParserMPOINTFROMTEXT                    = 771
	MySqlParserMPOINTFROMWKB                     = 772
	MySqlParserMPOLYFROMTEXT                     = 773
	MySqlParserMPOLYFROMWKB                      = 774
	MySqlParserMULTILINESTRINGFROMTEXT           = 775
	MySqlParserMULTILINESTRINGFROMWKB            = 776
	MySqlParserMULTIPOINTFROMTEXT                = 777
	MySqlParserMULTIPOINTFROMWKB                 = 778
	MySqlParserMULTIPOLYGONFROMTEXT              = 779
	MySqlParserMULTIPOLYGONFROMWKB               = 780
	MySqlParserNAME_CONST                        = 781
	MySqlParserNULLIF                            = 782
	MySqlParserNUMGEOMETRIES                     = 783
	MySqlParserNUMINTERIORRINGS                  = 784
	MySqlParserNUMPOINTS                         = 785
	MySqlParserOCT                               = 786
	MySqlParserOCTET_LENGTH                      = 787
	MySqlParserORD                               = 788
	MySqlParserOVERLAPS                          = 789
	MySqlParserPERIOD_ADD                        = 790
	MySqlParserPERIOD_DIFF                       = 791
	MySqlParserPI                                = 792
	MySqlParserPOINTFROMTEXT                     = 793
	MySqlParserPOINTFROMWKB                      = 794
	MySqlParserPOINTN                            = 795
	MySqlParserPOLYFROMTEXT                      = 796
	MySqlParserPOLYFROMWKB                       = 797
	MySqlParserPOLYGONFROMTEXT                   = 798
	MySqlParserPOLYGONFROMWKB                    = 799
	MySqlParserPOW                               = 800
	MySqlParserPOWER                             = 801
	MySqlParserQUOTE                             = 802
	MySqlParserRADIANS                           = 803
	MySqlParserRAND                              = 804
	MySqlParserRANDOM_BYTES                      = 805
	MySqlParserRELEASE_LOCK                      = 806
	MySqlParserREVERSE                           = 807
	MySqlParserROUND                             = 808
	MySqlParserROW_COUNT                         = 809
	MySqlParserRPAD                              = 810
	MySqlParserRTRIM                             = 811
	MySqlParserSEC_TO_TIME                       = 812
	MySqlParserSESSION_USER                      = 813
	MySqlParserSHA                               = 814
	MySqlParserSHA1                              = 815
	MySqlParserSHA2                              = 816
	MySqlParserSIGN                              = 817
	MySqlParserSIN                               = 818
	MySqlParserSLEEP                             = 819
	MySqlParserSOUNDEX                           = 820
	MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS       = 821
	MySqlParserSQRT                              = 822
	MySqlParserSRID                              = 823
	MySqlParserSTARTPOINT                        = 824
	MySqlParserSTRCMP                            = 825
	MySqlParserSTR_TO_DATE                       = 826
	MySqlParserST_AREA                           = 827
	MySqlParserST_ASBINARY                       = 828
	MySqlParserST_ASTEXT                         = 829
	MySqlParserST_ASWKB                          = 830
	MySqlParserST_ASWKT                          = 831
	MySqlParserST_BUFFER                         = 832
	MySqlParserST_CENTROID                       = 833
	MySqlParserST_CONTAINS                       = 834
	MySqlParserST_CROSSES                        = 835
	MySqlParserST_DIFFERENCE                     = 836
	MySqlParserST_DIMENSION                      = 837
	MySqlParserST_DISJOINT                       = 838
	MySqlParserST_DISTANCE                       = 839
	MySqlParserST_ENDPOINT                       = 840
	MySqlParserST_ENVELOPE                       = 841
	MySqlParserST_EQUALS                         = 842
	MySqlParserST_EXTERIORRING                   = 843
	MySqlParserST_GEOMCOLLFROMTEXT               = 844
	MySqlParserST_GEOMCOLLFROMTXT                = 845
	MySqlParserST_GEOMCOLLFROMWKB                = 846
	MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT     = 847
	MySqlParserST_GEOMETRYCOLLECTIONFROMWKB      = 848
	MySqlParserST_GEOMETRYFROMTEXT               = 849
	MySqlParserST_GEOMETRYFROMWKB                = 850
	MySqlParserST_GEOMETRYN                      = 851
	MySqlParserST_GEOMETRYTYPE                   = 852
	MySqlParserST_GEOMFROMTEXT                   = 853
	MySqlParserST_GEOMFROMWKB                    = 854
	MySqlParserST_INTERIORRINGN                  = 855
	MySqlParserST_INTERSECTION                   = 856
	MySqlParserST_INTERSECTS                     = 857
	MySqlParserST_ISCLOSED                       = 858
	MySqlParserST_ISEMPTY                        = 859
	MySqlParserST_ISSIMPLE                       = 860
	MySqlParserST_LINEFROMTEXT                   = 861
	MySqlParserST_LINEFROMWKB                    = 862
	MySqlParserST_LINESTRINGFROMTEXT             = 863
	MySqlParserST_LINESTRINGFROMWKB              = 864
	MySqlParserST_NUMGEOMETRIES                  = 865
	MySqlParserST_NUMINTERIORRING                = 866
	MySqlParserST_NUMINTERIORRINGS               = 867
	MySqlParserST_NUMPOINTS                      = 868
	MySqlParserST_OVERLAPS                       = 869
	MySqlParserST_POINTFROMTEXT                  = 870
	MySqlParserST_POINTFROMWKB                   = 871
	MySqlParserST_POINTN                         = 872
	MySqlParserST_POLYFROMTEXT                   = 873
	MySqlParserST_POLYFROMWKB                    = 874
	MySqlParserST_POLYGONFROMTEXT                = 875
	MySqlParserST_POLYGONFROMWKB                 = 876
	MySqlParserST_SRID                           = 877
	MySqlParserST_STARTPOINT                     = 878
	MySqlParserST_SYMDIFFERENCE                  = 879
	MySqlParserST_TOUCHES                        = 880
	MySqlParserST_UNION                          = 881
	MySqlParserST_WITHIN                         = 882
	MySqlParserST_X                              = 883
	MySqlParserST_Y                              = 884
	MySqlParserSUBDATE                           = 885
	MySqlParserSUBSTRING_INDEX                   = 886
	MySqlParserSUBTIME                           = 887
	MySqlParserSYSTEM_USER                       = 888
	MySqlParserTAN                               = 889
	MySqlParserTIMEDIFF                          = 890
	MySqlParserTIMESTAMPADD                      = 891
	MySqlParserTIMESTAMPDIFF                     = 892
	MySqlParserTIME_FORMAT                       = 893
	MySqlParserTIME_TO_SEC                       = 894
	MySqlParserTOUCHES                           = 895
	MySqlParserTO_BASE64                         = 896
	MySqlParserTO_DAYS                           = 897
	MySqlParserTO_SECONDS                        = 898
	MySqlParserUCASE                             = 899
	MySqlParserUNCOMPRESS                        = 900
	MySqlParserUNCOMPRESSED_LENGTH               = 901
	MySqlParserUNHEX                             = 902
	MySqlParserUNIX_TIMESTAMP                    = 903
	MySqlParserUPDATEXML                         = 904
	MySqlParserUPPER                             = 905
	MySqlParserUUID                              = 906
	MySqlParserUUID_SHORT                        = 907
	MySqlParserVALIDATE_PASSWORD_STRENGTH        = 908
	MySqlParserVERSION                           = 909
	MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 910
	MySqlParserWEEKDAY                           = 911
	MySqlParserWEEKOFYEAR                        = 912
	MySqlParserWEIGHT_STRING                     = 913
	MySqlParserWITHIN                            = 914
	MySqlParserYEARWEEK                          = 915
	MySqlParserY_FUNCTION                        = 916
	MySqlParserX_FUNCTION                        = 917
	MySqlParserVAR_ASSIGN                        = 918
	MySqlParserPLUS_ASSIGN                       = 919
	MySqlParserMINUS_ASSIGN                      = 920
	MySqlParserMULT_ASSIGN                       = 921
	MySqlParserDIV_ASSIGN                        = 922
	MySqlParserMOD_ASSIGN                        = 923
	MySqlParserAND_ASSIGN                        = 924
	MySqlParserXOR_ASSIGN                        = 925
	MySqlParserOR_ASSIGN                         = 926
	MySqlParserSTAR                              = 927
	MySqlParserDIVIDE                            = 928
	MySqlParserMODULE                            = 929
	MySqlParserPLUS                              = 930
	MySqlParserMINUS                             = 931
	MySqlParserDIV                               = 932
	MySqlParserMOD                               = 933
	MySqlParserEQUAL_SYMBOL                      = 934
	MySqlParserGREATER_SYMBOL                    = 935
	MySqlParserLESS_SYMBOL                       = 936
	MySqlParserEXCLAMATION_SYMBOL                = 937
	MySqlParserBIT_NOT_OP                        = 938
	MySqlParserBIT_OR_OP                         = 939
	MySqlParserBIT_AND_OP                        = 940
	MySqlParserBIT_XOR_OP                        = 941
	MySqlParserDOT                               = 942
	MySqlParserLR_BRACKET                        = 943
	MySqlParserRR_BRACKET                        = 944
	MySqlParserCOMMA                             = 945
	MySqlParserSEMI                              = 946
	MySqlParserAT_SIGN                           = 947
	MySqlParserZERO_DECIMAL                      = 948
	MySqlParserONE_DECIMAL                       = 949
	MySqlParserTWO_DECIMAL                       = 950
	MySqlParserSINGLE_QUOTE_SYMB                 = 951
	MySqlParserDOUBLE_QUOTE_SYMB                 = 952
	MySqlParserREVERSE_QUOTE_SYMB                = 953
	MySqlParserCOLON_SYMB                        = 954
	MySqlParserCHARSET_REVERSE_QOUTE_STRING      = 955
	MySqlParserFILESIZE_LITERAL                  = 956
	MySqlParserSTART_NATIONAL_STRING_LITERAL     = 957
	MySqlParserSTRING_LITERAL                    = 958
	MySqlParserDECIMAL_LITERAL                   = 959
	MySqlParserHEXADECIMAL_LITERAL               = 960
	MySqlParserREAL_LITERAL                      = 961
	MySqlParserNULL_SPEC_LITERAL                 = 962
	MySqlParserBIT_STRING                        = 963
	MySqlParserSTRING_CHARSET_NAME               = 964
	MySqlParserDOT_ID                            = 965
	MySqlParserID                                = 966
	MySqlParserREVERSE_QUOTE_ID                  = 967
	MySqlParserSTRING_USER_NAME                  = 968
	MySqlParserLOCAL_ID                          = 969
	MySqlParserGLOBAL_ID                         = 970
	MySqlParserERROR_RECONGNIGION                = 971
)

// MySqlParser rules.
const (
	MySqlParserRULE_root                          = 0
	MySqlParserRULE_sql_statements                = 1
	MySqlParserRULE_sql_statement                 = 2
	MySqlParserRULE_empty_statement               = 3
	MySqlParserRULE_ddl_statement                 = 4
	MySqlParserRULE_dml_statement                 = 5
	MySqlParserRULE_transaction_statement         = 6
	MySqlParserRULE_replication_statement         = 7
	MySqlParserRULE_prepared_statement            = 8
	MySqlParserRULE_compound_statement            = 9
	MySqlParserRULE_administration_statement      = 10
	MySqlParserRULE_utility_statement             = 11
	MySqlParserRULE_create_database               = 12
	MySqlParserRULE_create_event                  = 13
	MySqlParserRULE_create_index                  = 14
	MySqlParserRULE_create_logfile_group          = 15
	MySqlParserRULE_create_procedure              = 16
	MySqlParserRULE_create_function               = 17
	MySqlParserRULE_create_server                 = 18
	MySqlParserRULE_create_table                  = 19
	MySqlParserRULE_create_tablespace_innodb      = 20
	MySqlParserRULE_create_tablespace_ndb         = 21
	MySqlParserRULE_create_trigger                = 22
	MySqlParserRULE_create_view                   = 23
	MySqlParserRULE_create_database_option        = 24
	MySqlParserRULE_owner_statement               = 25
	MySqlParserRULE_schedule_expression           = 26
	MySqlParserRULE_timestamp_value               = 27
	MySqlParserRULE_interval_expr                 = 28
	MySqlParserRULE_interval_type                 = 29
	MySqlParserRULE_index_type                    = 30
	MySqlParserRULE_index_option                  = 31
	MySqlParserRULE_proc_param                    = 32
	MySqlParserRULE_func_param                    = 33
	MySqlParserRULE_routine_characteristic        = 34
	MySqlParserRULE_server_option                 = 35
	MySqlParserRULE_column_def_table_constraints  = 36
	MySqlParserRULE_column_def_table_constraint   = 37
	MySqlParserRULE_column_definition             = 38
	MySqlParserRULE_separate_column_constraint    = 39
	MySqlParserRULE_table_constraint              = 40
	MySqlParserRULE_reference_definition          = 41
	MySqlParserRULE_on_delete_action              = 42
	MySqlParserRULE_on_update_action              = 43
	MySqlParserRULE_reference_action_control_type = 44
	MySqlParserRULE_index_column_definition       = 45
	MySqlParserRULE_table_option                  = 46
	MySqlParserRULE_partition_options             = 47
	MySqlParserRULE_partition_function_definition = 48
	MySqlParserRULE_linear_partition_func_def     = 49
	MySqlParserRULE_partition_def                 = 50
	MySqlParserRULE_subpartition_def              = 51
	MySqlParserRULE_alter_database                = 52
	MySqlParserRULE_alter_event                   = 53
	MySqlParserRULE_alter_function                = 54
	MySqlParserRULE_alter_instance                = 55
	MySqlParserRULE_alter_logfile_group           = 56
	MySqlParserRULE_alter_procedure               = 57
	MySqlParserRULE_alter_server                  = 58
	MySqlParserRULE_alter_table                   = 59
	MySqlParserRULE_alter_tablespace              = 60
	MySqlParserRULE_alter_view                    = 61
	MySqlParserRULE_alter_table_spec              = 62
	MySqlParserRULE_drop_database                 = 63
	MySqlParserRULE_drop_event                    = 64
	MySqlParserRULE_drop_index                    = 65
	MySqlParserRULE_drop_logfile_group            = 66
	MySqlParserRULE_drop_procedure                = 67
	MySqlParserRULE_drop_function                 = 68
	MySqlParserRULE_drop_server                   = 69
	MySqlParserRULE_drop_table                    = 70
	MySqlParserRULE_drop_tablespace               = 71
	MySqlParserRULE_drop_trigger                  = 72
	MySqlParserRULE_drop_view                     = 73
	MySqlParserRULE_rename_table                  = 74
	MySqlParserRULE_truncate_table                = 75
	MySqlParserRULE_call_statement                = 76
	MySqlParserRULE_delete_statement              = 77
	MySqlParserRULE_do_statement                  = 78
	MySqlParserRULE_handler_statement             = 79
	MySqlParserRULE_insert_statement              = 80
	MySqlParserRULE_load_data_statement           = 81
	MySqlParserRULE_load_xml_statement            = 82
	MySqlParserRULE_replace_statement             = 83
	MySqlParserRULE_select_statement              = 84
	MySqlParserRULE_update_statement              = 85
	MySqlParserRULE_insert_statement_value        = 86
	MySqlParserRULE_update_elem                   = 87
	MySqlParserRULE_col_or_uservar                = 88
	MySqlParserRULE_single_delete_statement       = 89
	MySqlParserRULE_multiple_delete_statement     = 90
	MySqlParserRULE_handler_open_statement        = 91
	MySqlParserRULE_handler_read_index_statement  = 92
	MySqlParserRULE_handler_read_statement        = 93
	MySqlParserRULE_handler_close_statement       = 94
	MySqlParserRULE_single_update_statement       = 95
	MySqlParserRULE_multiple_update_statement     = 96
	MySqlParserRULE_order_by_clause               = 97
	MySqlParserRULE_order_by_expression           = 98
	MySqlParserRULE_table_sources                 = 99
	MySqlParserRULE_table_source                  = 100
	MySqlParserRULE_table_source_item             = 101
	MySqlParserRULE_index_hint                    = 102
	MySqlParserRULE_join_part                     = 103
	MySqlParserRULE_subquery                      = 104
	MySqlParserRULE_query_expression              = 105
	MySqlParserRULE_query_expression_nointo       = 106
	MySqlParserRULE_query_specification           = 107
	MySqlParserRULE_query_specification_nointo    = 108
	MySqlParserRULE_union_parenth                 = 109
	MySqlParserRULE_union_statement               = 110
	MySqlParserRULE_select_spec                   = 111
	MySqlParserRULE_select_list                   = 112
	MySqlParserRULE_select_list_elem              = 113
	MySqlParserRULE_select_into_expression        = 114
	MySqlParserRULE_from_clause                   = 115
	MySqlParserRULE_group_by_item                 = 116
	MySqlParserRULE_limit_clause                  = 117
	MySqlParserRULE_start_transaction             = 118
	MySqlParserRULE_begin_work                    = 119
	MySqlParserRULE_commit_work                   = 120
	MySqlParserRULE_rollback_work                 = 121
	MySqlParserRULE_savepoint_statement           = 122
	MySqlParserRULE_rollback_statement            = 123
	MySqlParserRULE_release_statement             = 124
	MySqlParserRULE_lock_tables                   = 125
	MySqlParserRULE_unlock_tables                 = 126
	MySqlParserRULE_set_autocommit_statement      = 127
	MySqlParserRULE_set_transaction_statement     = 128
	MySqlParserRULE_transact_option               = 129
	MySqlParserRULE_lock_table_element            = 130
	MySqlParserRULE_trans_characteristic          = 131
	MySqlParserRULE_transaction_level             = 132
	MySqlParserRULE_change_master                 = 133
	MySqlParserRULE_change_repl_filter            = 134
	MySqlParserRULE_purge_binary_logs             = 135
	MySqlParserRULE_reset_master                  = 136
	MySqlParserRULE_reset_slave                   = 137
	MySqlParserRULE_start_slave                   = 138
	MySqlParserRULE_stop_slave                    = 139
	MySqlParserRULE_start_group_repl              = 140
	MySqlParserRULE_stop_group_repl               = 141
	MySqlParserRULE_master_option                 = 142
	MySqlParserRULE_string_master_option          = 143
	MySqlParserRULE_decimal_master_option         = 144
	MySqlParserRULE_bool_master_option            = 145
	MySqlParserRULE_channel_option                = 146
	MySqlParserRULE_repl_filter                   = 147
	MySqlParserRULE_thread_type                   = 148
	MySqlParserRULE_until_option                  = 149
	MySqlParserRULE_start_slave_connection_option = 150
	MySqlParserRULE_gtid_set                      = 151
	MySqlParserRULE_xa_start_transaction          = 152
	MySqlParserRULE_xa_end_transaction            = 153
	MySqlParserRULE_xa_prepare                    = 154
	MySqlParserRULE_xa_commit_work                = 155
	MySqlParserRULE_xa_rollback_work              = 156
	MySqlParserRULE_xa_recover_work               = 157
	MySqlParserRULE_prepare_statement             = 158
	MySqlParserRULE_execute_statement             = 159
	MySqlParserRULE_deallocate_prepare            = 160
	MySqlParserRULE_routine_body                  = 161
	MySqlParserRULE_block_statement               = 162
	MySqlParserRULE_case_statement                = 163
	MySqlParserRULE_if_statement                  = 164
	MySqlParserRULE_iterate_statement             = 165
	MySqlParserRULE_leave_statement               = 166
	MySqlParserRULE_loop_statement                = 167
	MySqlParserRULE_repeat_statement              = 168
	MySqlParserRULE_return_statement              = 169
	MySqlParserRULE_while_statement               = 170
	MySqlParserRULE_cursor_statement              = 171
	MySqlParserRULE_declare_variable              = 172
	MySqlParserRULE_declare_condition             = 173
	MySqlParserRULE_declare_cursor                = 174
	MySqlParserRULE_declare_handler               = 175
	MySqlParserRULE_handler_condition_value       = 176
	MySqlParserRULE_procedure_sql_statement       = 177
	MySqlParserRULE_alter_user                    = 178
	MySqlParserRULE_create_user                   = 179
	MySqlParserRULE_drop_user                     = 180
	MySqlParserRULE_grant_statement               = 181
	MySqlParserRULE_grant_proxy                   = 182
	MySqlParserRULE_rename_user                   = 183
	MySqlParserRULE_revoke_statement              = 184
	MySqlParserRULE_revoke_proxy                  = 185
	MySqlParserRULE_set_password_statement        = 186
	MySqlParserRULE_user_password_option          = 187
	MySqlParserRULE_user_auth_option              = 188
	MySqlParserRULE_tls_option                    = 189
	MySqlParserRULE_user_resource_option          = 190
	MySqlParserRULE_user_lock_option              = 191
	MySqlParserRULE_privelege_clause              = 192
	MySqlParserRULE_privilege                     = 193
	MySqlParserRULE_privilege_level               = 194
	MySqlParserRULE_set_password_option           = 195
	MySqlParserRULE_analyze_table                 = 196
	MySqlParserRULE_check_table                   = 197
	MySqlParserRULE_checksum_table                = 198
	MySqlParserRULE_optimize_table                = 199
	MySqlParserRULE_repair_table                  = 200
	MySqlParserRULE_check_table_option            = 201
	MySqlParserRULE_create_udfunction             = 202
	MySqlParserRULE_install_plugin                = 203
	MySqlParserRULE_uninstall_plugin              = 204
	MySqlParserRULE_set_statement                 = 205
	MySqlParserRULE_show_statement                = 206
	MySqlParserRULE_variable_clause               = 207
	MySqlParserRULE_show_filter                   = 208
	MySqlParserRULE_show_profile_type             = 209
	MySqlParserRULE_binlog_statement              = 210
	MySqlParserRULE_cache_index_statement         = 211
	MySqlParserRULE_flush_statement               = 212
	MySqlParserRULE_kill_statement                = 213
	MySqlParserRULE_load_index_into_cache         = 214
	MySqlParserRULE_reset_statement               = 215
	MySqlParserRULE_shutdown_statement            = 216
	MySqlParserRULE_tbl_index_list                = 217
	MySqlParserRULE_flush_option                  = 218
	MySqlParserRULE_load_tbl_index_list           = 219
	MySqlParserRULE_simple_describe_statement     = 220
	MySqlParserRULE_full_describe_statement       = 221
	MySqlParserRULE_help_statement                = 222
	MySqlParserRULE_use_statement                 = 223
	MySqlParserRULE_describe_object_clause        = 224
	MySqlParserRULE_table_name                    = 225
	MySqlParserRULE_full_id                       = 226
	MySqlParserRULE_full_column_name              = 227
	MySqlParserRULE_index_col_name                = 228
	MySqlParserRULE_user_name                     = 229
	MySqlParserRULE_mysql_variable                = 230
	MySqlParserRULE_charset_name                  = 231
	MySqlParserRULE_collation_name                = 232
	MySqlParserRULE_engine_name                   = 233
	MySqlParserRULE_uuid_set                      = 234
	MySqlParserRULE_xid                           = 235
	MySqlParserRULE_xid_string_id                 = 236
	MySqlParserRULE_auth_plugin                   = 237
	MySqlParserRULE_id_                           = 238
	MySqlParserRULE_simple_id                     = 239
	MySqlParserRULE_dot_ext_id                    = 240
	MySqlParserRULE_decimal_literal               = 241
	MySqlParserRULE_filesize_literal              = 242
	MySqlParserRULE_string_literal                = 243
	MySqlParserRULE_boolean_literal               = 244
	MySqlParserRULE_hexadecimal_literal           = 245
	MySqlParserRULE_null_notnull                  = 246
	MySqlParserRULE_constant                      = 247
	MySqlParserRULE_data_type                     = 248
	MySqlParserRULE_data_type_to_convert          = 249
	MySqlParserRULE_spatial_data_type             = 250
	MySqlParserRULE_length_one_dimension          = 251
	MySqlParserRULE_length_two_dimension          = 252
	MySqlParserRULE_length_two_optional_dimension = 253
	MySqlParserRULE_id_list                       = 254
	MySqlParserRULE_table_list                    = 255
	MySqlParserRULE_table_pair_list               = 256
	MySqlParserRULE_index_colname_list            = 257
	MySqlParserRULE_expression_list               = 258
	MySqlParserRULE_constant_list                 = 259
	MySqlParserRULE_simple_string_list            = 260
	MySqlParserRULE_user_var_list                 = 261
	MySqlParserRULE_default_value                 = 262
	MySqlParserRULE_if_exists                     = 263
	MySqlParserRULE_if_not_exists                 = 264
	MySqlParserRULE_function_call                 = 265
	MySqlParserRULE_specific_function_call        = 266
	MySqlParserRULE_levels_in_weight_string       = 267
	MySqlParserRULE_aggregate_windowed_function   = 268
	MySqlParserRULE_scalar_function_name          = 269
	MySqlParserRULE_function_args                 = 270
	MySqlParserRULE_function_arg                  = 271
	MySqlParserRULE_expression                    = 272
	MySqlParserRULE_predicate                     = 273
	MySqlParserRULE_expression_atom               = 274
	MySqlParserRULE_unary_operator                = 275
	MySqlParserRULE_comparison_operator           = 276
	MySqlParserRULE_logical_operator              = 277
	MySqlParserRULE_bit_operator                  = 278
	MySqlParserRULE_math_operator                 = 279
	MySqlParserRULE_charset_name_base             = 280
	MySqlParserRULE_transaction_level_base        = 281
	MySqlParserRULE_privileges_base               = 282
	MySqlParserRULE_interval_type_base            = 283
	MySqlParserRULE_data_type_base                = 284
	MySqlParserRULE_keywords_can_be_id            = 285
	MySqlParserRULE_function_name_base            = 286
)

// IRootContext is an interface to support dynamic dispatch.
type IRootContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRootContext differentiates from other interfaces.
	IsRootContext()
}

type RootContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRootContext() *RootContext {
	var p = new(RootContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_root
	return p
}

func (*RootContext) IsRootContext() {}

func NewRootContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RootContext {
	var p = new(RootContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_root

	return p
}

func (s *RootContext) GetParser() antlr.Parser { return s.parser }

func (s *RootContext) EOF() antlr.TerminalNode {
	return s.GetToken(MySqlParserEOF, 0)
}

func (s *RootContext) Sql_statements() ISql_statementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_statementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_statementsContext)
}

func (s *RootContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *RootContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *RootContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RootContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RootContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoot(s)
	}
}

func (s *RootContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoot(s)
	}
}

func (s *RootContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoot(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Root() (localctx IRootContext) {
	localctx = NewRootContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MySqlParserRULE_root)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserGRANT-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156)))) != 0) || (((_la-257)&-(0x1f+1)) == 0 && ((1<<uint((_la-257)))&((1<<(MySqlParserBEGIN-257))|(1<<(MySqlParserBINLOG-257))|(1<<(MySqlParserCACHE-257))|(1<<(MySqlParserCHECKSUM-257))|(1<<(MySqlParserCOMMIT-257)))) != 0) || _la == MySqlParserDEALLOCATE || _la == MySqlParserDO || (((_la-330)&-(0x1f+1)) == 0 && ((1<<uint((_la-330)))&((1<<(MySqlParserFLUSH-330))|(1<<(MySqlParserHANDLER-330))|(1<<(MySqlParserHELP-330))|(1<<(MySqlParserINSTALL-330)))) != 0) || (((_la-438)&-(0x1f+1)) == 0 && ((1<<uint((_la-438)))&((1<<(MySqlParserPREPARE-438))|(1<<(MySqlParserREPAIR-438))|(1<<(MySqlParserRESET-438))|(1<<(MySqlParserROLLBACK-438)))) != 0) || (((_la-475)&-(0x1f+1)) == 0 && ((1<<uint((_la-475)))&((1<<(MySqlParserSAVEPOINT-475))|(1<<(MySqlParserSTART-475))|(1<<(MySqlParserSTOP-475)))) != 0) || (((_la-521)&-(0x1f+1)) == 0 && ((1<<uint((_la-521)))&((1<<(MySqlParserTRUNCATE-521))|(1<<(MySqlParserUNINSTALL-521))|(1<<(MySqlParserXA-521)))) != 0) || _la == MySqlParserEXECUTE || _la == MySqlParserSHUTDOWN || _la == MySqlParserLR_BRACKET || _la == MySqlParserSEMI {
		{
			p.SetState(574)
			p.Sql_statements()
		}

	}
	p.SetState(579)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMINUS {
		{
			p.SetState(577)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(578)
			p.Match(MySqlParserMINUS)
		}

	}
	{
		p.SetState(581)
		p.Match(MySqlParserEOF)
	}

	return localctx
}

// ISql_statementsContext is an interface to support dynamic dispatch.
type ISql_statementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_statementsContext differentiates from other interfaces.
	IsSql_statementsContext()
}

type Sql_statementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statementsContext() *Sql_statementsContext {
	var p = new(Sql_statementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sql_statements
	return p
}

func (*Sql_statementsContext) IsSql_statementsContext() {}

func NewSql_statementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statementsContext {
	var p = new(Sql_statementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sql_statements

	return p
}

func (s *Sql_statementsContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statementsContext) AllSql_statement() []ISql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISql_statementContext)(nil)).Elem())
	var tst = make([]ISql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISql_statementContext)
		}
	}

	return tst
}

func (s *Sql_statementsContext) Sql_statement(i int) ISql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Sql_statementsContext) AllEmpty_statement() []IEmpty_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEmpty_statementContext)(nil)).Elem())
	var tst = make([]IEmpty_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEmpty_statementContext)
		}
	}

	return tst
}

func (s *Sql_statementsContext) Empty_statement(i int) IEmpty_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmpty_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEmpty_statementContext)
}

func (s *Sql_statementsContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *Sql_statementsContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *Sql_statementsContext) AllMINUS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserMINUS)
}

func (s *Sql_statementsContext) MINUS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUS, i)
}

func (s *Sql_statementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSql_statements(s)
	}
}

func (s *Sql_statementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSql_statements(s)
	}
}

func (s *Sql_statementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSql_statements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Sql_statements() (localctx ISql_statementsContext) {
	localctx = NewSql_statementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MySqlParserRULE_sql_statements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(593)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(591)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
				{
					p.SetState(583)
					p.Sql_statement()
				}
				p.SetState(586)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserMINUS {
					{
						p.SetState(584)
						p.Match(MySqlParserMINUS)
					}
					{
						p.SetState(585)
						p.Match(MySqlParserMINUS)
					}

				}
				{
					p.SetState(588)
					p.Match(MySqlParserSEMI)
				}

			case MySqlParserSEMI:
				{
					p.SetState(590)
					p.Empty_statement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(595)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
	}
	p.SetState(605)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALTER, MySqlParserANALYZE, MySqlParserCALL, MySqlParserCHANGE, MySqlParserCHECK, MySqlParserCREATE, MySqlParserDELETE, MySqlParserDESC, MySqlParserDESCRIBE, MySqlParserDROP, MySqlParserEXPLAIN, MySqlParserGRANT, MySqlParserINSERT, MySqlParserKILL, MySqlParserLOAD, MySqlParserLOCK, MySqlParserOPTIMIZE, MySqlParserPURGE, MySqlParserRELEASE, MySqlParserRENAME, MySqlParserREPLACE, MySqlParserREVOKE, MySqlParserSELECT, MySqlParserSET, MySqlParserSHOW, MySqlParserUNLOCK, MySqlParserUPDATE, MySqlParserUSE, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserCACHE, MySqlParserCHECKSUM, MySqlParserCOMMIT, MySqlParserDEALLOCATE, MySqlParserDO, MySqlParserFLUSH, MySqlParserHANDLER, MySqlParserHELP, MySqlParserINSTALL, MySqlParserPREPARE, MySqlParserREPAIR, MySqlParserRESET, MySqlParserROLLBACK, MySqlParserSAVEPOINT, MySqlParserSTART, MySqlParserSTOP, MySqlParserTRUNCATE, MySqlParserUNINSTALL, MySqlParserXA, MySqlParserEXECUTE, MySqlParserSHUTDOWN, MySqlParserLR_BRACKET:
		{
			p.SetState(596)
			p.Sql_statement()
		}
		p.SetState(602)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext()) == 1 {
			p.SetState(599)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserMINUS {
				{
					p.SetState(597)
					p.Match(MySqlParserMINUS)
				}
				{
					p.SetState(598)
					p.Match(MySqlParserMINUS)
				}

			}
			{
				p.SetState(601)
				p.Match(MySqlParserSEMI)
			}

		}

	case MySqlParserSEMI:
		{
			p.SetState(604)
			p.Empty_statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISql_statementContext is an interface to support dynamic dispatch.
type ISql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSql_statementContext differentiates from other interfaces.
	IsSql_statementContext()
}

type Sql_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySql_statementContext() *Sql_statementContext {
	var p = new(Sql_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_sql_statement
	return p
}

func (*Sql_statementContext) IsSql_statementContext() {}

func NewSql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sql_statementContext {
	var p = new(Sql_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_sql_statement

	return p
}

func (s *Sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Sql_statementContext) Ddl_statement() IDdl_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDdl_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDdl_statementContext)
}

func (s *Sql_statementContext) Dml_statement() IDml_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDml_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDml_statementContext)
}

func (s *Sql_statementContext) Transaction_statement() ITransaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_statementContext)
}

func (s *Sql_statementContext) Replication_statement() IReplication_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplication_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplication_statementContext)
}

func (s *Sql_statementContext) Prepared_statement() IPrepared_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepared_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepared_statementContext)
}

func (s *Sql_statementContext) Administration_statement() IAdministration_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdministration_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdministration_statementContext)
}

func (s *Sql_statementContext) Utility_statement() IUtility_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUtility_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUtility_statementContext)
}

func (s *Sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Sql_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSql_statement(s)
	}
}

func (s *Sql_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSql_statement(s)
	}
}

func (s *Sql_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSql_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Sql_statement() (localctx ISql_statementContext) {
	localctx = NewSql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MySqlParserRULE_sql_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(607)
			p.Ddl_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(608)
			p.Dml_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(609)
			p.Transaction_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(610)
			p.Replication_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(611)
			p.Prepared_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(612)
			p.Administration_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(613)
			p.Utility_statement()
		}

	}

	return localctx
}

// IEmpty_statementContext is an interface to support dynamic dispatch.
type IEmpty_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmpty_statementContext differentiates from other interfaces.
	IsEmpty_statementContext()
}

type Empty_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmpty_statementContext() *Empty_statementContext {
	var p = new(Empty_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_empty_statement
	return p
}

func (*Empty_statementContext) IsEmpty_statementContext() {}

func NewEmpty_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Empty_statementContext {
	var p = new(Empty_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_empty_statement

	return p
}

func (s *Empty_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Empty_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *Empty_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Empty_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Empty_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterEmpty_statement(s)
	}
}

func (s *Empty_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitEmpty_statement(s)
	}
}

func (s *Empty_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitEmpty_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Empty_statement() (localctx IEmpty_statementContext) {
	localctx = NewEmpty_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MySqlParserRULE_empty_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// IDdl_statementContext is an interface to support dynamic dispatch.
type IDdl_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDdl_statementContext differentiates from other interfaces.
	IsDdl_statementContext()
}

type Ddl_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDdl_statementContext() *Ddl_statementContext {
	var p = new(Ddl_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_ddl_statement
	return p
}

func (*Ddl_statementContext) IsDdl_statementContext() {}

func NewDdl_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ddl_statementContext {
	var p = new(Ddl_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_ddl_statement

	return p
}

func (s *Ddl_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Ddl_statementContext) Create_database() ICreate_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_databaseContext)
}

func (s *Ddl_statementContext) Create_event() ICreate_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_eventContext)
}

func (s *Ddl_statementContext) Create_index() ICreate_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_indexContext)
}

func (s *Ddl_statementContext) Create_logfile_group() ICreate_logfile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_logfile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_logfile_groupContext)
}

func (s *Ddl_statementContext) Create_procedure() ICreate_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_procedureContext)
}

func (s *Ddl_statementContext) Create_function() ICreate_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_functionContext)
}

func (s *Ddl_statementContext) Create_server() ICreate_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_serverContext)
}

func (s *Ddl_statementContext) Create_table() ICreate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tableContext)
}

func (s *Ddl_statementContext) Create_tablespace_innodb() ICreate_tablespace_innodbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tablespace_innodbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tablespace_innodbContext)
}

func (s *Ddl_statementContext) Create_tablespace_ndb() ICreate_tablespace_ndbContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_tablespace_ndbContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_tablespace_ndbContext)
}

func (s *Ddl_statementContext) Create_trigger() ICreate_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_triggerContext)
}

func (s *Ddl_statementContext) Create_view() ICreate_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_viewContext)
}

func (s *Ddl_statementContext) Alter_database() IAlter_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_databaseContext)
}

func (s *Ddl_statementContext) Alter_event() IAlter_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_eventContext)
}

func (s *Ddl_statementContext) Alter_function() IAlter_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_functionContext)
}

func (s *Ddl_statementContext) Alter_instance() IAlter_instanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_instanceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_instanceContext)
}

func (s *Ddl_statementContext) Alter_logfile_group() IAlter_logfile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_logfile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_logfile_groupContext)
}

func (s *Ddl_statementContext) Alter_procedure() IAlter_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_procedureContext)
}

func (s *Ddl_statementContext) Alter_server() IAlter_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_serverContext)
}

func (s *Ddl_statementContext) Alter_table() IAlter_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tableContext)
}

func (s *Ddl_statementContext) Alter_tablespace() IAlter_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_tablespaceContext)
}

func (s *Ddl_statementContext) Alter_view() IAlter_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_viewContext)
}

func (s *Ddl_statementContext) Drop_database() IDrop_databaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_databaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_databaseContext)
}

func (s *Ddl_statementContext) Drop_event() IDrop_eventContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_eventContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_eventContext)
}

func (s *Ddl_statementContext) Drop_index() IDrop_indexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_indexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_indexContext)
}

func (s *Ddl_statementContext) Drop_logfile_group() IDrop_logfile_groupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_logfile_groupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_logfile_groupContext)
}

func (s *Ddl_statementContext) Drop_procedure() IDrop_procedureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_procedureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_procedureContext)
}

func (s *Ddl_statementContext) Drop_function() IDrop_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_functionContext)
}

func (s *Ddl_statementContext) Drop_server() IDrop_serverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_serverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_serverContext)
}

func (s *Ddl_statementContext) Drop_table() IDrop_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tableContext)
}

func (s *Ddl_statementContext) Drop_tablespace() IDrop_tablespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_tablespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_tablespaceContext)
}

func (s *Ddl_statementContext) Drop_trigger() IDrop_triggerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_triggerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_triggerContext)
}

func (s *Ddl_statementContext) Drop_view() IDrop_viewContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_viewContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_viewContext)
}

func (s *Ddl_statementContext) Rename_table() IRename_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_tableContext)
}

func (s *Ddl_statementContext) Truncate_table() ITruncate_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITruncate_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITruncate_tableContext)
}

func (s *Ddl_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Ddl_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Ddl_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDdl_statement(s)
	}
}

func (s *Ddl_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDdl_statement(s)
	}
}

func (s *Ddl_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDdl_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Ddl_statement() (localctx IDdl_statementContext) {
	localctx = NewDdl_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MySqlParserRULE_ddl_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(618)
			p.Create_database()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(619)
			p.Create_event()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(620)
			p.Create_index()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(621)
			p.Create_logfile_group()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(622)
			p.Create_procedure()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(623)
			p.Create_function()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(624)
			p.Create_server()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(625)
			p.Create_table()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(626)
			p.Create_tablespace_innodb()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(627)
			p.Create_tablespace_ndb()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(628)
			p.Create_trigger()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(629)
			p.Create_view()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(630)
			p.Alter_database()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(631)
			p.Alter_event()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(632)
			p.Alter_function()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(633)
			p.Alter_instance()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(634)
			p.Alter_logfile_group()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(635)
			p.Alter_procedure()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(636)
			p.Alter_server()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(637)
			p.Alter_table()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(638)
			p.Alter_tablespace()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(639)
			p.Alter_view()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(640)
			p.Drop_database()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(641)
			p.Drop_event()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(642)
			p.Drop_index()
		}

	case 26:
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(643)
			p.Drop_logfile_group()
		}

	case 27:
		p.EnterOuterAlt(localctx, 27)
		{
			p.SetState(644)
			p.Drop_procedure()
		}

	case 28:
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(645)
			p.Drop_function()
		}

	case 29:
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(646)
			p.Drop_server()
		}

	case 30:
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(647)
			p.Drop_table()
		}

	case 31:
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(648)
			p.Drop_tablespace()
		}

	case 32:
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(649)
			p.Drop_trigger()
		}

	case 33:
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(650)
			p.Drop_view()
		}

	case 34:
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(651)
			p.Rename_table()
		}

	case 35:
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(652)
			p.Truncate_table()
		}

	}

	return localctx
}

// IDml_statementContext is an interface to support dynamic dispatch.
type IDml_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDml_statementContext differentiates from other interfaces.
	IsDml_statementContext()
}

type Dml_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDml_statementContext() *Dml_statementContext {
	var p = new(Dml_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dml_statement
	return p
}

func (*Dml_statementContext) IsDml_statementContext() {}

func NewDml_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dml_statementContext {
	var p = new(Dml_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dml_statement

	return p
}

func (s *Dml_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Dml_statementContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Dml_statementContext) Insert_statement() IInsert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *Dml_statementContext) Update_statement() IUpdate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *Dml_statementContext) Delete_statement() IDelete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *Dml_statementContext) Replace_statement() IReplace_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplace_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplace_statementContext)
}

func (s *Dml_statementContext) Call_statement() ICall_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICall_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICall_statementContext)
}

func (s *Dml_statementContext) Load_data_statement() ILoad_data_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_data_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoad_data_statementContext)
}

func (s *Dml_statementContext) Load_xml_statement() ILoad_xml_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_xml_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoad_xml_statementContext)
}

func (s *Dml_statementContext) Do_statement() IDo_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDo_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDo_statementContext)
}

func (s *Dml_statementContext) Handler_statement() IHandler_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandler_statementContext)
}

func (s *Dml_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dml_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dml_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDml_statement(s)
	}
}

func (s *Dml_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDml_statement(s)
	}
}

func (s *Dml_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDml_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Dml_statement() (localctx IDml_statementContext) {
	localctx = NewDml_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MySqlParserRULE_dml_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(665)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(655)
			p.Select_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(656)
			p.Insert_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(657)
			p.Update_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(658)
			p.Delete_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(659)
			p.Replace_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(660)
			p.Call_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(661)
			p.Load_data_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(662)
			p.Load_xml_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(663)
			p.Do_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(664)
			p.Handler_statement()
		}

	}

	return localctx
}

// ITransaction_statementContext is an interface to support dynamic dispatch.
type ITransaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_statementContext differentiates from other interfaces.
	IsTransaction_statementContext()
}

type Transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_statementContext() *Transaction_statementContext {
	var p = new(Transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transaction_statement
	return p
}

func (*Transaction_statementContext) IsTransaction_statementContext() {}

func NewTransaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_statementContext {
	var p = new(Transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transaction_statement

	return p
}

func (s *Transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_statementContext) Start_transaction() IStart_transactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_transactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_transactionContext)
}

func (s *Transaction_statementContext) Begin_work() IBegin_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBegin_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBegin_workContext)
}

func (s *Transaction_statementContext) Commit_work() ICommit_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommit_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommit_workContext)
}

func (s *Transaction_statementContext) Rollback_work() IRollback_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_workContext)
}

func (s *Transaction_statementContext) Savepoint_statement() ISavepoint_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISavepoint_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISavepoint_statementContext)
}

func (s *Transaction_statementContext) Rollback_statement() IRollback_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRollback_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRollback_statementContext)
}

func (s *Transaction_statementContext) Release_statement() IRelease_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelease_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelease_statementContext)
}

func (s *Transaction_statementContext) Lock_tables() ILock_tablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_tablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILock_tablesContext)
}

func (s *Transaction_statementContext) Unlock_tables() IUnlock_tablesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnlock_tablesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnlock_tablesContext)
}

func (s *Transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransaction_statement(s)
	}
}

func (s *Transaction_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransaction_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Transaction_statement() (localctx ITransaction_statementContext) {
	localctx = NewTransaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MySqlParserRULE_transaction_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(667)
			p.Start_transaction()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(668)
			p.Begin_work()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(669)
			p.Commit_work()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(670)
			p.Rollback_work()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(671)
			p.Savepoint_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(672)
			p.Rollback_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(673)
			p.Release_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(674)
			p.Lock_tables()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(675)
			p.Unlock_tables()
		}

	}

	return localctx
}

// IReplication_statementContext is an interface to support dynamic dispatch.
type IReplication_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReplication_statementContext differentiates from other interfaces.
	IsReplication_statementContext()
}

type Replication_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReplication_statementContext() *Replication_statementContext {
	var p = new(Replication_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replication_statement
	return p
}

func (*Replication_statementContext) IsReplication_statementContext() {}

func NewReplication_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replication_statementContext {
	var p = new(Replication_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replication_statement

	return p
}

func (s *Replication_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Replication_statementContext) Change_master() IChange_masterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_masterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_masterContext)
}

func (s *Replication_statementContext) Change_repl_filter() IChange_repl_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChange_repl_filterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChange_repl_filterContext)
}

func (s *Replication_statementContext) Purge_binary_logs() IPurge_binary_logsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPurge_binary_logsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPurge_binary_logsContext)
}

func (s *Replication_statementContext) Reset_master() IReset_masterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReset_masterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReset_masterContext)
}

func (s *Replication_statementContext) Reset_slave() IReset_slaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReset_slaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReset_slaveContext)
}

func (s *Replication_statementContext) Start_slave() IStart_slaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_slaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_slaveContext)
}

func (s *Replication_statementContext) Stop_slave() IStop_slaveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStop_slaveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStop_slaveContext)
}

func (s *Replication_statementContext) Start_group_repl() IStart_group_replContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_group_replContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStart_group_replContext)
}

func (s *Replication_statementContext) Stop_group_repl() IStop_group_replContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStop_group_replContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStop_group_replContext)
}

func (s *Replication_statementContext) Xa_start_transaction() IXa_start_transactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_start_transactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_start_transactionContext)
}

func (s *Replication_statementContext) Xa_end_transaction() IXa_end_transactionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_end_transactionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_end_transactionContext)
}

func (s *Replication_statementContext) Xa_prepare() IXa_prepareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_prepareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_prepareContext)
}

func (s *Replication_statementContext) Xa_commit_work() IXa_commit_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_commit_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_commit_workContext)
}

func (s *Replication_statementContext) Xa_rollback_work() IXa_rollback_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_rollback_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_rollback_workContext)
}

func (s *Replication_statementContext) Xa_recover_work() IXa_recover_workContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXa_recover_workContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXa_recover_workContext)
}

func (s *Replication_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replication_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replication_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplication_statement(s)
	}
}

func (s *Replication_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplication_statement(s)
	}
}

func (s *Replication_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplication_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Replication_statement() (localctx IReplication_statementContext) {
	localctx = NewReplication_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MySqlParserRULE_replication_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(693)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(678)
			p.Change_master()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(679)
			p.Change_repl_filter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(680)
			p.Purge_binary_logs()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(681)
			p.Reset_master()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(682)
			p.Reset_slave()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(683)
			p.Start_slave()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(684)
			p.Stop_slave()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(685)
			p.Start_group_repl()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(686)
			p.Stop_group_repl()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(687)
			p.Xa_start_transaction()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(688)
			p.Xa_end_transaction()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(689)
			p.Xa_prepare()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(690)
			p.Xa_commit_work()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(691)
			p.Xa_rollback_work()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(692)
			p.Xa_recover_work()
		}

	}

	return localctx
}

// IPrepared_statementContext is an interface to support dynamic dispatch.
type IPrepared_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrepared_statementContext differentiates from other interfaces.
	IsPrepared_statementContext()
}

type Prepared_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrepared_statementContext() *Prepared_statementContext {
	var p = new(Prepared_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_prepared_statement
	return p
}

func (*Prepared_statementContext) IsPrepared_statementContext() {}

func NewPrepared_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prepared_statementContext {
	var p = new(Prepared_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_prepared_statement

	return p
}

func (s *Prepared_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Prepared_statementContext) Prepare_statement() IPrepare_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrepare_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrepare_statementContext)
}

func (s *Prepared_statementContext) Execute_statement() IExecute_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExecute_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExecute_statementContext)
}

func (s *Prepared_statementContext) Deallocate_prepare() IDeallocate_prepareContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeallocate_prepareContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeallocate_prepareContext)
}

func (s *Prepared_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prepared_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Prepared_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrepared_statement(s)
	}
}

func (s *Prepared_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrepared_statement(s)
	}
}

func (s *Prepared_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrepared_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Prepared_statement() (localctx IPrepared_statementContext) {
	localctx = NewPrepared_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MySqlParserRULE_prepared_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(698)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserPREPARE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(695)
			p.Prepare_statement()
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(696)
			p.Execute_statement()
		}

	case MySqlParserDROP, MySqlParserDEALLOCATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(697)
			p.Deallocate_prepare()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompound_statementContext is an interface to support dynamic dispatch.
type ICompound_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompound_statementContext differentiates from other interfaces.
	IsCompound_statementContext()
}

type Compound_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompound_statementContext() *Compound_statementContext {
	var p = new(Compound_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_compound_statement
	return p
}

func (*Compound_statementContext) IsCompound_statementContext() {}

func NewCompound_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Compound_statementContext {
	var p = new(Compound_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_compound_statement

	return p
}

func (s *Compound_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Compound_statementContext) Block_statement() IBlock_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_statementContext)
}

func (s *Compound_statementContext) Case_statement() ICase_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICase_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICase_statementContext)
}

func (s *Compound_statementContext) If_statement() IIf_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_statementContext)
}

func (s *Compound_statementContext) Leave_statement() ILeave_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILeave_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILeave_statementContext)
}

func (s *Compound_statementContext) Loop_statement() ILoop_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoop_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoop_statementContext)
}

func (s *Compound_statementContext) Repeat_statement() IRepeat_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepeat_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepeat_statementContext)
}

func (s *Compound_statementContext) While_statement() IWhile_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhile_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhile_statementContext)
}

func (s *Compound_statementContext) Iterate_statement() IIterate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterate_statementContext)
}

func (s *Compound_statementContext) Return_statement() IReturn_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturn_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturn_statementContext)
}

func (s *Compound_statementContext) Cursor_statement() ICursor_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICursor_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICursor_statementContext)
}

func (s *Compound_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Compound_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Compound_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCompound_statement(s)
	}
}

func (s *Compound_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCompound_statement(s)
	}
}

func (s *Compound_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCompound_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Compound_statement() (localctx ICompound_statementContext) {
	localctx = NewCompound_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MySqlParserRULE_compound_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(700)
			p.Block_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(701)
			p.Case_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(702)
			p.If_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(703)
			p.Leave_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(704)
			p.Loop_statement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(705)
			p.Repeat_statement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(706)
			p.While_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(707)
			p.Iterate_statement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(708)
			p.Return_statement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(709)
			p.Cursor_statement()
		}

	}

	return localctx
}

// IAdministration_statementContext is an interface to support dynamic dispatch.
type IAdministration_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdministration_statementContext differentiates from other interfaces.
	IsAdministration_statementContext()
}

type Administration_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdministration_statementContext() *Administration_statementContext {
	var p = new(Administration_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_administration_statement
	return p
}

func (*Administration_statementContext) IsAdministration_statementContext() {}

func NewAdministration_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Administration_statementContext {
	var p = new(Administration_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_administration_statement

	return p
}

func (s *Administration_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Administration_statementContext) Alter_user() IAlter_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlter_userContext)
}

func (s *Administration_statementContext) Create_user() ICreate_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_userContext)
}

func (s *Administration_statementContext) Drop_user() IDrop_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDrop_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDrop_userContext)
}

func (s *Administration_statementContext) Grant_statement() IGrant_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_statementContext)
}

func (s *Administration_statementContext) Grant_proxy() IGrant_proxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGrant_proxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGrant_proxyContext)
}

func (s *Administration_statementContext) Rename_user() IRename_userContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRename_userContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRename_userContext)
}

func (s *Administration_statementContext) Revoke_statement() IRevoke_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevoke_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevoke_statementContext)
}

func (s *Administration_statementContext) Revoke_proxy() IRevoke_proxyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevoke_proxyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevoke_proxyContext)
}

func (s *Administration_statementContext) Analyze_table() IAnalyze_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnalyze_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnalyze_tableContext)
}

func (s *Administration_statementContext) Check_table() ICheck_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheck_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICheck_tableContext)
}

func (s *Administration_statementContext) Checksum_table() IChecksum_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChecksum_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChecksum_tableContext)
}

func (s *Administration_statementContext) Optimize_table() IOptimize_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptimize_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptimize_tableContext)
}

func (s *Administration_statementContext) Repair_table() IRepair_tableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepair_tableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRepair_tableContext)
}

func (s *Administration_statementContext) Create_udfunction() ICreate_udfunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_udfunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreate_udfunctionContext)
}

func (s *Administration_statementContext) Install_plugin() IInstall_pluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInstall_pluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInstall_pluginContext)
}

func (s *Administration_statementContext) Uninstall_plugin() IUninstall_pluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUninstall_pluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUninstall_pluginContext)
}

func (s *Administration_statementContext) Set_statement() ISet_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_statementContext)
}

func (s *Administration_statementContext) Show_statement() IShow_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_statementContext)
}

func (s *Administration_statementContext) Binlog_statement() IBinlog_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinlog_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinlog_statementContext)
}

func (s *Administration_statementContext) Cache_index_statement() ICache_index_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICache_index_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICache_index_statementContext)
}

func (s *Administration_statementContext) Flush_statement() IFlush_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlush_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFlush_statementContext)
}

func (s *Administration_statementContext) Kill_statement() IKill_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKill_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKill_statementContext)
}

func (s *Administration_statementContext) Load_index_into_cache() ILoad_index_into_cacheContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_index_into_cacheContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoad_index_into_cacheContext)
}

func (s *Administration_statementContext) Reset_statement() IReset_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReset_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReset_statementContext)
}

func (s *Administration_statementContext) Shutdown_statement() IShutdown_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShutdown_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShutdown_statementContext)
}

func (s *Administration_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Administration_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Administration_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAdministration_statement(s)
	}
}

func (s *Administration_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAdministration_statement(s)
	}
}

func (s *Administration_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAdministration_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Administration_statement() (localctx IAdministration_statementContext) {
	localctx = NewAdministration_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MySqlParserRULE_administration_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(737)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(712)
			p.Alter_user()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(713)
			p.Create_user()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(714)
			p.Drop_user()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(715)
			p.Grant_statement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(716)
			p.Grant_proxy()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(717)
			p.Rename_user()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(718)
			p.Revoke_statement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(719)
			p.Revoke_proxy()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(720)
			p.Analyze_table()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(721)
			p.Check_table()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(722)
			p.Checksum_table()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(723)
			p.Optimize_table()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(724)
			p.Repair_table()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(725)
			p.Create_udfunction()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(726)
			p.Install_plugin()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(727)
			p.Uninstall_plugin()
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(728)
			p.Set_statement()
		}

	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(729)
			p.Show_statement()
		}

	case 19:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(730)
			p.Binlog_statement()
		}

	case 20:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(731)
			p.Cache_index_statement()
		}

	case 21:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(732)
			p.Flush_statement()
		}

	case 22:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(733)
			p.Kill_statement()
		}

	case 23:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(734)
			p.Load_index_into_cache()
		}

	case 24:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(735)
			p.Reset_statement()
		}

	case 25:
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(736)
			p.Shutdown_statement()
		}

	}

	return localctx
}

// IUtility_statementContext is an interface to support dynamic dispatch.
type IUtility_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUtility_statementContext differentiates from other interfaces.
	IsUtility_statementContext()
}

type Utility_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUtility_statementContext() *Utility_statementContext {
	var p = new(Utility_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_utility_statement
	return p
}

func (*Utility_statementContext) IsUtility_statementContext() {}

func NewUtility_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Utility_statementContext {
	var p = new(Utility_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_utility_statement

	return p
}

func (s *Utility_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Utility_statementContext) Simple_describe_statement() ISimple_describe_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_describe_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_describe_statementContext)
}

func (s *Utility_statementContext) Full_describe_statement() IFull_describe_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_describe_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_describe_statementContext)
}

func (s *Utility_statementContext) Help_statement() IHelp_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHelp_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHelp_statementContext)
}

func (s *Utility_statementContext) Use_statement() IUse_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUse_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUse_statementContext)
}

func (s *Utility_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Utility_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Utility_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUtility_statement(s)
	}
}

func (s *Utility_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUtility_statement(s)
	}
}

func (s *Utility_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUtility_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Utility_statement() (localctx IUtility_statementContext) {
	localctx = NewUtility_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MySqlParserRULE_utility_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(743)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(739)
			p.Simple_describe_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(740)
			p.Full_describe_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(741)
			p.Help_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(742)
			p.Use_statement()
		}

	}

	return localctx
}

// ICreate_databaseContext is an interface to support dynamic dispatch.
type ICreate_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_databaseContext differentiates from other interfaces.
	IsCreate_databaseContext()
}

type Create_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_databaseContext() *Create_databaseContext {
	var p = new(Create_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_database
	return p
}

func (*Create_databaseContext) IsCreate_databaseContext() {}

func NewCreate_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_databaseContext {
	var p = new(Create_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_database

	return p
}

func (s *Create_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_databaseContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_databaseContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *Create_databaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *Create_databaseContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_databaseContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *Create_databaseContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *Create_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_database(s)
	}
}

func (s *Create_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_database(s)
	}
}

func (s *Create_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_database() (localctx ICreate_databaseContext) {
	localctx = NewCreate_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MySqlParserRULE_create_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(746)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(748)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(747)
			p.If_not_exists()
		}

	}
	{
		p.SetState(750)
		p.Id_()
	}
	p.SetState(754)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-21)&-(0x1f+1)) == 0 && ((1<<uint((_la-21)))&((1<<(MySqlParserCHARACTER-21))|(1<<(MySqlParserCOLLATE-21))|(1<<(MySqlParserDEFAULT-21)))) != 0 {
		{
			p.SetState(751)
			p.Create_database_option()
		}

		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ICreate_eventContext is an interface to support dynamic dispatch.
type ICreate_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_eventContext differentiates from other interfaces.
	IsCreate_eventContext()
}

type Create_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_eventContext() *Create_eventContext {
	var p = new(Create_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_event
	return p
}

func (*Create_eventContext) IsCreate_eventContext() {}

func NewCreate_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_eventContext {
	var p = new(Create_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_event

	return p
}

func (s *Create_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_eventContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_eventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *Create_eventContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Create_eventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *Create_eventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *Create_eventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *Create_eventContext) Schedule_expression() ISchedule_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchedule_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchedule_expressionContext)
}

func (s *Create_eventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *Create_eventContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Create_eventContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Create_eventContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *Create_eventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *Create_eventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *Create_eventContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *Create_eventContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *Create_eventContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Create_eventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Create_eventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Create_eventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *Create_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_event(s)
	}
}

func (s *Create_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_event(s)
	}
}

func (s *Create_eventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_event(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_event() (localctx ICreate_eventContext) {
	localctx = NewCreate_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MySqlParserRULE_create_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(759)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(758)
			p.Owner_statement()
		}

	}
	{
		p.SetState(761)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(763)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(762)
			p.If_not_exists()
		}

	}
	{
		p.SetState(765)
		p.Full_id()
	}
	{
		p.SetState(766)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(767)
		p.Match(MySqlParserSCHEDULE)
	}
	{
		p.SetState(768)
		p.Schedule_expression()
	}
	p.SetState(775)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(769)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(770)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(771)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(774)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(782)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(777)
			p.Match(MySqlParserENABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(778)
			p.Match(MySqlParserDISABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(779)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(780)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(781)
			p.Match(MySqlParserSLAVE)
		}

	}
	p.SetState(786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(784)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(785)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	{
		p.SetState(788)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(789)
		p.Routine_body()
	}

	return localctx
}

// ICreate_indexContext is an interface to support dynamic dispatch.
type ICreate_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetIndex_category returns the index_category token.
	GetIndex_category() antlr.Token

	// GetAlg_type returns the alg_type token.
	GetAlg_type() antlr.Token

	// GetLock_type returns the lock_type token.
	GetLock_type() antlr.Token

	// SetIndex_category sets the index_category token.
	SetIndex_category(antlr.Token)

	// SetAlg_type sets the alg_type token.
	SetAlg_type(antlr.Token)

	// SetLock_type sets the lock_type token.
	SetLock_type(antlr.Token)

	// IsCreate_indexContext differentiates from other interfaces.
	IsCreate_indexContext()
}

type Create_indexContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	index_category antlr.Token
	alg_type       antlr.Token
	lock_type      antlr.Token
}

func NewEmptyCreate_indexContext() *Create_indexContext {
	var p = new(Create_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_index
	return p
}

func (*Create_indexContext) IsCreate_indexContext() {}

func NewCreate_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_indexContext {
	var p = new(Create_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_index

	return p
}

func (s *Create_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_indexContext) GetIndex_category() antlr.Token { return s.index_category }

func (s *Create_indexContext) GetAlg_type() antlr.Token { return s.alg_type }

func (s *Create_indexContext) GetLock_type() antlr.Token { return s.lock_type }

func (s *Create_indexContext) SetIndex_category(v antlr.Token) { s.index_category = v }

func (s *Create_indexContext) SetAlg_type(v antlr.Token) { s.alg_type = v }

func (s *Create_indexContext) SetLock_type(v antlr.Token) { s.lock_type = v }

func (s *Create_indexContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Create_indexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Create_indexContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_indexContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *Create_indexContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *Create_indexContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *Create_indexContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *Create_indexContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Create_indexContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *Create_indexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *Create_indexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *Create_indexContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *Create_indexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *Create_indexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *Create_indexContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *Create_indexContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *Create_indexContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *Create_indexContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *Create_indexContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *Create_indexContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *Create_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_index(s)
	}
}

func (s *Create_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_index(s)
	}
}

func (s *Create_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_index() (localctx ICreate_indexContext) {
	localctx = NewCreate_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MySqlParserRULE_create_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(791)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		p.SetState(792)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE {
		p.SetState(795)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_indexContext).index_category = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL || _la == MySqlParserUNIQUE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_indexContext).index_category = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(798)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(799)
		p.Id_()
	}
	p.SetState(801)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(800)
			p.Index_type()
		}

	}
	{
		p.SetState(803)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(804)
		p.Table_name()
	}
	{
		p.SetState(805)
		p.Index_colname_list()
	}
	p.SetState(809)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
		{
			p.SetState(806)
			p.Index_option()
		}

		p.SetState(811)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALGORITHM:
		{
			p.SetState(812)
			p.Match(MySqlParserALGORITHM)
		}
		p.SetState(814)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(813)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(816)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_indexContext).alg_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_indexContext).alg_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserLOCK:
		{
			p.SetState(817)
			p.Match(MySqlParserLOCK)
		}
		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(818)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(821)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_indexContext).lock_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_indexContext).lock_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserEOF, MySqlParserMINUS, MySqlParserSEMI:

	default:
	}

	return localctx
}

// ICreate_logfile_groupContext is an interface to support dynamic dispatch.
type ICreate_logfile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUndo_file returns the undo_file token.
	GetUndo_file() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetUndo_file sets the undo_file token.
	SetUndo_file(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetInit_size returns the init_size rule contexts.
	GetInit_size() IFilesize_literalContext

	// GetUndo_size returns the undo_size rule contexts.
	GetUndo_size() IFilesize_literalContext

	// GetRedo_size returns the redo_size rule contexts.
	GetRedo_size() IFilesize_literalContext

	// SetInit_size sets the init_size rule contexts.
	SetInit_size(IFilesize_literalContext)

	// SetUndo_size sets the undo_size rule contexts.
	SetUndo_size(IFilesize_literalContext)

	// SetRedo_size sets the redo_size rule contexts.
	SetRedo_size(IFilesize_literalContext)

	// IsCreate_logfile_groupContext differentiates from other interfaces.
	IsCreate_logfile_groupContext()
}

type Create_logfile_groupContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	undo_file antlr.Token
	init_size IFilesize_literalContext
	undo_size IFilesize_literalContext
	redo_size IFilesize_literalContext
	comment   antlr.Token
}

func NewEmptyCreate_logfile_groupContext() *Create_logfile_groupContext {
	var p = new(Create_logfile_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_logfile_group
	return p
}

func (*Create_logfile_groupContext) IsCreate_logfile_groupContext() {}

func NewCreate_logfile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_logfile_groupContext {
	var p = new(Create_logfile_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_logfile_group

	return p
}

func (s *Create_logfile_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_logfile_groupContext) GetUndo_file() antlr.Token { return s.undo_file }

func (s *Create_logfile_groupContext) GetComment() antlr.Token { return s.comment }

func (s *Create_logfile_groupContext) SetUndo_file(v antlr.Token) { s.undo_file = v }

func (s *Create_logfile_groupContext) SetComment(v antlr.Token) { s.comment = v }

func (s *Create_logfile_groupContext) GetInit_size() IFilesize_literalContext { return s.init_size }

func (s *Create_logfile_groupContext) GetUndo_size() IFilesize_literalContext { return s.undo_size }

func (s *Create_logfile_groupContext) GetRedo_size() IFilesize_literalContext { return s.redo_size }

func (s *Create_logfile_groupContext) SetInit_size(v IFilesize_literalContext) { s.init_size = v }

func (s *Create_logfile_groupContext) SetUndo_size(v IFilesize_literalContext) { s.undo_size = v }

func (s *Create_logfile_groupContext) SetRedo_size(v IFilesize_literalContext) { s.redo_size = v }

func (s *Create_logfile_groupContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_logfile_groupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *Create_logfile_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *Create_logfile_groupContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Create_logfile_groupContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_logfile_groupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *Create_logfile_groupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *Create_logfile_groupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Create_logfile_groupContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Create_logfile_groupContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Create_logfile_groupContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Create_logfile_groupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *Create_logfile_groupContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *Create_logfile_groupContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *Create_logfile_groupContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *Create_logfile_groupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *Create_logfile_groupContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Create_logfile_groupContext) AllFilesize_literal() []IFilesize_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem())
	var tst = make([]IFilesize_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFilesize_literalContext)
		}
	}

	return tst
}

func (s *Create_logfile_groupContext) Filesize_literal(i int) IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Create_logfile_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_logfile_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_logfile_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_logfile_group(s)
	}
}

func (s *Create_logfile_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_logfile_group(s)
	}
}

func (s *Create_logfile_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_logfile_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_logfile_group() (localctx ICreate_logfile_groupContext) {
	localctx = NewCreate_logfile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MySqlParserRULE_create_logfile_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(824)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(825)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(826)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(827)
		p.Id_()
	}
	{
		p.SetState(828)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(829)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(830)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*Create_logfile_groupContext).undo_file = _m
	}
	p.SetState(836)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(831)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(832)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(835)

			var _x = p.Filesize_literal()

			localctx.(*Create_logfile_groupContext).init_size = _x
		}

	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUNDO_BUFFER_SIZE {
		{
			p.SetState(838)
			p.Match(MySqlParserUNDO_BUFFER_SIZE)
		}
		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(839)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(842)

			var _x = p.Filesize_literal()

			localctx.(*Create_logfile_groupContext).undo_size = _x
		}

	}
	p.SetState(850)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREDO_BUFFER_SIZE {
		{
			p.SetState(845)
			p.Match(MySqlParserREDO_BUFFER_SIZE)
		}
		p.SetState(847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(846)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(849)

			var _x = p.Filesize_literal()

			localctx.(*Create_logfile_groupContext).redo_size = _x
		}

	}
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(852)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(853)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(856)
			p.Id_()
		}

	}
	p.SetState(860)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(859)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(862)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(864)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(863)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(866)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Create_logfile_groupContext).comment = _m
		}

	}
	{
		p.SetState(869)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(871)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(870)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(873)
		p.Engine_name()
	}

	return localctx
}

// ICreate_procedureContext is an interface to support dynamic dispatch.
type ICreate_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_procedureContext differentiates from other interfaces.
	IsCreate_procedureContext()
}

type Create_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_procedureContext() *Create_procedureContext {
	var p = new(Create_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_procedure
	return p
}

func (*Create_procedureContext) IsCreate_procedureContext() {}

func NewCreate_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_procedureContext {
	var p = new(Create_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_procedure

	return p
}

func (s *Create_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_procedureContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *Create_procedureContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Create_procedureContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Create_procedureContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Create_procedureContext) AllProc_param() []IProc_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProc_paramContext)(nil)).Elem())
	var tst = make([]IProc_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProc_paramContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Proc_param(i int) IProc_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProc_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProc_paramContext)
}

func (s *Create_procedureContext) AllRoutine_characteristic() []IRoutine_characteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem())
	var tst = make([]IRoutine_characteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutine_characteristicContext)
		}
	}

	return tst
}

func (s *Create_procedureContext) Routine_characteristic(i int) IRoutine_characteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutine_characteristicContext)
}

func (s *Create_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_procedure(s)
	}
}

func (s *Create_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_procedure(s)
	}
}

func (s *Create_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_procedure() (localctx ICreate_procedureContext) {
	localctx = NewCreate_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MySqlParserRULE_create_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(877)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(876)
			p.Owner_statement()
		}

	}
	{
		p.SetState(879)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(880)
		p.Full_id()
	}
	{
		p.SetState(881)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT {
		{
			p.SetState(882)
			p.Proc_param()
		}

	}
	p.SetState(889)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(885)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(886)
			p.Proc_param()
		}

		p.SetState(891)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(892)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(893)
				p.Routine_characteristic()
			}

		}
		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())
	}
	{
		p.SetState(899)
		p.Routine_body()
	}

	return localctx
}

// ICreate_functionContext is an interface to support dynamic dispatch.
type ICreate_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_functionContext differentiates from other interfaces.
	IsCreate_functionContext()
}

type Create_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_functionContext() *Create_functionContext {
	var p = new(Create_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_function
	return p
}

func (*Create_functionContext) IsCreate_functionContext() {}

func NewCreate_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_functionContext {
	var p = new(Create_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_function

	return p
}

func (s *Create_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_functionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Create_functionContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Create_functionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *Create_functionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Create_functionContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Create_functionContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Create_functionContext) AllFunc_param() []IFunc_paramContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunc_paramContext)(nil)).Elem())
	var tst = make([]IFunc_paramContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunc_paramContext)
		}
	}

	return tst
}

func (s *Create_functionContext) Func_param(i int) IFunc_paramContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunc_paramContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunc_paramContext)
}

func (s *Create_functionContext) AllRoutine_characteristic() []IRoutine_characteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem())
	var tst = make([]IRoutine_characteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutine_characteristicContext)
		}
	}

	return tst
}

func (s *Create_functionContext) Routine_characteristic(i int) IRoutine_characteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutine_characteristicContext)
}

func (s *Create_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_function(s)
	}
}

func (s *Create_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_function(s)
	}
}

func (s *Create_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_function() (localctx ICreate_functionContext) {
	localctx = NewCreate_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MySqlParserRULE_create_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(901)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(903)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(902)
			p.Owner_statement()
		}

	}
	{
		p.SetState(905)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(906)
		p.Full_id()
	}
	{
		p.SetState(907)
		p.Match(MySqlParserLR_BRACKET)
	}
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(908)
			p.Func_param()
		}

	}
	p.SetState(915)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(911)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(912)
			p.Func_param()
		}

		p.SetState(917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(918)
		p.Match(MySqlParserRR_BRACKET)
	}
	{
		p.SetState(919)
		p.Match(MySqlParserRETURNS)
	}
	{
		p.SetState(920)
		p.Data_type()
	}
	p.SetState(924)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(921)
				p.Routine_characteristic()
			}

		}
		p.SetState(926)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}
	{
		p.SetState(927)
		p.Routine_body()
	}

	return localctx
}

// ICreate_serverContext is an interface to support dynamic dispatch.
type ICreate_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_serverContext differentiates from other interfaces.
	IsCreate_serverContext()
}

type Create_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_serverContext() *Create_serverContext {
	var p = new(Create_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_server
	return p
}

func (*Create_serverContext) IsCreate_serverContext() {}

func NewCreate_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_serverContext {
	var p = new(Create_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_server

	return p
}

func (s *Create_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_serverContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_serverContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *Create_serverContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_serverContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *Create_serverContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *Create_serverContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *Create_serverContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *Create_serverContext) AllServer_option() []IServer_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServer_optionContext)(nil)).Elem())
	var tst = make([]IServer_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServer_optionContext)
		}
	}

	return tst
}

func (s *Create_serverContext) Server_option(i int) IServer_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServer_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServer_optionContext)
}

func (s *Create_serverContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *Create_serverContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Create_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_server(s)
	}
}

func (s *Create_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_server(s)
	}
}

func (s *Create_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_server() (localctx ICreate_serverContext) {
	localctx = NewCreate_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MySqlParserRULE_create_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(929)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(930)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(931)
		p.Id_()
	}
	{
		p.SetState(932)
		p.Match(MySqlParserFOREIGN)
	}
	{
		p.SetState(933)
		p.Match(MySqlParserDATA)
	}
	{
		p.SetState(934)
		p.Match(MySqlParserWRAPPER)
	}
	p.SetState(935)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserMYSQL || _la == MySqlParserSTRING_LITERAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(936)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(937)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(938)
		p.Server_option()
	}
	p.SetState(943)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(939)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(940)
			p.Server_option()
		}

		p.SetState(945)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(946)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ICreate_tableContext is an interface to support dynamic dispatch.
type ICreate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_tableContext differentiates from other interfaces.
	IsCreate_tableContext()
}

type Create_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_tableContext() *Create_tableContext {
	var p = new(Create_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_table
	return p
}

func (*Create_tableContext) IsCreate_tableContext() {}

func NewCreate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tableContext {
	var p = new(Create_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_table

	return p
}

func (s *Create_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tableContext) CopyFrom(ctx *Create_tableContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Create_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColCreateTableContext struct {
	*Create_tableContext
}

func NewColCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColCreateTableContext {
	var p = new(ColCreateTableContext)

	p.Create_tableContext = NewEmptyCreate_tableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Create_tableContext))

	return p
}

func (s *ColCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ColCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ColCreateTableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ColCreateTableContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *ColCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *ColCreateTableContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *ColCreateTableContext) AllTable_option() []ITable_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_optionContext)(nil)).Elem())
	var tst = make([]ITable_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_optionContext)
		}
	}

	return tst
}

func (s *ColCreateTableContext) Table_option(i int) ITable_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_optionContext)
}

func (s *ColCreateTableContext) Partition_options() IPartition_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_optionsContext)
}

func (s *ColCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColCreateTable(s)
	}
}

func (s *ColCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColCreateTable(s)
	}
}

func (s *ColCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type CopyCreateTableContext struct {
	*Create_tableContext
}

func NewCopyCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CopyCreateTableContext {
	var p = new(CopyCreateTableContext)

	p.Create_tableContext = NewEmptyCreate_tableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Create_tableContext))

	return p
}

func (s *CopyCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CopyCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CopyCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *CopyCreateTableContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *CopyCreateTableContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *CopyCreateTableContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *CopyCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *CopyCreateTableContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *CopyCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCopyCreateTable(s)
	}
}

func (s *CopyCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCopyCreateTable(s)
	}
}

func (s *CopyCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCopyCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

type QueryCreateTableContext struct {
	*Create_tableContext
}

func NewQueryCreateTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryCreateTableContext {
	var p = new(QueryCreateTableContext)

	p.Create_tableContext = NewEmptyCreate_tableContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Create_tableContext))

	return p
}

func (s *QueryCreateTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryCreateTableContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *QueryCreateTableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *QueryCreateTableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *QueryCreateTableContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *QueryCreateTableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *QueryCreateTableContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *QueryCreateTableContext) Column_def_table_constraints() IColumn_def_table_constraintsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintsContext)
}

func (s *QueryCreateTableContext) AllTable_option() []ITable_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_optionContext)(nil)).Elem())
	var tst = make([]ITable_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_optionContext)
		}
	}

	return tst
}

func (s *QueryCreateTableContext) Table_option(i int) ITable_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_optionContext)
}

func (s *QueryCreateTableContext) Partition_options() IPartition_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_optionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_optionsContext)
}

func (s *QueryCreateTableContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *QueryCreateTableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *QueryCreateTableContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *QueryCreateTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQueryCreateTable(s)
	}
}

func (s *QueryCreateTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQueryCreateTable(s)
	}
}

func (s *QueryCreateTableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQueryCreateTable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_table() (localctx ICreate_tableContext) {
	localctx = NewCreate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MySqlParserRULE_create_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1026)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCopyCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(948)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(949)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(952)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(954)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(953)
				p.If_not_exists()
			}

		}
		{
			p.SetState(956)
			p.Table_name()
		}
		p.SetState(964)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLIKE:
			{
				p.SetState(957)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(958)
				p.Table_name()
			}

		case MySqlParserLR_BRACKET:
			{
				p.SetState(959)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(960)
				p.Match(MySqlParserLIKE)
			}
			{
				p.SetState(961)
				p.Table_name()
			}
			{
				p.SetState(962)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 2:
		localctx = NewQueryCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(966)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(967)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(970)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(972)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(971)
				p.If_not_exists()
			}

		}
		{
			p.SetState(974)
			p.Table_name()
		}
		p.SetState(976)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(975)
				p.Column_def_table_constraints()
			}

		}
		p.SetState(988)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER || _la == MySqlParserCOLLATE || _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-255)&-(0x1f+1)) == 0 && ((1<<uint((_la-255)))&((1<<(MySqlParserAUTO_INCREMENT-255))|(1<<(MySqlParserAVG_ROW_LENGTH-255))|(1<<(MySqlParserCHECKSUM-255))|(1<<(MySqlParserCOMMENT-255))|(1<<(MySqlParserCOMPRESSION-255))|(1<<(MySqlParserCONNECTION-255)))) != 0) || (((_la-289)&-(0x1f+1)) == 0 && ((1<<uint((_la-289)))&((1<<(MySqlParserDATA-289))|(1<<(MySqlParserDELAY_KEY_WRITE-289))|(1<<(MySqlParserENCRYPTION-289))|(1<<(MySqlParserENGINE-289)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-474)&-(0x1f+1)) == 0 && ((1<<uint((_la-474)))&((1<<(MySqlParserROW_FORMAT-474))|(1<<(MySqlParserSTATS_AUTO_RECALC-474))|(1<<(MySqlParserSTATS_PERSISTENT-474))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-474)))) != 0) || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET {
			{
				p.SetState(978)
				p.Table_option()
			}
			p.SetState(985)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCHARACTER || _la == MySqlParserCOLLATE || _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-255)&-(0x1f+1)) == 0 && ((1<<uint((_la-255)))&((1<<(MySqlParserAUTO_INCREMENT-255))|(1<<(MySqlParserAVG_ROW_LENGTH-255))|(1<<(MySqlParserCHECKSUM-255))|(1<<(MySqlParserCOMMENT-255))|(1<<(MySqlParserCOMPRESSION-255))|(1<<(MySqlParserCONNECTION-255)))) != 0) || (((_la-289)&-(0x1f+1)) == 0 && ((1<<uint((_la-289)))&((1<<(MySqlParserDATA-289))|(1<<(MySqlParserDELAY_KEY_WRITE-289))|(1<<(MySqlParserENCRYPTION-289))|(1<<(MySqlParserENGINE-289)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-474)&-(0x1f+1)) == 0 && ((1<<uint((_la-474)))&((1<<(MySqlParserROW_FORMAT-474))|(1<<(MySqlParserSTATS_AUTO_RECALC-474))|(1<<(MySqlParserSTATS_PERSISTENT-474))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-474)))) != 0) || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET || _la == MySqlParserCOMMA {
				p.SetState(980)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(979)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(982)
					p.Table_option()
				}

				p.SetState(987)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(991)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(990)
				p.Partition_options()
			}

		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
			p.SetState(993)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(997)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(996)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(999)
			p.Select_statement()
		}

	case 3:
		localctx = NewColCreateTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1001)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(1003)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTEMPORARY {
			{
				p.SetState(1002)
				p.Match(MySqlParserTEMPORARY)
			}

		}
		{
			p.SetState(1005)
			p.Match(MySqlParserTABLE)
		}
		p.SetState(1007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(1006)
				p.If_not_exists()
			}

		}
		{
			p.SetState(1009)
			p.Table_name()
		}
		{
			p.SetState(1010)
			p.Column_def_table_constraints()
		}
		p.SetState(1021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER || _la == MySqlParserCOLLATE || _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-255)&-(0x1f+1)) == 0 && ((1<<uint((_la-255)))&((1<<(MySqlParserAUTO_INCREMENT-255))|(1<<(MySqlParserAVG_ROW_LENGTH-255))|(1<<(MySqlParserCHECKSUM-255))|(1<<(MySqlParserCOMMENT-255))|(1<<(MySqlParserCOMPRESSION-255))|(1<<(MySqlParserCONNECTION-255)))) != 0) || (((_la-289)&-(0x1f+1)) == 0 && ((1<<uint((_la-289)))&((1<<(MySqlParserDATA-289))|(1<<(MySqlParserDELAY_KEY_WRITE-289))|(1<<(MySqlParserENCRYPTION-289))|(1<<(MySqlParserENGINE-289)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-474)&-(0x1f+1)) == 0 && ((1<<uint((_la-474)))&((1<<(MySqlParserROW_FORMAT-474))|(1<<(MySqlParserSTATS_AUTO_RECALC-474))|(1<<(MySqlParserSTATS_PERSISTENT-474))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-474)))) != 0) || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET {
			{
				p.SetState(1011)
				p.Table_option()
			}
			p.SetState(1018)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCHARACTER || _la == MySqlParserCOLLATE || _la == MySqlParserDEFAULT || _la == MySqlParserINDEX || _la == MySqlParserUNION || (((_la-255)&-(0x1f+1)) == 0 && ((1<<uint((_la-255)))&((1<<(MySqlParserAUTO_INCREMENT-255))|(1<<(MySqlParserAVG_ROW_LENGTH-255))|(1<<(MySqlParserCHECKSUM-255))|(1<<(MySqlParserCOMMENT-255))|(1<<(MySqlParserCOMPRESSION-255))|(1<<(MySqlParserCONNECTION-255)))) != 0) || (((_la-289)&-(0x1f+1)) == 0 && ((1<<uint((_la-289)))&((1<<(MySqlParserDATA-289))|(1<<(MySqlParserDELAY_KEY_WRITE-289))|(1<<(MySqlParserENCRYPTION-289))|(1<<(MySqlParserENGINE-289)))) != 0) || _la == MySqlParserINSERT_METHOD || _la == MySqlParserKEY_BLOCK_SIZE || _la == MySqlParserMAX_ROWS || _la == MySqlParserMIN_ROWS || _la == MySqlParserPACK_KEYS || _la == MySqlParserPASSWORD || (((_la-474)&-(0x1f+1)) == 0 && ((1<<uint((_la-474)))&((1<<(MySqlParserROW_FORMAT-474))|(1<<(MySqlParserSTATS_AUTO_RECALC-474))|(1<<(MySqlParserSTATS_PERSISTENT-474))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-474)))) != 0) || _la == MySqlParserTABLESPACE || _la == MySqlParserCHARSET || _la == MySqlParserCOMMA {
				p.SetState(1013)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserCOMMA {
					{
						p.SetState(1012)
						p.Match(MySqlParserCOMMA)
					}

				}
				{
					p.SetState(1015)
					p.Table_option()
				}

				p.SetState(1020)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1024)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(1023)
				p.Partition_options()
			}

		}

	}

	return localctx
}

// ICreate_tablespace_innodbContext is an interface to support dynamic dispatch.
type ICreate_tablespace_innodbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// GetFb_size returns the fb_size rule contexts.
	GetFb_size() IFilesize_literalContext

	// SetFb_size sets the fb_size rule contexts.
	SetFb_size(IFilesize_literalContext)

	// IsCreate_tablespace_innodbContext differentiates from other interfaces.
	IsCreate_tablespace_innodbContext()
}

type Create_tablespace_innodbContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	datafile antlr.Token
	fb_size  IFilesize_literalContext
}

func NewEmptyCreate_tablespace_innodbContext() *Create_tablespace_innodbContext {
	var p = new(Create_tablespace_innodbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_tablespace_innodb
	return p
}

func (*Create_tablespace_innodbContext) IsCreate_tablespace_innodbContext() {}

func NewCreate_tablespace_innodbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tablespace_innodbContext {
	var p = new(Create_tablespace_innodbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_tablespace_innodb

	return p
}

func (s *Create_tablespace_innodbContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tablespace_innodbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *Create_tablespace_innodbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *Create_tablespace_innodbContext) GetFb_size() IFilesize_literalContext { return s.fb_size }

func (s *Create_tablespace_innodbContext) SetFb_size(v IFilesize_literalContext) { s.fb_size = v }

func (s *Create_tablespace_innodbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_tablespace_innodbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Create_tablespace_innodbContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_tablespace_innodbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *Create_tablespace_innodbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *Create_tablespace_innodbContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Create_tablespace_innodbContext) FILE_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE_BLOCK_SIZE, 0)
}

func (s *Create_tablespace_innodbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Create_tablespace_innodbContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Create_tablespace_innodbContext) Filesize_literal() IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Create_tablespace_innodbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tablespace_innodbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tablespace_innodbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_tablespace_innodb(s)
	}
}

func (s *Create_tablespace_innodbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_tablespace_innodb(s)
	}
}

func (s *Create_tablespace_innodbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_tablespace_innodb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_tablespace_innodb() (localctx ICreate_tablespace_innodbContext) {
	localctx = NewCreate_tablespace_innodbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MySqlParserRULE_create_tablespace_innodb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1028)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1029)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1030)
		p.Id_()
	}
	{
		p.SetState(1031)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1032)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1033)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*Create_tablespace_innodbContext).datafile = _m
	}
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFILE_BLOCK_SIZE {
		{
			p.SetState(1034)
			p.Match(MySqlParserFILE_BLOCK_SIZE)
		}
		{
			p.SetState(1035)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(1036)

			var _x = p.Filesize_literal()

			localctx.(*Create_tablespace_innodbContext).fb_size = _x
		}

	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(1039)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1041)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1040)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1043)
			p.Engine_name()
		}

	}

	return localctx
}

// ICreate_tablespace_ndbContext is an interface to support dynamic dispatch.
type ICreate_tablespace_ndbContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetDatafile returns the datafile token.
	GetDatafile() antlr.Token

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// SetDatafile sets the datafile token.
	SetDatafile(antlr.Token)

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// GetExtent_size returns the extent_size rule contexts.
	GetExtent_size() IFilesize_literalContext

	// GetInitial_size returns the initial_size rule contexts.
	GetInitial_size() IFilesize_literalContext

	// GetAutoextend_size returns the autoextend_size rule contexts.
	GetAutoextend_size() IFilesize_literalContext

	// GetMax_size returns the max_size rule contexts.
	GetMax_size() IFilesize_literalContext

	// SetExtent_size sets the extent_size rule contexts.
	SetExtent_size(IFilesize_literalContext)

	// SetInitial_size sets the initial_size rule contexts.
	SetInitial_size(IFilesize_literalContext)

	// SetAutoextend_size sets the autoextend_size rule contexts.
	SetAutoextend_size(IFilesize_literalContext)

	// SetMax_size sets the max_size rule contexts.
	SetMax_size(IFilesize_literalContext)

	// IsCreate_tablespace_ndbContext differentiates from other interfaces.
	IsCreate_tablespace_ndbContext()
}

type Create_tablespace_ndbContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	datafile        antlr.Token
	extent_size     IFilesize_literalContext
	initial_size    IFilesize_literalContext
	autoextend_size IFilesize_literalContext
	max_size        IFilesize_literalContext
	comment         antlr.Token
}

func NewEmptyCreate_tablespace_ndbContext() *Create_tablespace_ndbContext {
	var p = new(Create_tablespace_ndbContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_tablespace_ndb
	return p
}

func (*Create_tablespace_ndbContext) IsCreate_tablespace_ndbContext() {}

func NewCreate_tablespace_ndbContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_tablespace_ndbContext {
	var p = new(Create_tablespace_ndbContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_tablespace_ndb

	return p
}

func (s *Create_tablespace_ndbContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_tablespace_ndbContext) GetDatafile() antlr.Token { return s.datafile }

func (s *Create_tablespace_ndbContext) GetComment() antlr.Token { return s.comment }

func (s *Create_tablespace_ndbContext) SetDatafile(v antlr.Token) { s.datafile = v }

func (s *Create_tablespace_ndbContext) SetComment(v antlr.Token) { s.comment = v }

func (s *Create_tablespace_ndbContext) GetExtent_size() IFilesize_literalContext { return s.extent_size }

func (s *Create_tablespace_ndbContext) GetInitial_size() IFilesize_literalContext {
	return s.initial_size
}

func (s *Create_tablespace_ndbContext) GetAutoextend_size() IFilesize_literalContext {
	return s.autoextend_size
}

func (s *Create_tablespace_ndbContext) GetMax_size() IFilesize_literalContext { return s.max_size }

func (s *Create_tablespace_ndbContext) SetExtent_size(v IFilesize_literalContext) { s.extent_size = v }

func (s *Create_tablespace_ndbContext) SetInitial_size(v IFilesize_literalContext) { s.initial_size = v }

func (s *Create_tablespace_ndbContext) SetAutoextend_size(v IFilesize_literalContext) {
	s.autoextend_size = v
}

func (s *Create_tablespace_ndbContext) SetMax_size(v IFilesize_literalContext) { s.max_size = v }

func (s *Create_tablespace_ndbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_tablespace_ndbContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Create_tablespace_ndbContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Create_tablespace_ndbContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_tablespace_ndbContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *Create_tablespace_ndbContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *Create_tablespace_ndbContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *Create_tablespace_ndbContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *Create_tablespace_ndbContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *Create_tablespace_ndbContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Create_tablespace_ndbContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Create_tablespace_ndbContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Create_tablespace_ndbContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Create_tablespace_ndbContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *Create_tablespace_ndbContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *Create_tablespace_ndbContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *Create_tablespace_ndbContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *Create_tablespace_ndbContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *Create_tablespace_ndbContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *Create_tablespace_ndbContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Create_tablespace_ndbContext) AllFilesize_literal() []IFilesize_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem())
	var tst = make([]IFilesize_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFilesize_literalContext)
		}
	}

	return tst
}

func (s *Create_tablespace_ndbContext) Filesize_literal(i int) IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Create_tablespace_ndbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_tablespace_ndbContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_tablespace_ndbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_tablespace_ndb(s)
	}
}

func (s *Create_tablespace_ndbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_tablespace_ndb(s)
	}
}

func (s *Create_tablespace_ndbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_tablespace_ndb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_tablespace_ndb() (localctx ICreate_tablespace_ndbContext) {
	localctx = NewCreate_tablespace_ndbContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MySqlParserRULE_create_tablespace_ndb)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1046)
		p.Match(MySqlParserCREATE)
	}
	{
		p.SetState(1047)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(1048)
		p.Id_()
	}
	{
		p.SetState(1049)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1050)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(1051)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*Create_tablespace_ndbContext).datafile = _m
	}
	{
		p.SetState(1052)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(1053)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(1054)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(1055)
		p.Id_()
	}
	p.SetState(1061)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENT_SIZE {
		{
			p.SetState(1056)
			p.Match(MySqlParserEXTENT_SIZE)
		}
		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1057)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1060)

			var _x = p.Filesize_literal()

			localctx.(*Create_tablespace_ndbContext).extent_size = _x
		}

	}
	p.SetState(1068)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(1063)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(1065)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1064)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1067)

			var _x = p.Filesize_literal()

			localctx.(*Create_tablespace_ndbContext).initial_size = _x
		}

	}
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAUTOEXTEND_SIZE {
		{
			p.SetState(1070)
			p.Match(MySqlParserAUTOEXTEND_SIZE)
		}
		p.SetState(1072)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1071)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1074)

			var _x = p.Filesize_literal()

			localctx.(*Create_tablespace_ndbContext).autoextend_size = _x
		}

	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMAX_SIZE {
		{
			p.SetState(1077)
			p.Match(MySqlParserMAX_SIZE)
		}
		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1078)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1081)

			var _x = p.Filesize_literal()

			localctx.(*Create_tablespace_ndbContext).max_size = _x
		}

	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(1084)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(1086)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1085)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1088)
			p.Id_()
		}

	}
	p.SetState(1092)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(1091)
			p.Match(MySqlParserWAIT)
		}

	}
	p.SetState(1099)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1094)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1096)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1095)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1098)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Create_tablespace_ndbContext).comment = _m
		}

	}
	{
		p.SetState(1101)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(1103)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(1102)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(1105)
		p.Engine_name()
	}

	return localctx
}

// ICreate_triggerContext is an interface to support dynamic dispatch.
type ICreate_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetTrigger_time returns the trigger_time token.
	GetTrigger_time() antlr.Token

	// GetTrigger_event returns the trigger_event token.
	GetTrigger_event() antlr.Token

	// SetTrigger_time sets the trigger_time token.
	SetTrigger_time(antlr.Token)

	// SetTrigger_event sets the trigger_event token.
	SetTrigger_event(antlr.Token)

	// GetThis_trigger returns the this_trigger rule contexts.
	GetThis_trigger() IFull_idContext

	// GetOther_trigger returns the other_trigger rule contexts.
	GetOther_trigger() IFull_idContext

	// SetThis_trigger sets the this_trigger rule contexts.
	SetThis_trigger(IFull_idContext)

	// SetOther_trigger sets the other_trigger rule contexts.
	SetOther_trigger(IFull_idContext)

	// IsCreate_triggerContext differentiates from other interfaces.
	IsCreate_triggerContext()
}

type Create_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	this_trigger  IFull_idContext
	trigger_time  antlr.Token
	trigger_event antlr.Token
	other_trigger IFull_idContext
}

func NewEmptyCreate_triggerContext() *Create_triggerContext {
	var p = new(Create_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_trigger
	return p
}

func (*Create_triggerContext) IsCreate_triggerContext() {}

func NewCreate_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_triggerContext {
	var p = new(Create_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_trigger

	return p
}

func (s *Create_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_triggerContext) GetTrigger_time() antlr.Token { return s.trigger_time }

func (s *Create_triggerContext) GetTrigger_event() antlr.Token { return s.trigger_event }

func (s *Create_triggerContext) SetTrigger_time(v antlr.Token) { s.trigger_time = v }

func (s *Create_triggerContext) SetTrigger_event(v antlr.Token) { s.trigger_event = v }

func (s *Create_triggerContext) GetThis_trigger() IFull_idContext { return s.this_trigger }

func (s *Create_triggerContext) GetOther_trigger() IFull_idContext { return s.other_trigger }

func (s *Create_triggerContext) SetThis_trigger(v IFull_idContext) { s.this_trigger = v }

func (s *Create_triggerContext) SetOther_trigger(v IFull_idContext) { s.other_trigger = v }

func (s *Create_triggerContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *Create_triggerContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Create_triggerContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Create_triggerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Create_triggerContext) EACH() antlr.TerminalNode {
	return s.GetToken(MySqlParserEACH, 0)
}

func (s *Create_triggerContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *Create_triggerContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Create_triggerContext) AllFull_id() []IFull_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFull_idContext)(nil)).Elem())
	var tst = make([]IFull_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFull_idContext)
		}
	}

	return tst
}

func (s *Create_triggerContext) Full_id(i int) IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Create_triggerContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *Create_triggerContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *Create_triggerContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *Create_triggerContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *Create_triggerContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *Create_triggerContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Create_triggerContext) FOLLOWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOLLOWS, 0)
}

func (s *Create_triggerContext) PRECEDES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRECEDES, 0)
}

func (s *Create_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_trigger(s)
	}
}

func (s *Create_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_trigger(s)
	}
}

func (s *Create_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_trigger() (localctx ICreate_triggerContext) {
	localctx = NewCreate_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MySqlParserRULE_create_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1107)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1109)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1108)
			p.Owner_statement()
		}

	}
	{
		p.SetState(1111)
		p.Match(MySqlParserTRIGGER)
	}
	{
		p.SetState(1112)

		var _x = p.Full_id()

		localctx.(*Create_triggerContext).this_trigger = _x
	}
	p.SetState(1113)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Create_triggerContext).trigger_time = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserBEFORE || _la == MySqlParserAFTER) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Create_triggerContext).trigger_time = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(1114)

	var _lt = p.GetTokenStream().LT(1)

	localctx.(*Create_triggerContext).trigger_event = _lt

	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserDELETE || _la == MySqlParserINSERT || _la == MySqlParserUPDATE) {
		var _ri = p.GetErrorHandler().RecoverInline(p)

		localctx.(*Create_triggerContext).trigger_event = _ri
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(1115)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(1116)
		p.Table_name()
	}
	{
		p.SetState(1117)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(1118)
		p.Match(MySqlParserEACH)
	}
	{
		p.SetState(1119)
		p.Match(MySqlParserROW)
	}
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOLLOWS || _la == MySqlParserPRECEDES {
		p.SetState(1120)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFOLLOWS || _la == MySqlParserPRECEDES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1121)

			var _x = p.Full_id()

			localctx.(*Create_triggerContext).other_trigger = _x
		}

	}
	{
		p.SetState(1124)
		p.Routine_body()
	}

	return localctx
}

// ICreate_viewContext is an interface to support dynamic dispatch.
type ICreate_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlg_type returns the alg_type token.
	GetAlg_type() antlr.Token

	// GetSec_context returns the sec_context token.
	GetSec_context() antlr.Token

	// GetCheck_option returns the check_option token.
	GetCheck_option() antlr.Token

	// SetAlg_type sets the alg_type token.
	SetAlg_type(antlr.Token)

	// SetSec_context sets the sec_context token.
	SetSec_context(antlr.Token)

	// SetCheck_option sets the check_option token.
	SetCheck_option(antlr.Token)

	// IsCreate_viewContext differentiates from other interfaces.
	IsCreate_viewContext()
}

type Create_viewContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	alg_type     antlr.Token
	sec_context  antlr.Token
	check_option antlr.Token
}

func NewEmptyCreate_viewContext() *Create_viewContext {
	var p = new(Create_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_view
	return p
}

func (*Create_viewContext) IsCreate_viewContext() {}

func NewCreate_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_viewContext {
	var p = new(Create_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_view

	return p
}

func (s *Create_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_viewContext) GetAlg_type() antlr.Token { return s.alg_type }

func (s *Create_viewContext) GetSec_context() antlr.Token { return s.sec_context }

func (s *Create_viewContext) GetCheck_option() antlr.Token { return s.check_option }

func (s *Create_viewContext) SetAlg_type(v antlr.Token) { s.alg_type = v }

func (s *Create_viewContext) SetSec_context(v antlr.Token) { s.sec_context = v }

func (s *Create_viewContext) SetCheck_option(v antlr.Token) { s.check_option = v }

func (s *Create_viewContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *Create_viewContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Create_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *Create_viewContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Create_viewContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *Create_viewContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *Create_viewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Create_viewContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Create_viewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *Create_viewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *Create_viewContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Create_viewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Create_viewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *Create_viewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *Create_viewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *Create_viewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *Create_viewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *Create_viewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *Create_viewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *Create_viewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *Create_viewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Create_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_view(s)
	}
}

func (s *Create_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_view(s)
	}
}

func (s *Create_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_view(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_view() (localctx ICreate_viewContext) {
	localctx = NewCreate_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MySqlParserRULE_create_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1126)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOR {
		{
			p.SetState(1127)
			p.Match(MySqlParserOR)
		}
		{
			p.SetState(1128)
			p.Match(MySqlParserREPLACE)
		}

	}
	p.SetState(1134)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(1131)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(1132)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		p.SetState(1133)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_viewContext).alg_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_viewContext).alg_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1137)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1136)
			p.Owner_statement()
		}

	}
	p.SetState(1142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(1139)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1140)
			p.Match(MySqlParserSECURITY)
		}
		p.SetState(1141)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Create_viewContext).sec_context = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Create_viewContext).sec_context = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(1144)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(1145)
		p.Full_id()
	}
	p.SetState(1150)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(1146)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1147)
			p.Id_list()
		}
		{
			p.SetState(1148)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(1152)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(1153)
		p.Select_statement()
	}
	p.SetState(1160)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(1154)
			p.Match(MySqlParserWITH)
		}
		p.SetState(1156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			p.SetState(1155)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Create_viewContext).check_option = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Create_viewContext).check_option = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(1158)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1159)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// ICreate_database_optionContext is an interface to support dynamic dispatch.
type ICreate_database_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_database_optionContext differentiates from other interfaces.
	IsCreate_database_optionContext()
}

type Create_database_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_database_optionContext() *Create_database_optionContext {
	var p = new(Create_database_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_database_option
	return p
}

func (*Create_database_optionContext) IsCreate_database_optionContext() {}

func NewCreate_database_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_database_optionContext {
	var p = new(Create_database_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_database_option

	return p
}

func (s *Create_database_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_database_optionContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *Create_database_optionContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Create_database_optionContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *Create_database_optionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *Create_database_optionContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *Create_database_optionContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *Create_database_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_database_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_database_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_database_option(s)
	}
}

func (s *Create_database_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_database_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_database_option() (localctx ICreate_database_optionContext) {
	localctx = NewCreate_database_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MySqlParserRULE_create_database_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1179)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1162)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1165)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(1166)
			p.Match(MySqlParserSET)
		}
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1167)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1170)
			p.Charset_name()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1171)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1174)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1175)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1178)
			p.Collation_name()
		}

	}

	return localctx
}

// IOwner_statementContext is an interface to support dynamic dispatch.
type IOwner_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOwner_statementContext differentiates from other interfaces.
	IsOwner_statementContext()
}

type Owner_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOwner_statementContext() *Owner_statementContext {
	var p = new(Owner_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_owner_statement
	return p
}

func (*Owner_statementContext) IsOwner_statementContext() {}

func NewOwner_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Owner_statementContext {
	var p = new(Owner_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_owner_statement

	return p
}

func (s *Owner_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Owner_statementContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *Owner_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Owner_statementContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *Owner_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Owner_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Owner_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOwner_statement(s)
	}
}

func (s *Owner_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOwner_statement(s)
	}
}

func (s *Owner_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOwner_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Owner_statement() (localctx IOwner_statementContext) {
	localctx = NewOwner_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MySqlParserRULE_owner_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1181)
		p.Match(MySqlParserDEFINER)
	}
	{
		p.SetState(1182)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(1189)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_USER_NAME:
		{
			p.SetState(1183)
			p.User_name()
		}

	case MySqlParserCURRENT_USER:
		{
			p.SetState(1184)
			p.Match(MySqlParserCURRENT_USER)
		}
		p.SetState(1187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(1185)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1186)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISchedule_expressionContext is an interface to support dynamic dispatch.
type ISchedule_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchedule_expressionContext differentiates from other interfaces.
	IsSchedule_expressionContext()
}

type Schedule_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchedule_expressionContext() *Schedule_expressionContext {
	var p = new(Schedule_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_schedule_expression
	return p
}

func (*Schedule_expressionContext) IsSchedule_expressionContext() {}

func NewSchedule_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Schedule_expressionContext {
	var p = new(Schedule_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_schedule_expression

	return p
}

func (s *Schedule_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Schedule_expressionContext) CopyFrom(ctx *Schedule_expressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Schedule_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Schedule_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type PreciseScheduleContext struct {
	*Schedule_expressionContext
}

func NewPreciseScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PreciseScheduleContext {
	var p = new(PreciseScheduleContext)

	p.Schedule_expressionContext = NewEmptySchedule_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Schedule_expressionContext))

	return p
}

func (s *PreciseScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PreciseScheduleContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *PreciseScheduleContext) Timestamp_value() ITimestamp_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestamp_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimestamp_valueContext)
}

func (s *PreciseScheduleContext) AllInterval_expr() []IInterval_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterval_exprContext)(nil)).Elem())
	var tst = make([]IInterval_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterval_exprContext)
		}
	}

	return tst
}

func (s *PreciseScheduleContext) Interval_expr(i int) IInterval_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterval_exprContext)
}

func (s *PreciseScheduleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPreciseSchedule(s)
	}
}

func (s *PreciseScheduleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPreciseSchedule(s)
	}
}

func (s *PreciseScheduleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPreciseSchedule(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntervalScheduleContext struct {
	*Schedule_expressionContext
	startts         ITimestamp_valueContext
	_interval_expr  IInterval_exprContext
	start_intervals []IInterval_exprContext
	endts           ITimestamp_valueContext
	end_intervals   []IInterval_exprContext
}

func NewIntervalScheduleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalScheduleContext {
	var p = new(IntervalScheduleContext)

	p.Schedule_expressionContext = NewEmptySchedule_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Schedule_expressionContext))

	return p
}

func (s *IntervalScheduleContext) GetStartts() ITimestamp_valueContext { return s.startts }

func (s *IntervalScheduleContext) Get_interval_expr() IInterval_exprContext { return s._interval_expr }

func (s *IntervalScheduleContext) GetEndts() ITimestamp_valueContext { return s.endts }

func (s *IntervalScheduleContext) SetStartts(v ITimestamp_valueContext) { s.startts = v }

func (s *IntervalScheduleContext) Set_interval_expr(v IInterval_exprContext) { s._interval_expr = v }

func (s *IntervalScheduleContext) SetEndts(v ITimestamp_valueContext) { s.endts = v }

func (s *IntervalScheduleContext) GetStart_intervals() []IInterval_exprContext {
	return s.start_intervals
}

func (s *IntervalScheduleContext) GetEnd_intervals() []IInterval_exprContext { return s.end_intervals }

func (s *IntervalScheduleContext) SetStart_intervals(v []IInterval_exprContext) { s.start_intervals = v }

func (s *IntervalScheduleContext) SetEnd_intervals(v []IInterval_exprContext) { s.end_intervals = v }

func (s *IntervalScheduleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalScheduleContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *IntervalScheduleContext) Interval_type() IInterval_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_typeContext)
}

func (s *IntervalScheduleContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *IntervalScheduleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalScheduleContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *IntervalScheduleContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *IntervalScheduleContext) AllTimestamp_value() []ITimestamp_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITimestamp_valueContext)(nil)).Elem())
	var tst = make([]ITimestamp_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITimestamp_valueContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) Timestamp_value(i int) ITimestamp_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimestamp_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITimestamp_valueContext)
}

func (s *IntervalScheduleContext) AllInterval_expr() []IInterval_exprContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterval_exprContext)(nil)).Elem())
	var tst = make([]IInterval_exprContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterval_exprContext)
		}
	}

	return tst
}

func (s *IntervalScheduleContext) Interval_expr(i int) IInterval_exprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_exprContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterval_exprContext)
}

func (s *IntervalScheduleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalSchedule(s)
	}
}

func (s *IntervalScheduleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalSchedule(s)
	}
}

func (s *IntervalScheduleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalSchedule(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Schedule_expression() (localctx ISchedule_expressionContext) {
	localctx = NewSchedule_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MySqlParserRULE_schedule_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1225)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAT:
		localctx = NewPreciseScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1191)
			p.Match(MySqlParserAT)
		}
		{
			p.SetState(1192)
			p.Timestamp_value()
		}
		p.SetState(1196)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserPLUS {
			{
				p.SetState(1193)
				p.Interval_expr()
			}

			p.SetState(1198)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserEVERY:
		localctx = NewIntervalScheduleContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1199)
			p.Match(MySqlParserEVERY)
		}
		p.SetState(1202)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1200)
				p.Decimal_literal()
			}

		case 2:
			{
				p.SetState(1201)
				p.expression(0)
			}

		}
		{
			p.SetState(1204)
			p.Interval_type()
		}
		p.SetState(1213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTARTS {
			{
				p.SetState(1205)
				p.Match(MySqlParserSTARTS)
			}
			{
				p.SetState(1206)

				var _x = p.Timestamp_value()

				localctx.(*IntervalScheduleContext).startts = _x
			}
			p.SetState(1210)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1207)

					var _x = p.Interval_expr()

					localctx.(*IntervalScheduleContext)._interval_expr = _x
				}
				localctx.(*IntervalScheduleContext).start_intervals = append(localctx.(*IntervalScheduleContext).start_intervals, localctx.(*IntervalScheduleContext)._interval_expr)

				p.SetState(1212)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserENDS {
			{
				p.SetState(1215)
				p.Match(MySqlParserENDS)
			}
			{
				p.SetState(1216)

				var _x = p.Timestamp_value()

				localctx.(*IntervalScheduleContext).endts = _x
			}
			p.SetState(1220)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserPLUS {
				{
					p.SetState(1217)

					var _x = p.Interval_expr()

					localctx.(*IntervalScheduleContext)._interval_expr = _x
				}
				localctx.(*IntervalScheduleContext).end_intervals = append(localctx.(*IntervalScheduleContext).end_intervals, localctx.(*IntervalScheduleContext)._interval_expr)

				p.SetState(1222)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITimestamp_valueContext is an interface to support dynamic dispatch.
type ITimestamp_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimestamp_valueContext differentiates from other interfaces.
	IsTimestamp_valueContext()
}

type Timestamp_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimestamp_valueContext() *Timestamp_valueContext {
	var p = new(Timestamp_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_timestamp_value
	return p
}

func (*Timestamp_valueContext) IsTimestamp_valueContext() {}

func NewTimestamp_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Timestamp_valueContext {
	var p = new(Timestamp_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_timestamp_value

	return p
}

func (s *Timestamp_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Timestamp_valueContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *Timestamp_valueContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *Timestamp_valueContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Timestamp_valueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Timestamp_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Timestamp_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Timestamp_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTimestamp_value(s)
	}
}

func (s *Timestamp_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTimestamp_value(s)
	}
}

func (s *Timestamp_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTimestamp_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Timestamp_value() (localctx ITimestamp_valueContext) {
	localctx = NewTimestamp_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MySqlParserRULE_timestamp_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1231)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1227)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1228)
			p.String_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1229)
			p.Decimal_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1230)
			p.expression(0)
		}

	}

	return localctx
}

// IInterval_exprContext is an interface to support dynamic dispatch.
type IInterval_exprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterval_exprContext differentiates from other interfaces.
	IsInterval_exprContext()
}

type Interval_exprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_exprContext() *Interval_exprContext {
	var p = new(Interval_exprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_interval_expr
	return p
}

func (*Interval_exprContext) IsInterval_exprContext() {}

func NewInterval_exprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_exprContext {
	var p = new(Interval_exprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_interval_expr

	return p
}

func (s *Interval_exprContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_exprContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *Interval_exprContext) Interval_type() IInterval_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_typeContext)
}

func (s *Interval_exprContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Interval_exprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Interval_exprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_exprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interval_exprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInterval_expr(s)
	}
}

func (s *Interval_exprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInterval_expr(s)
	}
}

func (s *Interval_exprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInterval_expr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Interval_expr() (localctx IInterval_exprContext) {
	localctx = NewInterval_exprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MySqlParserRULE_interval_expr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1233)
		p.Match(MySqlParserPLUS)
	}
	{
		p.SetState(1234)
		p.Match(MySqlParserINTERVAL)
	}
	p.SetState(1237)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1235)
			p.Decimal_literal()
		}

	case 2:
		{
			p.SetState(1236)
			p.expression(0)
		}

	}
	{
		p.SetState(1239)
		p.Interval_type()
	}

	return localctx
}

// IInterval_typeContext is an interface to support dynamic dispatch.
type IInterval_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterval_typeContext differentiates from other interfaces.
	IsInterval_typeContext()
}

type Interval_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_typeContext() *Interval_typeContext {
	var p = new(Interval_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_interval_type
	return p
}

func (*Interval_typeContext) IsInterval_typeContext() {}

func NewInterval_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_typeContext {
	var p = new(Interval_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_interval_type

	return p
}

func (s *Interval_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_typeContext) Interval_type_base() IInterval_type_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_type_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_type_baseContext)
}

func (s *Interval_typeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *Interval_typeContext) YEAR_MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR_MONTH, 0)
}

func (s *Interval_typeContext) DAY_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_HOUR, 0)
}

func (s *Interval_typeContext) DAY_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MINUTE, 0)
}

func (s *Interval_typeContext) DAY_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_SECOND, 0)
}

func (s *Interval_typeContext) HOUR_MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MINUTE, 0)
}

func (s *Interval_typeContext) HOUR_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_SECOND, 0)
}

func (s *Interval_typeContext) MINUTE_SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_SECOND, 0)
}

func (s *Interval_typeContext) SECOND_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND_MICROSECOND, 0)
}

func (s *Interval_typeContext) MINUTE_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE_MICROSECOND, 0)
}

func (s *Interval_typeContext) HOUR_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR_MICROSECOND, 0)
}

func (s *Interval_typeContext) DAY_MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY_MICROSECOND, 0)
}

func (s *Interval_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interval_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInterval_type(s)
	}
}

func (s *Interval_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInterval_type(s)
	}
}

func (s *Interval_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInterval_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Interval_type() (localctx IInterval_typeContext) {
	localctx = NewInterval_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MySqlParserRULE_interval_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1254)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1241)
			p.Interval_type_base()
		}

	case MySqlParserYEAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1242)
			p.Match(MySqlParserYEAR)
		}

	case MySqlParserYEAR_MONTH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1243)
			p.Match(MySqlParserYEAR_MONTH)
		}

	case MySqlParserDAY_HOUR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1244)
			p.Match(MySqlParserDAY_HOUR)
		}

	case MySqlParserDAY_MINUTE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1245)
			p.Match(MySqlParserDAY_MINUTE)
		}

	case MySqlParserDAY_SECOND:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1246)
			p.Match(MySqlParserDAY_SECOND)
		}

	case MySqlParserHOUR_MINUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1247)
			p.Match(MySqlParserHOUR_MINUTE)
		}

	case MySqlParserHOUR_SECOND:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1248)
			p.Match(MySqlParserHOUR_SECOND)
		}

	case MySqlParserMINUTE_SECOND:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1249)
			p.Match(MySqlParserMINUTE_SECOND)
		}

	case MySqlParserSECOND_MICROSECOND:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1250)
			p.Match(MySqlParserSECOND_MICROSECOND)
		}

	case MySqlParserMINUTE_MICROSECOND:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1251)
			p.Match(MySqlParserMINUTE_MICROSECOND)
		}

	case MySqlParserHOUR_MICROSECOND:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1252)
			p.Match(MySqlParserHOUR_MICROSECOND)
		}

	case MySqlParserDAY_MICROSECOND:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1253)
			p.Match(MySqlParserDAY_MICROSECOND)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndex_typeContext is an interface to support dynamic dispatch.
type IIndex_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_typeContext differentiates from other interfaces.
	IsIndex_typeContext()
}

type Index_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_typeContext() *Index_typeContext {
	var p = new(Index_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_type
	return p
}

func (*Index_typeContext) IsIndex_typeContext() {}

func NewIndex_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_typeContext {
	var p = new(Index_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_type

	return p
}

func (s *Index_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_typeContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *Index_typeContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *Index_typeContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *Index_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndex_type(s)
	}
}

func (s *Index_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndex_type(s)
	}
}

func (s *Index_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndex_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_type() (localctx IIndex_typeContext) {
	localctx = NewIndex_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MySqlParserRULE_index_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1256)
		p.Match(MySqlParserUSING)
	}
	p.SetState(1257)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserBTREE || _la == MySqlParserHASH) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IIndex_optionContext is an interface to support dynamic dispatch.
type IIndex_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_optionContext differentiates from other interfaces.
	IsIndex_optionContext()
}

type Index_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_optionContext() *Index_optionContext {
	var p = new(Index_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_option
	return p
}

func (*Index_optionContext) IsIndex_optionContext() {}

func NewIndex_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_optionContext {
	var p = new(Index_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_option

	return p
}

func (s *Index_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_optionContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *Index_optionContext) Filesize_literal() IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Index_optionContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *Index_optionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Index_optionContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *Index_optionContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Index_optionContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Index_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Index_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndex_option(s)
	}
}

func (s *Index_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndex_option(s)
	}
}

func (s *Index_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndex_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_option() (localctx IIndex_optionContext) {
	localctx = NewIndex_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MySqlParserRULE_index_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1270)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserKEY_BLOCK_SIZE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1259)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1260)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1263)
			p.Filesize_literal()
		}

	case MySqlParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1264)
			p.Index_type()
		}

	case MySqlParserWITH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1265)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(1266)
			p.Match(MySqlParserPARSER)
		}
		{
			p.SetState(1267)
			p.Id_()
		}

	case MySqlParserCOMMENT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1268)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1269)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProc_paramContext is an interface to support dynamic dispatch.
type IProc_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProc_paramContext differentiates from other interfaces.
	IsProc_paramContext()
}

type Proc_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProc_paramContext() *Proc_paramContext {
	var p = new(Proc_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_proc_param
	return p
}

func (*Proc_paramContext) IsProc_paramContext() {}

func NewProc_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Proc_paramContext {
	var p = new(Proc_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_proc_param

	return p
}

func (s *Proc_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Proc_paramContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Proc_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Proc_paramContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *Proc_paramContext) OUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUT, 0)
}

func (s *Proc_paramContext) INOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINOUT, 0)
}

func (s *Proc_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Proc_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Proc_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterProc_param(s)
	}
}

func (s *Proc_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitProc_param(s)
	}
}

func (s *Proc_paramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitProc_param(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Proc_param() (localctx IProc_paramContext) {
	localctx = NewProc_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MySqlParserRULE_proc_param)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1272)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserIN || _la == MySqlParserINOUT || _la == MySqlParserOUT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(1273)
		p.Id_()
	}
	{
		p.SetState(1274)
		p.Data_type()
	}

	return localctx
}

// IFunc_paramContext is an interface to support dynamic dispatch.
type IFunc_paramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunc_paramContext differentiates from other interfaces.
	IsFunc_paramContext()
}

type Func_paramContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunc_paramContext() *Func_paramContext {
	var p = new(Func_paramContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_func_param
	return p
}

func (*Func_paramContext) IsFunc_paramContext() {}

func NewFunc_paramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Func_paramContext {
	var p = new(Func_paramContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_func_param

	return p
}

func (s *Func_paramContext) GetParser() antlr.Parser { return s.parser }

func (s *Func_paramContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Func_paramContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Func_paramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Func_paramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Func_paramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunc_param(s)
	}
}

func (s *Func_paramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunc_param(s)
	}
}

func (s *Func_paramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunc_param(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Func_param() (localctx IFunc_paramContext) {
	localctx = NewFunc_paramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MySqlParserRULE_func_param)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1276)
		p.Id_()
	}
	{
		p.SetState(1277)
		p.Data_type()
	}

	return localctx
}

// IRoutine_characteristicContext is an interface to support dynamic dispatch.
type IRoutine_characteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutine_characteristicContext differentiates from other interfaces.
	IsRoutine_characteristicContext()
}

type Routine_characteristicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutine_characteristicContext() *Routine_characteristicContext {
	var p = new(Routine_characteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routine_characteristic
	return p
}

func (*Routine_characteristicContext) IsRoutine_characteristicContext() {}

func NewRoutine_characteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Routine_characteristicContext {
	var p = new(Routine_characteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routine_characteristic

	return p
}

func (s *Routine_characteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *Routine_characteristicContext) CopyFrom(ctx *Routine_characteristicContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Routine_characteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Routine_characteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RcSqllangContext struct {
	*Routine_characteristicContext
}

func NewRcSqllangContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RcSqllangContext {
	var p = new(RcSqllangContext)

	p.Routine_characteristicContext = NewEmptyRoutine_characteristicContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Routine_characteristicContext))

	return p
}

func (s *RcSqllangContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RcSqllangContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *RcSqllangContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RcSqllangContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRcSqllang(s)
	}
}

func (s *RcSqllangContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRcSqllang(s)
	}
}

func (s *RcSqllangContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRcSqllang(s)

	default:
		return t.VisitChildren(s)
	}
}

type RcSqldataContext struct {
	*Routine_characteristicContext
}

func NewRcSqldataContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RcSqldataContext {
	var p = new(RcSqldataContext)

	p.Routine_characteristicContext = NewEmptyRoutine_characteristicContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Routine_characteristicContext))

	return p
}

func (s *RcSqldataContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RcSqldataContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *RcSqldataContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RcSqldataContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *RcSqldataContext) READS() antlr.TerminalNode {
	return s.GetToken(MySqlParserREADS, 0)
}

func (s *RcSqldataContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *RcSqldataContext) MODIFIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFIES, 0)
}

func (s *RcSqldataContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRcSqldata(s)
	}
}

func (s *RcSqldataContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRcSqldata(s)
	}
}

func (s *RcSqldataContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRcSqldata(s)

	default:
		return t.VisitChildren(s)
	}
}

type RcCommentContext struct {
	*Routine_characteristicContext
}

func NewRcCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RcCommentContext {
	var p = new(RcCommentContext)

	p.Routine_characteristicContext = NewEmptyRoutine_characteristicContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Routine_characteristicContext))

	return p
}

func (s *RcCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RcCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *RcCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *RcCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRcComment(s)
	}
}

func (s *RcCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRcComment(s)
	}
}

func (s *RcCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRcComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type RcDetermContext struct {
	*Routine_characteristicContext
}

func NewRcDetermContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RcDetermContext {
	var p = new(RcDetermContext)

	p.Routine_characteristicContext = NewEmptyRoutine_characteristicContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Routine_characteristicContext))

	return p
}

func (s *RcDetermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RcDetermContext) DETERMINISTIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDETERMINISTIC, 0)
}

func (s *RcDetermContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RcDetermContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRcDeterm(s)
	}
}

func (s *RcDetermContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRcDeterm(s)
	}
}

func (s *RcDetermContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRcDeterm(s)

	default:
		return t.VisitChildren(s)
	}
}

type RcSecurestmtContext struct {
	*Routine_characteristicContext
	sec_context antlr.Token
}

func NewRcSecurestmtContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RcSecurestmtContext {
	var p = new(RcSecurestmtContext)

	p.Routine_characteristicContext = NewEmptyRoutine_characteristicContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Routine_characteristicContext))

	return p
}

func (s *RcSecurestmtContext) GetSec_context() antlr.Token { return s.sec_context }

func (s *RcSecurestmtContext) SetSec_context(v antlr.Token) { s.sec_context = v }

func (s *RcSecurestmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RcSecurestmtContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *RcSecurestmtContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *RcSecurestmtContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *RcSecurestmtContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *RcSecurestmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRcSecurestmt(s)
	}
}

func (s *RcSecurestmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRcSecurestmt(s)
	}
}

func (s *RcSecurestmtContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRcSecurestmt(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Routine_characteristic() (localctx IRoutine_characteristicContext) {
	localctx = NewRoutine_characteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MySqlParserRULE_routine_characteristic)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCOMMENT:
		localctx = NewRcCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1279)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1280)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserLANGUAGE:
		localctx = NewRcSqllangContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1281)
			p.Match(MySqlParserLANGUAGE)
		}
		{
			p.SetState(1282)
			p.Match(MySqlParserSQL)
		}

	case MySqlParserDETERMINISTIC, MySqlParserNOT:
		localctx = NewRcDetermContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1284)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(1283)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(1286)
			p.Match(MySqlParserDETERMINISTIC)
		}

	case MySqlParserMODIFIES, MySqlParserREADS, MySqlParserCONTAINS, MySqlParserNO:
		localctx = NewRcSqldataContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1297)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCONTAINS:
			{
				p.SetState(1287)
				p.Match(MySqlParserCONTAINS)
			}
			{
				p.SetState(1288)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserNO:
			{
				p.SetState(1289)
				p.Match(MySqlParserNO)
			}
			{
				p.SetState(1290)
				p.Match(MySqlParserSQL)
			}

		case MySqlParserREADS:
			{
				p.SetState(1291)
				p.Match(MySqlParserREADS)
			}
			{
				p.SetState(1292)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1293)
				p.Match(MySqlParserDATA)
			}

		case MySqlParserMODIFIES:
			{
				p.SetState(1294)
				p.Match(MySqlParserMODIFIES)
			}
			{
				p.SetState(1295)
				p.Match(MySqlParserSQL)
			}
			{
				p.SetState(1296)
				p.Match(MySqlParserDATA)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserSQL:
		localctx = NewRcSecurestmtContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1299)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(1300)
			p.Match(MySqlParserSECURITY)
		}
		p.SetState(1301)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*RcSecurestmtContext).sec_context = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*RcSecurestmtContext).sec_context = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IServer_optionContext is an interface to support dynamic dispatch.
type IServer_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsServer_optionContext differentiates from other interfaces.
	IsServer_optionContext()
}

type Server_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyServer_optionContext() *Server_optionContext {
	var p = new(Server_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_server_option
	return p
}

func (*Server_optionContext) IsServer_optionContext() {}

func NewServer_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Server_optionContext {
	var p = new(Server_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_server_option

	return p
}

func (s *Server_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Server_optionContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *Server_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Server_optionContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *Server_optionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *Server_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *Server_optionContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *Server_optionContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *Server_optionContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *Server_optionContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Server_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Server_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Server_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterServer_option(s)
	}
}

func (s *Server_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitServer_option(s)
	}
}

func (s *Server_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitServer_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Server_option() (localctx IServer_optionContext) {
	localctx = NewServer_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MySqlParserRULE_server_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1318)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserHOST:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1304)
			p.Match(MySqlParserHOST)
		}
		{
			p.SetState(1305)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserDATABASE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1306)
			p.Match(MySqlParserDATABASE)
		}
		{
			p.SetState(1307)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserUSER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1308)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(1309)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1310)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(1311)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSOCKET:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1312)
			p.Match(MySqlParserSOCKET)
		}
		{
			p.SetState(1313)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserOWNER:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1314)
			p.Match(MySqlParserOWNER)
		}
		{
			p.SetState(1315)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserPORT:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1316)
			p.Match(MySqlParserPORT)
		}
		{
			p.SetState(1317)
			p.Decimal_literal()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_def_table_constraintsContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintsContext differentiates from other interfaces.
	IsColumn_def_table_constraintsContext()
}

type Column_def_table_constraintsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintsContext() *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_column_def_table_constraints
	return p
}

func (*Column_def_table_constraintsContext) IsColumn_def_table_constraintsContext() {}

func NewColumn_def_table_constraintsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintsContext {
	var p = new(Column_def_table_constraintsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_column_def_table_constraints

	return p
}

func (s *Column_def_table_constraintsContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintsContext) AllColumn_def_table_constraint() []IColumn_def_table_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem())
	var tst = make([]IColumn_def_table_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_def_table_constraintContext)
		}
	}

	return tst
}

func (s *Column_def_table_constraintsContext) Column_def_table_constraint(i int) IColumn_def_table_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_def_table_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_def_table_constraintContext)
}

func (s *Column_def_table_constraintsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_def_table_constraintsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumn_def_table_constraints(s)
	}
}

func (s *Column_def_table_constraintsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumn_def_table_constraints(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Column_def_table_constraints() (localctx IColumn_def_table_constraintsContext) {
	localctx = NewColumn_def_table_constraintsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MySqlParserRULE_column_def_table_constraints)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1320)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1321)
		p.Column_def_table_constraint()
	}
	p.SetState(1326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1322)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1323)
			p.Column_def_table_constraint()
		}

		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1329)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IColumn_def_table_constraintContext is an interface to support dynamic dispatch.
type IColumn_def_table_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_def_table_constraintContext differentiates from other interfaces.
	IsColumn_def_table_constraintContext()
}

type Column_def_table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_def_table_constraintContext() *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_column_def_table_constraint
	return p
}

func (*Column_def_table_constraintContext) IsColumn_def_table_constraintContext() {}

func NewColumn_def_table_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_def_table_constraintContext {
	var p = new(Column_def_table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_column_def_table_constraint

	return p
}

func (s *Column_def_table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_def_table_constraintContext) CopyFrom(ctx *Column_def_table_constraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Column_def_table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_def_table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConstraintDefinitionContext struct {
	*Column_def_table_constraintContext
}

func NewConstraintDefinitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstraintDefinitionContext {
	var p = new(ConstraintDefinitionContext)

	p.Column_def_table_constraintContext = NewEmptyColumn_def_table_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Column_def_table_constraintContext))

	return p
}

func (s *ConstraintDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstraintDefinitionContext) Table_constraint() ITable_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_constraintContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_constraintContext)
}

func (s *ConstraintDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstraintDefinition(s)
	}
}

func (s *ConstraintDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstraintDefinition(s)
	}
}

func (s *ConstraintDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstraintDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColumnDefinitionContext struct {
	*Column_def_table_constraintContext
}

func NewColumnDefinitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnDefinitionContext {
	var p = new(ColumnDefinitionContext)

	p.Column_def_table_constraintContext = NewEmptyColumn_def_table_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Column_def_table_constraintContext))

	return p
}

func (s *ColumnDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnDefinitionContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ColumnDefinitionContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *ColumnDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumnDefinition(s)
	}
}

func (s *ColumnDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumnDefinition(s)
	}
}

func (s *ColumnDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumnDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexDefinitionContext struct {
	*Column_def_table_constraintContext
}

func NewIndexDefinitionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexDefinitionContext {
	var p = new(IndexDefinitionContext)

	p.Column_def_table_constraintContext = NewEmptyColumn_def_table_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Column_def_table_constraintContext))

	return p
}

func (s *IndexDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexDefinitionContext) Index_column_definition() IIndex_column_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_column_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_column_definitionContext)
}

func (s *IndexDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndexDefinition(s)
	}
}

func (s *IndexDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndexDefinition(s)
	}
}

func (s *IndexDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndexDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Column_def_table_constraint() (localctx IColumn_def_table_constraintContext) {
	localctx = NewColumn_def_table_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MySqlParserRULE_column_def_table_constraint)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1336)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		localctx = NewColumnDefinitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1331)
			p.Id_()
		}
		{
			p.SetState(1332)
			p.Column_definition()
		}

	case MySqlParserCHECK, MySqlParserCONSTRAINT, MySqlParserFOREIGN, MySqlParserPRIMARY, MySqlParserUNIQUE:
		localctx = NewConstraintDefinitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1334)
			p.Table_constraint()
		}

	case MySqlParserFULLTEXT, MySqlParserINDEX, MySqlParserKEY, MySqlParserSPATIAL:
		localctx = NewIndexDefinitionContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1335)
			p.Index_column_definition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IColumn_definitionContext is an interface to support dynamic dispatch.
type IColumn_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumn_definitionContext differentiates from other interfaces.
	IsColumn_definitionContext()
}

type Column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumn_definitionContext() *Column_definitionContext {
	var p = new(Column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_column_definition
	return p
}

func (*Column_definitionContext) IsColumn_definitionContext() {}

func NewColumn_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Column_definitionContext {
	var p = new(Column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_column_definition

	return p
}

func (s *Column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Column_definitionContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Column_definitionContext) AllSeparate_column_constraint() []ISeparate_column_constraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISeparate_column_constraintContext)(nil)).Elem())
	var tst = make([]ISeparate_column_constraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISeparate_column_constraintContext)
		}
	}

	return tst
}

func (s *Column_definitionContext) Separate_column_constraint(i int) ISeparate_column_constraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISeparate_column_constraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISeparate_column_constraintContext)
}

func (s *Column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Column_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColumn_definition(s)
	}
}

func (s *Column_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColumn_definition(s)
	}
}

func (s *Column_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColumn_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Column_definition() (localctx IColumn_definitionContext) {
	localctx = NewColumn_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MySqlParserRULE_column_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1338)
		p.Data_type()
	}
	p.SetState(1342)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDEFAULT || (((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(MySqlParserKEY-77))|(1<<(MySqlParserNOTNULL-77))|(1<<(MySqlParserNULL_LITERAL-77)))) != 0) || _la == MySqlParserPRIMARY || _la == MySqlParserREFERENCES || _la == MySqlParserUNIQUE || (((_la-255)&-(0x1f+1)) == 0 && ((1<<uint((_la-255)))&((1<<(MySqlParserAUTO_INCREMENT-255))|(1<<(MySqlParserCOLUMN_FORMAT-255))|(1<<(MySqlParserCOMMENT-255)))) != 0) || _la == MySqlParserSTORAGE || _la == MySqlParserNULL_SPEC_LITERAL {
		{
			p.SetState(1339)
			p.Separate_column_constraint()
		}

		p.SetState(1344)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISeparate_column_constraintContext is an interface to support dynamic dispatch.
type ISeparate_column_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSeparate_column_constraintContext differentiates from other interfaces.
	IsSeparate_column_constraintContext()
}

type Separate_column_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySeparate_column_constraintContext() *Separate_column_constraintContext {
	var p = new(Separate_column_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_separate_column_constraint
	return p
}

func (*Separate_column_constraintContext) IsSeparate_column_constraintContext() {}

func NewSeparate_column_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Separate_column_constraintContext {
	var p = new(Separate_column_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_separate_column_constraint

	return p
}

func (s *Separate_column_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Separate_column_constraintContext) CopyFrom(ctx *Separate_column_constraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Separate_column_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Separate_column_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ColConstrDfltContext struct {
	*Separate_column_constraintContext
}

func NewColConstrDfltContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrDfltContext {
	var p = new(ColConstrDfltContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrDfltContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrDfltContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *ColConstrDfltContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *ColConstrDfltContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrDflt(s)
	}
}

func (s *ColConstrDfltContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrDflt(s)
	}
}

func (s *ColConstrDfltContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrDflt(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrPKContext struct {
	*Separate_column_constraintContext
}

func NewColConstrPKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrPKContext {
	var p = new(ColConstrPKContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrPKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrPKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *ColConstrPKContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *ColConstrPKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrPK(s)
	}
}

func (s *ColConstrPKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrPK(s)
	}
}

func (s *ColConstrPKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrPK(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrAuIncContext struct {
	*Separate_column_constraintContext
}

func NewColConstrAuIncContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrAuIncContext {
	var p = new(ColConstrAuIncContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrAuIncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrAuIncContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *ColConstrAuIncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrAuInc(s)
	}
}

func (s *ColConstrAuIncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrAuInc(s)
	}
}

func (s *ColConstrAuIncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrAuInc(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrCommentContext struct {
	*Separate_column_constraintContext
}

func NewColConstrCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrCommentContext {
	var p = new(ColConstrCommentContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *ColConstrCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ColConstrCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrComment(s)
	}
}

func (s *ColConstrCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrComment(s)
	}
}

func (s *ColConstrCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrNullContext struct {
	*Separate_column_constraintContext
}

func NewColConstrNullContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrNullContext {
	var p = new(ColConstrNullContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrNullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrNullContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *ColConstrNullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrNull(s)
	}
}

func (s *ColConstrNullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrNull(s)
	}
}

func (s *ColConstrNullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrNull(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrFormContext struct {
	*Separate_column_constraintContext
	colformat antlr.Token
}

func NewColConstrFormContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrFormContext {
	var p = new(ColConstrFormContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrFormContext) GetColformat() antlr.Token { return s.colformat }

func (s *ColConstrFormContext) SetColformat(v antlr.Token) { s.colformat = v }

func (s *ColConstrFormContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrFormContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *ColConstrFormContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *ColConstrFormContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *ColConstrFormContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *ColConstrFormContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrForm(s)
	}
}

func (s *ColConstrFormContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrForm(s)
	}
}

func (s *ColConstrFormContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrForm(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrRefdefContext struct {
	*Separate_column_constraintContext
}

func NewColConstrRefdefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrRefdefContext {
	var p = new(ColConstrRefdefContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrRefdefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrRefdefContext) Reference_definition() IReference_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReference_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReference_definitionContext)
}

func (s *ColConstrRefdefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrRefdef(s)
	}
}

func (s *ColConstrRefdefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrRefdef(s)
	}
}

func (s *ColConstrRefdefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrRefdef(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrStorageContext struct {
	*Separate_column_constraintContext
	storageval antlr.Token
}

func NewColConstrStorageContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrStorageContext {
	var p = new(ColConstrStorageContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrStorageContext) GetStorageval() antlr.Token { return s.storageval }

func (s *ColConstrStorageContext) SetStorageval(v antlr.Token) { s.storageval = v }

func (s *ColConstrStorageContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrStorageContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *ColConstrStorageContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *ColConstrStorageContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *ColConstrStorageContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *ColConstrStorageContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrStorage(s)
	}
}

func (s *ColConstrStorageContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrStorage(s)
	}
}

func (s *ColConstrStorageContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrStorage(s)

	default:
		return t.VisitChildren(s)
	}
}

type ColConstrUKContext struct {
	*Separate_column_constraintContext
}

func NewColConstrUKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColConstrUKContext {
	var p = new(ColConstrUKContext)

	p.Separate_column_constraintContext = NewEmptySeparate_column_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Separate_column_constraintContext))

	return p
}

func (s *ColConstrUKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColConstrUKContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *ColConstrUKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *ColConstrUKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterColConstrUK(s)
	}
}

func (s *ColConstrUKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitColConstrUK(s)
	}
}

func (s *ColConstrUKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitColConstrUK(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Separate_column_constraint() (localctx ISeparate_column_constraintContext) {
	localctx = NewSeparate_column_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MySqlParserRULE_separate_column_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1364)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserNOTNULL, MySqlParserNULL_LITERAL, MySqlParserNULL_SPEC_LITERAL:
		localctx = NewColConstrNullContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1345)
			p.Null_notnull()
		}

	case MySqlParserDEFAULT:
		localctx = NewColConstrDfltContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1346)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(1347)
			p.Default_value()
		}

	case MySqlParserAUTO_INCREMENT:
		localctx = NewColConstrAuIncContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1348)
			p.Match(MySqlParserAUTO_INCREMENT)
		}

	case MySqlParserKEY, MySqlParserPRIMARY:
		localctx = NewColConstrPKContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1350)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIMARY {
			{
				p.SetState(1349)
				p.Match(MySqlParserPRIMARY)
			}

		}
		{
			p.SetState(1352)
			p.Match(MySqlParserKEY)
		}

	case MySqlParserUNIQUE:
		localctx = NewColConstrUKContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1353)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1355)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1354)
				p.Match(MySqlParserKEY)
			}

		}

	case MySqlParserCOMMENT:
		localctx = NewColConstrCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1357)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1358)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCOLUMN_FORMAT:
		localctx = NewColConstrFormContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1359)
			p.Match(MySqlParserCOLUMN_FORMAT)
		}
		p.SetState(1360)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ColConstrFormContext).colformat = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserDYNAMIC || _la == MySqlParserFIXED) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ColConstrFormContext).colformat = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserSTORAGE:
		localctx = NewColConstrStorageContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1361)
			p.Match(MySqlParserSTORAGE)
		}
		p.SetState(1362)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*ColConstrStorageContext).storageval = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*ColConstrStorageContext).storageval = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserREFERENCES:
		localctx = NewColConstrRefdefContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1363)
			p.Reference_definition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_constraintContext is an interface to support dynamic dispatch.
type ITable_constraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_constraintContext differentiates from other interfaces.
	IsTable_constraintContext()
}

type Table_constraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_constraintContext() *Table_constraintContext {
	var p = new(Table_constraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_constraint
	return p
}

func (*Table_constraintContext) IsTable_constraintContext() {}

func NewTable_constraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_constraintContext {
	var p = new(Table_constraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_constraint

	return p
}

func (s *Table_constraintContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_constraintContext) CopyFrom(ctx *Table_constraintContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Table_constraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_constraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TblConstCheckContext struct {
	*Table_constraintContext
}

func NewTblConstCheckContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblConstCheckContext {
	var p = new(TblConstCheckContext)

	p.Table_constraintContext = NewEmptyTable_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_constraintContext))

	return p
}

func (s *TblConstCheckContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblConstCheckContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *TblConstCheckContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TblConstCheckContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblConstCheck(s)
	}
}

func (s *TblConstCheckContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblConstCheck(s)
	}
}

func (s *TblConstCheckContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblConstCheck(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblConstrPKContext struct {
	*Table_constraintContext
	constr_name IId_Context
}

func NewTblConstrPKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblConstrPKContext {
	var p = new(TblConstrPKContext)

	p.Table_constraintContext = NewEmptyTable_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_constraintContext))

	return p
}

func (s *TblConstrPKContext) GetConstr_name() IId_Context { return s.constr_name }

func (s *TblConstrPKContext) SetConstr_name(v IId_Context) { s.constr_name = v }

func (s *TblConstrPKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblConstrPKContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *TblConstrPKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *TblConstrPKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *TblConstrPKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *TblConstrPKContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *TblConstrPKContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *TblConstrPKContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *TblConstrPKContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *TblConstrPKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblConstrPK(s)
	}
}

func (s *TblConstrPKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblConstrPK(s)
	}
}

func (s *TblConstrPKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblConstrPK(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblConstrUKContext struct {
	*Table_constraintContext
	constr_name IId_Context
	index_name  IId_Context
}

func NewTblConstrUKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblConstrUKContext {
	var p = new(TblConstrUKContext)

	p.Table_constraintContext = NewEmptyTable_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_constraintContext))

	return p
}

func (s *TblConstrUKContext) GetConstr_name() IId_Context { return s.constr_name }

func (s *TblConstrUKContext) GetIndex_name() IId_Context { return s.index_name }

func (s *TblConstrUKContext) SetConstr_name(v IId_Context) { s.constr_name = v }

func (s *TblConstrUKContext) SetIndex_name(v IId_Context) { s.index_name = v }

func (s *TblConstrUKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblConstrUKContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *TblConstrUKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *TblConstrUKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *TblConstrUKContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *TblConstrUKContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *TblConstrUKContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *TblConstrUKContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TblConstrUKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *TblConstrUKContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *TblConstrUKContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *TblConstrUKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblConstrUK(s)
	}
}

func (s *TblConstrUKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblConstrUK(s)
	}
}

func (s *TblConstrUKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblConstrUK(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblConstrFKContext struct {
	*Table_constraintContext
	constr_name IId_Context
	index_name  IId_Context
}

func NewTblConstrFKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblConstrFKContext {
	var p = new(TblConstrFKContext)

	p.Table_constraintContext = NewEmptyTable_constraintContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_constraintContext))

	return p
}

func (s *TblConstrFKContext) GetConstr_name() IId_Context { return s.constr_name }

func (s *TblConstrFKContext) GetIndex_name() IId_Context { return s.index_name }

func (s *TblConstrFKContext) SetConstr_name(v IId_Context) { s.constr_name = v }

func (s *TblConstrFKContext) SetIndex_name(v IId_Context) { s.index_name = v }

func (s *TblConstrFKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblConstrFKContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *TblConstrFKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *TblConstrFKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *TblConstrFKContext) Reference_definition() IReference_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReference_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReference_definitionContext)
}

func (s *TblConstrFKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *TblConstrFKContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *TblConstrFKContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *TblConstrFKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblConstrFK(s)
	}
}

func (s *TblConstrFKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblConstrFK(s)
	}
}

func (s *TblConstrFKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblConstrFK(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_constraint() (localctx ITable_constraintContext) {
	localctx = NewTable_constraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MySqlParserRULE_table_constraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 140, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTblConstrPKContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1370)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1366)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1368)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(1367)

					var _x = p.Id_()

					localctx.(*TblConstrPKContext).constr_name = _x
				}

			}

		}
		{
			p.SetState(1372)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(1373)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1375)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1374)
				p.Index_type()
			}

		}
		{
			p.SetState(1377)
			p.Index_colname_list()
		}
		p.SetState(1381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(1378)
				p.Index_option()
			}

			p.SetState(1383)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewTblConstrUKContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1384)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1386)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(1385)

					var _x = p.Id_()

					localctx.(*TblConstrUKContext).constr_name = _x
				}

			}

		}
		{
			p.SetState(1390)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(1391)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(1395)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(1394)

				var _x = p.Id_()

				localctx.(*TblConstrUKContext).index_name = _x
			}

		}
		p.SetState(1398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1397)
				p.Index_type()
			}

		}
		{
			p.SetState(1400)
			p.Index_colname_list()
		}
		p.SetState(1404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(1401)
				p.Index_option()
			}

			p.SetState(1406)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 3:
		localctx = NewTblConstrFKContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1411)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(1407)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(1409)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(1408)

					var _x = p.Id_()

					localctx.(*TblConstrFKContext).constr_name = _x
				}

			}

		}
		{
			p.SetState(1413)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(1414)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(1415)

				var _x = p.Id_()

				localctx.(*TblConstrFKContext).index_name = _x
			}

		}
		{
			p.SetState(1418)
			p.Index_colname_list()
		}
		{
			p.SetState(1419)
			p.Reference_definition()
		}

	case 4:
		localctx = NewTblConstCheckContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1421)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(1422)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1423)
			p.expression(0)
		}
		{
			p.SetState(1424)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IReference_definitionContext is an interface to support dynamic dispatch.
type IReference_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetRef_match_type returns the ref_match_type token.
	GetRef_match_type() antlr.Token

	// SetRef_match_type sets the ref_match_type token.
	SetRef_match_type(antlr.Token)

	// IsReference_definitionContext differentiates from other interfaces.
	IsReference_definitionContext()
}

type Reference_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	ref_match_type antlr.Token
}

func NewEmptyReference_definitionContext() *Reference_definitionContext {
	var p = new(Reference_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_reference_definition
	return p
}

func (*Reference_definitionContext) IsReference_definitionContext() {}

func NewReference_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reference_definitionContext {
	var p = new(Reference_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_reference_definition

	return p
}

func (s *Reference_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Reference_definitionContext) GetRef_match_type() antlr.Token { return s.ref_match_type }

func (s *Reference_definitionContext) SetRef_match_type(v antlr.Token) { s.ref_match_type = v }

func (s *Reference_definitionContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *Reference_definitionContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Reference_definitionContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *Reference_definitionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMATCH, 0)
}

func (s *Reference_definitionContext) On_delete_action() IOn_delete_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_delete_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_delete_actionContext)
}

func (s *Reference_definitionContext) On_update_action() IOn_update_actionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOn_update_actionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOn_update_actionContext)
}

func (s *Reference_definitionContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *Reference_definitionContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *Reference_definitionContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *Reference_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reference_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reference_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReference_definition(s)
	}
}

func (s *Reference_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReference_definition(s)
	}
}

func (s *Reference_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReference_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Reference_definition() (localctx IReference_definitionContext) {
	localctx = NewReference_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MySqlParserRULE_reference_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1428)
		p.Match(MySqlParserREFERENCES)
	}
	{
		p.SetState(1429)
		p.Table_name()
	}
	{
		p.SetState(1430)
		p.Index_colname_list()
	}
	p.SetState(1433)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMATCH {
		{
			p.SetState(1431)
			p.Match(MySqlParserMATCH)
		}
		p.SetState(1432)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Reference_definitionContext).ref_match_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFULL || _la == MySqlParserPARTIAL || _la == MySqlParserSIMPLE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Reference_definitionContext).ref_match_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1437)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1435)
			p.On_delete_action()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1436)
			p.On_update_action()
		}

	}

	return localctx
}

// IOn_delete_actionContext is an interface to support dynamic dispatch.
type IOn_delete_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_delete_actionContext differentiates from other interfaces.
	IsOn_delete_actionContext()
}

type On_delete_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_delete_actionContext() *On_delete_actionContext {
	var p = new(On_delete_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_on_delete_action
	return p
}

func (*On_delete_actionContext) IsOn_delete_actionContext() {}

func NewOn_delete_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_delete_actionContext {
	var p = new(On_delete_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_on_delete_action

	return p
}

func (s *On_delete_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *On_delete_actionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *On_delete_actionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *On_delete_actionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *On_delete_actionContext) AllReference_action_control_type() []IReference_action_control_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReference_action_control_typeContext)(nil)).Elem())
	var tst = make([]IReference_action_control_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReference_action_control_typeContext)
		}
	}

	return tst
}

func (s *On_delete_actionContext) Reference_action_control_type(i int) IReference_action_control_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReference_action_control_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReference_action_control_typeContext)
}

func (s *On_delete_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *On_delete_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_delete_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_delete_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOn_delete_action(s)
	}
}

func (s *On_delete_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOn_delete_action(s)
	}
}

func (s *On_delete_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOn_delete_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) On_delete_action() (localctx IOn_delete_actionContext) {
	localctx = NewOn_delete_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MySqlParserRULE_on_delete_action)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1439)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(1440)
		p.Match(MySqlParserDELETE)
	}
	{
		p.SetState(1441)
		p.Reference_action_control_type()
	}
	p.SetState(1445)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(1442)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1443)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(1444)
			p.Reference_action_control_type()
		}

	}

	return localctx
}

// IOn_update_actionContext is an interface to support dynamic dispatch.
type IOn_update_actionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOn_update_actionContext differentiates from other interfaces.
	IsOn_update_actionContext()
}

type On_update_actionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOn_update_actionContext() *On_update_actionContext {
	var p = new(On_update_actionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_on_update_action
	return p
}

func (*On_update_actionContext) IsOn_update_actionContext() {}

func NewOn_update_actionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *On_update_actionContext {
	var p = new(On_update_actionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_on_update_action

	return p
}

func (s *On_update_actionContext) GetParser() antlr.Parser { return s.parser }

func (s *On_update_actionContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *On_update_actionContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *On_update_actionContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *On_update_actionContext) AllReference_action_control_type() []IReference_action_control_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IReference_action_control_typeContext)(nil)).Elem())
	var tst = make([]IReference_action_control_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IReference_action_control_typeContext)
		}
	}

	return tst
}

func (s *On_update_actionContext) Reference_action_control_type(i int) IReference_action_control_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReference_action_control_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IReference_action_control_typeContext)
}

func (s *On_update_actionContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *On_update_actionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *On_update_actionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *On_update_actionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOn_update_action(s)
	}
}

func (s *On_update_actionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOn_update_action(s)
	}
}

func (s *On_update_actionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOn_update_action(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) On_update_action() (localctx IOn_update_actionContext) {
	localctx = NewOn_update_actionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MySqlParserRULE_on_update_action)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1447)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(1448)
		p.Match(MySqlParserUPDATE)
	}
	{
		p.SetState(1449)
		p.Reference_action_control_type()
	}
	p.SetState(1453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(1450)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1451)
			p.Match(MySqlParserDELETE)
		}
		{
			p.SetState(1452)
			p.Reference_action_control_type()
		}

	}

	return localctx
}

// IReference_action_control_typeContext is an interface to support dynamic dispatch.
type IReference_action_control_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReference_action_control_typeContext differentiates from other interfaces.
	IsReference_action_control_typeContext()
}

type Reference_action_control_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReference_action_control_typeContext() *Reference_action_control_typeContext {
	var p = new(Reference_action_control_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_reference_action_control_type
	return p
}

func (*Reference_action_control_typeContext) IsReference_action_control_typeContext() {}

func NewReference_action_control_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reference_action_control_typeContext {
	var p = new(Reference_action_control_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_reference_action_control_type

	return p
}

func (s *Reference_action_control_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Reference_action_control_typeContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *Reference_action_control_typeContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *Reference_action_control_typeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Reference_action_control_typeContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *Reference_action_control_typeContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *Reference_action_control_typeContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *Reference_action_control_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reference_action_control_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reference_action_control_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReference_action_control_type(s)
	}
}

func (s *Reference_action_control_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReference_action_control_type(s)
	}
}

func (s *Reference_action_control_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReference_action_control_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Reference_action_control_type() (localctx IReference_action_control_typeContext) {
	localctx = NewReference_action_control_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MySqlParserRULE_reference_action_control_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1461)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserRESTRICT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1455)
			p.Match(MySqlParserRESTRICT)
		}

	case MySqlParserCASCADE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1456)
			p.Match(MySqlParserCASCADE)
		}

	case MySqlParserSET:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1457)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(1458)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case MySqlParserNO:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1459)
			p.Match(MySqlParserNO)
		}
		{
			p.SetState(1460)
			p.Match(MySqlParserACTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIndex_column_definitionContext is an interface to support dynamic dispatch.
type IIndex_column_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_column_definitionContext differentiates from other interfaces.
	IsIndex_column_definitionContext()
}

type Index_column_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_column_definitionContext() *Index_column_definitionContext {
	var p = new(Index_column_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_column_definition
	return p
}

func (*Index_column_definitionContext) IsIndex_column_definitionContext() {}

func NewIndex_column_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_column_definitionContext {
	var p = new(Index_column_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_column_definition

	return p
}

func (s *Index_column_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_column_definitionContext) CopyFrom(ctx *Index_column_definitionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Index_column_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_column_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SimpleIndexContext struct {
	*Index_column_definitionContext
}

func NewSimpleIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleIndexContext {
	var p = new(SimpleIndexContext)

	p.Index_column_definitionContext = NewEmptyIndex_column_definitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Index_column_definitionContext))

	return p
}

func (s *SimpleIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleIndexContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *SimpleIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SimpleIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SimpleIndexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SimpleIndexContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *SimpleIndexContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *SimpleIndexContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *SimpleIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleIndex(s)
	}
}

func (s *SimpleIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleIndex(s)
	}
}

func (s *SimpleIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type SpecIndexContext struct {
	*Index_column_definitionContext
}

func NewSpecIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecIndexContext {
	var p = new(SpecIndexContext)

	p.Index_column_definitionContext = NewEmptyIndex_column_definitionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Index_column_definitionContext))

	return p
}

func (s *SpecIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecIndexContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *SpecIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *SpecIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *SpecIndexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SpecIndexContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *SpecIndexContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *SpecIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *SpecIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *SpecIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpecIndex(s)
	}
}

func (s *SpecIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpecIndex(s)
	}
}

func (s *SpecIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpecIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_column_definition() (localctx IIndex_column_definitionContext) {
	localctx = NewIndex_column_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MySqlParserRULE_index_column_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1491)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserINDEX, MySqlParserKEY:
		localctx = NewSimpleIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1463)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(1464)
				p.Id_()
			}

		}
		p.SetState(1468)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(1467)
				p.Index_type()
			}

		}
		{
			p.SetState(1470)
			p.Index_colname_list()
		}
		p.SetState(1474)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(1471)
				p.Index_option()
			}

			p.SetState(1476)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserFULLTEXT, MySqlParserSPATIAL:
		localctx = NewSpecIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1477)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1479)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(1478)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(1482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(1481)
				p.Id_()
			}

		}
		{
			p.SetState(1484)
			p.Index_colname_list()
		}
		p.SetState(1488)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(1485)
				p.Index_option()
			}

			p.SetState(1490)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_optionContext is an interface to support dynamic dispatch.
type ITable_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_optionContext differentiates from other interfaces.
	IsTable_optionContext()
}

type Table_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_optionContext() *Table_optionContext {
	var p = new(Table_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_option
	return p
}

func (*Table_optionContext) IsTable_optionContext() {}

func NewTable_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_optionContext {
	var p = new(Table_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_option

	return p
}

func (s *Table_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_optionContext) CopyFrom(ctx *Table_optionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Table_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TblOptAvgRLenContext struct {
	*Table_optionContext
}

func NewTblOptAvgRLenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptAvgRLenContext {
	var p = new(TblOptAvgRLenContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptAvgRLenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptAvgRLenContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *TblOptAvgRLenContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *TblOptAvgRLenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptAvgRLen(s)
	}
}

func (s *TblOptAvgRLenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptAvgRLen(s)
	}
}

func (s *TblOptAvgRLenContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptAvgRLen(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptChkSumContext struct {
	*Table_optionContext
}

func NewTblOptChkSumContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptChkSumContext {
	var p = new(TblOptChkSumContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptChkSumContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptChkSumContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *TblOptChkSumContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptChkSum(s)
	}
}

func (s *TblOptChkSumContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptChkSum(s)
	}
}

func (s *TblOptChkSumContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptChkSum(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptTablespaceContext struct {
	*Table_optionContext
}

func NewTblOptTablespaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptTablespaceContext {
	var p = new(TblOptTablespaceContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptTablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptTablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *TblOptTablespaceContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *TblOptTablespaceContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *TblOptTablespaceContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *TblOptTablespaceContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *TblOptTablespaceContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptTablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptTablespace(s)
	}
}

func (s *TblOptTablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptTablespace(s)
	}
}

func (s *TblOptTablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptTablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptComprContext struct {
	*Table_optionContext
}

func NewTblOptComprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptComprContext {
	var p = new(TblOptComprContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptComprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptComprContext) COMPRESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSION, 0)
}

func (s *TblOptComprContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptComprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptCompr(s)
	}
}

func (s *TblOptComprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptCompr(s)
	}
}

func (s *TblOptComprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptCompr(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptStatPersistContext struct {
	*Table_optionContext
}

func NewTblOptStatPersistContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptStatPersistContext {
	var p = new(TblOptStatPersistContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptStatPersistContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptStatPersistContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *TblOptStatPersistContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptStatPersistContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptStatPersist(s)
	}
}

func (s *TblOptStatPersistContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptStatPersist(s)
	}
}

func (s *TblOptStatPersistContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptStatPersist(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptRowFormatContext struct {
	*Table_optionContext
}

func NewTblOptRowFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptRowFormatContext {
	var p = new(TblOptRowFormatContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptRowFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptRowFormatContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *TblOptRowFormatContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptRowFormatContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *TblOptRowFormatContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *TblOptRowFormatContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *TblOptRowFormatContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *TblOptRowFormatContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *TblOptRowFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptRowFormat(s)
	}
}

func (s *TblOptRowFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptRowFormat(s)
	}
}

func (s *TblOptRowFormatContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptRowFormat(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptConnContext struct {
	*Table_optionContext
}

func NewTblOptConnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptConnContext {
	var p = new(TblOptConnContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptConnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptConnContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *TblOptConnContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptConnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptConn(s)
	}
}

func (s *TblOptConnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptConn(s)
	}
}

func (s *TblOptConnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptConn(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptStatAutoRContext struct {
	*Table_optionContext
}

func NewTblOptStatAutoRContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptStatAutoRContext {
	var p = new(TblOptStatAutoRContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptStatAutoRContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptStatAutoRContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *TblOptStatAutoRContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptStatAutoRContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptStatAutoR(s)
	}
}

func (s *TblOptStatAutoRContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptStatAutoR(s)
	}
}

func (s *TblOptStatAutoRContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptStatAutoR(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptMaxRowsContext struct {
	*Table_optionContext
}

func NewTblOptMaxRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptMaxRowsContext {
	var p = new(TblOptMaxRowsContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptMaxRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptMaxRowsContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *TblOptMaxRowsContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *TblOptMaxRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptMaxRows(s)
	}
}

func (s *TblOptMaxRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptMaxRows(s)
	}
}

func (s *TblOptMaxRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptMaxRows(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptEngineContext struct {
	*Table_optionContext
}

func NewTblOptEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptEngineContext {
	var p = new(TblOptEngineContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *TblOptEngineContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *TblOptEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptEngine(s)
	}
}

func (s *TblOptEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptEngine(s)
	}
}

func (s *TblOptEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptIndexDirContext struct {
	*Table_optionContext
}

func NewTblOptIndexDirContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptIndexDirContext {
	var p = new(TblOptIndexDirContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptIndexDirContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptIndexDirContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *TblOptIndexDirContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TblOptIndexDirContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptIndexDirContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptIndexDir(s)
	}
}

func (s *TblOptIndexDirContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptIndexDir(s)
	}
}

func (s *TblOptIndexDirContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptIndexDir(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptStatSamplPgContext struct {
	*Table_optionContext
}

func NewTblOptStatSamplPgContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptStatSamplPgContext {
	var p = new(TblOptStatSamplPgContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptStatSamplPgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptStatSamplPgContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *TblOptStatSamplPgContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *TblOptStatSamplPgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptStatSamplPg(s)
	}
}

func (s *TblOptStatSamplPgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptStatSamplPg(s)
	}
}

func (s *TblOptStatSamplPgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptStatSamplPg(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptDelKWContext struct {
	*Table_optionContext
}

func NewTblOptDelKWContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptDelKWContext {
	var p = new(TblOptDelKWContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptDelKWContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptDelKWContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *TblOptDelKWContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptDelKW(s)
	}
}

func (s *TblOptDelKWContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptDelKW(s)
	}
}

func (s *TblOptDelKWContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptDelKW(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptDataDirContext struct {
	*Table_optionContext
}

func NewTblOptDataDirContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptDataDirContext {
	var p = new(TblOptDataDirContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptDataDirContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptDataDirContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *TblOptDataDirContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *TblOptDataDirContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptDataDirContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptDataDir(s)
	}
}

func (s *TblOptDataDirContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptDataDir(s)
	}
}

func (s *TblOptDataDirContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptDataDir(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptCommentContext struct {
	*Table_optionContext
}

func NewTblOptCommentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptCommentContext {
	var p = new(TblOptCommentContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptCommentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptCommentContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *TblOptCommentContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptCommentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptComment(s)
	}
}

func (s *TblOptCommentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptComment(s)
	}
}

func (s *TblOptCommentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptComment(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptInsMethContext struct {
	*Table_optionContext
}

func NewTblOptInsMethContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptInsMethContext {
	var p = new(TblOptInsMethContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptInsMethContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptInsMethContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *TblOptInsMethContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *TblOptInsMethContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *TblOptInsMethContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *TblOptInsMethContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptInsMeth(s)
	}
}

func (s *TblOptInsMethContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptInsMeth(s)
	}
}

func (s *TblOptInsMethContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptInsMeth(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptMinRowsContext struct {
	*Table_optionContext
}

func NewTblOptMinRowsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptMinRowsContext {
	var p = new(TblOptMinRowsContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptMinRowsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptMinRowsContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *TblOptMinRowsContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *TblOptMinRowsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptMinRows(s)
	}
}

func (s *TblOptMinRowsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptMinRows(s)
	}
}

func (s *TblOptMinRowsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptMinRows(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptUnionContext struct {
	*Table_optionContext
}

func NewTblOptUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptUnionContext {
	var p = new(TblOptUnionContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptUnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptUnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *TblOptUnionContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *TblOptUnionContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *TblOptUnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptUnion(s)
	}
}

func (s *TblOptUnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptUnion(s)
	}
}

func (s *TblOptUnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptPasswdContext struct {
	*Table_optionContext
}

func NewTblOptPasswdContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptPasswdContext {
	var p = new(TblOptPasswdContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptPasswdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptPasswdContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *TblOptPasswdContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptPasswdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptPasswd(s)
	}
}

func (s *TblOptPasswdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptPasswd(s)
	}
}

func (s *TblOptPasswdContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptPasswd(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptAuIncContext struct {
	*Table_optionContext
}

func NewTblOptAuIncContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptAuIncContext {
	var p = new(TblOptAuIncContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptAuIncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptAuIncContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *TblOptAuIncContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *TblOptAuIncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptAuInc(s)
	}
}

func (s *TblOptAuIncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptAuInc(s)
	}
}

func (s *TblOptAuIncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptAuInc(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptPackKContext struct {
	*Table_optionContext
}

func NewTblOptPackKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptPackKContext {
	var p = new(TblOptPackKContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptPackKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptPackKContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *TblOptPackKContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptPackKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptPackK(s)
	}
}

func (s *TblOptPackKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptPackK(s)
	}
}

func (s *TblOptPackKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptPackK(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptEncrContext struct {
	*Table_optionContext
}

func NewTblOptEncrContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptEncrContext {
	var p = new(TblOptEncrContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptEncrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptEncrContext) ENCRYPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPTION, 0)
}

func (s *TblOptEncrContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *TblOptEncrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptEncr(s)
	}
}

func (s *TblOptEncrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptEncr(s)
	}
}

func (s *TblOptEncrContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptEncr(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptDefCollateContext struct {
	*Table_optionContext
}

func NewTblOptDefCollateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptDefCollateContext {
	var p = new(TblOptDefCollateContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptDefCollateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptDefCollateContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *TblOptDefCollateContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *TblOptDefCollateContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptDefCollateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptDefCollate(s)
	}
}

func (s *TblOptDefCollateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptDefCollate(s)
	}
}

func (s *TblOptDefCollateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptDefCollate(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptDefCharSetContext struct {
	*Table_optionContext
}

func NewTblOptDefCharSetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptDefCharSetContext {
	var p = new(TblOptDefCharSetContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptDefCharSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptDefCharSetContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *TblOptDefCharSetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *TblOptDefCharSetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *TblOptDefCharSetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *TblOptDefCharSetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *TblOptDefCharSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptDefCharSet(s)
	}
}

func (s *TblOptDefCharSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptDefCharSet(s)
	}
}

func (s *TblOptDefCharSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptDefCharSet(s)

	default:
		return t.VisitChildren(s)
	}
}

type TblOptKeyBlockSzContext struct {
	*Table_optionContext
}

func NewTblOptKeyBlockSzContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TblOptKeyBlockSzContext {
	var p = new(TblOptKeyBlockSzContext)

	p.Table_optionContext = NewEmptyTable_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_optionContext))

	return p
}

func (s *TblOptKeyBlockSzContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TblOptKeyBlockSzContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *TblOptKeyBlockSzContext) Filesize_literal() IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *TblOptKeyBlockSzContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTblOptKeyBlockSz(s)
	}
}

func (s *TblOptKeyBlockSzContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTblOptKeyBlockSz(s)
	}
}

func (s *TblOptKeyBlockSzContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTblOptKeyBlockSz(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_option() (localctx ITable_optionContext) {
	localctx = NewTable_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MySqlParserRULE_table_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTblOptEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1493)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1494)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1497)
			p.Engine_name()
		}

	case 2:
		localctx = NewTblOptAuIncContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1498)
			p.Match(MySqlParserAUTO_INCREMENT)
		}
		p.SetState(1500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1499)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1502)
			p.Decimal_literal()
		}

	case 3:
		localctx = NewTblOptAvgRLenContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1503)
			p.Match(MySqlParserAVG_ROW_LENGTH)
		}
		p.SetState(1505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1504)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1507)
			p.Decimal_literal()
		}

	case 4:
		localctx = NewTblOptDefCharSetContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(1509)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1508)
				p.Match(MySqlParserDEFAULT)
			}

		}
		p.SetState(1514)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(1511)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(1512)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCHARSET:
			{
				p.SetState(1513)
				p.Match(MySqlParserCHARSET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(1517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1516)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1519)
			p.Charset_name()
		}

	case 5:
		localctx = NewTblOptChkSumContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1520)
			p.Match(MySqlParserCHECKSUM)
		}
		p.SetState(1522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1521)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1524)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 6:
		localctx = NewTblOptDefCollateContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(1526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(1525)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(1528)
			p.Match(MySqlParserCOLLATE)
		}
		p.SetState(1530)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1529)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1532)
			p.Collation_name()
		}

	case 7:
		localctx = NewTblOptCommentContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1533)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1534)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1537)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 8:
		localctx = NewTblOptComprContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1538)
			p.Match(MySqlParserCOMPRESSION)
		}
		p.SetState(1540)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1539)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1542)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 9:
		localctx = NewTblOptConnContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1543)
			p.Match(MySqlParserCONNECTION)
		}
		p.SetState(1545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1544)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1547)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 10:
		localctx = NewTblOptDataDirContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1548)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1549)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1551)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1550)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1553)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 11:
		localctx = NewTblOptDelKWContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1554)
			p.Match(MySqlParserDELAY_KEY_WRITE)
		}
		p.SetState(1556)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1555)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1558)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 12:
		localctx = NewTblOptEncrContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1559)
			p.Match(MySqlParserENCRYPTION)
		}
		p.SetState(1561)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1560)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1563)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 13:
		localctx = NewTblOptIndexDirContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1564)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(1565)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1567)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1566)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1569)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 14:
		localctx = NewTblOptInsMethContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1570)
			p.Match(MySqlParserINSERT_METHOD)
		}
		p.SetState(1572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1571)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1574)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNO) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 15:
		localctx = NewTblOptKeyBlockSzContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(1575)
			p.Match(MySqlParserKEY_BLOCK_SIZE)
		}
		p.SetState(1577)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1576)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1579)
			p.Filesize_literal()
		}

	case 16:
		localctx = NewTblOptMaxRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(1580)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(1582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1581)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1584)
			p.Decimal_literal()
		}

	case 17:
		localctx = NewTblOptMinRowsContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(1585)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(1587)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1586)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1589)
			p.Decimal_literal()
		}

	case 18:
		localctx = NewTblOptPackKContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(1590)
			p.Match(MySqlParserPACK_KEYS)
		}
		p.SetState(1592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1591)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1594)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 19:
		localctx = NewTblOptPasswdContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(1595)
			p.Match(MySqlParserPASSWORD)
		}
		p.SetState(1597)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1596)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1599)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 20:
		localctx = NewTblOptRowFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(1600)
			p.Match(MySqlParserROW_FORMAT)
		}
		p.SetState(1602)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1601)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1604)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || (((_la-277)&-(0x1f+1)) == 0 && ((1<<uint((_la-277)))&((1<<(MySqlParserCOMPACT-277))|(1<<(MySqlParserCOMPRESSED-277))|(1<<(MySqlParserDYNAMIC-277)))) != 0) || _la == MySqlParserFIXED || _la == MySqlParserREDUNDANT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 21:
		localctx = NewTblOptStatAutoRContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(1605)
			p.Match(MySqlParserSTATS_AUTO_RECALC)
		}
		p.SetState(1607)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1606)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1609)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 22:
		localctx = NewTblOptStatPersistContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(1610)
			p.Match(MySqlParserSTATS_PERSISTENT)
		}
		p.SetState(1612)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1611)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(1614)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 23:
		localctx = NewTblOptStatSamplPgContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(1615)
			p.Match(MySqlParserSTATS_SAMPLE_PAGES)
		}
		p.SetState(1617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1616)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1619)
			p.Decimal_literal()
		}

	case 24:
		localctx = NewTblOptTablespaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(1620)
			p.Match(MySqlParserTABLESPACE)
		}
		{
			p.SetState(1621)
			p.Id_()
		}
		p.SetState(1624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(1622)
				p.Match(MySqlParserSTORAGE)
			}
			p.SetState(1623)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserDEFAULT || _la == MySqlParserDISK || _la == MySqlParserMEMORY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}

	case 25:
		localctx = NewTblOptUnionContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(1626)
			p.Match(MySqlParserUNION)
		}
		p.SetState(1628)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1627)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1630)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1631)
			p.Table_name()
		}
		p.SetState(1636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1632)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1633)
				p.Table_name()
			}

			p.SetState(1638)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1639)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartition_optionsContext is an interface to support dynamic dispatch.
type IPartition_optionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPart_num returns the part_num rule contexts.
	GetPart_num() IDecimal_literalContext

	// GetSubpart_num returns the subpart_num rule contexts.
	GetSubpart_num() IDecimal_literalContext

	// SetPart_num sets the part_num rule contexts.
	SetPart_num(IDecimal_literalContext)

	// SetSubpart_num sets the subpart_num rule contexts.
	SetSubpart_num(IDecimal_literalContext)

	// IsPartition_optionsContext differentiates from other interfaces.
	IsPartition_optionsContext()
}

type Partition_optionsContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	part_num    IDecimal_literalContext
	subpart_num IDecimal_literalContext
}

func NewEmptyPartition_optionsContext() *Partition_optionsContext {
	var p = new(Partition_optionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partition_options
	return p
}

func (*Partition_optionsContext) IsPartition_optionsContext() {}

func NewPartition_optionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_optionsContext {
	var p = new(Partition_optionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partition_options

	return p
}

func (s *Partition_optionsContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_optionsContext) GetPart_num() IDecimal_literalContext { return s.part_num }

func (s *Partition_optionsContext) GetSubpart_num() IDecimal_literalContext { return s.subpart_num }

func (s *Partition_optionsContext) SetPart_num(v IDecimal_literalContext) { s.part_num = v }

func (s *Partition_optionsContext) SetSubpart_num(v IDecimal_literalContext) { s.subpart_num = v }

func (s *Partition_optionsContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Partition_optionsContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBY)
}

func (s *Partition_optionsContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, i)
}

func (s *Partition_optionsContext) Partition_function_definition() IPartition_function_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_function_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_function_definitionContext)
}

func (s *Partition_optionsContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *Partition_optionsContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *Partition_optionsContext) Linear_partition_func_def() ILinear_partition_func_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinear_partition_func_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinear_partition_func_defContext)
}

func (s *Partition_optionsContext) AllPartition_def() []IPartition_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartition_defContext)(nil)).Elem())
	var tst = make([]IPartition_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartition_defContext)
		}
	}

	return tst
}

func (s *Partition_optionsContext) Partition_def(i int) IPartition_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartition_defContext)
}

func (s *Partition_optionsContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Partition_optionsContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Partition_optionsContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *Partition_optionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_optionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_optionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartition_options(s)
	}
}

func (s *Partition_optionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartition_options(s)
	}
}

func (s *Partition_optionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartition_options(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Partition_options() (localctx IPartition_optionsContext) {
	localctx = NewPartition_optionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MySqlParserRULE_partition_options)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1643)
		p.Match(MySqlParserPARTITION)
	}
	{
		p.SetState(1644)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(1645)
		p.Partition_function_definition()
	}
	p.SetState(1648)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITIONS {
		{
			p.SetState(1646)
			p.Match(MySqlParserPARTITIONS)
		}
		{
			p.SetState(1647)

			var _x = p.Decimal_literal()

			localctx.(*Partition_optionsContext).part_num = _x
		}

	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUBPARTITION {
		{
			p.SetState(1650)
			p.Match(MySqlParserSUBPARTITION)
		}
		{
			p.SetState(1651)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(1652)
			p.Linear_partition_func_def()
		}
		p.SetState(1655)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSUBPARTITIONS {
			{
				p.SetState(1653)
				p.Match(MySqlParserSUBPARTITIONS)
			}
			{
				p.SetState(1654)

				var _x = p.Decimal_literal()

				localctx.(*Partition_optionsContext).subpart_num = _x
			}

		}

	}
	p.SetState(1670)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 187, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1659)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1660)
			p.Partition_def()
		}
		p.SetState(1665)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(1661)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(1662)
				p.Partition_def()
			}

			p.SetState(1667)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1668)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartition_function_definitionContext is an interface to support dynamic dispatch.
type IPartition_function_definitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartition_function_definitionContext differentiates from other interfaces.
	IsPartition_function_definitionContext()
}

type Partition_function_definitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartition_function_definitionContext() *Partition_function_definitionContext {
	var p = new(Partition_function_definitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partition_function_definition
	return p
}

func (*Partition_function_definitionContext) IsPartition_function_definitionContext() {}

func NewPartition_function_definitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_function_definitionContext {
	var p = new(Partition_function_definitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partition_function_definition

	return p
}

func (s *Partition_function_definitionContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_function_definitionContext) Linear_partition_func_def() ILinear_partition_func_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILinear_partition_func_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILinear_partition_func_defContext)
}

func (s *Partition_function_definitionContext) RANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANGE, 0)
}

func (s *Partition_function_definitionContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *Partition_function_definitionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_function_definitionContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *Partition_function_definitionContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Partition_function_definitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_function_definitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_function_definitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartition_function_definition(s)
	}
}

func (s *Partition_function_definitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartition_function_definition(s)
	}
}

func (s *Partition_function_definitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartition_function_definition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Partition_function_definition() (localctx IPartition_function_definitionContext) {
	localctx = NewPartition_function_definitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MySqlParserRULE_partition_function_definition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1685)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserKEY, MySqlParserLINEAR, MySqlParserHASH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1672)
			p.Linear_partition_func_def()
		}

	case MySqlParserRANGE, MySqlParserLIST:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1673)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserRANGE || _la == MySqlParserLIST) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1683)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLR_BRACKET:
			{
				p.SetState(1674)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1675)
				p.expression(0)
			}
			{
				p.SetState(1676)
				p.Match(MySqlParserRR_BRACKET)
			}

		case MySqlParserCOLUMNS:
			{
				p.SetState(1678)
				p.Match(MySqlParserCOLUMNS)
			}
			{
				p.SetState(1679)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1680)
				p.Id_list()
			}
			{
				p.SetState(1681)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILinear_partition_func_defContext is an interface to support dynamic dispatch.
type ILinear_partition_func_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLinear_partition_func_defContext differentiates from other interfaces.
	IsLinear_partition_func_defContext()
}

type Linear_partition_func_defContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLinear_partition_func_defContext() *Linear_partition_func_defContext {
	var p = new(Linear_partition_func_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_linear_partition_func_def
	return p
}

func (*Linear_partition_func_defContext) IsLinear_partition_func_defContext() {}

func NewLinear_partition_func_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Linear_partition_func_defContext {
	var p = new(Linear_partition_func_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_linear_partition_func_def

	return p
}

func (s *Linear_partition_func_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Linear_partition_func_defContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *Linear_partition_func_defContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Linear_partition_func_defContext) LINEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEAR, 0)
}

func (s *Linear_partition_func_defContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Linear_partition_func_defContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Linear_partition_func_defContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Linear_partition_func_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Linear_partition_func_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Linear_partition_func_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLinear_partition_func_def(s)
	}
}

func (s *Linear_partition_func_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLinear_partition_func_def(s)
	}
}

func (s *Linear_partition_func_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLinear_partition_func_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Linear_partition_func_def() (localctx ILinear_partition_func_defContext) {
	localctx = NewLinear_partition_func_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MySqlParserRULE_linear_partition_func_def)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1708)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 193, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1688)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1687)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1690)
			p.Match(MySqlParserHASH)
		}
		{
			p.SetState(1691)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1692)
			p.expression(0)
		}
		{
			p.SetState(1693)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1696)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINEAR {
			{
				p.SetState(1695)
				p.Match(MySqlParserLINEAR)
			}

		}
		{
			p.SetState(1698)
			p.Match(MySqlParserKEY)
		}
		p.SetState(1702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALGORITHM {
			{
				p.SetState(1699)
				p.Match(MySqlParserALGORITHM)
			}
			{
				p.SetState(1700)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			p.SetState(1701)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserONE_DECIMAL || _la == MySqlParserTWO_DECIMAL) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(1704)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(1705)
			p.Id_list()
		}
		{
			p.SetState(1706)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPartition_defContext is an interface to support dynamic dispatch.
type IPartition_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// GetData_dir returns the data_dir token.
	GetData_dir() antlr.Token

	// GetIndex_dir returns the index_dir token.
	GetIndex_dir() antlr.Token

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// SetData_dir sets the data_dir token.
	SetData_dir(antlr.Token)

	// SetIndex_dir sets the index_dir token.
	SetIndex_dir(antlr.Token)

	// GetMax_row_num returns the max_row_num rule contexts.
	GetMax_row_num() IDecimal_literalContext

	// GetMin_row_num returns the min_row_num rule contexts.
	GetMin_row_num() IDecimal_literalContext

	// GetTblspace_id returns the tblspace_id rule contexts.
	GetTblspace_id() IId_Context

	// GetNodegroup_id returns the nodegroup_id rule contexts.
	GetNodegroup_id() IId_Context

	// SetMax_row_num sets the max_row_num rule contexts.
	SetMax_row_num(IDecimal_literalContext)

	// SetMin_row_num sets the min_row_num rule contexts.
	SetMin_row_num(IDecimal_literalContext)

	// SetTblspace_id sets the tblspace_id rule contexts.
	SetTblspace_id(IId_Context)

	// SetNodegroup_id sets the nodegroup_id rule contexts.
	SetNodegroup_id(IId_Context)

	// IsPartition_defContext differentiates from other interfaces.
	IsPartition_defContext()
}

type Partition_defContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	comment      antlr.Token
	data_dir     antlr.Token
	index_dir    antlr.Token
	max_row_num  IDecimal_literalContext
	min_row_num  IDecimal_literalContext
	tblspace_id  IId_Context
	nodegroup_id IId_Context
}

func NewEmptyPartition_defContext() *Partition_defContext {
	var p = new(Partition_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_partition_def
	return p
}

func (*Partition_defContext) IsPartition_defContext() {}

func NewPartition_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Partition_defContext {
	var p = new(Partition_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_partition_def

	return p
}

func (s *Partition_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Partition_defContext) GetComment() antlr.Token { return s.comment }

func (s *Partition_defContext) GetData_dir() antlr.Token { return s.data_dir }

func (s *Partition_defContext) GetIndex_dir() antlr.Token { return s.index_dir }

func (s *Partition_defContext) SetComment(v antlr.Token) { s.comment = v }

func (s *Partition_defContext) SetData_dir(v antlr.Token) { s.data_dir = v }

func (s *Partition_defContext) SetIndex_dir(v antlr.Token) { s.index_dir = v }

func (s *Partition_defContext) GetMax_row_num() IDecimal_literalContext { return s.max_row_num }

func (s *Partition_defContext) GetMin_row_num() IDecimal_literalContext { return s.min_row_num }

func (s *Partition_defContext) GetTblspace_id() IId_Context { return s.tblspace_id }

func (s *Partition_defContext) GetNodegroup_id() IId_Context { return s.nodegroup_id }

func (s *Partition_defContext) SetMax_row_num(v IDecimal_literalContext) { s.max_row_num = v }

func (s *Partition_defContext) SetMin_row_num(v IDecimal_literalContext) { s.min_row_num = v }

func (s *Partition_defContext) SetTblspace_id(v IId_Context) { s.tblspace_id = v }

func (s *Partition_defContext) SetNodegroup_id(v IId_Context) { s.nodegroup_id = v }

func (s *Partition_defContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Partition_defContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Partition_defContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Partition_defContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *Partition_defContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Partition_defContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Partition_defContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Partition_defContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *Partition_defContext) AllDIRECTORY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDIRECTORY)
}

func (s *Partition_defContext) DIRECTORY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, i)
}

func (s *Partition_defContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Partition_defContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *Partition_defContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *Partition_defContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Partition_defContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *Partition_defContext) AllSubpartition_def() []ISubpartition_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISubpartition_defContext)(nil)).Elem())
	var tst = make([]ISubpartition_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISubpartition_defContext)
		}
	}

	return tst
}

func (s *Partition_defContext) Subpartition_def(i int) ISubpartition_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubpartition_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISubpartition_defContext)
}

func (s *Partition_defContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Partition_defContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Partition_defContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Partition_defContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Partition_defContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *Partition_defContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *Partition_defContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *Partition_defContext) Constant_list() IConstant_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_listContext)
}

func (s *Partition_defContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *Partition_defContext) MAXVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAXVALUE, 0)
}

func (s *Partition_defContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Partition_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Partition_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Partition_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPartition_def(s)
	}
}

func (s *Partition_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPartition_def(s)
	}
}

func (s *Partition_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPartition_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Partition_def() (localctx IPartition_defContext) {
	localctx = NewPartition_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MySqlParserRULE_partition_def)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1710)
		p.Match(MySqlParserPARTITION)
	}
	{
		p.SetState(1711)
		p.Id_()
	}
	p.SetState(1732)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserVALUES {
		{
			p.SetState(1712)
			p.Match(MySqlParserVALUES)
		}
		p.SetState(1730)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLESS:
			{
				p.SetState(1713)
				p.Match(MySqlParserLESS)
			}
			{
				p.SetState(1714)
				p.Match(MySqlParserTHAN)
			}
			p.SetState(1723)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserLR_BRACKET:
				{
					p.SetState(1715)
					p.Match(MySqlParserLR_BRACKET)
				}
				p.SetState(1718)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(1716)
						p.expression(0)
					}

				case 2:
					{
						p.SetState(1717)
						p.Constant_list()
					}

				}
				{
					p.SetState(1720)
					p.Match(MySqlParserRR_BRACKET)
				}

			case MySqlParserMAXVALUE:
				{
					p.SetState(1722)
					p.Match(MySqlParserMAXVALUE)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		case MySqlParserIN:
			{
				p.SetState(1725)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(1726)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(1727)
				p.Constant_list()
			}
			{
				p.SetState(1728)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(1742)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE || _la == MySqlParserSTORAGE {
		p.SetState(1735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(1734)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(1737)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1739)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1738)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1741)
			p.Engine_name()
		}

	}
	p.SetState(1749)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1744)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1746)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1745)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1748)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Partition_defContext).comment = _m
		}

	}
	p.SetState(1757)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDATA {
		{
			p.SetState(1751)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1752)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1753)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1756)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Partition_defContext).data_dir = _m
		}

	}
	p.SetState(1765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX {
		{
			p.SetState(1759)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(1760)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1761)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1764)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Partition_defContext).index_dir = _m
		}

	}
	p.SetState(1772)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMAX_ROWS {
		{
			p.SetState(1767)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(1769)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1768)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1771)

			var _x = p.Decimal_literal()

			localctx.(*Partition_defContext).max_row_num = _x
		}

	}
	p.SetState(1779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMIN_ROWS {
		{
			p.SetState(1774)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(1776)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1775)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1778)

			var _x = p.Decimal_literal()

			localctx.(*Partition_defContext).min_row_num = _x
		}

	}
	p.SetState(1786)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTABLESPACE {
		{
			p.SetState(1781)
			p.Match(MySqlParserTABLESPACE)
		}
		p.SetState(1783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1782)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1785)

			var _x = p.Id_()

			localctx.(*Partition_defContext).tblspace_id = _x
		}

	}
	p.SetState(1793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(1788)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(1790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1789)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1792)

			var _x = p.Id_()

			localctx.(*Partition_defContext).nodegroup_id = _x
		}

	}
	p.SetState(1803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUBPARTITION {
		{
			p.SetState(1795)
			p.Subpartition_def()
		}
		p.SetState(1800)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1796)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(1797)
					p.Subpartition_def()
				}

			}
			p.SetState(1802)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 215, p.GetParserRuleContext())
		}

	}

	return localctx
}

// ISubpartition_defContext is an interface to support dynamic dispatch.
type ISubpartition_defContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetComment returns the comment token.
	GetComment() antlr.Token

	// GetData_dir returns the data_dir token.
	GetData_dir() antlr.Token

	// GetIndex_dir returns the index_dir token.
	GetIndex_dir() antlr.Token

	// SetComment sets the comment token.
	SetComment(antlr.Token)

	// SetData_dir sets the data_dir token.
	SetData_dir(antlr.Token)

	// SetIndex_dir sets the index_dir token.
	SetIndex_dir(antlr.Token)

	// GetMax_row_num returns the max_row_num rule contexts.
	GetMax_row_num() IDecimal_literalContext

	// GetMin_row_num returns the min_row_num rule contexts.
	GetMin_row_num() IDecimal_literalContext

	// GetTblspace_id returns the tblspace_id rule contexts.
	GetTblspace_id() IId_Context

	// GetNodegroup_id returns the nodegroup_id rule contexts.
	GetNodegroup_id() IId_Context

	// SetMax_row_num sets the max_row_num rule contexts.
	SetMax_row_num(IDecimal_literalContext)

	// SetMin_row_num sets the min_row_num rule contexts.
	SetMin_row_num(IDecimal_literalContext)

	// SetTblspace_id sets the tblspace_id rule contexts.
	SetTblspace_id(IId_Context)

	// SetNodegroup_id sets the nodegroup_id rule contexts.
	SetNodegroup_id(IId_Context)

	// IsSubpartition_defContext differentiates from other interfaces.
	IsSubpartition_defContext()
}

type Subpartition_defContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	comment      antlr.Token
	data_dir     antlr.Token
	index_dir    antlr.Token
	max_row_num  IDecimal_literalContext
	min_row_num  IDecimal_literalContext
	tblspace_id  IId_Context
	nodegroup_id IId_Context
}

func NewEmptySubpartition_defContext() *Subpartition_defContext {
	var p = new(Subpartition_defContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subpartition_def
	return p
}

func (*Subpartition_defContext) IsSubpartition_defContext() {}

func NewSubpartition_defContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Subpartition_defContext {
	var p = new(Subpartition_defContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subpartition_def

	return p
}

func (s *Subpartition_defContext) GetParser() antlr.Parser { return s.parser }

func (s *Subpartition_defContext) GetComment() antlr.Token { return s.comment }

func (s *Subpartition_defContext) GetData_dir() antlr.Token { return s.data_dir }

func (s *Subpartition_defContext) GetIndex_dir() antlr.Token { return s.index_dir }

func (s *Subpartition_defContext) SetComment(v antlr.Token) { s.comment = v }

func (s *Subpartition_defContext) SetData_dir(v antlr.Token) { s.data_dir = v }

func (s *Subpartition_defContext) SetIndex_dir(v antlr.Token) { s.index_dir = v }

func (s *Subpartition_defContext) GetMax_row_num() IDecimal_literalContext { return s.max_row_num }

func (s *Subpartition_defContext) GetMin_row_num() IDecimal_literalContext { return s.min_row_num }

func (s *Subpartition_defContext) GetTblspace_id() IId_Context { return s.tblspace_id }

func (s *Subpartition_defContext) GetNodegroup_id() IId_Context { return s.nodegroup_id }

func (s *Subpartition_defContext) SetMax_row_num(v IDecimal_literalContext) { s.max_row_num = v }

func (s *Subpartition_defContext) SetMin_row_num(v IDecimal_literalContext) { s.min_row_num = v }

func (s *Subpartition_defContext) SetTblspace_id(v IId_Context) { s.tblspace_id = v }

func (s *Subpartition_defContext) SetNodegroup_id(v IId_Context) { s.nodegroup_id = v }

func (s *Subpartition_defContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *Subpartition_defContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Subpartition_defContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Subpartition_defContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Subpartition_defContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Subpartition_defContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Subpartition_defContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *Subpartition_defContext) AllDIRECTORY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDIRECTORY)
}

func (s *Subpartition_defContext) DIRECTORY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, i)
}

func (s *Subpartition_defContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Subpartition_defContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *Subpartition_defContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *Subpartition_defContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Subpartition_defContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *Subpartition_defContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Subpartition_defContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Subpartition_defContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Subpartition_defContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Subpartition_defContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *Subpartition_defContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Subpartition_defContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Subpartition_defContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubpartition_def(s)
	}
}

func (s *Subpartition_defContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubpartition_def(s)
	}
}

func (s *Subpartition_defContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubpartition_def(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Subpartition_def() (localctx ISubpartition_defContext) {
	localctx = NewSubpartition_defContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MySqlParserRULE_subpartition_def)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1805)
		p.Match(MySqlParserSUBPARTITION)
	}
	{
		p.SetState(1806)
		p.Id_()
	}
	p.SetState(1815)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE || _la == MySqlParserSTORAGE {
		p.SetState(1808)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTORAGE {
			{
				p.SetState(1807)
				p.Match(MySqlParserSTORAGE)
			}

		}
		{
			p.SetState(1810)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(1812)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1811)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1814)
			p.Engine_name()
		}

	}
	p.SetState(1822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1817)
			p.Match(MySqlParserCOMMENT)
		}
		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1818)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1821)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Subpartition_defContext).comment = _m
		}

	}
	p.SetState(1830)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDATA {
		{
			p.SetState(1824)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1825)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1826)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1829)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Subpartition_defContext).data_dir = _m
		}

	}
	p.SetState(1838)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX {
		{
			p.SetState(1832)
			p.Match(MySqlParserINDEX)
		}
		{
			p.SetState(1833)
			p.Match(MySqlParserDIRECTORY)
		}
		p.SetState(1835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1834)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1837)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Subpartition_defContext).index_dir = _m
		}

	}
	p.SetState(1845)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMAX_ROWS {
		{
			p.SetState(1840)
			p.Match(MySqlParserMAX_ROWS)
		}
		p.SetState(1842)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1841)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1844)

			var _x = p.Decimal_literal()

			localctx.(*Subpartition_defContext).max_row_num = _x
		}

	}
	p.SetState(1852)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMIN_ROWS {
		{
			p.SetState(1847)
			p.Match(MySqlParserMIN_ROWS)
		}
		p.SetState(1849)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1848)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1851)

			var _x = p.Decimal_literal()

			localctx.(*Subpartition_defContext).min_row_num = _x
		}

	}
	p.SetState(1859)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTABLESPACE {
		{
			p.SetState(1854)
			p.Match(MySqlParserTABLESPACE)
		}
		p.SetState(1856)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1855)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1858)

			var _x = p.Id_()

			localctx.(*Subpartition_defContext).tblspace_id = _x
		}

	}
	p.SetState(1866)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNODEGROUP {
		{
			p.SetState(1861)
			p.Match(MySqlParserNODEGROUP)
		}
		p.SetState(1863)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1862)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1865)

			var _x = p.Id_()

			localctx.(*Subpartition_defContext).nodegroup_id = _x
		}

	}

	return localctx
}

// IAlter_databaseContext is an interface to support dynamic dispatch.
type IAlter_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_databaseContext differentiates from other interfaces.
	IsAlter_databaseContext()
}

type Alter_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_databaseContext() *Alter_databaseContext {
	var p = new(Alter_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_database
	return p
}

func (*Alter_databaseContext) IsAlter_databaseContext() {}

func NewAlter_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_databaseContext {
	var p = new(Alter_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_database

	return p
}

func (s *Alter_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_databaseContext) CopyFrom(ctx *Alter_databaseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Alter_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterDbUpgradeNameContext struct {
	*Alter_databaseContext
}

func NewAlterDbUpgradeNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterDbUpgradeNameContext {
	var p = new(AlterDbUpgradeNameContext)

	p.Alter_databaseContext = NewEmptyAlter_databaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_databaseContext))

	return p
}

func (s *AlterDbUpgradeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDbUpgradeNameContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterDbUpgradeNameContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AlterDbUpgradeNameContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AlterDbUpgradeNameContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *AlterDbUpgradeNameContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *AlterDbUpgradeNameContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *AlterDbUpgradeNameContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterDbUpgradeNameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterDbUpgradeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterDbUpgradeName(s)
	}
}

func (s *AlterDbUpgradeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterDbUpgradeName(s)
	}
}

func (s *AlterDbUpgradeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterDbUpgradeName(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterDbContext struct {
	*Alter_databaseContext
}

func NewAlterDbContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterDbContext {
	var p = new(AlterDbContext)

	p.Alter_databaseContext = NewEmptyAlter_databaseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_databaseContext))

	return p
}

func (s *AlterDbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterDbContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterDbContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *AlterDbContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *AlterDbContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AlterDbContext) AllCreate_database_option() []ICreate_database_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem())
	var tst = make([]ICreate_database_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICreate_database_optionContext)
		}
	}

	return tst
}

func (s *AlterDbContext) Create_database_option(i int) ICreate_database_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreate_database_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICreate_database_optionContext)
}

func (s *AlterDbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterDb(s)
	}
}

func (s *AlterDbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterDb(s)
	}
}

func (s *AlterDbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterDb(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_database() (localctx IAlter_databaseContext) {
	localctx = NewAlter_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MySqlParserRULE_alter_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1886)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 236, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterDbContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1868)
			p.Match(MySqlParserALTER)
		}
		p.SetState(1869)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1871)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(1870)
				p.Id_()
			}

		}
		p.SetState(1874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la-21)&-(0x1f+1)) == 0 && ((1<<uint((_la-21)))&((1<<(MySqlParserCHARACTER-21))|(1<<(MySqlParserCOLLATE-21))|(1<<(MySqlParserDEFAULT-21)))) != 0) {
			{
				p.SetState(1873)
				p.Create_database_option()
			}

			p.SetState(1876)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterDbUpgradeNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1878)
			p.Match(MySqlParserALTER)
		}
		p.SetState(1879)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1880)
			p.Id_()
		}
		{
			p.SetState(1881)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(1882)
			p.Match(MySqlParserDATA)
		}
		{
			p.SetState(1883)
			p.Match(MySqlParserDIRECTORY)
		}
		{
			p.SetState(1884)
			p.Match(MySqlParserNAME)
		}

	}

	return localctx
}

// IAlter_eventContext is an interface to support dynamic dispatch.
type IAlter_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_eventContext differentiates from other interfaces.
	IsAlter_eventContext()
}

type Alter_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_eventContext() *Alter_eventContext {
	var p = new(Alter_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_event
	return p
}

func (*Alter_eventContext) IsAlter_eventContext() {}

func NewAlter_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_eventContext {
	var p = new(Alter_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_event

	return p
}

func (s *Alter_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_eventContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_eventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *Alter_eventContext) AllFull_id() []IFull_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFull_idContext)(nil)).Elem())
	var tst = make([]IFull_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFull_idContext)
		}
	}

	return tst
}

func (s *Alter_eventContext) Full_id(i int) IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Alter_eventContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Alter_eventContext) AllON() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserON)
}

func (s *Alter_eventContext) ON(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserON, i)
}

func (s *Alter_eventContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *Alter_eventContext) Schedule_expression() ISchedule_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchedule_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchedule_expressionContext)
}

func (s *Alter_eventContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *Alter_eventContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *Alter_eventContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *Alter_eventContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Alter_eventContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *Alter_eventContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *Alter_eventContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Alter_eventContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Alter_eventContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Alter_eventContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *Alter_eventContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Alter_eventContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *Alter_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_event(s)
	}
}

func (s *Alter_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_event(s)
	}
}

func (s *Alter_eventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_event(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_event() (localctx IAlter_eventContext) {
	localctx = NewAlter_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MySqlParserRULE_alter_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1888)
		p.Match(MySqlParserALTER)
	}
	p.SetState(1890)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(1889)
			p.Owner_statement()
		}

	}
	{
		p.SetState(1892)
		p.Match(MySqlParserEVENT)
	}
	{
		p.SetState(1893)
		p.Full_id()
	}
	p.SetState(1897)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1894)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1895)
			p.Match(MySqlParserSCHEDULE)
		}
		{
			p.SetState(1896)
			p.Schedule_expression()
		}

	}
	p.SetState(1905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(1899)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1900)
			p.Match(MySqlParserCOMPLETION)
		}
		p.SetState(1902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(1901)
				p.Match(MySqlParserNOT)
			}

		}
		{
			p.SetState(1904)
			p.Match(MySqlParserPRESERVE)
		}

	}
	p.SetState(1910)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserRENAME {
		{
			p.SetState(1907)
			p.Match(MySqlParserRENAME)
		}
		{
			p.SetState(1908)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(1909)
			p.Full_id()
		}

	}
	p.SetState(1917)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1912)
			p.Match(MySqlParserENABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(1913)
			p.Match(MySqlParserDISABLE)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(1914)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(1915)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(1916)
			p.Match(MySqlParserSLAVE)
		}

	}
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMENT {
		{
			p.SetState(1919)
			p.Match(MySqlParserCOMMENT)
		}
		{
			p.SetState(1920)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	}
	p.SetState(1925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDO {
		{
			p.SetState(1923)
			p.Match(MySqlParserDO)
		}
		{
			p.SetState(1924)
			p.Routine_body()
		}

	}

	return localctx
}

// IAlter_functionContext is an interface to support dynamic dispatch.
type IAlter_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_functionContext differentiates from other interfaces.
	IsAlter_functionContext()
}

type Alter_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_functionContext() *Alter_functionContext {
	var p = new(Alter_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_function
	return p
}

func (*Alter_functionContext) IsAlter_functionContext() {}

func NewAlter_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_functionContext {
	var p = new(Alter_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_function

	return p
}

func (s *Alter_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_functionContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Alter_functionContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Alter_functionContext) AllRoutine_characteristic() []IRoutine_characteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem())
	var tst = make([]IRoutine_characteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutine_characteristicContext)
		}
	}

	return tst
}

func (s *Alter_functionContext) Routine_characteristic(i int) IRoutine_characteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutine_characteristicContext)
}

func (s *Alter_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_function(s)
	}
}

func (s *Alter_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_function(s)
	}
}

func (s *Alter_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_function() (localctx IAlter_functionContext) {
	localctx = NewAlter_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MySqlParserRULE_alter_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1927)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(1928)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(1929)
		p.Full_id()
	}
	p.SetState(1933)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-95)&-(0x1f+1)) == 0 && ((1<<uint((_la-95)))&((1<<(MySqlParserMODIFIES-95))|(1<<(MySqlParserNOT-95))|(1<<(MySqlParserREADS-95)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(1930)
			p.Routine_characteristic()
		}

		p.SetState(1935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlter_instanceContext is an interface to support dynamic dispatch.
type IAlter_instanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_instanceContext differentiates from other interfaces.
	IsAlter_instanceContext()
}

type Alter_instanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_instanceContext() *Alter_instanceContext {
	var p = new(Alter_instanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_instance
	return p
}

func (*Alter_instanceContext) IsAlter_instanceContext() {}

func NewAlter_instanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_instanceContext {
	var p = new(Alter_instanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_instance

	return p
}

func (s *Alter_instanceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_instanceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_instanceContext) INSTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTANCE, 0)
}

func (s *Alter_instanceContext) ROTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROTATE, 0)
}

func (s *Alter_instanceContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *Alter_instanceContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *Alter_instanceContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Alter_instanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_instanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_instanceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_instance(s)
	}
}

func (s *Alter_instanceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_instance(s)
	}
}

func (s *Alter_instanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_instance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_instance() (localctx IAlter_instanceContext) {
	localctx = NewAlter_instanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MySqlParserRULE_alter_instance)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1936)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(1937)
		p.Match(MySqlParserINSTANCE)
	}
	{
		p.SetState(1938)
		p.Match(MySqlParserROTATE)
	}
	{
		p.SetState(1939)
		p.Match(MySqlParserINNODB)
	}
	{
		p.SetState(1940)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(1941)
		p.Match(MySqlParserKEY)
	}

	return localctx
}

// IAlter_logfile_groupContext is an interface to support dynamic dispatch.
type IAlter_logfile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_logfile_groupContext differentiates from other interfaces.
	IsAlter_logfile_groupContext()
}

type Alter_logfile_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_logfile_groupContext() *Alter_logfile_groupContext {
	var p = new(Alter_logfile_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_logfile_group
	return p
}

func (*Alter_logfile_groupContext) IsAlter_logfile_groupContext() {}

func NewAlter_logfile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_logfile_groupContext {
	var p = new(Alter_logfile_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_logfile_group

	return p
}

func (s *Alter_logfile_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_logfile_groupContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_logfile_groupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *Alter_logfile_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *Alter_logfile_groupContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_logfile_groupContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *Alter_logfile_groupContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *Alter_logfile_groupContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Alter_logfile_groupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Alter_logfile_groupContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Alter_logfile_groupContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *Alter_logfile_groupContext) Filesize_literal() IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Alter_logfile_groupContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *Alter_logfile_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_logfile_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_logfile_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_logfile_group(s)
	}
}

func (s *Alter_logfile_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_logfile_group(s)
	}
}

func (s *Alter_logfile_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_logfile_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_logfile_group() (localctx IAlter_logfile_groupContext) {
	localctx = NewAlter_logfile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MySqlParserRULE_alter_logfile_group)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1943)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(1944)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(1945)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(1946)
		p.Id_()
	}
	{
		p.SetState(1947)
		p.Match(MySqlParserADD)
	}
	{
		p.SetState(1948)
		p.Match(MySqlParserUNDOFILE)
	}
	{
		p.SetState(1949)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(1955)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(1950)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		p.SetState(1952)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(1951)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(1954)
			p.Filesize_literal()
		}

	}
	p.SetState(1958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(1957)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(1960)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(1962)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(1961)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(1964)
		p.Engine_name()
	}

	return localctx
}

// IAlter_procedureContext is an interface to support dynamic dispatch.
type IAlter_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_procedureContext differentiates from other interfaces.
	IsAlter_procedureContext()
}

type Alter_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_procedureContext() *Alter_procedureContext {
	var p = new(Alter_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_procedure
	return p
}

func (*Alter_procedureContext) IsAlter_procedureContext() {}

func NewAlter_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_procedureContext {
	var p = new(Alter_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_procedure

	return p
}

func (s *Alter_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_procedureContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *Alter_procedureContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Alter_procedureContext) AllRoutine_characteristic() []IRoutine_characteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem())
	var tst = make([]IRoutine_characteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRoutine_characteristicContext)
		}
	}

	return tst
}

func (s *Alter_procedureContext) Routine_characteristic(i int) IRoutine_characteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_characteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRoutine_characteristicContext)
}

func (s *Alter_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_procedure(s)
	}
}

func (s *Alter_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_procedure(s)
	}
}

func (s *Alter_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_procedure() (localctx IAlter_procedureContext) {
	localctx = NewAlter_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MySqlParserRULE_alter_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1966)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(1967)
		p.Match(MySqlParserPROCEDURE)
	}
	{
		p.SetState(1968)
		p.Full_id()
	}
	p.SetState(1972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDETERMINISTIC || (((_la-95)&-(0x1f+1)) == 0 && ((1<<uint((_la-95)))&((1<<(MySqlParserMODIFIES-95))|(1<<(MySqlParserNOT-95))|(1<<(MySqlParserREADS-95)))) != 0) || _la == MySqlParserSQL || _la == MySqlParserCOMMENT || _la == MySqlParserCONTAINS || _la == MySqlParserLANGUAGE || _la == MySqlParserNO {
		{
			p.SetState(1969)
			p.Routine_characteristic()
		}

		p.SetState(1974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlter_serverContext is an interface to support dynamic dispatch.
type IAlter_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_serverContext differentiates from other interfaces.
	IsAlter_serverContext()
}

type Alter_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_serverContext() *Alter_serverContext {
	var p = new(Alter_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_server
	return p
}

func (*Alter_serverContext) IsAlter_serverContext() {}

func NewAlter_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_serverContext {
	var p = new(Alter_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_server

	return p
}

func (s *Alter_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_serverContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_serverContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *Alter_serverContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_serverContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *Alter_serverContext) AllServer_option() []IServer_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IServer_optionContext)(nil)).Elem())
	var tst = make([]IServer_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IServer_optionContext)
		}
	}

	return tst
}

func (s *Alter_serverContext) Server_option(i int) IServer_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IServer_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IServer_optionContext)
}

func (s *Alter_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_server(s)
	}
}

func (s *Alter_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_server(s)
	}
}

func (s *Alter_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_server() (localctx IAlter_serverContext) {
	localctx = NewAlter_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MySqlParserRULE_alter_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1975)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(1976)
		p.Match(MySqlParserSERVER)
	}
	{
		p.SetState(1977)
		p.Id_()
	}
	{
		p.SetState(1978)
		p.Match(MySqlParserOPTIONS)
	}
	{
		p.SetState(1979)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(1980)
		p.Server_option()
	}
	p.SetState(1985)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(1981)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(1982)
			p.Server_option()
		}

		p.SetState(1987)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1988)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IAlter_tableContext is an interface to support dynamic dispatch.
type IAlter_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tableContext differentiates from other interfaces.
	IsAlter_tableContext()
}

type Alter_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tableContext() *Alter_tableContext {
	var p = new(Alter_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_table
	return p
}

func (*Alter_tableContext) IsAlter_tableContext() {}

func NewAlter_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tableContext {
	var p = new(Alter_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_table

	return p
}

func (s *Alter_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tableContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Alter_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Alter_tableContext) AllAlter_table_spec() []IAlter_table_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAlter_table_specContext)(nil)).Elem())
	var tst = make([]IAlter_table_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAlter_table_specContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Alter_table_spec(i int) IAlter_table_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlter_table_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAlter_table_specContext)
}

func (s *Alter_tableContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Alter_tableContext) AllPartition_options() []IPartition_optionsContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartition_optionsContext)(nil)).Elem())
	var tst = make([]IPartition_optionsContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartition_optionsContext)
		}
	}

	return tst
}

func (s *Alter_tableContext) Partition_options(i int) IPartition_optionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_optionsContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartition_optionsContext)
}

func (s *Alter_tableContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *Alter_tableContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *Alter_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_table(s)
	}
}

func (s *Alter_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_table(s)
	}
}

func (s *Alter_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_table() (localctx IAlter_tableContext) {
	localctx = NewAlter_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MySqlParserRULE_alter_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1990)
		p.Match(MySqlParserALTER)
	}
	p.SetState(1992)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserOFFLINE || _la == MySqlParserONLINE {
		p.SetState(1991)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(1995)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(1994)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(1997)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(1998)
		p.Table_name()
	}
	{
		p.SetState(1999)
		p.Alter_table_spec()
	}
	p.SetState(2004)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2000)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2001)
			p.Alter_table_spec()
		}

		p.SetState(2006)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2010)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserPARTITION {
		{
			p.SetState(2007)
			p.Partition_options()
		}

		p.SetState(2012)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAlter_tablespaceContext is an interface to support dynamic dispatch.
type IAlter_tablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_tablespaceContext differentiates from other interfaces.
	IsAlter_tablespaceContext()
}

type Alter_tablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_tablespaceContext() *Alter_tablespaceContext {
	var p = new(Alter_tablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_tablespace
	return p
}

func (*Alter_tablespaceContext) IsAlter_tablespaceContext() {}

func NewAlter_tablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_tablespaceContext {
	var p = new(Alter_tablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_tablespace

	return p
}

func (s *Alter_tablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_tablespaceContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_tablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Alter_tablespaceContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Alter_tablespaceContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *Alter_tablespaceContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Alter_tablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Alter_tablespaceContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Alter_tablespaceContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *Alter_tablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Alter_tablespaceContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *Alter_tablespaceContext) Filesize_literal() IFilesize_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilesize_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilesize_literalContext)
}

func (s *Alter_tablespaceContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *Alter_tablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_tablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_tablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_tablespace(s)
	}
}

func (s *Alter_tablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_tablespace(s)
	}
}

func (s *Alter_tablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_tablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_tablespace() (localctx IAlter_tablespaceContext) {
	localctx = NewAlter_tablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MySqlParserRULE_alter_tablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2013)
		p.Match(MySqlParserALTER)
	}
	{
		p.SetState(2014)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2015)
		p.Id_()
	}
	p.SetState(2016)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserADD || _la == MySqlParserDROP) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(2017)
		p.Match(MySqlParserDATAFILE)
	}
	{
		p.SetState(2018)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2022)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINITIAL_SIZE {
		{
			p.SetState(2019)
			p.Match(MySqlParserINITIAL_SIZE)
		}
		{
			p.SetState(2020)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2021)
			p.Filesize_literal()
		}

	}
	p.SetState(2025)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWAIT {
		{
			p.SetState(2024)
			p.Match(MySqlParserWAIT)
		}

	}
	{
		p.SetState(2027)
		p.Match(MySqlParserENGINE)
	}
	p.SetState(2029)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEQUAL_SYMBOL {
		{
			p.SetState(2028)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	}
	{
		p.SetState(2031)
		p.Engine_name()
	}

	return localctx
}

// IAlter_viewContext is an interface to support dynamic dispatch.
type IAlter_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAlg_type returns the alg_type token.
	GetAlg_type() antlr.Token

	// GetSec_context returns the sec_context token.
	GetSec_context() antlr.Token

	// GetCheck_opt returns the check_opt token.
	GetCheck_opt() antlr.Token

	// SetAlg_type sets the alg_type token.
	SetAlg_type(antlr.Token)

	// SetSec_context sets the sec_context token.
	SetSec_context(antlr.Token)

	// SetCheck_opt sets the check_opt token.
	SetCheck_opt(antlr.Token)

	// IsAlter_viewContext differentiates from other interfaces.
	IsAlter_viewContext()
}

type Alter_viewContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	alg_type    antlr.Token
	sec_context antlr.Token
	check_opt   antlr.Token
}

func NewEmptyAlter_viewContext() *Alter_viewContext {
	var p = new(Alter_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_view
	return p
}

func (*Alter_viewContext) IsAlter_viewContext() {}

func NewAlter_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_viewContext {
	var p = new(Alter_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_view

	return p
}

func (s *Alter_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_viewContext) GetAlg_type() antlr.Token { return s.alg_type }

func (s *Alter_viewContext) GetSec_context() antlr.Token { return s.sec_context }

func (s *Alter_viewContext) GetCheck_opt() antlr.Token { return s.check_opt }

func (s *Alter_viewContext) SetAlg_type(v antlr.Token) { s.alg_type = v }

func (s *Alter_viewContext) SetSec_context(v antlr.Token) { s.sec_context = v }

func (s *Alter_viewContext) SetCheck_opt(v antlr.Token) { s.check_opt = v }

func (s *Alter_viewContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *Alter_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *Alter_viewContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Alter_viewContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *Alter_viewContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Alter_viewContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Alter_viewContext) Owner_statement() IOwner_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOwner_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOwner_statementContext)
}

func (s *Alter_viewContext) SQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL, 0)
}

func (s *Alter_viewContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *Alter_viewContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Alter_viewContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Alter_viewContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *Alter_viewContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *Alter_viewContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *Alter_viewContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *Alter_viewContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *Alter_viewContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *Alter_viewContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *Alter_viewContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *Alter_viewContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Alter_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Alter_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlter_view(s)
	}
}

func (s *Alter_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlter_view(s)
	}
}

func (s *Alter_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlter_view(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_view() (localctx IAlter_viewContext) {
	localctx = NewAlter_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MySqlParserRULE_alter_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2033)
		p.Match(MySqlParserALTER)
	}
	p.SetState(2037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(2034)
			p.Match(MySqlParserALGORITHM)
		}
		{
			p.SetState(2035)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		p.SetState(2036)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Alter_viewContext).alg_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMERGE || _la == MySqlParserTEMPTABLE || _la == MySqlParserUNDEFINED) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Alter_viewContext).alg_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFINER {
		{
			p.SetState(2039)
			p.Owner_statement()
		}

	}
	p.SetState(2045)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSQL {
		{
			p.SetState(2042)
			p.Match(MySqlParserSQL)
		}
		{
			p.SetState(2043)
			p.Match(MySqlParserSECURITY)
		}
		p.SetState(2044)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Alter_viewContext).sec_context = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFINER || _la == MySqlParserINVOKER) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Alter_viewContext).sec_context = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(2047)
		p.Match(MySqlParserVIEW)
	}
	{
		p.SetState(2048)
		p.Full_id()
	}
	p.SetState(2053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2049)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2050)
			p.Id_list()
		}
		{
			p.SetState(2051)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(2055)
		p.Match(MySqlParserAS)
	}
	{
		p.SetState(2056)
		p.Select_statement()
	}
	p.SetState(2063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(2057)
			p.Match(MySqlParserWITH)
		}
		p.SetState(2059)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCASCADED || _la == MySqlParserLOCAL {
			p.SetState(2058)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*Alter_viewContext).check_opt = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCASCADED || _la == MySqlParserLOCAL) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*Alter_viewContext).check_opt = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(2061)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2062)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IAlter_table_specContext is an interface to support dynamic dispatch.
type IAlter_table_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_table_specContext differentiates from other interfaces.
	IsAlter_table_specContext()
}

type Alter_table_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_table_specContext() *Alter_table_specContext {
	var p = new(Alter_table_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_table_spec
	return p
}

func (*Alter_table_specContext) IsAlter_table_specContext() {}

func NewAlter_table_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_table_specContext {
	var p = new(Alter_table_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_table_spec

	return p
}

func (s *Alter_table_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_table_specContext) CopyFrom(ctx *Alter_table_specContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Alter_table_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_table_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AltblDropPKContext struct {
	*Alter_table_specContext
}

func NewAltblDropPKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDropPKContext {
	var p = new(AltblDropPKContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDropPKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDropPKContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblDropPKContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AltblDropPKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblDropPKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDropPK(s)
	}
}

func (s *AltblDropPKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDropPK(s)
	}
}

func (s *AltblDropPKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDropPK(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDisKeyContext struct {
	*Alter_table_specContext
}

func NewAltblDisKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDisKeyContext {
	var p = new(AltblDisKeyContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDisKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDisKeyContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *AltblDisKeyContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AltblDisKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDisKey(s)
	}
}

func (s *AltblDisKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDisKey(s)
	}
}

func (s *AltblDisKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDisKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddPKContext struct {
	*Alter_table_specContext
}

func NewAltblAddPKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddPKContext {
	var p = new(AltblAddPKContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddPKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddPKContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddPKContext) PRIMARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIMARY, 0)
}

func (s *AltblAddPKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblAddPKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *AltblAddPKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AltblAddPKContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *AltblAddPKContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *AltblAddPKContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *AltblAddPKContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddPKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddPK(s)
	}
}

func (s *AltblAddPKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddPK(s)
	}
}

func (s *AltblAddPKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddPK(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDropIndexContext struct {
	*Alter_table_specContext
}

func NewAltblDropIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDropIndexContext {
	var p = new(AltblDropIndexContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDropIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDropIndexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblDropIndexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblDropIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AltblDropIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblDropIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDropIndex(s)
	}
}

func (s *AltblDropIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDropIndex(s)
	}
}

func (s *AltblDropIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDropIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddPartContext struct {
	*Alter_table_specContext
}

func NewAltblAddPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddPartContext {
	var p = new(AltblAddPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddPartContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblAddPartContext) Partition_def() IPartition_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_defContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPartition_defContext)
}

func (s *AltblAddPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddPart(s)
	}
}

func (s *AltblAddPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddPart(s)
	}
}

func (s *AltblAddPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblImportPartContext struct {
	*Alter_table_specContext
}

func NewAltblImportPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblImportPartContext {
	var p = new(AltblImportPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblImportPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblImportPartContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AltblImportPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblImportPartContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AltblImportPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblImportPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblImportPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblImportPart(s)
	}
}

func (s *AltblImportPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblImportPart(s)
	}
}

func (s *AltblImportPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblImportPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblResortContext struct {
	*Alter_table_specContext
}

func NewAltblResortContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblResortContext {
	var p = new(AltblResortContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblResortContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblResortContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *AltblResortContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AltblResortContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblResortContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblResort(s)
	}
}

func (s *AltblResortContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblResort(s)
	}
}

func (s *AltblResortContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblResort(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblUpgrPartContext struct {
	*Alter_table_specContext
}

func NewAltblUpgrPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblUpgrPartContext {
	var p = new(AltblUpgrPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblUpgrPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblUpgrPartContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *AltblUpgrPartContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AltblUpgrPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblUpgrPart(s)
	}
}

func (s *AltblUpgrPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblUpgrPart(s)
	}
}

func (s *AltblUpgrPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblUpgrPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblForceContext struct {
	*Alter_table_specContext
}

func NewAltblForceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblForceContext {
	var p = new(AltblForceContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblForceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblForceContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *AltblForceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblForce(s)
	}
}

func (s *AltblForceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblForce(s)
	}
}

func (s *AltblForceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblForce(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblRenameTblContext struct {
	*Alter_table_specContext
}

func NewAltblRenameTblContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblRenameTblContext {
	var p = new(AltblRenameTblContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblRenameTblContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblRenameTblContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *AltblRenameTblContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblRenameTblContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AltblRenameTblContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AltblRenameTblContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblRenameTbl(s)
	}
}

func (s *AltblRenameTblContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblRenameTbl(s)
	}
}

func (s *AltblRenameTblContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblRenameTbl(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDropPartContext struct {
	*Alter_table_specContext
}

func NewAltblDropPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDropPartContext {
	var p = new(AltblDropPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDropPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDropPartContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblDropPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblDropPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblDropPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDropPart(s)
	}
}

func (s *AltblDropPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDropPart(s)
	}
}

func (s *AltblDropPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDropPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblImpTblSpaceContext struct {
	*Alter_table_specContext
}

func NewAltblImpTblSpaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblImpTblSpaceContext {
	var p = new(AltblImpTblSpaceContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblImpTblSpaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblImpTblSpaceContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *AltblImpTblSpaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AltblImpTblSpaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblImpTblSpace(s)
	}
}

func (s *AltblImpTblSpaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblImpTblSpace(s)
	}
}

func (s *AltblImpTblSpaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblImpTblSpace(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAnalPartContext struct {
	*Alter_table_specContext
}

func NewAltblAnalPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAnalPartContext {
	var p = new(AltblAnalPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAnalPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAnalPartContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *AltblAnalPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblAnalPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblAnalPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblAnalPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAnalPart(s)
	}
}

func (s *AltblAnalPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAnalPart(s)
	}
}

func (s *AltblAnalPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAnalPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblTruncPartContext struct {
	*Alter_table_specContext
}

func NewAltblTruncPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblTruncPartContext {
	var p = new(AltblTruncPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblTruncPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblTruncPartContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *AltblTruncPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblTruncPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblTruncPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblTruncPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblTruncPart(s)
	}
}

func (s *AltblTruncPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblTruncPart(s)
	}
}

func (s *AltblTruncPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblTruncPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAlgContext struct {
	*Alter_table_specContext
}

func NewAltblAlgContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAlgContext {
	var p = new(AltblAlgContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAlgContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAlgContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *AltblAlgContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AltblAlgContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *AltblAlgContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *AltblAlgContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAlg(s)
	}
}

func (s *AltblAlgContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAlg(s)
	}
}

func (s *AltblAlgContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAlg(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDefCharsetContext struct {
	*Alter_table_specContext
}

func NewAltblDefCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDefCharsetContext {
	var p = new(AltblDefCharsetContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDefCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDefCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AltblDefCharsetContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AltblDefCharsetContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *AltblDefCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AltblDefCharsetContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AltblDefCharsetContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *AltblDefCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDefCharset(s)
	}
}

func (s *AltblDefCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDefCharset(s)
	}
}

func (s *AltblDefCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDefCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddSpecIndexContext struct {
	*Alter_table_specContext
}

func NewAltblAddSpecIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddSpecIndexContext {
	var p = new(AltblAddSpecIndexContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddSpecIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddSpecIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddSpecIndexContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *AltblAddSpecIndexContext) FULLTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULLTEXT, 0)
}

func (s *AltblAddSpecIndexContext) SPATIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSPATIAL, 0)
}

func (s *AltblAddSpecIndexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddSpecIndexContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *AltblAddSpecIndexContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *AltblAddSpecIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AltblAddSpecIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblAddSpecIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddSpecIndex(s)
	}
}

func (s *AltblAddSpecIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddSpecIndex(s)
	}
}

func (s *AltblAddSpecIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddSpecIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblValidContext struct {
	*Alter_table_specContext
}

func NewAltblValidContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblValidContext {
	var p = new(AltblValidContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblValidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblValidContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AltblValidContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AltblValidContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AltblValidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblValid(s)
	}
}

func (s *AltblValidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblValid(s)
	}
}

func (s *AltblValidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblValid(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblRebuildPartContext struct {
	*Alter_table_specContext
}

func NewAltblRebuildPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblRebuildPartContext {
	var p = new(AltblRebuildPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblRebuildPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblRebuildPartContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *AltblRebuildPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblRebuildPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblRebuildPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblRebuildPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblRebuildPart(s)
	}
}

func (s *AltblRebuildPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblRebuildPart(s)
	}
}

func (s *AltblRebuildPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblRebuildPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblRepairPartContext struct {
	*Alter_table_specContext
}

func NewAltblRepairPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblRepairPartContext {
	var p = new(AltblRepairPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblRepairPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblRepairPartContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *AltblRepairPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblRepairPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblRepairPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblRepairPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblRepairPart(s)
	}
}

func (s *AltblRepairPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblRepairPart(s)
	}
}

func (s *AltblRepairPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblRepairPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblColDropContext struct {
	*Alter_table_specContext
}

func NewAltblColDropContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblColDropContext {
	var p = new(AltblColDropContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblColDropContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblColDropContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblColDropContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblColDropContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblColDropContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblColDrop(s)
	}
}

func (s *AltblColDropContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblColDrop(s)
	}
}

func (s *AltblColDropContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblColDrop(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblExchPartContext struct {
	*Alter_table_specContext
}

func NewAltblExchPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblExchPartContext {
	var p = new(AltblExchPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblExchPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblExchPartContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *AltblExchPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblExchPartContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblExchPartContext) AllWITH() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWITH)
}

func (s *AltblExchPartContext) WITH(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, i)
}

func (s *AltblExchPartContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *AltblExchPartContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *AltblExchPartContext) VALIDATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATION, 0)
}

func (s *AltblExchPartContext) WITHOUT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHOUT, 0)
}

func (s *AltblExchPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblExchPart(s)
	}
}

func (s *AltblExchPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblExchPart(s)
	}
}

func (s *AltblExchPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblExchPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddFKContext struct {
	*Alter_table_specContext
}

func NewAltblAddFKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddFKContext {
	var p = new(AltblAddFKContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddFKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddFKContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddFKContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AltblAddFKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblAddFKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *AltblAddFKContext) Reference_definition() IReference_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReference_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReference_definitionContext)
}

func (s *AltblAddFKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AltblAddFKContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblAddFKContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddFKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddFK(s)
	}
}

func (s *AltblAddFKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddFK(s)
	}
}

func (s *AltblAddFKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddFK(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDiscartPartContext struct {
	*Alter_table_specContext
}

func NewAltblDiscartPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDiscartPartContext {
	var p = new(AltblDiscartPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDiscartPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDiscartPartContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AltblDiscartPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblDiscartPartContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AltblDiscartPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblDiscartPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblDiscartPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDiscartPart(s)
	}
}

func (s *AltblDiscartPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDiscartPart(s)
	}
}

func (s *AltblDiscartPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDiscartPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblCheckPartContext struct {
	*Alter_table_specContext
}

func NewAltblCheckPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblCheckPartContext {
	var p = new(AltblCheckPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblCheckPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblCheckPartContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *AltblCheckPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblCheckPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblCheckPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblCheckPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblCheckPart(s)
	}
}

func (s *AltblCheckPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblCheckPart(s)
	}
}

func (s *AltblCheckPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblCheckPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblColChangeContext struct {
	*Alter_table_specContext
}

func NewAltblColChangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblColChangeContext {
	var p = new(AltblColChangeContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblColChangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblColChangeContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *AltblColChangeContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblColChangeContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblColChangeContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *AltblColChangeContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblColChangeContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AltblColChangeContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AltblColChangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblColChange(s)
	}
}

func (s *AltblColChangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblColChange(s)
	}
}

func (s *AltblColChangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblColChange(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblColDefContext struct {
	*Alter_table_specContext
}

func NewAltblColDefContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblColDefContext {
	var p = new(AltblColDefContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblColDefContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblColDefContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AltblColDefContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblColDefContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AltblColDefContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AltblColDefContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *AltblColDefContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblColDefContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblColDefContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblColDef(s)
	}
}

func (s *AltblColDefContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblColDef(s)
	}
}

func (s *AltblColDefContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblColDef(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddColContext struct {
	*Alter_table_specContext
}

func NewAltblAddColContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddColContext {
	var p = new(AltblAddColContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddColContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddColContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblAddColContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddColContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *AltblAddColContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblAddColContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AltblAddColContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AltblAddColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddCol(s)
	}
}

func (s *AltblAddColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddCol(s)
	}
}

func (s *AltblAddColContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddCol(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDisTblspaceContext struct {
	*Alter_table_specContext
}

func NewAltblDisTblspaceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDisTblspaceContext {
	var p = new(AltblDisTblspaceContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDisTblspaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDisTblspaceContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *AltblDisTblspaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *AltblDisTblspaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDisTblspace(s)
	}
}

func (s *AltblDisTblspaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDisTblspace(s)
	}
}

func (s *AltblDisTblspaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDisTblspace(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddIndexContext struct {
	*Alter_table_specContext
}

func NewAltblAddIndexContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddIndexContext {
	var p = new(AltblAddIndexContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddIndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddIndexContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddIndexContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *AltblAddIndexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AltblAddIndexContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblAddIndexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddIndexContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *AltblAddIndexContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *AltblAddIndexContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *AltblAddIndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddIndex(s)
	}
}

func (s *AltblAddIndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddIndex(s)
	}
}

func (s *AltblAddIndexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddIndex(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddUKContext struct {
	*Alter_table_specContext
}

func NewAltblAddUKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddUKContext {
	var p = new(AltblAddUKContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddUKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddUKContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddUKContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIQUE, 0)
}

func (s *AltblAddUKContext) Index_colname_list() IIndex_colname_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_colname_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_colname_listContext)
}

func (s *AltblAddUKContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSTRAINT, 0)
}

func (s *AltblAddUKContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblAddUKContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddUKContext) Index_type() IIndex_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndex_typeContext)
}

func (s *AltblAddUKContext) AllIndex_option() []IIndex_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem())
	var tst = make([]IIndex_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_optionContext)
		}
	}

	return tst
}

func (s *AltblAddUKContext) Index_option(i int) IIndex_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_optionContext)
}

func (s *AltblAddUKContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *AltblAddUKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblAddUKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddUK(s)
	}
}

func (s *AltblAddUKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddUK(s)
	}
}

func (s *AltblAddUKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddUK(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblColModContext struct {
	*Alter_table_specContext
}

func NewAltblColModContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblColModContext {
	var p = new(AltblColModContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblColModContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblColModContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *AltblColModContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblColModContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblColModContext) Column_definition() IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *AltblColModContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblColModContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *AltblColModContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *AltblColModContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblColMod(s)
	}
}

func (s *AltblColModContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblColMod(s)
	}
}

func (s *AltblColModContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblColMod(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblCoalPartContext struct {
	*Alter_table_specContext
}

func NewAltblCoalPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblCoalPartContext {
	var p = new(AltblCoalPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblCoalPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblCoalPartContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *AltblCoalPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblCoalPartContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *AltblCoalPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblCoalPart(s)
	}
}

func (s *AltblCoalPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblCoalPart(s)
	}
}

func (s *AltblCoalPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblCoalPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblOptimPartContext struct {
	*Alter_table_specContext
}

func NewAltblOptimPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblOptimPartContext {
	var p = new(AltblOptimPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblOptimPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblOptimPartContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *AltblOptimPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblOptimPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblOptimPartContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *AltblOptimPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblOptimPart(s)
	}
}

func (s *AltblOptimPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblOptimPart(s)
	}
}

func (s *AltblOptimPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblOptimPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblEnKeyContext struct {
	*Alter_table_specContext
}

func NewAltblEnKeyContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblEnKeyContext {
	var p = new(AltblEnKeyContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblEnKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblEnKeyContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *AltblEnKeyContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *AltblEnKeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblEnKey(s)
	}
}

func (s *AltblEnKeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblEnKey(s)
	}
}

func (s *AltblEnKeyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblEnKey(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblLockContext struct {
	*Alter_table_specContext
}

func NewAltblLockContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblLockContext {
	var p = new(AltblLockContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblLockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblLockContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *AltblLockContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *AltblLockContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AltblLockContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *AltblLockContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *AltblLockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblLock(s)
	}
}

func (s *AltblLockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblLock(s)
	}
}

func (s *AltblLockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblLock(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblRemovePartContext struct {
	*Alter_table_specContext
}

func NewAltblRemovePartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblRemovePartContext {
	var p = new(AltblRemovePartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblRemovePartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblRemovePartContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *AltblRemovePartContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *AltblRemovePartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblRemovePart(s)
	}
}

func (s *AltblRemovePartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblRemovePart(s)
	}
}

func (s *AltblRemovePartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblRemovePart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblConvertContext struct {
	*Alter_table_specContext
}

func NewAltblConvertContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblConvertContext {
	var p = new(AltblConvertContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblConvertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblConvertContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *AltblConvertContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *AltblConvertContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *AltblConvertContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *AltblConvertContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *AltblConvertContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *AltblConvertContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *AltblConvertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblConvert(s)
	}
}

func (s *AltblConvertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblConvert(s)
	}
}

func (s *AltblConvertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblConvert(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblTableOptContext struct {
	*Alter_table_specContext
}

func NewAltblTableOptContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblTableOptContext {
	var p = new(AltblTableOptContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblTableOptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblTableOptContext) Table_option() ITable_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_optionContext)
}

func (s *AltblTableOptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblTableOpt(s)
	}
}

func (s *AltblTableOptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblTableOpt(s)
	}
}

func (s *AltblTableOptContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblTableOpt(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblReorgPartContext struct {
	*Alter_table_specContext
}

func NewAltblReorgPartContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblReorgPartContext {
	var p = new(AltblReorgPartContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblReorgPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblReorgPartContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *AltblReorgPartContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AltblReorgPartContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AltblReorgPartContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *AltblReorgPartContext) AllPartition_def() []IPartition_defContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPartition_defContext)(nil)).Elem())
	var tst = make([]IPartition_defContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPartition_defContext)
		}
	}

	return tst
}

func (s *AltblReorgPartContext) Partition_def(i int) IPartition_defContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPartition_defContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPartition_defContext)
}

func (s *AltblReorgPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblReorgPart(s)
	}
}

func (s *AltblReorgPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblReorgPart(s)
	}
}

func (s *AltblReorgPartContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblReorgPart(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblDropFKContext struct {
	*Alter_table_specContext
}

func NewAltblDropFKContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblDropFKContext {
	var p = new(AltblDropFKContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblDropFKContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblDropFKContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *AltblDropFKContext) FOREIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOREIGN, 0)
}

func (s *AltblDropFKContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *AltblDropFKContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblDropFKContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblDropFK(s)
	}
}

func (s *AltblDropFKContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblDropFK(s)
	}
}

func (s *AltblDropFKContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblDropFK(s)

	default:
		return t.VisitChildren(s)
	}
}

type AltblAddColsContext struct {
	*Alter_table_specContext
}

func NewAltblAddColsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AltblAddColsContext {
	var p = new(AltblAddColsContext)

	p.Alter_table_specContext = NewEmptyAlter_table_specContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_table_specContext))

	return p
}

func (s *AltblAddColsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AltblAddColsContext) ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserADD, 0)
}

func (s *AltblAddColsContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *AltblAddColsContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AltblAddColsContext) AllColumn_definition() []IColumn_definitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem())
	var tst = make([]IColumn_definitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IColumn_definitionContext)
		}
	}

	return tst
}

func (s *AltblAddColsContext) Column_definition(i int) IColumn_definitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumn_definitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IColumn_definitionContext)
}

func (s *AltblAddColsContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN, 0)
}

func (s *AltblAddColsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAltblAddCols(s)
	}
}

func (s *AltblAddColsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAltblAddCols(s)
	}
}

func (s *AltblAddColsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAltblAddCols(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_table_spec() (localctx IAlter_table_specContext) {
	localctx = NewAlter_table_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MySqlParserRULE_alter_table_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2371)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 311, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAltblTableOptContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2065)
			p.Table_option()
		}

	case 2:
		localctx = NewAltblAddColContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2066)
			p.Match(MySqlParserADD)
		}
		p.SetState(2068)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2067)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2070)
			p.Id_()
		}
		{
			p.SetState(2071)
			p.Column_definition()
		}
		p.SetState(2075)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2072)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2073)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2074)
				p.Id_()
			}

		case MySqlParserEOF, MySqlParserPARTITION, MySqlParserMINUS, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 3:
		localctx = NewAltblAddColsContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2077)
			p.Match(MySqlParserADD)
		}
		p.SetState(2079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2078)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2081)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2082)
			p.Id_()
		}
		{
			p.SetState(2083)
			p.Column_definition()
		}
		p.SetState(2090)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2084)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2085)
				p.Id_()
			}
			{
				p.SetState(2086)
				p.Column_definition()
			}

			p.SetState(2092)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2093)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewAltblAddIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2095)
			p.Match(MySqlParserADD)
		}
		p.SetState(2096)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(2098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(2097)
				p.Id_()
			}

		}
		p.SetState(2101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2100)
				p.Index_type()
			}

		}
		{
			p.SetState(2103)
			p.Index_colname_list()
		}
		p.SetState(2107)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(2104)
				p.Index_option()
			}

			p.SetState(2109)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 5:
		localctx = NewAltblAddPKContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2110)
			p.Match(MySqlParserADD)
		}
		p.SetState(2115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2111)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2113)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(2112)
					p.Id_()
				}

			}

		}
		{
			p.SetState(2117)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2118)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2120)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2119)
				p.Index_type()
			}

		}
		{
			p.SetState(2122)
			p.Index_colname_list()
		}
		p.SetState(2126)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(2123)
				p.Index_option()
			}

			p.SetState(2128)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 6:
		localctx = NewAltblAddUKContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(2129)
			p.Match(MySqlParserADD)
		}
		p.SetState(2134)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2130)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2132)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(2131)
					p.Id_()
				}

			}

		}
		{
			p.SetState(2136)
			p.Match(MySqlParserUNIQUE)
		}
		p.SetState(2138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(2137)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(2141)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(2140)
				p.Id_()
			}

		}
		p.SetState(2144)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(2143)
				p.Index_type()
			}

		}
		{
			p.SetState(2146)
			p.Index_colname_list()
		}
		p.SetState(2150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(2147)
				p.Index_option()
			}

			p.SetState(2152)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 7:
		localctx = NewAltblAddSpecIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(2153)
			p.Match(MySqlParserADD)
		}
		p.SetState(2154)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFULLTEXT || _la == MySqlParserSPATIAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(2156)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(2155)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(2159)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(2158)
				p.Id_()
			}

		}
		{
			p.SetState(2161)
			p.Index_colname_list()
		}
		p.SetState(2165)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserUSING || _la == MySqlParserWITH || _la == MySqlParserCOMMENT || _la == MySqlParserKEY_BLOCK_SIZE {
			{
				p.SetState(2162)
				p.Index_option()
			}

			p.SetState(2167)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 8:
		localctx = NewAltblAddFKContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(2168)
			p.Match(MySqlParserADD)
		}
		p.SetState(2173)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCONSTRAINT {
			{
				p.SetState(2169)
				p.Match(MySqlParserCONSTRAINT)
			}
			p.SetState(2171)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
				{
					p.SetState(2170)
					p.Id_()
				}

			}

		}
		{
			p.SetState(2175)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2176)
			p.Match(MySqlParserKEY)
		}
		p.SetState(2178)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(2177)
				p.Id_()
			}

		}
		{
			p.SetState(2180)
			p.Index_colname_list()
		}
		{
			p.SetState(2181)
			p.Reference_definition()
		}

	case 9:
		localctx = NewAltblAlgContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(2183)
			p.Match(MySqlParserALGORITHM)
		}
		p.SetState(2185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2184)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(2187)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 10:
		localctx = NewAltblColDefContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(2188)
			p.Match(MySqlParserALTER)
		}
		p.SetState(2190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2189)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2192)
			p.Id_()
		}
		p.SetState(2198)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSET:
			{
				p.SetState(2193)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(2194)
				p.Match(MySqlParserDEFAULT)
			}
			{
				p.SetState(2195)
				p.Default_value()
			}

		case MySqlParserDROP:
			{
				p.SetState(2196)
				p.Match(MySqlParserDROP)
			}
			{
				p.SetState(2197)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 11:
		localctx = NewAltblColChangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(2200)
			p.Match(MySqlParserCHANGE)
		}
		p.SetState(2202)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2201)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2204)
			p.Id_()
		}
		{
			p.SetState(2205)
			p.Id_()
		}
		{
			p.SetState(2206)
			p.Column_definition()
		}
		p.SetState(2210)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2207)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2208)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2209)
				p.Id_()
			}

		case MySqlParserEOF, MySqlParserPARTITION, MySqlParserMINUS, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 12:
		localctx = NewAltblLockContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(2212)
			p.Match(MySqlParserLOCK)
		}
		p.SetState(2214)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2213)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(2216)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 13:
		localctx = NewAltblColModContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(2217)
			p.Match(MySqlParserMODIFY)
		}
		p.SetState(2219)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2218)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2221)
			p.Id_()
		}
		{
			p.SetState(2222)
			p.Column_definition()
		}
		p.SetState(2226)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFIRST:
			{
				p.SetState(2223)
				p.Match(MySqlParserFIRST)
			}

		case MySqlParserAFTER:
			{
				p.SetState(2224)
				p.Match(MySqlParserAFTER)
			}
			{
				p.SetState(2225)
				p.Id_()
			}

		case MySqlParserEOF, MySqlParserPARTITION, MySqlParserMINUS, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	case 14:
		localctx = NewAltblColDropContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(2228)
			p.Match(MySqlParserDROP)
		}
		p.SetState(2230)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLUMN {
			{
				p.SetState(2229)
				p.Match(MySqlParserCOLUMN)
			}

		}
		{
			p.SetState(2232)
			p.Id_()
		}

	case 15:
		localctx = NewAltblDropPKContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(2233)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2234)
			p.Match(MySqlParserPRIMARY)
		}
		{
			p.SetState(2235)
			p.Match(MySqlParserKEY)
		}

	case 16:
		localctx = NewAltblDropIndexContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(2236)
			p.Match(MySqlParserDROP)
		}
		p.SetState(2237)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2238)
			p.Id_()
		}

	case 17:
		localctx = NewAltblDropFKContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(2239)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2240)
			p.Match(MySqlParserFOREIGN)
		}
		{
			p.SetState(2241)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2242)
			p.Id_()
		}

	case 18:
		localctx = NewAltblDisKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(2243)
			p.Match(MySqlParserDISABLE)
		}
		{
			p.SetState(2244)
			p.Match(MySqlParserKEYS)
		}

	case 19:
		localctx = NewAltblEnKeyContext(p, localctx)
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(2245)
			p.Match(MySqlParserENABLE)
		}
		{
			p.SetState(2246)
			p.Match(MySqlParserKEYS)
		}

	case 20:
		localctx = NewAltblRenameTblContext(p, localctx)
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(2247)
			p.Match(MySqlParserRENAME)
		}
		p.SetState(2249)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS || _la == MySqlParserTO {
			p.SetState(2248)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserAS || _la == MySqlParserTO) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(2251)
			p.Id_()
		}

	case 21:
		localctx = NewAltblResortContext(p, localctx)
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(2252)
			p.Match(MySqlParserORDER)
		}
		{
			p.SetState(2253)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(2254)
			p.Id_list()
		}

	case 22:
		localctx = NewAltblConvertContext(p, localctx)
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(2255)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(2256)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2257)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2258)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2259)
			p.Charset_name()
		}
		p.SetState(2262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2260)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2261)
				p.Collation_name()
			}

		}

	case 23:
		localctx = NewAltblDefCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 23)
		p.SetState(2265)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDEFAULT {
			{
				p.SetState(2264)
				p.Match(MySqlParserDEFAULT)
			}

		}
		{
			p.SetState(2267)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2268)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2269)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(2270)
			p.Charset_name()
		}
		p.SetState(2274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(2271)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(2272)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(2273)
				p.Collation_name()
			}

		}

	case 24:
		localctx = NewAltblDisTblspaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(2276)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2277)
			p.Match(MySqlParserTABLESPACE)
		}

	case 25:
		localctx = NewAltblImpTblSpaceContext(p, localctx)
		p.EnterOuterAlt(localctx, 25)
		{
			p.SetState(2278)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2279)
			p.Match(MySqlParserTABLESPACE)
		}

	case 26:
		localctx = NewAltblForceContext(p, localctx)
		p.EnterOuterAlt(localctx, 26)
		{
			p.SetState(2280)
			p.Match(MySqlParserFORCE)
		}

	case 27:
		localctx = NewAltblValidContext(p, localctx)
		p.EnterOuterAlt(localctx, 27)
		p.SetState(2281)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2282)
			p.Match(MySqlParserVALIDATION)
		}

	case 28:
		localctx = NewAltblAddPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 28)
		{
			p.SetState(2283)
			p.Match(MySqlParserADD)
		}
		{
			p.SetState(2284)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2285)
			p.Partition_def()
		}

	case 29:
		localctx = NewAltblDropPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 29)
		{
			p.SetState(2286)
			p.Match(MySqlParserDROP)
		}
		{
			p.SetState(2287)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2288)
			p.Id_list()
		}

	case 30:
		localctx = NewAltblDiscartPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 30)
		{
			p.SetState(2289)
			p.Match(MySqlParserDISCARD)
		}
		{
			p.SetState(2290)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2293)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2291)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2292)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2295)
			p.Match(MySqlParserTABLESPACE)
		}

	case 31:
		localctx = NewAltblImportPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 31)
		{
			p.SetState(2296)
			p.Match(MySqlParserIMPORT)
		}
		{
			p.SetState(2297)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2300)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2298)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2299)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(2302)
			p.Match(MySqlParserTABLESPACE)
		}

	case 32:
		localctx = NewAltblTruncPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 32)
		{
			p.SetState(2303)
			p.Match(MySqlParserTRUNCATE)
		}
		{
			p.SetState(2304)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2307)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2305)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2306)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 33:
		localctx = NewAltblCoalPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 33)
		{
			p.SetState(2309)
			p.Match(MySqlParserCOALESCE)
		}
		{
			p.SetState(2310)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2311)
			p.Decimal_literal()
		}

	case 34:
		localctx = NewAltblReorgPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 34)
		{
			p.SetState(2312)
			p.Match(MySqlParserREORGANIZE)
		}
		{
			p.SetState(2313)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2314)
			p.Id_list()
		}
		{
			p.SetState(2315)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(2316)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2317)
			p.Partition_def()
		}
		p.SetState(2322)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2318)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2319)
				p.Partition_def()
			}

			p.SetState(2324)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2325)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 35:
		localctx = NewAltblExchPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 35)
		{
			p.SetState(2327)
			p.Match(MySqlParserEXCHANGE)
		}
		{
			p.SetState(2328)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2329)
			p.Id_()
		}
		{
			p.SetState(2330)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(2331)
			p.Match(MySqlParserTABLE)
		}
		{
			p.SetState(2332)
			p.Table_name()
		}
		p.SetState(2335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH || _la == MySqlParserWITHOUT {
			p.SetState(2333)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserWITH || _la == MySqlParserWITHOUT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(2334)
				p.Match(MySqlParserVALIDATION)
			}

		}

	case 36:
		localctx = NewAltblAnalPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 36)
		{
			p.SetState(2337)
			p.Match(MySqlParserANALYZE)
		}
		{
			p.SetState(2338)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2341)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2339)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2340)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 37:
		localctx = NewAltblCheckPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 37)
		{
			p.SetState(2343)
			p.Match(MySqlParserCHECK)
		}
		{
			p.SetState(2344)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2347)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2345)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2346)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 38:
		localctx = NewAltblOptimPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 38)
		{
			p.SetState(2349)
			p.Match(MySqlParserOPTIMIZE)
		}
		{
			p.SetState(2350)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2353)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2351)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2352)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 39:
		localctx = NewAltblRebuildPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 39)
		{
			p.SetState(2355)
			p.Match(MySqlParserREBUILD)
		}
		{
			p.SetState(2356)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2359)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2357)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2358)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 40:
		localctx = NewAltblRepairPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 40)
		{
			p.SetState(2361)
			p.Match(MySqlParserREPAIR)
		}
		{
			p.SetState(2362)
			p.Match(MySqlParserPARTITION)
		}
		p.SetState(2365)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(2363)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(2364)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 41:
		localctx = NewAltblRemovePartContext(p, localctx)
		p.EnterOuterAlt(localctx, 41)
		{
			p.SetState(2367)
			p.Match(MySqlParserREMOVE)
		}
		{
			p.SetState(2368)
			p.Match(MySqlParserPARTITIONING)
		}

	case 42:
		localctx = NewAltblUpgrPartContext(p, localctx)
		p.EnterOuterAlt(localctx, 42)
		{
			p.SetState(2369)
			p.Match(MySqlParserUPGRADE)
		}
		{
			p.SetState(2370)
			p.Match(MySqlParserPARTITIONING)
		}

	}

	return localctx
}

// IDrop_databaseContext is an interface to support dynamic dispatch.
type IDrop_databaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_databaseContext differentiates from other interfaces.
	IsDrop_databaseContext()
}

type Drop_databaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_databaseContext() *Drop_databaseContext {
	var p = new(Drop_databaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_database
	return p
}

func (*Drop_databaseContext) IsDrop_databaseContext() {}

func NewDrop_databaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_databaseContext {
	var p = new(Drop_databaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_database

	return p
}

func (s *Drop_databaseContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_databaseContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_databaseContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_databaseContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *Drop_databaseContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *Drop_databaseContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_databaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_databaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_databaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_database(s)
	}
}

func (s *Drop_databaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_database(s)
	}
}

func (s *Drop_databaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_database(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_database() (localctx IDrop_databaseContext) {
	localctx = NewDrop_databaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MySqlParserRULE_drop_database)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2373)
		p.Match(MySqlParserDROP)
	}
	p.SetState(2374)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(2376)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2375)
			p.If_exists()
		}

	}
	{
		p.SetState(2378)
		p.Id_()
	}

	return localctx
}

// IDrop_eventContext is an interface to support dynamic dispatch.
type IDrop_eventContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_eventContext differentiates from other interfaces.
	IsDrop_eventContext()
}

type Drop_eventContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_eventContext() *Drop_eventContext {
	var p = new(Drop_eventContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_event
	return p
}

func (*Drop_eventContext) IsDrop_eventContext() {}

func NewDrop_eventContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_eventContext {
	var p = new(Drop_eventContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_event

	return p
}

func (s *Drop_eventContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_eventContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_eventContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *Drop_eventContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Drop_eventContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_eventContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_eventContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_eventContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_event(s)
	}
}

func (s *Drop_eventContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_event(s)
	}
}

func (s *Drop_eventContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_event(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_event() (localctx IDrop_eventContext) {
	localctx = NewDrop_eventContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MySqlParserRULE_drop_event)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2380)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2381)
		p.Match(MySqlParserEVENT)
	}
	p.SetState(2383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2382)
			p.If_exists()
		}

	}
	{
		p.SetState(2385)
		p.Full_id()
	}

	return localctx
}

// IDrop_indexContext is an interface to support dynamic dispatch.
type IDrop_indexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_indexContext differentiates from other interfaces.
	IsDrop_indexContext()
}

type Drop_indexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_indexContext() *Drop_indexContext {
	var p = new(Drop_indexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_index
	return p
}

func (*Drop_indexContext) IsDrop_indexContext() {}

func NewDrop_indexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_indexContext {
	var p = new(Drop_indexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_index

	return p
}

func (s *Drop_indexContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_indexContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_indexContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Drop_indexContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_indexContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Drop_indexContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Drop_indexContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Drop_indexContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *Drop_indexContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *Drop_indexContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *Drop_indexContext) AllDEFAULT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDEFAULT)
}

func (s *Drop_indexContext) DEFAULT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, i)
}

func (s *Drop_indexContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *Drop_indexContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *Drop_indexContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *Drop_indexContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *Drop_indexContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *Drop_indexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_indexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_indexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_index(s)
	}
}

func (s *Drop_indexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_index(s)
	}
}

func (s *Drop_indexContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_index(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_index() (localctx IDrop_indexContext) {
	localctx = NewDrop_indexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MySqlParserRULE_drop_index)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2387)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2388)
		p.Match(MySqlParserINDEX)
	}
	p.SetState(2390)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 314, p.GetParserRuleContext()) == 1 {
		p.SetState(2389)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOFFLINE || _la == MySqlParserONLINE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(2392)
		p.Id_()
	}
	{
		p.SetState(2393)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(2394)
		p.Table_name()
	}
	p.SetState(2400)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALGORITHM {
		{
			p.SetState(2395)
			p.Match(MySqlParserALGORITHM)
		}
		p.SetState(2397)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2396)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(2399)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserCOPY || _la == MySqlParserINPLACE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2407)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCK {
		{
			p.SetState(2402)
			p.Match(MySqlParserLOCK)
		}
		p.SetState(2404)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2403)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		p.SetState(2406)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDEFAULT || _la == MySqlParserEXCLUSIVE || _la == MySqlParserNONE || _la == MySqlParserSHARED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IDrop_logfile_groupContext is an interface to support dynamic dispatch.
type IDrop_logfile_groupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_logfile_groupContext differentiates from other interfaces.
	IsDrop_logfile_groupContext()
}

type Drop_logfile_groupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_logfile_groupContext() *Drop_logfile_groupContext {
	var p = new(Drop_logfile_groupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_logfile_group
	return p
}

func (*Drop_logfile_groupContext) IsDrop_logfile_groupContext() {}

func NewDrop_logfile_groupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_logfile_groupContext {
	var p = new(Drop_logfile_groupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_logfile_group

	return p
}

func (s *Drop_logfile_groupContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_logfile_groupContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_logfile_groupContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *Drop_logfile_groupContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *Drop_logfile_groupContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_logfile_groupContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Drop_logfile_groupContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Drop_logfile_groupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_logfile_groupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_logfile_groupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_logfile_group(s)
	}
}

func (s *Drop_logfile_groupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_logfile_group(s)
	}
}

func (s *Drop_logfile_groupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_logfile_group(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_logfile_group() (localctx IDrop_logfile_groupContext) {
	localctx = NewDrop_logfile_groupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MySqlParserRULE_drop_logfile_group)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2409)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2410)
		p.Match(MySqlParserLOGFILE)
	}
	{
		p.SetState(2411)
		p.Match(MySqlParserGROUP)
	}
	{
		p.SetState(2412)
		p.Id_()
	}
	{
		p.SetState(2413)
		p.Match(MySqlParserENGINE)
	}
	{
		p.SetState(2414)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(2415)
		p.Engine_name()
	}

	return localctx
}

// IDrop_procedureContext is an interface to support dynamic dispatch.
type IDrop_procedureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_procedureContext differentiates from other interfaces.
	IsDrop_procedureContext()
}

type Drop_procedureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_procedureContext() *Drop_procedureContext {
	var p = new(Drop_procedureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_procedure
	return p
}

func (*Drop_procedureContext) IsDrop_procedureContext() {}

func NewDrop_procedureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_procedureContext {
	var p = new(Drop_procedureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_procedure

	return p
}

func (s *Drop_procedureContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_procedureContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_procedureContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *Drop_procedureContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Drop_procedureContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_procedureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_procedureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_procedureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_procedure(s)
	}
}

func (s *Drop_procedureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_procedure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_procedure() (localctx IDrop_procedureContext) {
	localctx = NewDrop_procedureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MySqlParserRULE_drop_procedure)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2417)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2418)
		p.Match(MySqlParserPROCEDURE)
	}
	p.SetState(2420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2419)
			p.If_exists()
		}

	}
	{
		p.SetState(2422)
		p.Full_id()
	}

	return localctx
}

// IDrop_functionContext is an interface to support dynamic dispatch.
type IDrop_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_functionContext differentiates from other interfaces.
	IsDrop_functionContext()
}

type Drop_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_functionContext() *Drop_functionContext {
	var p = new(Drop_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_function
	return p
}

func (*Drop_functionContext) IsDrop_functionContext() {}

func NewDrop_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_functionContext {
	var p = new(Drop_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_function

	return p
}

func (s *Drop_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_functionContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_functionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Drop_functionContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Drop_functionContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_function(s)
	}
}

func (s *Drop_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_function(s)
	}
}

func (s *Drop_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_function() (localctx IDrop_functionContext) {
	localctx = NewDrop_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MySqlParserRULE_drop_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2424)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2425)
		p.Match(MySqlParserFUNCTION)
	}
	p.SetState(2427)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2426)
			p.If_exists()
		}

	}
	{
		p.SetState(2429)
		p.Full_id()
	}

	return localctx
}

// IDrop_serverContext is an interface to support dynamic dispatch.
type IDrop_serverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_serverContext differentiates from other interfaces.
	IsDrop_serverContext()
}

type Drop_serverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_serverContext() *Drop_serverContext {
	var p = new(Drop_serverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_server
	return p
}

func (*Drop_serverContext) IsDrop_serverContext() {}

func NewDrop_serverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_serverContext {
	var p = new(Drop_serverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_server

	return p
}

func (s *Drop_serverContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_serverContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_serverContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *Drop_serverContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_serverContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_serverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_serverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_serverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_server(s)
	}
}

func (s *Drop_serverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_server(s)
	}
}

func (s *Drop_serverContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_server(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_server() (localctx IDrop_serverContext) {
	localctx = NewDrop_serverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MySqlParserRULE_drop_server)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2431)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2432)
		p.Match(MySqlParserSERVER)
	}
	p.SetState(2434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2433)
			p.If_exists()
		}

	}
	{
		p.SetState(2436)
		p.Id_()
	}

	return localctx
}

// IDrop_tableContext is an interface to support dynamic dispatch.
type IDrop_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tableContext differentiates from other interfaces.
	IsDrop_tableContext()
}

type Drop_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tableContext() *Drop_tableContext {
	var p = new(Drop_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_table
	return p
}

func (*Drop_tableContext) IsDrop_tableContext() {}

func NewDrop_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tableContext {
	var p = new(Drop_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_table

	return p
}

func (s *Drop_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tableContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Drop_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Drop_tableContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *Drop_tableContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_tableContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *Drop_tableContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *Drop_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_table(s)
	}
}

func (s *Drop_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_table(s)
	}
}

func (s *Drop_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_table() (localctx IDrop_tableContext) {
	localctx = NewDrop_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MySqlParserRULE_drop_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2438)
		p.Match(MySqlParserDROP)
	}
	p.SetState(2440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTEMPORARY {
		{
			p.SetState(2439)
			p.Match(MySqlParserTEMPORARY)
		}

	}
	{
		p.SetState(2442)
		p.Match(MySqlParserTABLE)
	}
	p.SetState(2444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2443)
			p.If_exists()
		}

	}
	{
		p.SetState(2446)
		p.Table_list()
	}
	p.SetState(2448)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		p.SetState(2447)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IDrop_tablespaceContext is an interface to support dynamic dispatch.
type IDrop_tablespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_tablespaceContext differentiates from other interfaces.
	IsDrop_tablespaceContext()
}

type Drop_tablespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_tablespaceContext() *Drop_tablespaceContext {
	var p = new(Drop_tablespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_tablespace
	return p
}

func (*Drop_tablespaceContext) IsDrop_tablespaceContext() {}

func NewDrop_tablespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_tablespaceContext {
	var p = new(Drop_tablespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_tablespace

	return p
}

func (s *Drop_tablespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_tablespaceContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_tablespaceContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Drop_tablespaceContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Drop_tablespaceContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Drop_tablespaceContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Drop_tablespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_tablespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_tablespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_tablespace(s)
	}
}

func (s *Drop_tablespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_tablespace(s)
	}
}

func (s *Drop_tablespaceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_tablespace(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_tablespace() (localctx IDrop_tablespaceContext) {
	localctx = NewDrop_tablespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MySqlParserRULE_drop_tablespace)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2450)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2451)
		p.Match(MySqlParserTABLESPACE)
	}
	{
		p.SetState(2452)
		p.Id_()
	}
	p.SetState(2458)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserENGINE {
		{
			p.SetState(2453)
			p.Match(MySqlParserENGINE)
		}
		p.SetState(2455)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEQUAL_SYMBOL {
			{
				p.SetState(2454)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}

		}
		{
			p.SetState(2457)
			p.Engine_name()
		}

	}

	return localctx
}

// IDrop_triggerContext is an interface to support dynamic dispatch.
type IDrop_triggerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_triggerContext differentiates from other interfaces.
	IsDrop_triggerContext()
}

type Drop_triggerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_triggerContext() *Drop_triggerContext {
	var p = new(Drop_triggerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_trigger
	return p
}

func (*Drop_triggerContext) IsDrop_triggerContext() {}

func NewDrop_triggerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_triggerContext {
	var p = new(Drop_triggerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_trigger

	return p
}

func (s *Drop_triggerContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_triggerContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_triggerContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *Drop_triggerContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Drop_triggerContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_triggerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_triggerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_triggerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_trigger(s)
	}
}

func (s *Drop_triggerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_trigger(s)
	}
}

func (s *Drop_triggerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_trigger(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_trigger() (localctx IDrop_triggerContext) {
	localctx = NewDrop_triggerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MySqlParserRULE_drop_trigger)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2460)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2461)
		p.Match(MySqlParserTRIGGER)
	}
	p.SetState(2463)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2462)
			p.If_exists()
		}

	}
	{
		p.SetState(2465)
		p.Full_id()
	}

	return localctx
}

// IDrop_viewContext is an interface to support dynamic dispatch.
type IDrop_viewContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_viewContext differentiates from other interfaces.
	IsDrop_viewContext()
}

type Drop_viewContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_viewContext() *Drop_viewContext {
	var p = new(Drop_viewContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_view
	return p
}

func (*Drop_viewContext) IsDrop_viewContext() {}

func NewDrop_viewContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_viewContext {
	var p = new(Drop_viewContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_view

	return p
}

func (s *Drop_viewContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_viewContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_viewContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *Drop_viewContext) AllFull_id() []IFull_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFull_idContext)(nil)).Elem())
	var tst = make([]IFull_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFull_idContext)
		}
	}

	return tst
}

func (s *Drop_viewContext) Full_id(i int) IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Drop_viewContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_viewContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESTRICT, 0)
}

func (s *Drop_viewContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADE, 0)
}

func (s *Drop_viewContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_viewContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_viewContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_view(s)
	}
}

func (s *Drop_viewContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_view(s)
	}
}

func (s *Drop_viewContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_view(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_view() (localctx IDrop_viewContext) {
	localctx = NewDrop_viewContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MySqlParserRULE_drop_view)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2467)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(2468)
		p.Match(MySqlParserVIEW)
	}
	p.SetState(2470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(2469)
			p.If_exists()
		}

	}
	{
		p.SetState(2472)
		p.Full_id()
	}
	p.SetState(2477)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2473)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2474)
			p.Full_id()
		}

		p.SetState(2479)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCASCADE || _la == MySqlParserRESTRICT {
		p.SetState(2480)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCASCADE || _la == MySqlParserRESTRICT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IRename_tableContext is an interface to support dynamic dispatch.
type IRename_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRename_tableContext differentiates from other interfaces.
	IsRename_tableContext()
}

type Rename_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRename_tableContext() *Rename_tableContext {
	var p = new(Rename_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rename_table
	return p
}

func (*Rename_tableContext) IsRename_tableContext() {}

func NewRename_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_tableContext {
	var p = new(Rename_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rename_table

	return p
}

func (s *Rename_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_tableContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *Rename_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Rename_tableContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Rename_tableContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Rename_tableContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTO)
}

func (s *Rename_tableContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, i)
}

func (s *Rename_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rename_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRename_table(s)
	}
}

func (s *Rename_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRename_table(s)
	}
}

func (s *Rename_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRename_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Rename_table() (localctx IRename_tableContext) {
	localctx = NewRename_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MySqlParserRULE_rename_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2483)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(2484)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2485)
		p.Table_name()
	}
	{
		p.SetState(2486)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(2487)
		p.Table_name()
	}
	p.SetState(2495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(2488)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(2489)
			p.Table_name()
		}
		{
			p.SetState(2490)
			p.Match(MySqlParserTO)
		}
		{
			p.SetState(2491)
			p.Table_name()
		}

		p.SetState(2497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITruncate_tableContext is an interface to support dynamic dispatch.
type ITruncate_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTruncate_tableContext differentiates from other interfaces.
	IsTruncate_tableContext()
}

type Truncate_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTruncate_tableContext() *Truncate_tableContext {
	var p = new(Truncate_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_truncate_table
	return p
}

func (*Truncate_tableContext) IsTruncate_tableContext() {}

func NewTruncate_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Truncate_tableContext {
	var p = new(Truncate_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_truncate_table

	return p
}

func (s *Truncate_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Truncate_tableContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *Truncate_tableContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Truncate_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Truncate_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Truncate_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Truncate_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTruncate_table(s)
	}
}

func (s *Truncate_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTruncate_table(s)
	}
}

func (s *Truncate_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTruncate_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Truncate_table() (localctx ITruncate_tableContext) {
	localctx = NewTruncate_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MySqlParserRULE_truncate_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2498)
		p.Match(MySqlParserTRUNCATE)
	}
	p.SetState(2500)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserTABLE {
		{
			p.SetState(2499)
			p.Match(MySqlParserTABLE)
		}

	}
	{
		p.SetState(2502)
		p.Table_name()
	}

	return localctx
}

// ICall_statementContext is an interface to support dynamic dispatch.
type ICall_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCall_statementContext differentiates from other interfaces.
	IsCall_statementContext()
}

type Call_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCall_statementContext() *Call_statementContext {
	var p = new(Call_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_call_statement
	return p
}

func (*Call_statementContext) IsCall_statementContext() {}

func NewCall_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Call_statementContext {
	var p = new(Call_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_call_statement

	return p
}

func (s *Call_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Call_statementContext) CALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCALL, 0)
}

func (s *Call_statementContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Call_statementContext) Constant_list() IConstant_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_listContext)
}

func (s *Call_statementContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Call_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Call_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Call_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCall_statement(s)
	}
}

func (s *Call_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCall_statement(s)
	}
}

func (s *Call_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCall_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Call_statement() (localctx ICall_statementContext) {
	localctx = NewCall_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MySqlParserRULE_call_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2504)
		p.Match(MySqlParserCALL)
	}
	{
		p.SetState(2505)
		p.Full_id()
	}
	p.SetState(2512)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2506)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(2509)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 333, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2507)
				p.Constant_list()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 333, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(2508)
				p.Expression_list()
			}

		}
		{
			p.SetState(2511)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IDelete_statementContext is an interface to support dynamic dispatch.
type IDelete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDelete_statementContext differentiates from other interfaces.
	IsDelete_statementContext()
}

type Delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDelete_statementContext() *Delete_statementContext {
	var p = new(Delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_delete_statement
	return p
}

func (*Delete_statementContext) IsDelete_statementContext() {}

func NewDelete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Delete_statementContext {
	var p = new(Delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_delete_statement

	return p
}

func (s *Delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Delete_statementContext) Single_delete_statement() ISingle_delete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingle_delete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingle_delete_statementContext)
}

func (s *Delete_statementContext) Multiple_delete_statement() IMultiple_delete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiple_delete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiple_delete_statementContext)
}

func (s *Delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDelete_statement(s)
	}
}

func (s *Delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDelete_statement(s)
	}
}

func (s *Delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDelete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Delete_statement() (localctx IDelete_statementContext) {
	localctx = NewDelete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MySqlParserRULE_delete_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2516)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 335, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2514)
			p.Single_delete_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2515)
			p.Multiple_delete_statement()
		}

	}

	return localctx
}

// IDo_statementContext is an interface to support dynamic dispatch.
type IDo_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDo_statementContext differentiates from other interfaces.
	IsDo_statementContext()
}

type Do_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDo_statementContext() *Do_statementContext {
	var p = new(Do_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_do_statement
	return p
}

func (*Do_statementContext) IsDo_statementContext() {}

func NewDo_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Do_statementContext {
	var p = new(Do_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_do_statement

	return p
}

func (s *Do_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Do_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *Do_statementContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Do_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Do_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Do_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDo_statement(s)
	}
}

func (s *Do_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDo_statement(s)
	}
}

func (s *Do_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDo_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Do_statement() (localctx IDo_statementContext) {
	localctx = NewDo_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MySqlParserRULE_do_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2518)
		p.Match(MySqlParserDO)
	}
	{
		p.SetState(2519)
		p.Expression_list()
	}

	return localctx
}

// IHandler_statementContext is an interface to support dynamic dispatch.
type IHandler_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandler_statementContext differentiates from other interfaces.
	IsHandler_statementContext()
}

type Handler_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandler_statementContext() *Handler_statementContext {
	var p = new(Handler_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_statement
	return p
}

func (*Handler_statementContext) IsHandler_statementContext() {}

func NewHandler_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_statementContext {
	var p = new(Handler_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_statement

	return p
}

func (s *Handler_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_statementContext) Handler_open_statement() IHandler_open_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_open_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandler_open_statementContext)
}

func (s *Handler_statementContext) Handler_read_index_statement() IHandler_read_index_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_read_index_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandler_read_index_statementContext)
}

func (s *Handler_statementContext) Handler_read_statement() IHandler_read_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_read_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandler_read_statementContext)
}

func (s *Handler_statementContext) Handler_close_statement() IHandler_close_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_close_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHandler_close_statementContext)
}

func (s *Handler_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_statement(s)
	}
}

func (s *Handler_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_statement(s)
	}
}

func (s *Handler_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_statement() (localctx IHandler_statementContext) {
	localctx = NewHandler_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MySqlParserRULE_handler_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2525)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 336, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2521)
			p.Handler_open_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2522)
			p.Handler_read_index_statement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2523)
			p.Handler_read_statement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2524)
			p.Handler_close_statement()
		}

	}

	return localctx
}

// IInsert_statementContext is an interface to support dynamic dispatch.
type IInsert_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSet_firstelem returns the set_firstelem rule contexts.
	GetSet_firstelem() IUpdate_elemContext

	// Get_update_elem returns the _update_elem rule contexts.
	Get_update_elem() IUpdate_elemContext

	// GetDuplicate_firstelem returns the duplicate_firstelem rule contexts.
	GetDuplicate_firstelem() IUpdate_elemContext

	// SetSet_firstelem sets the set_firstelem rule contexts.
	SetSet_firstelem(IUpdate_elemContext)

	// Set_update_elem sets the _update_elem rule contexts.
	Set_update_elem(IUpdate_elemContext)

	// SetDuplicate_firstelem sets the duplicate_firstelem rule contexts.
	SetDuplicate_firstelem(IUpdate_elemContext)

	// GetSet_elem returns the set_elem rule context list.
	GetSet_elem() []IUpdate_elemContext

	// GetDuplicate_elem returns the duplicate_elem rule context list.
	GetDuplicate_elem() []IUpdate_elemContext

	// SetSet_elem sets the set_elem rule context list.
	SetSet_elem([]IUpdate_elemContext)

	// SetDuplicate_elem sets the duplicate_elem rule context list.
	SetDuplicate_elem([]IUpdate_elemContext)

	// IsInsert_statementContext differentiates from other interfaces.
	IsInsert_statementContext()
}

type Insert_statementContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	set_firstelem       IUpdate_elemContext
	_update_elem        IUpdate_elemContext
	set_elem            []IUpdate_elemContext
	duplicate_firstelem IUpdate_elemContext
	duplicate_elem      []IUpdate_elemContext
}

func NewEmptyInsert_statementContext() *Insert_statementContext {
	var p = new(Insert_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insert_statement
	return p
}

func (*Insert_statementContext) IsInsert_statementContext() {}

func NewInsert_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statementContext {
	var p = new(Insert_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insert_statement

	return p
}

func (s *Insert_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statementContext) GetSet_firstelem() IUpdate_elemContext { return s.set_firstelem }

func (s *Insert_statementContext) Get_update_elem() IUpdate_elemContext { return s._update_elem }

func (s *Insert_statementContext) GetDuplicate_firstelem() IUpdate_elemContext {
	return s.duplicate_firstelem
}

func (s *Insert_statementContext) SetSet_firstelem(v IUpdate_elemContext) { s.set_firstelem = v }

func (s *Insert_statementContext) Set_update_elem(v IUpdate_elemContext) { s._update_elem = v }

func (s *Insert_statementContext) SetDuplicate_firstelem(v IUpdate_elemContext) {
	s.duplicate_firstelem = v
}

func (s *Insert_statementContext) GetSet_elem() []IUpdate_elemContext { return s.set_elem }

func (s *Insert_statementContext) GetDuplicate_elem() []IUpdate_elemContext { return s.duplicate_elem }

func (s *Insert_statementContext) SetSet_elem(v []IUpdate_elemContext) { s.set_elem = v }

func (s *Insert_statementContext) SetDuplicate_elem(v []IUpdate_elemContext) { s.duplicate_elem = v }

func (s *Insert_statementContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *Insert_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Insert_statementContext) Insert_statement_value() IInsert_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_valueContext)
}

func (s *Insert_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Insert_statementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Insert_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Insert_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Insert_statementContext) AllId_list() []IId_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_listContext)(nil)).Elem())
	var tst = make([]IId_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_listContext)
		}
	}

	return tst
}

func (s *Insert_statementContext) Id_list(i int) IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Insert_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Insert_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Insert_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Insert_statementContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *Insert_statementContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Insert_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *Insert_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Insert_statementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *Insert_statementContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *Insert_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInsert_statement(s)
	}
}

func (s *Insert_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInsert_statement(s)
	}
}

func (s *Insert_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInsert_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Insert_statement() (localctx IInsert_statementContext) {
	localctx = NewInsert_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MySqlParserRULE_insert_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2527)
		p.Match(MySqlParserINSERT)
	}
	p.SetState(2529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY {
		p.SetState(2528)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDELAYED || _la == MySqlParserHIGH_PRIORITY || _la == MySqlParserLOW_PRIORITY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2531)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(2535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(2534)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(2537)
		p.Table_name()
	}
	p.SetState(2543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2538)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2539)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2540)
			p.Id_list()
		}
		{
			p.SetState(2541)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2561)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(2549)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 341, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2545)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2546)
				p.Id_list()
			}
			{
				p.SetState(2547)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(2551)
			p.Insert_statement_value()
		}

	case MySqlParserSET:
		{
			p.SetState(2552)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2553)

			var _x = p.Update_elem()

			localctx.(*Insert_statementContext).set_firstelem = _x
		}
		p.SetState(2558)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2554)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2555)

				var _x = p.Update_elem()

				localctx.(*Insert_statementContext)._update_elem = _x
			}
			localctx.(*Insert_statementContext).set_elem = append(localctx.(*Insert_statementContext).set_elem, localctx.(*Insert_statementContext)._update_elem)

			p.SetState(2560)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2575)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserON {
		{
			p.SetState(2563)
			p.Match(MySqlParserON)
		}
		{
			p.SetState(2564)
			p.Match(MySqlParserDUPLICATE)
		}
		{
			p.SetState(2565)
			p.Match(MySqlParserKEY)
		}
		{
			p.SetState(2566)
			p.Match(MySqlParserUPDATE)
		}
		{
			p.SetState(2567)

			var _x = p.Update_elem()

			localctx.(*Insert_statementContext).duplicate_firstelem = _x
		}
		p.SetState(2572)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2568)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2569)

				var _x = p.Update_elem()

				localctx.(*Insert_statementContext)._update_elem = _x
			}
			localctx.(*Insert_statementContext).duplicate_elem = append(localctx.(*Insert_statementContext).duplicate_elem, localctx.(*Insert_statementContext)._update_elem)

			p.SetState(2574)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoad_data_statementContext is an interface to support dynamic dispatch.
type ILoad_data_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// GetFilename returns the filename token.
	GetFilename() antlr.Token

	// GetReplaceignore returns the replaceignore token.
	GetReplaceignore() antlr.Token

	// GetTerminatefieldsymb returns the terminatefieldsymb token.
	GetTerminatefieldsymb() antlr.Token

	// GetEnclosedsymb returns the enclosedsymb token.
	GetEnclosedsymb() antlr.Token

	// GetEscapesymb returns the escapesymb token.
	GetEscapesymb() antlr.Token

	// GetStartingsymb returns the startingsymb token.
	GetStartingsymb() antlr.Token

	// GetTerminatelinesymb returns the terminatelinesymb token.
	GetTerminatelinesymb() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// SetFilename sets the filename token.
	SetFilename(antlr.Token)

	// SetReplaceignore sets the replaceignore token.
	SetReplaceignore(antlr.Token)

	// SetTerminatefieldsymb sets the terminatefieldsymb token.
	SetTerminatefieldsymb(antlr.Token)

	// SetEnclosedsymb sets the enclosedsymb token.
	SetEnclosedsymb(antlr.Token)

	// SetEscapesymb sets the escapesymb token.
	SetEscapesymb(antlr.Token)

	// SetStartingsymb sets the startingsymb token.
	SetStartingsymb(antlr.Token)

	// SetTerminatelinesymb sets the terminatelinesymb token.
	SetTerminatelinesymb(antlr.Token)

	// GetCharset returns the charset rule contexts.
	GetCharset() ICharset_nameContext

	// SetCharset sets the charset rule contexts.
	SetCharset(ICharset_nameContext)

	// IsLoad_data_statementContext differentiates from other interfaces.
	IsLoad_data_statementContext()
}

type Load_data_statementContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	priority           antlr.Token
	filename           antlr.Token
	replaceignore      antlr.Token
	charset            ICharset_nameContext
	terminatefieldsymb antlr.Token
	enclosedsymb       antlr.Token
	escapesymb         antlr.Token
	startingsymb       antlr.Token
	terminatelinesymb  antlr.Token
}

func NewEmptyLoad_data_statementContext() *Load_data_statementContext {
	var p = new(Load_data_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_load_data_statement
	return p
}

func (*Load_data_statementContext) IsLoad_data_statementContext() {}

func NewLoad_data_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_data_statementContext {
	var p = new(Load_data_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_load_data_statement

	return p
}

func (s *Load_data_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_data_statementContext) GetPriority() antlr.Token { return s.priority }

func (s *Load_data_statementContext) GetFilename() antlr.Token { return s.filename }

func (s *Load_data_statementContext) GetReplaceignore() antlr.Token { return s.replaceignore }

func (s *Load_data_statementContext) GetTerminatefieldsymb() antlr.Token { return s.terminatefieldsymb }

func (s *Load_data_statementContext) GetEnclosedsymb() antlr.Token { return s.enclosedsymb }

func (s *Load_data_statementContext) GetEscapesymb() antlr.Token { return s.escapesymb }

func (s *Load_data_statementContext) GetStartingsymb() antlr.Token { return s.startingsymb }

func (s *Load_data_statementContext) GetTerminatelinesymb() antlr.Token { return s.terminatelinesymb }

func (s *Load_data_statementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *Load_data_statementContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *Load_data_statementContext) SetReplaceignore(v antlr.Token) { s.replaceignore = v }

func (s *Load_data_statementContext) SetTerminatefieldsymb(v antlr.Token) { s.terminatefieldsymb = v }

func (s *Load_data_statementContext) SetEnclosedsymb(v antlr.Token) { s.enclosedsymb = v }

func (s *Load_data_statementContext) SetEscapesymb(v antlr.Token) { s.escapesymb = v }

func (s *Load_data_statementContext) SetStartingsymb(v antlr.Token) { s.startingsymb = v }

func (s *Load_data_statementContext) SetTerminatelinesymb(v antlr.Token) { s.terminatelinesymb = v }

func (s *Load_data_statementContext) GetCharset() ICharset_nameContext { return s.charset }

func (s *Load_data_statementContext) SetCharset(v ICharset_nameContext) { s.charset = v }

func (s *Load_data_statementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *Load_data_statementContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *Load_data_statementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *Load_data_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Load_data_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Load_data_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Load_data_statementContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Load_data_statementContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Load_data_statementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Load_data_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Load_data_statementContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Load_data_statementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *Load_data_statementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *Load_data_statementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *Load_data_statementContext) AllLINES() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLINES)
}

func (s *Load_data_statementContext) LINES(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, i)
}

func (s *Load_data_statementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *Load_data_statementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *Load_data_statementContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Load_data_statementContext) AllCol_or_uservar() []ICol_or_uservarContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICol_or_uservarContext)(nil)).Elem())
	var tst = make([]ICol_or_uservarContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICol_or_uservarContext)
		}
	}

	return tst
}

func (s *Load_data_statementContext) Col_or_uservar(i int) ICol_or_uservarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_or_uservarContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICol_or_uservarContext)
}

func (s *Load_data_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Load_data_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Load_data_statementContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *Load_data_statementContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *Load_data_statementContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *Load_data_statementContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *Load_data_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Load_data_statementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *Load_data_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *Load_data_statementContext) AllTERMINATED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTERMINATED)
}

func (s *Load_data_statementContext) TERMINATED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, i)
}

func (s *Load_data_statementContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBY)
}

func (s *Load_data_statementContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, i)
}

func (s *Load_data_statementContext) ENCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCLOSED, 0)
}

func (s *Load_data_statementContext) ESCAPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPED, 0)
}

func (s *Load_data_statementContext) STARTING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTING, 0)
}

func (s *Load_data_statementContext) OPTIONALLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONALLY, 0)
}

func (s *Load_data_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_data_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_data_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoad_data_statement(s)
	}
}

func (s *Load_data_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoad_data_statement(s)
	}
}

func (s *Load_data_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoad_data_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Load_data_statement() (localctx ILoad_data_statementContext) {
	localctx = NewLoad_data_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MySqlParserRULE_load_data_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2577)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(2578)
		p.Match(MySqlParserDATA)
	}
	p.SetState(2580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		p.SetState(2579)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Load_data_statementContext).priority = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Load_data_statementContext).priority = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2583)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(2582)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(2585)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(2586)

		var _m = p.Match(MySqlParserSTRING_LITERAL)

		localctx.(*Load_data_statementContext).filename = _m
	}
	p.SetState(2588)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		p.SetState(2587)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Load_data_statementContext).replaceignore = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Load_data_statementContext).replaceignore = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(2590)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(2591)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2592)
		p.Table_name()
	}
	p.SetState(2598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2593)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2594)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2595)
			p.Id_list()
		}
		{
			p.SetState(2596)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(2600)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2601)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2602)

			var _x = p.Charset_name()

			localctx.(*Load_data_statementContext).charset = _x
		}

	}
	p.SetState(2624)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS {
		p.SetState(2605)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(2609)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTERMINATED {
			{
				p.SetState(2606)
				p.Match(MySqlParserTERMINATED)
			}
			{
				p.SetState(2607)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(2608)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*Load_data_statementContext).terminatefieldsymb = _m
			}

		}
		p.SetState(2617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserENCLOSED || _la == MySqlParserOPTIONALLY {
			p.SetState(2612)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserOPTIONALLY {
				{
					p.SetState(2611)
					p.Match(MySqlParserOPTIONALLY)
				}

			}
			{
				p.SetState(2614)
				p.Match(MySqlParserENCLOSED)
			}
			{
				p.SetState(2615)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(2616)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*Load_data_statementContext).enclosedsymb = _m
			}

		}
		p.SetState(2622)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserESCAPED {
			{
				p.SetState(2619)
				p.Match(MySqlParserESCAPED)
			}
			{
				p.SetState(2620)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(2621)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*Load_data_statementContext).escapesymb = _m
			}

		}

	}
	p.SetState(2637)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLINES {
		{
			p.SetState(2626)
			p.Match(MySqlParserLINES)
		}
		p.SetState(2630)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSTARTING {
			{
				p.SetState(2627)
				p.Match(MySqlParserSTARTING)
			}
			{
				p.SetState(2628)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(2629)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*Load_data_statementContext).startingsymb = _m
			}

		}
		p.SetState(2635)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserTERMINATED {
			{
				p.SetState(2632)
				p.Match(MySqlParserTERMINATED)
			}
			{
				p.SetState(2633)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(2634)

				var _m = p.Match(MySqlParserSTRING_LITERAL)

				localctx.(*Load_data_statementContext).terminatelinesymb = _m
			}

		}

	}
	p.SetState(2643)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2639)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(2640)
			p.Decimal_literal()
		}
		p.SetState(2641)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2656)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2645)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2646)
			p.Col_or_uservar()
		}
		p.SetState(2651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2647)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2648)
				p.Col_or_uservar()
			}

			p.SetState(2653)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2654)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2667)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSET {
		{
			p.SetState(2658)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2659)
			p.Update_elem()
		}
		p.SetState(2664)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2660)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2661)
				p.Update_elem()
			}

			p.SetState(2666)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ILoad_xml_statementContext is an interface to support dynamic dispatch.
type ILoad_xml_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriority returns the priority token.
	GetPriority() antlr.Token

	// SetPriority sets the priority token.
	SetPriority(antlr.Token)

	// IsLoad_xml_statementContext differentiates from other interfaces.
	IsLoad_xml_statementContext()
}

type Load_xml_statementContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	priority antlr.Token
}

func NewEmptyLoad_xml_statementContext() *Load_xml_statementContext {
	var p = new(Load_xml_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_load_xml_statement
	return p
}

func (*Load_xml_statementContext) IsLoad_xml_statementContext() {}

func NewLoad_xml_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_xml_statementContext {
	var p = new(Load_xml_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_load_xml_statement

	return p
}

func (s *Load_xml_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_xml_statementContext) GetPriority() antlr.Token { return s.priority }

func (s *Load_xml_statementContext) SetPriority(v antlr.Token) { s.priority = v }

func (s *Load_xml_statementContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *Load_xml_statementContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *Load_xml_statementContext) INFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINFILE, 0)
}

func (s *Load_xml_statementContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Load_xml_statementContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Load_xml_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Load_xml_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Load_xml_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Load_xml_statementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Load_xml_statementContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *Load_xml_statementContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *Load_xml_statementContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *Load_xml_statementContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *Load_xml_statementContext) AllROWS() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserROWS)
}

func (s *Load_xml_statementContext) ROWS(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, i)
}

func (s *Load_xml_statementContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *Load_xml_statementContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *Load_xml_statementContext) AllIGNORE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIGNORE)
}

func (s *Load_xml_statementContext) IGNORE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, i)
}

func (s *Load_xml_statementContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Load_xml_statementContext) AllCol_or_uservar() []ICol_or_uservarContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICol_or_uservarContext)(nil)).Elem())
	var tst = make([]ICol_or_uservarContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICol_or_uservarContext)
		}
	}

	return tst
}

func (s *Load_xml_statementContext) Col_or_uservar(i int) ICol_or_uservarContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICol_or_uservarContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICol_or_uservarContext)
}

func (s *Load_xml_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Load_xml_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Load_xml_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *Load_xml_statementContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *Load_xml_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Load_xml_statementContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *Load_xml_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_xml_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_xml_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoad_xml_statement(s)
	}
}

func (s *Load_xml_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoad_xml_statement(s)
	}
}

func (s *Load_xml_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoad_xml_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Load_xml_statement() (localctx ILoad_xml_statementContext) {
	localctx = NewLoad_xml_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MySqlParserRULE_load_xml_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2669)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(2670)
		p.Match(MySqlParserXML)
	}
	p.SetState(2672)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT {
		p.SetState(2671)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Load_xml_statementContext).priority = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLOW_PRIORITY || _la == MySqlParserCONCURRENT) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Load_xml_statementContext).priority = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2675)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOCAL {
		{
			p.SetState(2674)
			p.Match(MySqlParserLOCAL)
		}

	}
	{
		p.SetState(2677)
		p.Match(MySqlParserINFILE)
	}
	{
		p.SetState(2678)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(2680)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE || _la == MySqlParserREPLACE {
		p.SetState(2679)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserIGNORE || _la == MySqlParserREPLACE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(2682)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(2683)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(2684)
		p.Table_name()
	}
	p.SetState(2688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCHARACTER {
		{
			p.SetState(2685)
			p.Match(MySqlParserCHARACTER)
		}
		{
			p.SetState(2686)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2687)
			p.Charset_name()
		}

	}
	p.SetState(2696)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserROWS {
		{
			p.SetState(2690)
			p.Match(MySqlParserROWS)
		}
		{
			p.SetState(2691)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(2692)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(2693)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(2694)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(2695)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}
	p.SetState(2702)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2698)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(2699)
			p.Decimal_literal()
		}
		p.SetState(2700)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLINES || _la == MySqlParserROWS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2715)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(2704)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2705)
			p.Col_or_uservar()
		}
		p.SetState(2710)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2706)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2707)
				p.Col_or_uservar()
			}

			p.SetState(2712)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2713)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2726)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSET {
		{
			p.SetState(2717)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2718)
			p.Update_elem()
		}
		p.SetState(2723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2719)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2720)
				p.Update_elem()
			}

			p.SetState(2725)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IReplace_statementContext is an interface to support dynamic dispatch.
type IReplace_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSet_firstelem returns the set_firstelem rule contexts.
	GetSet_firstelem() IUpdate_elemContext

	// Get_update_elem returns the _update_elem rule contexts.
	Get_update_elem() IUpdate_elemContext

	// SetSet_firstelem sets the set_firstelem rule contexts.
	SetSet_firstelem(IUpdate_elemContext)

	// Set_update_elem sets the _update_elem rule contexts.
	Set_update_elem(IUpdate_elemContext)

	// GetSet_elem returns the set_elem rule context list.
	GetSet_elem() []IUpdate_elemContext

	// SetSet_elem sets the set_elem rule context list.
	SetSet_elem([]IUpdate_elemContext)

	// IsReplace_statementContext differentiates from other interfaces.
	IsReplace_statementContext()
}

type Replace_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	set_firstelem IUpdate_elemContext
	_update_elem  IUpdate_elemContext
	set_elem      []IUpdate_elemContext
}

func NewEmptyReplace_statementContext() *Replace_statementContext {
	var p = new(Replace_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_replace_statement
	return p
}

func (*Replace_statementContext) IsReplace_statementContext() {}

func NewReplace_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Replace_statementContext {
	var p = new(Replace_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_replace_statement

	return p
}

func (s *Replace_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Replace_statementContext) GetSet_firstelem() IUpdate_elemContext { return s.set_firstelem }

func (s *Replace_statementContext) Get_update_elem() IUpdate_elemContext { return s._update_elem }

func (s *Replace_statementContext) SetSet_firstelem(v IUpdate_elemContext) { s.set_firstelem = v }

func (s *Replace_statementContext) Set_update_elem(v IUpdate_elemContext) { s._update_elem = v }

func (s *Replace_statementContext) GetSet_elem() []IUpdate_elemContext { return s.set_elem }

func (s *Replace_statementContext) SetSet_elem(v []IUpdate_elemContext) { s.set_elem = v }

func (s *Replace_statementContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *Replace_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Replace_statementContext) Insert_statement_value() IInsert_statement_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statement_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statement_valueContext)
}

func (s *Replace_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Replace_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Replace_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Replace_statementContext) AllId_list() []IId_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_listContext)(nil)).Elem())
	var tst = make([]IId_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_listContext)
		}
	}

	return tst
}

func (s *Replace_statementContext) Id_list(i int) IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Replace_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Replace_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Replace_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Replace_statementContext) DELAYED() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAYED, 0)
}

func (s *Replace_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Replace_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Replace_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplace_statement(s)
	}
}

func (s *Replace_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplace_statement(s)
	}
}

func (s *Replace_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplace_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Replace_statement() (localctx IReplace_statementContext) {
	localctx = NewReplace_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MySqlParserRULE_replace_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2728)
		p.Match(MySqlParserREPLACE)
	}
	p.SetState(2730)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY {
		p.SetState(2729)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDELAYED || _la == MySqlParserLOW_PRIORITY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(2733)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(2732)
			p.Match(MySqlParserINTO)
		}

	}
	{
		p.SetState(2735)
		p.Table_name()
	}
	p.SetState(2741)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2736)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2737)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2738)
			p.Id_list()
		}
		{
			p.SetState(2739)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2759)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserVALUES, MySqlParserVALUE, MySqlParserLR_BRACKET:
		p.SetState(2747)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 377, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2743)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2744)
				p.Id_list()
			}
			{
				p.SetState(2745)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		{
			p.SetState(2749)
			p.Insert_statement_value()
		}

	case MySqlParserSET:
		{
			p.SetState(2750)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(2751)

			var _x = p.Update_elem()

			localctx.(*Replace_statementContext).set_firstelem = _x
		}
		p.SetState(2756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2752)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2753)

				var _x = p.Update_elem()

				localctx.(*Replace_statementContext)._update_elem = _x
			}
			localctx.(*Replace_statementContext).set_elem = append(localctx.(*Replace_statementContext).set_elem, localctx.(*Replace_statementContext)._update_elem)

			p.SetState(2758)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_statementContext is an interface to support dynamic dispatch.
type ISelect_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_statementContext differentiates from other interfaces.
	IsSelect_statementContext()
}

type Select_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_statementContext() *Select_statementContext {
	var p = new(Select_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_select_statement
	return p
}

func (*Select_statementContext) IsSelect_statementContext() {}

func NewSelect_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_statementContext {
	var p = new(Select_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_select_statement

	return p
}

func (s *Select_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_statementContext) CopyFrom(ctx *Select_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Select_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnionSelectContext struct {
	*Select_statementContext
}

func NewUnionSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionSelectContext {
	var p = new(UnionSelectContext)

	p.Select_statementContext = NewEmptySelect_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_statementContext))

	return p
}

func (s *UnionSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionSelectContext) Query_specification_nointo() IQuery_specification_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specification_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specification_nointoContext)
}

func (s *UnionSelectContext) AllUnion_statement() []IUnion_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnion_statementContext)(nil)).Elem())
	var tst = make([]IUnion_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnion_statementContext)
		}
	}

	return tst
}

func (s *UnionSelectContext) Union_statement(i int) IUnion_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnion_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnion_statementContext)
}

func (s *UnionSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionSelectContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *UnionSelectContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *UnionSelectContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *UnionSelectContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *UnionSelectContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *UnionSelectContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *UnionSelectContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *UnionSelectContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *UnionSelectContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *UnionSelectContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *UnionSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionSelect(s)
	}
}

func (s *UnionSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionSelect(s)
	}
}

func (s *UnionSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type ParenSelectContext struct {
	*Select_statementContext
}

func NewParenSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenSelectContext {
	var p = new(ParenSelectContext)

	p.Select_statementContext = NewEmptySelect_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_statementContext))

	return p
}

func (s *ParenSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenSelectContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *ParenSelectContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ParenSelectContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *ParenSelectContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *ParenSelectContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ParenSelectContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *ParenSelectContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *ParenSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterParenSelect(s)
	}
}

func (s *ParenSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitParenSelect(s)
	}
}

func (s *ParenSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitParenSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleSelectContext struct {
	*Select_statementContext
}

func NewSimpleSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleSelectContext {
	var p = new(SimpleSelectContext)

	p.Select_statementContext = NewEmptySelect_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_statementContext))

	return p
}

func (s *SimpleSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleSelectContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *SimpleSelectContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SimpleSelectContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *SimpleSelectContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *SimpleSelectContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *SimpleSelectContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *SimpleSelectContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *SimpleSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleSelect(s)
	}
}

func (s *SimpleSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleSelect(s)
	}
}

func (s *SimpleSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionParenSelectContext struct {
	*Select_statementContext
}

func NewUnionParenSelectContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionParenSelectContext {
	var p = new(UnionParenSelectContext)

	p.Select_statementContext = NewEmptySelect_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_statementContext))

	return p
}

func (s *UnionParenSelectContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionParenSelectContext) Query_expression_nointo() IQuery_expression_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expression_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expression_nointoContext)
}

func (s *UnionParenSelectContext) AllUnion_parenth() []IUnion_parenthContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUnion_parenthContext)(nil)).Elem())
	var tst = make([]IUnion_parenthContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUnion_parenthContext)
		}
	}

	return tst
}

func (s *UnionParenSelectContext) Union_parenth(i int) IUnion_parenthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnion_parenthContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUnion_parenthContext)
}

func (s *UnionParenSelectContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *UnionParenSelectContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *UnionParenSelectContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *UnionParenSelectContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *UnionParenSelectContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *UnionParenSelectContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *UnionParenSelectContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *UnionParenSelectContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *UnionParenSelectContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *UnionParenSelectContext) MODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODE, 0)
}

func (s *UnionParenSelectContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *UnionParenSelectContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *UnionParenSelectContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnionParenSelect(s)
	}
}

func (s *UnionParenSelectContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnionParenSelect(s)
	}
}

func (s *UnionParenSelectContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnionParenSelect(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Select_statement() (localctx ISelect_statementContext) {
	localctx = NewSelect_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MySqlParserRULE_select_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2836)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 395, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2761)
			p.Query_specification()
		}
		p.SetState(2768)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFOR:
			{
				p.SetState(2762)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(2763)
				p.Match(MySqlParserUPDATE)
			}

		case MySqlParserLOCK:
			{
				p.SetState(2764)
				p.Match(MySqlParserLOCK)
			}
			{
				p.SetState(2765)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(2766)
				p.Match(MySqlParserSHARE)
			}
			{
				p.SetState(2767)
				p.Match(MySqlParserMODE)
			}

		case MySqlParserEOF, MySqlParserAS, MySqlParserLEFT, MySqlParserON, MySqlParserRIGHT, MySqlParserWITH, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMINUS, MySqlParserRR_BRACKET, MySqlParserSEMI, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:

		default:
		}

	case 2:
		localctx = NewParenSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2770)
			p.Query_expression()
		}
		p.SetState(2777)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFOR:
			{
				p.SetState(2771)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(2772)
				p.Match(MySqlParserUPDATE)
			}

		case MySqlParserLOCK:
			{
				p.SetState(2773)
				p.Match(MySqlParserLOCK)
			}
			{
				p.SetState(2774)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(2775)
				p.Match(MySqlParserSHARE)
			}
			{
				p.SetState(2776)
				p.Match(MySqlParserMODE)
			}

		case MySqlParserEOF, MySqlParserAS, MySqlParserLEFT, MySqlParserON, MySqlParserRIGHT, MySqlParserWITH, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMINUS, MySqlParserRR_BRACKET, MySqlParserSEMI, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:

		default:
		}

	case 3:
		localctx = NewUnionSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2779)
			p.Query_specification_nointo()
		}
		p.SetState(2781)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2780)
					p.Union_statement()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2783)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 382, p.GetParserRuleContext())
		}
		p.SetState(2793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(2785)
				p.Match(MySqlParserUNION)
			}
			p.SetState(2787)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				p.SetState(2786)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			p.SetState(2791)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserSELECT:
				{
					p.SetState(2789)
					p.Query_specification()
				}

			case MySqlParserLR_BRACKET:
				{
					p.SetState(2790)
					p.Query_expression()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(2796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserORDER {
			{
				p.SetState(2795)
				p.Order_by_clause()
			}

		}
		p.SetState(2799)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(2798)
				p.Limit_clause()
			}

		}
		p.SetState(2807)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFOR:
			{
				p.SetState(2801)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(2802)
				p.Match(MySqlParserUPDATE)
			}

		case MySqlParserLOCK:
			{
				p.SetState(2803)
				p.Match(MySqlParserLOCK)
			}
			{
				p.SetState(2804)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(2805)
				p.Match(MySqlParserSHARE)
			}
			{
				p.SetState(2806)
				p.Match(MySqlParserMODE)
			}

		case MySqlParserEOF, MySqlParserAS, MySqlParserLEFT, MySqlParserON, MySqlParserRIGHT, MySqlParserWITH, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMINUS, MySqlParserRR_BRACKET, MySqlParserSEMI, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:

		default:
		}

	case 4:
		localctx = NewUnionParenSelectContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2809)
			p.Query_expression_nointo()
		}
		p.SetState(2811)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(2810)
					p.Union_parenth()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(2813)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 389, p.GetParserRuleContext())
		}
		p.SetState(2820)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNION {
			{
				p.SetState(2815)
				p.Match(MySqlParserUNION)
			}
			p.SetState(2817)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
				p.SetState(2816)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			{
				p.SetState(2819)
				p.Query_expression()
			}

		}
		p.SetState(2823)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserORDER {
			{
				p.SetState(2822)
				p.Order_by_clause()
			}

		}
		p.SetState(2826)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(2825)
				p.Limit_clause()
			}

		}
		p.SetState(2834)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserFOR:
			{
				p.SetState(2828)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(2829)
				p.Match(MySqlParserUPDATE)
			}

		case MySqlParserLOCK:
			{
				p.SetState(2830)
				p.Match(MySqlParserLOCK)
			}
			{
				p.SetState(2831)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(2832)
				p.Match(MySqlParserSHARE)
			}
			{
				p.SetState(2833)
				p.Match(MySqlParserMODE)
			}

		case MySqlParserEOF, MySqlParserAS, MySqlParserLEFT, MySqlParserON, MySqlParserRIGHT, MySqlParserWITH, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserMINUS, MySqlParserRR_BRACKET, MySqlParserSEMI, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:

		default:
		}

	}

	return localctx
}

// IUpdate_statementContext is an interface to support dynamic dispatch.
type IUpdate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_statementContext differentiates from other interfaces.
	IsUpdate_statementContext()
}

type Update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_statementContext() *Update_statementContext {
	var p = new(Update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_update_statement
	return p
}

func (*Update_statementContext) IsUpdate_statementContext() {}

func NewUpdate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_statementContext {
	var p = new(Update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_update_statement

	return p
}

func (s *Update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_statementContext) Single_update_statement() ISingle_update_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISingle_update_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISingle_update_statementContext)
}

func (s *Update_statementContext) Multiple_update_statement() IMultiple_update_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiple_update_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiple_update_statementContext)
}

func (s *Update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUpdate_statement(s)
	}
}

func (s *Update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUpdate_statement(s)
	}
}

func (s *Update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUpdate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Update_statement() (localctx IUpdate_statementContext) {
	localctx = NewUpdate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MySqlParserRULE_update_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2840)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 396, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2838)
			p.Single_update_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2839)
			p.Multiple_update_statement()
		}

	}

	return localctx
}

// IInsert_statement_valueContext is an interface to support dynamic dispatch.
type IInsert_statement_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInsert_statement_valueContext differentiates from other interfaces.
	IsInsert_statement_valueContext()
}

type Insert_statement_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInsert_statement_valueContext() *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_insert_statement_value
	return p
}

func (*Insert_statement_valueContext) IsInsert_statement_valueContext() {}

func NewInsert_statement_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Insert_statement_valueContext {
	var p = new(Insert_statement_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_insert_statement_value

	return p
}

func (s *Insert_statement_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Insert_statement_valueContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Insert_statement_valueContext) AllExpression_list() []IExpression_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_listContext)(nil)).Elem())
	var tst = make([]IExpression_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_listContext)
		}
	}

	return tst
}

func (s *Insert_statement_valueContext) Expression_list(i int) IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *Insert_statement_valueContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *Insert_statement_valueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *Insert_statement_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Insert_statement_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Insert_statement_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInsert_statement_value(s)
	}
}

func (s *Insert_statement_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInsert_statement_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Insert_statement_value() (localctx IInsert_statement_valueContext) {
	localctx = NewInsert_statement_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MySqlParserRULE_insert_statement_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2857)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT, MySqlParserLR_BRACKET:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2842)
			p.Select_statement()
		}

	case MySqlParserVALUES, MySqlParserVALUE:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2843)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserVALUES || _la == MySqlParserVALUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(2844)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2845)
			p.Expression_list()
		}
		{
			p.SetState(2846)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(2854)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2847)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2848)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(2849)
				p.Expression_list()
			}
			{
				p.SetState(2850)
				p.Match(MySqlParserRR_BRACKET)
			}

			p.SetState(2856)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUpdate_elemContext is an interface to support dynamic dispatch.
type IUpdate_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUpdate_elemContext differentiates from other interfaces.
	IsUpdate_elemContext()
}

type Update_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUpdate_elemContext() *Update_elemContext {
	var p = new(Update_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_update_elem
	return p
}

func (*Update_elemContext) IsUpdate_elemContext() {}

func NewUpdate_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Update_elemContext {
	var p = new(Update_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_update_elem

	return p
}

func (s *Update_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Update_elemContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Update_elemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Update_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Update_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Update_elemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUpdate_elem(s)
	}
}

func (s *Update_elemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUpdate_elem(s)
	}
}

func (s *Update_elemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUpdate_elem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Update_elem() (localctx IUpdate_elemContext) {
	localctx = NewUpdate_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MySqlParserRULE_update_elem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2859)
		p.Full_column_name()
	}
	{
		p.SetState(2860)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(2861)
		p.expression(0)
	}

	return localctx
}

// ICol_or_uservarContext is an interface to support dynamic dispatch.
type ICol_or_uservarContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCol_or_uservarContext differentiates from other interfaces.
	IsCol_or_uservarContext()
}

type Col_or_uservarContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCol_or_uservarContext() *Col_or_uservarContext {
	var p = new(Col_or_uservarContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_col_or_uservar
	return p
}

func (*Col_or_uservarContext) IsCol_or_uservarContext() {}

func NewCol_or_uservarContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Col_or_uservarContext {
	var p = new(Col_or_uservarContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_col_or_uservar

	return p
}

func (s *Col_or_uservarContext) GetParser() antlr.Parser { return s.parser }

func (s *Col_or_uservarContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Col_or_uservarContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *Col_or_uservarContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Col_or_uservarContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Col_or_uservarContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCol_or_uservar(s)
	}
}

func (s *Col_or_uservarContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCol_or_uservar(s)
	}
}

func (s *Col_or_uservarContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCol_or_uservar(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Col_or_uservar() (localctx ICol_or_uservarContext) {
	localctx = NewCol_or_uservarContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MySqlParserRULE_col_or_uservar)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2865)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2863)
			p.Id_()
		}

	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2864)
			p.Match(MySqlParserLOCAL_ID)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISingle_delete_statementContext is an interface to support dynamic dispatch.
type ISingle_delete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingle_delete_statementContext differentiates from other interfaces.
	IsSingle_delete_statementContext()
}

type Single_delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingle_delete_statementContext() *Single_delete_statementContext {
	var p = new(Single_delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_single_delete_statement
	return p
}

func (*Single_delete_statementContext) IsSingle_delete_statementContext() {}

func NewSingle_delete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Single_delete_statementContext {
	var p = new(Single_delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_single_delete_statement

	return p
}

func (s *Single_delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Single_delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *Single_delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *Single_delete_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Single_delete_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Single_delete_statementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Single_delete_statementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Single_delete_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Single_delete_statementContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Single_delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Single_delete_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Single_delete_statementContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Single_delete_statementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *Single_delete_statementContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Single_delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Single_delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Single_delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSingle_delete_statement(s)
	}
}

func (s *Single_delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSingle_delete_statement(s)
	}
}

func (s *Single_delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSingle_delete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Single_delete_statement() (localctx ISingle_delete_statementContext) {
	localctx = NewSingle_delete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MySqlParserRULE_single_delete_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2867)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(2869)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2868)
			p.Match(MySqlParserLOW_PRIORITY)
		}

	}
	p.SetState(2872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(2871)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(2875)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2874)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(2877)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(2878)
		p.Table_name()
	}
	p.SetState(2884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(2879)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(2880)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2881)
			p.Id_list()
		}
		{
			p.SetState(2882)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(2888)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(2886)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(2887)
			p.expression(0)
		}

	}
	p.SetState(2891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(2890)
			p.Order_by_clause()
		}

	}
	p.SetState(2895)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(2893)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(2894)
			p.Decimal_literal()
		}

	}

	return localctx
}

// IMultiple_delete_statementContext is an interface to support dynamic dispatch.
type IMultiple_delete_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiple_delete_statementContext differentiates from other interfaces.
	IsMultiple_delete_statementContext()
}

type Multiple_delete_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiple_delete_statementContext() *Multiple_delete_statementContext {
	var p = new(Multiple_delete_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multiple_delete_statement
	return p
}

func (*Multiple_delete_statementContext) IsMultiple_delete_statementContext() {}

func NewMultiple_delete_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiple_delete_statementContext {
	var p = new(Multiple_delete_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multiple_delete_statement

	return p
}

func (s *Multiple_delete_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiple_delete_statementContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *Multiple_delete_statementContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Multiple_delete_statementContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Multiple_delete_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *Multiple_delete_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Multiple_delete_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *Multiple_delete_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Multiple_delete_statementContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Multiple_delete_statementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Multiple_delete_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Multiple_delete_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Multiple_delete_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiple_delete_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiple_delete_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMultiple_delete_statement(s)
	}
}

func (s *Multiple_delete_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMultiple_delete_statement(s)
	}
}

func (s *Multiple_delete_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMultiple_delete_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Multiple_delete_statement() (localctx IMultiple_delete_statementContext) {
	localctx = NewMultiple_delete_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MySqlParserRULE_multiple_delete_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2897)
		p.Match(MySqlParserDELETE)
	}
	p.SetState(2899)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2898)
			p.Match(MySqlParserLOW_PRIORITY)
		}

	}
	p.SetState(2902)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 408, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2901)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(2905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(2904)
			p.Match(MySqlParserIGNORE)
		}

	}
	p.SetState(2946)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(2907)
			p.Table_name()
		}
		p.SetState(2910)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(2908)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(2909)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(2920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2912)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2913)
				p.Table_name()
			}
			p.SetState(2916)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(2914)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(2915)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(2922)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2923)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(2924)
			p.Table_sources()
		}

	case MySqlParserFROM:
		{
			p.SetState(2926)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(2927)
			p.Table_name()
		}
		p.SetState(2930)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT {
			{
				p.SetState(2928)
				p.Match(MySqlParserDOT)
			}
			{
				p.SetState(2929)
				p.Match(MySqlParserSTAR)
			}

		}
		p.SetState(2940)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(2932)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(2933)
				p.Table_name()
			}
			p.SetState(2936)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserDOT {
				{
					p.SetState(2934)
					p.Match(MySqlParserDOT)
				}
				{
					p.SetState(2935)
					p.Match(MySqlParserSTAR)
				}

			}

			p.SetState(2942)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2943)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(2944)
			p.Table_sources()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2950)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(2948)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(2949)
			p.expression(0)
		}

	}

	return localctx
}

// IHandler_open_statementContext is an interface to support dynamic dispatch.
type IHandler_open_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandler_open_statementContext differentiates from other interfaces.
	IsHandler_open_statementContext()
}

type Handler_open_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandler_open_statementContext() *Handler_open_statementContext {
	var p = new(Handler_open_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_open_statement
	return p
}

func (*Handler_open_statementContext) IsHandler_open_statementContext() {}

func NewHandler_open_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_open_statementContext {
	var p = new(Handler_open_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_open_statement

	return p
}

func (s *Handler_open_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_open_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *Handler_open_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Handler_open_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *Handler_open_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Handler_open_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *Handler_open_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_open_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_open_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_open_statement(s)
	}
}

func (s *Handler_open_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_open_statement(s)
	}
}

func (s *Handler_open_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_open_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_open_statement() (localctx IHandler_open_statementContext) {
	localctx = NewHandler_open_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MySqlParserRULE_handler_open_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2952)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(2953)
		p.Table_name()
	}
	{
		p.SetState(2954)
		p.Match(MySqlParserOPEN)
	}
	p.SetState(2959)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAS || _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		p.SetState(2956)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(2955)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(2958)
			p.Id_()
		}

	}

	return localctx
}

// IHandler_read_index_statementContext is an interface to support dynamic dispatch.
type IHandler_read_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetMove_order returns the move_order token.
	GetMove_order() antlr.Token

	// SetMove_order sets the move_order token.
	SetMove_order(antlr.Token)

	// GetIndex returns the index rule contexts.
	GetIndex() IFull_idContext

	// SetIndex sets the index rule contexts.
	SetIndex(IFull_idContext)

	// IsHandler_read_index_statementContext differentiates from other interfaces.
	IsHandler_read_index_statementContext()
}

type Handler_read_index_statementContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	index      IFull_idContext
	move_order antlr.Token
}

func NewEmptyHandler_read_index_statementContext() *Handler_read_index_statementContext {
	var p = new(Handler_read_index_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_read_index_statement
	return p
}

func (*Handler_read_index_statementContext) IsHandler_read_index_statementContext() {}

func NewHandler_read_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_read_index_statementContext {
	var p = new(Handler_read_index_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_read_index_statement

	return p
}

func (s *Handler_read_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_read_index_statementContext) GetMove_order() antlr.Token { return s.move_order }

func (s *Handler_read_index_statementContext) SetMove_order(v antlr.Token) { s.move_order = v }

func (s *Handler_read_index_statementContext) GetIndex() IFull_idContext { return s.index }

func (s *Handler_read_index_statementContext) SetIndex(v IFull_idContext) { s.index = v }

func (s *Handler_read_index_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *Handler_read_index_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Handler_read_index_statementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Handler_read_index_statementContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *Handler_read_index_statementContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *Handler_read_index_statementContext) Constant_list() IConstant_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstant_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstant_listContext)
}

func (s *Handler_read_index_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Handler_read_index_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Handler_read_index_statementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *Handler_read_index_statementContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Handler_read_index_statementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *Handler_read_index_statementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *Handler_read_index_statementContext) PREV() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREV, 0)
}

func (s *Handler_read_index_statementContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *Handler_read_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_read_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_read_index_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_read_index_statement(s)
	}
}

func (s *Handler_read_index_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_read_index_statement(s)
	}
}

func (s *Handler_read_index_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_read_index_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_read_index_statement() (localctx IHandler_read_index_statementContext) {
	localctx = NewHandler_read_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MySqlParserRULE_handler_read_index_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2961)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(2962)
		p.Table_name()
	}
	{
		p.SetState(2963)
		p.Match(MySqlParserREAD)
	}
	{
		p.SetState(2964)

		var _x = p.Full_id()

		localctx.(*Handler_read_index_statementContext).index = _x
	}
	p.SetState(2971)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEQUAL_SYMBOL, MySqlParserGREATER_SYMBOL, MySqlParserLESS_SYMBOL, MySqlParserEXCLAMATION_SYMBOL:
		{
			p.SetState(2965)
			p.Comparison_operator()
		}
		{
			p.SetState(2966)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(2967)
			p.Constant_list()
		}
		{
			p.SetState(2968)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserFIRST, MySqlParserLAST, MySqlParserNEXT, MySqlParserPREV:
		p.SetState(2970)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Handler_read_index_statementContext).move_order = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFIRST || _la == MySqlParserLAST || _la == MySqlParserNEXT || _la == MySqlParserPREV) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Handler_read_index_statementContext).move_order = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(2975)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(2973)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(2974)
			p.expression(0)
		}

	}
	p.SetState(2979)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(2977)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(2978)
			p.Decimal_literal()
		}

	}

	return localctx
}

// IHandler_read_statementContext is an interface to support dynamic dispatch.
type IHandler_read_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandler_read_statementContext differentiates from other interfaces.
	IsHandler_read_statementContext()
}

type Handler_read_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandler_read_statementContext() *Handler_read_statementContext {
	var p = new(Handler_read_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_read_statement
	return p
}

func (*Handler_read_statementContext) IsHandler_read_statementContext() {}

func NewHandler_read_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_read_statementContext {
	var p = new(Handler_read_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_read_statement

	return p
}

func (s *Handler_read_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_read_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *Handler_read_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Handler_read_statementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Handler_read_statementContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *Handler_read_statementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *Handler_read_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Handler_read_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Handler_read_statementContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *Handler_read_statementContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Handler_read_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_read_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_read_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_read_statement(s)
	}
}

func (s *Handler_read_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_read_statement(s)
	}
}

func (s *Handler_read_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_read_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_read_statement() (localctx IHandler_read_statementContext) {
	localctx = NewHandler_read_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MySqlParserRULE_handler_read_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2981)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(2982)
		p.Table_name()
	}
	{
		p.SetState(2983)
		p.Match(MySqlParserREAD)
	}
	p.SetState(2984)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserFIRST || _la == MySqlParserNEXT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(2987)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(2985)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(2986)
			p.expression(0)
		}

	}
	p.SetState(2991)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(2989)
			p.Match(MySqlParserLIMIT)
		}
		{
			p.SetState(2990)
			p.Decimal_literal()
		}

	}

	return localctx
}

// IHandler_close_statementContext is an interface to support dynamic dispatch.
type IHandler_close_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandler_close_statementContext differentiates from other interfaces.
	IsHandler_close_statementContext()
}

type Handler_close_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandler_close_statementContext() *Handler_close_statementContext {
	var p = new(Handler_close_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_close_statement
	return p
}

func (*Handler_close_statementContext) IsHandler_close_statementContext() {}

func NewHandler_close_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_close_statementContext {
	var p = new(Handler_close_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_close_statement

	return p
}

func (s *Handler_close_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_close_statementContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *Handler_close_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Handler_close_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *Handler_close_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_close_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_close_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_close_statement(s)
	}
}

func (s *Handler_close_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_close_statement(s)
	}
}

func (s *Handler_close_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_close_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_close_statement() (localctx IHandler_close_statementContext) {
	localctx = NewHandler_close_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MySqlParserRULE_handler_close_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2993)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(2994)
		p.Table_name()
	}
	{
		p.SetState(2995)
		p.Match(MySqlParserCLOSE)
	}

	return localctx
}

// ISingle_update_statementContext is an interface to support dynamic dispatch.
type ISingle_update_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSingle_update_statementContext differentiates from other interfaces.
	IsSingle_update_statementContext()
}

type Single_update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySingle_update_statementContext() *Single_update_statementContext {
	var p = new(Single_update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_single_update_statement
	return p
}

func (*Single_update_statementContext) IsSingle_update_statementContext() {}

func NewSingle_update_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Single_update_statementContext {
	var p = new(Single_update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_single_update_statement

	return p
}

func (s *Single_update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Single_update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *Single_update_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Single_update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Single_update_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Single_update_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Single_update_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Single_update_statementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Single_update_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Single_update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Single_update_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Single_update_statementContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Single_update_statementContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Single_update_statementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *Single_update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Single_update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Single_update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSingle_update_statement(s)
	}
}

func (s *Single_update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSingle_update_statement(s)
	}
}

func (s *Single_update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSingle_update_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Single_update_statement() (localctx ISingle_update_statementContext) {
	localctx = NewSingle_update_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MySqlParserRULE_single_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2997)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(2999)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(2998)
			p.Match(MySqlParserLOW_PRIORITY)
		}

	}
	p.SetState(3002)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3001)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3004)
		p.Table_name()
	}
	p.SetState(3009)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAS || _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		p.SetState(3006)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3005)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3008)
			p.Id_()
		}

	}
	{
		p.SetState(3011)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3012)
		p.Update_elem()
	}
	p.SetState(3017)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3013)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3014)
			p.Update_elem()
		}

		p.SetState(3019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3022)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3020)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3021)
			p.expression(0)
		}

	}
	p.SetState(3025)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserORDER {
		{
			p.SetState(3024)
			p.Order_by_clause()
		}

	}
	p.SetState(3028)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLIMIT {
		{
			p.SetState(3027)
			p.Limit_clause()
		}

	}

	return localctx
}

// IMultiple_update_statementContext is an interface to support dynamic dispatch.
type IMultiple_update_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiple_update_statementContext differentiates from other interfaces.
	IsMultiple_update_statementContext()
}

type Multiple_update_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiple_update_statementContext() *Multiple_update_statementContext {
	var p = new(Multiple_update_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_multiple_update_statement
	return p
}

func (*Multiple_update_statementContext) IsMultiple_update_statementContext() {}

func NewMultiple_update_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Multiple_update_statementContext {
	var p = new(Multiple_update_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_multiple_update_statement

	return p
}

func (s *Multiple_update_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Multiple_update_statementContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *Multiple_update_statementContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *Multiple_update_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Multiple_update_statementContext) AllUpdate_elem() []IUpdate_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem())
	var tst = make([]IUpdate_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUpdate_elemContext)
		}
	}

	return tst
}

func (s *Multiple_update_statementContext) Update_elem(i int) IUpdate_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUpdate_elemContext)
}

func (s *Multiple_update_statementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Multiple_update_statementContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Multiple_update_statementContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Multiple_update_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Multiple_update_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Multiple_update_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Multiple_update_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMultiple_update_statement(s)
	}
}

func (s *Multiple_update_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMultiple_update_statement(s)
	}
}

func (s *Multiple_update_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMultiple_update_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Multiple_update_statement() (localctx IMultiple_update_statementContext) {
	localctx = NewMultiple_update_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MySqlParserRULE_multiple_update_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3030)
		p.Match(MySqlParserUPDATE)
	}
	p.SetState(3032)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLOW_PRIORITY {
		{
			p.SetState(3031)
			p.Match(MySqlParserLOW_PRIORITY)
		}

	}
	p.SetState(3035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(3034)
			p.Match(MySqlParserIGNORE)
		}

	}
	{
		p.SetState(3037)
		p.Table_sources()
	}
	{
		p.SetState(3038)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3039)
		p.Update_elem()
	}
	p.SetState(3044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3040)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3041)
			p.Update_elem()
		}

		p.SetState(3046)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3047)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3048)
			p.expression(0)
		}

	}

	return localctx
}

// IOrder_by_clauseContext is an interface to support dynamic dispatch.
type IOrder_by_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_clauseContext differentiates from other interfaces.
	IsOrder_by_clauseContext()
}

type Order_by_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_clauseContext() *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_order_by_clause
	return p
}

func (*Order_by_clauseContext) IsOrder_by_clauseContext() {}

func NewOrder_by_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_clauseContext {
	var p = new(Order_by_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_order_by_clause

	return p
}

func (s *Order_by_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_clauseContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *Order_by_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *Order_by_clauseContext) AllOrder_by_expression() []IOrder_by_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem())
	var tst = make([]IOrder_by_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_expressionContext)
		}
	}

	return tst
}

func (s *Order_by_clauseContext) Order_by_expression(i int) IOrder_by_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expressionContext)
}

func (s *Order_by_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOrder_by_clause(s)
	}
}

func (s *Order_by_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOrder_by_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Order_by_clause() (localctx IOrder_by_clauseContext) {
	localctx = NewOrder_by_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MySqlParserRULE_order_by_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3051)
		p.Match(MySqlParserORDER)
	}
	{
		p.SetState(3052)
		p.Match(MySqlParserBY)
	}
	{
		p.SetState(3053)
		p.Order_by_expression()
	}
	p.SetState(3058)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3054)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3055)
			p.Order_by_expression()
		}

		p.SetState(3060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOrder_by_expressionContext is an interface to support dynamic dispatch.
type IOrder_by_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOrder_by_expressionContext differentiates from other interfaces.
	IsOrder_by_expressionContext()
}

type Order_by_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOrder_by_expressionContext() *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_order_by_expression
	return p
}

func (*Order_by_expressionContext) IsOrder_by_expressionContext() {}

func NewOrder_by_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Order_by_expressionContext {
	var p = new(Order_by_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_order_by_expression

	return p
}

func (s *Order_by_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Order_by_expressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Order_by_expressionContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *Order_by_expressionContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *Order_by_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Order_by_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Order_by_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOrder_by_expression(s)
	}
}

func (s *Order_by_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOrder_by_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Order_by_expression() (localctx IOrder_by_expressionContext) {
	localctx = NewOrder_by_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MySqlParserRULE_order_by_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3061)
		p.expression(0)
	}
	p.SetState(3063)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC {
		p.SetState(3062)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ITable_sourcesContext is an interface to support dynamic dispatch.
type ITable_sourcesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourcesContext differentiates from other interfaces.
	IsTable_sourcesContext()
}

type Table_sourcesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourcesContext() *Table_sourcesContext {
	var p = new(Table_sourcesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_sources
	return p
}

func (*Table_sourcesContext) IsTable_sourcesContext() {}

func NewTable_sourcesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourcesContext {
	var p = new(Table_sourcesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_sources

	return p
}

func (s *Table_sourcesContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourcesContext) AllTable_source() []ITable_sourceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem())
	var tst = make([]ITable_sourceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_sourceContext)
		}
	}

	return tst
}

func (s *Table_sourcesContext) Table_source(i int) ITable_sourceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_sourceContext)
}

func (s *Table_sourcesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourcesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourcesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTable_sources(s)
	}
}

func (s *Table_sourcesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTable_sources(s)
	}
}

func (s *Table_sourcesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTable_sources(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_sources() (localctx ITable_sourcesContext) {
	localctx = NewTable_sourcesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MySqlParserRULE_table_sources)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3065)
		p.Table_source()
	}
	p.SetState(3070)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3066)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3067)
			p.Table_source()
		}

		p.SetState(3072)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITable_sourceContext is an interface to support dynamic dispatch.
type ITable_sourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_sourceContext differentiates from other interfaces.
	IsTable_sourceContext()
}

type Table_sourceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_sourceContext() *Table_sourceContext {
	var p = new(Table_sourceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_source
	return p
}

func (*Table_sourceContext) IsTable_sourceContext() {}

func NewTable_sourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_sourceContext {
	var p = new(Table_sourceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_source

	return p
}

func (s *Table_sourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_sourceContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *Table_sourceContext) AllJoin_part() []IJoin_partContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IJoin_partContext)(nil)).Elem())
	var tst = make([]IJoin_partContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IJoin_partContext)
		}
	}

	return tst
}

func (s *Table_sourceContext) Join_part(i int) IJoin_partContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoin_partContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IJoin_partContext)
}

func (s *Table_sourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_sourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_sourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTable_source(s)
	}
}

func (s *Table_sourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTable_source(s)
	}
}

func (s *Table_sourceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTable_source(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_source() (localctx ITable_sourceContext) {
	localctx = NewTable_sourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MySqlParserRULE_table_source)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3090)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 442, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3073)
			p.Table_source_item()
		}
		p.SetState(3077)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3074)
					p.Join_part()
				}

			}
			p.SetState(3079)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 440, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3080)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3081)
			p.Table_source_item()
		}
		p.SetState(3085)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCROSS || (((_la-69)&-(0x1f+1)) == 0 && ((1<<uint((_la-69)))&((1<<(MySqlParserINNER-69))|(1<<(MySqlParserJOIN-69))|(1<<(MySqlParserLEFT-69))|(1<<(MySqlParserNATURAL-69)))) != 0) || _la == MySqlParserRIGHT || _la == MySqlParserSTRAIGHT_JOIN {
			{
				p.SetState(3082)
				p.Join_part()
			}

			p.SetState(3087)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(3088)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ITable_source_itemContext is an interface to support dynamic dispatch.
type ITable_source_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_source_itemContext differentiates from other interfaces.
	IsTable_source_itemContext()
}

type Table_source_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_source_itemContext() *Table_source_itemContext {
	var p = new(Table_source_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_source_item
	return p
}

func (*Table_source_itemContext) IsTable_source_itemContext() {}

func NewTable_source_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_source_itemContext {
	var p = new(Table_source_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_source_item

	return p
}

func (s *Table_source_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_source_itemContext) CopyFrom(ctx *Table_source_itemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Table_source_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_source_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryTableItemContext struct {
	*Table_source_itemContext
	alias IId_Context
}

func NewSubqueryTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryTableItemContext {
	var p = new(SubqueryTableItemContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *SubqueryTableItemContext) GetAlias() IId_Context { return s.alias }

func (s *SubqueryTableItemContext) SetAlias(v IId_Context) { s.alias = v }

func (s *SubqueryTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryTableItemContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SubqueryTableItemContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *SubqueryTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SubqueryTableItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubqueryTableItem(s)
	}
}

func (s *SubqueryTableItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubqueryTableItem(s)
	}
}

func (s *SubqueryTableItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubqueryTableItem(s)

	default:
		return t.VisitChildren(s)
	}
}

type AtomTableItemContext struct {
	*Table_source_itemContext
	alias IId_Context
}

func NewAtomTableItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtomTableItemContext {
	var p = new(AtomTableItemContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *AtomTableItemContext) GetAlias() IId_Context { return s.alias }

func (s *AtomTableItemContext) SetAlias(v IId_Context) { s.alias = v }

func (s *AtomTableItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomTableItemContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *AtomTableItemContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *AtomTableItemContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *AtomTableItemContext) AllIndex_hint() []IIndex_hintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_hintContext)(nil)).Elem())
	var tst = make([]IIndex_hintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_hintContext)
		}
	}

	return tst
}

func (s *AtomTableItemContext) Index_hint(i int) IIndex_hintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_hintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_hintContext)
}

func (s *AtomTableItemContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *AtomTableItemContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AtomTableItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAtomTableItem(s)
	}
}

func (s *AtomTableItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAtomTableItem(s)
	}
}

func (s *AtomTableItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAtomTableItem(s)

	default:
		return t.VisitChildren(s)
	}
}

type TableSourcesItemContext struct {
	*Table_source_itemContext
}

func NewTableSourcesItemContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableSourcesItemContext {
	var p = new(TableSourcesItemContext)

	p.Table_source_itemContext = NewEmptyTable_source_itemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Table_source_itemContext))

	return p
}

func (s *TableSourcesItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableSourcesItemContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *TableSourcesItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTableSourcesItem(s)
	}
}

func (s *TableSourcesItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTableSourcesItem(s)
	}
}

func (s *TableSourcesItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTableSourcesItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_source_item() (localctx ITable_source_itemContext) {
	localctx = NewTable_source_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MySqlParserRULE_table_source_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(3132)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 450, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAtomTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3092)
			p.Table_name()
		}
		p.SetState(3098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPARTITION {
			{
				p.SetState(3093)
				p.Match(MySqlParserPARTITION)
			}
			{
				p.SetState(3094)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3095)
				p.Id_list()
			}
			{
				p.SetState(3096)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3104)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 445, p.GetParserRuleContext()) == 1 {
			p.SetState(3101)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3100)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3103)

				var _x = p.Id_()

				localctx.(*AtomTableItemContext).alias = _x
			}

		}
		p.SetState(3114)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFORCE || _la == MySqlParserIGNORE || _la == MySqlParserUSE {
			{
				p.SetState(3106)
				p.Index_hint()
			}
			p.SetState(3111)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(3107)
						p.Match(MySqlParserCOMMA)
					}
					{
						p.SetState(3108)
						p.Index_hint()
					}

				}
				p.SetState(3113)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 446, p.GetParserRuleContext())
			}

		}

	case 2:
		localctx = NewSubqueryTableItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(3121)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 448, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3116)
				p.Subquery()
			}

		case 2:
			{
				p.SetState(3117)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3118)
				p.Subquery()
			}
			{
				p.SetState(3119)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(3124)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3123)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3126)

			var _x = p.Id_()

			localctx.(*SubqueryTableItemContext).alias = _x
		}

	case 3:
		localctx = NewTableSourcesItemContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3128)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3129)
			p.Table_sources()
		}
		{
			p.SetState(3130)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IIndex_hintContext is an interface to support dynamic dispatch.
type IIndex_hintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_hintContext differentiates from other interfaces.
	IsIndex_hintContext()
}

type Index_hintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_hintContext() *Index_hintContext {
	var p = new(Index_hintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_hint
	return p
}

func (*Index_hintContext) IsIndex_hintContext() {}

func NewIndex_hintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_hintContext {
	var p = new(Index_hintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_hint

	return p
}

func (s *Index_hintContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_hintContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Index_hintContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *Index_hintContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Index_hintContext) FORCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORCE, 0)
}

func (s *Index_hintContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Index_hintContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Index_hintContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Index_hintContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *Index_hintContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *Index_hintContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *Index_hintContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *Index_hintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_hintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_hintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndex_hint(s)
	}
}

func (s *Index_hintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndex_hint(s)
	}
}

func (s *Index_hintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndex_hint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_hint() (localctx IIndex_hintContext) {
	localctx = NewIndex_hintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MySqlParserRULE_index_hint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3134)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserFORCE || _la == MySqlParserIGNORE || _la == MySqlParserUSE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(3135)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(3144)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3136)
			p.Match(MySqlParserFOR)
		}
		p.SetState(3142)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserJOIN:
			{
				p.SetState(3137)
				p.Match(MySqlParserJOIN)
			}

		case MySqlParserORDER:
			{
				p.SetState(3138)
				p.Match(MySqlParserORDER)
			}
			{
				p.SetState(3139)
				p.Match(MySqlParserBY)
			}

		case MySqlParserGROUP:
			{
				p.SetState(3140)
				p.Match(MySqlParserGROUP)
			}
			{
				p.SetState(3141)
				p.Match(MySqlParserBY)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	{
		p.SetState(3146)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(3147)
		p.Id_list()
	}
	{
		p.SetState(3148)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IJoin_partContext is an interface to support dynamic dispatch.
type IJoin_partContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoin_partContext differentiates from other interfaces.
	IsJoin_partContext()
}

type Join_partContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoin_partContext() *Join_partContext {
	var p = new(Join_partContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_join_part
	return p
}

func (*Join_partContext) IsJoin_partContext() {}

func NewJoin_partContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Join_partContext {
	var p = new(Join_partContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_join_part

	return p
}

func (s *Join_partContext) GetParser() antlr.Parser { return s.parser }

func (s *Join_partContext) CopyFrom(ctx *Join_partContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Join_partContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Join_partContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type InnerJoinContext struct {
	*Join_partContext
}

func NewInnerJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InnerJoinContext {
	var p = new(InnerJoinContext)

	p.Join_partContext = NewEmptyJoin_partContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Join_partContext))

	return p
}

func (s *InnerJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InnerJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *InnerJoinContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *InnerJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *InnerJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InnerJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *InnerJoinContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *InnerJoinContext) INNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNER, 0)
}

func (s *InnerJoinContext) CROSS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSS, 0)
}

func (s *InnerJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInnerJoin(s)
	}
}

func (s *InnerJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInnerJoin(s)
	}
}

func (s *InnerJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInnerJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type NaturalJoinContext struct {
	*Join_partContext
}

func NewNaturalJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NaturalJoinContext {
	var p = new(NaturalJoinContext)

	p.Join_partContext = NewEmptyJoin_partContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Join_partContext))

	return p
}

func (s *NaturalJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NaturalJoinContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNATURAL, 0)
}

func (s *NaturalJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *NaturalJoinContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *NaturalJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *NaturalJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *NaturalJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *NaturalJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNaturalJoin(s)
	}
}

func (s *NaturalJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNaturalJoin(s)
	}
}

func (s *NaturalJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNaturalJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type OuterJoinContext struct {
	*Join_partContext
}

func NewOuterJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OuterJoinContext {
	var p = new(OuterJoinContext)

	p.Join_partContext = NewEmptyJoin_partContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Join_partContext))

	return p
}

func (s *OuterJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OuterJoinContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *OuterJoinContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *OuterJoinContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *OuterJoinContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *OuterJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *OuterJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OuterJoinContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *OuterJoinContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *OuterJoinContext) OUTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTER, 0)
}

func (s *OuterJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOuterJoin(s)
	}
}

func (s *OuterJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOuterJoin(s)
	}
}

func (s *OuterJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOuterJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

type StraightJoinContext struct {
	*Join_partContext
}

func NewStraightJoinContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StraightJoinContext {
	var p = new(StraightJoinContext)

	p.Join_partContext = NewEmptyJoin_partContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Join_partContext))

	return p
}

func (s *StraightJoinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StraightJoinContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *StraightJoinContext) Table_source_item() ITable_source_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_source_itemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_source_itemContext)
}

func (s *StraightJoinContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *StraightJoinContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StraightJoinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStraightJoin(s)
	}
}

func (s *StraightJoinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStraightJoin(s)
	}
}

func (s *StraightJoinContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStraightJoin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Join_part() (localctx IJoin_partContext) {
	localctx = NewJoin_partContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MySqlParserRULE_join_part)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3194)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCROSS, MySqlParserINNER, MySqlParserJOIN:
		localctx = NewInnerJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCROSS || _la == MySqlParserINNER {
			p.SetState(3150)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCROSS || _la == MySqlParserINNER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(3153)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3154)
			p.Table_source_item()
		}
		p.SetState(3162)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 454, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3155)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3156)
				p.expression(0)
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 454, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(3157)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3158)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3159)
				p.Id_list()
			}
			{
				p.SetState(3160)
				p.Match(MySqlParserRR_BRACKET)
			}

		}

	case MySqlParserSTRAIGHT_JOIN:
		localctx = NewStraightJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3164)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}
		{
			p.SetState(3165)
			p.Table_source_item()
		}
		p.SetState(3168)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 455, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3166)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3167)
				p.expression(0)
			}

		}

	case MySqlParserLEFT, MySqlParserRIGHT:
		localctx = NewOuterJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(3170)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(3172)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserOUTER {
			{
				p.SetState(3171)
				p.Match(MySqlParserOUTER)
			}

		}
		{
			p.SetState(3174)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3175)
			p.Table_source_item()
		}
		p.SetState(3183)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserON:
			{
				p.SetState(3176)
				p.Match(MySqlParserON)
			}
			{
				p.SetState(3177)
				p.expression(0)
			}

		case MySqlParserUSING:
			{
				p.SetState(3178)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(3179)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(3180)
				p.Id_list()
			}
			{
				p.SetState(3181)
				p.Match(MySqlParserRR_BRACKET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserNATURAL:
		localctx = NewNaturalJoinContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3185)
			p.Match(MySqlParserNATURAL)
		}
		p.SetState(3190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT {
			p.SetState(3186)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(3188)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserOUTER {
				{
					p.SetState(3187)
					p.Match(MySqlParserOUTER)
				}

			}

		}
		{
			p.SetState(3192)
			p.Match(MySqlParserJOIN)
		}
		{
			p.SetState(3193)
			p.Table_source_item()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubqueryContext is an interface to support dynamic dispatch.
type ISubqueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubqueryContext differentiates from other interfaces.
	IsSubqueryContext()
}

type SubqueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubqueryContext() *SubqueryContext {
	var p = new(SubqueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_subquery
	return p
}

func (*SubqueryContext) IsSubqueryContext() {}

func NewSubqueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubqueryContext {
	var p = new(SubqueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_subquery

	return p
}

func (s *SubqueryContext) GetParser() antlr.Parser { return s.parser }

func (s *SubqueryContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubquery(s)
	}
}

func (s *SubqueryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubquery(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Subquery() (localctx ISubqueryContext) {
	localctx = NewSubqueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MySqlParserRULE_subquery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3196)
		p.Select_statement()
	}

	return localctx
}

// IQuery_expressionContext is an interface to support dynamic dispatch.
type IQuery_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_expressionContext differentiates from other interfaces.
	IsQuery_expressionContext()
}

type Query_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_expressionContext() *Query_expressionContext {
	var p = new(Query_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_query_expression
	return p
}

func (*Query_expressionContext) IsQuery_expressionContext() {}

func NewQuery_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_expressionContext {
	var p = new(Query_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_query_expression

	return p
}

func (s *Query_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_expressionContext) Query_specification() IQuery_specificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specificationContext)
}

func (s *Query_expressionContext) Query_expression() IQuery_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expressionContext)
}

func (s *Query_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_expressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuery_expression(s)
	}
}

func (s *Query_expressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuery_expression(s)
	}
}

func (s *Query_expressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuery_expression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Query_expression() (localctx IQuery_expressionContext) {
	localctx = NewQuery_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MySqlParserRULE_query_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3206)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 461, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3198)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3199)
			p.Query_specification()
		}
		{
			p.SetState(3200)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3202)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3203)
			p.Query_expression()
		}
		{
			p.SetState(3204)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuery_expression_nointoContext is an interface to support dynamic dispatch.
type IQuery_expression_nointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_expression_nointoContext differentiates from other interfaces.
	IsQuery_expression_nointoContext()
}

type Query_expression_nointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_expression_nointoContext() *Query_expression_nointoContext {
	var p = new(Query_expression_nointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_query_expression_nointo
	return p
}

func (*Query_expression_nointoContext) IsQuery_expression_nointoContext() {}

func NewQuery_expression_nointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_expression_nointoContext {
	var p = new(Query_expression_nointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_query_expression_nointo

	return p
}

func (s *Query_expression_nointoContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_expression_nointoContext) Query_specification_nointo() IQuery_specification_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specification_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specification_nointoContext)
}

func (s *Query_expression_nointoContext) Query_expression_nointo() IQuery_expression_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expression_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expression_nointoContext)
}

func (s *Query_expression_nointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_expression_nointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_expression_nointoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuery_expression_nointo(s)
	}
}

func (s *Query_expression_nointoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuery_expression_nointo(s)
	}
}

func (s *Query_expression_nointoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuery_expression_nointo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Query_expression_nointo() (localctx IQuery_expression_nointoContext) {
	localctx = NewQuery_expression_nointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MySqlParserRULE_query_expression_nointo)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3216)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 462, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3208)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3209)
			p.Query_specification_nointo()
		}
		{
			p.SetState(3210)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3212)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3213)
			p.Query_expression_nointo()
		}
		{
			p.SetState(3214)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IQuery_specificationContext is an interface to support dynamic dispatch.
type IQuery_specificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_specificationContext differentiates from other interfaces.
	IsQuery_specificationContext()
}

type Query_specificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_specificationContext() *Query_specificationContext {
	var p = new(Query_specificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_query_specification
	return p
}

func (*Query_specificationContext) IsQuery_specificationContext() {}

func NewQuery_specificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_specificationContext {
	var p = new(Query_specificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_query_specification

	return p
}

func (s *Query_specificationContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_specificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *Query_specificationContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Query_specificationContext) AllSelect_spec() []ISelect_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_specContext)(nil)).Elem())
	var tst = make([]ISelect_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_specContext)
		}
	}

	return tst
}

func (s *Query_specificationContext) Select_spec(i int) ISelect_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_specContext)
}

func (s *Query_specificationContext) Select_into_expression() ISelect_into_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_into_expressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_into_expressionContext)
}

func (s *Query_specificationContext) From_clause() IFrom_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Query_specificationContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Query_specificationContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Query_specificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_specificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuery_specification(s)
	}
}

func (s *Query_specificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuery_specification(s)
	}
}

func (s *Query_specificationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuery_specification(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Query_specification() (localctx IQuery_specificationContext) {
	localctx = NewQuery_specificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MySqlParserRULE_query_specification)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3218)
		p.Match(MySqlParserSELECT)
	}
	p.SetState(3222)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3219)
				p.Select_spec()
			}

		}
		p.SetState(3224)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 463, p.GetParserRuleContext())
	}
	{
		p.SetState(3225)
		p.Select_list()
	}
	p.SetState(3227)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINTO {
		{
			p.SetState(3226)
			p.Select_into_expression()
		}

	}
	p.SetState(3230)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFROM {
		{
			p.SetState(3229)
			p.From_clause()
		}

	}
	p.SetState(3233)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 466, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3232)
			p.Order_by_clause()
		}

	}
	p.SetState(3236)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 467, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3235)
			p.Limit_clause()
		}

	}

	return localctx
}

// IQuery_specification_nointoContext is an interface to support dynamic dispatch.
type IQuery_specification_nointoContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQuery_specification_nointoContext differentiates from other interfaces.
	IsQuery_specification_nointoContext()
}

type Query_specification_nointoContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQuery_specification_nointoContext() *Query_specification_nointoContext {
	var p = new(Query_specification_nointoContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_query_specification_nointo
	return p
}

func (*Query_specification_nointoContext) IsQuery_specification_nointoContext() {}

func NewQuery_specification_nointoContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Query_specification_nointoContext {
	var p = new(Query_specification_nointoContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_query_specification_nointo

	return p
}

func (s *Query_specification_nointoContext) GetParser() antlr.Parser { return s.parser }

func (s *Query_specification_nointoContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *Query_specification_nointoContext) Select_list() ISelect_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_listContext)
}

func (s *Query_specification_nointoContext) AllSelect_spec() []ISelect_specContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_specContext)(nil)).Elem())
	var tst = make([]ISelect_specContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_specContext)
		}
	}

	return tst
}

func (s *Query_specification_nointoContext) Select_spec(i int) ISelect_specContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_specContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_specContext)
}

func (s *Query_specification_nointoContext) From_clause() IFrom_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrom_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFrom_clauseContext)
}

func (s *Query_specification_nointoContext) Order_by_clause() IOrder_by_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_clauseContext)
}

func (s *Query_specification_nointoContext) Limit_clause() ILimit_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILimit_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILimit_clauseContext)
}

func (s *Query_specification_nointoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Query_specification_nointoContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Query_specification_nointoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterQuery_specification_nointo(s)
	}
}

func (s *Query_specification_nointoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitQuery_specification_nointo(s)
	}
}

func (s *Query_specification_nointoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitQuery_specification_nointo(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Query_specification_nointo() (localctx IQuery_specification_nointoContext) {
	localctx = NewQuery_specification_nointoContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MySqlParserRULE_query_specification_nointo)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3238)
		p.Match(MySqlParserSELECT)
	}
	p.SetState(3242)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(3239)
				p.Select_spec()
			}

		}
		p.SetState(3244)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 468, p.GetParserRuleContext())
	}
	{
		p.SetState(3245)
		p.Select_list()
	}
	p.SetState(3247)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFROM {
		{
			p.SetState(3246)
			p.From_clause()
		}

	}
	p.SetState(3250)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 470, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3249)
			p.Order_by_clause()
		}

	}
	p.SetState(3253)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 471, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3252)
			p.Limit_clause()
		}

	}

	return localctx
}

// IUnion_parenthContext is an interface to support dynamic dispatch.
type IUnion_parenthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnion_parenthContext differentiates from other interfaces.
	IsUnion_parenthContext()
}

type Union_parenthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnion_parenthContext() *Union_parenthContext {
	var p = new(Union_parenthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_union_parenth
	return p
}

func (*Union_parenthContext) IsUnion_parenthContext() {}

func NewUnion_parenthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Union_parenthContext {
	var p = new(Union_parenthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_union_parenth

	return p
}

func (s *Union_parenthContext) GetParser() antlr.Parser { return s.parser }

func (s *Union_parenthContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *Union_parenthContext) Query_expression_nointo() IQuery_expression_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expression_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expression_nointoContext)
}

func (s *Union_parenthContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Union_parenthContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *Union_parenthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Union_parenthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Union_parenthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnion_parenth(s)
	}
}

func (s *Union_parenthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnion_parenth(s)
	}
}

func (s *Union_parenthContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnion_parenth(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Union_parenth() (localctx IUnion_parenthContext) {
	localctx = NewUnion_parenthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MySqlParserRULE_union_parenth)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3255)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3257)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		p.SetState(3256)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(3259)
		p.Query_expression_nointo()
	}

	return localctx
}

// IUnion_statementContext is an interface to support dynamic dispatch.
type IUnion_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnion_statementContext differentiates from other interfaces.
	IsUnion_statementContext()
}

type Union_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnion_statementContext() *Union_statementContext {
	var p = new(Union_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_union_statement
	return p
}

func (*Union_statementContext) IsUnion_statementContext() {}

func NewUnion_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Union_statementContext {
	var p = new(Union_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_union_statement

	return p
}

func (s *Union_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Union_statementContext) UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNION, 0)
}

func (s *Union_statementContext) Query_specification_nointo() IQuery_specification_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_specification_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_specification_nointoContext)
}

func (s *Union_statementContext) Query_expression_nointo() IQuery_expression_nointoContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuery_expression_nointoContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuery_expression_nointoContext)
}

func (s *Union_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Union_statementContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *Union_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Union_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Union_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnion_statement(s)
	}
}

func (s *Union_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnion_statement(s)
	}
}

func (s *Union_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnion_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Union_statement() (localctx IUnion_statementContext) {
	localctx = NewUnion_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MySqlParserRULE_union_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3261)
		p.Match(MySqlParserUNION)
	}
	p.SetState(3263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
		p.SetState(3262)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(3267)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSELECT:
		{
			p.SetState(3265)
			p.Query_specification_nointo()
		}

	case MySqlParserLR_BRACKET:
		{
			p.SetState(3266)
			p.Query_expression_nointo()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_specContext is an interface to support dynamic dispatch.
type ISelect_specContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_specContext differentiates from other interfaces.
	IsSelect_specContext()
}

type Select_specContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_specContext() *Select_specContext {
	var p = new(Select_specContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_select_spec
	return p
}

func (*Select_specContext) IsSelect_specContext() {}

func NewSelect_specContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_specContext {
	var p = new(Select_specContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_select_spec

	return p
}

func (s *Select_specContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_specContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Select_specContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *Select_specContext) DISTINCTROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCTROW, 0)
}

func (s *Select_specContext) HIGH_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserHIGH_PRIORITY, 0)
}

func (s *Select_specContext) STRAIGHT_JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRAIGHT_JOIN, 0)
}

func (s *Select_specContext) SQL_SMALL_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_SMALL_RESULT, 0)
}

func (s *Select_specContext) SQL_BIG_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BIG_RESULT, 0)
}

func (s *Select_specContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *Select_specContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *Select_specContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *Select_specContext) SQL_CALC_FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CALC_FOUND_ROWS, 0)
}

func (s *Select_specContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_specContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_specContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelect_spec(s)
	}
}

func (s *Select_specContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelect_spec(s)
	}
}

func (s *Select_specContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelect_spec(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Select_spec() (localctx ISelect_specContext) {
	localctx = NewSelect_specContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MySqlParserRULE_select_spec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3277)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL, MySqlParserDISTINCT, MySqlParserDISTINCTROW:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3269)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT || _la == MySqlParserDISTINCTROW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserHIGH_PRIORITY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3270)
			p.Match(MySqlParserHIGH_PRIORITY)
		}

	case MySqlParserSTRAIGHT_JOIN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3271)
			p.Match(MySqlParserSTRAIGHT_JOIN)
		}

	case MySqlParserSQL_SMALL_RESULT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3272)
			p.Match(MySqlParserSQL_SMALL_RESULT)
		}

	case MySqlParserSQL_BIG_RESULT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3273)
			p.Match(MySqlParserSQL_BIG_RESULT)
		}

	case MySqlParserSQL_BUFFER_RESULT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3274)
			p.Match(MySqlParserSQL_BUFFER_RESULT)
		}

	case MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(3275)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserSQL_CACHE || _la == MySqlParserSQL_NO_CACHE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserSQL_CALC_FOUND_ROWS:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(3276)
			p.Match(MySqlParserSQL_CALC_FOUND_ROWS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISelect_listContext is an interface to support dynamic dispatch.
type ISelect_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_listContext differentiates from other interfaces.
	IsSelect_listContext()
}

type Select_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_listContext() *Select_listContext {
	var p = new(Select_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_select_list
	return p
}

func (*Select_listContext) IsSelect_listContext() {}

func NewSelect_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_listContext {
	var p = new(Select_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_select_list

	return p
}

func (s *Select_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_listContext) AllSelect_list_elem() []ISelect_list_elemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem())
	var tst = make([]ISelect_list_elemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelect_list_elemContext)
		}
	}

	return tst
}

func (s *Select_listContext) Select_list_elem(i int) ISelect_list_elemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_list_elemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelect_list_elemContext)
}

func (s *Select_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Select_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelect_list(s)
	}
}

func (s *Select_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelect_list(s)
	}
}

func (s *Select_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelect_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Select_list() (localctx ISelect_listContext) {
	localctx = NewSelect_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MySqlParserRULE_select_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3281)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTAR:
		{
			p.SetState(3279)
			p.Match(MySqlParserSTAR)
		}

	case MySqlParserCASE, MySqlParserCAST, MySqlParserCONVERT, MySqlParserCURRENT_USER, MySqlParserDEFAULT, MySqlParserEXISTS, MySqlParserFALSE, MySqlParserIF, MySqlParserINTERVAL, MySqlParserLEFT, MySqlParserNOTNULL, MySqlParserNOT, MySqlParserNULL_LITERAL, MySqlParserREPLACE, MySqlParserRIGHT, MySqlParserTRUE, MySqlParserVALUES, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserCHAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserCURRENT_DATE, MySqlParserCURRENT_TIME, MySqlParserCURRENT_TIMESTAMP, MySqlParserLOCALTIME, MySqlParserCURDATE, MySqlParserCURTIME, MySqlParserDATE_ADD, MySqlParserDATE_SUB, MySqlParserEXTRACT, MySqlParserLOCALTIMESTAMP, MySqlParserNOW, MySqlParserPOSITION, MySqlParserSUBSTR, MySqlParserSUBSTRING, MySqlParserSYSDATE, MySqlParserTRIM, MySqlParserUTC_DATE, MySqlParserUTC_TIME, MySqlParserUTC_TIMESTAMP, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserPLUS, MySqlParserMINUS, MySqlParserEXCLAMATION_SYMBOL, MySqlParserBIT_NOT_OP, MySqlParserLR_BRACKET, MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTART_NATIONAL_STRING_LITERAL, MySqlParserSTRING_LITERAL, MySqlParserDECIMAL_LITERAL, MySqlParserHEXADECIMAL_LITERAL, MySqlParserREAL_LITERAL, MySqlParserNULL_SPEC_LITERAL, MySqlParserBIT_STRING, MySqlParserSTRING_CHARSET_NAME, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
		{
			p.SetState(3280)
			p.Select_list_elem()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(3287)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3283)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3284)
			p.Select_list_elem()
		}

		p.SetState(3289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelect_list_elemContext is an interface to support dynamic dispatch.
type ISelect_list_elemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_list_elemContext differentiates from other interfaces.
	IsSelect_list_elemContext()
}

type Select_list_elemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_list_elemContext() *Select_list_elemContext {
	var p = new(Select_list_elemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_select_list_elem
	return p
}

func (*Select_list_elemContext) IsSelect_list_elemContext() {}

func NewSelect_list_elemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_list_elemContext {
	var p = new(Select_list_elemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_select_list_elem

	return p
}

func (s *Select_list_elemContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_list_elemContext) CopyFrom(ctx *Select_list_elemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Select_list_elemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_list_elemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SellistelFuncContext struct {
	*Select_list_elemContext
}

func NewSellistelFuncContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SellistelFuncContext {
	var p = new(SellistelFuncContext)

	p.Select_list_elemContext = NewEmptySelect_list_elemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_list_elemContext))

	return p
}

func (s *SellistelFuncContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SellistelFuncContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *SellistelFuncContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SellistelFuncContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SellistelFuncContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSellistelFunc(s)
	}
}

func (s *SellistelFuncContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSellistelFunc(s)
	}
}

func (s *SellistelFuncContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSellistelFunc(s)

	default:
		return t.VisitChildren(s)
	}
}

type SellistelAllColContext struct {
	*Select_list_elemContext
}

func NewSellistelAllColContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SellistelAllColContext {
	var p = new(SellistelAllColContext)

	p.Select_list_elemContext = NewEmptySelect_list_elemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_list_elemContext))

	return p
}

func (s *SellistelAllColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SellistelAllColContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *SellistelAllColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSellistelAllCol(s)
	}
}

func (s *SellistelAllColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSellistelAllCol(s)
	}
}

func (s *SellistelAllColContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSellistelAllCol(s)

	default:
		return t.VisitChildren(s)
	}
}

type SellistelExprContext struct {
	*Select_list_elemContext
}

func NewSellistelExprContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SellistelExprContext {
	var p = new(SellistelExprContext)

	p.Select_list_elemContext = NewEmptySelect_list_elemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_list_elemContext))

	return p
}

func (s *SellistelExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SellistelExprContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SellistelExprContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *SellistelExprContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *SellistelExprContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SellistelExprContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SellistelExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSellistelExpr(s)
	}
}

func (s *SellistelExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSellistelExpr(s)
	}
}

func (s *SellistelExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSellistelExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

type SellistelColContext struct {
	*Select_list_elemContext
}

func NewSellistelColContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SellistelColContext {
	var p = new(SellistelColContext)

	p.Select_list_elemContext = NewEmptySelect_list_elemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_list_elemContext))

	return p
}

func (s *SellistelColContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SellistelColContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *SellistelColContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SellistelColContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *SellistelColContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSellistelCol(s)
	}
}

func (s *SellistelColContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSellistelCol(s)
	}
}

func (s *SellistelColContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSellistelCol(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Select_list_elem() (localctx ISelect_list_elemContext) {
	localctx = NewSelect_list_elemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MySqlParserRULE_select_list_elem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3319)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 485, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSellistelAllColContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3290)
			p.Full_id()
		}
		{
			p.SetState(3291)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(3292)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		localctx = NewSellistelColContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3294)
			p.Full_column_name()
		}
		p.SetState(3299)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 479, p.GetParserRuleContext()) == 1 {
			p.SetState(3296)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3295)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3298)
				p.Id_()
			}

		}

	case 3:
		localctx = NewSellistelFuncContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3301)
			p.Function_call()
		}
		p.SetState(3306)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 481, p.GetParserRuleContext()) == 1 {
			p.SetState(3303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3302)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3305)
				p.Id_()
			}

		}

	case 4:
		localctx = NewSellistelExprContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(3310)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 482, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3308)
				p.Match(MySqlParserLOCAL_ID)
			}
			{
				p.SetState(3309)
				p.Match(MySqlParserVAR_ASSIGN)
			}

		}
		{
			p.SetState(3312)
			p.expression(0)
		}
		p.SetState(3317)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 484, p.GetParserRuleContext()) == 1 {
			p.SetState(3314)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAS {
				{
					p.SetState(3313)
					p.Match(MySqlParserAS)
				}

			}
			{
				p.SetState(3316)
				p.Id_()
			}

		}

	}

	return localctx
}

// ISelect_into_expressionContext is an interface to support dynamic dispatch.
type ISelect_into_expressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelect_into_expressionContext differentiates from other interfaces.
	IsSelect_into_expressionContext()
}

type Select_into_expressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelect_into_expressionContext() *Select_into_expressionContext {
	var p = new(Select_into_expressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_select_into_expression
	return p
}

func (*Select_into_expressionContext) IsSelect_into_expressionContext() {}

func NewSelect_into_expressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Select_into_expressionContext {
	var p = new(Select_into_expressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_select_into_expression

	return p
}

func (s *Select_into_expressionContext) GetParser() antlr.Parser { return s.parser }

func (s *Select_into_expressionContext) CopyFrom(ctx *Select_into_expressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Select_into_expressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Select_into_expressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectIntoOutfileContext struct {
	*Select_into_expressionContext
	filename           antlr.Token
	charset            ICharset_nameContext
	terminatefieldsymb antlr.Token
	enclosedsymb       antlr.Token
	escapesymb         antlr.Token
	startingsymb       antlr.Token
	terminatelinesymb  antlr.Token
}

func NewSelectIntoOutfileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoOutfileContext {
	var p = new(SelectIntoOutfileContext)

	p.Select_into_expressionContext = NewEmptySelect_into_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_into_expressionContext))

	return p
}

func (s *SelectIntoOutfileContext) GetFilename() antlr.Token { return s.filename }

func (s *SelectIntoOutfileContext) GetTerminatefieldsymb() antlr.Token { return s.terminatefieldsymb }

func (s *SelectIntoOutfileContext) GetEnclosedsymb() antlr.Token { return s.enclosedsymb }

func (s *SelectIntoOutfileContext) GetEscapesymb() antlr.Token { return s.escapesymb }

func (s *SelectIntoOutfileContext) GetStartingsymb() antlr.Token { return s.startingsymb }

func (s *SelectIntoOutfileContext) GetTerminatelinesymb() antlr.Token { return s.terminatelinesymb }

func (s *SelectIntoOutfileContext) SetFilename(v antlr.Token) { s.filename = v }

func (s *SelectIntoOutfileContext) SetTerminatefieldsymb(v antlr.Token) { s.terminatefieldsymb = v }

func (s *SelectIntoOutfileContext) SetEnclosedsymb(v antlr.Token) { s.enclosedsymb = v }

func (s *SelectIntoOutfileContext) SetEscapesymb(v antlr.Token) { s.escapesymb = v }

func (s *SelectIntoOutfileContext) SetStartingsymb(v antlr.Token) { s.startingsymb = v }

func (s *SelectIntoOutfileContext) SetTerminatelinesymb(v antlr.Token) { s.terminatelinesymb = v }

func (s *SelectIntoOutfileContext) GetCharset() ICharset_nameContext { return s.charset }

func (s *SelectIntoOutfileContext) SetCharset(v ICharset_nameContext) { s.charset = v }

func (s *SelectIntoOutfileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoOutfileContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoOutfileContext) OUTFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOUTFILE, 0)
}

func (s *SelectIntoOutfileContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *SelectIntoOutfileContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *SelectIntoOutfileContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *SelectIntoOutfileContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SelectIntoOutfileContext) LINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINES, 0)
}

func (s *SelectIntoOutfileContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *SelectIntoOutfileContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *SelectIntoOutfileContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *SelectIntoOutfileContext) AllTERMINATED() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTERMINATED)
}

func (s *SelectIntoOutfileContext) TERMINATED(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTERMINATED, i)
}

func (s *SelectIntoOutfileContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserBY)
}

func (s *SelectIntoOutfileContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, i)
}

func (s *SelectIntoOutfileContext) ENCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCLOSED, 0)
}

func (s *SelectIntoOutfileContext) ESCAPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPED, 0)
}

func (s *SelectIntoOutfileContext) STARTING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTING, 0)
}

func (s *SelectIntoOutfileContext) OPTIONALLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONALLY, 0)
}

func (s *SelectIntoOutfileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoOutfile(s)
	}
}

func (s *SelectIntoOutfileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoOutfile(s)
	}
}

func (s *SelectIntoOutfileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoOutfile(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectIntoVarsContext struct {
	*Select_into_expressionContext
}

func NewSelectIntoVarsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoVarsContext {
	var p = new(SelectIntoVarsContext)

	p.Select_into_expressionContext = NewEmptySelect_into_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_into_expressionContext))

	return p
}

func (s *SelectIntoVarsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoVarsContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoVarsContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCAL_ID)
}

func (s *SelectIntoVarsContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, i)
}

func (s *SelectIntoVarsContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *SelectIntoVarsContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *SelectIntoVarsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoVars(s)
	}
}

func (s *SelectIntoVarsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoVars(s)
	}
}

func (s *SelectIntoVarsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoVars(s)

	default:
		return t.VisitChildren(s)
	}
}

type SelectIntoDumpContext struct {
	*Select_into_expressionContext
}

func NewSelectIntoDumpContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectIntoDumpContext {
	var p = new(SelectIntoDumpContext)

	p.Select_into_expressionContext = NewEmptySelect_into_expressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Select_into_expressionContext))

	return p
}

func (s *SelectIntoDumpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectIntoDumpContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *SelectIntoDumpContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *SelectIntoDumpContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *SelectIntoDumpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSelectIntoDump(s)
	}
}

func (s *SelectIntoDumpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSelectIntoDump(s)
	}
}

func (s *SelectIntoDumpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSelectIntoDump(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Select_into_expression() (localctx ISelect_into_expressionContext) {
	localctx = NewSelect_into_expressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MySqlParserRULE_select_into_expression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3381)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 498, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectIntoVarsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3321)
			p.Match(MySqlParserINTO)
		}
		p.SetState(3324)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLOCAL_ID:
			{
				p.SetState(3322)
				p.Match(MySqlParserLOCAL_ID)
			}

		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(3323)
				p.Id_()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(3333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3326)
				p.Match(MySqlParserCOMMA)
			}
			p.SetState(3329)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserLOCAL_ID:
				{
					p.SetState(3327)
					p.Match(MySqlParserLOCAL_ID)
				}

			case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
				{
					p.SetState(3328)
					p.Id_()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(3335)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSelectIntoDumpContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3336)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3337)
			p.Match(MySqlParserDUMPFILE)
		}
		{
			p.SetState(3338)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 3:
		localctx = NewSelectIntoOutfileContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3339)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(3340)
			p.Match(MySqlParserOUTFILE)
		}
		{
			p.SetState(3341)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*SelectIntoOutfileContext).filename = _m
		}
		p.SetState(3345)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(3342)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(3343)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(3344)

				var _x = p.Charset_name()

				localctx.(*SelectIntoOutfileContext).charset = _x
			}

		}
		p.SetState(3366)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 494, p.GetParserRuleContext()) == 1 {
			p.SetState(3347)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			p.SetState(3351)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserTERMINATED {
				{
					p.SetState(3348)
					p.Match(MySqlParserTERMINATED)
				}
				{
					p.SetState(3349)
					p.Match(MySqlParserBY)
				}
				{
					p.SetState(3350)

					var _m = p.Match(MySqlParserSTRING_LITERAL)

					localctx.(*SelectIntoOutfileContext).terminatefieldsymb = _m
				}

			}
			p.SetState(3359)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserENCLOSED || _la == MySqlParserOPTIONALLY {
				p.SetState(3354)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserOPTIONALLY {
					{
						p.SetState(3353)
						p.Match(MySqlParserOPTIONALLY)
					}

				}
				{
					p.SetState(3356)
					p.Match(MySqlParserENCLOSED)
				}
				{
					p.SetState(3357)
					p.Match(MySqlParserBY)
				}
				{
					p.SetState(3358)

					var _m = p.Match(MySqlParserSTRING_LITERAL)

					localctx.(*SelectIntoOutfileContext).enclosedsymb = _m
				}

			}
			p.SetState(3364)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserESCAPED {
				{
					p.SetState(3361)
					p.Match(MySqlParserESCAPED)
				}
				{
					p.SetState(3362)
					p.Match(MySqlParserBY)
				}
				{
					p.SetState(3363)

					var _m = p.Match(MySqlParserSTRING_LITERAL)

					localctx.(*SelectIntoOutfileContext).escapesymb = _m
				}

			}

		}
		p.SetState(3379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLINES {
			{
				p.SetState(3368)
				p.Match(MySqlParserLINES)
			}
			p.SetState(3372)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTARTING {
				{
					p.SetState(3369)
					p.Match(MySqlParserSTARTING)
				}
				{
					p.SetState(3370)
					p.Match(MySqlParserBY)
				}
				{
					p.SetState(3371)

					var _m = p.Match(MySqlParserSTRING_LITERAL)

					localctx.(*SelectIntoOutfileContext).startingsymb = _m
				}

			}
			p.SetState(3377)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserTERMINATED {
				{
					p.SetState(3374)
					p.Match(MySqlParserTERMINATED)
				}
				{
					p.SetState(3375)
					p.Match(MySqlParserBY)
				}
				{
					p.SetState(3376)

					var _m = p.Match(MySqlParserSTRING_LITERAL)

					localctx.(*SelectIntoOutfileContext).terminatelinesymb = _m
				}

			}

		}

	}

	return localctx
}

// IFrom_clauseContext is an interface to support dynamic dispatch.
type IFrom_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrom_clauseContext differentiates from other interfaces.
	IsFrom_clauseContext()
}

type From_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrom_clauseContext() *From_clauseContext {
	var p = new(From_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_from_clause
	return p
}

func (*From_clauseContext) IsFrom_clauseContext() {}

func NewFrom_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *From_clauseContext {
	var p = new(From_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_from_clause

	return p
}

func (s *From_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *From_clauseContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *From_clauseContext) Table_sources() ITable_sourcesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_sourcesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_sourcesContext)
}

func (s *From_clauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *From_clauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *From_clauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *From_clauseContext) GROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP, 0)
}

func (s *From_clauseContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *From_clauseContext) AllGroup_by_item() []IGroup_by_itemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem())
	var tst = make([]IGroup_by_itemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroup_by_itemContext)
		}
	}

	return tst
}

func (s *From_clauseContext) Group_by_item(i int) IGroup_by_itemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroup_by_itemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroup_by_itemContext)
}

func (s *From_clauseContext) HAVING() antlr.TerminalNode {
	return s.GetToken(MySqlParserHAVING, 0)
}

func (s *From_clauseContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *From_clauseContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *From_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *From_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *From_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFrom_clause(s)
	}
}

func (s *From_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFrom_clause(s)
	}
}

func (s *From_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFrom_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) From_clause() (localctx IFrom_clauseContext) {
	localctx = NewFrom_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MySqlParserRULE_from_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3383)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(3384)
		p.Table_sources()
	}
	p.SetState(3387)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWHERE {
		{
			p.SetState(3385)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(3386)
			p.expression(0)
		}

	}
	p.SetState(3403)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserGROUP {
		{
			p.SetState(3389)
			p.Match(MySqlParserGROUP)
		}
		{
			p.SetState(3390)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(3391)
			p.Group_by_item()
		}
		p.SetState(3396)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3392)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3393)
				p.Group_by_item()
			}

			p.SetState(3398)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(3401)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 501, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3399)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(3400)
				p.Match(MySqlParserROLLUP)
			}

		}

	}
	p.SetState(3407)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserHAVING {
		{
			p.SetState(3405)
			p.Match(MySqlParserHAVING)
		}
		{
			p.SetState(3406)
			p.expression(0)
		}

	}

	return localctx
}

// IGroup_by_itemContext is an interface to support dynamic dispatch.
type IGroup_by_itemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroup_by_itemContext differentiates from other interfaces.
	IsGroup_by_itemContext()
}

type Group_by_itemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroup_by_itemContext() *Group_by_itemContext {
	var p = new(Group_by_itemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_group_by_item
	return p
}

func (*Group_by_itemContext) IsGroup_by_itemContext() {}

func NewGroup_by_itemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Group_by_itemContext {
	var p = new(Group_by_itemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_group_by_item

	return p
}

func (s *Group_by_itemContext) GetParser() antlr.Parser { return s.parser }

func (s *Group_by_itemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Group_by_itemContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *Group_by_itemContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *Group_by_itemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Group_by_itemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Group_by_itemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGroup_by_item(s)
	}
}

func (s *Group_by_itemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGroup_by_item(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Group_by_item() (localctx IGroup_by_itemContext) {
	localctx = NewGroup_by_itemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MySqlParserRULE_group_by_item)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3409)
		p.expression(0)
	}
	p.SetState(3411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC {
		p.SetState(3410)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// ILimit_clauseContext is an interface to support dynamic dispatch.
type ILimit_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLimit_clauseContext differentiates from other interfaces.
	IsLimit_clauseContext()
}

type Limit_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLimit_clauseContext() *Limit_clauseContext {
	var p = new(Limit_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_limit_clause
	return p
}

func (*Limit_clauseContext) IsLimit_clauseContext() {}

func NewLimit_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Limit_clauseContext {
	var p = new(Limit_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_limit_clause

	return p
}

func (s *Limit_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Limit_clauseContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *Limit_clauseContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Limit_clauseContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Limit_clauseContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *Limit_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Limit_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Limit_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLimit_clause(s)
	}
}

func (s *Limit_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLimit_clause(s)
	}
}

func (s *Limit_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLimit_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Limit_clause() (localctx ILimit_clauseContext) {
	localctx = NewLimit_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MySqlParserRULE_limit_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3413)
		p.Match(MySqlParserLIMIT)
	}
	p.SetState(3424)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 506, p.GetParserRuleContext()) {
	case 1:
		p.SetState(3417)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 505, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(3414)
				p.Decimal_literal()
			}
			{
				p.SetState(3415)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(3419)
			p.Decimal_literal()
		}

	case 2:
		{
			p.SetState(3420)
			p.Decimal_literal()
		}
		{
			p.SetState(3421)
			p.Match(MySqlParserOFFSET)
		}
		{
			p.SetState(3422)
			p.Decimal_literal()
		}

	}

	return localctx
}

// IStart_transactionContext is an interface to support dynamic dispatch.
type IStart_transactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_transactionContext differentiates from other interfaces.
	IsStart_transactionContext()
}

type Start_transactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_transactionContext() *Start_transactionContext {
	var p = new(Start_transactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_start_transaction
	return p
}

func (*Start_transactionContext) IsStart_transactionContext() {}

func NewStart_transactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_transactionContext {
	var p = new(Start_transactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_start_transaction

	return p
}

func (s *Start_transactionContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_transactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Start_transactionContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *Start_transactionContext) AllTransact_option() []ITransact_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITransact_optionContext)(nil)).Elem())
	var tst = make([]ITransact_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITransact_optionContext)
		}
	}

	return tst
}

func (s *Start_transactionContext) Transact_option(i int) ITransact_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransact_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITransact_optionContext)
}

func (s *Start_transactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_transactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_transactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStart_transaction(s)
	}
}

func (s *Start_transactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStart_transaction(s)
	}
}

func (s *Start_transactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStart_transaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Start_transaction() (localctx IStart_transactionContext) {
	localctx = NewStart_transactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MySqlParserRULE_start_transaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3426)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3427)
		p.Match(MySqlParserTRANSACTION)
	}
	p.SetState(3436)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREAD || _la == MySqlParserWITH {
		{
			p.SetState(3428)
			p.Transact_option()
		}
		p.SetState(3433)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3429)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3430)
				p.Transact_option()
			}

			p.SetState(3435)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IBegin_workContext is an interface to support dynamic dispatch.
type IBegin_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBegin_workContext differentiates from other interfaces.
	IsBegin_workContext()
}

type Begin_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBegin_workContext() *Begin_workContext {
	var p = new(Begin_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_begin_work
	return p
}

func (*Begin_workContext) IsBegin_workContext() {}

func NewBegin_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Begin_workContext {
	var p = new(Begin_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_begin_work

	return p
}

func (s *Begin_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Begin_workContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *Begin_workContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *Begin_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Begin_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Begin_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBegin_work(s)
	}
}

func (s *Begin_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBegin_work(s)
	}
}

func (s *Begin_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBegin_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Begin_work() (localctx IBegin_workContext) {
	localctx = NewBegin_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MySqlParserRULE_begin_work)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3438)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(3440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3439)
			p.Match(MySqlParserWORK)
		}

	}

	return localctx
}

// ICommit_workContext is an interface to support dynamic dispatch.
type ICommit_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommit_workContext differentiates from other interfaces.
	IsCommit_workContext()
}

type Commit_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommit_workContext() *Commit_workContext {
	var p = new(Commit_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_commit_work
	return p
}

func (*Commit_workContext) IsCommit_workContext() {}

func NewCommit_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Commit_workContext {
	var p = new(Commit_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_commit_work

	return p
}

func (s *Commit_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Commit_workContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *Commit_workContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *Commit_workContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *Commit_workContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *Commit_workContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *Commit_workContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *Commit_workContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *Commit_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Commit_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Commit_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCommit_work(s)
	}
}

func (s *Commit_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCommit_work(s)
	}
}

func (s *Commit_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCommit_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Commit_work() (localctx ICommit_workContext) {
	localctx = NewCommit_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MySqlParserRULE_commit_work)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3442)
		p.Match(MySqlParserCOMMIT)
	}
	p.SetState(3444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3443)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3451)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3446)
			p.Match(MySqlParserAND)
		}
		p.SetState(3448)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3447)
				p.Match(MySqlParserNO)
			}

		}
		{
			p.SetState(3450)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserRELEASE || _la == MySqlParserNO {
		p.SetState(3454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3453)
				p.Match(MySqlParserNO)
			}

		}
		{
			p.SetState(3456)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// IRollback_workContext is an interface to support dynamic dispatch.
type IRollback_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_workContext differentiates from other interfaces.
	IsRollback_workContext()
}

type Rollback_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_workContext() *Rollback_workContext {
	var p = new(Rollback_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollback_work
	return p
}

func (*Rollback_workContext) IsRollback_workContext() {}

func NewRollback_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_workContext {
	var p = new(Rollback_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollback_work

	return p
}

func (s *Rollback_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_workContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *Rollback_workContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *Rollback_workContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *Rollback_workContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *Rollback_workContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *Rollback_workContext) AllNO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserNO)
}

func (s *Rollback_workContext) NO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, i)
}

func (s *Rollback_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRollback_work(s)
	}
}

func (s *Rollback_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRollback_work(s)
	}
}

func (s *Rollback_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRollback_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Rollback_work() (localctx IRollback_workContext) {
	localctx = NewRollback_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MySqlParserRULE_rollback_work)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3459)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3460)
			p.Match(MySqlParserWORK)
		}

	}
	p.SetState(3468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAND {
		{
			p.SetState(3463)
			p.Match(MySqlParserAND)
		}
		p.SetState(3465)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3464)
				p.Match(MySqlParserNO)
			}

		}
		{
			p.SetState(3467)
			p.Match(MySqlParserCHAIN)
		}

	}
	p.SetState(3474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserRELEASE || _la == MySqlParserNO {
		p.SetState(3471)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNO {
			{
				p.SetState(3470)
				p.Match(MySqlParserNO)
			}

		}
		{
			p.SetState(3473)
			p.Match(MySqlParserRELEASE)
		}

	}

	return localctx
}

// ISavepoint_statementContext is an interface to support dynamic dispatch.
type ISavepoint_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSavepoint_statementContext differentiates from other interfaces.
	IsSavepoint_statementContext()
}

type Savepoint_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySavepoint_statementContext() *Savepoint_statementContext {
	var p = new(Savepoint_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_savepoint_statement
	return p
}

func (*Savepoint_statementContext) IsSavepoint_statementContext() {}

func NewSavepoint_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Savepoint_statementContext {
	var p = new(Savepoint_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_savepoint_statement

	return p
}

func (s *Savepoint_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Savepoint_statementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *Savepoint_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Savepoint_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Savepoint_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Savepoint_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSavepoint_statement(s)
	}
}

func (s *Savepoint_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSavepoint_statement(s)
	}
}

func (s *Savepoint_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSavepoint_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Savepoint_statement() (localctx ISavepoint_statementContext) {
	localctx = NewSavepoint_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MySqlParserRULE_savepoint_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3476)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3477)
		p.Id_()
	}

	return localctx
}

// IRollback_statementContext is an interface to support dynamic dispatch.
type IRollback_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRollback_statementContext differentiates from other interfaces.
	IsRollback_statementContext()
}

type Rollback_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRollback_statementContext() *Rollback_statementContext {
	var p = new(Rollback_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rollback_statement
	return p
}

func (*Rollback_statementContext) IsRollback_statementContext() {}

func NewRollback_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rollback_statementContext {
	var p = new(Rollback_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rollback_statement

	return p
}

func (s *Rollback_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Rollback_statementContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *Rollback_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Rollback_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Rollback_statementContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *Rollback_statementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *Rollback_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rollback_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rollback_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRollback_statement(s)
	}
}

func (s *Rollback_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRollback_statement(s)
	}
}

func (s *Rollback_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRollback_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Rollback_statement() (localctx IRollback_statementContext) {
	localctx = NewRollback_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MySqlParserRULE_rollback_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3479)
		p.Match(MySqlParserROLLBACK)
	}
	p.SetState(3481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWORK {
		{
			p.SetState(3480)
			p.Match(MySqlParserWORK)
		}

	}
	{
		p.SetState(3483)
		p.Match(MySqlParserTO)
	}
	p.SetState(3485)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 521, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3484)
			p.Match(MySqlParserSAVEPOINT)
		}

	}
	{
		p.SetState(3487)
		p.Id_()
	}

	return localctx
}

// IRelease_statementContext is an interface to support dynamic dispatch.
type IRelease_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelease_statementContext differentiates from other interfaces.
	IsRelease_statementContext()
}

type Release_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelease_statementContext() *Release_statementContext {
	var p = new(Release_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_release_statement
	return p
}

func (*Release_statementContext) IsRelease_statementContext() {}

func NewRelease_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Release_statementContext {
	var p = new(Release_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_release_statement

	return p
}

func (s *Release_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Release_statementContext) RELEASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE, 0)
}

func (s *Release_statementContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *Release_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Release_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Release_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Release_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRelease_statement(s)
	}
}

func (s *Release_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRelease_statement(s)
	}
}

func (s *Release_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRelease_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Release_statement() (localctx IRelease_statementContext) {
	localctx = NewRelease_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MySqlParserRULE_release_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3489)
		p.Match(MySqlParserRELEASE)
	}
	{
		p.SetState(3490)
		p.Match(MySqlParserSAVEPOINT)
	}
	{
		p.SetState(3491)
		p.Id_()
	}

	return localctx
}

// ILock_tablesContext is an interface to support dynamic dispatch.
type ILock_tablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLock_tablesContext differentiates from other interfaces.
	IsLock_tablesContext()
}

type Lock_tablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLock_tablesContext() *Lock_tablesContext {
	var p = new(Lock_tablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lock_tables
	return p
}

func (*Lock_tablesContext) IsLock_tablesContext() {}

func NewLock_tablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lock_tablesContext {
	var p = new(Lock_tablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lock_tables

	return p
}

func (s *Lock_tablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Lock_tablesContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *Lock_tablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *Lock_tablesContext) AllLock_table_element() []ILock_table_elementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILock_table_elementContext)(nil)).Elem())
	var tst = make([]ILock_table_elementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILock_table_elementContext)
		}
	}

	return tst
}

func (s *Lock_tablesContext) Lock_table_element(i int) ILock_table_elementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILock_table_elementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILock_table_elementContext)
}

func (s *Lock_tablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lock_tablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lock_tablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLock_tables(s)
	}
}

func (s *Lock_tablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLock_tables(s)
	}
}

func (s *Lock_tablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLock_tables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Lock_tables() (localctx ILock_tablesContext) {
	localctx = NewLock_tablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MySqlParserRULE_lock_tables)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3493)
		p.Match(MySqlParserLOCK)
	}
	{
		p.SetState(3494)
		p.Match(MySqlParserTABLES)
	}
	{
		p.SetState(3495)
		p.Lock_table_element()
	}
	p.SetState(3500)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3496)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3497)
			p.Lock_table_element()
		}

		p.SetState(3502)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUnlock_tablesContext is an interface to support dynamic dispatch.
type IUnlock_tablesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnlock_tablesContext differentiates from other interfaces.
	IsUnlock_tablesContext()
}

type Unlock_tablesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnlock_tablesContext() *Unlock_tablesContext {
	var p = new(Unlock_tablesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unlock_tables
	return p
}

func (*Unlock_tablesContext) IsUnlock_tablesContext() {}

func NewUnlock_tablesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unlock_tablesContext {
	var p = new(Unlock_tablesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unlock_tables

	return p
}

func (s *Unlock_tablesContext) GetParser() antlr.Parser { return s.parser }

func (s *Unlock_tablesContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *Unlock_tablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *Unlock_tablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unlock_tablesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unlock_tablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnlock_tables(s)
	}
}

func (s *Unlock_tablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnlock_tables(s)
	}
}

func (s *Unlock_tablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnlock_tables(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Unlock_tables() (localctx IUnlock_tablesContext) {
	localctx = NewUnlock_tablesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MySqlParserRULE_unlock_tables)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3503)
		p.Match(MySqlParserUNLOCK)
	}
	{
		p.SetState(3504)
		p.Match(MySqlParserTABLES)
	}

	return localctx
}

// ISet_autocommit_statementContext is an interface to support dynamic dispatch.
type ISet_autocommit_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_autocommit_statementContext differentiates from other interfaces.
	IsSet_autocommit_statementContext()
}

type Set_autocommit_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_autocommit_statementContext() *Set_autocommit_statementContext {
	var p = new(Set_autocommit_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_set_autocommit_statement
	return p
}

func (*Set_autocommit_statementContext) IsSet_autocommit_statementContext() {}

func NewSet_autocommit_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_autocommit_statementContext {
	var p = new(Set_autocommit_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_set_autocommit_statement

	return p
}

func (s *Set_autocommit_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_autocommit_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Set_autocommit_statementContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *Set_autocommit_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_autocommit_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_autocommit_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSet_autocommit_statement(s)
	}
}

func (s *Set_autocommit_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSet_autocommit_statement(s)
	}
}

func (s *Set_autocommit_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSet_autocommit_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Set_autocommit_statement() (localctx ISet_autocommit_statementContext) {
	localctx = NewSet_autocommit_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MySqlParserRULE_set_autocommit_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3506)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(3507)
		p.Match(MySqlParserAUTOCOMMIT)
	}
	{
		p.SetState(3508)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	p.SetState(3509)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ISet_transaction_statementContext is an interface to support dynamic dispatch.
type ISet_transaction_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_transaction_statementContext differentiates from other interfaces.
	IsSet_transaction_statementContext()
}

type Set_transaction_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_transaction_statementContext() *Set_transaction_statementContext {
	var p = new(Set_transaction_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_set_transaction_statement
	return p
}

func (*Set_transaction_statementContext) IsSet_transaction_statementContext() {}

func NewSet_transaction_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_transaction_statementContext {
	var p = new(Set_transaction_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_set_transaction_statement

	return p
}

func (s *Set_transaction_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_transaction_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Set_transaction_statementContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *Set_transaction_statementContext) AllTrans_characteristic() []ITrans_characteristicContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITrans_characteristicContext)(nil)).Elem())
	var tst = make([]ITrans_characteristicContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITrans_characteristicContext)
		}
	}

	return tst
}

func (s *Set_transaction_statementContext) Trans_characteristic(i int) ITrans_characteristicContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrans_characteristicContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITrans_characteristicContext)
}

func (s *Set_transaction_statementContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *Set_transaction_statementContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *Set_transaction_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_transaction_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_transaction_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSet_transaction_statement(s)
	}
}

func (s *Set_transaction_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSet_transaction_statement(s)
	}
}

func (s *Set_transaction_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSet_transaction_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Set_transaction_statement() (localctx ISet_transaction_statementContext) {
	localctx = NewSet_transaction_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MySqlParserRULE_set_transaction_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3511)
		p.Match(MySqlParserSET)
	}
	p.SetState(3513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
		p.SetState(3512)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(3515)
		p.Match(MySqlParserTRANSACTION)
	}
	{
		p.SetState(3516)
		p.Trans_characteristic()
	}
	p.SetState(3521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3517)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3518)
			p.Trans_characteristic()
		}

		p.SetState(3523)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITransact_optionContext is an interface to support dynamic dispatch.
type ITransact_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransact_optionContext differentiates from other interfaces.
	IsTransact_optionContext()
}

type Transact_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransact_optionContext() *Transact_optionContext {
	var p = new(Transact_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transact_option
	return p
}

func (*Transact_optionContext) IsTransact_optionContext() {}

func NewTransact_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transact_optionContext {
	var p = new(Transact_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transact_option

	return p
}

func (s *Transact_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Transact_optionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Transact_optionContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *Transact_optionContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *Transact_optionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Transact_optionContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *Transact_optionContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *Transact_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transact_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transact_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransact_option(s)
	}
}

func (s *Transact_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransact_option(s)
	}
}

func (s *Transact_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransact_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Transact_option() (localctx ITransact_optionContext) {
	localctx = NewTransact_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MySqlParserRULE_transact_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3531)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 525, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3524)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(3525)
			p.Match(MySqlParserCONSISTENT)
		}
		{
			p.SetState(3526)
			p.Match(MySqlParserSNAPSHOT)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3527)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3528)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3529)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3530)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ILock_table_elementContext is an interface to support dynamic dispatch.
type ILock_table_elementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLock_table_elementContext differentiates from other interfaces.
	IsLock_table_elementContext()
}

type Lock_table_elementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLock_table_elementContext() *Lock_table_elementContext {
	var p = new(Lock_table_elementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_lock_table_element
	return p
}

func (*Lock_table_elementContext) IsLock_table_elementContext() {}

func NewLock_table_elementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Lock_table_elementContext {
	var p = new(Lock_table_elementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_lock_table_element

	return p
}

func (s *Lock_table_elementContext) GetParser() antlr.Parser { return s.parser }

func (s *Lock_table_elementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Lock_table_elementContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Lock_table_elementContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *Lock_table_elementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Lock_table_elementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Lock_table_elementContext) LOW_PRIORITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOW_PRIORITY, 0)
}

func (s *Lock_table_elementContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *Lock_table_elementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Lock_table_elementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Lock_table_elementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLock_table_element(s)
	}
}

func (s *Lock_table_elementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLock_table_element(s)
	}
}

func (s *Lock_table_elementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLock_table_element(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Lock_table_element() (localctx ILock_table_elementContext) {
	localctx = NewLock_table_elementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MySqlParserRULE_lock_table_element)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3533)
		p.Table_name()
	}
	p.SetState(3538)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAS || _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		p.SetState(3535)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(3534)
				p.Match(MySqlParserAS)
			}

		}
		{
			p.SetState(3537)
			p.Id_()
		}

	}
	p.SetState(3548)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREAD:
		{
			p.SetState(3540)
			p.Match(MySqlParserREAD)
		}
		p.SetState(3542)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOCAL {
			{
				p.SetState(3541)
				p.Match(MySqlParserLOCAL)
			}

		}

	case MySqlParserLOW_PRIORITY, MySqlParserWRITE:
		p.SetState(3545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLOW_PRIORITY {
			{
				p.SetState(3544)
				p.Match(MySqlParserLOW_PRIORITY)
			}

		}
		{
			p.SetState(3547)
			p.Match(MySqlParserWRITE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITrans_characteristicContext is an interface to support dynamic dispatch.
type ITrans_characteristicContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrans_characteristicContext differentiates from other interfaces.
	IsTrans_characteristicContext()
}

type Trans_characteristicContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrans_characteristicContext() *Trans_characteristicContext {
	var p = new(Trans_characteristicContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_trans_characteristic
	return p
}

func (*Trans_characteristicContext) IsTrans_characteristicContext() {}

func NewTrans_characteristicContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Trans_characteristicContext {
	var p = new(Trans_characteristicContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_trans_characteristic

	return p
}

func (s *Trans_characteristicContext) GetParser() antlr.Parser { return s.parser }

func (s *Trans_characteristicContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *Trans_characteristicContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *Trans_characteristicContext) Transaction_level() ITransaction_levelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_levelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_levelContext)
}

func (s *Trans_characteristicContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Trans_characteristicContext) WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRITE, 0)
}

func (s *Trans_characteristicContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *Trans_characteristicContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Trans_characteristicContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Trans_characteristicContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTrans_characteristic(s)
	}
}

func (s *Trans_characteristicContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTrans_characteristic(s)
	}
}

func (s *Trans_characteristicContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTrans_characteristic(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Trans_characteristic() (localctx ITrans_characteristicContext) {
	localctx = NewTrans_characteristicContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MySqlParserRULE_trans_characteristic)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3557)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 531, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3550)
			p.Match(MySqlParserISOLATION)
		}
		{
			p.SetState(3551)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(3552)
			p.Transaction_level()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3553)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3554)
			p.Match(MySqlParserWRITE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3555)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3556)
			p.Match(MySqlParserONLY)
		}

	}

	return localctx
}

// ITransaction_levelContext is an interface to support dynamic dispatch.
type ITransaction_levelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_levelContext differentiates from other interfaces.
	IsTransaction_levelContext()
}

type Transaction_levelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_levelContext() *Transaction_levelContext {
	var p = new(Transaction_levelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transaction_level
	return p
}

func (*Transaction_levelContext) IsTransaction_levelContext() {}

func NewTransaction_levelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_levelContext {
	var p = new(Transaction_levelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transaction_level

	return p
}

func (s *Transaction_levelContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_levelContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *Transaction_levelContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Transaction_levelContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *Transaction_levelContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *Transaction_levelContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *Transaction_levelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_levelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_levelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransaction_level(s)
	}
}

func (s *Transaction_levelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransaction_level(s)
	}
}

func (s *Transaction_levelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransaction_level(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Transaction_level() (localctx ITransaction_levelContext) {
	localctx = NewTransaction_levelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MySqlParserRULE_transaction_level)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3566)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 532, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3559)
			p.Match(MySqlParserREPEATABLE)
		}
		{
			p.SetState(3560)
			p.Match(MySqlParserREAD)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3561)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3562)
			p.Match(MySqlParserCOMMITTED)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3563)
			p.Match(MySqlParserREAD)
		}
		{
			p.SetState(3564)
			p.Match(MySqlParserUNCOMMITTED)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3565)
			p.Match(MySqlParserSERIALIZABLE)
		}

	}

	return localctx
}

// IChange_masterContext is an interface to support dynamic dispatch.
type IChange_masterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_masterContext differentiates from other interfaces.
	IsChange_masterContext()
}

type Change_masterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_masterContext() *Change_masterContext {
	var p = new(Change_masterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_change_master
	return p
}

func (*Change_masterContext) IsChange_masterContext() {}

func NewChange_masterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_masterContext {
	var p = new(Change_masterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_change_master

	return p
}

func (s *Change_masterContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_masterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *Change_masterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *Change_masterContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Change_masterContext) AllMaster_option() []IMaster_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMaster_optionContext)(nil)).Elem())
	var tst = make([]IMaster_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMaster_optionContext)
		}
	}

	return tst
}

func (s *Change_masterContext) Master_option(i int) IMaster_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMaster_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMaster_optionContext)
}

func (s *Change_masterContext) Channel_option() IChannel_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannel_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannel_optionContext)
}

func (s *Change_masterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_masterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_masterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChange_master(s)
	}
}

func (s *Change_masterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChange_master(s)
	}
}

func (s *Change_masterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChange_master(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Change_master() (localctx IChange_masterContext) {
	localctx = NewChange_masterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MySqlParserRULE_change_master)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3568)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(3569)
		p.Match(MySqlParserMASTER)
	}
	{
		p.SetState(3570)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(3571)
		p.Master_option()
	}
	p.SetState(3576)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3572)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3573)
			p.Master_option()
		}

		p.SetState(3578)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3579)
			p.Channel_option()
		}

	}

	return localctx
}

// IChange_repl_filterContext is an interface to support dynamic dispatch.
type IChange_repl_filterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChange_repl_filterContext differentiates from other interfaces.
	IsChange_repl_filterContext()
}

type Change_repl_filterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChange_repl_filterContext() *Change_repl_filterContext {
	var p = new(Change_repl_filterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_change_repl_filter
	return p
}

func (*Change_repl_filterContext) IsChange_repl_filterContext() {}

func NewChange_repl_filterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Change_repl_filterContext {
	var p = new(Change_repl_filterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_change_repl_filter

	return p
}

func (s *Change_repl_filterContext) GetParser() antlr.Parser { return s.parser }

func (s *Change_repl_filterContext) CHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGE, 0)
}

func (s *Change_repl_filterContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *Change_repl_filterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILTER, 0)
}

func (s *Change_repl_filterContext) AllRepl_filter() []IRepl_filterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRepl_filterContext)(nil)).Elem())
	var tst = make([]IRepl_filterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRepl_filterContext)
		}
	}

	return tst
}

func (s *Change_repl_filterContext) Repl_filter(i int) IRepl_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRepl_filterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRepl_filterContext)
}

func (s *Change_repl_filterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Change_repl_filterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Change_repl_filterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChange_repl_filter(s)
	}
}

func (s *Change_repl_filterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChange_repl_filter(s)
	}
}

func (s *Change_repl_filterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChange_repl_filter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Change_repl_filter() (localctx IChange_repl_filterContext) {
	localctx = NewChange_repl_filterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MySqlParserRULE_change_repl_filter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3582)
		p.Match(MySqlParserCHANGE)
	}
	{
		p.SetState(3583)
		p.Match(MySqlParserREPLICATION)
	}
	{
		p.SetState(3584)
		p.Match(MySqlParserFILTER)
	}
	{
		p.SetState(3585)
		p.Repl_filter()
	}
	p.SetState(3590)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(3586)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3587)
			p.Repl_filter()
		}

		p.SetState(3592)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPurge_binary_logsContext is an interface to support dynamic dispatch.
type IPurge_binary_logsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPurge_binary_logsContext differentiates from other interfaces.
	IsPurge_binary_logsContext()
}

type Purge_binary_logsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPurge_binary_logsContext() *Purge_binary_logsContext {
	var p = new(Purge_binary_logsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_purge_binary_logs
	return p
}

func (*Purge_binary_logsContext) IsPurge_binary_logsContext() {}

func NewPurge_binary_logsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Purge_binary_logsContext {
	var p = new(Purge_binary_logsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_purge_binary_logs

	return p
}

func (s *Purge_binary_logsContext) GetParser() antlr.Parser { return s.parser }

func (s *Purge_binary_logsContext) PURGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPURGE, 0)
}

func (s *Purge_binary_logsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *Purge_binary_logsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Purge_binary_logsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *Purge_binary_logsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *Purge_binary_logsContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Purge_binary_logsContext) BEFORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEFORE, 0)
}

func (s *Purge_binary_logsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Purge_binary_logsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Purge_binary_logsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPurge_binary_logs(s)
	}
}

func (s *Purge_binary_logsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPurge_binary_logs(s)
	}
}

func (s *Purge_binary_logsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPurge_binary_logs(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Purge_binary_logs() (localctx IPurge_binary_logsContext) {
	localctx = NewPurge_binary_logsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MySqlParserRULE_purge_binary_logs)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3593)
		p.Match(MySqlParserPURGE)
	}
	p.SetState(3594)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(3595)
		p.Match(MySqlParserLOGS)
	}
	p.SetState(3596)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserBEFORE || _la == MySqlParserTO) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(3597)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IReset_masterContext is an interface to support dynamic dispatch.
type IReset_masterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReset_masterContext differentiates from other interfaces.
	IsReset_masterContext()
}

type Reset_masterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReset_masterContext() *Reset_masterContext {
	var p = new(Reset_masterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_reset_master
	return p
}

func (*Reset_masterContext) IsReset_masterContext() {}

func NewReset_masterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reset_masterContext {
	var p = new(Reset_masterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_reset_master

	return p
}

func (s *Reset_masterContext) GetParser() antlr.Parser { return s.parser }

func (s *Reset_masterContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *Reset_masterContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *Reset_masterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reset_masterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reset_masterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReset_master(s)
	}
}

func (s *Reset_masterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReset_master(s)
	}
}

func (s *Reset_masterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReset_master(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Reset_master() (localctx IReset_masterContext) {
	localctx = NewReset_masterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MySqlParserRULE_reset_master)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3599)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(3600)
		p.Match(MySqlParserMASTER)
	}

	return localctx
}

// IReset_slaveContext is an interface to support dynamic dispatch.
type IReset_slaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReset_slaveContext differentiates from other interfaces.
	IsReset_slaveContext()
}

type Reset_slaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReset_slaveContext() *Reset_slaveContext {
	var p = new(Reset_slaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_reset_slave
	return p
}

func (*Reset_slaveContext) IsReset_slaveContext() {}

func NewReset_slaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reset_slaveContext {
	var p = new(Reset_slaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_reset_slave

	return p
}

func (s *Reset_slaveContext) GetParser() antlr.Parser { return s.parser }

func (s *Reset_slaveContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *Reset_slaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Reset_slaveContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Reset_slaveContext) Channel_option() IChannel_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannel_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannel_optionContext)
}

func (s *Reset_slaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reset_slaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reset_slaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReset_slave(s)
	}
}

func (s *Reset_slaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReset_slave(s)
	}
}

func (s *Reset_slaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReset_slave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Reset_slave() (localctx IReset_slaveContext) {
	localctx = NewReset_slaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MySqlParserRULE_reset_slave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3602)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(3603)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserALL {
		{
			p.SetState(3604)
			p.Match(MySqlParserALL)
		}

	}
	p.SetState(3608)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3607)
			p.Channel_option()
		}

	}

	return localctx
}

// IStart_slaveContext is an interface to support dynamic dispatch.
type IStart_slaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_slaveContext differentiates from other interfaces.
	IsStart_slaveContext()
}

type Start_slaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_slaveContext() *Start_slaveContext {
	var p = new(Start_slaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_start_slave
	return p
}

func (*Start_slaveContext) IsStart_slaveContext() {}

func NewStart_slaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_slaveContext {
	var p = new(Start_slaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_start_slave

	return p
}

func (s *Start_slaveContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_slaveContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Start_slaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Start_slaveContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *Start_slaveContext) AllThread_type() []IThread_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThread_typeContext)(nil)).Elem())
	var tst = make([]IThread_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThread_typeContext)
		}
	}

	return tst
}

func (s *Start_slaveContext) Thread_type(i int) IThread_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThread_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThread_typeContext)
}

func (s *Start_slaveContext) Until_option() IUntil_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUntil_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUntil_optionContext)
}

func (s *Start_slaveContext) AllStart_slave_connection_option() []IStart_slave_connection_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStart_slave_connection_optionContext)(nil)).Elem())
	var tst = make([]IStart_slave_connection_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStart_slave_connection_optionContext)
		}
	}

	return tst
}

func (s *Start_slaveContext) Start_slave_connection_option(i int) IStart_slave_connection_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStart_slave_connection_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStart_slave_connection_optionContext)
}

func (s *Start_slaveContext) Channel_option() IChannel_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannel_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannel_optionContext)
}

func (s *Start_slaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_slaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_slaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStart_slave(s)
	}
}

func (s *Start_slaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStart_slave(s)
	}
}

func (s *Start_slaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStart_slave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Start_slave() (localctx IStart_slaveContext) {
	localctx = NewStart_slaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MySqlParserRULE_start_slave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3610)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3611)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3620)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(3612)
			p.Thread_type()
		}
		p.SetState(3617)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3613)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3614)
				p.Thread_type()
			}

			p.SetState(3619)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3622)
		p.Match(MySqlParserUNTIL)
	}
	p.SetState(3624)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserMASTER_LOG_FILE || _la == MySqlParserRELAY_LOG_FILE || (((_la-492)&-(0x1f+1)) == 0 && ((1<<uint((_la-492)))&((1<<(MySqlParserSQL_AFTER_GTIDS-492))|(1<<(MySqlParserSQL_AFTER_MTS_GAPS-492))|(1<<(MySqlParserSQL_BEFORE_GTIDS-492)))) != 0) {
		{
			p.SetState(3623)
			p.Until_option()
		}

	}
	p.SetState(3629)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserDEFAULT_AUTH || _la == MySqlParserPASSWORD || _la == MySqlParserPLUGIN_DIR || _la == MySqlParserUSER {
		{
			p.SetState(3626)
			p.Start_slave_connection_option()
		}

		p.SetState(3631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3633)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(3632)
			p.Channel_option()
		}

	}

	return localctx
}

// IStop_slaveContext is an interface to support dynamic dispatch.
type IStop_slaveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStop_slaveContext differentiates from other interfaces.
	IsStop_slaveContext()
}

type Stop_slaveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStop_slaveContext() *Stop_slaveContext {
	var p = new(Stop_slaveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stop_slave
	return p
}

func (*Stop_slaveContext) IsStop_slaveContext() {}

func NewStop_slaveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stop_slaveContext {
	var p = new(Stop_slaveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stop_slave

	return p
}

func (s *Stop_slaveContext) GetParser() antlr.Parser { return s.parser }

func (s *Stop_slaveContext) STOP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTOP, 0)
}

func (s *Stop_slaveContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Stop_slaveContext) AllThread_type() []IThread_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IThread_typeContext)(nil)).Elem())
	var tst = make([]IThread_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IThread_typeContext)
		}
	}

	return tst
}

func (s *Stop_slaveContext) Thread_type(i int) IThread_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThread_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IThread_typeContext)
}

func (s *Stop_slaveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stop_slaveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stop_slaveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStop_slave(s)
	}
}

func (s *Stop_slaveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStop_slave(s)
	}
}

func (s *Stop_slaveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStop_slave(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Stop_slave() (localctx IStop_slaveContext) {
	localctx = NewStop_slaveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MySqlParserRULE_stop_slave)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3635)
		p.Match(MySqlParserSTOP)
	}
	{
		p.SetState(3636)
		p.Match(MySqlParserSLAVE)
	}
	p.SetState(3645)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD {
		{
			p.SetState(3637)
			p.Thread_type()
		}
		p.SetState(3642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3638)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3639)
				p.Thread_type()
			}

			p.SetState(3644)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IStart_group_replContext is an interface to support dynamic dispatch.
type IStart_group_replContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStart_group_replContext differentiates from other interfaces.
	IsStart_group_replContext()
}

type Start_group_replContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStart_group_replContext() *Start_group_replContext {
	var p = new(Start_group_replContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_start_group_repl
	return p
}

func (*Start_group_replContext) IsStart_group_replContext() {}

func NewStart_group_replContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_group_replContext {
	var p = new(Start_group_replContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_start_group_repl

	return p
}

func (s *Start_group_replContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_group_replContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Start_group_replContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *Start_group_replContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_group_replContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_group_replContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStart_group_repl(s)
	}
}

func (s *Start_group_replContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStart_group_repl(s)
	}
}

func (s *Start_group_replContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStart_group_repl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Start_group_repl() (localctx IStart_group_replContext) {
	localctx = NewStart_group_replContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MySqlParserRULE_start_group_repl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3647)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3648)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IStop_group_replContext is an interface to support dynamic dispatch.
type IStop_group_replContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStop_group_replContext differentiates from other interfaces.
	IsStop_group_replContext()
}

type Stop_group_replContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStop_group_replContext() *Stop_group_replContext {
	var p = new(Stop_group_replContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_stop_group_repl
	return p
}

func (*Stop_group_replContext) IsStop_group_replContext() {}

func NewStop_group_replContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Stop_group_replContext {
	var p = new(Stop_group_replContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_stop_group_repl

	return p
}

func (s *Stop_group_replContext) GetParser() antlr.Parser { return s.parser }

func (s *Stop_group_replContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Stop_group_replContext) GROUP_REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_REPLICATION, 0)
}

func (s *Stop_group_replContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Stop_group_replContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Stop_group_replContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStop_group_repl(s)
	}
}

func (s *Stop_group_replContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStop_group_repl(s)
	}
}

func (s *Stop_group_replContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStop_group_repl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Stop_group_repl() (localctx IStop_group_replContext) {
	localctx = NewStop_group_replContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MySqlParserRULE_stop_group_repl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3650)
		p.Match(MySqlParserSTART)
	}
	{
		p.SetState(3651)
		p.Match(MySqlParserGROUP_REPLICATION)
	}

	return localctx
}

// IMaster_optionContext is an interface to support dynamic dispatch.
type IMaster_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMaster_optionContext differentiates from other interfaces.
	IsMaster_optionContext()
}

type Master_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMaster_optionContext() *Master_optionContext {
	var p = new(Master_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_master_option
	return p
}

func (*Master_optionContext) IsMaster_optionContext() {}

func NewMaster_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Master_optionContext {
	var p = new(Master_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_master_option

	return p
}

func (s *Master_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Master_optionContext) CopyFrom(ctx *Master_optionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Master_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Master_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MasterOptIdListContext struct {
	*Master_optionContext
}

func NewMasterOptIdListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterOptIdListContext {
	var p = new(MasterOptIdListContext)

	p.Master_optionContext = NewEmptyMaster_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Master_optionContext))

	return p
}

func (s *MasterOptIdListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptIdListContext) IGNORE_SERVER_IDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE_SERVER_IDS, 0)
}

func (s *MasterOptIdListContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *MasterOptIdListContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *MasterOptIdListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterOptIdList(s)
	}
}

func (s *MasterOptIdListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterOptIdList(s)
	}
}

func (s *MasterOptIdListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterOptIdList(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterOptDecimalContext struct {
	*Master_optionContext
}

func NewMasterOptDecimalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterOptDecimalContext {
	var p = new(MasterOptDecimalContext)

	p.Master_optionContext = NewEmptyMaster_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Master_optionContext))

	return p
}

func (s *MasterOptDecimalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptDecimalContext) Decimal_master_option() IDecimal_master_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_master_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_master_optionContext)
}

func (s *MasterOptDecimalContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *MasterOptDecimalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterOptDecimal(s)
	}
}

func (s *MasterOptDecimalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterOptDecimal(s)
	}
}

func (s *MasterOptDecimalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterOptDecimal(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterOptRealContext struct {
	*Master_optionContext
}

func NewMasterOptRealContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterOptRealContext {
	var p = new(MasterOptRealContext)

	p.Master_optionContext = NewEmptyMaster_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Master_optionContext))

	return p
}

func (s *MasterOptRealContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptRealContext) MASTER_HEARTBEAT_PERIOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HEARTBEAT_PERIOD, 0)
}

func (s *MasterOptRealContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *MasterOptRealContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterOptReal(s)
	}
}

func (s *MasterOptRealContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterOptReal(s)
	}
}

func (s *MasterOptRealContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterOptReal(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterOptBoolContext struct {
	*Master_optionContext
}

func NewMasterOptBoolContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterOptBoolContext {
	var p = new(MasterOptBoolContext)

	p.Master_optionContext = NewEmptyMaster_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Master_optionContext))

	return p
}

func (s *MasterOptBoolContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptBoolContext) Bool_master_option() IBool_master_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBool_master_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBool_master_optionContext)
}

func (s *MasterOptBoolContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterOptBool(s)
	}
}

func (s *MasterOptBoolContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterOptBool(s)
	}
}

func (s *MasterOptBoolContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterOptBool(s)

	default:
		return t.VisitChildren(s)
	}
}

type MasterOptStringContext struct {
	*Master_optionContext
}

func NewMasterOptStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MasterOptStringContext {
	var p = new(MasterOptStringContext)

	p.Master_optionContext = NewEmptyMaster_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Master_optionContext))

	return p
}

func (s *MasterOptStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MasterOptStringContext) String_master_option() IString_master_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_master_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_master_optionContext)
}

func (s *MasterOptStringContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *MasterOptStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMasterOptString(s)
	}
}

func (s *MasterOptStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMasterOptString(s)
	}
}

func (s *MasterOptStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMasterOptString(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Master_option() (localctx IMaster_optionContext) {
	localctx = NewMaster_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MySqlParserRULE_master_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3682)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMASTER_BIND, MySqlParserMASTER_HOST, MySqlParserMASTER_LOG_FILE, MySqlParserMASTER_PASSWORD, MySqlParserMASTER_SSL_CA, MySqlParserMASTER_SSL_CAPATH, MySqlParserMASTER_SSL_CERT, MySqlParserMASTER_SSL_CIPHER, MySqlParserMASTER_SSL_CRL, MySqlParserMASTER_SSL_CRLPATH, MySqlParserMASTER_SSL_KEY, MySqlParserMASTER_TLS_VERSION, MySqlParserMASTER_USER, MySqlParserRELAY_LOG_FILE:
		localctx = NewMasterOptStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3653)
			p.String_master_option()
		}
		{
			p.SetState(3654)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3655)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserMASTER_CONNECT_RETRY, MySqlParserMASTER_DELAY, MySqlParserMASTER_LOG_POS, MySqlParserMASTER_PORT, MySqlParserMASTER_RETRY_COUNT, MySqlParserRELAY_LOG_POS:
		localctx = NewMasterOptDecimalContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3657)
			p.Decimal_master_option()
		}
		{
			p.SetState(3658)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3659)
			p.Decimal_literal()
		}

	case MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, MySqlParserMASTER_AUTO_POSITION, MySqlParserMASTER_SSL:
		localctx = NewMasterOptBoolContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3661)
			p.Bool_master_option()
		}
		{
			p.SetState(3662)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		p.SetState(3663)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserZERO_DECIMAL || _la == MySqlParserONE_DECIMAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserMASTER_HEARTBEAT_PERIOD:
		localctx = NewMasterOptRealContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3665)
			p.Match(MySqlParserMASTER_HEARTBEAT_PERIOD)
		}
		{
			p.SetState(3666)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3667)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case MySqlParserIGNORE_SERVER_IDS:
		localctx = NewMasterOptIdListContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3668)
			p.Match(MySqlParserIGNORE_SERVER_IDS)
		}
		{
			p.SetState(3669)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3670)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(3679)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3671)
				p.Id_()
			}
			p.SetState(3676)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(3672)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(3673)
					p.Id_()
				}

				p.SetState(3678)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(3681)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IString_master_optionContext is an interface to support dynamic dispatch.
type IString_master_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_master_optionContext differentiates from other interfaces.
	IsString_master_optionContext()
}

type String_master_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_master_optionContext() *String_master_optionContext {
	var p = new(String_master_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_string_master_option
	return p
}

func (*String_master_optionContext) IsString_master_optionContext() {}

func NewString_master_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_master_optionContext {
	var p = new(String_master_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_string_master_option

	return p
}

func (s *String_master_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *String_master_optionContext) MASTER_BIND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_BIND, 0)
}

func (s *String_master_optionContext) MASTER_HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_HOST, 0)
}

func (s *String_master_optionContext) MASTER_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_USER, 0)
}

func (s *String_master_optionContext) MASTER_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PASSWORD, 0)
}

func (s *String_master_optionContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *String_master_optionContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CA() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CA, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CAPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CAPATH, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CERT, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CRL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRL, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CRLPATH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CRLPATH, 0)
}

func (s *String_master_optionContext) MASTER_SSL_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_KEY, 0)
}

func (s *String_master_optionContext) MASTER_SSL_CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_CIPHER, 0)
}

func (s *String_master_optionContext) MASTER_TLS_VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_TLS_VERSION, 0)
}

func (s *String_master_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_master_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_master_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterString_master_option(s)
	}
}

func (s *String_master_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitString_master_option(s)
	}
}

func (s *String_master_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitString_master_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) String_master_option() (localctx IString_master_optionContext) {
	localctx = NewString_master_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MySqlParserRULE_string_master_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3684)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserMASTER_BIND || (((_la-375)&-(0x1f+1)) == 0 && ((1<<uint((_la-375)))&((1<<(MySqlParserMASTER_HOST-375))|(1<<(MySqlParserMASTER_LOG_FILE-375))|(1<<(MySqlParserMASTER_PASSWORD-375))|(1<<(MySqlParserMASTER_SSL_CA-375))|(1<<(MySqlParserMASTER_SSL_CAPATH-375))|(1<<(MySqlParserMASTER_SSL_CERT-375))|(1<<(MySqlParserMASTER_SSL_CIPHER-375))|(1<<(MySqlParserMASTER_SSL_CRL-375))|(1<<(MySqlParserMASTER_SSL_CRLPATH-375))|(1<<(MySqlParserMASTER_SSL_KEY-375))|(1<<(MySqlParserMASTER_TLS_VERSION-375))|(1<<(MySqlParserMASTER_USER-375)))) != 0) || _la == MySqlParserRELAY_LOG_FILE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IDecimal_master_optionContext is an interface to support dynamic dispatch.
type IDecimal_master_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimal_master_optionContext differentiates from other interfaces.
	IsDecimal_master_optionContext()
}

type Decimal_master_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimal_master_optionContext() *Decimal_master_optionContext {
	var p = new(Decimal_master_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimal_master_option
	return p
}

func (*Decimal_master_optionContext) IsDecimal_master_optionContext() {}

func NewDecimal_master_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decimal_master_optionContext {
	var p = new(Decimal_master_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimal_master_option

	return p
}

func (s *Decimal_master_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Decimal_master_optionContext) MASTER_PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_PORT, 0)
}

func (s *Decimal_master_optionContext) MASTER_CONNECT_RETRY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_CONNECT_RETRY, 0)
}

func (s *Decimal_master_optionContext) MASTER_RETRY_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_RETRY_COUNT, 0)
}

func (s *Decimal_master_optionContext) MASTER_DELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_DELAY, 0)
}

func (s *Decimal_master_optionContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *Decimal_master_optionContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *Decimal_master_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_master_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decimal_master_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDecimal_master_option(s)
	}
}

func (s *Decimal_master_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDecimal_master_option(s)
	}
}

func (s *Decimal_master_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDecimal_master_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Decimal_master_option() (localctx IDecimal_master_optionContext) {
	localctx = NewDecimal_master_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MySqlParserRULE_decimal_master_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3686)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-372)&-(0x1f+1)) == 0 && ((1<<uint((_la-372)))&((1<<(MySqlParserMASTER_CONNECT_RETRY-372))|(1<<(MySqlParserMASTER_DELAY-372))|(1<<(MySqlParserMASTER_LOG_POS-372))|(1<<(MySqlParserMASTER_PORT-372))|(1<<(MySqlParserMASTER_RETRY_COUNT-372)))) != 0) || _la == MySqlParserRELAY_LOG_POS) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IBool_master_optionContext is an interface to support dynamic dispatch.
type IBool_master_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBool_master_optionContext differentiates from other interfaces.
	IsBool_master_optionContext()
}

type Bool_master_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBool_master_optionContext() *Bool_master_optionContext {
	var p = new(Bool_master_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_bool_master_option
	return p
}

func (*Bool_master_optionContext) IsBool_master_optionContext() {}

func NewBool_master_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bool_master_optionContext {
	var p = new(Bool_master_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_bool_master_option

	return p
}

func (s *Bool_master_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Bool_master_optionContext) MASTER_AUTO_POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_AUTO_POSITION, 0)
}

func (s *Bool_master_optionContext) MASTER_SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL, 0)
}

func (s *Bool_master_optionContext) MASTER_SSL_VERIFY_SERVER_CERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_SSL_VERIFY_SERVER_CERT, 0)
}

func (s *Bool_master_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bool_master_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bool_master_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBool_master_option(s)
	}
}

func (s *Bool_master_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBool_master_option(s)
	}
}

func (s *Bool_master_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBool_master_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Bool_master_option() (localctx IBool_master_optionContext) {
	localctx = NewBool_master_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MySqlParserRULE_bool_master_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3688)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserMASTER_SSL_VERIFY_SERVER_CERT || _la == MySqlParserMASTER_AUTO_POSITION || _la == MySqlParserMASTER_SSL) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IChannel_optionContext is an interface to support dynamic dispatch.
type IChannel_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannel_optionContext differentiates from other interfaces.
	IsChannel_optionContext()
}

type Channel_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannel_optionContext() *Channel_optionContext {
	var p = new(Channel_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_channel_option
	return p
}

func (*Channel_optionContext) IsChannel_optionContext() {}

func NewChannel_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Channel_optionContext {
	var p = new(Channel_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_channel_option

	return p
}

func (s *Channel_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Channel_optionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Channel_optionContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *Channel_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Channel_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Channel_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Channel_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChannel_option(s)
	}
}

func (s *Channel_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChannel_option(s)
	}
}

func (s *Channel_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChannel_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Channel_option() (localctx IChannel_optionContext) {
	localctx = NewChannel_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MySqlParserRULE_channel_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3690)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(3691)
		p.Match(MySqlParserCHANNEL)
	}
	{
		p.SetState(3692)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IRepl_filterContext is an interface to support dynamic dispatch.
type IRepl_filterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepl_filterContext differentiates from other interfaces.
	IsRepl_filterContext()
}

type Repl_filterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepl_filterContext() *Repl_filterContext {
	var p = new(Repl_filterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repl_filter
	return p
}

func (*Repl_filterContext) IsRepl_filterContext() {}

func NewRepl_filterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repl_filterContext {
	var p = new(Repl_filterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repl_filter

	return p
}

func (s *Repl_filterContext) GetParser() antlr.Parser { return s.parser }

func (s *Repl_filterContext) CopyFrom(ctx *Repl_filterContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Repl_filterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repl_filterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ReplfilterDbListContext struct {
	*Repl_filterContext
}

func NewReplfilterDbListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplfilterDbListContext {
	var p = new(ReplfilterDbListContext)

	p.Repl_filterContext = NewEmptyRepl_filterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Repl_filterContext))

	return p
}

func (s *ReplfilterDbListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplfilterDbListContext) REPLICATE_DO_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_DB, 0)
}

func (s *ReplfilterDbListContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *ReplfilterDbListContext) REPLICATE_IGNORE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_DB, 0)
}

func (s *ReplfilterDbListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplfilterDbList(s)
	}
}

func (s *ReplfilterDbListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplfilterDbList(s)
	}
}

func (s *ReplfilterDbListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplfilterDbList(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReplfilterStableListContext struct {
	*Repl_filterContext
}

func NewReplfilterStableListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplfilterStableListContext {
	var p = new(ReplfilterStableListContext)

	p.Repl_filterContext = NewEmptyRepl_filterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Repl_filterContext))

	return p
}

func (s *ReplfilterStableListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplfilterStableListContext) REPLICATE_WILD_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_DO_TABLE, 0)
}

func (s *ReplfilterStableListContext) Simple_string_list() ISimple_string_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_string_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_string_listContext)
}

func (s *ReplfilterStableListContext) REPLICATE_WILD_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_WILD_IGNORE_TABLE, 0)
}

func (s *ReplfilterStableListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplfilterStableList(s)
	}
}

func (s *ReplfilterStableListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplfilterStableList(s)
	}
}

func (s *ReplfilterStableListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplfilterStableList(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReplfilterTablepairListContext struct {
	*Repl_filterContext
}

func NewReplfilterTablepairListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplfilterTablepairListContext {
	var p = new(ReplfilterTablepairListContext)

	p.Repl_filterContext = NewEmptyRepl_filterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Repl_filterContext))

	return p
}

func (s *ReplfilterTablepairListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplfilterTablepairListContext) REPLICATE_REWRITE_DB() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_REWRITE_DB, 0)
}

func (s *ReplfilterTablepairListContext) Table_pair_list() ITable_pair_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_pair_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_pair_listContext)
}

func (s *ReplfilterTablepairListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplfilterTablepairList(s)
	}
}

func (s *ReplfilterTablepairListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplfilterTablepairList(s)
	}
}

func (s *ReplfilterTablepairListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplfilterTablepairList(s)

	default:
		return t.VisitChildren(s)
	}
}

type ReplfilterTableListContext struct {
	*Repl_filterContext
}

func NewReplfilterTableListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ReplfilterTableListContext {
	var p = new(ReplfilterTableListContext)

	p.Repl_filterContext = NewEmptyRepl_filterContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Repl_filterContext))

	return p
}

func (s *ReplfilterTableListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReplfilterTableListContext) REPLICATE_DO_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_DO_TABLE, 0)
}

func (s *ReplfilterTableListContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *ReplfilterTableListContext) REPLICATE_IGNORE_TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATE_IGNORE_TABLE, 0)
}

func (s *ReplfilterTableListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReplfilterTableList(s)
	}
}

func (s *ReplfilterTableListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReplfilterTableList(s)
	}
}

func (s *ReplfilterTableListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReplfilterTableList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Repl_filter() (localctx IRepl_filterContext) {
	localctx = NewRepl_filterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MySqlParserRULE_repl_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3736)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserREPLICATE_DO_DB:
		localctx = NewReplfilterDbListContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3694)
			p.Match(MySqlParserREPLICATE_DO_DB)
		}
		{
			p.SetState(3695)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3696)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3697)
			p.Id_list()
		}
		{
			p.SetState(3698)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_DB:
		localctx = NewReplfilterDbListContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3700)
			p.Match(MySqlParserREPLICATE_IGNORE_DB)
		}
		{
			p.SetState(3701)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3702)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3703)
			p.Id_list()
		}
		{
			p.SetState(3704)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_DO_TABLE:
		localctx = NewReplfilterTableListContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3706)
			p.Match(MySqlParserREPLICATE_DO_TABLE)
		}
		{
			p.SetState(3707)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3708)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3709)
			p.Table_list()
		}
		{
			p.SetState(3710)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_IGNORE_TABLE:
		localctx = NewReplfilterTableListContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3712)
			p.Match(MySqlParserREPLICATE_IGNORE_TABLE)
		}
		{
			p.SetState(3713)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3714)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3715)
			p.Table_list()
		}
		{
			p.SetState(3716)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_DO_TABLE:
		localctx = NewReplfilterStableListContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(3718)
			p.Match(MySqlParserREPLICATE_WILD_DO_TABLE)
		}
		{
			p.SetState(3719)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3720)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3721)
			p.Simple_string_list()
		}
		{
			p.SetState(3722)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_WILD_IGNORE_TABLE:
		localctx = NewReplfilterStableListContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(3724)
			p.Match(MySqlParserREPLICATE_WILD_IGNORE_TABLE)
		}
		{
			p.SetState(3725)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3726)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3727)
			p.Simple_string_list()
		}
		{
			p.SetState(3728)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserREPLICATE_REWRITE_DB:
		localctx = NewReplfilterTablepairListContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(3730)
			p.Match(MySqlParserREPLICATE_REWRITE_DB)
		}
		{
			p.SetState(3731)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3732)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(3733)
			p.Table_pair_list()
		}
		{
			p.SetState(3734)
			p.Match(MySqlParserRR_BRACKET)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IThread_typeContext is an interface to support dynamic dispatch.
type IThread_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThread_typeContext differentiates from other interfaces.
	IsThread_typeContext()
}

type Thread_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThread_typeContext() *Thread_typeContext {
	var p = new(Thread_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_thread_type
	return p
}

func (*Thread_typeContext) IsThread_typeContext() {}

func NewThread_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Thread_typeContext {
	var p = new(Thread_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_thread_type

	return p
}

func (s *Thread_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Thread_typeContext) IO_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO_THREAD, 0)
}

func (s *Thread_typeContext) SQL_THREAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD, 0)
}

func (s *Thread_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Thread_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Thread_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterThread_type(s)
	}
}

func (s *Thread_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitThread_type(s)
	}
}

func (s *Thread_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitThread_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Thread_type() (localctx IThread_typeContext) {
	localctx = NewThread_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MySqlParserRULE_thread_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3738)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserIO_THREAD || _la == MySqlParserSQL_THREAD) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IUntil_optionContext is an interface to support dynamic dispatch.
type IUntil_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUntil_optionContext differentiates from other interfaces.
	IsUntil_optionContext()
}

type Until_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUntil_optionContext() *Until_optionContext {
	var p = new(Until_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_until_option
	return p
}

func (*Until_optionContext) IsUntil_optionContext() {}

func NewUntil_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Until_optionContext {
	var p = new(Until_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_until_option

	return p
}

func (s *Until_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Until_optionContext) CopyFrom(ctx *Until_optionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Until_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Until_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UntilSqlGapsContext struct {
	*Until_optionContext
}

func NewUntilSqlGapsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UntilSqlGapsContext {
	var p = new(UntilSqlGapsContext)

	p.Until_optionContext = NewEmptyUntil_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Until_optionContext))

	return p
}

func (s *UntilSqlGapsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilSqlGapsContext) SQL_AFTER_MTS_GAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_MTS_GAPS, 0)
}

func (s *UntilSqlGapsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUntilSqlGaps(s)
	}
}

func (s *UntilSqlGapsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUntilSqlGaps(s)
	}
}

func (s *UntilSqlGapsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUntilSqlGaps(s)

	default:
		return t.VisitChildren(s)
	}
}

type UntilGtidSsetContext struct {
	*Until_optionContext
}

func NewUntilGtidSsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UntilGtidSsetContext {
	var p = new(UntilGtidSsetContext)

	p.Until_optionContext = NewEmptyUntil_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Until_optionContext))

	return p
}

func (s *UntilGtidSsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilGtidSsetContext) Gtid_set() IGtid_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGtid_setContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGtid_setContext)
}

func (s *UntilGtidSsetContext) SQL_BEFORE_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BEFORE_GTIDS, 0)
}

func (s *UntilGtidSsetContext) SQL_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_AFTER_GTIDS, 0)
}

func (s *UntilGtidSsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUntilGtidSset(s)
	}
}

func (s *UntilGtidSsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUntilGtidSset(s)
	}
}

func (s *UntilGtidSsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUntilGtidSset(s)

	default:
		return t.VisitChildren(s)
	}
}

type UntilRelayLogContext struct {
	*Until_optionContext
}

func NewUntilRelayLogContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UntilRelayLogContext {
	var p = new(UntilRelayLogContext)

	p.Until_optionContext = NewEmptyUntil_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Until_optionContext))

	return p
}

func (s *UntilRelayLogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilRelayLogContext) RELAY_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_FILE, 0)
}

func (s *UntilRelayLogContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UntilRelayLogContext) RELAY_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY_LOG_POS, 0)
}

func (s *UntilRelayLogContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *UntilRelayLogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUntilRelayLog(s)
	}
}

func (s *UntilRelayLogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUntilRelayLog(s)
	}
}

func (s *UntilRelayLogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUntilRelayLog(s)

	default:
		return t.VisitChildren(s)
	}
}

type UntilMasterLogContext struct {
	*Until_optionContext
}

func NewUntilMasterLogContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UntilMasterLogContext {
	var p = new(UntilMasterLogContext)

	p.Until_optionContext = NewEmptyUntil_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Until_optionContext))

	return p
}

func (s *UntilMasterLogContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UntilMasterLogContext) MASTER_LOG_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_FILE, 0)
}

func (s *UntilMasterLogContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *UntilMasterLogContext) MASTER_LOG_POS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_LOG_POS, 0)
}

func (s *UntilMasterLogContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *UntilMasterLogContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUntilMasterLog(s)
	}
}

func (s *UntilMasterLogContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUntilMasterLog(s)
	}
}

func (s *UntilMasterLogContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUntilMasterLog(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Until_option() (localctx IUntil_optionContext) {
	localctx = NewUntil_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MySqlParserRULE_until_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3758)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSQL_AFTER_GTIDS, MySqlParserSQL_BEFORE_GTIDS:
		localctx = NewUntilGtidSsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(3740)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserSQL_AFTER_GTIDS || _la == MySqlParserSQL_BEFORE_GTIDS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(3741)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3742)
			p.Gtid_set()
		}

	case MySqlParserMASTER_LOG_FILE:
		localctx = NewUntilMasterLogContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3743)
			p.Match(MySqlParserMASTER_LOG_FILE)
		}
		{
			p.SetState(3744)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3745)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(3746)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3747)
			p.Match(MySqlParserMASTER_LOG_POS)
		}
		{
			p.SetState(3748)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3749)
			p.Decimal_literal()
		}

	case MySqlParserRELAY_LOG_FILE:
		localctx = NewUntilRelayLogContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3750)
			p.Match(MySqlParserRELAY_LOG_FILE)
		}
		{
			p.SetState(3751)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3752)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(3753)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(3754)
			p.Match(MySqlParserRELAY_LOG_POS)
		}
		{
			p.SetState(3755)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3756)
			p.Decimal_literal()
		}

	case MySqlParserSQL_AFTER_MTS_GAPS:
		localctx = NewUntilSqlGapsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3757)
			p.Match(MySqlParserSQL_AFTER_MTS_GAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStart_slave_connection_optionContext is an interface to support dynamic dispatch.
type IStart_slave_connection_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCon_opt_user returns the con_opt_user token.
	GetCon_opt_user() antlr.Token

	// GetCon_opt_password returns the con_opt_password token.
	GetCon_opt_password() antlr.Token

	// GetCon_opt_def_auth returns the con_opt_def_auth token.
	GetCon_opt_def_auth() antlr.Token

	// GetCon_opt_plugin_dir returns the con_opt_plugin_dir token.
	GetCon_opt_plugin_dir() antlr.Token

	// SetCon_opt_user sets the con_opt_user token.
	SetCon_opt_user(antlr.Token)

	// SetCon_opt_password sets the con_opt_password token.
	SetCon_opt_password(antlr.Token)

	// SetCon_opt_def_auth sets the con_opt_def_auth token.
	SetCon_opt_def_auth(antlr.Token)

	// SetCon_opt_plugin_dir sets the con_opt_plugin_dir token.
	SetCon_opt_plugin_dir(antlr.Token)

	// IsStart_slave_connection_optionContext differentiates from other interfaces.
	IsStart_slave_connection_optionContext()
}

type Start_slave_connection_optionContext struct {
	*antlr.BaseParserRuleContext
	parser             antlr.Parser
	con_opt_user       antlr.Token
	con_opt_password   antlr.Token
	con_opt_def_auth   antlr.Token
	con_opt_plugin_dir antlr.Token
}

func NewEmptyStart_slave_connection_optionContext() *Start_slave_connection_optionContext {
	var p = new(Start_slave_connection_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_start_slave_connection_option
	return p
}

func (*Start_slave_connection_optionContext) IsStart_slave_connection_optionContext() {}

func NewStart_slave_connection_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Start_slave_connection_optionContext {
	var p = new(Start_slave_connection_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_start_slave_connection_option

	return p
}

func (s *Start_slave_connection_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Start_slave_connection_optionContext) GetCon_opt_user() antlr.Token { return s.con_opt_user }

func (s *Start_slave_connection_optionContext) GetCon_opt_password() antlr.Token {
	return s.con_opt_password
}

func (s *Start_slave_connection_optionContext) GetCon_opt_def_auth() antlr.Token {
	return s.con_opt_def_auth
}

func (s *Start_slave_connection_optionContext) GetCon_opt_plugin_dir() antlr.Token {
	return s.con_opt_plugin_dir
}

func (s *Start_slave_connection_optionContext) SetCon_opt_user(v antlr.Token) { s.con_opt_user = v }

func (s *Start_slave_connection_optionContext) SetCon_opt_password(v antlr.Token) {
	s.con_opt_password = v
}

func (s *Start_slave_connection_optionContext) SetCon_opt_def_auth(v antlr.Token) {
	s.con_opt_def_auth = v
}

func (s *Start_slave_connection_optionContext) SetCon_opt_plugin_dir(v antlr.Token) {
	s.con_opt_plugin_dir = v
}

func (s *Start_slave_connection_optionContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *Start_slave_connection_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Start_slave_connection_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *Start_slave_connection_optionContext) DEFAULT_AUTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT_AUTH, 0)
}

func (s *Start_slave_connection_optionContext) PLUGIN_DIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN_DIR, 0)
}

func (s *Start_slave_connection_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Start_slave_connection_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Start_slave_connection_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterStart_slave_connection_option(s)
	}
}

func (s *Start_slave_connection_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitStart_slave_connection_option(s)
	}
}

func (s *Start_slave_connection_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitStart_slave_connection_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Start_slave_connection_option() (localctx IStart_slave_connection_optionContext) {
	localctx = NewStart_slave_connection_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MySqlParserRULE_start_slave_connection_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3772)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserUSER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3760)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(3761)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3762)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Start_slave_connection_optionContext).con_opt_user = _m
		}

	case MySqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3763)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(3764)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3765)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Start_slave_connection_optionContext).con_opt_password = _m
		}

	case MySqlParserDEFAULT_AUTH:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(3766)
			p.Match(MySqlParserDEFAULT_AUTH)
		}
		{
			p.SetState(3767)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3768)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Start_slave_connection_optionContext).con_opt_def_auth = _m
		}

	case MySqlParserPLUGIN_DIR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(3769)
			p.Match(MySqlParserPLUGIN_DIR)
		}
		{
			p.SetState(3770)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(3771)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Start_slave_connection_optionContext).con_opt_plugin_dir = _m
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGtid_setContext is an interface to support dynamic dispatch.
type IGtid_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGtid_setContext differentiates from other interfaces.
	IsGtid_setContext()
}

type Gtid_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGtid_setContext() *Gtid_setContext {
	var p = new(Gtid_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_gtid_set
	return p
}

func (*Gtid_setContext) IsGtid_setContext() {}

func NewGtid_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Gtid_setContext {
	var p = new(Gtid_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_gtid_set

	return p
}

func (s *Gtid_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Gtid_setContext) AllUuid_set() []IUuid_setContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUuid_setContext)(nil)).Elem())
	var tst = make([]IUuid_setContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUuid_setContext)
		}
	}

	return tst
}

func (s *Gtid_setContext) Uuid_set(i int) IUuid_setContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUuid_setContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUuid_setContext)
}

func (s *Gtid_setContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Gtid_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Gtid_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Gtid_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGtid_set(s)
	}
}

func (s *Gtid_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGtid_set(s)
	}
}

func (s *Gtid_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGtid_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Gtid_set() (localctx IGtid_setContext) {
	localctx = NewGtid_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MySqlParserRULE_gtid_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3783)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3774)
			p.Uuid_set()
		}
		p.SetState(3779)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(3775)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(3776)
				p.Uuid_set()
			}

			p.SetState(3781)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3782)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IXa_start_transactionContext is an interface to support dynamic dispatch.
type IXa_start_transactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_start_transactionContext differentiates from other interfaces.
	IsXa_start_transactionContext()
}

type Xa_start_transactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_start_transactionContext() *Xa_start_transactionContext {
	var p = new(Xa_start_transactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_start_transaction
	return p
}

func (*Xa_start_transactionContext) IsXa_start_transactionContext() {}

func NewXa_start_transactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_start_transactionContext {
	var p = new(Xa_start_transactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_start_transaction

	return p
}

func (s *Xa_start_transactionContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_start_transactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_start_transactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_start_transactionContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Xa_start_transactionContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *Xa_start_transactionContext) JOIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserJOIN, 0)
}

func (s *Xa_start_transactionContext) RESUME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESUME, 0)
}

func (s *Xa_start_transactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_start_transactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_start_transactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_start_transaction(s)
	}
}

func (s *Xa_start_transactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_start_transaction(s)
	}
}

func (s *Xa_start_transactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_start_transaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_start_transaction() (localctx IXa_start_transactionContext) {
	localctx = NewXa_start_transactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MySqlParserRULE_xa_start_transaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3785)
		p.Match(MySqlParserXA)
	}
	p.SetState(3786)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserBEGIN || _la == MySqlParserSTART) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(3787)
		p.Xid()
	}
	p.SetState(3789)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserJOIN || _la == MySqlParserRESUME {
		p.SetState(3788)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserJOIN || _la == MySqlParserRESUME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IXa_end_transactionContext is an interface to support dynamic dispatch.
type IXa_end_transactionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_end_transactionContext differentiates from other interfaces.
	IsXa_end_transactionContext()
}

type Xa_end_transactionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_end_transactionContext() *Xa_end_transactionContext {
	var p = new(Xa_end_transactionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_end_transaction
	return p
}

func (*Xa_end_transactionContext) IsXa_end_transactionContext() {}

func NewXa_end_transactionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_end_transactionContext {
	var p = new(Xa_end_transactionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_end_transaction

	return p
}

func (s *Xa_end_transactionContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_end_transactionContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_end_transactionContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *Xa_end_transactionContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_end_transactionContext) SUSPEND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUSPEND, 0)
}

func (s *Xa_end_transactionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Xa_end_transactionContext) MIGRATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIGRATE, 0)
}

func (s *Xa_end_transactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_end_transactionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_end_transactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_end_transaction(s)
	}
}

func (s *Xa_end_transactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_end_transaction(s)
	}
}

func (s *Xa_end_transactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_end_transaction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_end_transaction() (localctx IXa_end_transactionContext) {
	localctx = NewXa_end_transactionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MySqlParserRULE_xa_end_transaction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3791)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(3792)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(3793)
		p.Xid()
	}
	p.SetState(3799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSUSPEND {
		{
			p.SetState(3794)
			p.Match(MySqlParserSUSPEND)
		}
		p.SetState(3797)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(3795)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(3796)
				p.Match(MySqlParserMIGRATE)
			}

		}

	}

	return localctx
}

// IXa_prepareContext is an interface to support dynamic dispatch.
type IXa_prepareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_prepareContext differentiates from other interfaces.
	IsXa_prepareContext()
}

type Xa_prepareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_prepareContext() *Xa_prepareContext {
	var p = new(Xa_prepareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_prepare
	return p
}

func (*Xa_prepareContext) IsXa_prepareContext() {}

func NewXa_prepareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_prepareContext {
	var p = new(Xa_prepareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_prepare

	return p
}

func (s *Xa_prepareContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_prepareContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_prepareContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *Xa_prepareContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_prepareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_prepareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_prepareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_prepare(s)
	}
}

func (s *Xa_prepareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_prepare(s)
	}
}

func (s *Xa_prepareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_prepare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_prepare() (localctx IXa_prepareContext) {
	localctx = NewXa_prepareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MySqlParserRULE_xa_prepare)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3801)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(3802)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(3803)
		p.Xid()
	}

	return localctx
}

// IXa_commit_workContext is an interface to support dynamic dispatch.
type IXa_commit_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_commit_workContext differentiates from other interfaces.
	IsXa_commit_workContext()
}

type Xa_commit_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_commit_workContext() *Xa_commit_workContext {
	var p = new(Xa_commit_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_commit_work
	return p
}

func (*Xa_commit_workContext) IsXa_commit_workContext() {}

func NewXa_commit_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_commit_workContext {
	var p = new(Xa_commit_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_commit_work

	return p
}

func (s *Xa_commit_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_commit_workContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_commit_workContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *Xa_commit_workContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_commit_workContext) ONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE, 0)
}

func (s *Xa_commit_workContext) PHASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPHASE, 0)
}

func (s *Xa_commit_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_commit_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_commit_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_commit_work(s)
	}
}

func (s *Xa_commit_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_commit_work(s)
	}
}

func (s *Xa_commit_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_commit_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_commit_work() (localctx IXa_commit_workContext) {
	localctx = NewXa_commit_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MySqlParserRULE_xa_commit_work)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3805)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(3806)
		p.Match(MySqlParserCOMMIT)
	}
	{
		p.SetState(3807)
		p.Xid()
	}
	p.SetState(3810)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserONE {
		{
			p.SetState(3808)
			p.Match(MySqlParserONE)
		}
		{
			p.SetState(3809)
			p.Match(MySqlParserPHASE)
		}

	}

	return localctx
}

// IXa_rollback_workContext is an interface to support dynamic dispatch.
type IXa_rollback_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_rollback_workContext differentiates from other interfaces.
	IsXa_rollback_workContext()
}

type Xa_rollback_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_rollback_workContext() *Xa_rollback_workContext {
	var p = new(Xa_rollback_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_rollback_work
	return p
}

func (*Xa_rollback_workContext) IsXa_rollback_workContext() {}

func NewXa_rollback_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_rollback_workContext {
	var p = new(Xa_rollback_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_rollback_work

	return p
}

func (s *Xa_rollback_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_rollback_workContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_rollback_workContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *Xa_rollback_workContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_rollback_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_rollback_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_rollback_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_rollback_work(s)
	}
}

func (s *Xa_rollback_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_rollback_work(s)
	}
}

func (s *Xa_rollback_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_rollback_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_rollback_work() (localctx IXa_rollback_workContext) {
	localctx = NewXa_rollback_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MySqlParserRULE_xa_rollback_work)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3812)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(3813)
		p.Match(MySqlParserROLLBACK)
	}
	{
		p.SetState(3814)
		p.Xid()
	}

	return localctx
}

// IXa_recover_workContext is an interface to support dynamic dispatch.
type IXa_recover_workContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXa_recover_workContext differentiates from other interfaces.
	IsXa_recover_workContext()
}

type Xa_recover_workContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXa_recover_workContext() *Xa_recover_workContext {
	var p = new(Xa_recover_workContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xa_recover_work
	return p
}

func (*Xa_recover_workContext) IsXa_recover_workContext() {}

func NewXa_recover_workContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xa_recover_workContext {
	var p = new(Xa_recover_workContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xa_recover_work

	return p
}

func (s *Xa_recover_workContext) GetParser() antlr.Parser { return s.parser }

func (s *Xa_recover_workContext) XA() antlr.TerminalNode {
	return s.GetToken(MySqlParserXA, 0)
}

func (s *Xa_recover_workContext) RECOVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserRECOVER, 0)
}

func (s *Xa_recover_workContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *Xa_recover_workContext) Xid() IXidContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXidContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IXidContext)
}

func (s *Xa_recover_workContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xa_recover_workContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xa_recover_workContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXa_recover_work(s)
	}
}

func (s *Xa_recover_workContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXa_recover_work(s)
	}
}

func (s *Xa_recover_workContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXa_recover_work(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xa_recover_work() (localctx IXa_recover_workContext) {
	localctx = NewXa_recover_workContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MySqlParserRULE_xa_recover_work)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3816)
		p.Match(MySqlParserXA)
	}
	{
		p.SetState(3817)
		p.Match(MySqlParserRECOVER)
	}
	p.SetState(3820)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONVERT {
		{
			p.SetState(3818)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(3819)
			p.Xid()
		}

	}

	return localctx
}

// IPrepare_statementContext is an interface to support dynamic dispatch.
type IPrepare_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrepare_statementContext differentiates from other interfaces.
	IsPrepare_statementContext()
}

type Prepare_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrepare_statementContext() *Prepare_statementContext {
	var p = new(Prepare_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_prepare_statement
	return p
}

func (*Prepare_statementContext) IsPrepare_statementContext() {}

func NewPrepare_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Prepare_statementContext {
	var p = new(Prepare_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_prepare_statement

	return p
}

func (s *Prepare_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Prepare_statementContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *Prepare_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Prepare_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *Prepare_statementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Prepare_statementContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *Prepare_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Prepare_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Prepare_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrepare_statement(s)
	}
}

func (s *Prepare_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrepare_statement(s)
	}
}

func (s *Prepare_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrepare_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Prepare_statement() (localctx IPrepare_statementContext) {
	localctx = NewPrepare_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MySqlParserRULE_prepare_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3822)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(3823)
		p.Id_()
	}
	{
		p.SetState(3824)
		p.Match(MySqlParserFROM)
	}
	p.SetState(3825)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserSTRING_LITERAL || _la == MySqlParserLOCAL_ID) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IExecute_statementContext is an interface to support dynamic dispatch.
type IExecute_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExecute_statementContext differentiates from other interfaces.
	IsExecute_statementContext()
}

type Execute_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExecute_statementContext() *Execute_statementContext {
	var p = new(Execute_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_execute_statement
	return p
}

func (*Execute_statementContext) IsExecute_statementContext() {}

func NewExecute_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Execute_statementContext {
	var p = new(Execute_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_execute_statement

	return p
}

func (s *Execute_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Execute_statementContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *Execute_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Execute_statementContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *Execute_statementContext) User_var_list() IUser_var_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_var_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_var_listContext)
}

func (s *Execute_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Execute_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Execute_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExecute_statement(s)
	}
}

func (s *Execute_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExecute_statement(s)
	}
}

func (s *Execute_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExecute_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Execute_statement() (localctx IExecute_statementContext) {
	localctx = NewExecute_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MySqlParserRULE_execute_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3827)
		p.Match(MySqlParserEXECUTE)
	}
	{
		p.SetState(3828)
		p.Id_()
	}
	p.SetState(3831)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSING {
		{
			p.SetState(3829)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(3830)
			p.User_var_list()
		}

	}

	return localctx
}

// IDeallocate_prepareContext is an interface to support dynamic dispatch.
type IDeallocate_prepareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeallocate_prepareContext differentiates from other interfaces.
	IsDeallocate_prepareContext()
}

type Deallocate_prepareContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeallocate_prepareContext() *Deallocate_prepareContext {
	var p = new(Deallocate_prepareContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_deallocate_prepare
	return p
}

func (*Deallocate_prepareContext) IsDeallocate_prepareContext() {}

func NewDeallocate_prepareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Deallocate_prepareContext {
	var p = new(Deallocate_prepareContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_deallocate_prepare

	return p
}

func (s *Deallocate_prepareContext) GetParser() antlr.Parser { return s.parser }

func (s *Deallocate_prepareContext) PREPARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPREPARE, 0)
}

func (s *Deallocate_prepareContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Deallocate_prepareContext) DEALLOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEALLOCATE, 0)
}

func (s *Deallocate_prepareContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Deallocate_prepareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Deallocate_prepareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Deallocate_prepareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeallocate_prepare(s)
	}
}

func (s *Deallocate_prepareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeallocate_prepare(s)
	}
}

func (s *Deallocate_prepareContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeallocate_prepare(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Deallocate_prepare() (localctx IDeallocate_prepareContext) {
	localctx = NewDeallocate_prepareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MySqlParserRULE_deallocate_prepare)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3833)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserDROP || _la == MySqlParserDEALLOCATE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(3834)
		p.Match(MySqlParserPREPARE)
	}
	{
		p.SetState(3835)
		p.Id_()
	}

	return localctx
}

// IRoutine_bodyContext is an interface to support dynamic dispatch.
type IRoutine_bodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRoutine_bodyContext differentiates from other interfaces.
	IsRoutine_bodyContext()
}

type Routine_bodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRoutine_bodyContext() *Routine_bodyContext {
	var p = new(Routine_bodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_routine_body
	return p
}

func (*Routine_bodyContext) IsRoutine_bodyContext() {}

func NewRoutine_bodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Routine_bodyContext {
	var p = new(Routine_bodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_routine_body

	return p
}

func (s *Routine_bodyContext) GetParser() antlr.Parser { return s.parser }

func (s *Routine_bodyContext) Block_statement() IBlock_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlock_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlock_statementContext)
}

func (s *Routine_bodyContext) Sql_statement() ISql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Routine_bodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Routine_bodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Routine_bodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRoutine_body(s)
	}
}

func (s *Routine_bodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRoutine_body(s)
	}
}

func (s *Routine_bodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRoutine_body(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Routine_body() (localctx IRoutine_bodyContext) {
	localctx = NewRoutine_bodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MySqlParserRULE_routine_body)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(3839)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 559, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(3837)
			p.Block_statement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(3838)
			p.Sql_statement()
		}

	}

	return localctx
}

// IBlock_statementContext is an interface to support dynamic dispatch.
type IBlock_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlock_statementContext differentiates from other interfaces.
	IsBlock_statementContext()
}

type Block_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlock_statementContext() *Block_statementContext {
	var p = new(Block_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_block_statement
	return p
}

func (*Block_statementContext) IsBlock_statementContext() {}

func NewBlock_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Block_statementContext {
	var p = new(Block_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_block_statement

	return p
}

func (s *Block_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Block_statementContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *Block_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *Block_statementContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Block_statementContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Block_statementContext) AllDeclare_variable() []IDeclare_variableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_variableContext)(nil)).Elem())
	var tst = make([]IDeclare_variableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_variableContext)
		}
	}

	return tst
}

func (s *Block_statementContext) Declare_variable(i int) IDeclare_variableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_variableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_variableContext)
}

func (s *Block_statementContext) AllSEMI() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSEMI)
}

func (s *Block_statementContext) SEMI(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, i)
}

func (s *Block_statementContext) AllDeclare_condition() []IDeclare_conditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_conditionContext)(nil)).Elem())
	var tst = make([]IDeclare_conditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_conditionContext)
		}
	}

	return tst
}

func (s *Block_statementContext) Declare_condition(i int) IDeclare_conditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_conditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_conditionContext)
}

func (s *Block_statementContext) AllDeclare_cursor() []IDeclare_cursorContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_cursorContext)(nil)).Elem())
	var tst = make([]IDeclare_cursorContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_cursorContext)
		}
	}

	return tst
}

func (s *Block_statementContext) Declare_cursor(i int) IDeclare_cursorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_cursorContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_cursorContext)
}

func (s *Block_statementContext) AllDeclare_handler() []IDeclare_handlerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclare_handlerContext)(nil)).Elem())
	var tst = make([]IDeclare_handlerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclare_handlerContext)
		}
	}

	return tst
}

func (s *Block_statementContext) Declare_handler(i int) IDeclare_handlerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclare_handlerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclare_handlerContext)
}

func (s *Block_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *Block_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *Block_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Block_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Block_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBlock_statement(s)
	}
}

func (s *Block_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBlock_statement(s)
	}
}

func (s *Block_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBlock_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Block_statement() (localctx IBlock_statementContext) {
	localctx = NewBlock_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MySqlParserRULE_block_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3844)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 560, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3841)
			p.Id_()
		}
		{
			p.SetState(3842)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(3846)
		p.Match(MySqlParserBEGIN)
	}
	p.SetState(3884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(MySqlParserDECLARE-35))|(1<<(MySqlParserDELETE-35))|(1<<(MySqlParserDESC-35))|(1<<(MySqlParserDESCRIBE-35))|(1<<(MySqlParserDROP-35))|(1<<(MySqlParserEXPLAIN-35))|(1<<(MySqlParserFETCH-35))|(1<<(MySqlParserGRANT-35))|(1<<(MySqlParserIF-35)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		p.SetState(3852)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 561, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3847)
					p.Declare_variable()
				}
				{
					p.SetState(3848)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(3854)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 561, p.GetParserRuleContext())
		}
		p.SetState(3860)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 562, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3855)
					p.Declare_condition()
				}
				{
					p.SetState(3856)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(3862)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 562, p.GetParserRuleContext())
		}
		p.SetState(3868)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(3863)
					p.Declare_cursor()
				}
				{
					p.SetState(3864)
					p.Match(MySqlParserSEMI)
				}

			}
			p.SetState(3870)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 563, p.GetParserRuleContext())
		}
		p.SetState(3876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserDECLARE {
			{
				p.SetState(3871)
				p.Declare_handler()
			}
			{
				p.SetState(3872)
				p.Match(MySqlParserSEMI)
			}

			p.SetState(3878)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(3880)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3879)
				p.Procedure_sql_statement()
			}

			p.SetState(3882)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3886)
		p.Match(MySqlParserEND)
	}
	p.SetState(3888)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3887)
			p.Id_()
		}

	}

	return localctx
}

// ICase_statementContext is an interface to support dynamic dispatch.
type ICase_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCase_statementContext differentiates from other interfaces.
	IsCase_statementContext()
}

type Case_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCase_statementContext() *Case_statementContext {
	var p = new(Case_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_case_statement
	return p
}

func (*Case_statementContext) IsCase_statementContext() {}

func NewCase_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Case_statementContext {
	var p = new(Case_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_case_statement

	return p
}

func (s *Case_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Case_statementContext) AllCASE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserCASE)
}

func (s *Case_statementContext) CASE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, i)
}

func (s *Case_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *Case_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Case_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Case_statementContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWHEN)
}

func (s *Case_statementContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, i)
}

func (s *Case_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTHEN)
}

func (s *Case_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, i)
}

func (s *Case_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *Case_statementContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Case_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *Case_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *Case_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Case_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Case_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCase_statement(s)
	}
}

func (s *Case_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCase_statement(s)
	}
}

func (s *Case_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCase_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Case_statement() (localctx ICase_statementContext) {
	localctx = NewCase_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MySqlParserRULE_case_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3890)
		p.Match(MySqlParserCASE)
	}
	p.SetState(3893)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 568, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(3891)
			p.Id_()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 568, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(3892)
			p.expression(0)
		}

	}
	p.SetState(3906)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserWHEN {
		{
			p.SetState(3895)
			p.Match(MySqlParserWHEN)
		}
		p.SetState(3898)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 569, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(3896)
				p.Constant()
			}

		case 2:
			{
				p.SetState(3897)
				p.expression(0)
			}

		}
		{
			p.SetState(3900)
			p.Match(MySqlParserTHEN)
		}
		p.SetState(3902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3901)
				p.Procedure_sql_statement()
			}

			p.SetState(3904)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(3908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3916)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(3910)
			p.Match(MySqlParserELSE)
		}
		p.SetState(3912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3911)
				p.Procedure_sql_statement()
			}

			p.SetState(3914)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3918)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(3919)
		p.Match(MySqlParserCASE)
	}

	return localctx
}

// IIf_statementContext is an interface to support dynamic dispatch.
type IIf_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_statementContext differentiates from other interfaces.
	IsIf_statementContext()
}

type If_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_statementContext() *If_statementContext {
	var p = new(If_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_if_statement
	return p
}

func (*If_statementContext) IsIf_statementContext() {}

func NewIf_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_statementContext {
	var p = new(If_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_if_statement

	return p
}

func (s *If_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *If_statementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIF)
}

func (s *If_statementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, i)
}

func (s *If_statementContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *If_statementContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *If_statementContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTHEN)
}

func (s *If_statementContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, i)
}

func (s *If_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *If_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *If_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *If_statementContext) AllELSEIF() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserELSEIF)
}

func (s *If_statementContext) ELSEIF(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserELSEIF, i)
}

func (s *If_statementContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *If_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIf_statement(s)
	}
}

func (s *If_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIf_statement(s)
	}
}

func (s *If_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIf_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) If_statement() (localctx IIf_statementContext) {
	localctx = NewIf_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MySqlParserRULE_if_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3921)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(3922)
		p.expression(0)
	}
	{
		p.SetState(3923)
		p.Match(MySqlParserTHEN)
	}
	p.SetState(3925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3924)
			p.Procedure_sql_statement()
		}

		p.SetState(3927)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3939)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserELSEIF {
		{
			p.SetState(3929)
			p.Match(MySqlParserELSEIF)
		}
		{
			p.SetState(3930)
			p.expression(0)
		}
		{
			p.SetState(3931)
			p.Match(MySqlParserTHEN)
		}
		p.SetState(3933)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3932)
				p.Procedure_sql_statement()
			}

			p.SetState(3935)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(3941)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(3948)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserELSE {
		{
			p.SetState(3942)
			p.Match(MySqlParserELSE)
		}
		p.SetState(3944)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
			{
				p.SetState(3943)
				p.Procedure_sql_statement()
			}

			p.SetState(3946)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(3950)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(3951)
		p.Match(MySqlParserIF)
	}

	return localctx
}

// IIterate_statementContext is an interface to support dynamic dispatch.
type IIterate_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterate_statementContext differentiates from other interfaces.
	IsIterate_statementContext()
}

type Iterate_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterate_statementContext() *Iterate_statementContext {
	var p = new(Iterate_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_iterate_statement
	return p
}

func (*Iterate_statementContext) IsIterate_statementContext() {}

func NewIterate_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Iterate_statementContext {
	var p = new(Iterate_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_iterate_statement

	return p
}

func (s *Iterate_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Iterate_statementContext) ITERATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserITERATE, 0)
}

func (s *Iterate_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Iterate_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Iterate_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Iterate_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIterate_statement(s)
	}
}

func (s *Iterate_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIterate_statement(s)
	}
}

func (s *Iterate_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIterate_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Iterate_statement() (localctx IIterate_statementContext) {
	localctx = NewIterate_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MySqlParserRULE_iterate_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3953)
		p.Match(MySqlParserITERATE)
	}
	{
		p.SetState(3954)
		p.Id_()
	}

	return localctx
}

// ILeave_statementContext is an interface to support dynamic dispatch.
type ILeave_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLeave_statementContext differentiates from other interfaces.
	IsLeave_statementContext()
}

type Leave_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLeave_statementContext() *Leave_statementContext {
	var p = new(Leave_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_leave_statement
	return p
}

func (*Leave_statementContext) IsLeave_statementContext() {}

func NewLeave_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Leave_statementContext {
	var p = new(Leave_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_leave_statement

	return p
}

func (s *Leave_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Leave_statementContext) LEAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVE, 0)
}

func (s *Leave_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Leave_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Leave_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Leave_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLeave_statement(s)
	}
}

func (s *Leave_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLeave_statement(s)
	}
}

func (s *Leave_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLeave_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Leave_statement() (localctx ILeave_statementContext) {
	localctx = NewLeave_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MySqlParserRULE_leave_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3956)
		p.Match(MySqlParserLEAVE)
	}
	{
		p.SetState(3957)
		p.Id_()
	}

	return localctx
}

// ILoop_statementContext is an interface to support dynamic dispatch.
type ILoop_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoop_statementContext differentiates from other interfaces.
	IsLoop_statementContext()
}

type Loop_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoop_statementContext() *Loop_statementContext {
	var p = new(Loop_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_loop_statement
	return p
}

func (*Loop_statementContext) IsLoop_statementContext() {}

func NewLoop_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Loop_statementContext {
	var p = new(Loop_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_loop_statement

	return p
}

func (s *Loop_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Loop_statementContext) AllLOOP() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOOP)
}

func (s *Loop_statementContext) LOOP(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOOP, i)
}

func (s *Loop_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *Loop_statementContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Loop_statementContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Loop_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *Loop_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *Loop_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Loop_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Loop_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoop_statement(s)
	}
}

func (s *Loop_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoop_statement(s)
	}
}

func (s *Loop_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoop_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Loop_statement() (localctx ILoop_statementContext) {
	localctx = NewLoop_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, MySqlParserRULE_loop_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3962)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3959)
			p.Id_()
		}
		{
			p.SetState(3960)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(3964)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(3966)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3965)
			p.Procedure_sql_statement()
		}

		p.SetState(3968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3970)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(3971)
		p.Match(MySqlParserLOOP)
	}
	p.SetState(3973)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3972)
			p.Id_()
		}

	}

	return localctx
}

// IRepeat_statementContext is an interface to support dynamic dispatch.
type IRepeat_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepeat_statementContext differentiates from other interfaces.
	IsRepeat_statementContext()
}

type Repeat_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepeat_statementContext() *Repeat_statementContext {
	var p = new(Repeat_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repeat_statement
	return p
}

func (*Repeat_statementContext) IsRepeat_statementContext() {}

func NewRepeat_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repeat_statementContext {
	var p = new(Repeat_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repeat_statement

	return p
}

func (s *Repeat_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Repeat_statementContext) AllREPEAT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserREPEAT)
}

func (s *Repeat_statementContext) REPEAT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEAT, i)
}

func (s *Repeat_statementContext) UNTIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNTIL, 0)
}

func (s *Repeat_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Repeat_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *Repeat_statementContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Repeat_statementContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Repeat_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *Repeat_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *Repeat_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repeat_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repeat_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRepeat_statement(s)
	}
}

func (s *Repeat_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRepeat_statement(s)
	}
}

func (s *Repeat_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRepeat_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Repeat_statement() (localctx IRepeat_statementContext) {
	localctx = NewRepeat_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MySqlParserRULE_repeat_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3978)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3975)
			p.Id_()
		}
		{
			p.SetState(3976)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(3980)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(3982)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3981)
			p.Procedure_sql_statement()
		}

		p.SetState(3984)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(3986)
		p.Match(MySqlParserUNTIL)
	}
	{
		p.SetState(3987)
		p.expression(0)
	}
	{
		p.SetState(3988)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(3989)
		p.Match(MySqlParserREPEAT)
	}
	p.SetState(3991)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3990)
			p.Id_()
		}

	}

	return localctx
}

// IReturn_statementContext is an interface to support dynamic dispatch.
type IReturn_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturn_statementContext differentiates from other interfaces.
	IsReturn_statementContext()
}

type Return_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturn_statementContext() *Return_statementContext {
	var p = new(Return_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_return_statement
	return p
}

func (*Return_statementContext) IsReturn_statementContext() {}

func NewReturn_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Return_statementContext {
	var p = new(Return_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_return_statement

	return p
}

func (s *Return_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Return_statementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURN, 0)
}

func (s *Return_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Return_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Return_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Return_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReturn_statement(s)
	}
}

func (s *Return_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReturn_statement(s)
	}
}

func (s *Return_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReturn_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Return_statement() (localctx IReturn_statementContext) {
	localctx = NewReturn_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MySqlParserRULE_return_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(3993)
		p.Match(MySqlParserRETURN)
	}
	{
		p.SetState(3994)
		p.expression(0)
	}

	return localctx
}

// IWhile_statementContext is an interface to support dynamic dispatch.
type IWhile_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhile_statementContext differentiates from other interfaces.
	IsWhile_statementContext()
}

type While_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhile_statementContext() *While_statementContext {
	var p = new(While_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_while_statement
	return p
}

func (*While_statementContext) IsWhile_statementContext() {}

func NewWhile_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *While_statementContext {
	var p = new(While_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_while_statement

	return p
}

func (s *While_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *While_statementContext) AllWHILE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWHILE)
}

func (s *While_statementContext) WHILE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWHILE, i)
}

func (s *While_statementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *While_statementContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *While_statementContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *While_statementContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *While_statementContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *While_statementContext) AllProcedure_sql_statement() []IProcedure_sql_statementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem())
	var tst = make([]IProcedure_sql_statementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IProcedure_sql_statementContext)
		}
	}

	return tst
}

func (s *While_statementContext) Procedure_sql_statement(i int) IProcedure_sql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IProcedure_sql_statementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IProcedure_sql_statementContext)
}

func (s *While_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *While_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *While_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWhile_statement(s)
	}
}

func (s *While_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWhile_statement(s)
	}
}

func (s *While_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWhile_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) While_statement() (localctx IWhile_statementContext) {
	localctx = NewWhile_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MySqlParserRULE_while_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(3999)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(3996)
			p.Id_()
		}
		{
			p.SetState(3997)
			p.Match(MySqlParserCOLON_SYMB)
		}

	}
	{
		p.SetState(4001)
		p.Match(MySqlParserWHILE)
	}
	{
		p.SetState(4002)
		p.expression(0)
	}
	{
		p.SetState(4003)
		p.Match(MySqlParserDO)
	}
	p.SetState(4005)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserALTER)|(1<<MySqlParserANALYZE)|(1<<MySqlParserCALL)|(1<<MySqlParserCASE)|(1<<MySqlParserCHANGE)|(1<<MySqlParserCHECK)|(1<<MySqlParserCREATE))) != 0) || (((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(MySqlParserDELETE-38))|(1<<(MySqlParserDESC-38))|(1<<(MySqlParserDESCRIBE-38))|(1<<(MySqlParserDROP-38))|(1<<(MySqlParserEXPLAIN-38))|(1<<(MySqlParserFETCH-38))|(1<<(MySqlParserGRANT-38))|(1<<(MySqlParserIF-38)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(MySqlParserINSERT-71))|(1<<(MySqlParserITERATE-71))|(1<<(MySqlParserKILL-71))|(1<<(MySqlParserLEAVE-71))|(1<<(MySqlParserLEFT-71))|(1<<(MySqlParserLOAD-71))|(1<<(MySqlParserLOCK-71))|(1<<(MySqlParserLOOP-71))|(1<<(MySqlParserOPTIMIZE-71)))) != 0) || (((_la-113)&-(0x1f+1)) == 0 && ((1<<uint((_la-113)))&((1<<(MySqlParserPURGE-113))|(1<<(MySqlParserRELEASE-113))|(1<<(MySqlParserRENAME-113))|(1<<(MySqlParserREPEAT-113))|(1<<(MySqlParserREPLACE-113))|(1<<(MySqlParserRETURN-113))|(1<<(MySqlParserREVOKE-113))|(1<<(MySqlParserRIGHT-113))|(1<<(MySqlParserSELECT-113))|(1<<(MySqlParserSET-113))|(1<<(MySqlParserSHOW-113)))) != 0) || (((_la-156)&-(0x1f+1)) == 0 && ((1<<uint((_la-156)))&((1<<(MySqlParserUNLOCK-156))|(1<<(MySqlParserUPDATE-156))|(1<<(MySqlParserUSE-156))|(1<<(MySqlParserWHILE-156))|(1<<(MySqlParserDATE-156))|(1<<(MySqlParserTIME-156))|(1<<(MySqlParserTIMESTAMP-156))|(1<<(MySqlParserDATETIME-156))|(1<<(MySqlParserYEAR-156)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserCOUNT-195)))) != 0) || (((_la-237)&-(0x1f+1)) == 0 && ((1<<uint((_la-237)))&((1<<(MySqlParserPOSITION-237))|(1<<(MySqlParserACTION-237))|(1<<(MySqlParserAFTER-237))|(1<<(MySqlParserALGORITHM-237))|(1<<(MySqlParserANY-237))|(1<<(MySqlParserAT-237))|(1<<(MySqlParserAUTHORS-237))|(1<<(MySqlParserAUTOCOMMIT-237))|(1<<(MySqlParserAUTOEXTEND_SIZE-237))|(1<<(MySqlParserAUTO_INCREMENT-237))|(1<<(MySqlParserAVG_ROW_LENGTH-237))|(1<<(MySqlParserBEGIN-237))|(1<<(MySqlParserBINLOG-237))|(1<<(MySqlParserBIT-237))|(1<<(MySqlParserBTREE-237))|(1<<(MySqlParserCACHE-237))|(1<<(MySqlParserCASCADED-237))|(1<<(MySqlParserCHAIN-237))|(1<<(MySqlParserCHECKSUM-237))|(1<<(MySqlParserCIPHER-237)))) != 0) || (((_la-269)&-(0x1f+1)) == 0 && ((1<<uint((_la-269)))&((1<<(MySqlParserCLIENT-269))|(1<<(MySqlParserCLOSE-269))|(1<<(MySqlParserCOALESCE-269))|(1<<(MySqlParserCODE-269))|(1<<(MySqlParserCOLUMNS-269))|(1<<(MySqlParserCOLUMN_FORMAT-269))|(1<<(MySqlParserCOMMENT-269))|(1<<(MySqlParserCOMMIT-269))|(1<<(MySqlParserCOMPACT-269))|(1<<(MySqlParserCOMPLETION-269))|(1<<(MySqlParserCOMPRESSED-269))|(1<<(MySqlParserCONCURRENT-269))|(1<<(MySqlParserCONNECTION-269))|(1<<(MySqlParserCONSISTENT-269))|(1<<(MySqlParserCONTAINS-269))|(1<<(MySqlParserCONTRIBUTORS-269))|(1<<(MySqlParserCOPY-269))|(1<<(MySqlParserDATA-269))|(1<<(MySqlParserDATAFILE-269))|(1<<(MySqlParserDEALLOCATE-269))|(1<<(MySqlParserDEFINER-269))|(1<<(MySqlParserDELAY_KEY_WRITE-269))|(1<<(MySqlParserDIRECTORY-269))|(1<<(MySqlParserDISABLE-269))|(1<<(MySqlParserDISCARD-269))|(1<<(MySqlParserDISK-269))|(1<<(MySqlParserDO-269)))) != 0) || (((_la-301)&-(0x1f+1)) == 0 && ((1<<uint((_la-301)))&((1<<(MySqlParserDUMPFILE-301))|(1<<(MySqlParserDUPLICATE-301))|(1<<(MySqlParserDYNAMIC-301))|(1<<(MySqlParserENABLE-301))|(1<<(MySqlParserENDS-301))|(1<<(MySqlParserENGINE-301))|(1<<(MySqlParserENGINES-301))|(1<<(MySqlParserERRORS-301))|(1<<(MySqlParserESCAPE-301))|(1<<(MySqlParserEVEN-301))|(1<<(MySqlParserEVENT-301))|(1<<(MySqlParserEVENTS-301))|(1<<(MySqlParserEVERY-301))|(1<<(MySqlParserEXCHANGE-301))|(1<<(MySqlParserEXCLUSIVE-301))|(1<<(MySqlParserEXPIRE-301))|(1<<(MySqlParserEXTENT_SIZE-301))|(1<<(MySqlParserFIELDS-301))|(1<<(MySqlParserFIRST-301))|(1<<(MySqlParserFIXED-301))|(1<<(MySqlParserFLUSH-301)))) != 0) || (((_la-333)&-(0x1f+1)) == 0 && ((1<<uint((_la-333)))&((1<<(MySqlParserFULL-333))|(1<<(MySqlParserFUNCTION-333))|(1<<(MySqlParserGLOBAL-333))|(1<<(MySqlParserGRANTS-333))|(1<<(MySqlParserHANDLER-333))|(1<<(MySqlParserHASH-333))|(1<<(MySqlParserHELP-333))|(1<<(MySqlParserHOST-333))|(1<<(MySqlParserIDENTIFIED-333))|(1<<(MySqlParserIMPORT-333))|(1<<(MySqlParserINITIAL_SIZE-333))|(1<<(MySqlParserINPLACE-333))|(1<<(MySqlParserINSERT_METHOD-333))|(1<<(MySqlParserINSTALL-333))|(1<<(MySqlParserINVOKER-333))|(1<<(MySqlParserISOLATION-333))|(1<<(MySqlParserISSUER-333))|(1<<(MySqlParserKEY_BLOCK_SIZE-333))|(1<<(MySqlParserLANGUAGE-333))|(1<<(MySqlParserLAST-333))|(1<<(MySqlParserLESS-333)))) != 0) || (((_la-365)&-(0x1f+1)) == 0 && ((1<<uint((_la-365)))&((1<<(MySqlParserLEVEL-365))|(1<<(MySqlParserLIST-365))|(1<<(MySqlParserLOCAL-365))|(1<<(MySqlParserLOGFILE-365))|(1<<(MySqlParserLOGS-365))|(1<<(MySqlParserMASTER-365))|(1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-365))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-365))|(1<<(MySqlParserMAX_ROWS-365))|(1<<(MySqlParserMAX_SIZE-365))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-365))|(1<<(MySqlParserMAX_USER_CONNECTIONS-365)))) != 0) || (((_la-398)&-(0x1f+1)) == 0 && ((1<<uint((_la-398)))&((1<<(MySqlParserMERGE-398))|(1<<(MySqlParserMID-398))|(1<<(MySqlParserMIN_ROWS-398))|(1<<(MySqlParserMODIFY-398))|(1<<(MySqlParserMUTEX-398))|(1<<(MySqlParserMYSQL-398))|(1<<(MySqlParserNAME-398))|(1<<(MySqlParserNAMES-398))|(1<<(MySqlParserNCHAR-398))|(1<<(MySqlParserNO-398))|(1<<(MySqlParserNODEGROUP-398))|(1<<(MySqlParserNONE-398))|(1<<(MySqlParserOFFLINE-398))|(1<<(MySqlParserOFFSET-398))|(1<<(MySqlParserOJ-398))|(1<<(MySqlParserOLD_PASSWORD-398))|(1<<(MySqlParserONLINE-398))|(1<<(MySqlParserONLY-398))|(1<<(MySqlParserOPEN-398))|(1<<(MySqlParserOPTIONS-398))|(1<<(MySqlParserOWNER-398))|(1<<(MySqlParserPACK_KEYS-398))|(1<<(MySqlParserPARSER-398))|(1<<(MySqlParserPARTIAL-398))|(1<<(MySqlParserPARTITIONING-398)))) != 0) || (((_la-430)&-(0x1f+1)) == 0 && ((1<<uint((_la-430)))&((1<<(MySqlParserPARTITIONS-430))|(1<<(MySqlParserPASSWORD-430))|(1<<(MySqlParserPLUGINS-430))|(1<<(MySqlParserPORT-430))|(1<<(MySqlParserPREPARE-430))|(1<<(MySqlParserPRESERVE-430))|(1<<(MySqlParserPROCESSLIST-430))|(1<<(MySqlParserPROFILE-430))|(1<<(MySqlParserPROFILES-430))|(1<<(MySqlParserPROXY-430))|(1<<(MySqlParserQUERY-430))|(1<<(MySqlParserQUICK-430))|(1<<(MySqlParserREBUILD-430))|(1<<(MySqlParserREDO_BUFFER_SIZE-430))|(1<<(MySqlParserREDUNDANT-430))|(1<<(MySqlParserRELAYLOG-430))|(1<<(MySqlParserREMOVE-430))|(1<<(MySqlParserREORGANIZE-430))|(1<<(MySqlParserREPAIR-430)))) != 0) || (((_la-465)&-(0x1f+1)) == 0 && ((1<<uint((_la-465)))&((1<<(MySqlParserREPLICATION-465))|(1<<(MySqlParserRESET-465))|(1<<(MySqlParserRETURNS-465))|(1<<(MySqlParserROLLBACK-465))|(1<<(MySqlParserROLLUP-465))|(1<<(MySqlParserROW-465))|(1<<(MySqlParserROWS-465))|(1<<(MySqlParserROW_FORMAT-465))|(1<<(MySqlParserSAVEPOINT-465))|(1<<(MySqlParserSCHEDULE-465))|(1<<(MySqlParserSECURITY-465))|(1<<(MySqlParserSERVER-465))|(1<<(MySqlParserSESSION-465))|(1<<(MySqlParserSHARE-465))|(1<<(MySqlParserSHARED-465))|(1<<(MySqlParserSIGNED-465))|(1<<(MySqlParserSIMPLE-465))|(1<<(MySqlParserSLAVE-465))|(1<<(MySqlParserSNAPSHOT-465))|(1<<(MySqlParserSOCKET-465))|(1<<(MySqlParserSOME-465))|(1<<(MySqlParserSOUNDS-465))|(1<<(MySqlParserSQL_BUFFER_RESULT-465))|(1<<(MySqlParserSQL_CACHE-465)))) != 0) || (((_la-497)&-(0x1f+1)) == 0 && ((1<<uint((_la-497)))&((1<<(MySqlParserSQL_NO_CACHE-497))|(1<<(MySqlParserSTART-497))|(1<<(MySqlParserSTARTS-497))|(1<<(MySqlParserSTATS_AUTO_RECALC-497))|(1<<(MySqlParserSTATS_PERSISTENT-497))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-497))|(1<<(MySqlParserSTATUS-497))|(1<<(MySqlParserSTOP-497))|(1<<(MySqlParserSTORAGE-497))|(1<<(MySqlParserSUBJECT-497))|(1<<(MySqlParserSUBPARTITION-497))|(1<<(MySqlParserSUBPARTITIONS-497))|(1<<(MySqlParserTABLESPACE-497))|(1<<(MySqlParserTEMPORARY-497))|(1<<(MySqlParserTEMPTABLE-497))|(1<<(MySqlParserTHAN-497))|(1<<(MySqlParserTRANSACTION-497))|(1<<(MySqlParserTRUNCATE-497))|(1<<(MySqlParserUNDEFINED-497))|(1<<(MySqlParserUNDOFILE-497))|(1<<(MySqlParserUNDO_BUFFER_SIZE-497))|(1<<(MySqlParserUNINSTALL-497))|(1<<(MySqlParserUNKNOWN-497))|(1<<(MySqlParserUPGRADE-497)))) != 0) || (((_la-529)&-(0x1f+1)) == 0 && ((1<<uint((_la-529)))&((1<<(MySqlParserUSER-529))|(1<<(MySqlParserVALUE-529))|(1<<(MySqlParserVARIABLES-529))|(1<<(MySqlParserVIEW-529))|(1<<(MySqlParserWAIT-529))|(1<<(MySqlParserWARNINGS-529))|(1<<(MySqlParserWORK-529))|(1<<(MySqlParserWRAPPER-529))|(1<<(MySqlParserX509-529))|(1<<(MySqlParserXA-529))|(1<<(MySqlParserXML-529))|(1<<(MySqlParserQUARTER-529))|(1<<(MySqlParserMONTH-529))|(1<<(MySqlParserDAY-529))|(1<<(MySqlParserHOUR-529))|(1<<(MySqlParserMINUTE-529))|(1<<(MySqlParserWEEK-529))|(1<<(MySqlParserSECOND-529))|(1<<(MySqlParserMICROSECOND-529))|(1<<(MySqlParserTABLES-529))|(1<<(MySqlParserROUTINE-529))|(1<<(MySqlParserEXECUTE-529))|(1<<(MySqlParserFILE-529)))) != 0) || (((_la-561)&-(0x1f+1)) == 0 && ((1<<uint((_la-561)))&((1<<(MySqlParserPROCESS-561))|(1<<(MySqlParserRELOAD-561))|(1<<(MySqlParserSHUTDOWN-561))|(1<<(MySqlParserSUPER-561))|(1<<(MySqlParserPRIVILEGES-561))|(1<<(MySqlParserARMSCII8-561))|(1<<(MySqlParserASCII-561))|(1<<(MySqlParserBIG5-561))|(1<<(MySqlParserCP1250-561))|(1<<(MySqlParserCP1251-561))|(1<<(MySqlParserCP1256-561))|(1<<(MySqlParserCP1257-561))|(1<<(MySqlParserCP850-561))|(1<<(MySqlParserCP852-561))|(1<<(MySqlParserCP866-561))|(1<<(MySqlParserCP932-561))|(1<<(MySqlParserDEC8-561))|(1<<(MySqlParserEUCJPMS-561))|(1<<(MySqlParserEUCKR-561))|(1<<(MySqlParserGB2312-561))|(1<<(MySqlParserGBK-561))|(1<<(MySqlParserGEOSTD8-561))|(1<<(MySqlParserGREEK-561))|(1<<(MySqlParserHEBREW-561))|(1<<(MySqlParserHP8-561))|(1<<(MySqlParserKEYBCS2-561))|(1<<(MySqlParserKOI8R-561))|(1<<(MySqlParserKOI8U-561))|(1<<(MySqlParserLATIN1-561))|(1<<(MySqlParserLATIN2-561))|(1<<(MySqlParserLATIN5-561))|(1<<(MySqlParserLATIN7-561)))) != 0) || (((_la-593)&-(0x1f+1)) == 0 && ((1<<uint((_la-593)))&((1<<(MySqlParserMACCE-593))|(1<<(MySqlParserMACROMAN-593))|(1<<(MySqlParserSJIS-593))|(1<<(MySqlParserSWE7-593))|(1<<(MySqlParserTIS620-593))|(1<<(MySqlParserUCS2-593))|(1<<(MySqlParserUJIS-593))|(1<<(MySqlParserUTF16-593))|(1<<(MySqlParserUTF16LE-593))|(1<<(MySqlParserUTF32-593))|(1<<(MySqlParserUTF8-593))|(1<<(MySqlParserUTF8MB3-593))|(1<<(MySqlParserUTF8MB4-593))|(1<<(MySqlParserARCHIVE-593))|(1<<(MySqlParserBLACKHOLE-593))|(1<<(MySqlParserCSV-593))|(1<<(MySqlParserFEDERATED-593))|(1<<(MySqlParserINNODB-593))|(1<<(MySqlParserMEMORY-593))|(1<<(MySqlParserMRG_MYISAM-593))|(1<<(MySqlParserMYISAM-593))|(1<<(MySqlParserNDB-593))|(1<<(MySqlParserNDBCLUSTER-593))|(1<<(MySqlParserPERFOMANCE_SCHEMA-593))|(1<<(MySqlParserREPEATABLE-593))|(1<<(MySqlParserCOMMITTED-593))|(1<<(MySqlParserUNCOMMITTED-593))|(1<<(MySqlParserSERIALIZABLE-593))|(1<<(MySqlParserGEOMETRYCOLLECTION-593))|(1<<(MySqlParserLINESTRING-593))|(1<<(MySqlParserMULTILINESTRING-593))|(1<<(MySqlParserMULTIPOINT-593)))) != 0) || (((_la-625)&-(0x1f+1)) == 0 && ((1<<uint((_la-625)))&((1<<(MySqlParserMULTIPOLYGON-625))|(1<<(MySqlParserPOINT-625))|(1<<(MySqlParserPOLYGON-625))|(1<<(MySqlParserABS-625))|(1<<(MySqlParserACOS-625))|(1<<(MySqlParserADDDATE-625))|(1<<(MySqlParserADDTIME-625))|(1<<(MySqlParserAES_DECRYPT-625))|(1<<(MySqlParserAES_ENCRYPT-625))|(1<<(MySqlParserAREA-625))|(1<<(MySqlParserASBINARY-625))|(1<<(MySqlParserASIN-625))|(1<<(MySqlParserASTEXT-625))|(1<<(MySqlParserASWKB-625))|(1<<(MySqlParserASWKT-625))|(1<<(MySqlParserASYMMETRIC_DECRYPT-625))|(1<<(MySqlParserASYMMETRIC_DERIVE-625))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-625))|(1<<(MySqlParserASYMMETRIC_SIGN-625))|(1<<(MySqlParserASYMMETRIC_VERIFY-625))|(1<<(MySqlParserATAN-625))|(1<<(MySqlParserATAN2-625))|(1<<(MySqlParserBENCHMARK-625))|(1<<(MySqlParserBIN-625))|(1<<(MySqlParserBIT_COUNT-625))|(1<<(MySqlParserBIT_LENGTH-625))|(1<<(MySqlParserBUFFER-625))|(1<<(MySqlParserCEIL-625))|(1<<(MySqlParserCEILING-625))|(1<<(MySqlParserCENTROID-625))|(1<<(MySqlParserCHARACTER_LENGTH-625))|(1<<(MySqlParserCHARSET-625)))) != 0) || (((_la-657)&-(0x1f+1)) == 0 && ((1<<uint((_la-657)))&((1<<(MySqlParserCHAR_LENGTH-657))|(1<<(MySqlParserCOERCIBILITY-657))|(1<<(MySqlParserCOLLATION-657))|(1<<(MySqlParserCOMPRESS-657))|(1<<(MySqlParserCONCAT-657))|(1<<(MySqlParserCONCAT_WS-657))|(1<<(MySqlParserCONNECTION_ID-657))|(1<<(MySqlParserCONV-657))|(1<<(MySqlParserCONVERT_TZ-657))|(1<<(MySqlParserCOS-657))|(1<<(MySqlParserCOT-657))|(1<<(MySqlParserCRC32-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-657))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-657))|(1<<(MySqlParserCREATE_DH_PARAMETERS-657))|(1<<(MySqlParserCREATE_DIGEST-657))|(1<<(MySqlParserCROSSES-657))|(1<<(MySqlParserDATEDIFF-657))|(1<<(MySqlParserDATE_FORMAT-657))|(1<<(MySqlParserDAYNAME-657))|(1<<(MySqlParserDAYOFMONTH-657))|(1<<(MySqlParserDAYOFWEEK-657))|(1<<(MySqlParserDAYOFYEAR-657))|(1<<(MySqlParserDECODE-657))|(1<<(MySqlParserDEGREES-657))|(1<<(MySqlParserDES_DECRYPT-657))|(1<<(MySqlParserDES_ENCRYPT-657))|(1<<(MySqlParserDIMENSION-657))|(1<<(MySqlParserDISJOINT-657))|(1<<(MySqlParserELT-657))|(1<<(MySqlParserENCODE-657))|(1<<(MySqlParserENCRYPT-657)))) != 0) || (((_la-689)&-(0x1f+1)) == 0 && ((1<<uint((_la-689)))&((1<<(MySqlParserENDPOINT-689))|(1<<(MySqlParserENVELOPE-689))|(1<<(MySqlParserEQUALS-689))|(1<<(MySqlParserEXP-689))|(1<<(MySqlParserEXPORT_SET-689))|(1<<(MySqlParserEXTERIORRING-689))|(1<<(MySqlParserEXTRACTVALUE-689))|(1<<(MySqlParserFIELD-689))|(1<<(MySqlParserFIND_IN_SET-689))|(1<<(MySqlParserFLOOR-689))|(1<<(MySqlParserFORMAT-689))|(1<<(MySqlParserFOUND_ROWS-689))|(1<<(MySqlParserFROM_BASE64-689))|(1<<(MySqlParserFROM_DAYS-689))|(1<<(MySqlParserFROM_UNIXTIME-689))|(1<<(MySqlParserGEOMCOLLFROMTEXT-689))|(1<<(MySqlParserGEOMCOLLFROMWKB-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-689))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-689))|(1<<(MySqlParserGEOMETRYFROMTEXT-689))|(1<<(MySqlParserGEOMETRYFROMWKB-689))|(1<<(MySqlParserGEOMETRYN-689))|(1<<(MySqlParserGEOMETRYTYPE-689))|(1<<(MySqlParserGEOMFROMTEXT-689))|(1<<(MySqlParserGEOMFROMWKB-689))|(1<<(MySqlParserGET_FORMAT-689))|(1<<(MySqlParserGET_LOCK-689))|(1<<(MySqlParserGLENGTH-689))|(1<<(MySqlParserGREATEST-689))|(1<<(MySqlParserGTID_SUBSET-689))|(1<<(MySqlParserGTID_SUBTRACT-689))|(1<<(MySqlParserHEX-689)))) != 0) || (((_la-721)&-(0x1f+1)) == 0 && ((1<<uint((_la-721)))&((1<<(MySqlParserIFNULL-721))|(1<<(MySqlParserINET6_ATON-721))|(1<<(MySqlParserINET6_NTOA-721))|(1<<(MySqlParserINET_ATON-721))|(1<<(MySqlParserINET_NTOA-721))|(1<<(MySqlParserINSTR-721))|(1<<(MySqlParserINTERIORRINGN-721))|(1<<(MySqlParserINTERSECTS-721))|(1<<(MySqlParserISCLOSED-721))|(1<<(MySqlParserISEMPTY-721))|(1<<(MySqlParserISNULL-721))|(1<<(MySqlParserISSIMPLE-721))|(1<<(MySqlParserIS_FREE_LOCK-721))|(1<<(MySqlParserIS_IPV4-721))|(1<<(MySqlParserIS_IPV4_COMPAT-721))|(1<<(MySqlParserIS_IPV4_MAPPED-721))|(1<<(MySqlParserIS_IPV6-721))|(1<<(MySqlParserIS_USED_LOCK-721))|(1<<(MySqlParserLAST_INSERT_ID-721))|(1<<(MySqlParserLCASE-721))|(1<<(MySqlParserLEAST-721))|(1<<(MySqlParserLENGTH-721))|(1<<(MySqlParserLINEFROMTEXT-721))|(1<<(MySqlParserLINEFROMWKB-721))|(1<<(MySqlParserLINESTRINGFROMTEXT-721))|(1<<(MySqlParserLINESTRINGFROMWKB-721))|(1<<(MySqlParserLN-721))|(1<<(MySqlParserLOAD_FILE-721))|(1<<(MySqlParserLOCATE-721))|(1<<(MySqlParserLOG-721))|(1<<(MySqlParserLOG10-721))|(1<<(MySqlParserLOG2-721)))) != 0) || (((_la-753)&-(0x1f+1)) == 0 && ((1<<uint((_la-753)))&((1<<(MySqlParserLOWER-753))|(1<<(MySqlParserLPAD-753))|(1<<(MySqlParserLTRIM-753))|(1<<(MySqlParserMAKEDATE-753))|(1<<(MySqlParserMAKETIME-753))|(1<<(MySqlParserMAKE_SET-753))|(1<<(MySqlParserMASTER_POS_WAIT-753))|(1<<(MySqlParserMBRCONTAINS-753))|(1<<(MySqlParserMBRDISJOINT-753))|(1<<(MySqlParserMBREQUAL-753))|(1<<(MySqlParserMBRINTERSECTS-753))|(1<<(MySqlParserMBROVERLAPS-753))|(1<<(MySqlParserMBRTOUCHES-753))|(1<<(MySqlParserMBRWITHIN-753))|(1<<(MySqlParserMD5-753))|(1<<(MySqlParserMLINEFROMTEXT-753))|(1<<(MySqlParserMLINEFROMWKB-753))|(1<<(MySqlParserMONTHNAME-753))|(1<<(MySqlParserMPOINTFROMTEXT-753))|(1<<(MySqlParserMPOINTFROMWKB-753))|(1<<(MySqlParserMPOLYFROMTEXT-753))|(1<<(MySqlParserMPOLYFROMWKB-753))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-753))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-753))|(1<<(MySqlParserMULTIPOINTFROMTEXT-753))|(1<<(MySqlParserMULTIPOINTFROMWKB-753))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-753))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-753))|(1<<(MySqlParserNAME_CONST-753))|(1<<(MySqlParserNULLIF-753))|(1<<(MySqlParserNUMGEOMETRIES-753))|(1<<(MySqlParserNUMINTERIORRINGS-753)))) != 0) || (((_la-785)&-(0x1f+1)) == 0 && ((1<<uint((_la-785)))&((1<<(MySqlParserNUMPOINTS-785))|(1<<(MySqlParserOCT-785))|(1<<(MySqlParserOCTET_LENGTH-785))|(1<<(MySqlParserORD-785))|(1<<(MySqlParserOVERLAPS-785))|(1<<(MySqlParserPERIOD_ADD-785))|(1<<(MySqlParserPERIOD_DIFF-785))|(1<<(MySqlParserPI-785))|(1<<(MySqlParserPOINTFROMTEXT-785))|(1<<(MySqlParserPOINTFROMWKB-785))|(1<<(MySqlParserPOINTN-785))|(1<<(MySqlParserPOLYFROMTEXT-785))|(1<<(MySqlParserPOLYFROMWKB-785))|(1<<(MySqlParserPOLYGONFROMTEXT-785))|(1<<(MySqlParserPOLYGONFROMWKB-785))|(1<<(MySqlParserPOW-785))|(1<<(MySqlParserPOWER-785))|(1<<(MySqlParserQUOTE-785))|(1<<(MySqlParserRADIANS-785))|(1<<(MySqlParserRAND-785))|(1<<(MySqlParserRANDOM_BYTES-785))|(1<<(MySqlParserRELEASE_LOCK-785))|(1<<(MySqlParserREVERSE-785))|(1<<(MySqlParserROUND-785))|(1<<(MySqlParserROW_COUNT-785))|(1<<(MySqlParserRPAD-785))|(1<<(MySqlParserRTRIM-785))|(1<<(MySqlParserSEC_TO_TIME-785))|(1<<(MySqlParserSESSION_USER-785))|(1<<(MySqlParserSHA-785))|(1<<(MySqlParserSHA1-785))|(1<<(MySqlParserSHA2-785)))) != 0) || (((_la-817)&-(0x1f+1)) == 0 && ((1<<uint((_la-817)))&((1<<(MySqlParserSIGN-817))|(1<<(MySqlParserSIN-817))|(1<<(MySqlParserSLEEP-817))|(1<<(MySqlParserSOUNDEX-817))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-817))|(1<<(MySqlParserSQRT-817))|(1<<(MySqlParserSRID-817))|(1<<(MySqlParserSTARTPOINT-817))|(1<<(MySqlParserSTRCMP-817))|(1<<(MySqlParserSTR_TO_DATE-817))|(1<<(MySqlParserST_AREA-817))|(1<<(MySqlParserST_ASBINARY-817))|(1<<(MySqlParserST_ASTEXT-817))|(1<<(MySqlParserST_ASWKB-817))|(1<<(MySqlParserST_ASWKT-817))|(1<<(MySqlParserST_BUFFER-817))|(1<<(MySqlParserST_CENTROID-817))|(1<<(MySqlParserST_CONTAINS-817))|(1<<(MySqlParserST_CROSSES-817))|(1<<(MySqlParserST_DIFFERENCE-817))|(1<<(MySqlParserST_DIMENSION-817))|(1<<(MySqlParserST_DISJOINT-817))|(1<<(MySqlParserST_DISTANCE-817))|(1<<(MySqlParserST_ENDPOINT-817))|(1<<(MySqlParserST_ENVELOPE-817))|(1<<(MySqlParserST_EQUALS-817))|(1<<(MySqlParserST_EXTERIORRING-817))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-817))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-817))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-817)))) != 0) || (((_la-849)&-(0x1f+1)) == 0 && ((1<<uint((_la-849)))&((1<<(MySqlParserST_GEOMETRYFROMTEXT-849))|(1<<(MySqlParserST_GEOMETRYFROMWKB-849))|(1<<(MySqlParserST_GEOMETRYN-849))|(1<<(MySqlParserST_GEOMETRYTYPE-849))|(1<<(MySqlParserST_GEOMFROMTEXT-849))|(1<<(MySqlParserST_GEOMFROMWKB-849))|(1<<(MySqlParserST_INTERIORRINGN-849))|(1<<(MySqlParserST_INTERSECTION-849))|(1<<(MySqlParserST_INTERSECTS-849))|(1<<(MySqlParserST_ISCLOSED-849))|(1<<(MySqlParserST_ISEMPTY-849))|(1<<(MySqlParserST_ISSIMPLE-849))|(1<<(MySqlParserST_LINEFROMTEXT-849))|(1<<(MySqlParserST_LINEFROMWKB-849))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-849))|(1<<(MySqlParserST_LINESTRINGFROMWKB-849))|(1<<(MySqlParserST_NUMGEOMETRIES-849))|(1<<(MySqlParserST_NUMINTERIORRING-849))|(1<<(MySqlParserST_NUMINTERIORRINGS-849))|(1<<(MySqlParserST_NUMPOINTS-849))|(1<<(MySqlParserST_OVERLAPS-849))|(1<<(MySqlParserST_POINTFROMTEXT-849))|(1<<(MySqlParserST_POINTFROMWKB-849))|(1<<(MySqlParserST_POINTN-849))|(1<<(MySqlParserST_POLYFROMTEXT-849))|(1<<(MySqlParserST_POLYFROMWKB-849))|(1<<(MySqlParserST_POLYGONFROMTEXT-849))|(1<<(MySqlParserST_POLYGONFROMWKB-849))|(1<<(MySqlParserST_SRID-849))|(1<<(MySqlParserST_STARTPOINT-849))|(1<<(MySqlParserST_SYMDIFFERENCE-849))|(1<<(MySqlParserST_TOUCHES-849)))) != 0) || (((_la-881)&-(0x1f+1)) == 0 && ((1<<uint((_la-881)))&((1<<(MySqlParserST_UNION-881))|(1<<(MySqlParserST_WITHIN-881))|(1<<(MySqlParserST_X-881))|(1<<(MySqlParserST_Y-881))|(1<<(MySqlParserSUBDATE-881))|(1<<(MySqlParserSUBSTRING_INDEX-881))|(1<<(MySqlParserSUBTIME-881))|(1<<(MySqlParserSYSTEM_USER-881))|(1<<(MySqlParserTAN-881))|(1<<(MySqlParserTIMEDIFF-881))|(1<<(MySqlParserTIMESTAMPADD-881))|(1<<(MySqlParserTIMESTAMPDIFF-881))|(1<<(MySqlParserTIME_FORMAT-881))|(1<<(MySqlParserTIME_TO_SEC-881))|(1<<(MySqlParserTOUCHES-881))|(1<<(MySqlParserTO_BASE64-881))|(1<<(MySqlParserTO_DAYS-881))|(1<<(MySqlParserTO_SECONDS-881))|(1<<(MySqlParserUCASE-881))|(1<<(MySqlParserUNCOMPRESS-881))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-881))|(1<<(MySqlParserUNHEX-881))|(1<<(MySqlParserUNIX_TIMESTAMP-881))|(1<<(MySqlParserUPDATEXML-881))|(1<<(MySqlParserUPPER-881))|(1<<(MySqlParserUUID-881))|(1<<(MySqlParserUUID_SHORT-881))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-881))|(1<<(MySqlParserVERSION-881))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-881))|(1<<(MySqlParserWEEKDAY-881))|(1<<(MySqlParserWEEKOFYEAR-881)))) != 0) || (((_la-913)&-(0x1f+1)) == 0 && ((1<<uint((_la-913)))&((1<<(MySqlParserWEIGHT_STRING-913))|(1<<(MySqlParserWITHIN-913))|(1<<(MySqlParserYEARWEEK-913))|(1<<(MySqlParserY_FUNCTION-913))|(1<<(MySqlParserX_FUNCTION-913))|(1<<(MySqlParserLR_BRACKET-913)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(4004)
			p.Procedure_sql_statement()
		}

		p.SetState(4007)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4009)
		p.Match(MySqlParserEND)
	}
	{
		p.SetState(4010)
		p.Match(MySqlParserWHILE)
	}
	p.SetState(4012)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903)))) != 0) || (((_la-955)&-(0x1f+1)) == 0 && ((1<<uint((_la-955)))&((1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-955))|(1<<(MySqlParserID-955))|(1<<(MySqlParserREVERSE_QUOTE_ID-955)))) != 0) {
		{
			p.SetState(4011)
			p.Id_()
		}

	}

	return localctx
}

// ICursor_statementContext is an interface to support dynamic dispatch.
type ICursor_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCursor_statementContext differentiates from other interfaces.
	IsCursor_statementContext()
}

type Cursor_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCursor_statementContext() *Cursor_statementContext {
	var p = new(Cursor_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cursor_statement
	return p
}

func (*Cursor_statementContext) IsCursor_statementContext() {}

func NewCursor_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cursor_statementContext {
	var p = new(Cursor_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cursor_statement

	return p
}

func (s *Cursor_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cursor_statementContext) CLOSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLOSE, 0)
}

func (s *Cursor_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Cursor_statementContext) FETCH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFETCH, 0)
}

func (s *Cursor_statementContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Cursor_statementContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Cursor_statementContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *Cursor_statementContext) NEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEXT, 0)
}

func (s *Cursor_statementContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *Cursor_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cursor_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cursor_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCursor_statement(s)
	}
}

func (s *Cursor_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCursor_statement(s)
	}
}

func (s *Cursor_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCursor_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Cursor_statement() (localctx ICursor_statementContext) {
	localctx = NewCursor_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, MySqlParserRULE_cursor_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4029)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCLOSE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4014)
			p.Match(MySqlParserCLOSE)
		}
		{
			p.SetState(4015)
			p.Id_()
		}

	case MySqlParserFETCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4016)
			p.Match(MySqlParserFETCH)
		}
		p.SetState(4021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserNEXT {
			p.SetState(4018)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserNEXT {
				{
					p.SetState(4017)
					p.Match(MySqlParserNEXT)
				}

			}
			{
				p.SetState(4020)
				p.Match(MySqlParserFROM)
			}

		}
		{
			p.SetState(4023)
			p.Id_()
		}
		{
			p.SetState(4024)
			p.Match(MySqlParserINTO)
		}
		{
			p.SetState(4025)
			p.Id_list()
		}

	case MySqlParserOPEN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4027)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(4028)
			p.Id_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclare_variableContext is an interface to support dynamic dispatch.
type IDeclare_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_variableContext differentiates from other interfaces.
	IsDeclare_variableContext()
}

type Declare_variableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_variableContext() *Declare_variableContext {
	var p = new(Declare_variableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declare_variable
	return p
}

func (*Declare_variableContext) IsDeclare_variableContext() {}

func NewDeclare_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_variableContext {
	var p = new(Declare_variableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declare_variable

	return p
}

func (s *Declare_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_variableContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *Declare_variableContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Declare_variableContext) Data_type() IData_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_typeContext)
}

func (s *Declare_variableContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *Declare_variableContext) Default_value() IDefault_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefault_valueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefault_valueContext)
}

func (s *Declare_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclare_variable(s)
	}
}

func (s *Declare_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclare_variable(s)
	}
}

func (s *Declare_variableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclare_variable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Declare_variable() (localctx IDeclare_variableContext) {
	localctx = NewDeclare_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, MySqlParserRULE_declare_variable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4031)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4032)
		p.Id_list()
	}
	{
		p.SetState(4033)
		p.Data_type()
	}
	p.SetState(4036)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserDEFAULT {
		{
			p.SetState(4034)
			p.Match(MySqlParserDEFAULT)
		}
		{
			p.SetState(4035)
			p.Default_value()
		}

	}

	return localctx
}

// IDeclare_conditionContext is an interface to support dynamic dispatch.
type IDeclare_conditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_conditionContext differentiates from other interfaces.
	IsDeclare_conditionContext()
}

type Declare_conditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_conditionContext() *Declare_conditionContext {
	var p = new(Declare_conditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declare_condition
	return p
}

func (*Declare_conditionContext) IsDeclare_conditionContext() {}

func NewDeclare_conditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_conditionContext {
	var p = new(Declare_conditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declare_condition

	return p
}

func (s *Declare_conditionContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_conditionContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *Declare_conditionContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Declare_conditionContext) CONDITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONDITION, 0)
}

func (s *Declare_conditionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Declare_conditionContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Declare_conditionContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *Declare_conditionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Declare_conditionContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *Declare_conditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_conditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_conditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclare_condition(s)
	}
}

func (s *Declare_conditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclare_condition(s)
	}
}

func (s *Declare_conditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclare_condition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Declare_condition() (localctx IDeclare_conditionContext) {
	localctx = NewDeclare_conditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MySqlParserRULE_declare_condition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4038)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4039)
		p.Id_()
	}
	{
		p.SetState(4040)
		p.Match(MySqlParserCONDITION)
	}
	{
		p.SetState(4041)
		p.Match(MySqlParserFOR)
	}
	p.SetState(4048)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		{
			p.SetState(4042)
			p.Decimal_literal()
		}

	case MySqlParserSQLSTATE:
		{
			p.SetState(4043)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4045)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4044)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4047)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDeclare_cursorContext is an interface to support dynamic dispatch.
type IDeclare_cursorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_cursorContext differentiates from other interfaces.
	IsDeclare_cursorContext()
}

type Declare_cursorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_cursorContext() *Declare_cursorContext {
	var p = new(Declare_cursorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declare_cursor
	return p
}

func (*Declare_cursorContext) IsDeclare_cursorContext() {}

func NewDeclare_cursorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_cursorContext {
	var p = new(Declare_cursorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declare_cursor

	return p
}

func (s *Declare_cursorContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_cursorContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *Declare_cursorContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Declare_cursorContext) CURSOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURSOR, 0)
}

func (s *Declare_cursorContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Declare_cursorContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *Declare_cursorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_cursorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_cursorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclare_cursor(s)
	}
}

func (s *Declare_cursorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclare_cursor(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Declare_cursor() (localctx IDeclare_cursorContext) {
	localctx = NewDeclare_cursorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MySqlParserRULE_declare_cursor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4050)
		p.Match(MySqlParserDECLARE)
	}
	{
		p.SetState(4051)
		p.Id_()
	}
	{
		p.SetState(4052)
		p.Match(MySqlParserCURSOR)
	}
	{
		p.SetState(4053)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4054)
		p.Select_statement()
	}

	return localctx
}

// IDeclare_handlerContext is an interface to support dynamic dispatch.
type IDeclare_handlerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclare_handlerContext differentiates from other interfaces.
	IsDeclare_handlerContext()
}

type Declare_handlerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclare_handlerContext() *Declare_handlerContext {
	var p = new(Declare_handlerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_declare_handler
	return p
}

func (*Declare_handlerContext) IsDeclare_handlerContext() {}

func NewDeclare_handlerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Declare_handlerContext {
	var p = new(Declare_handlerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_declare_handler

	return p
}

func (s *Declare_handlerContext) GetParser() antlr.Parser { return s.parser }

func (s *Declare_handlerContext) DECLARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECLARE, 0)
}

func (s *Declare_handlerContext) HANDLER() antlr.TerminalNode {
	return s.GetToken(MySqlParserHANDLER, 0)
}

func (s *Declare_handlerContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Declare_handlerContext) AllHandler_condition_value() []IHandler_condition_valueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IHandler_condition_valueContext)(nil)).Elem())
	var tst = make([]IHandler_condition_valueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IHandler_condition_valueContext)
		}
	}

	return tst
}

func (s *Declare_handlerContext) Handler_condition_value(i int) IHandler_condition_valueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHandler_condition_valueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IHandler_condition_valueContext)
}

func (s *Declare_handlerContext) Routine_body() IRoutine_bodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRoutine_bodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRoutine_bodyContext)
}

func (s *Declare_handlerContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTINUE, 0)
}

func (s *Declare_handlerContext) EXIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXIT, 0)
}

func (s *Declare_handlerContext) UNDO() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO, 0)
}

func (s *Declare_handlerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Declare_handlerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Declare_handlerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDeclare_handler(s)
	}
}

func (s *Declare_handlerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDeclare_handler(s)
	}
}

func (s *Declare_handlerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDeclare_handler(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Declare_handler() (localctx IDeclare_handlerContext) {
	localctx = NewDeclare_handlerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MySqlParserRULE_declare_handler)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4056)
		p.Match(MySqlParserDECLARE)
	}
	p.SetState(4057)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserCONTINUE || _la == MySqlParserEXIT || _la == MySqlParserUNDO) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(4058)
		p.Match(MySqlParserHANDLER)
	}
	{
		p.SetState(4059)
		p.Match(MySqlParserFOR)
	}
	{
		p.SetState(4060)
		p.Handler_condition_value()
	}
	p.SetState(4065)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4061)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4062)
			p.Handler_condition_value()
		}

		p.SetState(4067)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4068)
		p.Routine_body()
	}

	return localctx
}

// IHandler_condition_valueContext is an interface to support dynamic dispatch.
type IHandler_condition_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHandler_condition_valueContext differentiates from other interfaces.
	IsHandler_condition_valueContext()
}

type Handler_condition_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHandler_condition_valueContext() *Handler_condition_valueContext {
	var p = new(Handler_condition_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_handler_condition_value
	return p
}

func (*Handler_condition_valueContext) IsHandler_condition_valueContext() {}

func NewHandler_condition_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Handler_condition_valueContext {
	var p = new(Handler_condition_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_handler_condition_value

	return p
}

func (s *Handler_condition_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Handler_condition_valueContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Handler_condition_valueContext) SQLSTATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLSTATE, 0)
}

func (s *Handler_condition_valueContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Handler_condition_valueContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *Handler_condition_valueContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Handler_condition_valueContext) SQLWARNING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLWARNING, 0)
}

func (s *Handler_condition_valueContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *Handler_condition_valueContext) FOUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND, 0)
}

func (s *Handler_condition_valueContext) SQLEXCEPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQLEXCEPTION, 0)
}

func (s *Handler_condition_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Handler_condition_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Handler_condition_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHandler_condition_value(s)
	}
}

func (s *Handler_condition_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHandler_condition_value(s)
	}
}

func (s *Handler_condition_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHandler_condition_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Handler_condition_value() (localctx IHandler_condition_valueContext) {
	localctx = NewHandler_condition_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MySqlParserRULE_handler_condition_value)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4081)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4070)
			p.Decimal_literal()
		}

	case MySqlParserSQLSTATE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4071)
			p.Match(MySqlParserSQLSTATE)
		}
		p.SetState(4073)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserVALUE {
			{
				p.SetState(4072)
				p.Match(MySqlParserVALUE)
			}

		}
		{
			p.SetState(4075)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4076)
			p.Id_()
		}

	case MySqlParserSQLWARNING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4077)
			p.Match(MySqlParserSQLWARNING)
		}

	case MySqlParserNOT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4078)
			p.Match(MySqlParserNOT)
		}
		{
			p.SetState(4079)
			p.Match(MySqlParserFOUND)
		}

	case MySqlParserSQLEXCEPTION:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4080)
			p.Match(MySqlParserSQLEXCEPTION)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IProcedure_sql_statementContext is an interface to support dynamic dispatch.
type IProcedure_sql_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsProcedure_sql_statementContext differentiates from other interfaces.
	IsProcedure_sql_statementContext()
}

type Procedure_sql_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProcedure_sql_statementContext() *Procedure_sql_statementContext {
	var p = new(Procedure_sql_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_procedure_sql_statement
	return p
}

func (*Procedure_sql_statementContext) IsProcedure_sql_statementContext() {}

func NewProcedure_sql_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Procedure_sql_statementContext {
	var p = new(Procedure_sql_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_procedure_sql_statement

	return p
}

func (s *Procedure_sql_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Procedure_sql_statementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEMI, 0)
}

func (s *Procedure_sql_statementContext) Compound_statement() ICompound_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompound_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompound_statementContext)
}

func (s *Procedure_sql_statementContext) Sql_statement() ISql_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISql_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISql_statementContext)
}

func (s *Procedure_sql_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Procedure_sql_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Procedure_sql_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterProcedure_sql_statement(s)
	}
}

func (s *Procedure_sql_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitProcedure_sql_statement(s)
	}
}

func (s *Procedure_sql_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitProcedure_sql_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Procedure_sql_statement() (localctx IProcedure_sql_statementContext) {
	localctx = NewProcedure_sql_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MySqlParserRULE_procedure_sql_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4085)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 597, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(4083)
			p.Compound_statement()
		}

	case 2:
		{
			p.SetState(4084)
			p.Sql_statement()
		}

	}
	{
		p.SetState(4087)
		p.Match(MySqlParserSEMI)
	}

	return localctx
}

// IAlter_userContext is an interface to support dynamic dispatch.
type IAlter_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlter_userContext differentiates from other interfaces.
	IsAlter_userContext()
}

type Alter_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlter_userContext() *Alter_userContext {
	var p = new(Alter_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_alter_user
	return p
}

func (*Alter_userContext) IsAlter_userContext() {}

func NewAlter_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Alter_userContext {
	var p = new(Alter_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_alter_user

	return p
}

func (s *Alter_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Alter_userContext) CopyFrom(ctx *Alter_userContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Alter_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Alter_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AlterUserMysql57Context struct {
	*Alter_userContext
}

func NewAlterUserMysql57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysql57Context {
	var p = new(AlterUserMysql57Context)

	p.Alter_userContext = NewEmptyAlter_userContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_userContext))

	return p
}

func (s *AlterUserMysql57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysql57Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysql57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysql57Context) AllUser_auth_option() []IUser_auth_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem())
	var tst = make([]IUser_auth_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_auth_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql57Context) User_auth_option(i int) IUser_auth_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_auth_optionContext)
}

func (s *AlterUserMysql57Context) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *AlterUserMysql57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *AlterUserMysql57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AlterUserMysql57Context) AllUser_password_option() []IUser_password_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem())
	var tst = make([]IUser_password_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_password_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql57Context) User_password_option(i int) IUser_password_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_password_optionContext)
}

func (s *AlterUserMysql57Context) AllUser_lock_option() []IUser_lock_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_lock_optionContext)(nil)).Elem())
	var tst = make([]IUser_lock_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_lock_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql57Context) User_lock_option(i int) IUser_lock_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_lock_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_lock_optionContext)
}

func (s *AlterUserMysql57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *AlterUserMysql57Context) AllTls_option() []ITls_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITls_optionContext)(nil)).Elem())
	var tst = make([]ITls_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITls_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql57Context) Tls_option(i int) ITls_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITls_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITls_optionContext)
}

func (s *AlterUserMysql57Context) AllUser_resource_option() []IUser_resource_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem())
	var tst = make([]IUser_resource_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_resource_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql57Context) User_resource_option(i int) IUser_resource_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_resource_optionContext)
}

func (s *AlterUserMysql57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *AlterUserMysql57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *AlterUserMysql57Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterUserMysql57(s)
	}
}

func (s *AlterUserMysql57Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterUserMysql57(s)
	}
}

func (s *AlterUserMysql57Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterUserMysql57(s)

	default:
		return t.VisitChildren(s)
	}
}

type AlterUserMysql56Context struct {
	*Alter_userContext
}

func NewAlterUserMysql56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *AlterUserMysql56Context {
	var p = new(AlterUserMysql56Context)

	p.Alter_userContext = NewEmptyAlter_userContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Alter_userContext))

	return p
}

func (s *AlterUserMysql56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlterUserMysql56Context) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *AlterUserMysql56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *AlterUserMysql56Context) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *AlterUserMysql56Context) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *AlterUserMysql56Context) AllUser_password_option() []IUser_password_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem())
	var tst = make([]IUser_password_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_password_optionContext)
		}
	}

	return tst
}

func (s *AlterUserMysql56Context) User_password_option(i int) IUser_password_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_password_optionContext)
}

func (s *AlterUserMysql56Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAlterUserMysql56(s)
	}
}

func (s *AlterUserMysql56Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAlterUserMysql56(s)
	}
}

func (s *AlterUserMysql56Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAlterUserMysql56(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Alter_user() (localctx IAlter_userContext) {
	localctx = NewAlter_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MySqlParserRULE_alter_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4146)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 609, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAlterUserMysql56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4089)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4090)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4091)
			p.User_name()
		}
		{
			p.SetState(4092)
			p.User_password_option()
		}
		p.SetState(4099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4093)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4094)
				p.User_name()
			}
			{
				p.SetState(4095)
				p.User_password_option()
			}

			p.SetState(4101)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewAlterUserMysql57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4102)
			p.Match(MySqlParserALTER)
		}
		{
			p.SetState(4103)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4104)
				p.If_exists()
			}

		}
		{
			p.SetState(4107)
			p.User_auth_option()
		}
		p.SetState(4112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4108)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4109)
				p.User_auth_option()
			}

			p.SetState(4114)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4129)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4115)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4127)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4116)
					p.Match(MySqlParserNONE)
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4117)
					p.Tls_option()
				}
				p.SetState(4124)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4119)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4118)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4121)
						p.Tls_option()
					}

					p.SetState(4126)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4137)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4131)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4133)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391)))) != 0) {
				{
					p.SetState(4132)
					p.User_resource_option()
				}

				p.SetState(4135)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4141)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4139)
					p.User_password_option()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4140)
					p.User_lock_option()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4145)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// ICreate_userContext is an interface to support dynamic dispatch.
type ICreate_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_userContext differentiates from other interfaces.
	IsCreate_userContext()
}

type Create_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_userContext() *Create_userContext {
	var p = new(Create_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_user
	return p
}

func (*Create_userContext) IsCreate_userContext() {}

func NewCreate_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_userContext {
	var p = new(Create_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_user

	return p
}

func (s *Create_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_userContext) CopyFrom(ctx *Create_userContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Create_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type CreateUserMysql57Context struct {
	*Create_userContext
}

func NewCreateUserMysql57Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysql57Context {
	var p = new(CreateUserMysql57Context)

	p.Create_userContext = NewEmptyCreate_userContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Create_userContext))

	return p
}

func (s *CreateUserMysql57Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysql57Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysql57Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysql57Context) AllUser_auth_option() []IUser_auth_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem())
	var tst = make([]IUser_auth_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_auth_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql57Context) User_auth_option(i int) IUser_auth_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_auth_optionContext)
}

func (s *CreateUserMysql57Context) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *CreateUserMysql57Context) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *CreateUserMysql57Context) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *CreateUserMysql57Context) AllUser_password_option() []IUser_password_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem())
	var tst = make([]IUser_password_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_password_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql57Context) User_password_option(i int) IUser_password_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_password_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_password_optionContext)
}

func (s *CreateUserMysql57Context) AllUser_lock_option() []IUser_lock_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_lock_optionContext)(nil)).Elem())
	var tst = make([]IUser_lock_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_lock_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql57Context) User_lock_option(i int) IUser_lock_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_lock_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_lock_optionContext)
}

func (s *CreateUserMysql57Context) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *CreateUserMysql57Context) AllTls_option() []ITls_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITls_optionContext)(nil)).Elem())
	var tst = make([]ITls_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITls_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql57Context) Tls_option(i int) ITls_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITls_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITls_optionContext)
}

func (s *CreateUserMysql57Context) AllUser_resource_option() []IUser_resource_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem())
	var tst = make([]IUser_resource_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_resource_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql57Context) User_resource_option(i int) IUser_resource_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_resource_optionContext)
}

func (s *CreateUserMysql57Context) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *CreateUserMysql57Context) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *CreateUserMysql57Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateUserMysql57(s)
	}
}

func (s *CreateUserMysql57Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateUserMysql57(s)
	}
}

func (s *CreateUserMysql57Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateUserMysql57(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateUserMysql56Context struct {
	*Create_userContext
}

func NewCreateUserMysql56Context(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateUserMysql56Context {
	var p = new(CreateUserMysql56Context)

	p.Create_userContext = NewEmptyCreate_userContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Create_userContext))

	return p
}

func (s *CreateUserMysql56Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateUserMysql56Context) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *CreateUserMysql56Context) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *CreateUserMysql56Context) AllUser_auth_option() []IUser_auth_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem())
	var tst = make([]IUser_auth_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_auth_optionContext)
		}
	}

	return tst
}

func (s *CreateUserMysql56Context) User_auth_option(i int) IUser_auth_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_auth_optionContext)
}

func (s *CreateUserMysql56Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreateUserMysql56(s)
	}
}

func (s *CreateUserMysql56Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreateUserMysql56(s)
	}
}

func (s *CreateUserMysql56Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreateUserMysql56(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_user() (localctx ICreate_userContext) {
	localctx = NewCreate_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MySqlParserRULE_create_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4202)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 621, p.GetParserRuleContext()) {
	case 1:
		localctx = NewCreateUserMysql56Context(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4148)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4149)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4150)
			p.User_auth_option()
		}
		p.SetState(4155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4151)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4152)
				p.User_auth_option()
			}

			p.SetState(4157)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewCreateUserMysql57Context(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4158)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4159)
			p.Match(MySqlParserUSER)
		}
		p.SetState(4161)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4160)
				p.If_not_exists()
			}

		}
		{
			p.SetState(4163)
			p.User_auth_option()
		}
		p.SetState(4168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4164)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4165)
				p.User_auth_option()
			}

			p.SetState(4170)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserREQUIRE {
			{
				p.SetState(4171)
				p.Match(MySqlParserREQUIRE)
			}
			p.SetState(4183)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserNONE:
				{
					p.SetState(4172)
					p.Match(MySqlParserNONE)
				}

			case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
				{
					p.SetState(4173)
					p.Tls_option()
				}
				p.SetState(4180)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
					p.SetState(4175)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					if _la == MySqlParserAND {
						{
							p.SetState(4174)
							p.Match(MySqlParserAND)
						}

					}
					{
						p.SetState(4177)
						p.Tls_option()
					}

					p.SetState(4182)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(4193)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4187)
				p.Match(MySqlParserWITH)
			}
			p.SetState(4189)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ok := true; ok; ok = (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391)))) != 0) {
				{
					p.SetState(4188)
					p.User_resource_option()
				}

				p.SetState(4191)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(4199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserACCOUNT || _la == MySqlParserPASSWORD {
			p.SetState(4197)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserPASSWORD:
				{
					p.SetState(4195)
					p.User_password_option()
				}

			case MySqlParserACCOUNT:
				{
					p.SetState(4196)
					p.User_lock_option()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4201)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IDrop_userContext is an interface to support dynamic dispatch.
type IDrop_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDrop_userContext differentiates from other interfaces.
	IsDrop_userContext()
}

type Drop_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDrop_userContext() *Drop_userContext {
	var p = new(Drop_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_drop_user
	return p
}

func (*Drop_userContext) IsDrop_userContext() {}

func NewDrop_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Drop_userContext {
	var p = new(Drop_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_drop_user

	return p
}

func (s *Drop_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Drop_userContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *Drop_userContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *Drop_userContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Drop_userContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Drop_userContext) If_exists() IIf_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_existsContext)
}

func (s *Drop_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Drop_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Drop_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDrop_user(s)
	}
}

func (s *Drop_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDrop_user(s)
	}
}

func (s *Drop_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDrop_user(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Drop_user() (localctx IDrop_userContext) {
	localctx = NewDrop_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MySqlParserRULE_drop_user)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4204)
		p.Match(MySqlParserDROP)
	}
	{
		p.SetState(4205)
		p.Match(MySqlParserUSER)
	}
	p.SetState(4207)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIF {
		{
			p.SetState(4206)
			p.If_exists()
		}

	}
	{
		p.SetState(4209)
		p.User_name()
	}
	p.SetState(4214)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4210)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4211)
			p.User_name()
		}

		p.SetState(4216)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IGrant_statementContext is an interface to support dynamic dispatch.
type IGrant_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPriv_obj_type returns the priv_obj_type token.
	GetPriv_obj_type() antlr.Token

	// SetPriv_obj_type sets the priv_obj_type token.
	SetPriv_obj_type(antlr.Token)

	// IsGrant_statementContext differentiates from other interfaces.
	IsGrant_statementContext()
}

type Grant_statementContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	priv_obj_type antlr.Token
}

func NewEmptyGrant_statementContext() *Grant_statementContext {
	var p = new(Grant_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grant_statement
	return p
}

func (*Grant_statementContext) IsGrant_statementContext() {}

func NewGrant_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_statementContext {
	var p = new(Grant_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grant_statement

	return p
}

func (s *Grant_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_statementContext) GetPriv_obj_type() antlr.Token { return s.priv_obj_type }

func (s *Grant_statementContext) SetPriv_obj_type(v antlr.Token) { s.priv_obj_type = v }

func (s *Grant_statementContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *Grant_statementContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *Grant_statementContext) AllPrivelege_clause() []IPrivelege_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelege_clauseContext)(nil)).Elem())
	var tst = make([]IPrivelege_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelege_clauseContext)
		}
	}

	return tst
}

func (s *Grant_statementContext) Privelege_clause(i int) IPrivelege_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelege_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelege_clauseContext)
}

func (s *Grant_statementContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Grant_statementContext) Privilege_level() IPrivilege_levelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilege_levelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilege_levelContext)
}

func (s *Grant_statementContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Grant_statementContext) AllUser_auth_option() []IUser_auth_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem())
	var tst = make([]IUser_auth_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_auth_optionContext)
		}
	}

	return tst
}

func (s *Grant_statementContext) User_auth_option(i int) IUser_auth_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_auth_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_auth_optionContext)
}

func (s *Grant_statementContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREQUIRE, 0)
}

func (s *Grant_statementContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Grant_statementContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Grant_statementContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Grant_statementContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *Grant_statementContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *Grant_statementContext) AllTls_option() []ITls_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITls_optionContext)(nil)).Elem())
	var tst = make([]ITls_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITls_optionContext)
		}
	}

	return tst
}

func (s *Grant_statementContext) Tls_option(i int) ITls_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITls_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITls_optionContext)
}

func (s *Grant_statementContext) AllOPTION() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserOPTION)
}

func (s *Grant_statementContext) OPTION(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, i)
}

func (s *Grant_statementContext) AllUser_resource_option() []IUser_resource_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem())
	var tst = make([]IUser_resource_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_resource_optionContext)
		}
	}

	return tst
}

func (s *Grant_statementContext) User_resource_option(i int) IUser_resource_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_resource_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_resource_optionContext)
}

func (s *Grant_statementContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserAND)
}

func (s *Grant_statementContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, i)
}

func (s *Grant_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGrant_statement(s)
	}
}

func (s *Grant_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGrant_statement(s)
	}
}

func (s *Grant_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGrant_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Grant_statement() (localctx IGrant_statementContext) {
	localctx = NewGrant_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MySqlParserRULE_grant_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4217)
		p.Match(MySqlParserGRANT)
	}
	{
		p.SetState(4218)
		p.Privelege_clause()
	}
	p.SetState(4223)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4219)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4220)
			p.Privelege_clause()
		}

		p.SetState(4225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(4226)
		p.Match(MySqlParserON)
	}
	p.SetState(4228)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 625, p.GetParserRuleContext()) == 1 {
		p.SetState(4227)

		var _lt = p.GetTokenStream().LT(1)

		localctx.(*Grant_statementContext).priv_obj_type = _lt

		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
			var _ri = p.GetErrorHandler().RecoverInline(p)

			localctx.(*Grant_statementContext).priv_obj_type = _ri
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(4230)
		p.Privilege_level()
	}
	{
		p.SetState(4231)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4232)
		p.User_auth_option()
	}
	p.SetState(4237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4233)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4234)
			p.User_auth_option()
		}

		p.SetState(4239)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4254)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserREQUIRE {
		{
			p.SetState(4240)
			p.Match(MySqlParserREQUIRE)
		}
		p.SetState(4252)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserNONE:
			{
				p.SetState(4241)
				p.Match(MySqlParserNONE)
			}

		case MySqlParserSSL, MySqlParserCIPHER, MySqlParserISSUER, MySqlParserSUBJECT, MySqlParserX509:
			{
				p.SetState(4242)
				p.Tls_option()
			}
			p.SetState(4249)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserAND || _la == MySqlParserSSL || _la == MySqlParserCIPHER || _la == MySqlParserISSUER || _la == MySqlParserSUBJECT || _la == MySqlParserX509 {
				p.SetState(4244)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserAND {
					{
						p.SetState(4243)
						p.Match(MySqlParserAND)
					}

				}
				{
					p.SetState(4246)
					p.Tls_option()
				}

				p.SetState(4251)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}
	p.SetState(4265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(4256)
			p.Match(MySqlParserWITH)
		}
		p.SetState(4262)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserGRANT || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391)))) != 0) {
			p.SetState(4260)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MySqlParserGRANT:
				{
					p.SetState(4257)
					p.Match(MySqlParserGRANT)
				}
				{
					p.SetState(4258)
					p.Match(MySqlParserOPTION)
				}

			case MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS:
				{
					p.SetState(4259)
					p.User_resource_option()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(4264)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IGrant_proxyContext is an interface to support dynamic dispatch.
type IGrant_proxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGrant_proxyContext differentiates from other interfaces.
	IsGrant_proxyContext()
}

type Grant_proxyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGrant_proxyContext() *Grant_proxyContext {
	var p = new(Grant_proxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_grant_proxy
	return p
}

func (*Grant_proxyContext) IsGrant_proxyContext() {}

func NewGrant_proxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Grant_proxyContext {
	var p = new(Grant_proxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_grant_proxy

	return p
}

func (s *Grant_proxyContext) GetParser() antlr.Parser { return s.parser }

func (s *Grant_proxyContext) AllGRANT() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserGRANT)
}

func (s *Grant_proxyContext) GRANT(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, i)
}

func (s *Grant_proxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *Grant_proxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Grant_proxyContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Grant_proxyContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Grant_proxyContext) TO() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, 0)
}

func (s *Grant_proxyContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Grant_proxyContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *Grant_proxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Grant_proxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Grant_proxyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGrant_proxy(s)
	}
}

func (s *Grant_proxyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGrant_proxy(s)
	}
}

func (s *Grant_proxyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGrant_proxy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Grant_proxy() (localctx IGrant_proxyContext) {
	localctx = NewGrant_proxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MySqlParserRULE_grant_proxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4267)
		p.Match(MySqlParserGRANT)
	}
	{
		p.SetState(4268)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4269)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4270)
		p.User_name()
	}
	{
		p.SetState(4271)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4272)
		p.User_name()
	}
	p.SetState(4277)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4273)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4274)
			p.User_name()
		}

		p.SetState(4279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4283)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserWITH {
		{
			p.SetState(4280)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4281)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4282)
			p.Match(MySqlParserOPTION)
		}

	}

	return localctx
}

// IRename_userContext is an interface to support dynamic dispatch.
type IRename_userContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRename_userContext differentiates from other interfaces.
	IsRename_userContext()
}

type Rename_userContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRename_userContext() *Rename_userContext {
	var p = new(Rename_userContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_rename_user
	return p
}

func (*Rename_userContext) IsRename_userContext() {}

func NewRename_userContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Rename_userContext {
	var p = new(Rename_userContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_rename_user

	return p
}

func (s *Rename_userContext) GetParser() antlr.Parser { return s.parser }

func (s *Rename_userContext) RENAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserRENAME, 0)
}

func (s *Rename_userContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *Rename_userContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Rename_userContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Rename_userContext) AllTO() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTO)
}

func (s *Rename_userContext) TO(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTO, i)
}

func (s *Rename_userContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Rename_userContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Rename_userContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRename_user(s)
	}
}

func (s *Rename_userContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRename_user(s)
	}
}

func (s *Rename_userContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRename_user(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Rename_user() (localctx IRename_userContext) {
	localctx = NewRename_userContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MySqlParserRULE_rename_user)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4285)
		p.Match(MySqlParserRENAME)
	}
	{
		p.SetState(4286)
		p.Match(MySqlParserUSER)
	}
	{
		p.SetState(4287)
		p.User_name()
	}
	{
		p.SetState(4288)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4289)
		p.User_name()
	}

	{
		p.SetState(4290)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(4291)
		p.User_name()
	}
	{
		p.SetState(4292)
		p.Match(MySqlParserTO)
	}
	{
		p.SetState(4293)
		p.User_name()
	}

	return localctx
}

// IRevoke_statementContext is an interface to support dynamic dispatch.
type IRevoke_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_statementContext differentiates from other interfaces.
	IsRevoke_statementContext()
}

type Revoke_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_statementContext() *Revoke_statementContext {
	var p = new(Revoke_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revoke_statement
	return p
}

func (*Revoke_statementContext) IsRevoke_statementContext() {}

func NewRevoke_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_statementContext {
	var p = new(Revoke_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revoke_statement

	return p
}

func (s *Revoke_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_statementContext) CopyFrom(ctx *Revoke_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Revoke_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DetailRevokeContext struct {
	*Revoke_statementContext
	priv_obj_type antlr.Token
}

func NewDetailRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DetailRevokeContext {
	var p = new(DetailRevokeContext)

	p.Revoke_statementContext = NewEmptyRevoke_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Revoke_statementContext))

	return p
}

func (s *DetailRevokeContext) GetPriv_obj_type() antlr.Token { return s.priv_obj_type }

func (s *DetailRevokeContext) SetPriv_obj_type(v antlr.Token) { s.priv_obj_type = v }

func (s *DetailRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DetailRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *DetailRevokeContext) AllPrivelege_clause() []IPrivelege_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPrivelege_clauseContext)(nil)).Elem())
	var tst = make([]IPrivelege_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPrivelege_clauseContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) Privelege_clause(i int) IPrivelege_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivelege_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPrivelege_clauseContext)
}

func (s *DetailRevokeContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *DetailRevokeContext) Privilege_level() IPrivilege_levelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilege_levelContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilege_levelContext)
}

func (s *DetailRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *DetailRevokeContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *DetailRevokeContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *DetailRevokeContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *DetailRevokeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *DetailRevokeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *DetailRevokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDetailRevoke(s)
	}
}

func (s *DetailRevokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDetailRevoke(s)
	}
}

func (s *DetailRevokeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDetailRevoke(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShortRevokeContext struct {
	*Revoke_statementContext
}

func NewShortRevokeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShortRevokeContext {
	var p = new(ShortRevokeContext)

	p.Revoke_statementContext = NewEmptyRevoke_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Revoke_statementContext))

	return p
}

func (s *ShortRevokeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortRevokeContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *ShortRevokeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *ShortRevokeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *ShortRevokeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *ShortRevokeContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShortRevokeContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *ShortRevokeContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *ShortRevokeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShortRevokeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShortRevoke(s)
	}
}

func (s *ShortRevokeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShortRevoke(s)
	}
}

func (s *ShortRevokeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShortRevoke(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Revoke_statement() (localctx IRevoke_statementContext) {
	localctx = NewRevoke_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, MySqlParserRULE_revoke_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4335)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 641, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDetailRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4295)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4296)
			p.Privelege_clause()
		}
		p.SetState(4301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4297)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4298)
				p.Privelege_clause()
			}

			p.SetState(4303)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(4304)
			p.Match(MySqlParserON)
		}
		p.SetState(4306)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 637, p.GetParserRuleContext()) == 1 {
			p.SetState(4305)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*DetailRevokeContext).priv_obj_type = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserFUNCTION) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*DetailRevokeContext).priv_obj_type = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4308)
			p.Privilege_level()
		}
		{
			p.SetState(4309)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4310)
			p.User_name()
		}
		p.SetState(4315)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4311)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4312)
				p.User_name()
			}

			p.SetState(4317)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewShortRevokeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4318)
			p.Match(MySqlParserREVOKE)
		}
		{
			p.SetState(4319)
			p.Match(MySqlParserALL)
		}
		p.SetState(4321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4320)
				p.Match(MySqlParserPRIVILEGES)
			}

		}
		{
			p.SetState(4323)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4324)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4325)
			p.Match(MySqlParserOPTION)
		}
		{
			p.SetState(4326)
			p.Match(MySqlParserFROM)
		}
		{
			p.SetState(4327)
			p.User_name()
		}
		p.SetState(4332)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4328)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4329)
				p.User_name()
			}

			p.SetState(4334)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}

	return localctx
}

// IRevoke_proxyContext is an interface to support dynamic dispatch.
type IRevoke_proxyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevoke_proxyContext differentiates from other interfaces.
	IsRevoke_proxyContext()
}

type Revoke_proxyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevoke_proxyContext() *Revoke_proxyContext {
	var p = new(Revoke_proxyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_revoke_proxy
	return p
}

func (*Revoke_proxyContext) IsRevoke_proxyContext() {}

func NewRevoke_proxyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Revoke_proxyContext {
	var p = new(Revoke_proxyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_revoke_proxy

	return p
}

func (s *Revoke_proxyContext) GetParser() antlr.Parser { return s.parser }

func (s *Revoke_proxyContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVOKE, 0)
}

func (s *Revoke_proxyContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *Revoke_proxyContext) ON() antlr.TerminalNode {
	return s.GetToken(MySqlParserON, 0)
}

func (s *Revoke_proxyContext) AllUser_name() []IUser_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUser_nameContext)(nil)).Elem())
	var tst = make([]IUser_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUser_nameContext)
		}
	}

	return tst
}

func (s *Revoke_proxyContext) User_name(i int) IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Revoke_proxyContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *Revoke_proxyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Revoke_proxyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Revoke_proxyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRevoke_proxy(s)
	}
}

func (s *Revoke_proxyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRevoke_proxy(s)
	}
}

func (s *Revoke_proxyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRevoke_proxy(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Revoke_proxy() (localctx IRevoke_proxyContext) {
	localctx = NewRevoke_proxyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, MySqlParserRULE_revoke_proxy)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4337)
		p.Match(MySqlParserREVOKE)
	}
	{
		p.SetState(4338)
		p.Match(MySqlParserPROXY)
	}
	{
		p.SetState(4339)
		p.Match(MySqlParserON)
	}
	{
		p.SetState(4340)
		p.User_name()
	}
	{
		p.SetState(4341)
		p.Match(MySqlParserFROM)
	}
	{
		p.SetState(4342)
		p.User_name()
	}
	p.SetState(4347)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4343)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4344)
			p.User_name()
		}

		p.SetState(4349)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISet_password_statementContext is an interface to support dynamic dispatch.
type ISet_password_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_password_statementContext differentiates from other interfaces.
	IsSet_password_statementContext()
}

type Set_password_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_password_statementContext() *Set_password_statementContext {
	var p = new(Set_password_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_set_password_statement
	return p
}

func (*Set_password_statementContext) IsSet_password_statementContext() {}

func NewSet_password_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_password_statementContext {
	var p = new(Set_password_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_set_password_statement

	return p
}

func (s *Set_password_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_password_statementContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Set_password_statementContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *Set_password_statementContext) Set_password_option() ISet_password_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_password_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_password_optionContext)
}

func (s *Set_password_statementContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Set_password_statementContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *Set_password_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_password_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_password_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSet_password_statement(s)
	}
}

func (s *Set_password_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSet_password_statement(s)
	}
}

func (s *Set_password_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSet_password_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Set_password_statement() (localctx ISet_password_statementContext) {
	localctx = NewSet_password_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, MySqlParserRULE_set_password_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4350)
		p.Match(MySqlParserSET)
	}
	{
		p.SetState(4351)
		p.Match(MySqlParserPASSWORD)
	}
	p.SetState(4354)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserFOR {
		{
			p.SetState(4352)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4353)
			p.User_name()
		}

	}
	{
		p.SetState(4356)
		p.Match(MySqlParserEQUAL_SYMBOL)
	}
	{
		p.SetState(4357)
		p.Set_password_option()
	}

	return localctx
}

// IUser_password_optionContext is an interface to support dynamic dispatch.
type IUser_password_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_password_optionContext differentiates from other interfaces.
	IsUser_password_optionContext()
}

type User_password_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_password_optionContext() *User_password_optionContext {
	var p = new(User_password_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_password_option
	return p
}

func (*User_password_optionContext) IsUser_password_optionContext() {}

func NewUser_password_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_password_optionContext {
	var p = new(User_password_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_password_option

	return p
}

func (s *User_password_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_password_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *User_password_optionContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *User_password_optionContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *User_password_optionContext) NEVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNEVER, 0)
}

func (s *User_password_optionContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *User_password_optionContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *User_password_optionContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *User_password_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_password_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *User_password_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUser_password_option(s)
	}
}

func (s *User_password_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUser_password_option(s)
	}
}

func (s *User_password_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUser_password_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_password_option() (localctx IUser_password_optionContext) {
	localctx = NewUser_password_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, MySqlParserRULE_user_password_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4359)
		p.Match(MySqlParserPASSWORD)
	}
	{
		p.SetState(4360)
		p.Match(MySqlParserEXPIRE)
	}
	p.SetState(4367)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDEFAULT:
		{
			p.SetState(4361)
			p.Match(MySqlParserDEFAULT)
		}

	case MySqlParserNEVER:
		{
			p.SetState(4362)
			p.Match(MySqlParserNEVER)
		}

	case MySqlParserINTERVAL:
		{
			p.SetState(4363)
			p.Match(MySqlParserINTERVAL)
		}
		{
			p.SetState(4364)
			p.Decimal_literal()
		}
		{
			p.SetState(4365)
			p.Match(MySqlParserDAY)
		}

	case MySqlParserEOF, MySqlParserACCOUNT, MySqlParserPASSWORD, MySqlParserMINUS, MySqlParserCOMMA, MySqlParserSEMI:

	default:
	}

	return localctx
}

// IUser_auth_optionContext is an interface to support dynamic dispatch.
type IUser_auth_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_auth_optionContext differentiates from other interfaces.
	IsUser_auth_optionContext()
}

type User_auth_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_auth_optionContext() *User_auth_optionContext {
	var p = new(User_auth_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_auth_option
	return p
}

func (*User_auth_optionContext) IsUser_auth_optionContext() {}

func NewUser_auth_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_auth_optionContext {
	var p = new(User_auth_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_auth_option

	return p
}

func (s *User_auth_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_auth_optionContext) CopyFrom(ctx *User_auth_optionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *User_auth_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_auth_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type AuthByStringContext struct {
	*User_auth_optionContext
}

func NewAuthByStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AuthByStringContext {
	var p = new(AuthByStringContext)

	p.User_auth_optionContext = NewEmptyUser_auth_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*User_auth_optionContext))

	return p
}

func (s *AuthByStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthByStringContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *AuthByStringContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *AuthByStringContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AuthByStringContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AuthByStringContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AuthByStringContext) Auth_plugin() IAuth_pluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuth_pluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuth_pluginContext)
}

func (s *AuthByStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAuthByString(s)
	}
}

func (s *AuthByStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAuthByString(s)
	}
}

func (s *AuthByStringContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAuthByString(s)

	default:
		return t.VisitChildren(s)
	}
}

type AuthByPasswordContext struct {
	*User_auth_optionContext
	hashedpwd antlr.Token
}

func NewAuthByPasswordContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AuthByPasswordContext {
	var p = new(AuthByPasswordContext)

	p.User_auth_optionContext = NewEmptyUser_auth_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*User_auth_optionContext))

	return p
}

func (s *AuthByPasswordContext) GetHashedpwd() antlr.Token { return s.hashedpwd }

func (s *AuthByPasswordContext) SetHashedpwd(v antlr.Token) { s.hashedpwd = v }

func (s *AuthByPasswordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthByPasswordContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *AuthByPasswordContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *AuthByPasswordContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *AuthByPasswordContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *AuthByPasswordContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AuthByPasswordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAuthByPassword(s)
	}
}

func (s *AuthByPasswordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAuthByPassword(s)
	}
}

func (s *AuthByPasswordContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAuthByPassword(s)

	default:
		return t.VisitChildren(s)
	}
}

type AuthByHashContext struct {
	*User_auth_optionContext
}

func NewAuthByHashContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AuthByHashContext {
	var p = new(AuthByHashContext)

	p.User_auth_optionContext = NewEmptyUser_auth_optionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*User_auth_optionContext))

	return p
}

func (s *AuthByHashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AuthByHashContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *AuthByHashContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *AuthByHashContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *AuthByHashContext) Auth_plugin() IAuth_pluginContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAuth_pluginContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAuth_pluginContext)
}

func (s *AuthByHashContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *AuthByHashContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *AuthByHashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAuthByHash(s)
	}
}

func (s *AuthByHashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAuthByHash(s)
	}
}

func (s *AuthByHashContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAuthByHash(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_auth_option() (localctx IUser_auth_optionContext) {
	localctx = NewUser_auth_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, MySqlParserRULE_user_auth_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4392)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 647, p.GetParserRuleContext()) {
	case 1:
		localctx = NewAuthByPasswordContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4369)
			p.User_name()
		}
		{
			p.SetState(4370)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4371)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4372)
			p.Match(MySqlParserPASSWORD)
		}
		{
			p.SetState(4373)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*AuthByPasswordContext).hashedpwd = _m
		}

	case 2:
		localctx = NewAuthByStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4375)
			p.User_name()
		}
		{
			p.SetState(4376)
			p.Match(MySqlParserIDENTIFIED)
		}
		p.SetState(4379)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4377)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4378)
				p.Auth_plugin()
			}

		}
		{
			p.SetState(4381)
			p.Match(MySqlParserBY)
		}
		{
			p.SetState(4382)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case 3:
		localctx = NewAuthByHashContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4384)
			p.User_name()
		}
		{
			p.SetState(4385)
			p.Match(MySqlParserIDENTIFIED)
		}
		{
			p.SetState(4386)
			p.Match(MySqlParserWITH)
		}
		{
			p.SetState(4387)
			p.Auth_plugin()
		}
		p.SetState(4390)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(4388)
				p.Match(MySqlParserAS)
			}
			{
				p.SetState(4389)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	}

	return localctx
}

// ITls_optionContext is an interface to support dynamic dispatch.
type ITls_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTls_optionContext differentiates from other interfaces.
	IsTls_optionContext()
}

type Tls_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTls_optionContext() *Tls_optionContext {
	var p = new(Tls_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tls_option
	return p
}

func (*Tls_optionContext) IsTls_optionContext() {}

func NewTls_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tls_optionContext {
	var p = new(Tls_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tls_option

	return p
}

func (s *Tls_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Tls_optionContext) SSL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSSL, 0)
}

func (s *Tls_optionContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *Tls_optionContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *Tls_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Tls_optionContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *Tls_optionContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *Tls_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tls_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tls_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTls_option(s)
	}
}

func (s *Tls_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTls_option(s)
	}
}

func (s *Tls_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTls_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Tls_option() (localctx ITls_optionContext) {
	localctx = NewTls_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, MySqlParserRULE_tls_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4402)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSSL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4394)
			p.Match(MySqlParserSSL)
		}

	case MySqlParserX509:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4395)
			p.Match(MySqlParserX509)
		}

	case MySqlParserCIPHER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4396)
			p.Match(MySqlParserCIPHER)
		}
		{
			p.SetState(4397)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserISSUER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4398)
			p.Match(MySqlParserISSUER)
		}
		{
			p.SetState(4399)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserSUBJECT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4400)
			p.Match(MySqlParserSUBJECT)
		}
		{
			p.SetState(4401)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUser_resource_optionContext is an interface to support dynamic dispatch.
type IUser_resource_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_resource_optionContext differentiates from other interfaces.
	IsUser_resource_optionContext()
}

type User_resource_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_resource_optionContext() *User_resource_optionContext {
	var p = new(User_resource_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_resource_option
	return p
}

func (*User_resource_optionContext) IsUser_resource_optionContext() {}

func NewUser_resource_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_resource_optionContext {
	var p = new(User_resource_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_resource_option

	return p
}

func (s *User_resource_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_resource_optionContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *User_resource_optionContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *User_resource_optionContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *User_resource_optionContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *User_resource_optionContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *User_resource_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_resource_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *User_resource_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUser_resource_option(s)
	}
}

func (s *User_resource_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUser_resource_option(s)
	}
}

func (s *User_resource_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUser_resource_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_resource_option() (localctx IUser_resource_optionContext) {
	localctx = NewUser_resource_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 380, MySqlParserRULE_user_resource_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4412)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserMAX_QUERIES_PER_HOUR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4404)
			p.Match(MySqlParserMAX_QUERIES_PER_HOUR)
		}
		{
			p.SetState(4405)
			p.Decimal_literal()
		}

	case MySqlParserMAX_UPDATES_PER_HOUR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4406)
			p.Match(MySqlParserMAX_UPDATES_PER_HOUR)
		}
		{
			p.SetState(4407)
			p.Decimal_literal()
		}

	case MySqlParserMAX_CONNECTIONS_PER_HOUR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4408)
			p.Match(MySqlParserMAX_CONNECTIONS_PER_HOUR)
		}
		{
			p.SetState(4409)
			p.Decimal_literal()
		}

	case MySqlParserMAX_USER_CONNECTIONS:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4410)
			p.Match(MySqlParserMAX_USER_CONNECTIONS)
		}
		{
			p.SetState(4411)
			p.Decimal_literal()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IUser_lock_optionContext is an interface to support dynamic dispatch.
type IUser_lock_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_lock_optionContext differentiates from other interfaces.
	IsUser_lock_optionContext()
}

type User_lock_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_lock_optionContext() *User_lock_optionContext {
	var p = new(User_lock_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_lock_option
	return p
}

func (*User_lock_optionContext) IsUser_lock_optionContext() {}

func NewUser_lock_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_lock_optionContext {
	var p = new(User_lock_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_lock_option

	return p
}

func (s *User_lock_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *User_lock_optionContext) ACCOUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserACCOUNT, 0)
}

func (s *User_lock_optionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *User_lock_optionContext) UNLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNLOCK, 0)
}

func (s *User_lock_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_lock_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *User_lock_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUser_lock_option(s)
	}
}

func (s *User_lock_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUser_lock_option(s)
	}
}

func (s *User_lock_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUser_lock_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_lock_option() (localctx IUser_lock_optionContext) {
	localctx = NewUser_lock_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 382, MySqlParserRULE_user_lock_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4414)
		p.Match(MySqlParserACCOUNT)
	}
	p.SetState(4415)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserLOCK || _la == MySqlParserUNLOCK) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IPrivelege_clauseContext is an interface to support dynamic dispatch.
type IPrivelege_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivelege_clauseContext differentiates from other interfaces.
	IsPrivelege_clauseContext()
}

type Privelege_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivelege_clauseContext() *Privelege_clauseContext {
	var p = new(Privelege_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privelege_clause
	return p
}

func (*Privelege_clauseContext) IsPrivelege_clauseContext() {}

func NewPrivelege_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privelege_clauseContext {
	var p = new(Privelege_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privelege_clause

	return p
}

func (s *Privelege_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Privelege_clauseContext) Privilege() IPrivilegeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivilegeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivilegeContext)
}

func (s *Privelege_clauseContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Privelege_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privelege_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privelege_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivelege_clause(s)
	}
}

func (s *Privelege_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivelege_clause(s)
	}
}

func (s *Privelege_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivelege_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Privelege_clause() (localctx IPrivelege_clauseContext) {
	localctx = NewPrivelege_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 384, MySqlParserRULE_privelege_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4417)
		p.Privilege()
	}
	p.SetState(4422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(4418)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4419)
			p.Id_list()
		}
		{
			p.SetState(4420)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IPrivilegeContext is an interface to support dynamic dispatch.
type IPrivilegeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilegeContext differentiates from other interfaces.
	IsPrivilegeContext()
}

type PrivilegeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilegeContext() *PrivilegeContext {
	var p = new(PrivilegeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilege
	return p
}

func (*PrivilegeContext) IsPrivilegeContext() {}

func NewPrivilegeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrivilegeContext {
	var p = new(PrivilegeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilege

	return p
}

func (s *PrivilegeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrivilegeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *PrivilegeContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *PrivilegeContext) ALTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserALTER, 0)
}

func (s *PrivilegeContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *PrivilegeContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *PrivilegeContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *PrivilegeContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *PrivilegeContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *PrivilegeContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *PrivilegeContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *PrivilegeContext) DELETE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELETE, 0)
}

func (s *PrivilegeContext) DROP() antlr.TerminalNode {
	return s.GetToken(MySqlParserDROP, 0)
}

func (s *PrivilegeContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *PrivilegeContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *PrivilegeContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *PrivilegeContext) GRANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANT, 0)
}

func (s *PrivilegeContext) OPTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTION, 0)
}

func (s *PrivilegeContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *PrivilegeContext) INSERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT, 0)
}

func (s *PrivilegeContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *PrivilegeContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *PrivilegeContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *PrivilegeContext) REFERENCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserREFERENCES, 0)
}

func (s *PrivilegeContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *PrivilegeContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *PrivilegeContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *PrivilegeContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *PrivilegeContext) SELECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSELECT, 0)
}

func (s *PrivilegeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *PrivilegeContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *PrivilegeContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *PrivilegeContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *PrivilegeContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *PrivilegeContext) UPDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATE, 0)
}

func (s *PrivilegeContext) USAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSAGE, 0)
}

func (s *PrivilegeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrivilegeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrivilegeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivilege(s)
	}
}

func (s *PrivilegeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivilege(s)
	}
}

func (s *PrivilegeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivilege(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Privilege() (localctx IPrivilegeContext) {
	localctx = NewPrivilegeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 386, MySqlParserRULE_privilege)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4466)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4424)
			p.Match(MySqlParserALL)
		}
		p.SetState(4426)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserPRIVILEGES {
			{
				p.SetState(4425)
				p.Match(MySqlParserPRIVILEGES)
			}

		}

	case MySqlParserALTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4428)
			p.Match(MySqlParserALTER)
		}
		p.SetState(4430)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserROUTINE {
			{
				p.SetState(4429)
				p.Match(MySqlParserROUTINE)
			}

		}

	case MySqlParserCREATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4432)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(4439)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserTEMPORARY:
			{
				p.SetState(4433)
				p.Match(MySqlParserTEMPORARY)
			}
			{
				p.SetState(4434)
				p.Match(MySqlParserTABLES)
			}

		case MySqlParserROUTINE:
			{
				p.SetState(4435)
				p.Match(MySqlParserROUTINE)
			}

		case MySqlParserVIEW:
			{
				p.SetState(4436)
				p.Match(MySqlParserVIEW)
			}

		case MySqlParserUSER:
			{
				p.SetState(4437)
				p.Match(MySqlParserUSER)
			}

		case MySqlParserTABLESPACE:
			{
				p.SetState(4438)
				p.Match(MySqlParserTABLESPACE)
			}

		case MySqlParserON, MySqlParserLR_BRACKET, MySqlParserCOMMA:

		default:
		}

	case MySqlParserDELETE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4441)
			p.Match(MySqlParserDELETE)
		}

	case MySqlParserDROP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4442)
			p.Match(MySqlParserDROP)
		}

	case MySqlParserEVENT:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4443)
			p.Match(MySqlParserEVENT)
		}

	case MySqlParserEXECUTE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4444)
			p.Match(MySqlParserEXECUTE)
		}

	case MySqlParserFILE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4445)
			p.Match(MySqlParserFILE)
		}

	case MySqlParserGRANT:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4446)
			p.Match(MySqlParserGRANT)
		}
		{
			p.SetState(4447)
			p.Match(MySqlParserOPTION)
		}

	case MySqlParserINDEX:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4448)
			p.Match(MySqlParserINDEX)
		}

	case MySqlParserINSERT:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4449)
			p.Match(MySqlParserINSERT)
		}

	case MySqlParserLOCK:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4450)
			p.Match(MySqlParserLOCK)
		}
		{
			p.SetState(4451)
			p.Match(MySqlParserTABLES)
		}

	case MySqlParserPROCESS:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4452)
			p.Match(MySqlParserPROCESS)
		}

	case MySqlParserPROXY:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4453)
			p.Match(MySqlParserPROXY)
		}

	case MySqlParserREFERENCES:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(4454)
			p.Match(MySqlParserREFERENCES)
		}

	case MySqlParserRELOAD:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(4455)
			p.Match(MySqlParserRELOAD)
		}

	case MySqlParserREPLICATION:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(4456)
			p.Match(MySqlParserREPLICATION)
		}
		p.SetState(4457)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCLIENT || _la == MySqlParserSLAVE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserSELECT:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(4458)
			p.Match(MySqlParserSELECT)
		}

	case MySqlParserSHOW:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(4459)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4460)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASES || _la == MySqlParserVIEW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserSHUTDOWN:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(4461)
			p.Match(MySqlParserSHUTDOWN)
		}

	case MySqlParserSUPER:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(4462)
			p.Match(MySqlParserSUPER)
		}

	case MySqlParserTRIGGER:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(4463)
			p.Match(MySqlParserTRIGGER)
		}

	case MySqlParserUPDATE:
		p.EnterOuterAlt(localctx, 23)
		{
			p.SetState(4464)
			p.Match(MySqlParserUPDATE)
		}

	case MySqlParserUSAGE:
		p.EnterOuterAlt(localctx, 24)
		{
			p.SetState(4465)
			p.Match(MySqlParserUSAGE)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrivilege_levelContext is an interface to support dynamic dispatch.
type IPrivilege_levelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivilege_levelContext differentiates from other interfaces.
	IsPrivilege_levelContext()
}

type Privilege_levelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivilege_levelContext() *Privilege_levelContext {
	var p = new(Privilege_levelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privilege_level
	return p
}

func (*Privilege_levelContext) IsPrivilege_levelContext() {}

func NewPrivilege_levelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privilege_levelContext {
	var p = new(Privilege_levelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privilege_level

	return p
}

func (s *Privilege_levelContext) GetParser() antlr.Parser { return s.parser }

func (s *Privilege_levelContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Privilege_levelContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Privilege_levelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privilege_levelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privilege_levelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivilege_level(s)
	}
}

func (s *Privilege_levelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivilege_level(s)
	}
}

func (s *Privilege_levelContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivilege_level(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Privilege_level() (localctx IPrivilege_levelContext) {
	localctx = NewPrivilege_levelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 388, MySqlParserRULE_privilege_level)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4481)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 655, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4468)
			p.Match(MySqlParserSTAR)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4469)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(4470)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4471)
			p.Match(MySqlParserSTAR)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4472)
			p.Id_()
		}
		{
			p.SetState(4473)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4474)
			p.Match(MySqlParserSTAR)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4476)
			p.Id_()
		}
		{
			p.SetState(4477)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4478)
			p.Id_()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4480)
			p.Id_()
		}

	}

	return localctx
}

// ISet_password_optionContext is an interface to support dynamic dispatch.
type ISet_password_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_password_optionContext differentiates from other interfaces.
	IsSet_password_optionContext()
}

type Set_password_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_password_optionContext() *Set_password_optionContext {
	var p = new(Set_password_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_set_password_option
	return p
}

func (*Set_password_optionContext) IsSet_password_optionContext() {}

func NewSet_password_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_password_optionContext {
	var p = new(Set_password_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_set_password_option

	return p
}

func (s *Set_password_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_password_optionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Set_password_optionContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *Set_password_optionContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *Set_password_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_password_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Set_password_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSet_password_option(s)
	}
}

func (s *Set_password_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSet_password_option(s)
	}
}

func (s *Set_password_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSet_password_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Set_password_option() (localctx ISet_password_optionContext) {
	localctx = NewSet_password_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 390, MySqlParserRULE_set_password_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4488)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserOLD_PASSWORD, MySqlParserPASSWORD:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4483)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserOLD_PASSWORD || _la == MySqlParserPASSWORD) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4484)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4485)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		{
			p.SetState(4486)
			p.Match(MySqlParserRR_BRACKET)
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4487)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAnalyze_tableContext is an interface to support dynamic dispatch.
type IAnalyze_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnalyze_tableContext differentiates from other interfaces.
	IsAnalyze_tableContext()
}

type Analyze_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnalyze_tableContext() *Analyze_tableContext {
	var p = new(Analyze_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_analyze_table
	return p
}

func (*Analyze_tableContext) IsAnalyze_tableContext() {}

func NewAnalyze_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Analyze_tableContext {
	var p = new(Analyze_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_analyze_table

	return p
}

func (s *Analyze_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Analyze_tableContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserANALYZE, 0)
}

func (s *Analyze_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Analyze_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Analyze_tableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *Analyze_tableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Analyze_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Analyze_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Analyze_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAnalyze_table(s)
	}
}

func (s *Analyze_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAnalyze_table(s)
	}
}

func (s *Analyze_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAnalyze_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Analyze_table() (localctx IAnalyze_tableContext) {
	localctx = NewAnalyze_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 392, MySqlParserRULE_analyze_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4490)
		p.Match(MySqlParserANALYZE)
	}
	p.SetState(4492)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		p.SetState(4491)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(4494)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4495)
		p.Table_list()
	}

	return localctx
}

// ICheck_tableContext is an interface to support dynamic dispatch.
type ICheck_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheck_tableContext differentiates from other interfaces.
	IsCheck_tableContext()
}

type Check_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheck_tableContext() *Check_tableContext {
	var p = new(Check_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_check_table
	return p
}

func (*Check_tableContext) IsCheck_tableContext() {}

func NewCheck_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Check_tableContext {
	var p = new(Check_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_check_table

	return p
}

func (s *Check_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Check_tableContext) CHECK() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECK, 0)
}

func (s *Check_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Check_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Check_tableContext) AllCheck_table_option() []ICheck_table_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICheck_table_optionContext)(nil)).Elem())
	var tst = make([]ICheck_table_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICheck_table_optionContext)
		}
	}

	return tst
}

func (s *Check_tableContext) Check_table_option(i int) ICheck_table_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICheck_table_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICheck_table_optionContext)
}

func (s *Check_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Check_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Check_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheck_table(s)
	}
}

func (s *Check_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheck_table(s)
	}
}

func (s *Check_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheck_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Check_table() (localctx ICheck_tableContext) {
	localctx = NewCheck_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 394, MySqlParserRULE_check_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4497)
		p.Match(MySqlParserCHECK)
	}
	{
		p.SetState(4498)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4499)
		p.Table_list()
	}
	p.SetState(4503)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserFOR || _la == MySqlParserCHANGED || _la == MySqlParserEXTENDED || _la == MySqlParserFAST || _la == MySqlParserMEDIUM || _la == MySqlParserQUICK {
		{
			p.SetState(4500)
			p.Check_table_option()
		}

		p.SetState(4505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IChecksum_tableContext is an interface to support dynamic dispatch.
type IChecksum_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChecksum_tableContext differentiates from other interfaces.
	IsChecksum_tableContext()
}

type Checksum_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChecksum_tableContext() *Checksum_tableContext {
	var p = new(Checksum_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_checksum_table
	return p
}

func (*Checksum_tableContext) IsChecksum_tableContext() {}

func NewChecksum_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Checksum_tableContext {
	var p = new(Checksum_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_checksum_table

	return p
}

func (s *Checksum_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Checksum_tableContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *Checksum_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Checksum_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Checksum_tableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Checksum_tableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *Checksum_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Checksum_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Checksum_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterChecksum_table(s)
	}
}

func (s *Checksum_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitChecksum_table(s)
	}
}

func (s *Checksum_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitChecksum_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Checksum_table() (localctx IChecksum_tableContext) {
	localctx = NewChecksum_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 396, MySqlParserRULE_checksum_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4506)
		p.Match(MySqlParserCHECKSUM)
	}
	{
		p.SetState(4507)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4508)
		p.Table_list()
	}
	p.SetState(4510)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED || _la == MySqlParserQUICK {
		p.SetState(4509)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserEXTENDED || _la == MySqlParserQUICK) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IOptimize_tableContext is an interface to support dynamic dispatch.
type IOptimize_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptimize_tableContext differentiates from other interfaces.
	IsOptimize_tableContext()
}

type Optimize_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptimize_tableContext() *Optimize_tableContext {
	var p = new(Optimize_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_optimize_table
	return p
}

func (*Optimize_tableContext) IsOptimize_tableContext() {}

func NewOptimize_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Optimize_tableContext {
	var p = new(Optimize_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_optimize_table

	return p
}

func (s *Optimize_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Optimize_tableContext) OPTIMIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZE, 0)
}

func (s *Optimize_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Optimize_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Optimize_tableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *Optimize_tableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Optimize_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Optimize_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Optimize_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterOptimize_table(s)
	}
}

func (s *Optimize_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitOptimize_table(s)
	}
}

func (s *Optimize_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitOptimize_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Optimize_table() (localctx IOptimize_tableContext) {
	localctx = NewOptimize_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 398, MySqlParserRULE_optimize_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4512)
		p.Match(MySqlParserOPTIMIZE)
	}
	p.SetState(4514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		p.SetState(4513)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(4516)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4517)
		p.Table_list()
	}

	return localctx
}

// IRepair_tableContext is an interface to support dynamic dispatch.
type IRepair_tableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRepair_tableContext differentiates from other interfaces.
	IsRepair_tableContext()
}

type Repair_tableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRepair_tableContext() *Repair_tableContext {
	var p = new(Repair_tableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_repair_table
	return p
}

func (*Repair_tableContext) IsRepair_tableContext() {}

func NewRepair_tableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Repair_tableContext {
	var p = new(Repair_tableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_repair_table

	return p
}

func (s *Repair_tableContext) GetParser() antlr.Parser { return s.parser }

func (s *Repair_tableContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *Repair_tableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *Repair_tableContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Repair_tableContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Repair_tableContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *Repair_tableContext) USE_FRM() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE_FRM, 0)
}

func (s *Repair_tableContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *Repair_tableContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Repair_tableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Repair_tableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Repair_tableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRepair_table(s)
	}
}

func (s *Repair_tableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRepair_table(s)
	}
}

func (s *Repair_tableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRepair_table(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Repair_table() (localctx IRepair_tableContext) {
	localctx = NewRepair_tableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 400, MySqlParserRULE_repair_table)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4519)
		p.Match(MySqlParserREPAIR)
	}
	p.SetState(4521)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		p.SetState(4520)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(4523)
		p.Match(MySqlParserTABLE)
	}
	{
		p.SetState(4524)
		p.Table_list()
	}
	p.SetState(4526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserQUICK {
		{
			p.SetState(4525)
			p.Match(MySqlParserQUICK)
		}

	}
	p.SetState(4529)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserEXTENDED {
		{
			p.SetState(4528)
			p.Match(MySqlParserEXTENDED)
		}

	}
	p.SetState(4532)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserUSE_FRM {
		{
			p.SetState(4531)
			p.Match(MySqlParserUSE_FRM)
		}

	}

	return localctx
}

// ICheck_table_optionContext is an interface to support dynamic dispatch.
type ICheck_table_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCheck_table_optionContext differentiates from other interfaces.
	IsCheck_table_optionContext()
}

type Check_table_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCheck_table_optionContext() *Check_table_optionContext {
	var p = new(Check_table_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_check_table_option
	return p
}

func (*Check_table_optionContext) IsCheck_table_optionContext() {}

func NewCheck_table_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Check_table_optionContext {
	var p = new(Check_table_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_check_table_option

	return p
}

func (s *Check_table_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Check_table_optionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Check_table_optionContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *Check_table_optionContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Check_table_optionContext) FAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAST, 0)
}

func (s *Check_table_optionContext) MEDIUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUM, 0)
}

func (s *Check_table_optionContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *Check_table_optionContext) CHANGED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANGED, 0)
}

func (s *Check_table_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Check_table_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Check_table_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCheck_table_option(s)
	}
}

func (s *Check_table_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCheck_table_option(s)
	}
}

func (s *Check_table_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCheck_table_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Check_table_option() (localctx ICheck_table_optionContext) {
	localctx = NewCheck_table_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 402, MySqlParserRULE_check_table_option)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4541)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4534)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4535)
			p.Match(MySqlParserUPGRADE)
		}

	case MySqlParserQUICK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4536)
			p.Match(MySqlParserQUICK)
		}

	case MySqlParserFAST:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4537)
			p.Match(MySqlParserFAST)
		}

	case MySqlParserMEDIUM:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4538)
			p.Match(MySqlParserMEDIUM)
		}

	case MySqlParserEXTENDED:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4539)
			p.Match(MySqlParserEXTENDED)
		}

	case MySqlParserCHANGED:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4540)
			p.Match(MySqlParserCHANGED)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICreate_udfunctionContext is an interface to support dynamic dispatch.
type ICreate_udfunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreate_udfunctionContext differentiates from other interfaces.
	IsCreate_udfunctionContext()
}

type Create_udfunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreate_udfunctionContext() *Create_udfunctionContext {
	var p = new(Create_udfunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_create_udfunction
	return p
}

func (*Create_udfunctionContext) IsCreate_udfunctionContext() {}

func NewCreate_udfunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Create_udfunctionContext {
	var p = new(Create_udfunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_create_udfunction

	return p
}

func (s *Create_udfunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *Create_udfunctionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *Create_udfunctionContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Create_udfunctionContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Create_udfunctionContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *Create_udfunctionContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *Create_udfunctionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Create_udfunctionContext) STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING, 0)
}

func (s *Create_udfunctionContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *Create_udfunctionContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *Create_udfunctionContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *Create_udfunctionContext) AGGREGATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAGGREGATE, 0)
}

func (s *Create_udfunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Create_udfunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Create_udfunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCreate_udfunction(s)
	}
}

func (s *Create_udfunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCreate_udfunction(s)
	}
}

func (s *Create_udfunctionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCreate_udfunction(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Create_udfunction() (localctx ICreate_udfunctionContext) {
	localctx = NewCreate_udfunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 404, MySqlParserRULE_create_udfunction)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4543)
		p.Match(MySqlParserCREATE)
	}
	p.SetState(4545)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserAGGREGATE {
		{
			p.SetState(4544)
			p.Match(MySqlParserAGGREGATE)
		}

	}
	{
		p.SetState(4547)
		p.Match(MySqlParserFUNCTION)
	}
	{
		p.SetState(4548)
		p.Id_()
	}
	{
		p.SetState(4549)
		p.Match(MySqlParserRETURNS)
	}
	p.SetState(4550)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-174)&-(0x1f+1)) == 0 && ((1<<uint((_la-174)))&((1<<(MySqlParserINTEGER-174))|(1<<(MySqlParserREAL-174))|(1<<(MySqlParserDECIMAL-174)))) != 0) || _la == MySqlParserSTRING) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(4551)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(4552)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IInstall_pluginContext is an interface to support dynamic dispatch.
type IInstall_pluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInstall_pluginContext differentiates from other interfaces.
	IsInstall_pluginContext()
}

type Install_pluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInstall_pluginContext() *Install_pluginContext {
	var p = new(Install_pluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_install_plugin
	return p
}

func (*Install_pluginContext) IsInstall_pluginContext() {}

func NewInstall_pluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Install_pluginContext {
	var p = new(Install_pluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_install_plugin

	return p
}

func (s *Install_pluginContext) GetParser() antlr.Parser { return s.parser }

func (s *Install_pluginContext) INSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTALL, 0)
}

func (s *Install_pluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *Install_pluginContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Install_pluginContext) SONAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSONAME, 0)
}

func (s *Install_pluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Install_pluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Install_pluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Install_pluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInstall_plugin(s)
	}
}

func (s *Install_pluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInstall_plugin(s)
	}
}

func (s *Install_pluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInstall_plugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Install_plugin() (localctx IInstall_pluginContext) {
	localctx = NewInstall_pluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 406, MySqlParserRULE_install_plugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4554)
		p.Match(MySqlParserINSTALL)
	}
	{
		p.SetState(4555)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(4556)
		p.Id_()
	}
	{
		p.SetState(4557)
		p.Match(MySqlParserSONAME)
	}
	{
		p.SetState(4558)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUninstall_pluginContext is an interface to support dynamic dispatch.
type IUninstall_pluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUninstall_pluginContext differentiates from other interfaces.
	IsUninstall_pluginContext()
}

type Uninstall_pluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUninstall_pluginContext() *Uninstall_pluginContext {
	var p = new(Uninstall_pluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uninstall_plugin
	return p
}

func (*Uninstall_pluginContext) IsUninstall_pluginContext() {}

func NewUninstall_pluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Uninstall_pluginContext {
	var p = new(Uninstall_pluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uninstall_plugin

	return p
}

func (s *Uninstall_pluginContext) GetParser() antlr.Parser { return s.parser }

func (s *Uninstall_pluginContext) UNINSTALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNINSTALL, 0)
}

func (s *Uninstall_pluginContext) PLUGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGIN, 0)
}

func (s *Uninstall_pluginContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Uninstall_pluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Uninstall_pluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Uninstall_pluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUninstall_plugin(s)
	}
}

func (s *Uninstall_pluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUninstall_plugin(s)
	}
}

func (s *Uninstall_pluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUninstall_plugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Uninstall_plugin() (localctx IUninstall_pluginContext) {
	localctx = NewUninstall_pluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 408, MySqlParserRULE_uninstall_plugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4560)
		p.Match(MySqlParserUNINSTALL)
	}
	{
		p.SetState(4561)
		p.Match(MySqlParserPLUGIN)
	}
	{
		p.SetState(4562)
		p.Id_()
	}

	return localctx
}

// ISet_statementContext is an interface to support dynamic dispatch.
type ISet_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSet_statementContext differentiates from other interfaces.
	IsSet_statementContext()
}

type Set_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySet_statementContext() *Set_statementContext {
	var p = new(Set_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_set_statement
	return p
}

func (*Set_statementContext) IsSet_statementContext() {}

func NewSet_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Set_statementContext {
	var p = new(Set_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_set_statement

	return p
}

func (s *Set_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Set_statementContext) CopyFrom(ctx *Set_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Set_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Set_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SetPasswordStatementContext struct {
	*Set_statementContext
}

func NewSetPasswordStatementContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetPasswordStatementContext {
	var p = new(SetPasswordStatementContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetPasswordStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetPasswordStatementContext) Set_password_statement() ISet_password_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_password_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_password_statementContext)
}

func (s *SetPasswordStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetPasswordStatement(s)
	}
}

func (s *SetPasswordStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetPasswordStatement(s)
	}
}

func (s *SetPasswordStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetPasswordStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetTransactionContext struct {
	*Set_statementContext
}

func NewSetTransactionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetTransactionContext {
	var p = new(SetTransactionContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetTransactionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetTransactionContext) Set_transaction_statement() ISet_transaction_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_transaction_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_transaction_statementContext)
}

func (s *SetTransactionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetTransaction(s)
	}
}

func (s *SetTransactionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetTransaction(s)
	}
}

func (s *SetTransactionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetTransaction(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetCharsetContext struct {
	*Set_statementContext
}

func NewSetCharsetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetCharsetContext {
	var p = new(SetCharsetContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetCharsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetCharsetContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *SetCharsetContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *SetCharsetContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *SetCharsetContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *SetCharsetContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *SetCharsetContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetCharsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetCharset(s)
	}
}

func (s *SetCharsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetCharset(s)
	}
}

func (s *SetCharsetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetCharset(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetNamesContext struct {
	*Set_statementContext
}

func NewSetNamesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetNamesContext {
	var p = new(SetNamesContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetNamesContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetNamesContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *SetNamesContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *SetNamesContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *SetNamesContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *SetNamesContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *SetNamesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetNames(s)
	}
}

func (s *SetNamesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetNames(s)
	}
}

func (s *SetNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetNames(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetAutocommitContext struct {
	*Set_statementContext
}

func NewSetAutocommitContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetAutocommitContext {
	var p = new(SetAutocommitContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetAutocommitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetAutocommitContext) Set_autocommit_statement() ISet_autocommit_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISet_autocommit_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISet_autocommit_statementContext)
}

func (s *SetAutocommitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetAutocommit(s)
	}
}

func (s *SetAutocommitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetAutocommit(s)
	}
}

func (s *SetAutocommitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetAutocommit(s)

	default:
		return t.VisitChildren(s)
	}
}

type SetVariableAssignmentContext struct {
	*Set_statementContext
}

func NewSetVariableAssignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetVariableAssignmentContext {
	var p = new(SetVariableAssignmentContext)

	p.Set_statementContext = NewEmptySet_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Set_statementContext))

	return p
}

func (s *SetVariableAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetVariableAssignmentContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *SetVariableAssignmentContext) AllVariable_clause() []IVariable_clauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariable_clauseContext)(nil)).Elem())
	var tst = make([]IVariable_clauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariable_clauseContext)
		}
	}

	return tst
}

func (s *SetVariableAssignmentContext) Variable_clause(i int) IVariable_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariable_clauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariable_clauseContext)
}

func (s *SetVariableAssignmentContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SetVariableAssignmentContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SetVariableAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSetVariableAssignment(s)
	}
}

func (s *SetVariableAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSetVariableAssignment(s)
	}
}

func (s *SetVariableAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSetVariableAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Set_statement() (localctx ISet_statementContext) {
	localctx = NewSet_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 410, MySqlParserRULE_set_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4601)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 672, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSetVariableAssignmentContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4564)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(4565)
			p.Variable_clause()
		}
		{
			p.SetState(4566)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(4567)
			p.expression(0)
		}
		p.SetState(4575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4568)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4569)
				p.Variable_clause()
			}
			{
				p.SetState(4570)
				p.Match(MySqlParserEQUAL_SYMBOL)
			}
			{
				p.SetState(4571)
				p.expression(0)
			}

			p.SetState(4577)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewSetCharsetContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4578)
			p.Match(MySqlParserSET)
		}
		p.SetState(4582)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(4579)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(4580)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCHARSET:
			{
				p.SetState(4581)
				p.Match(MySqlParserCHARSET)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(4586)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(4584)
				p.Charset_name()
			}

		case MySqlParserDEFAULT:
			{
				p.SetState(4585)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 3:
		localctx = NewSetNamesContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4588)
			p.Match(MySqlParserSET)
		}
		{
			p.SetState(4589)
			p.Match(MySqlParserNAMES)
		}
		p.SetState(4596)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserBINARY, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTRING_LITERAL:
			{
				p.SetState(4590)
				p.Charset_name()
			}
			p.SetState(4593)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserCOLLATE {
				{
					p.SetState(4591)
					p.Match(MySqlParserCOLLATE)
				}
				{
					p.SetState(4592)
					p.Collation_name()
				}

			}

		case MySqlParserDEFAULT:
			{
				p.SetState(4595)
				p.Match(MySqlParserDEFAULT)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 4:
		localctx = NewSetPasswordStatementContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4598)
			p.Set_password_statement()
		}

	case 5:
		localctx = NewSetTransactionContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4599)
			p.Set_transaction_statement()
		}

	case 6:
		localctx = NewSetAutocommitContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4600)
			p.Set_autocommit_statement()
		}

	}

	return localctx
}

// IShow_statementContext is an interface to support dynamic dispatch.
type IShow_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_statementContext differentiates from other interfaces.
	IsShow_statementContext()
}

type Show_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_statementContext() *Show_statementContext {
	var p = new(Show_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_show_statement
	return p
}

func (*Show_statementContext) IsShow_statementContext() {}

func NewShow_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_statementContext {
	var p = new(Show_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_show_statement

	return p
}

func (s *Show_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_statementContext) CopyFrom(ctx *Show_statementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Show_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ShowCreateUserContext struct {
	*Show_statementContext
}

func NewShowCreateUserContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateUserContext {
	var p = new(ShowCreateUserContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowCreateUserContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateUserContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateUserContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateUserContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *ShowCreateUserContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *ShowCreateUserContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateUser(s)
	}
}

func (s *ShowCreateUserContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateUser(s)
	}
}

func (s *ShowCreateUserContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateUser(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateFullidobjContext struct {
	*Show_statementContext
}

func NewShowCreateFullidobjContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateFullidobjContext {
	var p = new(ShowCreateFullidobjContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowCreateFullidobjContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateFullidobjContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateFullidobjContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateFullidobjContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *ShowCreateFullidobjContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *ShowCreateFullidobjContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowCreateFullidobjContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowCreateFullidobjContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowCreateFullidobjContext) TRIGGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGER, 0)
}

func (s *ShowCreateFullidobjContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *ShowCreateFullidobjContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateFullidobj(s)
	}
}

func (s *ShowCreateFullidobjContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateFullidobj(s)
	}
}

func (s *ShowCreateFullidobjContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateFullidobj(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowSlavestatusContext struct {
	*Show_statementContext
}

func NewShowSlavestatusContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowSlavestatusContext {
	var p = new(ShowSlavestatusContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowSlavestatusContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowSlavestatusContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowSlavestatusContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowSlavestatusContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowSlavestatusContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowSlavestatusContext) CHANNEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHANNEL, 0)
}

func (s *ShowSlavestatusContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowSlavestatusContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowSlavestatus(s)
	}
}

func (s *ShowSlavestatusContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowSlavestatus(s)
	}
}

func (s *ShowSlavestatusContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowSlavestatus(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowOpentablesContext struct {
	*Show_statementContext
}

func NewShowOpentablesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowOpentablesContext {
	var p = new(ShowOpentablesContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowOpentablesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowOpentablesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowOpentablesContext) OPEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPEN, 0)
}

func (s *ShowOpentablesContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowOpentablesContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ShowOpentablesContext) Show_filter() IShow_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_filterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_filterContext)
}

func (s *ShowOpentablesContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowOpentablesContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowOpentablesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowOpentables(s)
	}
}

func (s *ShowOpentablesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowOpentables(s)
	}
}

func (s *ShowOpentablesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowOpentables(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowObjWithFilterContext struct {
	*Show_statementContext
}

func NewShowObjWithFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowObjWithFilterContext {
	var p = new(ShowObjWithFilterContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowObjWithFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowObjWithFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowObjWithFilterContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *ShowObjWithFilterContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *ShowObjWithFilterContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *ShowObjWithFilterContext) DATABASES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASES, 0)
}

func (s *ShowObjWithFilterContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMAS, 0)
}

func (s *ShowObjWithFilterContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowObjWithFilterContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowObjWithFilterContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowObjWithFilterContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *ShowObjWithFilterContext) Show_filter() IShow_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_filterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_filterContext)
}

func (s *ShowObjWithFilterContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *ShowObjWithFilterContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *ShowObjWithFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowObjWithFilter(s)
	}
}

func (s *ShowObjWithFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowObjWithFilter(s)
	}
}

func (s *ShowObjWithFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowObjWithFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowFromschemaFilterContext struct {
	*Show_statementContext
}

func NewShowFromschemaFilterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowFromschemaFilterContext {
	var p = new(ShowFromschemaFilterContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowFromschemaFilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowFromschemaFilterContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowFromschemaFilterContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowFromschemaFilterContext) TABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLE, 0)
}

func (s *ShowFromschemaFilterContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowFromschemaFilterContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *ShowFromschemaFilterContext) TRIGGERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIGGERS, 0)
}

func (s *ShowFromschemaFilterContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ShowFromschemaFilterContext) Show_filter() IShow_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_filterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_filterContext)
}

func (s *ShowFromschemaFilterContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowFromschemaFilterContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowFromschemaFilterContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowFromschemaFilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowFromschemaFilter(s)
	}
}

func (s *ShowFromschemaFilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowFromschemaFilter(s)
	}
}

func (s *ShowFromschemaFilterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowFromschemaFilter(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowRoutinecodeContext struct {
	*Show_statementContext
}

func NewShowRoutinecodeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowRoutinecodeContext {
	var p = new(ShowRoutinecodeContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowRoutinecodeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowRoutinecodeContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowRoutinecodeContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *ShowRoutinecodeContext) Full_id() IFull_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_idContext)
}

func (s *ShowRoutinecodeContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *ShowRoutinecodeContext) PROCEDURE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCEDURE, 0)
}

func (s *ShowRoutinecodeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowRoutinecode(s)
	}
}

func (s *ShowRoutinecodeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowRoutinecode(s)
	}
}

func (s *ShowRoutinecodeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowRoutinecode(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowMasterlogsContext struct {
	*Show_statementContext
}

func NewShowMasterlogsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowMasterlogsContext {
	var p = new(ShowMasterlogsContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowMasterlogsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowMasterlogsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowMasterlogsContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *ShowMasterlogsContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *ShowMasterlogsContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowMasterlogsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowMasterlogs(s)
	}
}

func (s *ShowMasterlogsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowMasterlogs(s)
	}
}

func (s *ShowMasterlogsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowMasterlogs(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCreateDbContext struct {
	*Show_statementContext
}

func NewShowCreateDbContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCreateDbContext {
	var p = new(ShowCreateDbContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowCreateDbContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCreateDbContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCreateDbContext) CREATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE, 0)
}

func (s *ShowCreateDbContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ShowCreateDbContext) DATABASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATABASE, 0)
}

func (s *ShowCreateDbContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEMA, 0)
}

func (s *ShowCreateDbContext) If_not_exists() IIf_not_existsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIf_not_existsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIf_not_existsContext)
}

func (s *ShowCreateDbContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCreateDb(s)
	}
}

func (s *ShowCreateDbContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCreateDb(s)
	}
}

func (s *ShowCreateDbContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCreateDb(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowEngineContext struct {
	*Show_statementContext
}

func NewShowEngineContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowEngineContext {
	var p = new(ShowEngineContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowEngineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowEngineContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowEngineContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *ShowEngineContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *ShowEngineContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowEngineContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *ShowEngineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowEngine(s)
	}
}

func (s *ShowEngineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowEngine(s)
	}
}

func (s *ShowEngineContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowEngine(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowLogeventsContext struct {
	*Show_statementContext
	from_pos  IDecimal_literalContext
	offset    IDecimal_literalContext
	row_count IDecimal_literalContext
}

func NewShowLogeventsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowLogeventsContext {
	var p = new(ShowLogeventsContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowLogeventsContext) GetFrom_pos() IDecimal_literalContext { return s.from_pos }

func (s *ShowLogeventsContext) GetOffset() IDecimal_literalContext { return s.offset }

func (s *ShowLogeventsContext) GetRow_count() IDecimal_literalContext { return s.row_count }

func (s *ShowLogeventsContext) SetFrom_pos(v IDecimal_literalContext) { s.from_pos = v }

func (s *ShowLogeventsContext) SetOffset(v IDecimal_literalContext) { s.offset = v }

func (s *ShowLogeventsContext) SetRow_count(v IDecimal_literalContext) { s.row_count = v }

func (s *ShowLogeventsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowLogeventsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowLogeventsContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *ShowLogeventsContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *ShowLogeventsContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *ShowLogeventsContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *ShowLogeventsContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *ShowLogeventsContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ShowLogeventsContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowLogeventsContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *ShowLogeventsContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *ShowLogeventsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowLogevents(s)
	}
}

func (s *ShowLogeventsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowLogevents(s)
	}
}

func (s *ShowLogeventsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowLogevents(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowGlobalinfoContext struct {
	*Show_statementContext
}

func NewShowGlobalinfoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGlobalinfoContext {
	var p = new(ShowGlobalinfoContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowGlobalinfoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGlobalinfoContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGlobalinfoContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *ShowGlobalinfoContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *ShowGlobalinfoContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *ShowGlobalinfoContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *ShowGlobalinfoContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *ShowGlobalinfoContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *ShowGlobalinfoContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *ShowGlobalinfoContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *ShowGlobalinfoContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *ShowGlobalinfoContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *ShowGlobalinfoContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *ShowGlobalinfoContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *ShowGlobalinfoContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowGlobalinfoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowGlobalinfo(s)
	}
}

func (s *ShowGlobalinfoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowGlobalinfo(s)
	}
}

func (s *ShowGlobalinfoContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowGlobalinfo(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowCountErrWarnContext struct {
	*Show_statementContext
}

func NewShowCountErrWarnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowCountErrWarnContext {
	var p = new(ShowCountErrWarnContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowCountErrWarnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowCountErrWarnContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowCountErrWarnContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *ShowCountErrWarnContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowCountErrWarnContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowCountErrWarnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowCountErrWarn(s)
	}
}

func (s *ShowCountErrWarnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowCountErrWarn(s)
	}
}

func (s *ShowCountErrWarnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowCountErrWarn(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowIndexesContext struct {
	*Show_statementContext
}

func NewShowIndexesContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowIndexesContext {
	var p = new(ShowIndexesContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowIndexesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowIndexesContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowIndexesContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ShowIndexesContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *ShowIndexesContext) INDEXES() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEXES, 0)
}

func (s *ShowIndexesContext) KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYS, 0)
}

func (s *ShowIndexesContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowIndexesContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowIndexesContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowIndexesContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowIndexesContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ShowIndexesContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *ShowIndexesContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShowIndexesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowIndexes(s)
	}
}

func (s *ShowIndexesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowIndexes(s)
	}
}

func (s *ShowIndexesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowIndexes(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowGrantsContext struct {
	*Show_statementContext
}

func NewShowGrantsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowGrantsContext {
	var p = new(ShowGrantsContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowGrantsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowGrantsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowGrantsContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *ShowGrantsContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowGrantsContext) User_name() IUser_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUser_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUser_nameContext)
}

func (s *ShowGrantsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowGrants(s)
	}
}

func (s *ShowGrantsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowGrants(s)
	}
}

func (s *ShowGrantsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowGrants(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowProfileContext struct {
	*Show_statementContext
	offset    IDecimal_literalContext
	row_count IDecimal_literalContext
}

func NewShowProfileContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowProfileContext {
	var p = new(ShowProfileContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowProfileContext) GetOffset() IDecimal_literalContext { return s.offset }

func (s *ShowProfileContext) GetRow_count() IDecimal_literalContext { return s.row_count }

func (s *ShowProfileContext) SetOffset(v IDecimal_literalContext) { s.offset = v }

func (s *ShowProfileContext) SetRow_count(v IDecimal_literalContext) { s.row_count = v }

func (s *ShowProfileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowProfileContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowProfileContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *ShowProfileContext) AllShow_profile_type() []IShow_profile_typeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IShow_profile_typeContext)(nil)).Elem())
	var tst = make([]IShow_profile_typeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IShow_profile_typeContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) Show_profile_type(i int) IShow_profile_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_profile_typeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IShow_profile_typeContext)
}

func (s *ShowProfileContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowProfileContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ShowProfileContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *ShowProfileContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *ShowProfileContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *ShowProfileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowProfile(s)
	}
}

func (s *ShowProfileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowProfile(s)
	}
}

func (s *ShowProfileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowProfile(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowColumnsContext struct {
	*Show_statementContext
}

func NewShowColumnsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowColumnsContext {
	var p = new(ShowColumnsContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowColumnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowColumnsContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowColumnsContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *ShowColumnsContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *ShowColumnsContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *ShowColumnsContext) AllFROM() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserFROM)
}

func (s *ShowColumnsContext) FROM(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, i)
}

func (s *ShowColumnsContext) AllIN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserIN)
}

func (s *ShowColumnsContext) IN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, i)
}

func (s *ShowColumnsContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *ShowColumnsContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ShowColumnsContext) Show_filter() IShow_filterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShow_filterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShow_filterContext)
}

func (s *ShowColumnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowColumns(s)
	}
}

func (s *ShowColumnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowColumns(s)
	}
}

func (s *ShowColumnsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowColumns(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShowErrWarnContext struct {
	*Show_statementContext
	offset    IDecimal_literalContext
	row_count IDecimal_literalContext
}

func NewShowErrWarnContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShowErrWarnContext {
	var p = new(ShowErrWarnContext)

	p.Show_statementContext = NewEmptyShow_statementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Show_statementContext))

	return p
}

func (s *ShowErrWarnContext) GetOffset() IDecimal_literalContext { return s.offset }

func (s *ShowErrWarnContext) GetRow_count() IDecimal_literalContext { return s.row_count }

func (s *ShowErrWarnContext) SetOffset(v IDecimal_literalContext) { s.offset = v }

func (s *ShowErrWarnContext) SetRow_count(v IDecimal_literalContext) { s.row_count = v }

func (s *ShowErrWarnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShowErrWarnContext) SHOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHOW, 0)
}

func (s *ShowErrWarnContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *ShowErrWarnContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *ShowErrWarnContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIMIT, 0)
}

func (s *ShowErrWarnContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *ShowErrWarnContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *ShowErrWarnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShowErrWarn(s)
	}
}

func (s *ShowErrWarnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShowErrWarn(s)
	}
}

func (s *ShowErrWarnContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShowErrWarn(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Show_statement() (localctx IShow_statementContext) {
	localctx = NewShow_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 412, MySqlParserRULE_show_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4795)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 701, p.GetParserRuleContext()) {
	case 1:
		localctx = NewShowMasterlogsContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4603)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4604)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINARY || _la == MySqlParserMASTER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4605)
			p.Match(MySqlParserLOGS)
		}

	case 2:
		localctx = NewShowLogeventsContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4606)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4607)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINLOG || _la == MySqlParserRELAYLOG) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4608)
			p.Match(MySqlParserEVENTS)
		}
		p.SetState(4611)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIN {
			{
				p.SetState(4609)
				p.Match(MySqlParserIN)
			}
			{
				p.SetState(4610)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}
		p.SetState(4615)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM {
			{
				p.SetState(4613)
				p.Match(MySqlParserFROM)
			}
			{
				p.SetState(4614)

				var _x = p.Decimal_literal()

				localctx.(*ShowLogeventsContext).from_pos = _x
			}

		}
		p.SetState(4624)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIMIT {
			{
				p.SetState(4617)
				p.Match(MySqlParserLIMIT)
			}
			p.SetState(4621)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 675, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(4618)

					var _x = p.Decimal_literal()

					localctx.(*ShowLogeventsContext).offset = _x
				}
				{
					p.SetState(4619)
					p.Match(MySqlParserCOMMA)
				}

			}
			{
				p.SetState(4623)

				var _x = p.Decimal_literal()

				localctx.(*ShowLogeventsContext).row_count = _x
			}

		}

	case 3:
		localctx = NewShowObjWithFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4626)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4640)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserCHARACTER:
			{
				p.SetState(4627)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(4628)
				p.Match(MySqlParserSET)
			}

		case MySqlParserCOLLATION:
			{
				p.SetState(4629)
				p.Match(MySqlParserCOLLATION)
			}

		case MySqlParserDATABASES:
			{
				p.SetState(4630)
				p.Match(MySqlParserDATABASES)
			}

		case MySqlParserSCHEMAS:
			{
				p.SetState(4631)
				p.Match(MySqlParserSCHEMAS)
			}

		case MySqlParserFUNCTION:
			{
				p.SetState(4632)
				p.Match(MySqlParserFUNCTION)
			}
			{
				p.SetState(4633)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserPROCEDURE:
			{
				p.SetState(4634)
				p.Match(MySqlParserPROCEDURE)
			}
			{
				p.SetState(4635)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserGLOBAL, MySqlParserSESSION, MySqlParserSTATUS, MySqlParserVARIABLES:
			p.SetState(4637)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserGLOBAL || _la == MySqlParserSESSION {
				p.SetState(4636)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}

			}
			p.SetState(4639)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserSTATUS || _la == MySqlParserVARIABLES) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(4643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(4642)
				p.Show_filter()
			}

		}

	case 4:
		localctx = NewShowColumnsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4645)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4647)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFULL {
			{
				p.SetState(4646)
				p.Match(MySqlParserFULL)
			}

		}
		p.SetState(4649)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCOLUMNS || _la == MySqlParserFIELDS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(4650)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4651)
			p.Table_name()
		}
		p.SetState(4654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			p.SetState(4652)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4653)
				p.Id_()
			}

		}
		p.SetState(4657)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(4656)
				p.Show_filter()
			}

		}

	case 5:
		localctx = NewShowCreateDbContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4659)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4660)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(4661)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDATABASE || _la == MySqlParserSCHEMA) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(4663)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserIF {
			{
				p.SetState(4662)
				p.If_not_exists()
			}

		}
		{
			p.SetState(4665)
			p.Id_()
		}

	case 6:
		localctx = NewShowCreateFullidobjContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4666)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4667)
			p.Match(MySqlParserCREATE)
		}
		p.SetState(4668)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserPROCEDURE || _la == MySqlParserTABLE || _la == MySqlParserTRIGGER || _la == MySqlParserEVENT || _la == MySqlParserFUNCTION || _la == MySqlParserVIEW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4669)
			p.Full_id()
		}

	case 7:
		localctx = NewShowCreateUserContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4670)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4671)
			p.Match(MySqlParserCREATE)
		}
		{
			p.SetState(4672)
			p.Match(MySqlParserUSER)
		}
		{
			p.SetState(4673)
			p.User_name()
		}

	case 8:
		localctx = NewShowEngineContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4674)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4675)
			p.Match(MySqlParserENGINE)
		}
		{
			p.SetState(4676)
			p.Engine_name()
		}
		p.SetState(4677)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserMUTEX || _la == MySqlParserSTATUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 9:
		localctx = NewShowGlobalinfoContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4679)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4697)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserENGINES, MySqlParserSTORAGE:
			p.SetState(4681)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTORAGE {
				{
					p.SetState(4680)
					p.Match(MySqlParserSTORAGE)
				}

			}
			{
				p.SetState(4683)
				p.Match(MySqlParserENGINES)
			}

		case MySqlParserMASTER:
			{
				p.SetState(4684)
				p.Match(MySqlParserMASTER)
			}
			{
				p.SetState(4685)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserPLUGINS:
			{
				p.SetState(4686)
				p.Match(MySqlParserPLUGINS)
			}

		case MySqlParserPRIVILEGES:
			{
				p.SetState(4687)
				p.Match(MySqlParserPRIVILEGES)
			}

		case MySqlParserFULL, MySqlParserPROCESSLIST:
			p.SetState(4689)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserFULL {
				{
					p.SetState(4688)
					p.Match(MySqlParserFULL)
				}

			}
			{
				p.SetState(4691)
				p.Match(MySqlParserPROCESSLIST)
			}

		case MySqlParserPROFILES:
			{
				p.SetState(4692)
				p.Match(MySqlParserPROFILES)
			}

		case MySqlParserSLAVE:
			{
				p.SetState(4693)
				p.Match(MySqlParserSLAVE)
			}
			{
				p.SetState(4694)
				p.Match(MySqlParserHOSTS)
			}

		case MySqlParserAUTHORS:
			{
				p.SetState(4695)
				p.Match(MySqlParserAUTHORS)
			}

		case MySqlParserCONTRIBUTORS:
			{
				p.SetState(4696)
				p.Match(MySqlParserCONTRIBUTORS)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case 10:
		localctx = NewShowErrWarnContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4699)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4700)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

		{
			p.SetState(4701)
			p.Match(MySqlParserLIMIT)
		}
		p.SetState(4705)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 687, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4702)

				var _x = p.Decimal_literal()

				localctx.(*ShowErrWarnContext).offset = _x
			}
			{
				p.SetState(4703)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(4707)

			var _x = p.Decimal_literal()

			localctx.(*ShowErrWarnContext).row_count = _x
		}

	case 11:
		localctx = NewShowCountErrWarnContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4708)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4709)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(4710)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4711)
			p.Match(MySqlParserSTAR)
		}
		{
			p.SetState(4712)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(4713)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserERRORS || _la == MySqlParserWARNINGS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 12:
		localctx = NewShowFromschemaFilterContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(4714)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4723)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserEVENTS:
			{
				p.SetState(4715)
				p.Match(MySqlParserEVENTS)
			}

		case MySqlParserTABLE:
			{
				p.SetState(4716)
				p.Match(MySqlParserTABLE)
			}
			{
				p.SetState(4717)
				p.Match(MySqlParserSTATUS)
			}

		case MySqlParserFULL, MySqlParserTABLES:
			p.SetState(4719)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserFULL {
				{
					p.SetState(4718)
					p.Match(MySqlParserFULL)
				}

			}
			{
				p.SetState(4721)
				p.Match(MySqlParserTABLES)
			}

		case MySqlParserTRIGGERS:
			{
				p.SetState(4722)
				p.Match(MySqlParserTRIGGERS)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(4727)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			p.SetState(4725)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4726)
				p.Id_()
			}

		}
		p.SetState(4730)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(4729)
				p.Show_filter()
			}

		}

	case 13:
		localctx = NewShowRoutinecodeContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(4732)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4733)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserPROCEDURE || _la == MySqlParserFUNCTION) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4734)
			p.Match(MySqlParserCODE)
		}
		{
			p.SetState(4735)
			p.Full_id()
		}

	case 14:
		localctx = NewShowGrantsContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(4736)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4737)
			p.Match(MySqlParserGRANTS)
		}
		p.SetState(4740)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4738)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4739)
				p.User_name()
			}

		}

	case 15:
		localctx = NewShowIndexesContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(4742)
			p.Match(MySqlParserSHOW)
		}
		p.SetState(4743)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserINDEX || _la == MySqlParserKEYS || _la == MySqlParserINDEXES) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(4744)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(4745)
			p.Table_name()
		}
		p.SetState(4748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			p.SetState(4746)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4747)
				p.Id_()
			}

		}
		p.SetState(4752)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWHERE {
			{
				p.SetState(4750)
				p.Match(MySqlParserWHERE)
			}
			{
				p.SetState(4751)
				p.expression(0)
			}

		}

	case 16:
		localctx = NewShowOpentablesContext(p, localctx)
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(4754)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4755)
			p.Match(MySqlParserOPEN)
		}
		{
			p.SetState(4756)
			p.Match(MySqlParserTABLES)
		}
		p.SetState(4759)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFROM || _la == MySqlParserIN {
			p.SetState(4757)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserFROM || _la == MySqlParserIN) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(4758)
				p.Id_()
			}

		}
		p.SetState(4762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLIKE || _la == MySqlParserWHERE {
			{
				p.SetState(4761)
				p.Show_filter()
			}

		}

	case 17:
		localctx = NewShowProfileContext(p, localctx)
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(4764)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4765)
			p.Match(MySqlParserPROFILE)
		}
		{
			p.SetState(4766)
			p.Show_profile_type()
		}
		p.SetState(4771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(4767)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(4768)
				p.Show_profile_type()
			}

			p.SetState(4773)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(4777)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4774)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4775)
				p.Match(MySqlParserQUERY)
			}
			{
				p.SetState(4776)
				p.Decimal_literal()
			}

		}

		{
			p.SetState(4779)
			p.Match(MySqlParserLIMIT)
		}
		p.SetState(4783)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 699, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(4780)

				var _x = p.Decimal_literal()

				localctx.(*ShowProfileContext).offset = _x
			}
			{
				p.SetState(4781)
				p.Match(MySqlParserCOMMA)
			}

		}
		{
			p.SetState(4785)

			var _x = p.Decimal_literal()

			localctx.(*ShowProfileContext).row_count = _x
		}

	case 18:
		localctx = NewShowSlavestatusContext(p, localctx)
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(4787)
			p.Match(MySqlParserSHOW)
		}
		{
			p.SetState(4788)
			p.Match(MySqlParserSLAVE)
		}
		{
			p.SetState(4789)
			p.Match(MySqlParserSTATUS)
		}
		p.SetState(4793)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4790)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4791)
				p.Match(MySqlParserCHANNEL)
			}
			{
				p.SetState(4792)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}

	}

	return localctx
}

// IVariable_clauseContext is an interface to support dynamic dispatch.
type IVariable_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariable_clauseContext differentiates from other interfaces.
	IsVariable_clauseContext()
}

type Variable_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariable_clauseContext() *Variable_clauseContext {
	var p = new(Variable_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_variable_clause
	return p
}

func (*Variable_clauseContext) IsVariable_clauseContext() {}

func NewVariable_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Variable_clauseContext {
	var p = new(Variable_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_variable_clause

	return p
}

func (s *Variable_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Variable_clauseContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *Variable_clauseContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *Variable_clauseContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Variable_clauseContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *Variable_clauseContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *Variable_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Variable_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Variable_clauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterVariable_clause(s)
	}
}

func (s *Variable_clauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitVariable_clause(s)
	}
}

func (s *Variable_clauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitVariable_clause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Variable_clause() (localctx IVariable_clauseContext) {
	localctx = NewVariable_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 414, MySqlParserRULE_variable_clause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4807)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLOCAL_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4797)
			p.Match(MySqlParserLOCAL_ID)
		}

	case MySqlParserGLOBAL_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4798)
			p.Match(MySqlParserGLOBAL_ID)
		}

	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserAT_SIGN, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(4804)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 703, p.GetParserRuleContext()) == 1 {
			p.SetState(4801)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserAT_SIGN {
				{
					p.SetState(4799)
					p.Match(MySqlParserAT_SIGN)
				}
				{
					p.SetState(4800)
					p.Match(MySqlParserAT_SIGN)
				}

			}
			p.SetState(4803)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserGLOBAL || _la == MySqlParserSESSION) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4806)
			p.Id_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShow_filterContext is an interface to support dynamic dispatch.
type IShow_filterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_filterContext differentiates from other interfaces.
	IsShow_filterContext()
}

type Show_filterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_filterContext() *Show_filterContext {
	var p = new(Show_filterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_show_filter
	return p
}

func (*Show_filterContext) IsShow_filterContext() {}

func NewShow_filterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_filterContext {
	var p = new(Show_filterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_show_filter

	return p
}

func (s *Show_filterContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_filterContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *Show_filterContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Show_filterContext) WHERE() antlr.TerminalNode {
	return s.GetToken(MySqlParserWHERE, 0)
}

func (s *Show_filterContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Show_filterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_filterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Show_filterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShow_filter(s)
	}
}

func (s *Show_filterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShow_filter(s)
	}
}

func (s *Show_filterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShow_filter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Show_filter() (localctx IShow_filterContext) {
	localctx = NewShow_filterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 416, MySqlParserRULE_show_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4813)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLIKE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4809)
			p.Match(MySqlParserLIKE)
		}
		{
			p.SetState(4810)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserWHERE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4811)
			p.Match(MySqlParserWHERE)
		}
		{
			p.SetState(4812)
			p.expression(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IShow_profile_typeContext is an interface to support dynamic dispatch.
type IShow_profile_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShow_profile_typeContext differentiates from other interfaces.
	IsShow_profile_typeContext()
}

type Show_profile_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShow_profile_typeContext() *Show_profile_typeContext {
	var p = new(Show_profile_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_show_profile_type
	return p
}

func (*Show_profile_typeContext) IsShow_profile_typeContext() {}

func NewShow_profile_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Show_profile_typeContext {
	var p = new(Show_profile_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_show_profile_type

	return p
}

func (s *Show_profile_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Show_profile_typeContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Show_profile_typeContext) BLOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOCK, 0)
}

func (s *Show_profile_typeContext) IO() antlr.TerminalNode {
	return s.GetToken(MySqlParserIO, 0)
}

func (s *Show_profile_typeContext) CONTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTEXT, 0)
}

func (s *Show_profile_typeContext) SWITCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWITCHES, 0)
}

func (s *Show_profile_typeContext) CPU() antlr.TerminalNode {
	return s.GetToken(MySqlParserCPU, 0)
}

func (s *Show_profile_typeContext) IPC() antlr.TerminalNode {
	return s.GetToken(MySqlParserIPC, 0)
}

func (s *Show_profile_typeContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *Show_profile_typeContext) PAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPAGE, 0)
}

func (s *Show_profile_typeContext) FAULTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFAULTS, 0)
}

func (s *Show_profile_typeContext) SOURCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOURCE, 0)
}

func (s *Show_profile_typeContext) SWAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWAPS, 0)
}

func (s *Show_profile_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Show_profile_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Show_profile_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShow_profile_type(s)
	}
}

func (s *Show_profile_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShow_profile_type(s)
	}
}

func (s *Show_profile_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShow_profile_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Show_profile_type() (localctx IShow_profile_typeContext) {
	localctx = NewShow_profile_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 418, MySqlParserRULE_show_profile_type)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4827)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserALL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4815)
			p.Match(MySqlParserALL)
		}

	case MySqlParserBLOCK:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4816)
			p.Match(MySqlParserBLOCK)
		}
		{
			p.SetState(4817)
			p.Match(MySqlParserIO)
		}

	case MySqlParserCONTEXT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(4818)
			p.Match(MySqlParserCONTEXT)
		}
		{
			p.SetState(4819)
			p.Match(MySqlParserSWITCHES)
		}

	case MySqlParserCPU:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4820)
			p.Match(MySqlParserCPU)
		}

	case MySqlParserIPC:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4821)
			p.Match(MySqlParserIPC)
		}

	case MySqlParserMEMORY:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4822)
			p.Match(MySqlParserMEMORY)
		}

	case MySqlParserPAGE:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4823)
			p.Match(MySqlParserPAGE)
		}
		{
			p.SetState(4824)
			p.Match(MySqlParserFAULTS)
		}

	case MySqlParserSOURCE:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4825)
			p.Match(MySqlParserSOURCE)
		}

	case MySqlParserSWAPS:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4826)
			p.Match(MySqlParserSWAPS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBinlog_statementContext is an interface to support dynamic dispatch.
type IBinlog_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinlog_statementContext differentiates from other interfaces.
	IsBinlog_statementContext()
}

type Binlog_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinlog_statementContext() *Binlog_statementContext {
	var p = new(Binlog_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_binlog_statement
	return p
}

func (*Binlog_statementContext) IsBinlog_statementContext() {}

func NewBinlog_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Binlog_statementContext {
	var p = new(Binlog_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_binlog_statement

	return p
}

func (s *Binlog_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Binlog_statementContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *Binlog_statementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Binlog_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binlog_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Binlog_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinlog_statement(s)
	}
}

func (s *Binlog_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinlog_statement(s)
	}
}

func (s *Binlog_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinlog_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Binlog_statement() (localctx IBinlog_statementContext) {
	localctx = NewBinlog_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 420, MySqlParserRULE_binlog_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4829)
		p.Match(MySqlParserBINLOG)
	}
	{
		p.SetState(4830)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// ICache_index_statementContext is an interface to support dynamic dispatch.
type ICache_index_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCache_index_statementContext differentiates from other interfaces.
	IsCache_index_statementContext()
}

type Cache_index_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCache_index_statementContext() *Cache_index_statementContext {
	var p = new(Cache_index_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_cache_index_statement
	return p
}

func (*Cache_index_statementContext) IsCache_index_statementContext() {}

func NewCache_index_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Cache_index_statementContext {
	var p = new(Cache_index_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_cache_index_statement

	return p
}

func (s *Cache_index_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Cache_index_statementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *Cache_index_statementContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Cache_index_statementContext) AllTbl_index_list() []ITbl_index_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITbl_index_listContext)(nil)).Elem())
	var tst = make([]ITbl_index_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITbl_index_listContext)
		}
	}

	return tst
}

func (s *Cache_index_statementContext) Tbl_index_list(i int) ITbl_index_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITbl_index_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITbl_index_listContext)
}

func (s *Cache_index_statementContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *Cache_index_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Cache_index_statementContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Cache_index_statementContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Cache_index_statementContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Cache_index_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Cache_index_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Cache_index_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCache_index_statement(s)
	}
}

func (s *Cache_index_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCache_index_statement(s)
	}
}

func (s *Cache_index_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCache_index_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Cache_index_statement() (localctx ICache_index_statementContext) {
	localctx = NewCache_index_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 422, MySqlParserRULE_cache_index_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4832)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(4833)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(4834)
		p.Tbl_index_list()
	}
	p.SetState(4839)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4835)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4836)
			p.Tbl_index_list()
		}

		p.SetState(4841)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(4849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(4842)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(4843)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(4846)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(4844)
				p.Id_list()
			}

		case MySqlParserALL:
			{
				p.SetState(4845)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4848)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	{
		p.SetState(4851)
		p.Match(MySqlParserIN)
	}
	{
		p.SetState(4852)
		p.Id_()
	}

	return localctx
}

// IFlush_statementContext is an interface to support dynamic dispatch.
type IFlush_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlush_statementContext differentiates from other interfaces.
	IsFlush_statementContext()
}

type Flush_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlush_statementContext() *Flush_statementContext {
	var p = new(Flush_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flush_statement
	return p
}

func (*Flush_statementContext) IsFlush_statementContext() {}

func NewFlush_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Flush_statementContext {
	var p = new(Flush_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flush_statement

	return p
}

func (s *Flush_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Flush_statementContext) FLUSH() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLUSH, 0)
}

func (s *Flush_statementContext) AllFlush_option() []IFlush_optionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFlush_optionContext)(nil)).Elem())
	var tst = make([]IFlush_optionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFlush_optionContext)
		}
	}

	return tst
}

func (s *Flush_statementContext) Flush_option(i int) IFlush_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFlush_optionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFlush_optionContext)
}

func (s *Flush_statementContext) NO_WRITE_TO_BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO_WRITE_TO_BINLOG, 0)
}

func (s *Flush_statementContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Flush_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Flush_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Flush_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFlush_statement(s)
	}
}

func (s *Flush_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFlush_statement(s)
	}
}

func (s *Flush_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFlush_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Flush_statement() (localctx IFlush_statementContext) {
	localctx = NewFlush_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 424, MySqlParserRULE_flush_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4854)
		p.Match(MySqlParserFLUSH)
	}
	p.SetState(4856)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL {
		p.SetState(4855)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNO_WRITE_TO_BINLOG || _la == MySqlParserLOCAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(4858)
		p.Flush_option()
	}
	p.SetState(4863)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4859)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4860)
			p.Flush_option()
		}

		p.SetState(4865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IKill_statementContext is an interface to support dynamic dispatch.
type IKill_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKill_statementContext differentiates from other interfaces.
	IsKill_statementContext()
}

type Kill_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKill_statementContext() *Kill_statementContext {
	var p = new(Kill_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_kill_statement
	return p
}

func (*Kill_statementContext) IsKill_statementContext() {}

func NewKill_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Kill_statementContext {
	var p = new(Kill_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_kill_statement

	return p
}

func (s *Kill_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Kill_statementContext) KILL() antlr.TerminalNode {
	return s.GetToken(MySqlParserKILL, 0)
}

func (s *Kill_statementContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Kill_statementContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Kill_statementContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *Kill_statementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *Kill_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Kill_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Kill_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterKill_statement(s)
	}
}

func (s *Kill_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitKill_statement(s)
	}
}

func (s *Kill_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitKill_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Kill_statement() (localctx IKill_statementContext) {
	localctx = NewKill_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 426, MySqlParserRULE_kill_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4866)
		p.Match(MySqlParserKILL)
	}
	p.SetState(4868)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCONNECTION || _la == MySqlParserQUERY {
		p.SetState(4867)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCONNECTION || _la == MySqlParserQUERY) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	p.SetState(4871)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-948)&-(0x1f+1)) == 0 && ((1<<uint((_la-948)))&((1<<(MySqlParserZERO_DECIMAL-948))|(1<<(MySqlParserONE_DECIMAL-948))|(1<<(MySqlParserTWO_DECIMAL-948))|(1<<(MySqlParserDECIMAL_LITERAL-948)))) != 0) {
		{
			p.SetState(4870)
			p.Decimal_literal()
		}

		p.SetState(4873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ILoad_index_into_cacheContext is an interface to support dynamic dispatch.
type ILoad_index_into_cacheContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoad_index_into_cacheContext differentiates from other interfaces.
	IsLoad_index_into_cacheContext()
}

type Load_index_into_cacheContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoad_index_into_cacheContext() *Load_index_into_cacheContext {
	var p = new(Load_index_into_cacheContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_load_index_into_cache
	return p
}

func (*Load_index_into_cacheContext) IsLoad_index_into_cacheContext() {}

func NewLoad_index_into_cacheContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_index_into_cacheContext {
	var p = new(Load_index_into_cacheContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_load_index_into_cache

	return p
}

func (s *Load_index_into_cacheContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_index_into_cacheContext) LOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD, 0)
}

func (s *Load_index_into_cacheContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Load_index_into_cacheContext) INTO() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTO, 0)
}

func (s *Load_index_into_cacheContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *Load_index_into_cacheContext) AllLoad_tbl_index_list() []ILoad_tbl_index_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILoad_tbl_index_listContext)(nil)).Elem())
	var tst = make([]ILoad_tbl_index_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILoad_tbl_index_listContext)
		}
	}

	return tst
}

func (s *Load_index_into_cacheContext) Load_tbl_index_list(i int) ILoad_tbl_index_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoad_tbl_index_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILoad_tbl_index_listContext)
}

func (s *Load_index_into_cacheContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_index_into_cacheContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_index_into_cacheContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoad_index_into_cache(s)
	}
}

func (s *Load_index_into_cacheContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoad_index_into_cache(s)
	}
}

func (s *Load_index_into_cacheContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoad_index_into_cache(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Load_index_into_cache() (localctx ILoad_index_into_cacheContext) {
	localctx = NewLoad_index_into_cacheContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 428, MySqlParserRULE_load_index_into_cache)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4875)
		p.Match(MySqlParserLOAD)
	}
	{
		p.SetState(4876)
		p.Match(MySqlParserINDEX)
	}
	{
		p.SetState(4877)
		p.Match(MySqlParserINTO)
	}
	{
		p.SetState(4878)
		p.Match(MySqlParserCACHE)
	}
	{
		p.SetState(4879)
		p.Load_tbl_index_list()
	}
	p.SetState(4884)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(4880)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(4881)
			p.Load_tbl_index_list()
		}

		p.SetState(4886)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IReset_statementContext is an interface to support dynamic dispatch.
type IReset_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReset_statementContext differentiates from other interfaces.
	IsReset_statementContext()
}

type Reset_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReset_statementContext() *Reset_statementContext {
	var p = new(Reset_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_reset_statement
	return p
}

func (*Reset_statementContext) IsReset_statementContext() {}

func NewReset_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Reset_statementContext {
	var p = new(Reset_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_reset_statement

	return p
}

func (s *Reset_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Reset_statementContext) RESET() antlr.TerminalNode {
	return s.GetToken(MySqlParserRESET, 0)
}

func (s *Reset_statementContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *Reset_statementContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *Reset_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Reset_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Reset_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterReset_statement(s)
	}
}

func (s *Reset_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitReset_statement(s)
	}
}

func (s *Reset_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitReset_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Reset_statement() (localctx IReset_statementContext) {
	localctx = NewReset_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 430, MySqlParserRULE_reset_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4887)
		p.Match(MySqlParserRESET)
	}
	{
		p.SetState(4888)
		p.Match(MySqlParserQUERY)
	}
	{
		p.SetState(4889)
		p.Match(MySqlParserCACHE)
	}

	return localctx
}

// IShutdown_statementContext is an interface to support dynamic dispatch.
type IShutdown_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShutdown_statementContext differentiates from other interfaces.
	IsShutdown_statementContext()
}

type Shutdown_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShutdown_statementContext() *Shutdown_statementContext {
	var p = new(Shutdown_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_shutdown_statement
	return p
}

func (*Shutdown_statementContext) IsShutdown_statementContext() {}

func NewShutdown_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Shutdown_statementContext {
	var p = new(Shutdown_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_shutdown_statement

	return p
}

func (s *Shutdown_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Shutdown_statementContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *Shutdown_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Shutdown_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Shutdown_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterShutdown_statement(s)
	}
}

func (s *Shutdown_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitShutdown_statement(s)
	}
}

func (s *Shutdown_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitShutdown_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Shutdown_statement() (localctx IShutdown_statementContext) {
	localctx = NewShutdown_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 432, MySqlParserRULE_shutdown_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4891)
		p.Match(MySqlParserSHUTDOWN)
	}

	return localctx
}

// ITbl_index_listContext is an interface to support dynamic dispatch.
type ITbl_index_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTbl_index_listContext differentiates from other interfaces.
	IsTbl_index_listContext()
}

type Tbl_index_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTbl_index_listContext() *Tbl_index_listContext {
	var p = new(Tbl_index_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_tbl_index_list
	return p
}

func (*Tbl_index_listContext) IsTbl_index_listContext() {}

func NewTbl_index_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Tbl_index_listContext {
	var p = new(Tbl_index_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_tbl_index_list

	return p
}

func (s *Tbl_index_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Tbl_index_listContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Tbl_index_listContext) Id_list() IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Tbl_index_listContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Tbl_index_listContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Tbl_index_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Tbl_index_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Tbl_index_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTbl_index_list(s)
	}
}

func (s *Tbl_index_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTbl_index_list(s)
	}
}

func (s *Tbl_index_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTbl_index_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Tbl_index_list() (localctx ITbl_index_listContext) {
	localctx = NewTbl_index_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 434, MySqlParserRULE_tbl_index_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4893)
		p.Table_name()
	}
	p.SetState(4901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX || _la == MySqlParserKEY || _la == MySqlParserLR_BRACKET {
		p.SetState(4895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(4894)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4897)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4898)
			p.Id_list()
		}
		{
			p.SetState(4899)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IFlush_optionContext is an interface to support dynamic dispatch.
type IFlush_optionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFlush_optionContext differentiates from other interfaces.
	IsFlush_optionContext()
}

type Flush_optionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFlush_optionContext() *Flush_optionContext {
	var p = new(Flush_optionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_flush_option
	return p
}

func (*Flush_optionContext) IsFlush_optionContext() {}

func NewFlush_optionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Flush_optionContext {
	var p = new(Flush_optionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_flush_option

	return p
}

func (s *Flush_optionContext) GetParser() antlr.Parser { return s.parser }

func (s *Flush_optionContext) DES_KEY_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_KEY_FILE, 0)
}

func (s *Flush_optionContext) HOSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOSTS, 0)
}

func (s *Flush_optionContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *Flush_optionContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *Flush_optionContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Flush_optionContext) ERROR() antlr.TerminalNode {
	return s.GetToken(MySqlParserERROR, 0)
}

func (s *Flush_optionContext) GENERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGENERAL, 0)
}

func (s *Flush_optionContext) RELAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAY, 0)
}

func (s *Flush_optionContext) SLOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLOW, 0)
}

func (s *Flush_optionContext) Channel_option() IChannel_optionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannel_optionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannel_optionContext)
}

func (s *Flush_optionContext) OPTIMIZER_COSTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIMIZER_COSTS, 0)
}

func (s *Flush_optionContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *Flush_optionContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *Flush_optionContext) CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCACHE, 0)
}

func (s *Flush_optionContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *Flush_optionContext) USER_RESOURCES() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER_RESOURCES, 0)
}

func (s *Flush_optionContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *Flush_optionContext) WITH() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITH, 0)
}

func (s *Flush_optionContext) READ() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAD, 0)
}

func (s *Flush_optionContext) LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCK, 0)
}

func (s *Flush_optionContext) Table_list() ITable_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_listContext)
}

func (s *Flush_optionContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *Flush_optionContext) EXPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT, 0)
}

func (s *Flush_optionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Flush_optionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Flush_optionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFlush_option(s)
	}
}

func (s *Flush_optionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFlush_option(s)
	}
}

func (s *Flush_optionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFlush_option(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Flush_option() (localctx IFlush_optionContext) {
	localctx = NewFlush_optionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 436, MySqlParserRULE_flush_option)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4935)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 721, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(4903)
			p.Match(MySqlParserDES_KEY_FILE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4904)
			p.Match(MySqlParserHOSTS)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(4906)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(MySqlParserENGINE-308))|(1<<(MySqlParserERROR-308))|(1<<(MySqlParserGENERAL-308)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW {
			p.SetState(4905)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserBINARY || (((_la-308)&-(0x1f+1)) == 0 && ((1<<uint((_la-308)))&((1<<(MySqlParserENGINE-308))|(1<<(MySqlParserERROR-308))|(1<<(MySqlParserGENERAL-308)))) != 0) || _la == MySqlParserRELAY || _la == MySqlParserSLOW) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4908)
			p.Match(MySqlParserLOGS)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(4909)
			p.Match(MySqlParserRELAY)
		}
		{
			p.SetState(4910)
			p.Match(MySqlParserLOGS)
		}
		p.SetState(4912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(4911)
				p.Channel_option()
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(4914)
			p.Match(MySqlParserOPTIMIZER_COSTS)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(4915)
			p.Match(MySqlParserPRIVILEGES)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(4916)
			p.Match(MySqlParserQUERY)
		}
		{
			p.SetState(4917)
			p.Match(MySqlParserCACHE)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(4918)
			p.Match(MySqlParserSTATUS)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(4919)
			p.Match(MySqlParserUSER_RESOURCES)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(4920)
			p.Match(MySqlParserTABLES)
		}
		p.SetState(4924)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserWITH {
			{
				p.SetState(4921)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4922)
				p.Match(MySqlParserREAD)
			}
			{
				p.SetState(4923)
				p.Match(MySqlParserLOCK)
			}

		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(4926)
			p.Match(MySqlParserTABLES)
		}
		{
			p.SetState(4927)
			p.Table_list()
		}
		p.SetState(4933)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserWITH:
			{
				p.SetState(4928)
				p.Match(MySqlParserWITH)
			}
			{
				p.SetState(4929)
				p.Match(MySqlParserREAD)
			}
			{
				p.SetState(4930)
				p.Match(MySqlParserLOCK)
			}

		case MySqlParserFOR:
			{
				p.SetState(4931)
				p.Match(MySqlParserFOR)
			}
			{
				p.SetState(4932)
				p.Match(MySqlParserEXPORT)
			}

		case MySqlParserEOF, MySqlParserMINUS, MySqlParserCOMMA, MySqlParserSEMI:

		default:
		}

	}

	return localctx
}

// ILoad_tbl_index_listContext is an interface to support dynamic dispatch.
type ILoad_tbl_index_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetPartition_list returns the partition_list rule contexts.
	GetPartition_list() IId_listContext

	// GetIndex_list returns the index_list rule contexts.
	GetIndex_list() IId_listContext

	// SetPartition_list sets the partition_list rule contexts.
	SetPartition_list(IId_listContext)

	// SetIndex_list sets the index_list rule contexts.
	SetIndex_list(IId_listContext)

	// IsLoad_tbl_index_listContext differentiates from other interfaces.
	IsLoad_tbl_index_listContext()
}

type Load_tbl_index_listContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	partition_list IId_listContext
	index_list     IId_listContext
}

func NewEmptyLoad_tbl_index_listContext() *Load_tbl_index_listContext {
	var p = new(Load_tbl_index_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_load_tbl_index_list
	return p
}

func (*Load_tbl_index_listContext) IsLoad_tbl_index_listContext() {}

func NewLoad_tbl_index_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Load_tbl_index_listContext {
	var p = new(Load_tbl_index_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_load_tbl_index_list

	return p
}

func (s *Load_tbl_index_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Load_tbl_index_listContext) GetPartition_list() IId_listContext { return s.partition_list }

func (s *Load_tbl_index_listContext) GetIndex_list() IId_listContext { return s.index_list }

func (s *Load_tbl_index_listContext) SetPartition_list(v IId_listContext) { s.partition_list = v }

func (s *Load_tbl_index_listContext) SetIndex_list(v IId_listContext) { s.index_list = v }

func (s *Load_tbl_index_listContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Load_tbl_index_listContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITION, 0)
}

func (s *Load_tbl_index_listContext) IGNORE() antlr.TerminalNode {
	return s.GetToken(MySqlParserIGNORE, 0)
}

func (s *Load_tbl_index_listContext) LEAVES() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAVES, 0)
}

func (s *Load_tbl_index_listContext) AllId_list() []IId_listContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_listContext)(nil)).Elem())
	var tst = make([]IId_listContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_listContext)
		}
	}

	return tst
}

func (s *Load_tbl_index_listContext) Id_list(i int) IId_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_listContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_listContext)
}

func (s *Load_tbl_index_listContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Load_tbl_index_listContext) INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserINDEX, 0)
}

func (s *Load_tbl_index_listContext) KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY, 0)
}

func (s *Load_tbl_index_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Load_tbl_index_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Load_tbl_index_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLoad_tbl_index_list(s)
	}
}

func (s *Load_tbl_index_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLoad_tbl_index_list(s)
	}
}

func (s *Load_tbl_index_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLoad_tbl_index_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Load_tbl_index_list() (localctx ILoad_tbl_index_listContext) {
	localctx = NewLoad_tbl_index_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 438, MySqlParserRULE_load_tbl_index_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4937)
		p.Table_name()
	}
	p.SetState(4945)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserPARTITION {
		{
			p.SetState(4938)
			p.Match(MySqlParserPARTITION)
		}
		{
			p.SetState(4939)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(4942)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
			{
				p.SetState(4940)

				var _x = p.Id_list()

				localctx.(*Load_tbl_index_listContext).partition_list = _x
			}

		case MySqlParserALL:
			{
				p.SetState(4941)
				p.Match(MySqlParserALL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(4944)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(4954)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserINDEX || _la == MySqlParserKEY || _la == MySqlParserLR_BRACKET {
		p.SetState(4948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINDEX || _la == MySqlParserKEY {
			p.SetState(4947)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserINDEX || _la == MySqlParserKEY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(4950)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(4951)

			var _x = p.Id_list()

			localctx.(*Load_tbl_index_listContext).index_list = _x
		}
		{
			p.SetState(4952)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(4958)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserIGNORE {
		{
			p.SetState(4956)
			p.Match(MySqlParserIGNORE)
		}
		{
			p.SetState(4957)
			p.Match(MySqlParserLEAVES)
		}

	}

	return localctx
}

// ISimple_describe_statementContext is an interface to support dynamic dispatch.
type ISimple_describe_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCol_wildcard returns the col_wildcard token.
	GetCol_wildcard() antlr.Token

	// SetCol_wildcard sets the col_wildcard token.
	SetCol_wildcard(antlr.Token)

	// GetColname returns the colname rule contexts.
	GetColname() IId_Context

	// SetColname sets the colname rule contexts.
	SetColname(IId_Context)

	// IsSimple_describe_statementContext differentiates from other interfaces.
	IsSimple_describe_statementContext()
}

type Simple_describe_statementContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	colname      IId_Context
	col_wildcard antlr.Token
}

func NewEmptySimple_describe_statementContext() *Simple_describe_statementContext {
	var p = new(Simple_describe_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simple_describe_statement
	return p
}

func (*Simple_describe_statementContext) IsSimple_describe_statementContext() {}

func NewSimple_describe_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_describe_statementContext {
	var p = new(Simple_describe_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simple_describe_statement

	return p
}

func (s *Simple_describe_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_describe_statementContext) GetCol_wildcard() antlr.Token { return s.col_wildcard }

func (s *Simple_describe_statementContext) SetCol_wildcard(v antlr.Token) { s.col_wildcard = v }

func (s *Simple_describe_statementContext) GetColname() IId_Context { return s.colname }

func (s *Simple_describe_statementContext) SetColname(v IId_Context) { s.colname = v }

func (s *Simple_describe_statementContext) Table_name() ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Simple_describe_statementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *Simple_describe_statementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *Simple_describe_statementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *Simple_describe_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Simple_describe_statementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Simple_describe_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_describe_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_describe_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimple_describe_statement(s)
	}
}

func (s *Simple_describe_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimple_describe_statement(s)
	}
}

func (s *Simple_describe_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimple_describe_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Simple_describe_statement() (localctx ISimple_describe_statementContext) {
	localctx = NewSimple_describe_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 440, MySqlParserRULE_simple_describe_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4960)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(MySqlParserDESC-39))|(1<<(MySqlParserDESCRIBE-39))|(1<<(MySqlParserEXPLAIN-39)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	{
		p.SetState(4961)
		p.Table_name()
	}
	p.SetState(4964)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		{
			p.SetState(4962)

			var _x = p.Id_()

			localctx.(*Simple_describe_statementContext).colname = _x
		}

	case MySqlParserSTRING_LITERAL:
		{
			p.SetState(4963)

			var _m = p.Match(MySqlParserSTRING_LITERAL)

			localctx.(*Simple_describe_statementContext).col_wildcard = _m
		}

	case MySqlParserEOF, MySqlParserMINUS, MySqlParserSEMI:

	default:
	}

	return localctx
}

// IFull_describe_statementContext is an interface to support dynamic dispatch.
type IFull_describe_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_describe_statementContext differentiates from other interfaces.
	IsFull_describe_statementContext()
}

type Full_describe_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_describe_statementContext() *Full_describe_statementContext {
	var p = new(Full_describe_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_full_describe_statement
	return p
}

func (*Full_describe_statementContext) IsFull_describe_statementContext() {}

func NewFull_describe_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_describe_statementContext {
	var p = new(Full_describe_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_full_describe_statement

	return p
}

func (s *Full_describe_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_describe_statementContext) Describe_object_clause() IDescribe_object_clauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescribe_object_clauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescribe_object_clauseContext)
}

func (s *Full_describe_statementContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPLAIN, 0)
}

func (s *Full_describe_statementContext) DESCRIBE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESCRIBE, 0)
}

func (s *Full_describe_statementContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *Full_describe_statementContext) EXTENDED() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENDED, 0)
}

func (s *Full_describe_statementContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *Full_describe_statementContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *Full_describe_statementContext) TRADITIONAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRADITIONAL, 0)
}

func (s *Full_describe_statementContext) JSON() antlr.TerminalNode {
	return s.GetToken(MySqlParserJSON, 0)
}

func (s *Full_describe_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_describe_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_describe_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFull_describe_statement(s)
	}
}

func (s *Full_describe_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFull_describe_statement(s)
	}
}

func (s *Full_describe_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFull_describe_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Full_describe_statement() (localctx IFull_describe_statementContext) {
	localctx = NewFull_describe_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 442, MySqlParserRULE_full_describe_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(4966)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(MySqlParserDESC-39))|(1<<(MySqlParserDESCRIBE-39))|(1<<(MySqlParserEXPLAIN-39)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(4972)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserEXTENDED:
		{
			p.SetState(4967)
			p.Match(MySqlParserEXTENDED)
		}

	case MySqlParserPARTITIONS:
		{
			p.SetState(4968)
			p.Match(MySqlParserPARTITIONS)
		}

	case MySqlParserFORMAT:
		{
			p.SetState(4969)
			p.Match(MySqlParserFORMAT)
		}
		{
			p.SetState(4970)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		p.SetState(4971)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserJSON || _la == MySqlParserTRADITIONAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserDELETE, MySqlParserFOR, MySqlParserINSERT, MySqlParserREPLACE, MySqlParserSELECT, MySqlParserUPDATE, MySqlParserLR_BRACKET:

	default:
	}
	{
		p.SetState(4974)
		p.Describe_object_clause()
	}

	return localctx
}

// IHelp_statementContext is an interface to support dynamic dispatch.
type IHelp_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHelp_statementContext differentiates from other interfaces.
	IsHelp_statementContext()
}

type Help_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHelp_statementContext() *Help_statementContext {
	var p = new(Help_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_help_statement
	return p
}

func (*Help_statementContext) IsHelp_statementContext() {}

func NewHelp_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Help_statementContext {
	var p = new(Help_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_help_statement

	return p
}

func (s *Help_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Help_statementContext) HELP() antlr.TerminalNode {
	return s.GetToken(MySqlParserHELP, 0)
}

func (s *Help_statementContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Help_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Help_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Help_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHelp_statement(s)
	}
}

func (s *Help_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHelp_statement(s)
	}
}

func (s *Help_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHelp_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Help_statement() (localctx IHelp_statementContext) {
	localctx = NewHelp_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 444, MySqlParserRULE_help_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4976)
		p.Match(MySqlParserHELP)
	}
	{
		p.SetState(4977)
		p.Match(MySqlParserSTRING_LITERAL)
	}

	return localctx
}

// IUse_statementContext is an interface to support dynamic dispatch.
type IUse_statementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUse_statementContext differentiates from other interfaces.
	IsUse_statementContext()
}

type Use_statementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUse_statementContext() *Use_statementContext {
	var p = new(Use_statementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_use_statement
	return p
}

func (*Use_statementContext) IsUse_statementContext() {}

func NewUse_statementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Use_statementContext {
	var p = new(Use_statementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_use_statement

	return p
}

func (s *Use_statementContext) GetParser() antlr.Parser { return s.parser }

func (s *Use_statementContext) USE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSE, 0)
}

func (s *Use_statementContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Use_statementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Use_statementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Use_statementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUse_statement(s)
	}
}

func (s *Use_statementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUse_statement(s)
	}
}

func (s *Use_statementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUse_statement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Use_statement() (localctx IUse_statementContext) {
	localctx = NewUse_statementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 446, MySqlParserRULE_use_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4979)
		p.Match(MySqlParserUSE)
	}
	{
		p.SetState(4980)
		p.Id_()
	}

	return localctx
}

// IDescribe_object_clauseContext is an interface to support dynamic dispatch.
type IDescribe_object_clauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescribe_object_clauseContext differentiates from other interfaces.
	IsDescribe_object_clauseContext()
}

type Describe_object_clauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescribe_object_clauseContext() *Describe_object_clauseContext {
	var p = new(Describe_object_clauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_describe_object_clause
	return p
}

func (*Describe_object_clauseContext) IsDescribe_object_clauseContext() {}

func NewDescribe_object_clauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Describe_object_clauseContext {
	var p = new(Describe_object_clauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_describe_object_clause

	return p
}

func (s *Describe_object_clauseContext) GetParser() antlr.Parser { return s.parser }

func (s *Describe_object_clauseContext) CopyFrom(ctx *Describe_object_clauseContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Describe_object_clauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Describe_object_clauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ConnectionDescObjContext struct {
	*Describe_object_clauseContext
}

func NewConnectionDescObjContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConnectionDescObjContext {
	var p = new(ConnectionDescObjContext)

	p.Describe_object_clauseContext = NewEmptyDescribe_object_clauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Describe_object_clauseContext))

	return p
}

func (s *ConnectionDescObjContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConnectionDescObjContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *ConnectionDescObjContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *ConnectionDescObjContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *ConnectionDescObjContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConnectionDescObj(s)
	}
}

func (s *ConnectionDescObjContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConnectionDescObj(s)
	}
}

func (s *ConnectionDescObjContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConnectionDescObj(s)

	default:
		return t.VisitChildren(s)
	}
}

type DescstmtDescObjContext struct {
	*Describe_object_clauseContext
}

func NewDescstmtDescObjContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DescstmtDescObjContext {
	var p = new(DescstmtDescObjContext)

	p.Describe_object_clauseContext = NewEmptyDescribe_object_clauseContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Describe_object_clauseContext))

	return p
}

func (s *DescstmtDescObjContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescstmtDescObjContext) Select_statement() ISelect_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelect_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelect_statementContext)
}

func (s *DescstmtDescObjContext) Delete_statement() IDelete_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDelete_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDelete_statementContext)
}

func (s *DescstmtDescObjContext) Insert_statement() IInsert_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInsert_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInsert_statementContext)
}

func (s *DescstmtDescObjContext) Replace_statement() IReplace_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReplace_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReplace_statementContext)
}

func (s *DescstmtDescObjContext) Update_statement() IUpdate_statementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUpdate_statementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUpdate_statementContext)
}

func (s *DescstmtDescObjContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDescstmtDescObj(s)
	}
}

func (s *DescstmtDescObjContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDescstmtDescObj(s)
	}
}

func (s *DescstmtDescObjContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDescstmtDescObj(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Describe_object_clause() (localctx IDescribe_object_clauseContext) {
	localctx = NewDescribe_object_clauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 448, MySqlParserRULE_describe_object_clause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(4992)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDELETE, MySqlParserINSERT, MySqlParserREPLACE, MySqlParserSELECT, MySqlParserUPDATE, MySqlParserLR_BRACKET:
		localctx = NewDescstmtDescObjContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(4987)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSELECT, MySqlParserLR_BRACKET:
			{
				p.SetState(4982)
				p.Select_statement()
			}

		case MySqlParserDELETE:
			{
				p.SetState(4983)
				p.Delete_statement()
			}

		case MySqlParserINSERT:
			{
				p.SetState(4984)
				p.Insert_statement()
			}

		case MySqlParserREPLACE:
			{
				p.SetState(4985)
				p.Replace_statement()
			}

		case MySqlParserUPDATE:
			{
				p.SetState(4986)
				p.Update_statement()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	case MySqlParserFOR:
		localctx = NewConnectionDescObjContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(4989)
			p.Match(MySqlParserFOR)
		}
		{
			p.SetState(4990)
			p.Match(MySqlParserCONNECTION)
		}
		{
			p.SetState(4991)
			p.Id_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITable_nameContext is an interface to support dynamic dispatch.
type ITable_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_nameContext differentiates from other interfaces.
	IsTable_nameContext()
}

type Table_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_nameContext() *Table_nameContext {
	var p = new(Table_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_name
	return p
}

func (*Table_nameContext) IsTable_nameContext() {}

func NewTable_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_nameContext {
	var p = new(Table_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_name

	return p
}

func (s *Table_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_nameContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Table_nameContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Table_nameContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *Table_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTable_name(s)
	}
}

func (s *Table_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTable_name(s)
	}
}

func (s *Table_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTable_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_name() (localctx ITable_nameContext) {
	localctx = NewTable_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 450, MySqlParserRULE_table_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(4994)
		p.Id_()
	}
	p.SetState(4998)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 731, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(4995)
			p.Match(MySqlParserDOT_ID)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 731, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(4996)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(4997)
			p.Id_()
		}

	}

	return localctx
}

// IFull_idContext is an interface to support dynamic dispatch.
type IFull_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_idContext differentiates from other interfaces.
	IsFull_idContext()
}

type Full_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_idContext() *Full_idContext {
	var p = new(Full_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_full_id
	return p
}

func (*Full_idContext) IsFull_idContext() {}

func NewFull_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_idContext {
	var p = new(Full_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_full_id

	return p
}

func (s *Full_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_idContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Full_idContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Full_idContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *Full_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFull_id(s)
	}
}

func (s *Full_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFull_id(s)
	}
}

func (s *Full_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFull_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Full_id() (localctx IFull_idContext) {
	localctx = NewFull_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 452, MySqlParserRULE_full_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5000)
		p.Id_()
	}
	p.SetState(5004)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 732, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5001)
			p.Match(MySqlParserDOT_ID)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 732, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(5002)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5003)
			p.Id_()
		}

	}

	return localctx
}

// IFull_column_nameContext is an interface to support dynamic dispatch.
type IFull_column_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFull_column_nameContext differentiates from other interfaces.
	IsFull_column_nameContext()
}

type Full_column_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFull_column_nameContext() *Full_column_nameContext {
	var p = new(Full_column_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_full_column_name
	return p
}

func (*Full_column_nameContext) IsFull_column_nameContext() {}

func NewFull_column_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Full_column_nameContext {
	var p = new(Full_column_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_full_column_name

	return p
}

func (s *Full_column_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Full_column_nameContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Full_column_nameContext) AllDot_ext_id() []IDot_ext_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDot_ext_idContext)(nil)).Elem())
	var tst = make([]IDot_ext_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDot_ext_idContext)
		}
	}

	return tst
}

func (s *Full_column_nameContext) Dot_ext_id(i int) IDot_ext_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_ext_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDot_ext_idContext)
}

func (s *Full_column_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Full_column_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Full_column_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFull_column_name(s)
	}
}

func (s *Full_column_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFull_column_name(s)
	}
}

func (s *Full_column_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFull_column_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Full_column_name() (localctx IFull_column_nameContext) {
	localctx = NewFull_column_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 454, MySqlParserRULE_full_column_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5006)
		p.Id_()
	}
	p.SetState(5011)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 734, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5007)
			p.Dot_ext_id()
		}
		p.SetState(5009)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 733, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5008)
				p.Dot_ext_id()
			}

		}

	}

	return localctx
}

// IIndex_col_nameContext is an interface to support dynamic dispatch.
type IIndex_col_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_col_nameContext differentiates from other interfaces.
	IsIndex_col_nameContext()
}

type Index_col_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_col_nameContext() *Index_col_nameContext {
	var p = new(Index_col_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_col_name
	return p
}

func (*Index_col_nameContext) IsIndex_col_nameContext() {}

func NewIndex_col_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_col_nameContext {
	var p = new(Index_col_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_col_name

	return p
}

func (s *Index_col_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_col_nameContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Index_col_nameContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Index_col_nameContext) ASC() antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, 0)
}

func (s *Index_col_nameContext) DESC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, 0)
}

func (s *Index_col_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_col_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_col_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndex_col_name(s)
	}
}

func (s *Index_col_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndex_col_name(s)
	}
}

func (s *Index_col_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndex_col_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_col_name() (localctx IIndex_col_nameContext) {
	localctx = NewIndex_col_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 456, MySqlParserRULE_index_col_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5013)
		p.Id_()
	}
	p.SetState(5018)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserLR_BRACKET {
		{
			p.SetState(5014)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5015)
			p.Decimal_literal()
		}
		{
			p.SetState(5016)
			p.Match(MySqlParserRR_BRACKET)
		}

	}
	p.SetState(5021)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserASC || _la == MySqlParserDESC {
		p.SetState(5020)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserASC || _la == MySqlParserDESC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IUser_nameContext is an interface to support dynamic dispatch.
type IUser_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_nameContext differentiates from other interfaces.
	IsUser_nameContext()
}

type User_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_nameContext() *User_nameContext {
	var p = new(User_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_name
	return p
}

func (*User_nameContext) IsUser_nameContext() {}

func NewUser_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_nameContext {
	var p = new(User_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_name

	return p
}

func (s *User_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *User_nameContext) STRING_USER_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_USER_NAME, 0)
}

func (s *User_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *User_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUser_name(s)
	}
}

func (s *User_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUser_name(s)
	}
}

func (s *User_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUser_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_name() (localctx IUser_nameContext) {
	localctx = NewUser_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 458, MySqlParserRULE_user_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5023)
		p.Match(MySqlParserSTRING_USER_NAME)
	}

	return localctx
}

// IMysql_variableContext is an interface to support dynamic dispatch.
type IMysql_variableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMysql_variableContext differentiates from other interfaces.
	IsMysql_variableContext()
}

type Mysql_variableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMysql_variableContext() *Mysql_variableContext {
	var p = new(Mysql_variableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_mysql_variable
	return p
}

func (*Mysql_variableContext) IsMysql_variableContext() {}

func NewMysql_variableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Mysql_variableContext {
	var p = new(Mysql_variableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_mysql_variable

	return p
}

func (s *Mysql_variableContext) GetParser() antlr.Parser { return s.parser }

func (s *Mysql_variableContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *Mysql_variableContext) GLOBAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL_ID, 0)
}

func (s *Mysql_variableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Mysql_variableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Mysql_variableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMysql_variable(s)
	}
}

func (s *Mysql_variableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMysql_variable(s)
	}
}

func (s *Mysql_variableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMysql_variable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Mysql_variable() (localctx IMysql_variableContext) {
	localctx = NewMysql_variableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 460, MySqlParserRULE_mysql_variable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5025)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserLOCAL_ID || _la == MySqlParserGLOBAL_ID) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICharset_nameContext is an interface to support dynamic dispatch.
type ICharset_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharset_nameContext differentiates from other interfaces.
	IsCharset_nameContext()
}

type Charset_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharset_nameContext() *Charset_nameContext {
	var p = new(Charset_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charset_name
	return p
}

func (*Charset_nameContext) IsCharset_nameContext() {}

func NewCharset_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Charset_nameContext {
	var p = new(Charset_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charset_name

	return p
}

func (s *Charset_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Charset_nameContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *Charset_nameContext) Charset_name_base() ICharset_name_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_name_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_name_baseContext)
}

func (s *Charset_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Charset_nameContext) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *Charset_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Charset_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Charset_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharset_name(s)
	}
}

func (s *Charset_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharset_name(s)
	}
}

func (s *Charset_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharset_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Charset_name() (localctx ICharset_nameContext) {
	localctx = NewCharset_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 462, MySqlParserRULE_charset_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5031)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserBINARY:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5027)
			p.Match(MySqlParserBINARY)
		}

	case MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5028)
			p.Charset_name_base()
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5029)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserCHARSET_REVERSE_QOUTE_STRING:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5030)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICollation_nameContext is an interface to support dynamic dispatch.
type ICollation_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCollation_nameContext differentiates from other interfaces.
	IsCollation_nameContext()
}

type Collation_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCollation_nameContext() *Collation_nameContext {
	var p = new(Collation_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_collation_name
	return p
}

func (*Collation_nameContext) IsCollation_nameContext() {}

func NewCollation_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Collation_nameContext {
	var p = new(Collation_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_collation_name

	return p
}

func (s *Collation_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Collation_nameContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Collation_nameContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Collation_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Collation_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Collation_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollation_name(s)
	}
}

func (s *Collation_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollation_name(s)
	}
}

func (s *Collation_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollation_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Collation_name() (localctx ICollation_nameContext) {
	localctx = NewCollation_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 464, MySqlParserRULE_collation_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5035)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5033)
			p.Id_()
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5034)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEngine_nameContext is an interface to support dynamic dispatch.
type IEngine_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEngine_nameContext differentiates from other interfaces.
	IsEngine_nameContext()
}

type Engine_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEngine_nameContext() *Engine_nameContext {
	var p = new(Engine_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_engine_name
	return p
}

func (*Engine_nameContext) IsEngine_nameContext() {}

func NewEngine_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Engine_nameContext {
	var p = new(Engine_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_engine_name

	return p
}

func (s *Engine_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Engine_nameContext) ARCHIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserARCHIVE, 0)
}

func (s *Engine_nameContext) BLACKHOLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLACKHOLE, 0)
}

func (s *Engine_nameContext) CSV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCSV, 0)
}

func (s *Engine_nameContext) FEDERATED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFEDERATED, 0)
}

func (s *Engine_nameContext) INNODB() antlr.TerminalNode {
	return s.GetToken(MySqlParserINNODB, 0)
}

func (s *Engine_nameContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *Engine_nameContext) MRG_MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMRG_MYISAM, 0)
}

func (s *Engine_nameContext) MYISAM() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYISAM, 0)
}

func (s *Engine_nameContext) NDB() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDB, 0)
}

func (s *Engine_nameContext) NDBCLUSTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserNDBCLUSTER, 0)
}

func (s *Engine_nameContext) PERFOMANCE_SCHEMA() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERFOMANCE_SCHEMA, 0)
}

func (s *Engine_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Engine_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Engine_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterEngine_name(s)
	}
}

func (s *Engine_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitEngine_name(s)
	}
}

func (s *Engine_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitEngine_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Engine_name() (localctx IEngine_nameContext) {
	localctx = NewEngine_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 466, MySqlParserRULE_engine_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5037)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-606)&-(0x1f+1)) == 0 && ((1<<uint((_la-606)))&((1<<(MySqlParserARCHIVE-606))|(1<<(MySqlParserBLACKHOLE-606))|(1<<(MySqlParserCSV-606))|(1<<(MySqlParserFEDERATED-606))|(1<<(MySqlParserINNODB-606))|(1<<(MySqlParserMEMORY-606))|(1<<(MySqlParserMRG_MYISAM-606))|(1<<(MySqlParserMYISAM-606))|(1<<(MySqlParserNDB-606))|(1<<(MySqlParserNDBCLUSTER-606))|(1<<(MySqlParserPERFOMANCE_SCHEMA-606)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IUuid_setContext is an interface to support dynamic dispatch.
type IUuid_setContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUuid_setContext differentiates from other interfaces.
	IsUuid_setContext()
}

type Uuid_setContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUuid_setContext() *Uuid_setContext {
	var p = new(Uuid_setContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_uuid_set
	return p
}

func (*Uuid_setContext) IsUuid_setContext() {}

func NewUuid_setContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Uuid_setContext {
	var p = new(Uuid_setContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_uuid_set

	return p
}

func (s *Uuid_setContext) GetParser() antlr.Parser { return s.parser }

func (s *Uuid_setContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Uuid_setContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Uuid_setContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Uuid_setContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Uuid_setContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUuid_set(s)
	}
}

func (s *Uuid_setContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUuid_set(s)
	}
}

func (s *Uuid_setContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUuid_set(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Uuid_set() (localctx IUuid_setContext) {
	localctx = NewUuid_setContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 468, MySqlParserRULE_uuid_set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5039)
		p.Decimal_literal()
	}
	{
		p.SetState(5040)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5041)
		p.Decimal_literal()
	}
	{
		p.SetState(5042)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5043)
		p.Decimal_literal()
	}
	{
		p.SetState(5044)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5045)
		p.Decimal_literal()
	}
	{
		p.SetState(5046)
		p.Match(MySqlParserMINUS)
	}
	{
		p.SetState(5047)
		p.Decimal_literal()
	}
	p.SetState(5053)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == MySqlParserCOLON_SYMB {
		{
			p.SetState(5048)
			p.Match(MySqlParserCOLON_SYMB)
		}
		{
			p.SetState(5049)
			p.Decimal_literal()
		}
		{
			p.SetState(5050)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5051)
			p.Decimal_literal()
		}

		p.SetState(5055)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IXidContext is an interface to support dynamic dispatch.
type IXidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetXid_gtrid returns the xid_gtrid rule contexts.
	GetXid_gtrid() IXid_string_idContext

	// GetXid_bqual returns the xid_bqual rule contexts.
	GetXid_bqual() IXid_string_idContext

	// GetXid_formatID returns the xid_formatID rule contexts.
	GetXid_formatID() IDecimal_literalContext

	// SetXid_gtrid sets the xid_gtrid rule contexts.
	SetXid_gtrid(IXid_string_idContext)

	// SetXid_bqual sets the xid_bqual rule contexts.
	SetXid_bqual(IXid_string_idContext)

	// SetXid_formatID sets the xid_formatID rule contexts.
	SetXid_formatID(IDecimal_literalContext)

	// IsXidContext differentiates from other interfaces.
	IsXidContext()
}

type XidContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	xid_gtrid    IXid_string_idContext
	xid_bqual    IXid_string_idContext
	xid_formatID IDecimal_literalContext
}

func NewEmptyXidContext() *XidContext {
	var p = new(XidContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xid
	return p
}

func (*XidContext) IsXidContext() {}

func NewXidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *XidContext {
	var p = new(XidContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xid

	return p
}

func (s *XidContext) GetParser() antlr.Parser { return s.parser }

func (s *XidContext) GetXid_gtrid() IXid_string_idContext { return s.xid_gtrid }

func (s *XidContext) GetXid_bqual() IXid_string_idContext { return s.xid_bqual }

func (s *XidContext) GetXid_formatID() IDecimal_literalContext { return s.xid_formatID }

func (s *XidContext) SetXid_gtrid(v IXid_string_idContext) { s.xid_gtrid = v }

func (s *XidContext) SetXid_bqual(v IXid_string_idContext) { s.xid_bqual = v }

func (s *XidContext) SetXid_formatID(v IDecimal_literalContext) { s.xid_formatID = v }

func (s *XidContext) AllXid_string_id() []IXid_string_idContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IXid_string_idContext)(nil)).Elem())
	var tst = make([]IXid_string_idContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IXid_string_idContext)
		}
	}

	return tst
}

func (s *XidContext) Xid_string_id(i int) IXid_string_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IXid_string_idContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IXid_string_idContext)
}

func (s *XidContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *XidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *XidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *XidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXid(s)
	}
}

func (s *XidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXid(s)
	}
}

func (s *XidContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXid(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xid() (localctx IXidContext) {
	localctx = NewXidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 470, MySqlParserRULE_xid)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5057)

		var _x = p.Xid_string_id()

		localctx.(*XidContext).xid_gtrid = _x
	}
	p.SetState(5064)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(5058)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5059)

			var _x = p.Xid_string_id()

			localctx.(*XidContext).xid_bqual = _x
		}
		p.SetState(5062)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOMMA {
			{
				p.SetState(5060)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5061)

				var _x = p.Decimal_literal()

				localctx.(*XidContext).xid_formatID = _x
			}

		}

	}

	return localctx
}

// IXid_string_idContext is an interface to support dynamic dispatch.
type IXid_string_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsXid_string_idContext differentiates from other interfaces.
	IsXid_string_idContext()
}

type Xid_string_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyXid_string_idContext() *Xid_string_idContext {
	var p = new(Xid_string_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_xid_string_id
	return p
}

func (*Xid_string_idContext) IsXid_string_idContext() {}

func NewXid_string_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Xid_string_idContext {
	var p = new(Xid_string_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_xid_string_id

	return p
}

func (s *Xid_string_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Xid_string_idContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Xid_string_idContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *Xid_string_idContext) AllHEXADECIMAL_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserHEXADECIMAL_LITERAL)
}

func (s *Xid_string_idContext) HEXADECIMAL_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, i)
}

func (s *Xid_string_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Xid_string_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Xid_string_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterXid_string_id(s)
	}
}

func (s *Xid_string_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitXid_string_id(s)
	}
}

func (s *Xid_string_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitXid_string_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Xid_string_id() (localctx IXid_string_idContext) {
	localctx = NewXid_string_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 472, MySqlParserRULE_xid_string_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5073)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5066)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	case MySqlParserBIT_STRING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5067)
			p.Match(MySqlParserBIT_STRING)
		}

	case MySqlParserHEXADECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5069)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserHEXADECIMAL_LITERAL {
			{
				p.SetState(5068)
				p.Match(MySqlParserHEXADECIMAL_LITERAL)
			}

			p.SetState(5071)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAuth_pluginContext is an interface to support dynamic dispatch.
type IAuth_pluginContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAuth_pluginContext differentiates from other interfaces.
	IsAuth_pluginContext()
}

type Auth_pluginContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAuth_pluginContext() *Auth_pluginContext {
	var p = new(Auth_pluginContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_auth_plugin
	return p
}

func (*Auth_pluginContext) IsAuth_pluginContext() {}

func NewAuth_pluginContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Auth_pluginContext {
	var p = new(Auth_pluginContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_auth_plugin

	return p
}

func (s *Auth_pluginContext) GetParser() antlr.Parser { return s.parser }

func (s *Auth_pluginContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Auth_pluginContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Auth_pluginContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Auth_pluginContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Auth_pluginContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAuth_plugin(s)
	}
}

func (s *Auth_pluginContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAuth_plugin(s)
	}
}

func (s *Auth_pluginContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAuth_plugin(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Auth_plugin() (localctx IAuth_pluginContext) {
	localctx = NewAuth_pluginContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 474, MySqlParserRULE_auth_plugin)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5077)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserID, MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5075)
			p.Id_()
		}

	case MySqlParserSTRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5076)
			p.Match(MySqlParserSTRING_LITERAL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IId_Context is an interface to support dynamic dispatch.
type IId_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsId_Context differentiates from other interfaces.
	IsId_Context()
}

type Id_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyId_Context() *Id_Context {
	var p = new(Id_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_id_
	return p
}

func (*Id_Context) IsId_Context() {}

func NewId_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Id_Context {
	var p = new(Id_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_id_

	return p
}

func (s *Id_Context) GetParser() antlr.Parser { return s.parser }

func (s *Id_Context) Simple_id() ISimple_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimple_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimple_idContext)
}

func (s *Id_Context) REVERSE_QUOTE_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE_QUOTE_ID, 0)
}

func (s *Id_Context) CHARSET_REVERSE_QOUTE_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET_REVERSE_QOUTE_STRING, 0)
}

func (s *Id_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Id_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Id_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterId_(s)
	}
}

func (s *Id_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitId_(s)
	}
}

func (s *Id_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitId_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Id_() (localctx IId_Context) {
	localctx = NewId_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 476, MySqlParserRULE_id_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5082)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserTEXT, MySqlParserENUM, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5079)
			p.Simple_id()
		}

	case MySqlParserREVERSE_QUOTE_ID:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5080)
			p.Match(MySqlParserREVERSE_QUOTE_ID)
		}

	case MySqlParserCHARSET_REVERSE_QOUTE_STRING:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5081)
			p.Match(MySqlParserCHARSET_REVERSE_QOUTE_STRING)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISimple_idContext is an interface to support dynamic dispatch.
type ISimple_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_idContext differentiates from other interfaces.
	IsSimple_idContext()
}

type Simple_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_idContext() *Simple_idContext {
	var p = new(Simple_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simple_id
	return p
}

func (*Simple_idContext) IsSimple_idContext() {}

func NewSimple_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_idContext {
	var p = new(Simple_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simple_id

	return p
}

func (s *Simple_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_idContext) ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserID, 0)
}

func (s *Simple_idContext) Charset_name_base() ICharset_name_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_name_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_name_baseContext)
}

func (s *Simple_idContext) Transaction_level_base() ITransaction_level_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITransaction_level_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITransaction_level_baseContext)
}

func (s *Simple_idContext) Engine_name() IEngine_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEngine_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEngine_nameContext)
}

func (s *Simple_idContext) Privileges_base() IPrivileges_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrivileges_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrivileges_baseContext)
}

func (s *Simple_idContext) Interval_type_base() IInterval_type_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_type_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_type_baseContext)
}

func (s *Simple_idContext) Data_type_base() IData_type_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_baseContext)
}

func (s *Simple_idContext) Keywords_can_be_id() IKeywords_can_be_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywords_can_be_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywords_can_be_idContext)
}

func (s *Simple_idContext) Function_name_base() IFunction_name_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_name_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_name_baseContext)
}

func (s *Simple_idContext) Spatial_data_type() ISpatial_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpatial_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpatial_data_typeContext)
}

func (s *Simple_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimple_id(s)
	}
}

func (s *Simple_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimple_id(s)
	}
}

func (s *Simple_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimple_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Simple_id() (localctx ISimple_idContext) {
	localctx = NewSimple_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 478, MySqlParserRULE_simple_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5094)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 746, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5084)
			p.Match(MySqlParserID)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5085)
			p.Charset_name_base()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5086)
			p.Transaction_level_base()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5087)
			p.Engine_name()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5088)
			p.Privileges_base()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5089)
			p.Interval_type_base()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5090)
			p.Data_type_base()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5091)
			p.Keywords_can_be_id()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5092)
			p.Function_name_base()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5093)
			p.Spatial_data_type()
		}

	}

	return localctx
}

// IDot_ext_idContext is an interface to support dynamic dispatch.
type IDot_ext_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_ext_idContext differentiates from other interfaces.
	IsDot_ext_idContext()
}

type Dot_ext_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_ext_idContext() *Dot_ext_idContext {
	var p = new(Dot_ext_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_dot_ext_id
	return p
}

func (*Dot_ext_idContext) IsDot_ext_idContext() {}

func NewDot_ext_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_ext_idContext {
	var p = new(Dot_ext_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_dot_ext_id

	return p
}

func (s *Dot_ext_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_ext_idContext) DOT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOT_ID, 0)
}

func (s *Dot_ext_idContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Dot_ext_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_ext_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_ext_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDot_ext_id(s)
	}
}

func (s *Dot_ext_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDot_ext_id(s)
	}
}

func (s *Dot_ext_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDot_ext_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Dot_ext_id() (localctx IDot_ext_idContext) {
	localctx = NewDot_ext_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 480, MySqlParserRULE_dot_ext_id)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5099)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserDOT_ID:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5096)
			p.Match(MySqlParserDOT_ID)
		}

	case MySqlParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5097)
			p.Match(MySqlParserDOT)
		}
		{
			p.SetState(5098)
			p.Id_()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDecimal_literalContext is an interface to support dynamic dispatch.
type IDecimal_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDecimal_literalContext differentiates from other interfaces.
	IsDecimal_literalContext()
}

type Decimal_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDecimal_literalContext() *Decimal_literalContext {
	var p = new(Decimal_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_decimal_literal
	return p
}

func (*Decimal_literalContext) IsDecimal_literalContext() {}

func NewDecimal_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Decimal_literalContext {
	var p = new(Decimal_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_decimal_literal

	return p
}

func (s *Decimal_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Decimal_literalContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL_LITERAL, 0)
}

func (s *Decimal_literalContext) ZERO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZERO_DECIMAL, 0)
}

func (s *Decimal_literalContext) ONE_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserONE_DECIMAL, 0)
}

func (s *Decimal_literalContext) TWO_DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserTWO_DECIMAL, 0)
}

func (s *Decimal_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Decimal_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Decimal_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDecimal_literal(s)
	}
}

func (s *Decimal_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDecimal_literal(s)
	}
}

func (s *Decimal_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDecimal_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Decimal_literal() (localctx IDecimal_literalContext) {
	localctx = NewDecimal_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 482, MySqlParserRULE_decimal_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5101)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-948)&-(0x1f+1)) == 0 && ((1<<uint((_la-948)))&((1<<(MySqlParserZERO_DECIMAL-948))|(1<<(MySqlParserONE_DECIMAL-948))|(1<<(MySqlParserTWO_DECIMAL-948))|(1<<(MySqlParserDECIMAL_LITERAL-948)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFilesize_literalContext is an interface to support dynamic dispatch.
type IFilesize_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilesize_literalContext differentiates from other interfaces.
	IsFilesize_literalContext()
}

type Filesize_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilesize_literalContext() *Filesize_literalContext {
	var p = new(Filesize_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_filesize_literal
	return p
}

func (*Filesize_literalContext) IsFilesize_literalContext() {}

func NewFilesize_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Filesize_literalContext {
	var p = new(Filesize_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_filesize_literal

	return p
}

func (s *Filesize_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Filesize_literalContext) FILESIZE_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILESIZE_LITERAL, 0)
}

func (s *Filesize_literalContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Filesize_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Filesize_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Filesize_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFilesize_literal(s)
	}
}

func (s *Filesize_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFilesize_literal(s)
	}
}

func (s *Filesize_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFilesize_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Filesize_literal() (localctx IFilesize_literalContext) {
	localctx = NewFilesize_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 484, MySqlParserRULE_filesize_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5105)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserFILESIZE_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5103)
			p.Match(MySqlParserFILESIZE_LITERAL)
		}

	case MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserDECIMAL_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5104)
			p.Decimal_literal()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IString_literalContext is an interface to support dynamic dispatch.
type IString_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsString_literalContext differentiates from other interfaces.
	IsString_literalContext()
}

type String_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyString_literalContext() *String_literalContext {
	var p = new(String_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_string_literal
	return p
}

func (*String_literalContext) IsString_literalContext() {}

func NewString_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *String_literalContext {
	var p = new(String_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_string_literal

	return p
}

func (s *String_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *String_literalContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *String_literalContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *String_literalContext) START_NATIONAL_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART_NATIONAL_STRING_LITERAL, 0)
}

func (s *String_literalContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *String_literalContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *String_literalContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *String_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *String_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *String_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterString_literal(s)
	}
}

func (s *String_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitString_literal(s)
	}
}

func (s *String_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitString_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) String_literal() (localctx IString_literalContext) {
	localctx = NewString_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 486, MySqlParserRULE_string_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(5130)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 755, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5112)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5108)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5107)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5110)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5111)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5115)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(5114)
					p.Match(MySqlParserSTRING_LITERAL)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(5117)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 751, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5124)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTRING_LITERAL, MySqlParserSTRING_CHARSET_NAME:
			p.SetState(5120)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserSTRING_CHARSET_NAME {
				{
					p.SetState(5119)
					p.Match(MySqlParserSTRING_CHARSET_NAME)
				}

			}
			{
				p.SetState(5122)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		case MySqlParserSTART_NATIONAL_STRING_LITERAL:
			{
				p.SetState(5123)
				p.Match(MySqlParserSTART_NATIONAL_STRING_LITERAL)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(5128)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 754, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5126)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5127)
				p.Collation_name()
			}

		}

	}

	return localctx
}

// IBoolean_literalContext is an interface to support dynamic dispatch.
type IBoolean_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolean_literalContext differentiates from other interfaces.
	IsBoolean_literalContext()
}

type Boolean_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolean_literalContext() *Boolean_literalContext {
	var p = new(Boolean_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_boolean_literal
	return p
}

func (*Boolean_literalContext) IsBoolean_literalContext() {}

func NewBoolean_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Boolean_literalContext {
	var p = new(Boolean_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_boolean_literal

	return p
}

func (s *Boolean_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Boolean_literalContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *Boolean_literalContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *Boolean_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Boolean_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Boolean_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBoolean_literal(s)
	}
}

func (s *Boolean_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBoolean_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Boolean_literal() (localctx IBoolean_literalContext) {
	localctx = NewBoolean_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 488, MySqlParserRULE_boolean_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5132)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IHexadecimal_literalContext is an interface to support dynamic dispatch.
type IHexadecimal_literalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexadecimal_literalContext differentiates from other interfaces.
	IsHexadecimal_literalContext()
}

type Hexadecimal_literalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexadecimal_literalContext() *Hexadecimal_literalContext {
	var p = new(Hexadecimal_literalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_hexadecimal_literal
	return p
}

func (*Hexadecimal_literalContext) IsHexadecimal_literalContext() {}

func NewHexadecimal_literalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Hexadecimal_literalContext {
	var p = new(Hexadecimal_literalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_hexadecimal_literal

	return p
}

func (s *Hexadecimal_literalContext) GetParser() antlr.Parser { return s.parser }

func (s *Hexadecimal_literalContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEXADECIMAL_LITERAL, 0)
}

func (s *Hexadecimal_literalContext) STRING_CHARSET_NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_CHARSET_NAME, 0)
}

func (s *Hexadecimal_literalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Hexadecimal_literalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Hexadecimal_literalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterHexadecimal_literal(s)
	}
}

func (s *Hexadecimal_literalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitHexadecimal_literal(s)
	}
}

func (s *Hexadecimal_literalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitHexadecimal_literal(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Hexadecimal_literal() (localctx IHexadecimal_literalContext) {
	localctx = NewHexadecimal_literalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 490, MySqlParserRULE_hexadecimal_literal)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5135)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserSTRING_CHARSET_NAME {
		{
			p.SetState(5134)
			p.Match(MySqlParserSTRING_CHARSET_NAME)
		}

	}
	{
		p.SetState(5137)
		p.Match(MySqlParserHEXADECIMAL_LITERAL)
	}

	return localctx
}

// INull_notnullContext is an interface to support dynamic dispatch.
type INull_notnullContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNull_notnullContext differentiates from other interfaces.
	IsNull_notnullContext()
}

type Null_notnullContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNull_notnullContext() *Null_notnullContext {
	var p = new(Null_notnullContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_null_notnull
	return p
}

func (*Null_notnullContext) IsNull_notnullContext() {}

func NewNull_notnullContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Null_notnullContext {
	var p = new(Null_notnullContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_null_notnull

	return p
}

func (s *Null_notnullContext) GetParser() antlr.Parser { return s.parser }

func (s *Null_notnullContext) NOTNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOTNULL, 0)
}

func (s *Null_notnullContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *Null_notnullContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *Null_notnullContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Null_notnullContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Null_notnullContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNull_notnull(s)
	}
}

func (s *Null_notnullContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNull_notnull(s)
	}
}

func (s *Null_notnullContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNull_notnull(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Null_notnull() (localctx INull_notnullContext) {
	localctx = NewNull_notnullContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 492, MySqlParserRULE_null_notnull)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5141)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserNOTNULL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5139)
			p.Match(MySqlParserNOTNULL)
		}

	case MySqlParserNULL_LITERAL, MySqlParserNULL_SPEC_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5140)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstantContext is an interface to support dynamic dispatch.
type IConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantContext differentiates from other interfaces.
	IsConstantContext()
}

type ConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantContext() *ConstantContext {
	var p = new(ConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constant
	return p
}

func (*ConstantContext) IsConstantContext() {}

func NewConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantContext {
	var p = new(ConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constant

	return p
}

func (s *ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *ConstantContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *ConstantContext) Hexadecimal_literal() IHexadecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexadecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexadecimal_literalContext)
}

func (s *ConstantContext) Boolean_literal() IBoolean_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolean_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolean_literalContext)
}

func (s *ConstantContext) REAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL_LITERAL, 0)
}

func (s *ConstantContext) BIT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_STRING, 0)
}

func (s *ConstantContext) NOTNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOTNULL, 0)
}

func (s *ConstantContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *ConstantContext) NULL_SPEC_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_SPEC_LITERAL, 0)
}

func (s *ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstant(s)
	}
}

func (s *ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstant(s)
	}
}

func (s *ConstantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Constant() (localctx IConstantContext) {
	localctx = NewConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 494, MySqlParserRULE_constant)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5151)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 758, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5143)
			p.String_literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5144)
			p.Decimal_literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5145)
			p.Hexadecimal_literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5146)
			p.Boolean_literal()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5147)
			p.Match(MySqlParserREAL_LITERAL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5148)
			p.Match(MySqlParserBIT_STRING)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5149)
			p.Match(MySqlParserNOTNULL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		p.SetState(5150)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNULL_LITERAL || _la == MySqlParserNULL_SPEC_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IData_typeContext is an interface to support dynamic dispatch.
type IData_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_typeContext differentiates from other interfaces.
	IsData_typeContext()
}

type Data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_typeContext() *Data_typeContext {
	var p = new(Data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_data_type
	return p
}

func (*Data_typeContext) IsData_typeContext() {}

func NewData_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_typeContext {
	var p = new(Data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_data_type

	return p
}

func (s *Data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_typeContext) CopyFrom(ctx *Data_typeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpatialDatatypeContext struct {
	*Data_typeContext
}

func NewSpatialDatatypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpatialDatatypeContext {
	var p = new(SpatialDatatypeContext)

	p.Data_typeContext = NewEmptyData_typeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Data_typeContext))

	return p
}

func (s *SpatialDatatypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpatialDatatypeContext) Spatial_data_type() ISpatial_data_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpatial_data_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpatial_data_typeContext)
}

func (s *SpatialDatatypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpatialDatatype(s)
	}
}

func (s *SpatialDatatypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpatialDatatype(s)
	}
}

func (s *SpatialDatatypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpatialDatatype(s)

	default:
		return t.VisitChildren(s)
	}
}

type DimensionDatatypeContext struct {
	*Data_typeContext
}

func NewDimensionDatatypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DimensionDatatypeContext {
	var p = new(DimensionDatatypeContext)

	p.Data_typeContext = NewEmptyData_typeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Data_typeContext))

	return p
}

func (s *DimensionDatatypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DimensionDatatypeContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYINT, 0)
}

func (s *DimensionDatatypeContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSMALLINT, 0)
}

func (s *DimensionDatatypeContext) MEDIUMINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMINT, 0)
}

func (s *DimensionDatatypeContext) INT() antlr.TerminalNode {
	return s.GetToken(MySqlParserINT, 0)
}

func (s *DimensionDatatypeContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *DimensionDatatypeContext) BIGINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIGINT, 0)
}

func (s *DimensionDatatypeContext) Length_one_dimension() ILength_one_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_one_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_one_dimensionContext)
}

func (s *DimensionDatatypeContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, 0)
}

func (s *DimensionDatatypeContext) ZEROFILL() antlr.TerminalNode {
	return s.GetToken(MySqlParserZEROFILL, 0)
}

func (s *DimensionDatatypeContext) REAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserREAL, 0)
}

func (s *DimensionDatatypeContext) DOUBLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDOUBLE, 0)
}

func (s *DimensionDatatypeContext) FLOAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOAT, 0)
}

func (s *DimensionDatatypeContext) Length_two_dimension() ILength_two_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_two_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_two_dimensionContext)
}

func (s *DimensionDatatypeContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *DimensionDatatypeContext) NUMERIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMERIC, 0)
}

func (s *DimensionDatatypeContext) Length_two_optional_dimension() ILength_two_optional_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_two_optional_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_two_optional_dimensionContext)
}

func (s *DimensionDatatypeContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *DimensionDatatypeContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *DimensionDatatypeContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *DimensionDatatypeContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *DimensionDatatypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *DimensionDatatypeContext) VARBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARBINARY, 0)
}

func (s *DimensionDatatypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDimensionDatatype(s)
	}
}

func (s *DimensionDatatypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDimensionDatatype(s)
	}
}

func (s *DimensionDatatypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDimensionDatatype(s)

	default:
		return t.VisitChildren(s)
	}
}

type CollectCharDatatypeContext struct {
	*Data_typeContext
}

func NewCollectCharDatatypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CollectCharDatatypeContext {
	var p = new(CollectCharDatatypeContext)

	p.Data_typeContext = NewEmptyData_typeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Data_typeContext))

	return p
}

func (s *CollectCharDatatypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CollectCharDatatypeContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *CollectCharDatatypeContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *CollectCharDatatypeContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *CollectCharDatatypeContext) AllSET() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSET)
}

func (s *CollectCharDatatypeContext) SET(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, i)
}

func (s *CollectCharDatatypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CollectCharDatatypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *CollectCharDatatypeContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *CollectCharDatatypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CollectCharDatatypeContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *CollectCharDatatypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCollectCharDatatype(s)
	}
}

func (s *CollectCharDatatypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCollectCharDatatype(s)
	}
}

func (s *CollectCharDatatypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCollectCharDatatype(s)

	default:
		return t.VisitChildren(s)
	}
}

type CharDatatypeContext struct {
	*Data_typeContext
}

func NewCharDatatypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharDatatypeContext {
	var p = new(CharDatatypeContext)

	p.Data_typeContext = NewEmptyData_typeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Data_typeContext))

	return p
}

func (s *CharDatatypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharDatatypeContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *CharDatatypeContext) VARCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARCHAR, 0)
}

func (s *CharDatatypeContext) TINYTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYTEXT, 0)
}

func (s *CharDatatypeContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *CharDatatypeContext) MEDIUMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMTEXT, 0)
}

func (s *CharDatatypeContext) LONGTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGTEXT, 0)
}

func (s *CharDatatypeContext) Length_one_dimension() ILength_one_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_one_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_one_dimensionContext)
}

func (s *CharDatatypeContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *CharDatatypeContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *CharDatatypeContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *CharDatatypeContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *CharDatatypeContext) COLLATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATE, 0)
}

func (s *CharDatatypeContext) Collation_name() ICollation_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICollation_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICollation_nameContext)
}

func (s *CharDatatypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharDatatype(s)
	}
}

func (s *CharDatatypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharDatatype(s)
	}
}

func (s *CharDatatypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharDatatype(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleDatatypeContext struct {
	*Data_typeContext
}

func NewSimpleDatatypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleDatatypeContext {
	var p = new(SimpleDatatypeContext)

	p.Data_typeContext = NewEmptyData_typeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Data_typeContext))

	return p
}

func (s *SimpleDatatypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleDatatypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *SimpleDatatypeContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *SimpleDatatypeContext) TINYBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserTINYBLOB, 0)
}

func (s *SimpleDatatypeContext) BLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserBLOB, 0)
}

func (s *SimpleDatatypeContext) MEDIUMBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEDIUMBLOB, 0)
}

func (s *SimpleDatatypeContext) LONGBLOB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLONGBLOB, 0)
}

func (s *SimpleDatatypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleDatatype(s)
	}
}

func (s *SimpleDatatypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleDatatype(s)
	}
}

func (s *SimpleDatatypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleDatatype(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Data_type() (localctx IData_typeContext) {
	localctx = NewData_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 496, MySqlParserRULE_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserCHAR, MySqlParserVARCHAR, MySqlParserTINYTEXT, MySqlParserTEXT, MySqlParserMEDIUMTEXT, MySqlParserLONGTEXT:
		localctx = NewCharDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5153)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-186)&-(0x1f+1)) == 0 && ((1<<uint((_la-186)))&((1<<(MySqlParserCHAR-186))|(1<<(MySqlParserVARCHAR-186))|(1<<(MySqlParserTINYTEXT-186))|(1<<(MySqlParserTEXT-186))|(1<<(MySqlParserMEDIUMTEXT-186))|(1<<(MySqlParserLONGTEXT-186)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5155)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 759, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5154)
				p.Length_one_dimension()
			}

		}
		p.SetState(5158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5157)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(5163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(5160)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(5161)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(5162)
				p.Charset_name()
			}

		}
		p.SetState(5167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(5165)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5166)
				p.Collation_name()
			}

		}

	case MySqlParserTINYINT, MySqlParserSMALLINT, MySqlParserMEDIUMINT, MySqlParserINT, MySqlParserINTEGER, MySqlParserBIGINT:
		localctx = NewDimensionDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		p.SetState(5169)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-170)&-(0x1f+1)) == 0 && ((1<<uint((_la-170)))&((1<<(MySqlParserTINYINT-170))|(1<<(MySqlParserSMALLINT-170))|(1<<(MySqlParserMEDIUMINT-170))|(1<<(MySqlParserINT-170))|(1<<(MySqlParserINTEGER-170))|(1<<(MySqlParserBIGINT-170)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5171)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 763, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5170)
				p.Length_one_dimension()
			}

		}
		p.SetState(5174)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNSIGNED {
			{
				p.SetState(5173)
				p.Match(MySqlParserUNSIGNED)
			}

		}
		p.SetState(5177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5176)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case MySqlParserREAL, MySqlParserDOUBLE, MySqlParserFLOAT:
		localctx = NewDimensionDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(5179)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-176)&-(0x1f+1)) == 0 && ((1<<uint((_la-176)))&((1<<(MySqlParserREAL-176))|(1<<(MySqlParserDOUBLE-176))|(1<<(MySqlParserFLOAT-176)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5181)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 766, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5180)
				p.Length_two_dimension()
			}

		}
		p.SetState(5184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNSIGNED {
			{
				p.SetState(5183)
				p.Match(MySqlParserUNSIGNED)
			}

		}
		p.SetState(5187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5186)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case MySqlParserDECIMAL, MySqlParserNUMERIC:
		localctx = NewDimensionDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5189)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserDECIMAL || _la == MySqlParserNUMERIC) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5191)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 769, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5190)
				p.Length_two_optional_dimension()
			}

		}
		p.SetState(5194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUNSIGNED {
			{
				p.SetState(5193)
				p.Match(MySqlParserUNSIGNED)
			}

		}
		p.SetState(5197)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserZEROFILL {
			{
				p.SetState(5196)
				p.Match(MySqlParserZEROFILL)
			}

		}

	case MySqlParserDATE, MySqlParserYEAR, MySqlParserTINYBLOB, MySqlParserBLOB, MySqlParserMEDIUMBLOB, MySqlParserLONGBLOB:
		localctx = NewSimpleDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(5199)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTINYBLOB-181))|(1<<(MySqlParserBLOB-181))|(1<<(MySqlParserMEDIUMBLOB-181))|(1<<(MySqlParserLONGBLOB-181)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserBINARY, MySqlParserVARBINARY, MySqlParserBIT:
		localctx = NewDimensionDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(5200)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-182)&-(0x1f+1)) == 0 && ((1<<uint((_la-182)))&((1<<(MySqlParserTIME-182))|(1<<(MySqlParserTIMESTAMP-182))|(1<<(MySqlParserDATETIME-182))|(1<<(MySqlParserBINARY-182))|(1<<(MySqlParserVARBINARY-182)))) != 0) || _la == MySqlParserBIT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5202)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 772, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5201)
				p.Length_one_dimension()
			}

		}

	case MySqlParserSET, MySqlParserENUM:
		localctx = NewCollectCharDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		p.SetState(5204)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserSET || _la == MySqlParserENUM) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5205)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5206)
			p.Match(MySqlParserSTRING_LITERAL)
		}
		p.SetState(5211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5207)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5208)
				p.Match(MySqlParserSTRING_LITERAL)
			}

			p.SetState(5213)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(5214)
			p.Match(MySqlParserRR_BRACKET)
		}
		p.SetState(5216)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserBINARY {
			{
				p.SetState(5215)
				p.Match(MySqlParserBINARY)
			}

		}
		p.SetState(5221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(5218)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(5219)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(5220)
				p.Charset_name()
			}

		}
		p.SetState(5225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCOLLATE {
			{
				p.SetState(5223)
				p.Match(MySqlParserCOLLATE)
			}
			{
				p.SetState(5224)
				p.Collation_name()
			}

		}

	case MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON:
		localctx = NewSpatialDatatypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5227)
			p.Spatial_data_type()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IData_type_to_convertContext is an interface to support dynamic dispatch.
type IData_type_to_convertContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_to_convertContext differentiates from other interfaces.
	IsData_type_to_convertContext()
}

type Data_type_to_convertContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_to_convertContext() *Data_type_to_convertContext {
	var p = new(Data_type_to_convertContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_data_type_to_convert
	return p
}

func (*Data_type_to_convertContext) IsData_type_to_convertContext() {}

func NewData_type_to_convertContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_to_convertContext {
	var p = new(Data_type_to_convertContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_data_type_to_convert

	return p
}

func (s *Data_type_to_convertContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_to_convertContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *Data_type_to_convertContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *Data_type_to_convertContext) Length_one_dimension() ILength_one_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_one_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_one_dimensionContext)
}

func (s *Data_type_to_convertContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *Data_type_to_convertContext) CHARACTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER, 0)
}

func (s *Data_type_to_convertContext) SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSET, 0)
}

func (s *Data_type_to_convertContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *Data_type_to_convertContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *Data_type_to_convertContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *Data_type_to_convertContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *Data_type_to_convertContext) DECIMAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECIMAL, 0)
}

func (s *Data_type_to_convertContext) Length_two_dimension() ILength_two_dimensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILength_two_dimensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILength_two_dimensionContext)
}

func (s *Data_type_to_convertContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *Data_type_to_convertContext) UNSIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNSIGNED, 0)
}

func (s *Data_type_to_convertContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTEGER, 0)
}

func (s *Data_type_to_convertContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_to_convertContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_to_convertContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterData_type_to_convert(s)
	}
}

func (s *Data_type_to_convertContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitData_type_to_convert(s)
	}
}

func (s *Data_type_to_convertContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitData_type_to_convert(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Data_type_to_convert() (localctx IData_type_to_convertContext) {
	localctx = NewData_type_to_convertContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 498, MySqlParserRULE_data_type_to_convert)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5254)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserBINARY, MySqlParserNCHAR:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5230)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBINARY || _la == MySqlParserNCHAR) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5231)
				p.Length_one_dimension()
			}

		}

	case MySqlParserCHAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5234)
			p.Match(MySqlParserCHAR)
		}
		p.SetState(5236)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5235)
				p.Length_one_dimension()
			}

		}
		p.SetState(5241)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserCHARACTER {
			{
				p.SetState(5238)
				p.Match(MySqlParserCHARACTER)
			}
			{
				p.SetState(5239)
				p.Match(MySqlParserSET)
			}
			{
				p.SetState(5240)
				p.Charset_name()
			}

		}

	case MySqlParserDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5243)
			p.Match(MySqlParserDATE)
		}

	case MySqlParserDATETIME:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5244)
			p.Match(MySqlParserDATETIME)
		}

	case MySqlParserTIME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5245)
			p.Match(MySqlParserTIME)
		}

	case MySqlParserDECIMAL:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5246)
			p.Match(MySqlParserDECIMAL)
		}
		p.SetState(5248)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLR_BRACKET {
			{
				p.SetState(5247)
				p.Length_two_dimension()
			}

		}

	case MySqlParserUNSIGNED, MySqlParserSIGNED:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(5250)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserUNSIGNED || _la == MySqlParserSIGNED) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserINTEGER {
			{
				p.SetState(5251)
				p.Match(MySqlParserINTEGER)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISpatial_data_typeContext is an interface to support dynamic dispatch.
type ISpatial_data_typeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpatial_data_typeContext differentiates from other interfaces.
	IsSpatial_data_typeContext()
}

type Spatial_data_typeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpatial_data_typeContext() *Spatial_data_typeContext {
	var p = new(Spatial_data_typeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_spatial_data_type
	return p
}

func (*Spatial_data_typeContext) IsSpatial_data_typeContext() {}

func NewSpatial_data_typeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Spatial_data_typeContext {
	var p = new(Spatial_data_typeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_spatial_data_type

	return p
}

func (s *Spatial_data_typeContext) GetParser() antlr.Parser { return s.parser }

func (s *Spatial_data_typeContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *Spatial_data_typeContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *Spatial_data_typeContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *Spatial_data_typeContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *Spatial_data_typeContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *Spatial_data_typeContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *Spatial_data_typeContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *Spatial_data_typeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Spatial_data_typeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Spatial_data_typeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpatial_data_type(s)
	}
}

func (s *Spatial_data_typeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpatial_data_type(s)
	}
}

func (s *Spatial_data_typeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpatial_data_type(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Spatial_data_type() (localctx ISpatial_data_typeContext) {
	localctx = NewSpatial_data_typeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 500, MySqlParserRULE_spatial_data_type)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5256)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-621)&-(0x1f+1)) == 0 && ((1<<uint((_la-621)))&((1<<(MySqlParserGEOMETRYCOLLECTION-621))|(1<<(MySqlParserLINESTRING-621))|(1<<(MySqlParserMULTILINESTRING-621))|(1<<(MySqlParserMULTIPOINT-621))|(1<<(MySqlParserMULTIPOLYGON-621))|(1<<(MySqlParserPOINT-621))|(1<<(MySqlParserPOLYGON-621)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ILength_one_dimensionContext is an interface to support dynamic dispatch.
type ILength_one_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLength_one_dimensionContext differentiates from other interfaces.
	IsLength_one_dimensionContext()
}

type Length_one_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLength_one_dimensionContext() *Length_one_dimensionContext {
	var p = new(Length_one_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_length_one_dimension
	return p
}

func (*Length_one_dimensionContext) IsLength_one_dimensionContext() {}

func NewLength_one_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Length_one_dimensionContext {
	var p = new(Length_one_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_length_one_dimension

	return p
}

func (s *Length_one_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Length_one_dimensionContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Length_one_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Length_one_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Length_one_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLength_one_dimension(s)
	}
}

func (s *Length_one_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLength_one_dimension(s)
	}
}

func (s *Length_one_dimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLength_one_dimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Length_one_dimension() (localctx ILength_one_dimensionContext) {
	localctx = NewLength_one_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 502, MySqlParserRULE_length_one_dimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5258)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5259)
		p.Decimal_literal()
	}
	{
		p.SetState(5260)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILength_two_dimensionContext is an interface to support dynamic dispatch.
type ILength_two_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLength_two_dimensionContext differentiates from other interfaces.
	IsLength_two_dimensionContext()
}

type Length_two_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLength_two_dimensionContext() *Length_two_dimensionContext {
	var p = new(Length_two_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_length_two_dimension
	return p
}

func (*Length_two_dimensionContext) IsLength_two_dimensionContext() {}

func NewLength_two_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Length_two_dimensionContext {
	var p = new(Length_two_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_length_two_dimension

	return p
}

func (s *Length_two_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Length_two_dimensionContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Length_two_dimensionContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Length_two_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Length_two_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Length_two_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLength_two_dimension(s)
	}
}

func (s *Length_two_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLength_two_dimension(s)
	}
}

func (s *Length_two_dimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLength_two_dimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Length_two_dimension() (localctx ILength_two_dimensionContext) {
	localctx = NewLength_two_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 504, MySqlParserRULE_length_two_dimension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5262)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5263)
		p.Decimal_literal()
	}
	{
		p.SetState(5264)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(5265)
		p.Decimal_literal()
	}
	{
		p.SetState(5266)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// ILength_two_optional_dimensionContext is an interface to support dynamic dispatch.
type ILength_two_optional_dimensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLength_two_optional_dimensionContext differentiates from other interfaces.
	IsLength_two_optional_dimensionContext()
}

type Length_two_optional_dimensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLength_two_optional_dimensionContext() *Length_two_optional_dimensionContext {
	var p = new(Length_two_optional_dimensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_length_two_optional_dimension
	return p
}

func (*Length_two_optional_dimensionContext) IsLength_two_optional_dimensionContext() {}

func NewLength_two_optional_dimensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Length_two_optional_dimensionContext {
	var p = new(Length_two_optional_dimensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_length_two_optional_dimension

	return p
}

func (s *Length_two_optional_dimensionContext) GetParser() antlr.Parser { return s.parser }

func (s *Length_two_optional_dimensionContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *Length_two_optional_dimensionContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *Length_two_optional_dimensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Length_two_optional_dimensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Length_two_optional_dimensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLength_two_optional_dimension(s)
	}
}

func (s *Length_two_optional_dimensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLength_two_optional_dimension(s)
	}
}

func (s *Length_two_optional_dimensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLength_two_optional_dimension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Length_two_optional_dimension() (localctx ILength_two_optional_dimensionContext) {
	localctx = NewLength_two_optional_dimensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 506, MySqlParserRULE_length_two_optional_dimension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5268)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5269)
		p.Decimal_literal()
	}
	p.SetState(5272)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MySqlParserCOMMA {
		{
			p.SetState(5270)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5271)
			p.Decimal_literal()
		}

	}
	{
		p.SetState(5274)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IId_listContext is an interface to support dynamic dispatch.
type IId_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsId_listContext differentiates from other interfaces.
	IsId_listContext()
}

type Id_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyId_listContext() *Id_listContext {
	var p = new(Id_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_id_list
	return p
}

func (*Id_listContext) IsId_listContext() {}

func NewId_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Id_listContext {
	var p = new(Id_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_id_list

	return p
}

func (s *Id_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Id_listContext) AllId_() []IId_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IId_Context)(nil)).Elem())
	var tst = make([]IId_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IId_Context)
		}
	}

	return tst
}

func (s *Id_listContext) Id_(i int) IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *Id_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Id_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Id_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterId_list(s)
	}
}

func (s *Id_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitId_list(s)
	}
}

func (s *Id_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitId_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Id_list() (localctx IId_listContext) {
	localctx = NewId_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 508, MySqlParserRULE_id_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5276)
		p.Id_()
	}
	p.SetState(5281)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 785, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5277)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5278)
				p.Id_()
			}

		}
		p.SetState(5283)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 785, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_listContext is an interface to support dynamic dispatch.
type ITable_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_listContext differentiates from other interfaces.
	IsTable_listContext()
}

type Table_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_listContext() *Table_listContext {
	var p = new(Table_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_list
	return p
}

func (*Table_listContext) IsTable_listContext() {}

func NewTable_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_listContext {
	var p = new(Table_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_list

	return p
}

func (s *Table_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_listContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Table_listContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTable_list(s)
	}
}

func (s *Table_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTable_list(s)
	}
}

func (s *Table_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTable_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_list() (localctx ITable_listContext) {
	localctx = NewTable_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 510, MySqlParserRULE_table_list)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5284)
		p.Table_name()
	}
	p.SetState(5289)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 786, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(5285)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5286)
				p.Table_name()
			}

		}
		p.SetState(5291)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 786, p.GetParserRuleContext())
	}

	return localctx
}

// ITable_pair_listContext is an interface to support dynamic dispatch.
type ITable_pair_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTable_pair_listContext differentiates from other interfaces.
	IsTable_pair_listContext()
}

type Table_pair_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTable_pair_listContext() *Table_pair_listContext {
	var p = new(Table_pair_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_table_pair_list
	return p
}

func (*Table_pair_listContext) IsTable_pair_listContext() {}

func NewTable_pair_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Table_pair_listContext {
	var p = new(Table_pair_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_table_pair_list

	return p
}

func (s *Table_pair_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Table_pair_listContext) AllTable_name() []ITable_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITable_nameContext)(nil)).Elem())
	var tst = make([]ITable_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITable_nameContext)
		}
	}

	return tst
}

func (s *Table_pair_listContext) Table_name(i int) ITable_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITable_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITable_nameContext)
}

func (s *Table_pair_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Table_pair_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Table_pair_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTable_pair_list(s)
	}
}

func (s *Table_pair_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTable_pair_list(s)
	}
}

func (s *Table_pair_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTable_pair_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Table_pair_list() (localctx ITable_pair_listContext) {
	localctx = NewTable_pair_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 512, MySqlParserRULE_table_pair_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5292)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5293)
		p.Table_name()
	}
	{
		p.SetState(5294)
		p.Match(MySqlParserCOMMA)
	}
	{
		p.SetState(5295)
		p.Table_name()
	}
	{
		p.SetState(5296)
		p.Match(MySqlParserRR_BRACKET)
	}
	p.SetState(5306)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5297)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5298)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5299)
			p.Table_name()
		}
		{
			p.SetState(5300)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5301)
			p.Table_name()
		}
		{
			p.SetState(5302)
			p.Match(MySqlParserRR_BRACKET)
		}

		p.SetState(5308)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIndex_colname_listContext is an interface to support dynamic dispatch.
type IIndex_colname_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndex_colname_listContext differentiates from other interfaces.
	IsIndex_colname_listContext()
}

type Index_colname_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndex_colname_listContext() *Index_colname_listContext {
	var p = new(Index_colname_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_index_colname_list
	return p
}

func (*Index_colname_listContext) IsIndex_colname_listContext() {}

func NewIndex_colname_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Index_colname_listContext {
	var p = new(Index_colname_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_index_colname_list

	return p
}

func (s *Index_colname_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Index_colname_listContext) AllIndex_col_name() []IIndex_col_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIndex_col_nameContext)(nil)).Elem())
	var tst = make([]IIndex_col_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIndex_col_nameContext)
		}
	}

	return tst
}

func (s *Index_colname_listContext) Index_col_name(i int) IIndex_col_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndex_col_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIndex_col_nameContext)
}

func (s *Index_colname_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Index_colname_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Index_colname_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIndex_colname_list(s)
	}
}

func (s *Index_colname_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIndex_colname_list(s)
	}
}

func (s *Index_colname_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIndex_colname_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Index_colname_list() (localctx IIndex_colname_listContext) {
	localctx = NewIndex_colname_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 514, MySqlParserRULE_index_colname_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5309)
		p.Match(MySqlParserLR_BRACKET)
	}
	{
		p.SetState(5310)
		p.Index_col_name()
	}
	p.SetState(5315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5311)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5312)
			p.Index_col_name()
		}

		p.SetState(5317)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(5318)
		p.Match(MySqlParserRR_BRACKET)
	}

	return localctx
}

// IExpression_listContext is an interface to support dynamic dispatch.
type IExpression_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_listContext differentiates from other interfaces.
	IsExpression_listContext()
}

type Expression_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_listContext() *Expression_listContext {
	var p = new(Expression_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expression_list
	return p
}

func (*Expression_listContext) IsExpression_listContext() {}

func NewExpression_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_listContext {
	var p = new(Expression_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expression_list

	return p
}

func (s *Expression_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_listContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Expression_listContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Expression_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Expression_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpression_list(s)
	}
}

func (s *Expression_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpression_list(s)
	}
}

func (s *Expression_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpression_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Expression_list() (localctx IExpression_listContext) {
	localctx = NewExpression_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 516, MySqlParserRULE_expression_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5320)
		p.expression(0)
	}
	p.SetState(5325)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5321)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5322)
			p.expression(0)
		}

		p.SetState(5327)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IConstant_listContext is an interface to support dynamic dispatch.
type IConstant_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstant_listContext differentiates from other interfaces.
	IsConstant_listContext()
}

type Constant_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstant_listContext() *Constant_listContext {
	var p = new(Constant_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_constant_list
	return p
}

func (*Constant_listContext) IsConstant_listContext() {}

func NewConstant_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Constant_listContext {
	var p = new(Constant_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_constant_list

	return p
}

func (s *Constant_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Constant_listContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *Constant_listContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Constant_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Constant_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Constant_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstant_list(s)
	}
}

func (s *Constant_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstant_list(s)
	}
}

func (s *Constant_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstant_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Constant_list() (localctx IConstant_listContext) {
	localctx = NewConstant_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 518, MySqlParserRULE_constant_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5328)
		p.Constant()
	}
	p.SetState(5333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5329)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5330)
			p.Constant()
		}

		p.SetState(5335)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISimple_string_listContext is an interface to support dynamic dispatch.
type ISimple_string_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimple_string_listContext differentiates from other interfaces.
	IsSimple_string_listContext()
}

type Simple_string_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimple_string_listContext() *Simple_string_listContext {
	var p = new(Simple_string_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_simple_string_list
	return p
}

func (*Simple_string_listContext) IsSimple_string_listContext() {}

func NewSimple_string_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Simple_string_listContext {
	var p = new(Simple_string_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_simple_string_list

	return p
}

func (s *Simple_string_listContext) GetParser() antlr.Parser { return s.parser }

func (s *Simple_string_listContext) AllSTRING_LITERAL() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserSTRING_LITERAL)
}

func (s *Simple_string_listContext) STRING_LITERAL(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, i)
}

func (s *Simple_string_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Simple_string_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Simple_string_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimple_string_list(s)
	}
}

func (s *Simple_string_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimple_string_list(s)
	}
}

func (s *Simple_string_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimple_string_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Simple_string_list() (localctx ISimple_string_listContext) {
	localctx = NewSimple_string_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 520, MySqlParserRULE_simple_string_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5336)
		p.Match(MySqlParserSTRING_LITERAL)
	}
	p.SetState(5341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5337)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5338)
			p.Match(MySqlParserSTRING_LITERAL)
		}

		p.SetState(5343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IUser_var_listContext is an interface to support dynamic dispatch.
type IUser_var_listContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUser_var_listContext differentiates from other interfaces.
	IsUser_var_listContext()
}

type User_var_listContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUser_var_listContext() *User_var_listContext {
	var p = new(User_var_listContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_user_var_list
	return p
}

func (*User_var_listContext) IsUser_var_listContext() {}

func NewUser_var_listContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *User_var_listContext {
	var p = new(User_var_listContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_user_var_list

	return p
}

func (s *User_var_listContext) GetParser() antlr.Parser { return s.parser }

func (s *User_var_listContext) AllLOCAL_ID() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserLOCAL_ID)
}

func (s *User_var_listContext) LOCAL_ID(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, i)
}

func (s *User_var_listContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *User_var_listContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *User_var_listContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUser_var_list(s)
	}
}

func (s *User_var_listContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUser_var_list(s)
	}
}

func (s *User_var_listContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUser_var_list(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) User_var_list() (localctx IUser_var_listContext) {
	localctx = NewUser_var_listContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 522, MySqlParserRULE_user_var_list)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5344)
		p.Match(MySqlParserLOCAL_ID)
	}
	p.SetState(5349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5345)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5346)
			p.Match(MySqlParserLOCAL_ID)
		}

		p.SetState(5351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDefault_valueContext is an interface to support dynamic dispatch.
type IDefault_valueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefault_valueContext differentiates from other interfaces.
	IsDefault_valueContext()
}

type Default_valueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefault_valueContext() *Default_valueContext {
	var p = new(Default_valueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_default_value
	return p
}

func (*Default_valueContext) IsDefault_valueContext() {}

func NewDefault_valueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Default_valueContext {
	var p = new(Default_valueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_default_value

	return p
}

func (s *Default_valueContext) GetParser() antlr.Parser { return s.parser }

func (s *Default_valueContext) NULL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULL_LITERAL, 0)
}

func (s *Default_valueContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Default_valueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Default_valueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Default_valueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefault_value(s)
	}
}

func (s *Default_valueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefault_value(s)
	}
}

func (s *Default_valueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefault_value(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Default_value() (localctx IDefault_valueContext) {
	localctx = NewDefault_valueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 524, MySqlParserRULE_default_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5354)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 793, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5352)
			p.Match(MySqlParserNULL_LITERAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5353)
			p.Constant()
		}

	}

	return localctx
}

// IIf_existsContext is an interface to support dynamic dispatch.
type IIf_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_existsContext differentiates from other interfaces.
	IsIf_existsContext()
}

type If_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_existsContext() *If_existsContext {
	var p = new(If_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_if_exists
	return p
}

func (*If_existsContext) IsIf_existsContext() {}

func NewIf_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_existsContext {
	var p = new(If_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_if_exists

	return p
}

func (s *If_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *If_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *If_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIf_exists(s)
	}
}

func (s *If_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIf_exists(s)
	}
}

func (s *If_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIf_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) If_exists() (localctx IIf_existsContext) {
	localctx = NewIf_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 526, MySqlParserRULE_if_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5356)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(5357)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IIf_not_existsContext is an interface to support dynamic dispatch.
type IIf_not_existsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIf_not_existsContext differentiates from other interfaces.
	IsIf_not_existsContext()
}

type If_not_existsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIf_not_existsContext() *If_not_existsContext {
	var p = new(If_not_existsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_if_not_exists
	return p
}

func (*If_not_existsContext) IsIf_not_existsContext() {}

func NewIf_not_existsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *If_not_existsContext {
	var p = new(If_not_existsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_if_not_exists

	return p
}

func (s *If_not_existsContext) GetParser() antlr.Parser { return s.parser }

func (s *If_not_existsContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *If_not_existsContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *If_not_existsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *If_not_existsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *If_not_existsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *If_not_existsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIf_not_exists(s)
	}
}

func (s *If_not_existsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIf_not_exists(s)
	}
}

func (s *If_not_existsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIf_not_exists(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) If_not_exists() (localctx IIf_not_existsContext) {
	localctx = NewIf_not_existsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 528, MySqlParserRULE_if_not_exists)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(5359)
		p.Match(MySqlParserIF)
	}
	{
		p.SetState(5360)
		p.Match(MySqlParserNOT)
	}
	{
		p.SetState(5361)
		p.Match(MySqlParserEXISTS)
	}

	return localctx
}

// IFunction_callContext is an interface to support dynamic dispatch.
type IFunction_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_callContext differentiates from other interfaces.
	IsFunction_callContext()
}

type Function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_callContext() *Function_callContext {
	var p = new(Function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_function_call
	return p
}

func (*Function_callContext) IsFunction_callContext() {}

func NewFunction_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_callContext {
	var p = new(Function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_function_call

	return p
}

func (s *Function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_callContext) CopyFrom(ctx *Function_callContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SpecificFunctionCallContext struct {
	*Function_callContext
}

func NewSpecificFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecificFunctionCallContext {
	var p = new(SpecificFunctionCallContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *SpecificFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecificFunctionCallContext) Specific_function_call() ISpecific_function_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecific_function_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecific_function_callContext)
}

func (s *SpecificFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSpecificFunctionCall(s)
	}
}

func (s *SpecificFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSpecificFunctionCall(s)
	}
}

func (s *SpecificFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSpecificFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type UdfFunctionCallContext struct {
	*Function_callContext
}

func NewUdfFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UdfFunctionCallContext {
	var p = new(UdfFunctionCallContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *UdfFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UdfFunctionCallContext) Id_() IId_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IId_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IId_Context)
}

func (s *UdfFunctionCallContext) Dot_ext_id() IDot_ext_idContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_ext_idContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_ext_idContext)
}

func (s *UdfFunctionCallContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *UdfFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUdfFunctionCall(s)
	}
}

func (s *UdfFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUdfFunctionCall(s)
	}
}

func (s *UdfFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUdfFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type AggregateFunctionCallContext struct {
	*Function_callContext
}

func NewAggregateFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AggregateFunctionCallContext {
	var p = new(AggregateFunctionCallContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *AggregateFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AggregateFunctionCallContext) Aggregate_windowed_function() IAggregate_windowed_functionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAggregate_windowed_functionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAggregate_windowed_functionContext)
}

func (s *AggregateFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAggregateFunctionCall(s)
	}
}

func (s *AggregateFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAggregateFunctionCall(s)
	}
}

func (s *AggregateFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAggregateFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ScalarFunctionCallContext struct {
	*Function_callContext
}

func NewScalarFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ScalarFunctionCallContext {
	var p = new(ScalarFunctionCallContext)

	p.Function_callContext = NewEmptyFunction_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Function_callContext))

	return p
}

func (s *ScalarFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarFunctionCallContext) Scalar_function_name() IScalar_function_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalar_function_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalar_function_nameContext)
}

func (s *ScalarFunctionCallContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *ScalarFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterScalarFunctionCall(s)
	}
}

func (s *ScalarFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitScalarFunctionCall(s)
	}
}

func (s *ScalarFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitScalarFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Function_call() (localctx IFunction_callContext) {
	localctx = NewFunction_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 530, MySqlParserRULE_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5382)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 797, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSpecificFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5363)
			p.Specific_function_call()
		}

	case 2:
		localctx = NewAggregateFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5364)
			p.Aggregate_windowed_function()
		}

	case 3:
		localctx = NewScalarFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5365)
			p.Scalar_function_name()
		}
		{
			p.SetState(5366)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserCASE)|(1<<MySqlParserCAST)|(1<<MySqlParserCONVERT)|(1<<MySqlParserCURRENT_USER))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(MySqlParserDEFAULT-36))|(1<<(MySqlParserEXISTS-36))|(1<<(MySqlParserFALSE-36))|(1<<(MySqlParserIF-36)))) != 0) || (((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(MySqlParserINTERVAL-72))|(1<<(MySqlParserLEFT-72))|(1<<(MySqlParserNOTNULL-72))|(1<<(MySqlParserNOT-72))|(1<<(MySqlParserNULL_LITERAL-72)))) != 0) || (((_la-122)&-(0x1f+1)) == 0 && ((1<<uint((_la-122)))&((1<<(MySqlParserREPLACE-122))|(1<<(MySqlParserRIGHT-122))|(1<<(MySqlParserTRUE-122)))) != 0) || (((_la-162)&-(0x1f+1)) == 0 && ((1<<uint((_la-162)))&((1<<(MySqlParserVALUES-162))|(1<<(MySqlParserDATE-162))|(1<<(MySqlParserTIME-162))|(1<<(MySqlParserTIMESTAMP-162))|(1<<(MySqlParserDATETIME-162))|(1<<(MySqlParserYEAR-162))|(1<<(MySqlParserCHAR-162))|(1<<(MySqlParserBINARY-162)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserAVG-195))|(1<<(MySqlParserBIT_AND-195))|(1<<(MySqlParserBIT_OR-195))|(1<<(MySqlParserBIT_XOR-195))|(1<<(MySqlParserCOUNT-195))|(1<<(MySqlParserGROUP_CONCAT-195))|(1<<(MySqlParserMAX-195))|(1<<(MySqlParserMIN-195))|(1<<(MySqlParserSTD-195))|(1<<(MySqlParserSTDDEV-195))|(1<<(MySqlParserSTDDEV_POP-195))|(1<<(MySqlParserSTDDEV_SAMP-195))|(1<<(MySqlParserSUM-195))|(1<<(MySqlParserVAR_POP-195))|(1<<(MySqlParserVAR_SAMP-195))|(1<<(MySqlParserVARIANCE-195))|(1<<(MySqlParserCURRENT_DATE-195)))) != 0) || (((_la-227)&-(0x1f+1)) == 0 && ((1<<uint((_la-227)))&((1<<(MySqlParserCURRENT_TIME-227))|(1<<(MySqlParserCURRENT_TIMESTAMP-227))|(1<<(MySqlParserLOCALTIME-227))|(1<<(MySqlParserCURDATE-227))|(1<<(MySqlParserCURTIME-227))|(1<<(MySqlParserDATE_ADD-227))|(1<<(MySqlParserDATE_SUB-227))|(1<<(MySqlParserEXTRACT-227))|(1<<(MySqlParserLOCALTIMESTAMP-227))|(1<<(MySqlParserNOW-227))|(1<<(MySqlParserPOSITION-227))|(1<<(MySqlParserSUBSTR-227))|(1<<(MySqlParserSUBSTRING-227))|(1<<(MySqlParserSYSDATE-227))|(1<<(MySqlParserTRIM-227))|(1<<(MySqlParserUTC_DATE-227))|(1<<(MySqlParserUTC_TIME-227))|(1<<(MySqlParserUTC_TIMESTAMP-227))|(1<<(MySqlParserACTION-227))|(1<<(MySqlParserAFTER-227))|(1<<(MySqlParserALGORITHM-227))|(1<<(MySqlParserANY-227))|(1<<(MySqlParserAT-227))|(1<<(MySqlParserAUTHORS-227))|(1<<(MySqlParserAUTOCOMMIT-227))|(1<<(MySqlParserAUTOEXTEND_SIZE-227))|(1<<(MySqlParserAUTO_INCREMENT-227))|(1<<(MySqlParserAVG_ROW_LENGTH-227))|(1<<(MySqlParserBEGIN-227))|(1<<(MySqlParserBINLOG-227)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(MySqlParserBIT-259))|(1<<(MySqlParserBTREE-259))|(1<<(MySqlParserCASCADED-259))|(1<<(MySqlParserCHAIN-259))|(1<<(MySqlParserCHECKSUM-259))|(1<<(MySqlParserCIPHER-259))|(1<<(MySqlParserCLIENT-259))|(1<<(MySqlParserCOALESCE-259))|(1<<(MySqlParserCODE-259))|(1<<(MySqlParserCOLUMNS-259))|(1<<(MySqlParserCOLUMN_FORMAT-259))|(1<<(MySqlParserCOMMENT-259))|(1<<(MySqlParserCOMMIT-259))|(1<<(MySqlParserCOMPACT-259))|(1<<(MySqlParserCOMPLETION-259))|(1<<(MySqlParserCOMPRESSED-259))|(1<<(MySqlParserCONCURRENT-259))|(1<<(MySqlParserCONNECTION-259))|(1<<(MySqlParserCONSISTENT-259))|(1<<(MySqlParserCONTAINS-259))|(1<<(MySqlParserCONTRIBUTORS-259))|(1<<(MySqlParserCOPY-259))|(1<<(MySqlParserDATA-259))|(1<<(MySqlParserDATAFILE-259)))) != 0) || (((_la-293)&-(0x1f+1)) == 0 && ((1<<uint((_la-293)))&((1<<(MySqlParserDEFINER-293))|(1<<(MySqlParserDELAY_KEY_WRITE-293))|(1<<(MySqlParserDIRECTORY-293))|(1<<(MySqlParserDISABLE-293))|(1<<(MySqlParserDISCARD-293))|(1<<(MySqlParserDISK-293))|(1<<(MySqlParserDO-293))|(1<<(MySqlParserDUMPFILE-293))|(1<<(MySqlParserDUPLICATE-293))|(1<<(MySqlParserDYNAMIC-293))|(1<<(MySqlParserENABLE-293))|(1<<(MySqlParserENDS-293))|(1<<(MySqlParserENGINE-293))|(1<<(MySqlParserENGINES-293))|(1<<(MySqlParserERRORS-293))|(1<<(MySqlParserESCAPE-293))|(1<<(MySqlParserEVEN-293))|(1<<(MySqlParserEVENT-293))|(1<<(MySqlParserEVENTS-293))|(1<<(MySqlParserEVERY-293))|(1<<(MySqlParserEXCHANGE-293))|(1<<(MySqlParserEXCLUSIVE-293))|(1<<(MySqlParserEXPIRE-293))|(1<<(MySqlParserEXTENT_SIZE-293)))) != 0) || (((_la-325)&-(0x1f+1)) == 0 && ((1<<uint((_la-325)))&((1<<(MySqlParserFIELDS-325))|(1<<(MySqlParserFIRST-325))|(1<<(MySqlParserFIXED-325))|(1<<(MySqlParserFULL-325))|(1<<(MySqlParserFUNCTION-325))|(1<<(MySqlParserGLOBAL-325))|(1<<(MySqlParserGRANTS-325))|(1<<(MySqlParserHASH-325))|(1<<(MySqlParserHOST-325))|(1<<(MySqlParserIDENTIFIED-325))|(1<<(MySqlParserIMPORT-325))|(1<<(MySqlParserINITIAL_SIZE-325))|(1<<(MySqlParserINPLACE-325))|(1<<(MySqlParserINSERT_METHOD-325))|(1<<(MySqlParserINVOKER-325)))) != 0) || (((_la-357)&-(0x1f+1)) == 0 && ((1<<uint((_la-357)))&((1<<(MySqlParserISOLATION-357))|(1<<(MySqlParserISSUER-357))|(1<<(MySqlParserKEY_BLOCK_SIZE-357))|(1<<(MySqlParserLANGUAGE-357))|(1<<(MySqlParserLAST-357))|(1<<(MySqlParserLESS-357))|(1<<(MySqlParserLEVEL-357))|(1<<(MySqlParserLIST-357))|(1<<(MySqlParserLOCAL-357))|(1<<(MySqlParserLOGFILE-357))|(1<<(MySqlParserLOGS-357))|(1<<(MySqlParserMASTER-357)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903))|(1<<(MySqlParserPLUS-903))|(1<<(MySqlParserMINUS-903)))) != 0) || (((_la-937)&-(0x1f+1)) == 0 && ((1<<uint((_la-937)))&((1<<(MySqlParserEXCLAMATION_SYMBOL-937))|(1<<(MySqlParserBIT_NOT_OP-937))|(1<<(MySqlParserLR_BRACKET-937))|(1<<(MySqlParserZERO_DECIMAL-937))|(1<<(MySqlParserONE_DECIMAL-937))|(1<<(MySqlParserTWO_DECIMAL-937))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-937))|(1<<(MySqlParserSTART_NATIONAL_STRING_LITERAL-937))|(1<<(MySqlParserSTRING_LITERAL-937))|(1<<(MySqlParserDECIMAL_LITERAL-937))|(1<<(MySqlParserHEXADECIMAL_LITERAL-937))|(1<<(MySqlParserREAL_LITERAL-937))|(1<<(MySqlParserNULL_SPEC_LITERAL-937))|(1<<(MySqlParserBIT_STRING-937))|(1<<(MySqlParserSTRING_CHARSET_NAME-937))|(1<<(MySqlParserID-937))|(1<<(MySqlParserREVERSE_QUOTE_ID-937)))) != 0) || _la == MySqlParserLOCAL_ID || _la == MySqlParserGLOBAL_ID {
			{
				p.SetState(5367)
				p.Function_args()
			}

		}
		{
			p.SetState(5370)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewUdfFunctionCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5372)
			p.Id_()
		}
		p.SetState(5374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDOT || _la == MySqlParserDOT_ID {
			{
				p.SetState(5373)
				p.Dot_ext_id()
			}

		}
		{
			p.SetState(5376)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MySqlParserCASE)|(1<<MySqlParserCAST)|(1<<MySqlParserCONVERT)|(1<<MySqlParserCURRENT_USER))) != 0) || (((_la-36)&-(0x1f+1)) == 0 && ((1<<uint((_la-36)))&((1<<(MySqlParserDEFAULT-36))|(1<<(MySqlParserEXISTS-36))|(1<<(MySqlParserFALSE-36))|(1<<(MySqlParserIF-36)))) != 0) || (((_la-72)&-(0x1f+1)) == 0 && ((1<<uint((_la-72)))&((1<<(MySqlParserINTERVAL-72))|(1<<(MySqlParserLEFT-72))|(1<<(MySqlParserNOTNULL-72))|(1<<(MySqlParserNOT-72))|(1<<(MySqlParserNULL_LITERAL-72)))) != 0) || (((_la-122)&-(0x1f+1)) == 0 && ((1<<uint((_la-122)))&((1<<(MySqlParserREPLACE-122))|(1<<(MySqlParserRIGHT-122))|(1<<(MySqlParserTRUE-122)))) != 0) || (((_la-162)&-(0x1f+1)) == 0 && ((1<<uint((_la-162)))&((1<<(MySqlParserVALUES-162))|(1<<(MySqlParserDATE-162))|(1<<(MySqlParserTIME-162))|(1<<(MySqlParserTIMESTAMP-162))|(1<<(MySqlParserDATETIME-162))|(1<<(MySqlParserYEAR-162))|(1<<(MySqlParserCHAR-162))|(1<<(MySqlParserBINARY-162)))) != 0) || (((_la-195)&-(0x1f+1)) == 0 && ((1<<uint((_la-195)))&((1<<(MySqlParserTEXT-195))|(1<<(MySqlParserENUM-195))|(1<<(MySqlParserAVG-195))|(1<<(MySqlParserBIT_AND-195))|(1<<(MySqlParserBIT_OR-195))|(1<<(MySqlParserBIT_XOR-195))|(1<<(MySqlParserCOUNT-195))|(1<<(MySqlParserGROUP_CONCAT-195))|(1<<(MySqlParserMAX-195))|(1<<(MySqlParserMIN-195))|(1<<(MySqlParserSTD-195))|(1<<(MySqlParserSTDDEV-195))|(1<<(MySqlParserSTDDEV_POP-195))|(1<<(MySqlParserSTDDEV_SAMP-195))|(1<<(MySqlParserSUM-195))|(1<<(MySqlParserVAR_POP-195))|(1<<(MySqlParserVAR_SAMP-195))|(1<<(MySqlParserVARIANCE-195))|(1<<(MySqlParserCURRENT_DATE-195)))) != 0) || (((_la-227)&-(0x1f+1)) == 0 && ((1<<uint((_la-227)))&((1<<(MySqlParserCURRENT_TIME-227))|(1<<(MySqlParserCURRENT_TIMESTAMP-227))|(1<<(MySqlParserLOCALTIME-227))|(1<<(MySqlParserCURDATE-227))|(1<<(MySqlParserCURTIME-227))|(1<<(MySqlParserDATE_ADD-227))|(1<<(MySqlParserDATE_SUB-227))|(1<<(MySqlParserEXTRACT-227))|(1<<(MySqlParserLOCALTIMESTAMP-227))|(1<<(MySqlParserNOW-227))|(1<<(MySqlParserPOSITION-227))|(1<<(MySqlParserSUBSTR-227))|(1<<(MySqlParserSUBSTRING-227))|(1<<(MySqlParserSYSDATE-227))|(1<<(MySqlParserTRIM-227))|(1<<(MySqlParserUTC_DATE-227))|(1<<(MySqlParserUTC_TIME-227))|(1<<(MySqlParserUTC_TIMESTAMP-227))|(1<<(MySqlParserACTION-227))|(1<<(MySqlParserAFTER-227))|(1<<(MySqlParserALGORITHM-227))|(1<<(MySqlParserANY-227))|(1<<(MySqlParserAT-227))|(1<<(MySqlParserAUTHORS-227))|(1<<(MySqlParserAUTOCOMMIT-227))|(1<<(MySqlParserAUTOEXTEND_SIZE-227))|(1<<(MySqlParserAUTO_INCREMENT-227))|(1<<(MySqlParserAVG_ROW_LENGTH-227))|(1<<(MySqlParserBEGIN-227))|(1<<(MySqlParserBINLOG-227)))) != 0) || (((_la-259)&-(0x1f+1)) == 0 && ((1<<uint((_la-259)))&((1<<(MySqlParserBIT-259))|(1<<(MySqlParserBTREE-259))|(1<<(MySqlParserCASCADED-259))|(1<<(MySqlParserCHAIN-259))|(1<<(MySqlParserCHECKSUM-259))|(1<<(MySqlParserCIPHER-259))|(1<<(MySqlParserCLIENT-259))|(1<<(MySqlParserCOALESCE-259))|(1<<(MySqlParserCODE-259))|(1<<(MySqlParserCOLUMNS-259))|(1<<(MySqlParserCOLUMN_FORMAT-259))|(1<<(MySqlParserCOMMENT-259))|(1<<(MySqlParserCOMMIT-259))|(1<<(MySqlParserCOMPACT-259))|(1<<(MySqlParserCOMPLETION-259))|(1<<(MySqlParserCOMPRESSED-259))|(1<<(MySqlParserCONCURRENT-259))|(1<<(MySqlParserCONNECTION-259))|(1<<(MySqlParserCONSISTENT-259))|(1<<(MySqlParserCONTAINS-259))|(1<<(MySqlParserCONTRIBUTORS-259))|(1<<(MySqlParserCOPY-259))|(1<<(MySqlParserDATA-259))|(1<<(MySqlParserDATAFILE-259)))) != 0) || (((_la-293)&-(0x1f+1)) == 0 && ((1<<uint((_la-293)))&((1<<(MySqlParserDEFINER-293))|(1<<(MySqlParserDELAY_KEY_WRITE-293))|(1<<(MySqlParserDIRECTORY-293))|(1<<(MySqlParserDISABLE-293))|(1<<(MySqlParserDISCARD-293))|(1<<(MySqlParserDISK-293))|(1<<(MySqlParserDO-293))|(1<<(MySqlParserDUMPFILE-293))|(1<<(MySqlParserDUPLICATE-293))|(1<<(MySqlParserDYNAMIC-293))|(1<<(MySqlParserENABLE-293))|(1<<(MySqlParserENDS-293))|(1<<(MySqlParserENGINE-293))|(1<<(MySqlParserENGINES-293))|(1<<(MySqlParserERRORS-293))|(1<<(MySqlParserESCAPE-293))|(1<<(MySqlParserEVEN-293))|(1<<(MySqlParserEVENT-293))|(1<<(MySqlParserEVENTS-293))|(1<<(MySqlParserEVERY-293))|(1<<(MySqlParserEXCHANGE-293))|(1<<(MySqlParserEXCLUSIVE-293))|(1<<(MySqlParserEXPIRE-293))|(1<<(MySqlParserEXTENT_SIZE-293)))) != 0) || (((_la-325)&-(0x1f+1)) == 0 && ((1<<uint((_la-325)))&((1<<(MySqlParserFIELDS-325))|(1<<(MySqlParserFIRST-325))|(1<<(MySqlParserFIXED-325))|(1<<(MySqlParserFULL-325))|(1<<(MySqlParserFUNCTION-325))|(1<<(MySqlParserGLOBAL-325))|(1<<(MySqlParserGRANTS-325))|(1<<(MySqlParserHASH-325))|(1<<(MySqlParserHOST-325))|(1<<(MySqlParserIDENTIFIED-325))|(1<<(MySqlParserIMPORT-325))|(1<<(MySqlParserINITIAL_SIZE-325))|(1<<(MySqlParserINPLACE-325))|(1<<(MySqlParserINSERT_METHOD-325))|(1<<(MySqlParserINVOKER-325)))) != 0) || (((_la-357)&-(0x1f+1)) == 0 && ((1<<uint((_la-357)))&((1<<(MySqlParserISOLATION-357))|(1<<(MySqlParserISSUER-357))|(1<<(MySqlParserKEY_BLOCK_SIZE-357))|(1<<(MySqlParserLANGUAGE-357))|(1<<(MySqlParserLAST-357))|(1<<(MySqlParserLESS-357))|(1<<(MySqlParserLEVEL-357))|(1<<(MySqlParserLIST-357))|(1<<(MySqlParserLOCAL-357))|(1<<(MySqlParserLOGFILE-357))|(1<<(MySqlParserLOGS-357))|(1<<(MySqlParserMASTER-357)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519))|(1<<(MySqlParserQUARTER-519))|(1<<(MySqlParserMONTH-519)))) != 0) || (((_la-551)&-(0x1f+1)) == 0 && ((1<<uint((_la-551)))&((1<<(MySqlParserDAY-551))|(1<<(MySqlParserHOUR-551))|(1<<(MySqlParserMINUTE-551))|(1<<(MySqlParserWEEK-551))|(1<<(MySqlParserSECOND-551))|(1<<(MySqlParserMICROSECOND-551))|(1<<(MySqlParserTABLES-551))|(1<<(MySqlParserROUTINE-551))|(1<<(MySqlParserEXECUTE-551))|(1<<(MySqlParserFILE-551))|(1<<(MySqlParserPROCESS-551))|(1<<(MySqlParserRELOAD-551))|(1<<(MySqlParserSHUTDOWN-551))|(1<<(MySqlParserSUPER-551))|(1<<(MySqlParserPRIVILEGES-551))|(1<<(MySqlParserARMSCII8-551))|(1<<(MySqlParserASCII-551))|(1<<(MySqlParserBIG5-551))|(1<<(MySqlParserCP1250-551))|(1<<(MySqlParserCP1251-551))|(1<<(MySqlParserCP1256-551))|(1<<(MySqlParserCP1257-551))|(1<<(MySqlParserCP850-551))|(1<<(MySqlParserCP852-551))|(1<<(MySqlParserCP866-551))|(1<<(MySqlParserCP932-551))|(1<<(MySqlParserDEC8-551))|(1<<(MySqlParserEUCJPMS-551))|(1<<(MySqlParserEUCKR-551))|(1<<(MySqlParserGB2312-551))|(1<<(MySqlParserGBK-551))|(1<<(MySqlParserGEOSTD8-551)))) != 0) || (((_la-583)&-(0x1f+1)) == 0 && ((1<<uint((_la-583)))&((1<<(MySqlParserGREEK-583))|(1<<(MySqlParserHEBREW-583))|(1<<(MySqlParserHP8-583))|(1<<(MySqlParserKEYBCS2-583))|(1<<(MySqlParserKOI8R-583))|(1<<(MySqlParserKOI8U-583))|(1<<(MySqlParserLATIN1-583))|(1<<(MySqlParserLATIN2-583))|(1<<(MySqlParserLATIN5-583))|(1<<(MySqlParserLATIN7-583))|(1<<(MySqlParserMACCE-583))|(1<<(MySqlParserMACROMAN-583))|(1<<(MySqlParserSJIS-583))|(1<<(MySqlParserSWE7-583))|(1<<(MySqlParserTIS620-583))|(1<<(MySqlParserUCS2-583))|(1<<(MySqlParserUJIS-583))|(1<<(MySqlParserUTF16-583))|(1<<(MySqlParserUTF16LE-583))|(1<<(MySqlParserUTF32-583))|(1<<(MySqlParserUTF8-583))|(1<<(MySqlParserUTF8MB3-583))|(1<<(MySqlParserUTF8MB4-583))|(1<<(MySqlParserARCHIVE-583))|(1<<(MySqlParserBLACKHOLE-583))|(1<<(MySqlParserCSV-583))|(1<<(MySqlParserFEDERATED-583))|(1<<(MySqlParserINNODB-583))|(1<<(MySqlParserMEMORY-583))|(1<<(MySqlParserMRG_MYISAM-583))|(1<<(MySqlParserMYISAM-583))|(1<<(MySqlParserNDB-583)))) != 0) || (((_la-615)&-(0x1f+1)) == 0 && ((1<<uint((_la-615)))&((1<<(MySqlParserNDBCLUSTER-615))|(1<<(MySqlParserPERFOMANCE_SCHEMA-615))|(1<<(MySqlParserREPEATABLE-615))|(1<<(MySqlParserCOMMITTED-615))|(1<<(MySqlParserUNCOMMITTED-615))|(1<<(MySqlParserSERIALIZABLE-615))|(1<<(MySqlParserGEOMETRYCOLLECTION-615))|(1<<(MySqlParserLINESTRING-615))|(1<<(MySqlParserMULTILINESTRING-615))|(1<<(MySqlParserMULTIPOINT-615))|(1<<(MySqlParserMULTIPOLYGON-615))|(1<<(MySqlParserPOINT-615))|(1<<(MySqlParserPOLYGON-615))|(1<<(MySqlParserABS-615))|(1<<(MySqlParserACOS-615))|(1<<(MySqlParserADDDATE-615))|(1<<(MySqlParserADDTIME-615))|(1<<(MySqlParserAES_DECRYPT-615))|(1<<(MySqlParserAES_ENCRYPT-615))|(1<<(MySqlParserAREA-615))|(1<<(MySqlParserASBINARY-615))|(1<<(MySqlParserASIN-615))|(1<<(MySqlParserASTEXT-615))|(1<<(MySqlParserASWKB-615))|(1<<(MySqlParserASWKT-615))|(1<<(MySqlParserASYMMETRIC_DECRYPT-615))|(1<<(MySqlParserASYMMETRIC_DERIVE-615))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-615))|(1<<(MySqlParserASYMMETRIC_SIGN-615))|(1<<(MySqlParserASYMMETRIC_VERIFY-615))|(1<<(MySqlParserATAN-615))|(1<<(MySqlParserATAN2-615)))) != 0) || (((_la-647)&-(0x1f+1)) == 0 && ((1<<uint((_la-647)))&((1<<(MySqlParserBENCHMARK-647))|(1<<(MySqlParserBIN-647))|(1<<(MySqlParserBIT_COUNT-647))|(1<<(MySqlParserBIT_LENGTH-647))|(1<<(MySqlParserBUFFER-647))|(1<<(MySqlParserCEIL-647))|(1<<(MySqlParserCEILING-647))|(1<<(MySqlParserCENTROID-647))|(1<<(MySqlParserCHARACTER_LENGTH-647))|(1<<(MySqlParserCHARSET-647))|(1<<(MySqlParserCHAR_LENGTH-647))|(1<<(MySqlParserCOERCIBILITY-647))|(1<<(MySqlParserCOLLATION-647))|(1<<(MySqlParserCOMPRESS-647))|(1<<(MySqlParserCONCAT-647))|(1<<(MySqlParserCONCAT_WS-647))|(1<<(MySqlParserCONNECTION_ID-647))|(1<<(MySqlParserCONV-647))|(1<<(MySqlParserCONVERT_TZ-647))|(1<<(MySqlParserCOS-647))|(1<<(MySqlParserCOT-647))|(1<<(MySqlParserCRC32-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-647))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-647))|(1<<(MySqlParserCREATE_DH_PARAMETERS-647))|(1<<(MySqlParserCREATE_DIGEST-647))|(1<<(MySqlParserCROSSES-647))|(1<<(MySqlParserDATEDIFF-647))|(1<<(MySqlParserDATE_FORMAT-647))|(1<<(MySqlParserDAYNAME-647))|(1<<(MySqlParserDAYOFMONTH-647))|(1<<(MySqlParserDAYOFWEEK-647)))) != 0) || (((_la-679)&-(0x1f+1)) == 0 && ((1<<uint((_la-679)))&((1<<(MySqlParserDAYOFYEAR-679))|(1<<(MySqlParserDECODE-679))|(1<<(MySqlParserDEGREES-679))|(1<<(MySqlParserDES_DECRYPT-679))|(1<<(MySqlParserDES_ENCRYPT-679))|(1<<(MySqlParserDIMENSION-679))|(1<<(MySqlParserDISJOINT-679))|(1<<(MySqlParserELT-679))|(1<<(MySqlParserENCODE-679))|(1<<(MySqlParserENCRYPT-679))|(1<<(MySqlParserENDPOINT-679))|(1<<(MySqlParserENVELOPE-679))|(1<<(MySqlParserEQUALS-679))|(1<<(MySqlParserEXP-679))|(1<<(MySqlParserEXPORT_SET-679))|(1<<(MySqlParserEXTERIORRING-679))|(1<<(MySqlParserEXTRACTVALUE-679))|(1<<(MySqlParserFIELD-679))|(1<<(MySqlParserFIND_IN_SET-679))|(1<<(MySqlParserFLOOR-679))|(1<<(MySqlParserFORMAT-679))|(1<<(MySqlParserFOUND_ROWS-679))|(1<<(MySqlParserFROM_BASE64-679))|(1<<(MySqlParserFROM_DAYS-679))|(1<<(MySqlParserFROM_UNIXTIME-679))|(1<<(MySqlParserGEOMCOLLFROMTEXT-679))|(1<<(MySqlParserGEOMCOLLFROMWKB-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-679))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-679))|(1<<(MySqlParserGEOMETRYFROMTEXT-679))|(1<<(MySqlParserGEOMETRYFROMWKB-679))|(1<<(MySqlParserGEOMETRYN-679)))) != 0) || (((_la-711)&-(0x1f+1)) == 0 && ((1<<uint((_la-711)))&((1<<(MySqlParserGEOMETRYTYPE-711))|(1<<(MySqlParserGEOMFROMTEXT-711))|(1<<(MySqlParserGEOMFROMWKB-711))|(1<<(MySqlParserGET_FORMAT-711))|(1<<(MySqlParserGET_LOCK-711))|(1<<(MySqlParserGLENGTH-711))|(1<<(MySqlParserGREATEST-711))|(1<<(MySqlParserGTID_SUBSET-711))|(1<<(MySqlParserGTID_SUBTRACT-711))|(1<<(MySqlParserHEX-711))|(1<<(MySqlParserIFNULL-711))|(1<<(MySqlParserINET6_ATON-711))|(1<<(MySqlParserINET6_NTOA-711))|(1<<(MySqlParserINET_ATON-711))|(1<<(MySqlParserINET_NTOA-711))|(1<<(MySqlParserINSTR-711))|(1<<(MySqlParserINTERIORRINGN-711))|(1<<(MySqlParserINTERSECTS-711))|(1<<(MySqlParserISCLOSED-711))|(1<<(MySqlParserISEMPTY-711))|(1<<(MySqlParserISNULL-711))|(1<<(MySqlParserISSIMPLE-711))|(1<<(MySqlParserIS_FREE_LOCK-711))|(1<<(MySqlParserIS_IPV4-711))|(1<<(MySqlParserIS_IPV4_COMPAT-711))|(1<<(MySqlParserIS_IPV4_MAPPED-711))|(1<<(MySqlParserIS_IPV6-711))|(1<<(MySqlParserIS_USED_LOCK-711))|(1<<(MySqlParserLAST_INSERT_ID-711))|(1<<(MySqlParserLCASE-711))|(1<<(MySqlParserLEAST-711))|(1<<(MySqlParserLENGTH-711)))) != 0) || (((_la-743)&-(0x1f+1)) == 0 && ((1<<uint((_la-743)))&((1<<(MySqlParserLINEFROMTEXT-743))|(1<<(MySqlParserLINEFROMWKB-743))|(1<<(MySqlParserLINESTRINGFROMTEXT-743))|(1<<(MySqlParserLINESTRINGFROMWKB-743))|(1<<(MySqlParserLN-743))|(1<<(MySqlParserLOAD_FILE-743))|(1<<(MySqlParserLOCATE-743))|(1<<(MySqlParserLOG-743))|(1<<(MySqlParserLOG10-743))|(1<<(MySqlParserLOG2-743))|(1<<(MySqlParserLOWER-743))|(1<<(MySqlParserLPAD-743))|(1<<(MySqlParserLTRIM-743))|(1<<(MySqlParserMAKEDATE-743))|(1<<(MySqlParserMAKETIME-743))|(1<<(MySqlParserMAKE_SET-743))|(1<<(MySqlParserMASTER_POS_WAIT-743))|(1<<(MySqlParserMBRCONTAINS-743))|(1<<(MySqlParserMBRDISJOINT-743))|(1<<(MySqlParserMBREQUAL-743))|(1<<(MySqlParserMBRINTERSECTS-743))|(1<<(MySqlParserMBROVERLAPS-743))|(1<<(MySqlParserMBRTOUCHES-743))|(1<<(MySqlParserMBRWITHIN-743))|(1<<(MySqlParserMD5-743))|(1<<(MySqlParserMLINEFROMTEXT-743))|(1<<(MySqlParserMLINEFROMWKB-743))|(1<<(MySqlParserMONTHNAME-743))|(1<<(MySqlParserMPOINTFROMTEXT-743))|(1<<(MySqlParserMPOINTFROMWKB-743))|(1<<(MySqlParserMPOLYFROMTEXT-743))|(1<<(MySqlParserMPOLYFROMWKB-743)))) != 0) || (((_la-775)&-(0x1f+1)) == 0 && ((1<<uint((_la-775)))&((1<<(MySqlParserMULTILINESTRINGFROMTEXT-775))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-775))|(1<<(MySqlParserMULTIPOINTFROMTEXT-775))|(1<<(MySqlParserMULTIPOINTFROMWKB-775))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-775))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-775))|(1<<(MySqlParserNAME_CONST-775))|(1<<(MySqlParserNULLIF-775))|(1<<(MySqlParserNUMGEOMETRIES-775))|(1<<(MySqlParserNUMINTERIORRINGS-775))|(1<<(MySqlParserNUMPOINTS-775))|(1<<(MySqlParserOCT-775))|(1<<(MySqlParserOCTET_LENGTH-775))|(1<<(MySqlParserORD-775))|(1<<(MySqlParserOVERLAPS-775))|(1<<(MySqlParserPERIOD_ADD-775))|(1<<(MySqlParserPERIOD_DIFF-775))|(1<<(MySqlParserPI-775))|(1<<(MySqlParserPOINTFROMTEXT-775))|(1<<(MySqlParserPOINTFROMWKB-775))|(1<<(MySqlParserPOINTN-775))|(1<<(MySqlParserPOLYFROMTEXT-775))|(1<<(MySqlParserPOLYFROMWKB-775))|(1<<(MySqlParserPOLYGONFROMTEXT-775))|(1<<(MySqlParserPOLYGONFROMWKB-775))|(1<<(MySqlParserPOW-775))|(1<<(MySqlParserPOWER-775))|(1<<(MySqlParserQUOTE-775))|(1<<(MySqlParserRADIANS-775))|(1<<(MySqlParserRAND-775))|(1<<(MySqlParserRANDOM_BYTES-775))|(1<<(MySqlParserRELEASE_LOCK-775)))) != 0) || (((_la-807)&-(0x1f+1)) == 0 && ((1<<uint((_la-807)))&((1<<(MySqlParserREVERSE-807))|(1<<(MySqlParserROUND-807))|(1<<(MySqlParserROW_COUNT-807))|(1<<(MySqlParserRPAD-807))|(1<<(MySqlParserRTRIM-807))|(1<<(MySqlParserSEC_TO_TIME-807))|(1<<(MySqlParserSESSION_USER-807))|(1<<(MySqlParserSHA-807))|(1<<(MySqlParserSHA1-807))|(1<<(MySqlParserSHA2-807))|(1<<(MySqlParserSIGN-807))|(1<<(MySqlParserSIN-807))|(1<<(MySqlParserSLEEP-807))|(1<<(MySqlParserSOUNDEX-807))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-807))|(1<<(MySqlParserSQRT-807))|(1<<(MySqlParserSRID-807))|(1<<(MySqlParserSTARTPOINT-807))|(1<<(MySqlParserSTRCMP-807))|(1<<(MySqlParserSTR_TO_DATE-807))|(1<<(MySqlParserST_AREA-807))|(1<<(MySqlParserST_ASBINARY-807))|(1<<(MySqlParserST_ASTEXT-807))|(1<<(MySqlParserST_ASWKB-807))|(1<<(MySqlParserST_ASWKT-807))|(1<<(MySqlParserST_BUFFER-807))|(1<<(MySqlParserST_CENTROID-807))|(1<<(MySqlParserST_CONTAINS-807))|(1<<(MySqlParserST_CROSSES-807))|(1<<(MySqlParserST_DIFFERENCE-807))|(1<<(MySqlParserST_DIMENSION-807))|(1<<(MySqlParserST_DISJOINT-807)))) != 0) || (((_la-839)&-(0x1f+1)) == 0 && ((1<<uint((_la-839)))&((1<<(MySqlParserST_DISTANCE-839))|(1<<(MySqlParserST_ENDPOINT-839))|(1<<(MySqlParserST_ENVELOPE-839))|(1<<(MySqlParserST_EQUALS-839))|(1<<(MySqlParserST_EXTERIORRING-839))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMTXT-839))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-839))|(1<<(MySqlParserST_GEOMETRYFROMWKB-839))|(1<<(MySqlParserST_GEOMETRYN-839))|(1<<(MySqlParserST_GEOMETRYTYPE-839))|(1<<(MySqlParserST_GEOMFROMTEXT-839))|(1<<(MySqlParserST_GEOMFROMWKB-839))|(1<<(MySqlParserST_INTERIORRINGN-839))|(1<<(MySqlParserST_INTERSECTION-839))|(1<<(MySqlParserST_INTERSECTS-839))|(1<<(MySqlParserST_ISCLOSED-839))|(1<<(MySqlParserST_ISEMPTY-839))|(1<<(MySqlParserST_ISSIMPLE-839))|(1<<(MySqlParserST_LINEFROMTEXT-839))|(1<<(MySqlParserST_LINEFROMWKB-839))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-839))|(1<<(MySqlParserST_LINESTRINGFROMWKB-839))|(1<<(MySqlParserST_NUMGEOMETRIES-839))|(1<<(MySqlParserST_NUMINTERIORRING-839))|(1<<(MySqlParserST_NUMINTERIORRINGS-839))|(1<<(MySqlParserST_NUMPOINTS-839))|(1<<(MySqlParserST_OVERLAPS-839))|(1<<(MySqlParserST_POINTFROMTEXT-839)))) != 0) || (((_la-871)&-(0x1f+1)) == 0 && ((1<<uint((_la-871)))&((1<<(MySqlParserST_POINTFROMWKB-871))|(1<<(MySqlParserST_POINTN-871))|(1<<(MySqlParserST_POLYFROMTEXT-871))|(1<<(MySqlParserST_POLYFROMWKB-871))|(1<<(MySqlParserST_POLYGONFROMTEXT-871))|(1<<(MySqlParserST_POLYGONFROMWKB-871))|(1<<(MySqlParserST_SRID-871))|(1<<(MySqlParserST_STARTPOINT-871))|(1<<(MySqlParserST_SYMDIFFERENCE-871))|(1<<(MySqlParserST_TOUCHES-871))|(1<<(MySqlParserST_UNION-871))|(1<<(MySqlParserST_WITHIN-871))|(1<<(MySqlParserST_X-871))|(1<<(MySqlParserST_Y-871))|(1<<(MySqlParserSUBDATE-871))|(1<<(MySqlParserSUBSTRING_INDEX-871))|(1<<(MySqlParserSUBTIME-871))|(1<<(MySqlParserSYSTEM_USER-871))|(1<<(MySqlParserTAN-871))|(1<<(MySqlParserTIMEDIFF-871))|(1<<(MySqlParserTIMESTAMPADD-871))|(1<<(MySqlParserTIMESTAMPDIFF-871))|(1<<(MySqlParserTIME_FORMAT-871))|(1<<(MySqlParserTIME_TO_SEC-871))|(1<<(MySqlParserTOUCHES-871))|(1<<(MySqlParserTO_BASE64-871))|(1<<(MySqlParserTO_DAYS-871))|(1<<(MySqlParserTO_SECONDS-871))|(1<<(MySqlParserUCASE-871))|(1<<(MySqlParserUNCOMPRESS-871))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-871))|(1<<(MySqlParserUNHEX-871)))) != 0) || (((_la-903)&-(0x1f+1)) == 0 && ((1<<uint((_la-903)))&((1<<(MySqlParserUNIX_TIMESTAMP-903))|(1<<(MySqlParserUPDATEXML-903))|(1<<(MySqlParserUPPER-903))|(1<<(MySqlParserUUID-903))|(1<<(MySqlParserUUID_SHORT-903))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-903))|(1<<(MySqlParserVERSION-903))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-903))|(1<<(MySqlParserWEEKDAY-903))|(1<<(MySqlParserWEEKOFYEAR-903))|(1<<(MySqlParserWEIGHT_STRING-903))|(1<<(MySqlParserWITHIN-903))|(1<<(MySqlParserYEARWEEK-903))|(1<<(MySqlParserY_FUNCTION-903))|(1<<(MySqlParserX_FUNCTION-903))|(1<<(MySqlParserPLUS-903))|(1<<(MySqlParserMINUS-903)))) != 0) || (((_la-937)&-(0x1f+1)) == 0 && ((1<<uint((_la-937)))&((1<<(MySqlParserEXCLAMATION_SYMBOL-937))|(1<<(MySqlParserBIT_NOT_OP-937))|(1<<(MySqlParserLR_BRACKET-937))|(1<<(MySqlParserZERO_DECIMAL-937))|(1<<(MySqlParserONE_DECIMAL-937))|(1<<(MySqlParserTWO_DECIMAL-937))|(1<<(MySqlParserCHARSET_REVERSE_QOUTE_STRING-937))|(1<<(MySqlParserSTART_NATIONAL_STRING_LITERAL-937))|(1<<(MySqlParserSTRING_LITERAL-937))|(1<<(MySqlParserDECIMAL_LITERAL-937))|(1<<(MySqlParserHEXADECIMAL_LITERAL-937))|(1<<(MySqlParserREAL_LITERAL-937))|(1<<(MySqlParserNULL_SPEC_LITERAL-937))|(1<<(MySqlParserBIT_STRING-937))|(1<<(MySqlParserSTRING_CHARSET_NAME-937))|(1<<(MySqlParserID-937))|(1<<(MySqlParserREVERSE_QUOTE_ID-937)))) != 0) || _la == MySqlParserLOCAL_ID || _la == MySqlParserGLOBAL_ID {
			{
				p.SetState(5377)
				p.Function_args()
			}

		}
		{
			p.SetState(5380)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ISpecific_function_callContext is an interface to support dynamic dispatch.
type ISpecific_function_callContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecific_function_callContext differentiates from other interfaces.
	IsSpecific_function_callContext()
}

type Specific_function_callContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecific_function_callContext() *Specific_function_callContext {
	var p = new(Specific_function_callContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_specific_function_call
	return p
}

func (*Specific_function_callContext) IsSpecific_function_callContext() {}

func NewSpecific_function_callContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Specific_function_callContext {
	var p = new(Specific_function_callContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_specific_function_call

	return p
}

func (s *Specific_function_callContext) GetParser() antlr.Parser { return s.parser }

func (s *Specific_function_callContext) CopyFrom(ctx *Specific_function_callContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Specific_function_callContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Specific_function_callContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ValuesFCallContext struct {
	*Specific_function_callContext
}

func NewValuesFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValuesFCallContext {
	var p = new(ValuesFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *ValuesFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValuesFCallContext) VALUES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUES, 0)
}

func (s *ValuesFCallContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *ValuesFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterValuesFCall(s)
	}
}

func (s *ValuesFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitValuesFCall(s)
	}
}

func (s *ValuesFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitValuesFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExtractFCallContext struct {
	*Specific_function_callContext
	fstr  IString_literalContext
	fexpr IExpressionContext
}

func NewExtractFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExtractFCallContext {
	var p = new(ExtractFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *ExtractFCallContext) GetFstr() IString_literalContext { return s.fstr }

func (s *ExtractFCallContext) GetFexpr() IExpressionContext { return s.fexpr }

func (s *ExtractFCallContext) SetFstr(v IString_literalContext) { s.fstr = v }

func (s *ExtractFCallContext) SetFexpr(v IExpressionContext) { s.fexpr = v }

func (s *ExtractFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractFCallContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACT, 0)
}

func (s *ExtractFCallContext) Interval_type() IInterval_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_typeContext)
}

func (s *ExtractFCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *ExtractFCallContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *ExtractFCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExtractFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExtractFCall(s)
	}
}

func (s *ExtractFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExtractFCall(s)
	}
}

func (s *ExtractFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExtractFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type TrimFCallContext struct {
	*Specific_function_callContext
	fstr  IString_literalContext
	fexpr IExpressionContext
	sstr  IString_literalContext
	sexpr IExpressionContext
}

func NewTrimFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TrimFCallContext {
	var p = new(TrimFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *TrimFCallContext) GetFstr() IString_literalContext { return s.fstr }

func (s *TrimFCallContext) GetFexpr() IExpressionContext { return s.fexpr }

func (s *TrimFCallContext) GetSstr() IString_literalContext { return s.sstr }

func (s *TrimFCallContext) GetSexpr() IExpressionContext { return s.sexpr }

func (s *TrimFCallContext) SetFstr(v IString_literalContext) { s.fstr = v }

func (s *TrimFCallContext) SetFexpr(v IExpressionContext) { s.fexpr = v }

func (s *TrimFCallContext) SetSstr(v IString_literalContext) { s.sstr = v }

func (s *TrimFCallContext) SetSexpr(v IExpressionContext) { s.sexpr = v }

func (s *TrimFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrimFCallContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *TrimFCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *TrimFCallContext) BOTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBOTH, 0)
}

func (s *TrimFCallContext) LEADING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEADING, 0)
}

func (s *TrimFCallContext) TRAILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRAILING, 0)
}

func (s *TrimFCallContext) AllString_literal() []IString_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_literalContext)(nil)).Elem())
	var tst = make([]IString_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_literalContext)
		}
	}

	return tst
}

func (s *TrimFCallContext) String_literal(i int) IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *TrimFCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TrimFCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TrimFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTrimFCall(s)
	}
}

func (s *TrimFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTrimFCall(s)
	}
}

func (s *TrimFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTrimFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type GetFormatFCallContext struct {
	*Specific_function_callContext
}

func NewGetFormatFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *GetFormatFCallContext {
	var p = new(GetFormatFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *GetFormatFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GetFormatFCallContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *GetFormatFCallContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *GetFormatFCallContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *GetFormatFCallContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *GetFormatFCallContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *GetFormatFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterGetFormatFCall(s)
	}
}

func (s *GetFormatFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitGetFormatFCall(s)
	}
}

func (s *GetFormatFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitGetFormatFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConvertDataTypeFCallContext struct {
	*Specific_function_callContext
}

func NewConvertDataTypeFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConvertDataTypeFCallContext {
	var p = new(ConvertDataTypeFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *ConvertDataTypeFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConvertDataTypeFCallContext) CONVERT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT, 0)
}

func (s *ConvertDataTypeFCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConvertDataTypeFCallContext) Data_type_to_convert() IData_type_to_convertContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IData_type_to_convertContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IData_type_to_convertContext)
}

func (s *ConvertDataTypeFCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *ConvertDataTypeFCallContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *ConvertDataTypeFCallContext) CAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCAST, 0)
}

func (s *ConvertDataTypeFCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *ConvertDataTypeFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConvertDataTypeFCall(s)
	}
}

func (s *ConvertDataTypeFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConvertDataTypeFCall(s)
	}
}

func (s *ConvertDataTypeFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConvertDataTypeFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type WeightFCallContext struct {
	*Specific_function_callContext
}

func NewWeightFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *WeightFCallContext {
	var p = new(WeightFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *WeightFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WeightFCallContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *WeightFCallContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *WeightFCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WeightFCallContext) AS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAS, 0)
}

func (s *WeightFCallContext) Decimal_literal() IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *WeightFCallContext) Levels_in_weight_string() ILevels_in_weight_stringContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILevels_in_weight_stringContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILevels_in_weight_stringContext)
}

func (s *WeightFCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *WeightFCallContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *WeightFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterWeightFCall(s)
	}
}

func (s *WeightFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitWeightFCall(s)
	}
}

func (s *WeightFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitWeightFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type SimpleSpecificFCallContext struct {
	*Specific_function_callContext
}

func NewSimpleSpecificFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleSpecificFCallContext {
	var p = new(SimpleSpecificFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *SimpleSpecificFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleSpecificFCallContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *SimpleSpecificFCallContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *SimpleSpecificFCallContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *SimpleSpecificFCallContext) CURRENT_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_USER, 0)
}

func (s *SimpleSpecificFCallContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *SimpleSpecificFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSimpleSpecificFCall(s)
	}
}

func (s *SimpleSpecificFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSimpleSpecificFCall(s)
	}
}

func (s *SimpleSpecificFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSimpleSpecificFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type CaseFCallContext struct {
	*Specific_function_callContext
	_function_arg IFunction_argContext
	condarg       []IFunction_argContext
	resarg        []IFunction_argContext
}

func NewCaseFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CaseFCallContext {
	var p = new(CaseFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *CaseFCallContext) Get_function_arg() IFunction_argContext { return s._function_arg }

func (s *CaseFCallContext) Set_function_arg(v IFunction_argContext) { s._function_arg = v }

func (s *CaseFCallContext) GetCondarg() []IFunction_argContext { return s.condarg }

func (s *CaseFCallContext) GetResarg() []IFunction_argContext { return s.resarg }

func (s *CaseFCallContext) SetCondarg(v []IFunction_argContext) { s.condarg = v }

func (s *CaseFCallContext) SetResarg(v []IFunction_argContext) { s.resarg = v }

func (s *CaseFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseFCallContext) CASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASE, 0)
}

func (s *CaseFCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CaseFCallContext) END() antlr.TerminalNode {
	return s.GetToken(MySqlParserEND, 0)
}

func (s *CaseFCallContext) AllWHEN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserWHEN)
}

func (s *CaseFCallContext) WHEN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserWHEN, i)
}

func (s *CaseFCallContext) AllTHEN() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserTHEN)
}

func (s *CaseFCallContext) THEN(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserTHEN, i)
}

func (s *CaseFCallContext) ELSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserELSE, 0)
}

func (s *CaseFCallContext) AllFunction_arg() []IFunction_argContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_argContext)(nil)).Elem())
	var tst = make([]IFunction_argContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_argContext)
		}
	}

	return tst
}

func (s *CaseFCallContext) Function_arg(i int) IFunction_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_argContext)
}

func (s *CaseFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCaseFCall(s)
	}
}

func (s *CaseFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCaseFCall(s)
	}
}

func (s *CaseFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCaseFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type PositionFCallContext struct {
	*Specific_function_callContext
	fstr  IString_literalContext
	fexpr IExpressionContext
	sstr  IString_literalContext
	sexpr IExpressionContext
}

func NewPositionFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionFCallContext {
	var p = new(PositionFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *PositionFCallContext) GetFstr() IString_literalContext { return s.fstr }

func (s *PositionFCallContext) GetFexpr() IExpressionContext { return s.fexpr }

func (s *PositionFCallContext) GetSstr() IString_literalContext { return s.sstr }

func (s *PositionFCallContext) GetSexpr() IExpressionContext { return s.sexpr }

func (s *PositionFCallContext) SetFstr(v IString_literalContext) { s.fstr = v }

func (s *PositionFCallContext) SetFexpr(v IExpressionContext) { s.fexpr = v }

func (s *PositionFCallContext) SetSstr(v IString_literalContext) { s.sstr = v }

func (s *PositionFCallContext) SetSexpr(v IExpressionContext) { s.sexpr = v }

func (s *PositionFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionFCallContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *PositionFCallContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *PositionFCallContext) AllString_literal() []IString_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IString_literalContext)(nil)).Elem())
	var tst = make([]IString_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IString_literalContext)
		}
	}

	return tst
}

func (s *PositionFCallContext) String_literal(i int) IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *PositionFCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *PositionFCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PositionFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPositionFCall(s)
	}
}

func (s *PositionFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPositionFCall(s)
	}
}

func (s *PositionFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPositionFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type CharFCallContext struct {
	*Specific_function_callContext
}

func NewCharFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CharFCallContext {
	var p = new(CharFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *CharFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CharFCallContext) CHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR, 0)
}

func (s *CharFCallContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *CharFCallContext) USING() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSING, 0)
}

func (s *CharFCallContext) Charset_name() ICharset_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICharset_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICharset_nameContext)
}

func (s *CharFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharFCall(s)
	}
}

func (s *CharFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharFCall(s)
	}
}

func (s *CharFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubstrFCallContext struct {
	*Specific_function_callContext
	fexpr    IExpressionContext
	fdecimal IDecimal_literalContext
	sexpr    IExpressionContext
	sdecimal IDecimal_literalContext
	texpr    IExpressionContext
}

func NewSubstrFCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstrFCallContext {
	var p = new(SubstrFCallContext)

	p.Specific_function_callContext = NewEmptySpecific_function_callContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Specific_function_callContext))

	return p
}

func (s *SubstrFCallContext) GetFexpr() IExpressionContext { return s.fexpr }

func (s *SubstrFCallContext) GetFdecimal() IDecimal_literalContext { return s.fdecimal }

func (s *SubstrFCallContext) GetSexpr() IExpressionContext { return s.sexpr }

func (s *SubstrFCallContext) GetSdecimal() IDecimal_literalContext { return s.sdecimal }

func (s *SubstrFCallContext) GetTexpr() IExpressionContext { return s.texpr }

func (s *SubstrFCallContext) SetFexpr(v IExpressionContext) { s.fexpr = v }

func (s *SubstrFCallContext) SetFdecimal(v IDecimal_literalContext) { s.fdecimal = v }

func (s *SubstrFCallContext) SetSexpr(v IExpressionContext) { s.sexpr = v }

func (s *SubstrFCallContext) SetSdecimal(v IDecimal_literalContext) { s.sdecimal = v }

func (s *SubstrFCallContext) SetTexpr(v IExpressionContext) { s.texpr = v }

func (s *SubstrFCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstrFCallContext) FROM() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM, 0)
}

func (s *SubstrFCallContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *SubstrFCallContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *SubstrFCallContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *SubstrFCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SubstrFCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SubstrFCallContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *SubstrFCallContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *SubstrFCallContext) FOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOR, 0)
}

func (s *SubstrFCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubstrFCall(s)
	}
}

func (s *SubstrFCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubstrFCall(s)
	}
}

func (s *SubstrFCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubstrFCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Specific_function_call() (localctx ISpecific_function_callContext) {
	localctx = NewSpecific_function_callContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 532, MySqlParserRULE_specific_function_call)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5549)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 817, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSimpleSpecificFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5384)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserCURRENT_USER || (((_la-226)&-(0x1f+1)) == 0 && ((1<<uint((_la-226)))&((1<<(MySqlParserCURRENT_DATE-226))|(1<<(MySqlParserCURRENT_TIME-226))|(1<<(MySqlParserCURRENT_TIMESTAMP-226))|(1<<(MySqlParserLOCALTIME-226)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 2:
		localctx = NewConvertDataTypeFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5385)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(5386)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5387)
			p.expression(0)
		}
		{
			p.SetState(5388)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5389)
			p.Data_type_to_convert()
		}
		{
			p.SetState(5390)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		localctx = NewConvertDataTypeFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5392)
			p.Match(MySqlParserCONVERT)
		}
		{
			p.SetState(5393)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5394)
			p.expression(0)
		}
		{
			p.SetState(5395)
			p.Match(MySqlParserUSING)
		}
		{
			p.SetState(5396)
			p.Charset_name()
		}
		{
			p.SetState(5397)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		localctx = NewConvertDataTypeFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5399)
			p.Match(MySqlParserCAST)
		}
		{
			p.SetState(5400)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5401)
			p.expression(0)
		}
		{
			p.SetState(5402)
			p.Match(MySqlParserAS)
		}
		{
			p.SetState(5403)
			p.Data_type_to_convert()
		}
		{
			p.SetState(5404)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		localctx = NewValuesFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5406)
			p.Match(MySqlParserVALUES)
		}
		{
			p.SetState(5407)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5408)
			p.Full_column_name()
		}
		{
			p.SetState(5409)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 6:
		localctx = NewCaseFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5411)
			p.Match(MySqlParserCASE)
		}
		{
			p.SetState(5412)
			p.expression(0)
		}
		p.SetState(5418)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(5413)
				p.Match(MySqlParserWHEN)
			}
			{
				p.SetState(5414)

				var _x = p.Function_arg()

				localctx.(*CaseFCallContext)._function_arg = _x
			}
			localctx.(*CaseFCallContext).condarg = append(localctx.(*CaseFCallContext).condarg, localctx.(*CaseFCallContext)._function_arg)
			{
				p.SetState(5415)
				p.Match(MySqlParserTHEN)
			}
			{
				p.SetState(5416)

				var _x = p.Function_arg()

				localctx.(*CaseFCallContext)._function_arg = _x
			}
			localctx.(*CaseFCallContext).resarg = append(localctx.(*CaseFCallContext).resarg, localctx.(*CaseFCallContext)._function_arg)

			p.SetState(5420)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(5422)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(5423)
				p.Function_arg()
			}

		}
		{
			p.SetState(5426)
			p.Match(MySqlParserEND)
		}

	case 7:
		localctx = NewCaseFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5428)
			p.Match(MySqlParserCASE)
		}
		p.SetState(5434)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MySqlParserWHEN {
			{
				p.SetState(5429)
				p.Match(MySqlParserWHEN)
			}
			{
				p.SetState(5430)

				var _x = p.Function_arg()

				localctx.(*CaseFCallContext)._function_arg = _x
			}
			localctx.(*CaseFCallContext).condarg = append(localctx.(*CaseFCallContext).condarg, localctx.(*CaseFCallContext)._function_arg)
			{
				p.SetState(5431)
				p.Match(MySqlParserTHEN)
			}
			{
				p.SetState(5432)

				var _x = p.Function_arg()

				localctx.(*CaseFCallContext)._function_arg = _x
			}
			localctx.(*CaseFCallContext).resarg = append(localctx.(*CaseFCallContext).resarg, localctx.(*CaseFCallContext)._function_arg)

			p.SetState(5436)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(5440)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserELSE {
			{
				p.SetState(5438)
				p.Match(MySqlParserELSE)
			}
			{
				p.SetState(5439)
				p.Function_arg()
			}

		}
		{
			p.SetState(5442)
			p.Match(MySqlParserEND)
		}

	case 8:
		localctx = NewCharFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5444)
			p.Match(MySqlParserCHAR)
		}
		{
			p.SetState(5445)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5446)
			p.Function_args()
		}
		p.SetState(5449)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserUSING {
			{
				p.SetState(5447)
				p.Match(MySqlParserUSING)
			}
			{
				p.SetState(5448)
				p.Charset_name()
			}

		}
		{
			p.SetState(5451)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewPositionFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5453)
			p.Match(MySqlParserPOSITION)
		}
		{
			p.SetState(5454)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5457)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 803, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5455)

				var _x = p.String_literal()

				localctx.(*PositionFCallContext).fstr = _x
			}

		case 2:
			{
				p.SetState(5456)

				var _x = p.expression(0)

				localctx.(*PositionFCallContext).fexpr = _x
			}

		}
		{
			p.SetState(5459)
			p.Match(MySqlParserIN)
		}
		p.SetState(5462)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 804, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5460)

				var _x = p.String_literal()

				localctx.(*PositionFCallContext).sstr = _x
			}

		case 2:
			{
				p.SetState(5461)

				var _x = p.expression(0)

				localctx.(*PositionFCallContext).sexpr = _x
			}

		}
		{
			p.SetState(5464)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewSubstrFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 10)
		p.SetState(5466)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserSUBSTR || _la == MySqlParserSUBSTRING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5467)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5470)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 805, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5468)
				p.String_literal()
			}

		case 2:
			{
				p.SetState(5469)

				var _x = p.expression(0)

				localctx.(*SubstrFCallContext).fexpr = _x
			}

		}
		{
			p.SetState(5472)
			p.Match(MySqlParserFROM)
		}
		p.SetState(5475)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 806, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5473)

				var _x = p.Decimal_literal()

				localctx.(*SubstrFCallContext).fdecimal = _x
			}

		case 2:
			{
				p.SetState(5474)

				var _x = p.expression(0)

				localctx.(*SubstrFCallContext).sexpr = _x
			}

		}
		p.SetState(5482)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserFOR {
			{
				p.SetState(5477)
				p.Match(MySqlParserFOR)
			}
			p.SetState(5480)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 807, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(5478)

					var _x = p.Decimal_literal()

					localctx.(*SubstrFCallContext).sdecimal = _x
				}

			case 2:
				{
					p.SetState(5479)

					var _x = p.expression(0)

					localctx.(*SubstrFCallContext).texpr = _x
				}

			}

		}
		{
			p.SetState(5484)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 11:
		localctx = NewTrimFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5486)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(5487)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5488)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserBOTH || _la == MySqlParserLEADING || _la == MySqlParserTRAILING) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(5491)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 809, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(5489)

				var _x = p.String_literal()

				localctx.(*TrimFCallContext).fstr = _x
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 809, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(5490)

				var _x = p.expression(0)

				localctx.(*TrimFCallContext).fexpr = _x
			}

		}
		{
			p.SetState(5493)
			p.Match(MySqlParserFROM)
		}
		p.SetState(5496)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 810, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5494)

				var _x = p.String_literal()

				localctx.(*TrimFCallContext).sstr = _x
			}

		case 2:
			{
				p.SetState(5495)

				var _x = p.expression(0)

				localctx.(*TrimFCallContext).sexpr = _x
			}

		}
		{
			p.SetState(5498)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 12:
		localctx = NewTrimFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5500)
			p.Match(MySqlParserTRIM)
		}
		{
			p.SetState(5501)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5504)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 811, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5502)

				var _x = p.String_literal()

				localctx.(*TrimFCallContext).fstr = _x
			}

		case 2:
			{
				p.SetState(5503)

				var _x = p.expression(0)

				localctx.(*TrimFCallContext).fexpr = _x
			}

		}
		{
			p.SetState(5506)
			p.Match(MySqlParserFROM)
		}
		p.SetState(5509)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 812, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5507)

				var _x = p.String_literal()

				localctx.(*TrimFCallContext).sstr = _x
			}

		case 2:
			{
				p.SetState(5508)

				var _x = p.expression(0)

				localctx.(*TrimFCallContext).sexpr = _x
			}

		}
		{
			p.SetState(5511)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 13:
		localctx = NewWeightFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5513)
			p.Match(MySqlParserWEIGHT_STRING)
		}
		{
			p.SetState(5514)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5517)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 813, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5515)
				p.String_literal()
			}

		case 2:
			{
				p.SetState(5516)
				p.expression(0)
			}

		}
		p.SetState(5525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserAS {
			{
				p.SetState(5519)
				p.Match(MySqlParserAS)
			}
			p.SetState(5520)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserCHAR || _la == MySqlParserBINARY) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
			{
				p.SetState(5521)
				p.Match(MySqlParserLR_BRACKET)
			}
			{
				p.SetState(5522)
				p.Decimal_literal()
			}
			{
				p.SetState(5523)
				p.Match(MySqlParserRR_BRACKET)
			}

		}
		p.SetState(5528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserLEVEL {
			{
				p.SetState(5527)
				p.Levels_in_weight_string()
			}

		}
		{
			p.SetState(5530)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 14:
		localctx = NewExtractFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5532)
			p.Match(MySqlParserEXTRACT)
		}
		{
			p.SetState(5533)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5534)
			p.Interval_type()
		}
		{
			p.SetState(5535)
			p.Match(MySqlParserFROM)
		}
		p.SetState(5538)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 816, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5536)

				var _x = p.String_literal()

				localctx.(*ExtractFCallContext).fstr = _x
			}

		case 2:
			{
				p.SetState(5537)

				var _x = p.expression(0)

				localctx.(*ExtractFCallContext).fexpr = _x
			}

		}
		{
			p.SetState(5540)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 15:
		localctx = NewGetFormatFCallContext(p, localctx)
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5542)
			p.Match(MySqlParserGET_FORMAT)
		}
		{
			p.SetState(5543)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5544)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserDATETIME-181)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5545)
			p.Match(MySqlParserCOMMA)
		}
		{
			p.SetState(5546)
			p.String_literal()
		}
		{
			p.SetState(5547)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// ILevels_in_weight_stringContext is an interface to support dynamic dispatch.
type ILevels_in_weight_stringContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLevels_in_weight_stringContext differentiates from other interfaces.
	IsLevels_in_weight_stringContext()
}

type Levels_in_weight_stringContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLevels_in_weight_stringContext() *Levels_in_weight_stringContext {
	var p = new(Levels_in_weight_stringContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_levels_in_weight_string
	return p
}

func (*Levels_in_weight_stringContext) IsLevels_in_weight_stringContext() {}

func NewLevels_in_weight_stringContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Levels_in_weight_stringContext {
	var p = new(Levels_in_weight_stringContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_levels_in_weight_string

	return p
}

func (s *Levels_in_weight_stringContext) GetParser() antlr.Parser { return s.parser }

func (s *Levels_in_weight_stringContext) CopyFrom(ctx *Levels_in_weight_stringContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Levels_in_weight_stringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Levels_in_weight_stringContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LevelWeightFRangeContext struct {
	*Levels_in_weight_stringContext
	firstlevel IDecimal_literalContext
	lastlevel  IDecimal_literalContext
}

func NewLevelWeightFRangeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightFRangeContext {
	var p = new(LevelWeightFRangeContext)

	p.Levels_in_weight_stringContext = NewEmptyLevels_in_weight_stringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Levels_in_weight_stringContext))

	return p
}

func (s *LevelWeightFRangeContext) GetFirstlevel() IDecimal_literalContext { return s.firstlevel }

func (s *LevelWeightFRangeContext) GetLastlevel() IDecimal_literalContext { return s.lastlevel }

func (s *LevelWeightFRangeContext) SetFirstlevel(v IDecimal_literalContext) { s.firstlevel = v }

func (s *LevelWeightFRangeContext) SetLastlevel(v IDecimal_literalContext) { s.lastlevel = v }

func (s *LevelWeightFRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightFRangeContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightFRangeContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *LevelWeightFRangeContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *LevelWeightFRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLevelWeightFRange(s)
	}
}

func (s *LevelWeightFRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLevelWeightFRange(s)
	}
}

func (s *LevelWeightFRangeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLevelWeightFRange(s)

	default:
		return t.VisitChildren(s)
	}
}

type LevelWeightFListContext struct {
	*Levels_in_weight_stringContext
	firstlevel       IDecimal_literalContext
	firstord         antlr.Token
	_decimal_literal IDecimal_literalContext
	nextlevel        []IDecimal_literalContext
	_ASC             antlr.Token
	nextord          []antlr.Token
	_DESC            antlr.Token
	_REVERSE         antlr.Token
	_tset12182       antlr.Token
}

func NewLevelWeightFListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LevelWeightFListContext {
	var p = new(LevelWeightFListContext)

	p.Levels_in_weight_stringContext = NewEmptyLevels_in_weight_stringContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Levels_in_weight_stringContext))

	return p
}

func (s *LevelWeightFListContext) GetFirstord() antlr.Token { return s.firstord }

func (s *LevelWeightFListContext) Get_ASC() antlr.Token { return s._ASC }

func (s *LevelWeightFListContext) Get_DESC() antlr.Token { return s._DESC }

func (s *LevelWeightFListContext) Get_REVERSE() antlr.Token { return s._REVERSE }

func (s *LevelWeightFListContext) Get_tset12182() antlr.Token { return s._tset12182 }

func (s *LevelWeightFListContext) SetFirstord(v antlr.Token) { s.firstord = v }

func (s *LevelWeightFListContext) Set_ASC(v antlr.Token) { s._ASC = v }

func (s *LevelWeightFListContext) Set_DESC(v antlr.Token) { s._DESC = v }

func (s *LevelWeightFListContext) Set_REVERSE(v antlr.Token) { s._REVERSE = v }

func (s *LevelWeightFListContext) Set_tset12182(v antlr.Token) { s._tset12182 = v }

func (s *LevelWeightFListContext) GetNextord() []antlr.Token { return s.nextord }

func (s *LevelWeightFListContext) SetNextord(v []antlr.Token) { s.nextord = v }

func (s *LevelWeightFListContext) GetFirstlevel() IDecimal_literalContext { return s.firstlevel }

func (s *LevelWeightFListContext) Get_decimal_literal() IDecimal_literalContext {
	return s._decimal_literal
}

func (s *LevelWeightFListContext) SetFirstlevel(v IDecimal_literalContext) { s.firstlevel = v }

func (s *LevelWeightFListContext) Set_decimal_literal(v IDecimal_literalContext) {
	s._decimal_literal = v
}

func (s *LevelWeightFListContext) GetNextlevel() []IDecimal_literalContext { return s.nextlevel }

func (s *LevelWeightFListContext) SetNextlevel(v []IDecimal_literalContext) { s.nextlevel = v }

func (s *LevelWeightFListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LevelWeightFListContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *LevelWeightFListContext) AllDecimal_literal() []IDecimal_literalContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem())
	var tst = make([]IDecimal_literalContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDecimal_literalContext)
		}
	}

	return tst
}

func (s *LevelWeightFListContext) Decimal_literal(i int) IDecimal_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDecimal_literalContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDecimal_literalContext)
}

func (s *LevelWeightFListContext) AllASC() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserASC)
}

func (s *LevelWeightFListContext) ASC(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserASC, i)
}

func (s *LevelWeightFListContext) AllDESC() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserDESC)
}

func (s *LevelWeightFListContext) DESC(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserDESC, i)
}

func (s *LevelWeightFListContext) AllREVERSE() []antlr.TerminalNode {
	return s.GetTokens(MySqlParserREVERSE)
}

func (s *LevelWeightFListContext) REVERSE(i int) antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, i)
}

func (s *LevelWeightFListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLevelWeightFList(s)
	}
}

func (s *LevelWeightFListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLevelWeightFList(s)
	}
}

func (s *LevelWeightFListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLevelWeightFList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Levels_in_weight_string() (localctx ILevels_in_weight_stringContext) {
	localctx = NewLevels_in_weight_stringContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 534, MySqlParserRULE_levels_in_weight_string)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5571)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 821, p.GetParserRuleContext()) {
	case 1:
		localctx = NewLevelWeightFListContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5551)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(5552)

			var _x = p.Decimal_literal()

			localctx.(*LevelWeightFListContext).firstlevel = _x
		}
		p.SetState(5554)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE {
			p.SetState(5553)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*LevelWeightFListContext).firstord = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*LevelWeightFListContext).firstord = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(5563)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MySqlParserCOMMA {
			{
				p.SetState(5556)
				p.Match(MySqlParserCOMMA)
			}
			{
				p.SetState(5557)

				var _x = p.Decimal_literal()

				localctx.(*LevelWeightFListContext)._decimal_literal = _x
			}
			localctx.(*LevelWeightFListContext).nextlevel = append(localctx.(*LevelWeightFListContext).nextlevel, localctx.(*LevelWeightFListContext)._decimal_literal)
			p.SetState(5559)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE {
				p.SetState(5558)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*LevelWeightFListContext)._tset12182 = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserASC || _la == MySqlParserDESC || _la == MySqlParserREVERSE) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*LevelWeightFListContext)._tset12182 = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				localctx.(*LevelWeightFListContext).nextord = append(localctx.(*LevelWeightFListContext).nextord, localctx.(*LevelWeightFListContext)._tset12182)

			}

			p.SetState(5565)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		localctx = NewLevelWeightFRangeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5566)
			p.Match(MySqlParserLEVEL)
		}
		{
			p.SetState(5567)

			var _x = p.Decimal_literal()

			localctx.(*LevelWeightFRangeContext).firstlevel = _x
		}
		{
			p.SetState(5568)
			p.Match(MySqlParserMINUS)
		}
		{
			p.SetState(5569)

			var _x = p.Decimal_literal()

			localctx.(*LevelWeightFRangeContext).lastlevel = _x
		}

	}

	return localctx
}

// IAggregate_windowed_functionContext is an interface to support dynamic dispatch.
type IAggregate_windowed_functionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAggregate_windowed_functionContext differentiates from other interfaces.
	IsAggregate_windowed_functionContext()
}

type Aggregate_windowed_functionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAggregate_windowed_functionContext() *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_aggregate_windowed_function
	return p
}

func (*Aggregate_windowed_functionContext) IsAggregate_windowed_functionContext() {}

func NewAggregate_windowed_functionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Aggregate_windowed_functionContext {
	var p = new(Aggregate_windowed_functionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_aggregate_windowed_function

	return p
}

func (s *Aggregate_windowed_functionContext) GetParser() antlr.Parser { return s.parser }

func (s *Aggregate_windowed_functionContext) Function_arg() IFunction_argContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argContext)
}

func (s *Aggregate_windowed_functionContext) AVG() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG, 0)
}

func (s *Aggregate_windowed_functionContext) MAX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX, 0)
}

func (s *Aggregate_windowed_functionContext) MIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN, 0)
}

func (s *Aggregate_windowed_functionContext) SUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUM, 0)
}

func (s *Aggregate_windowed_functionContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *Aggregate_windowed_functionContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISTINCT, 0)
}

func (s *Aggregate_windowed_functionContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *Aggregate_windowed_functionContext) Function_args() IFunction_argsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_argsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_argsContext)
}

func (s *Aggregate_windowed_functionContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_AND, 0)
}

func (s *Aggregate_windowed_functionContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_OR, 0)
}

func (s *Aggregate_windowed_functionContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_XOR, 0)
}

func (s *Aggregate_windowed_functionContext) STD() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTD, 0)
}

func (s *Aggregate_windowed_functionContext) STDDEV() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV, 0)
}

func (s *Aggregate_windowed_functionContext) STDDEV_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_POP, 0)
}

func (s *Aggregate_windowed_functionContext) STDDEV_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTDDEV_SAMP, 0)
}

func (s *Aggregate_windowed_functionContext) VAR_POP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_POP, 0)
}

func (s *Aggregate_windowed_functionContext) VAR_SAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_SAMP, 0)
}

func (s *Aggregate_windowed_functionContext) VARIANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIANCE, 0)
}

func (s *Aggregate_windowed_functionContext) GROUP_CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGROUP_CONCAT, 0)
}

func (s *Aggregate_windowed_functionContext) ORDER() antlr.TerminalNode {
	return s.GetToken(MySqlParserORDER, 0)
}

func (s *Aggregate_windowed_functionContext) BY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBY, 0)
}

func (s *Aggregate_windowed_functionContext) AllOrder_by_expression() []IOrder_by_expressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem())
	var tst = make([]IOrder_by_expressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOrder_by_expressionContext)
		}
	}

	return tst
}

func (s *Aggregate_windowed_functionContext) Order_by_expression(i int) IOrder_by_expressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOrder_by_expressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOrder_by_expressionContext)
}

func (s *Aggregate_windowed_functionContext) SEPARATOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEPARATOR, 0)
}

func (s *Aggregate_windowed_functionContext) STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRING_LITERAL, 0)
}

func (s *Aggregate_windowed_functionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Aggregate_windowed_functionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Aggregate_windowed_functionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitAggregate_windowed_function(s)
	}
}

func (s *Aggregate_windowed_functionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitAggregate_windowed_function(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Aggregate_windowed_function() (localctx IAggregate_windowed_functionContext) {
	localctx = NewAggregate_windowed_functionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 536, MySqlParserRULE_aggregate_windowed_function)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5629)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 830, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(5573)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-210)&-(0x1f+1)) == 0 && ((1<<uint((_la-210)))&((1<<(MySqlParserAVG-210))|(1<<(MySqlParserMAX-210))|(1<<(MySqlParserMIN-210))|(1<<(MySqlParserSUM-210)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5574)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5576)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALL || _la == MySqlParserDISTINCT {
			p.SetState(5575)
			_la = p.GetTokenStream().LA(1)

			if !(_la == MySqlParserALL || _la == MySqlParserDISTINCT) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		{
			p.SetState(5578)
			p.Function_arg()
		}
		{
			p.SetState(5579)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5581)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(5582)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5588)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case MySqlParserSTAR:
			{
				p.SetState(5583)
				p.Match(MySqlParserSTAR)
			}

		case MySqlParserALL, MySqlParserCASE, MySqlParserCAST, MySqlParserCONVERT, MySqlParserCURRENT_USER, MySqlParserDEFAULT, MySqlParserEXISTS, MySqlParserFALSE, MySqlParserIF, MySqlParserINTERVAL, MySqlParserLEFT, MySqlParserNOTNULL, MySqlParserNOT, MySqlParserNULL_LITERAL, MySqlParserREPLACE, MySqlParserRIGHT, MySqlParserTRUE, MySqlParserVALUES, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserDATETIME, MySqlParserYEAR, MySqlParserCHAR, MySqlParserBINARY, MySqlParserTEXT, MySqlParserENUM, MySqlParserAVG, MySqlParserBIT_AND, MySqlParserBIT_OR, MySqlParserBIT_XOR, MySqlParserCOUNT, MySqlParserGROUP_CONCAT, MySqlParserMAX, MySqlParserMIN, MySqlParserSTD, MySqlParserSTDDEV, MySqlParserSTDDEV_POP, MySqlParserSTDDEV_SAMP, MySqlParserSUM, MySqlParserVAR_POP, MySqlParserVAR_SAMP, MySqlParserVARIANCE, MySqlParserCURRENT_DATE, MySqlParserCURRENT_TIME, MySqlParserCURRENT_TIMESTAMP, MySqlParserLOCALTIME, MySqlParserCURDATE, MySqlParserCURTIME, MySqlParserDATE_ADD, MySqlParserDATE_SUB, MySqlParserEXTRACT, MySqlParserLOCALTIMESTAMP, MySqlParserNOW, MySqlParserPOSITION, MySqlParserSUBSTR, MySqlParserSUBSTRING, MySqlParserSYSDATE, MySqlParserTRIM, MySqlParserUTC_DATE, MySqlParserUTC_TIME, MySqlParserUTC_TIMESTAMP, MySqlParserACTION, MySqlParserAFTER, MySqlParserALGORITHM, MySqlParserANY, MySqlParserAT, MySqlParserAUTHORS, MySqlParserAUTOCOMMIT, MySqlParserAUTOEXTEND_SIZE, MySqlParserAUTO_INCREMENT, MySqlParserAVG_ROW_LENGTH, MySqlParserBEGIN, MySqlParserBINLOG, MySqlParserBIT, MySqlParserBTREE, MySqlParserCASCADED, MySqlParserCHAIN, MySqlParserCHECKSUM, MySqlParserCIPHER, MySqlParserCLIENT, MySqlParserCOALESCE, MySqlParserCODE, MySqlParserCOLUMNS, MySqlParserCOLUMN_FORMAT, MySqlParserCOMMENT, MySqlParserCOMMIT, MySqlParserCOMPACT, MySqlParserCOMPLETION, MySqlParserCOMPRESSED, MySqlParserCONCURRENT, MySqlParserCONNECTION, MySqlParserCONSISTENT, MySqlParserCONTAINS, MySqlParserCONTRIBUTORS, MySqlParserCOPY, MySqlParserDATA, MySqlParserDATAFILE, MySqlParserDEFINER, MySqlParserDELAY_KEY_WRITE, MySqlParserDIRECTORY, MySqlParserDISABLE, MySqlParserDISCARD, MySqlParserDISK, MySqlParserDO, MySqlParserDUMPFILE, MySqlParserDUPLICATE, MySqlParserDYNAMIC, MySqlParserENABLE, MySqlParserENDS, MySqlParserENGINE, MySqlParserENGINES, MySqlParserERRORS, MySqlParserESCAPE, MySqlParserEVEN, MySqlParserEVENT, MySqlParserEVENTS, MySqlParserEVERY, MySqlParserEXCHANGE, MySqlParserEXCLUSIVE, MySqlParserEXPIRE, MySqlParserEXTENT_SIZE, MySqlParserFIELDS, MySqlParserFIRST, MySqlParserFIXED, MySqlParserFULL, MySqlParserFUNCTION, MySqlParserGLOBAL, MySqlParserGRANTS, MySqlParserHASH, MySqlParserHOST, MySqlParserIDENTIFIED, MySqlParserIMPORT, MySqlParserINITIAL_SIZE, MySqlParserINPLACE, MySqlParserINSERT_METHOD, MySqlParserINVOKER, MySqlParserISOLATION, MySqlParserISSUER, MySqlParserKEY_BLOCK_SIZE, MySqlParserLANGUAGE, MySqlParserLAST, MySqlParserLESS, MySqlParserLEVEL, MySqlParserLIST, MySqlParserLOCAL, MySqlParserLOGFILE, MySqlParserLOGS, MySqlParserMASTER, MySqlParserMAX_CONNECTIONS_PER_HOUR, MySqlParserMAX_QUERIES_PER_HOUR, MySqlParserMAX_ROWS, MySqlParserMAX_SIZE, MySqlParserMAX_UPDATES_PER_HOUR, MySqlParserMAX_USER_CONNECTIONS, MySqlParserMERGE, MySqlParserMID, MySqlParserMIN_ROWS, MySqlParserMODIFY, MySqlParserMUTEX, MySqlParserMYSQL, MySqlParserNAME, MySqlParserNAMES, MySqlParserNCHAR, MySqlParserNO, MySqlParserNODEGROUP, MySqlParserNONE, MySqlParserOFFLINE, MySqlParserOFFSET, MySqlParserOJ, MySqlParserOLD_PASSWORD, MySqlParserONLINE, MySqlParserONLY, MySqlParserOPTIONS, MySqlParserOWNER, MySqlParserPACK_KEYS, MySqlParserPARSER, MySqlParserPARTIAL, MySqlParserPARTITIONING, MySqlParserPARTITIONS, MySqlParserPASSWORD, MySqlParserPLUGINS, MySqlParserPORT, MySqlParserPRESERVE, MySqlParserPROCESSLIST, MySqlParserPROFILE, MySqlParserPROFILES, MySqlParserPROXY, MySqlParserQUERY, MySqlParserQUICK, MySqlParserREBUILD, MySqlParserREDO_BUFFER_SIZE, MySqlParserREDUNDANT, MySqlParserRELAYLOG, MySqlParserREMOVE, MySqlParserREORGANIZE, MySqlParserREPAIR, MySqlParserREPLICATION, MySqlParserRETURNS, MySqlParserROLLBACK, MySqlParserROLLUP, MySqlParserROW, MySqlParserROWS, MySqlParserROW_FORMAT, MySqlParserSAVEPOINT, MySqlParserSCHEDULE, MySqlParserSECURITY, MySqlParserSERVER, MySqlParserSESSION, MySqlParserSHARE, MySqlParserSHARED, MySqlParserSIGNED, MySqlParserSIMPLE, MySqlParserSLAVE, MySqlParserSNAPSHOT, MySqlParserSOCKET, MySqlParserSOME, MySqlParserSOUNDS, MySqlParserSQL_BUFFER_RESULT, MySqlParserSQL_CACHE, MySqlParserSQL_NO_CACHE, MySqlParserSTART, MySqlParserSTARTS, MySqlParserSTATS_AUTO_RECALC, MySqlParserSTATS_PERSISTENT, MySqlParserSTATS_SAMPLE_PAGES, MySqlParserSTATUS, MySqlParserSTORAGE, MySqlParserSUBJECT, MySqlParserSUBPARTITION, MySqlParserSUBPARTITIONS, MySqlParserTABLESPACE, MySqlParserTEMPORARY, MySqlParserTEMPTABLE, MySqlParserTHAN, MySqlParserTRANSACTION, MySqlParserTRUNCATE, MySqlParserUNDEFINED, MySqlParserUNDOFILE, MySqlParserUNDO_BUFFER_SIZE, MySqlParserUNKNOWN, MySqlParserUPGRADE, MySqlParserUSER, MySqlParserVALUE, MySqlParserVARIABLES, MySqlParserVIEW, MySqlParserWAIT, MySqlParserWARNINGS, MySqlParserWORK, MySqlParserWRAPPER, MySqlParserX509, MySqlParserXML, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserTABLES, MySqlParserROUTINE, MySqlParserEXECUTE, MySqlParserFILE, MySqlParserPROCESS, MySqlParserRELOAD, MySqlParserSHUTDOWN, MySqlParserSUPER, MySqlParserPRIVILEGES, MySqlParserARMSCII8, MySqlParserASCII, MySqlParserBIG5, MySqlParserCP1250, MySqlParserCP1251, MySqlParserCP1256, MySqlParserCP1257, MySqlParserCP850, MySqlParserCP852, MySqlParserCP866, MySqlParserCP932, MySqlParserDEC8, MySqlParserEUCJPMS, MySqlParserEUCKR, MySqlParserGB2312, MySqlParserGBK, MySqlParserGEOSTD8, MySqlParserGREEK, MySqlParserHEBREW, MySqlParserHP8, MySqlParserKEYBCS2, MySqlParserKOI8R, MySqlParserKOI8U, MySqlParserLATIN1, MySqlParserLATIN2, MySqlParserLATIN5, MySqlParserLATIN7, MySqlParserMACCE, MySqlParserMACROMAN, MySqlParserSJIS, MySqlParserSWE7, MySqlParserTIS620, MySqlParserUCS2, MySqlParserUJIS, MySqlParserUTF16, MySqlParserUTF16LE, MySqlParserUTF32, MySqlParserUTF8, MySqlParserUTF8MB3, MySqlParserUTF8MB4, MySqlParserARCHIVE, MySqlParserBLACKHOLE, MySqlParserCSV, MySqlParserFEDERATED, MySqlParserINNODB, MySqlParserMEMORY, MySqlParserMRG_MYISAM, MySqlParserMYISAM, MySqlParserNDB, MySqlParserNDBCLUSTER, MySqlParserPERFOMANCE_SCHEMA, MySqlParserREPEATABLE, MySqlParserCOMMITTED, MySqlParserUNCOMMITTED, MySqlParserSERIALIZABLE, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION, MySqlParserPLUS, MySqlParserMINUS, MySqlParserEXCLAMATION_SYMBOL, MySqlParserBIT_NOT_OP, MySqlParserLR_BRACKET, MySqlParserZERO_DECIMAL, MySqlParserONE_DECIMAL, MySqlParserTWO_DECIMAL, MySqlParserCHARSET_REVERSE_QOUTE_STRING, MySqlParserSTART_NATIONAL_STRING_LITERAL, MySqlParserSTRING_LITERAL, MySqlParserDECIMAL_LITERAL, MySqlParserHEXADECIMAL_LITERAL, MySqlParserREAL_LITERAL, MySqlParserNULL_SPEC_LITERAL, MySqlParserBIT_STRING, MySqlParserSTRING_CHARSET_NAME, MySqlParserID, MySqlParserREVERSE_QUOTE_ID, MySqlParserLOCAL_ID, MySqlParserGLOBAL_ID:
			p.SetState(5585)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MySqlParserALL {
				{
					p.SetState(5584)
					p.Match(MySqlParserALL)
				}

			}
			{
				p.SetState(5587)
				p.Function_arg()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(5590)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5591)
			p.Match(MySqlParserCOUNT)
		}
		{
			p.SetState(5592)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5593)
			p.Match(MySqlParserDISTINCT)
		}
		{
			p.SetState(5594)
			p.Function_args()
		}
		{
			p.SetState(5595)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(5597)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-211)&-(0x1f+1)) == 0 && ((1<<uint((_la-211)))&((1<<(MySqlParserBIT_AND-211))|(1<<(MySqlParserBIT_OR-211))|(1<<(MySqlParserBIT_XOR-211))|(1<<(MySqlParserSTD-211))|(1<<(MySqlParserSTDDEV-211))|(1<<(MySqlParserSTDDEV_POP-211))|(1<<(MySqlParserSTDDEV_SAMP-211))|(1<<(MySqlParserVAR_POP-211))|(1<<(MySqlParserVAR_SAMP-211))|(1<<(MySqlParserVARIANCE-211)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5598)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5600)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserALL {
			{
				p.SetState(5599)
				p.Match(MySqlParserALL)
			}

		}
		{
			p.SetState(5602)
			p.Function_arg()
		}
		{
			p.SetState(5603)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5605)
			p.Match(MySqlParserGROUP_CONCAT)
		}
		{
			p.SetState(5606)
			p.Match(MySqlParserLR_BRACKET)
		}
		p.SetState(5608)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserDISTINCT {
			{
				p.SetState(5607)
				p.Match(MySqlParserDISTINCT)
			}

		}
		{
			p.SetState(5610)
			p.Function_args()
		}
		p.SetState(5621)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserORDER {
			{
				p.SetState(5611)
				p.Match(MySqlParserORDER)
			}
			{
				p.SetState(5612)
				p.Match(MySqlParserBY)
			}
			{
				p.SetState(5613)
				p.Order_by_expression()
			}
			p.SetState(5618)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MySqlParserCOMMA {
				{
					p.SetState(5614)
					p.Match(MySqlParserCOMMA)
				}
				{
					p.SetState(5615)
					p.Order_by_expression()
				}

				p.SetState(5620)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(5625)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserSEPARATOR {
			{
				p.SetState(5623)
				p.Match(MySqlParserSEPARATOR)
			}
			{
				p.SetState(5624)
				p.Match(MySqlParserSTRING_LITERAL)
			}

		}
		{
			p.SetState(5627)
			p.Match(MySqlParserRR_BRACKET)
		}

	}

	return localctx
}

// IScalar_function_nameContext is an interface to support dynamic dispatch.
type IScalar_function_nameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalar_function_nameContext differentiates from other interfaces.
	IsScalar_function_nameContext()
}

type Scalar_function_nameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalar_function_nameContext() *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_scalar_function_name
	return p
}

func (*Scalar_function_nameContext) IsScalar_function_nameContext() {}

func NewScalar_function_nameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Scalar_function_nameContext {
	var p = new(Scalar_function_nameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_scalar_function_name

	return p
}

func (s *Scalar_function_nameContext) GetParser() antlr.Parser { return s.parser }

func (s *Scalar_function_nameContext) Function_name_base() IFunction_name_baseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_name_baseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_name_baseContext)
}

func (s *Scalar_function_nameContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *Scalar_function_nameContext) CURDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURDATE, 0)
}

func (s *Scalar_function_nameContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_DATE, 0)
}

func (s *Scalar_function_nameContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIME, 0)
}

func (s *Scalar_function_nameContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURRENT_TIMESTAMP, 0)
}

func (s *Scalar_function_nameContext) CURTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserCURTIME, 0)
}

func (s *Scalar_function_nameContext) DATE_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_ADD, 0)
}

func (s *Scalar_function_nameContext) DATE_SUB() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_SUB, 0)
}

func (s *Scalar_function_nameContext) IF() antlr.TerminalNode {
	return s.GetToken(MySqlParserIF, 0)
}

func (s *Scalar_function_nameContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIME, 0)
}

func (s *Scalar_function_nameContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCALTIMESTAMP, 0)
}

func (s *Scalar_function_nameContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *Scalar_function_nameContext) NOW() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOW, 0)
}

func (s *Scalar_function_nameContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLACE, 0)
}

func (s *Scalar_function_nameContext) SUBSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTR, 0)
}

func (s *Scalar_function_nameContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING, 0)
}

func (s *Scalar_function_nameContext) SYSDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSDATE, 0)
}

func (s *Scalar_function_nameContext) TRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRIM, 0)
}

func (s *Scalar_function_nameContext) UTC_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_DATE, 0)
}

func (s *Scalar_function_nameContext) UTC_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIME, 0)
}

func (s *Scalar_function_nameContext) UTC_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTC_TIMESTAMP, 0)
}

func (s *Scalar_function_nameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Scalar_function_nameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Scalar_function_nameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitScalar_function_name(s)
	}
}

func (s *Scalar_function_nameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitScalar_function_name(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Scalar_function_name() (localctx IScalar_function_nameContext) {
	localctx = NewScalar_function_nameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 538, MySqlParserRULE_scalar_function_name)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5653)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLEFT, MySqlParserRIGHT, MySqlParserDATE, MySqlParserTIME, MySqlParserTIMESTAMP, MySqlParserYEAR, MySqlParserCOUNT, MySqlParserPOSITION, MySqlParserQUARTER, MySqlParserMONTH, MySqlParserDAY, MySqlParserHOUR, MySqlParserMINUTE, MySqlParserWEEK, MySqlParserSECOND, MySqlParserMICROSECOND, MySqlParserGEOMETRYCOLLECTION, MySqlParserLINESTRING, MySqlParserMULTILINESTRING, MySqlParserMULTIPOINT, MySqlParserMULTIPOLYGON, MySqlParserPOINT, MySqlParserPOLYGON, MySqlParserABS, MySqlParserACOS, MySqlParserADDDATE, MySqlParserADDTIME, MySqlParserAES_DECRYPT, MySqlParserAES_ENCRYPT, MySqlParserAREA, MySqlParserASBINARY, MySqlParserASIN, MySqlParserASTEXT, MySqlParserASWKB, MySqlParserASWKT, MySqlParserASYMMETRIC_DECRYPT, MySqlParserASYMMETRIC_DERIVE, MySqlParserASYMMETRIC_ENCRYPT, MySqlParserASYMMETRIC_SIGN, MySqlParserASYMMETRIC_VERIFY, MySqlParserATAN, MySqlParserATAN2, MySqlParserBENCHMARK, MySqlParserBIN, MySqlParserBIT_COUNT, MySqlParserBIT_LENGTH, MySqlParserBUFFER, MySqlParserCEIL, MySqlParserCEILING, MySqlParserCENTROID, MySqlParserCHARACTER_LENGTH, MySqlParserCHARSET, MySqlParserCHAR_LENGTH, MySqlParserCOERCIBILITY, MySqlParserCOLLATION, MySqlParserCOMPRESS, MySqlParserCONCAT, MySqlParserCONCAT_WS, MySqlParserCONNECTION_ID, MySqlParserCONV, MySqlParserCONVERT_TZ, MySqlParserCOS, MySqlParserCOT, MySqlParserCRC32, MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, MySqlParserCREATE_ASYMMETRIC_PUB_KEY, MySqlParserCREATE_DH_PARAMETERS, MySqlParserCREATE_DIGEST, MySqlParserCROSSES, MySqlParserDATEDIFF, MySqlParserDATE_FORMAT, MySqlParserDAYNAME, MySqlParserDAYOFMONTH, MySqlParserDAYOFWEEK, MySqlParserDAYOFYEAR, MySqlParserDECODE, MySqlParserDEGREES, MySqlParserDES_DECRYPT, MySqlParserDES_ENCRYPT, MySqlParserDIMENSION, MySqlParserDISJOINT, MySqlParserELT, MySqlParserENCODE, MySqlParserENCRYPT, MySqlParserENDPOINT, MySqlParserENVELOPE, MySqlParserEQUALS, MySqlParserEXP, MySqlParserEXPORT_SET, MySqlParserEXTERIORRING, MySqlParserEXTRACTVALUE, MySqlParserFIELD, MySqlParserFIND_IN_SET, MySqlParserFLOOR, MySqlParserFORMAT, MySqlParserFOUND_ROWS, MySqlParserFROM_BASE64, MySqlParserFROM_DAYS, MySqlParserFROM_UNIXTIME, MySqlParserGEOMCOLLFROMTEXT, MySqlParserGEOMCOLLFROMWKB, MySqlParserGEOMETRYCOLLECTIONFROMTEXT, MySqlParserGEOMETRYCOLLECTIONFROMWKB, MySqlParserGEOMETRYFROMTEXT, MySqlParserGEOMETRYFROMWKB, MySqlParserGEOMETRYN, MySqlParserGEOMETRYTYPE, MySqlParserGEOMFROMTEXT, MySqlParserGEOMFROMWKB, MySqlParserGET_FORMAT, MySqlParserGET_LOCK, MySqlParserGLENGTH, MySqlParserGREATEST, MySqlParserGTID_SUBSET, MySqlParserGTID_SUBTRACT, MySqlParserHEX, MySqlParserIFNULL, MySqlParserINET6_ATON, MySqlParserINET6_NTOA, MySqlParserINET_ATON, MySqlParserINET_NTOA, MySqlParserINSTR, MySqlParserINTERIORRINGN, MySqlParserINTERSECTS, MySqlParserISCLOSED, MySqlParserISEMPTY, MySqlParserISNULL, MySqlParserISSIMPLE, MySqlParserIS_FREE_LOCK, MySqlParserIS_IPV4, MySqlParserIS_IPV4_COMPAT, MySqlParserIS_IPV4_MAPPED, MySqlParserIS_IPV6, MySqlParserIS_USED_LOCK, MySqlParserLAST_INSERT_ID, MySqlParserLCASE, MySqlParserLEAST, MySqlParserLENGTH, MySqlParserLINEFROMTEXT, MySqlParserLINEFROMWKB, MySqlParserLINESTRINGFROMTEXT, MySqlParserLINESTRINGFROMWKB, MySqlParserLN, MySqlParserLOAD_FILE, MySqlParserLOCATE, MySqlParserLOG, MySqlParserLOG10, MySqlParserLOG2, MySqlParserLOWER, MySqlParserLPAD, MySqlParserLTRIM, MySqlParserMAKEDATE, MySqlParserMAKETIME, MySqlParserMAKE_SET, MySqlParserMASTER_POS_WAIT, MySqlParserMBRCONTAINS, MySqlParserMBRDISJOINT, MySqlParserMBREQUAL, MySqlParserMBRINTERSECTS, MySqlParserMBROVERLAPS, MySqlParserMBRTOUCHES, MySqlParserMBRWITHIN, MySqlParserMD5, MySqlParserMLINEFROMTEXT, MySqlParserMLINEFROMWKB, MySqlParserMONTHNAME, MySqlParserMPOINTFROMTEXT, MySqlParserMPOINTFROMWKB, MySqlParserMPOLYFROMTEXT, MySqlParserMPOLYFROMWKB, MySqlParserMULTILINESTRINGFROMTEXT, MySqlParserMULTILINESTRINGFROMWKB, MySqlParserMULTIPOINTFROMTEXT, MySqlParserMULTIPOINTFROMWKB, MySqlParserMULTIPOLYGONFROMTEXT, MySqlParserMULTIPOLYGONFROMWKB, MySqlParserNAME_CONST, MySqlParserNULLIF, MySqlParserNUMGEOMETRIES, MySqlParserNUMINTERIORRINGS, MySqlParserNUMPOINTS, MySqlParserOCT, MySqlParserOCTET_LENGTH, MySqlParserORD, MySqlParserOVERLAPS, MySqlParserPERIOD_ADD, MySqlParserPERIOD_DIFF, MySqlParserPI, MySqlParserPOINTFROMTEXT, MySqlParserPOINTFROMWKB, MySqlParserPOINTN, MySqlParserPOLYFROMTEXT, MySqlParserPOLYFROMWKB, MySqlParserPOLYGONFROMTEXT, MySqlParserPOLYGONFROMWKB, MySqlParserPOW, MySqlParserPOWER, MySqlParserQUOTE, MySqlParserRADIANS, MySqlParserRAND, MySqlParserRANDOM_BYTES, MySqlParserRELEASE_LOCK, MySqlParserREVERSE, MySqlParserROUND, MySqlParserROW_COUNT, MySqlParserRPAD, MySqlParserRTRIM, MySqlParserSEC_TO_TIME, MySqlParserSESSION_USER, MySqlParserSHA, MySqlParserSHA1, MySqlParserSHA2, MySqlParserSIGN, MySqlParserSIN, MySqlParserSLEEP, MySqlParserSOUNDEX, MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, MySqlParserSQRT, MySqlParserSRID, MySqlParserSTARTPOINT, MySqlParserSTRCMP, MySqlParserSTR_TO_DATE, MySqlParserST_AREA, MySqlParserST_ASBINARY, MySqlParserST_ASTEXT, MySqlParserST_ASWKB, MySqlParserST_ASWKT, MySqlParserST_BUFFER, MySqlParserST_CENTROID, MySqlParserST_CONTAINS, MySqlParserST_CROSSES, MySqlParserST_DIFFERENCE, MySqlParserST_DIMENSION, MySqlParserST_DISJOINT, MySqlParserST_DISTANCE, MySqlParserST_ENDPOINT, MySqlParserST_ENVELOPE, MySqlParserST_EQUALS, MySqlParserST_EXTERIORRING, MySqlParserST_GEOMCOLLFROMTEXT, MySqlParserST_GEOMCOLLFROMTXT, MySqlParserST_GEOMCOLLFROMWKB, MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, MySqlParserST_GEOMETRYFROMTEXT, MySqlParserST_GEOMETRYFROMWKB, MySqlParserST_GEOMETRYN, MySqlParserST_GEOMETRYTYPE, MySqlParserST_GEOMFROMTEXT, MySqlParserST_GEOMFROMWKB, MySqlParserST_INTERIORRINGN, MySqlParserST_INTERSECTION, MySqlParserST_INTERSECTS, MySqlParserST_ISCLOSED, MySqlParserST_ISEMPTY, MySqlParserST_ISSIMPLE, MySqlParserST_LINEFROMTEXT, MySqlParserST_LINEFROMWKB, MySqlParserST_LINESTRINGFROMTEXT, MySqlParserST_LINESTRINGFROMWKB, MySqlParserST_NUMGEOMETRIES, MySqlParserST_NUMINTERIORRING, MySqlParserST_NUMINTERIORRINGS, MySqlParserST_NUMPOINTS, MySqlParserST_OVERLAPS, MySqlParserST_POINTFROMTEXT, MySqlParserST_POINTFROMWKB, MySqlParserST_POINTN, MySqlParserST_POLYFROMTEXT, MySqlParserST_POLYFROMWKB, MySqlParserST_POLYGONFROMTEXT, MySqlParserST_POLYGONFROMWKB, MySqlParserST_SRID, MySqlParserST_STARTPOINT, MySqlParserST_SYMDIFFERENCE, MySqlParserST_TOUCHES, MySqlParserST_UNION, MySqlParserST_WITHIN, MySqlParserST_X, MySqlParserST_Y, MySqlParserSUBDATE, MySqlParserSUBSTRING_INDEX, MySqlParserSUBTIME, MySqlParserSYSTEM_USER, MySqlParserTAN, MySqlParserTIMEDIFF, MySqlParserTIMESTAMPADD, MySqlParserTIMESTAMPDIFF, MySqlParserTIME_FORMAT, MySqlParserTIME_TO_SEC, MySqlParserTOUCHES, MySqlParserTO_BASE64, MySqlParserTO_DAYS, MySqlParserTO_SECONDS, MySqlParserUCASE, MySqlParserUNCOMPRESS, MySqlParserUNCOMPRESSED_LENGTH, MySqlParserUNHEX, MySqlParserUNIX_TIMESTAMP, MySqlParserUPDATEXML, MySqlParserUPPER, MySqlParserUUID, MySqlParserUUID_SHORT, MySqlParserVALIDATE_PASSWORD_STRENGTH, MySqlParserVERSION, MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParserWEEKDAY, MySqlParserWEEKOFYEAR, MySqlParserWEIGHT_STRING, MySqlParserWITHIN, MySqlParserYEARWEEK, MySqlParserY_FUNCTION, MySqlParserX_FUNCTION:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5631)
			p.Function_name_base()
		}

	case MySqlParserASCII:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5632)
			p.Match(MySqlParserASCII)
		}

	case MySqlParserCURDATE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5633)
			p.Match(MySqlParserCURDATE)
		}

	case MySqlParserCURRENT_DATE:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5634)
			p.Match(MySqlParserCURRENT_DATE)
		}

	case MySqlParserCURRENT_TIME:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5635)
			p.Match(MySqlParserCURRENT_TIME)
		}

	case MySqlParserCURRENT_TIMESTAMP:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5636)
			p.Match(MySqlParserCURRENT_TIMESTAMP)
		}

	case MySqlParserCURTIME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5637)
			p.Match(MySqlParserCURTIME)
		}

	case MySqlParserDATE_ADD:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5638)
			p.Match(MySqlParserDATE_ADD)
		}

	case MySqlParserDATE_SUB:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(5639)
			p.Match(MySqlParserDATE_SUB)
		}

	case MySqlParserIF:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(5640)
			p.Match(MySqlParserIF)
		}

	case MySqlParserLOCALTIME:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(5641)
			p.Match(MySqlParserLOCALTIME)
		}

	case MySqlParserLOCALTIMESTAMP:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(5642)
			p.Match(MySqlParserLOCALTIMESTAMP)
		}

	case MySqlParserMID:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(5643)
			p.Match(MySqlParserMID)
		}

	case MySqlParserNOW:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(5644)
			p.Match(MySqlParserNOW)
		}

	case MySqlParserREPLACE:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(5645)
			p.Match(MySqlParserREPLACE)
		}

	case MySqlParserSUBSTR:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(5646)
			p.Match(MySqlParserSUBSTR)
		}

	case MySqlParserSUBSTRING:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(5647)
			p.Match(MySqlParserSUBSTRING)
		}

	case MySqlParserSYSDATE:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(5648)
			p.Match(MySqlParserSYSDATE)
		}

	case MySqlParserTRIM:
		p.EnterOuterAlt(localctx, 19)
		{
			p.SetState(5649)
			p.Match(MySqlParserTRIM)
		}

	case MySqlParserUTC_DATE:
		p.EnterOuterAlt(localctx, 20)
		{
			p.SetState(5650)
			p.Match(MySqlParserUTC_DATE)
		}

	case MySqlParserUTC_TIME:
		p.EnterOuterAlt(localctx, 21)
		{
			p.SetState(5651)
			p.Match(MySqlParserUTC_TIME)
		}

	case MySqlParserUTC_TIMESTAMP:
		p.EnterOuterAlt(localctx, 22)
		{
			p.SetState(5652)
			p.Match(MySqlParserUTC_TIMESTAMP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunction_argsContext is an interface to support dynamic dispatch.
type IFunction_argsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argsContext differentiates from other interfaces.
	IsFunction_argsContext()
}

type Function_argsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argsContext() *Function_argsContext {
	var p = new(Function_argsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_function_args
	return p
}

func (*Function_argsContext) IsFunction_argsContext() {}

func NewFunction_argsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argsContext {
	var p = new(Function_argsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_function_args

	return p
}

func (s *Function_argsContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argsContext) AllConstant() []IConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantContext)(nil)).Elem())
	var tst = make([]IConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantContext)
		}
	}

	return tst
}

func (s *Function_argsContext) Constant(i int) IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Function_argsContext) AllFull_column_name() []IFull_column_nameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem())
	var tst = make([]IFull_column_nameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFull_column_nameContext)
		}
	}

	return tst
}

func (s *Function_argsContext) Full_column_name(i int) IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Function_argsContext) AllFunction_call() []IFunction_callContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunction_callContext)(nil)).Elem())
	var tst = make([]IFunction_callContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunction_callContext)
		}
	}

	return tst
}

func (s *Function_argsContext) Function_call(i int) IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Function_argsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *Function_argsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_argsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_argsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunction_args(s)
	}
}

func (s *Function_argsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunction_args(s)
	}
}

func (s *Function_argsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunction_args(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Function_args() (localctx IFunction_argsContext) {
	localctx = NewFunction_argsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 540, MySqlParserRULE_function_args)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5659)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 832, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(5655)
			p.Constant()
		}

	case 2:
		{
			p.SetState(5656)
			p.Full_column_name()
		}

	case 3:
		{
			p.SetState(5657)
			p.Function_call()
		}

	case 4:
		{
			p.SetState(5658)
			p.expression(0)
		}

	}
	p.SetState(5670)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MySqlParserCOMMA {
		{
			p.SetState(5661)
			p.Match(MySqlParserCOMMA)
		}
		p.SetState(5666)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 833, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(5662)
				p.Constant()
			}

		case 2:
			{
				p.SetState(5663)
				p.Full_column_name()
			}

		case 3:
			{
				p.SetState(5664)
				p.Function_call()
			}

		case 4:
			{
				p.SetState(5665)
				p.expression(0)
			}

		}

		p.SetState(5672)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunction_argContext is an interface to support dynamic dispatch.
type IFunction_argContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_argContext differentiates from other interfaces.
	IsFunction_argContext()
}

type Function_argContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_argContext() *Function_argContext {
	var p = new(Function_argContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_function_arg
	return p
}

func (*Function_argContext) IsFunction_argContext() {}

func NewFunction_argContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_argContext {
	var p = new(Function_argContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_function_arg

	return p
}

func (s *Function_argContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_argContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *Function_argContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *Function_argContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *Function_argContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *Function_argContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_argContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_argContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunction_arg(s)
	}
}

func (s *Function_argContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunction_arg(s)
	}
}

func (s *Function_argContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunction_arg(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Function_arg() (localctx IFunction_argContext) {
	localctx = NewFunction_argContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 542, MySqlParserRULE_function_arg)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5677)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 835, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5673)
			p.Constant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5674)
			p.Full_column_name()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5675)
			p.Function_call()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5676)
			p.expression(0)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IsExpressionContext struct {
	*ExpressionContext
}

func NewIsExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsExpressionContext {
	var p = new(IsExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsExpressionContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsExpressionContext) TRUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUE, 0)
}

func (s *IsExpressionContext) FALSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFALSE, 0)
}

func (s *IsExpressionContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *IsExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *IsExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIsExpression(s)
	}
}

func (s *IsExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIsExpression(s)
	}
}

func (s *IsExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIsExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type NotExpressionContext struct {
	*ExpressionContext
}

func NewNotExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NotExpressionContext {
	var p = new(NotExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NotExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NotExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *NotExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNotExpression(s)
	}
}

func (s *NotExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNotExpression(s)
	}
}

func (s *NotExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNotExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type LogicalExpressionContext struct {
	*ExpressionContext
}

func NewLogicalExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalExpressionContext {
	var p = new(LogicalExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *LogicalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *LogicalExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalExpressionContext) Logical_operator() ILogical_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogical_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogical_operatorContext)
}

func (s *LogicalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLogicalExpression(s)
	}
}

func (s *LogicalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLogicalExpression(s)
	}
}

func (s *LogicalExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLogicalExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type PredicateExpressionContext struct {
	*ExpressionContext
}

func NewPredicateExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PredicateExpressionContext {
	var p = new(PredicateExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PredicateExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateExpressionContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *PredicateExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPredicateExpression(s)
	}
}

func (s *PredicateExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPredicateExpression(s)
	}
}

func (s *PredicateExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPredicateExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *MySqlParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 544
	p.EnterRecursionRule(localctx, 544, MySqlParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5690)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 837, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNotExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		p.SetState(5680)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserNOT || _la == MySqlParserEXCLAMATION_SYMBOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(5681)
			p.expression(4)
		}

	case 2:
		localctx = NewIsExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5682)
			p.predicate(0)
		}
		{
			p.SetState(5683)
			p.Match(MySqlParserIS)
		}
		p.SetState(5685)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserNOT {
			{
				p.SetState(5684)
				p.Match(MySqlParserNOT)
			}

		}
		p.SetState(5687)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MySqlParserFALSE || _la == MySqlParserTRUE || _la == MySqlParserUNKNOWN) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case 3:
		localctx = NewPredicateExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5689)
			p.predicate(0)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5698)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalExpressionContext(p, NewExpressionContext(p, _parentctx, _parentState))
			p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expression)
			p.SetState(5692)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(5693)
				p.Logical_operator()
			}
			{
				p.SetState(5694)
				p.expression(4)
			}

		}
		p.SetState(5700)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 838, p.GetParserRuleContext())
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SoundsLikePredicateContext struct {
	*PredicateContext
}

func NewSoundsLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SoundsLikePredicateContext {
	var p = new(SoundsLikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SoundsLikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SoundsLikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *SoundsLikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SoundsLikePredicateContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *SoundsLikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *SoundsLikePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSoundsLikePredicate(s)
	}
}

func (s *SoundsLikePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSoundsLikePredicate(s)
	}
}

func (s *SoundsLikePredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSoundsLikePredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExpressionAtomPredicateContext struct {
	*PredicateContext
}

func NewExpressionAtomPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpressionAtomPredicateContext {
	var p = new(ExpressionAtomPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ExpressionAtomPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionAtomPredicateContext) Expression_atom() IExpression_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_atomContext)
}

func (s *ExpressionAtomPredicateContext) LOCAL_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL_ID, 0)
}

func (s *ExpressionAtomPredicateContext) VAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserVAR_ASSIGN, 0)
}

func (s *ExpressionAtomPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExpressionAtomPredicate(s)
	}
}

func (s *ExpressionAtomPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExpressionAtomPredicate(s)
	}
}

func (s *ExpressionAtomPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExpressionAtomPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type InPredicateContext struct {
	*PredicateContext
}

func NewInPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InPredicateContext {
	var p = new(InPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *InPredicateContext) IN() antlr.TerminalNode {
	return s.GetToken(MySqlParserIN, 0)
}

func (s *InPredicateContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *InPredicateContext) Expression_list() IExpression_listContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_listContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_listContext)
}

func (s *InPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *InPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInPredicate(s)
	}
}

func (s *InPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInPredicate(s)
	}
}

func (s *InPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type SubqueryComparasionPredicateContext struct {
	*PredicateContext
}

func NewSubqueryComparasionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryComparasionPredicateContext {
	var p = new(SubqueryComparasionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *SubqueryComparasionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryComparasionPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *SubqueryComparasionPredicateContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *SubqueryComparasionPredicateContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *SubqueryComparasionPredicateContext) ALL() antlr.TerminalNode {
	return s.GetToken(MySqlParserALL, 0)
}

func (s *SubqueryComparasionPredicateContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *SubqueryComparasionPredicateContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *SubqueryComparasionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterSubqueryComparasionPredicate(s)
	}
}

func (s *SubqueryComparasionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitSubqueryComparasionPredicate(s)
	}
}

func (s *SubqueryComparasionPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitSubqueryComparasionPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type BetweenPredicateContext struct {
	*PredicateContext
}

func NewBetweenPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BetweenPredicateContext {
	var p = new(BetweenPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BetweenPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BetweenPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BetweenPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BetweenPredicateContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBETWEEN, 0)
}

func (s *BetweenPredicateContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *BetweenPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *BetweenPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBetweenPredicate(s)
	}
}

func (s *BetweenPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBetweenPredicate(s)
	}
}

func (s *BetweenPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBetweenPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type BinaryComparasionPredicateContext struct {
	*PredicateContext
}

func NewBinaryComparasionPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryComparasionPredicateContext {
	var p = new(BinaryComparasionPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BinaryComparasionPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryComparasionPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *BinaryComparasionPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BinaryComparasionPredicateContext) Comparison_operator() IComparison_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparison_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparison_operatorContext)
}

func (s *BinaryComparasionPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinaryComparasionPredicate(s)
	}
}

func (s *BinaryComparasionPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinaryComparasionPredicate(s)
	}
}

func (s *BinaryComparasionPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinaryComparasionPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type IsNullPredicateContext struct {
	*PredicateContext
}

func NewIsNullPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IsNullPredicateContext {
	var p = new(IsNullPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *IsNullPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IsNullPredicateContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *IsNullPredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS, 0)
}

func (s *IsNullPredicateContext) Null_notnull() INull_notnullContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INull_notnullContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INull_notnullContext)
}

func (s *IsNullPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIsNullPredicate(s)
	}
}

func (s *IsNullPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIsNullPredicate(s)
	}
}

func (s *IsNullPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIsNullPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type LikePredicateContext struct {
	*PredicateContext
}

func NewLikePredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LikePredicateContext {
	var p = new(LikePredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *LikePredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikePredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *LikePredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *LikePredicateContext) LIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIKE, 0)
}

func (s *LikePredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *LikePredicateContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *LikePredicateContext) String_literal() IString_literalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IString_literalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IString_literalContext)
}

func (s *LikePredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLikePredicate(s)
	}
}

func (s *LikePredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLikePredicate(s)
	}
}

func (s *LikePredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLikePredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

type RegexpPredicateContext struct {
	*PredicateContext
}

func NewRegexpPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RegexpPredicateContext {
	var p = new(RegexpPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *RegexpPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegexpPredicateContext) AllPredicate() []IPredicateContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPredicateContext)(nil)).Elem())
	var tst = make([]IPredicateContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPredicateContext)
		}
	}

	return tst
}

func (s *RegexpPredicateContext) Predicate(i int) IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *RegexpPredicateContext) REGEXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserREGEXP, 0)
}

func (s *RegexpPredicateContext) RLIKE() antlr.TerminalNode {
	return s.GetToken(MySqlParserRLIKE, 0)
}

func (s *RegexpPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *RegexpPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterRegexpPredicate(s)
	}
}

func (s *RegexpPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitRegexpPredicate(s)
	}
}

func (s *RegexpPredicateContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitRegexpPredicate(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Predicate() (localctx IPredicateContext) {
	return p.predicate(0)
}

func (p *MySqlParser) predicate(_p int) (localctx IPredicateContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPredicateContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 546
	p.EnterRecursionRule(localctx, 546, MySqlParserRULE_predicate, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewExpressionAtomPredicateContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	p.SetState(5704)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 839, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(5702)
			p.Match(MySqlParserLOCAL_ID)
		}
		{
			p.SetState(5703)
			p.Match(MySqlParserVAR_ASSIGN)
		}

	}
	{
		p.SetState(5706)
		p.expression_atom(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5765)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5763)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 846, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBinaryComparasionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5708)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(5709)
					p.Comparison_operator()
				}
				{
					p.SetState(5710)
					p.predicate(8)
				}

			case 2:
				localctx = NewBetweenPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5712)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				p.SetState(5714)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(5713)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(5716)
					p.Match(MySqlParserBETWEEN)
				}
				{
					p.SetState(5717)
					p.predicate(0)
				}
				{
					p.SetState(5718)
					p.Match(MySqlParserAND)
				}
				{
					p.SetState(5719)
					p.predicate(6)
				}

			case 3:
				localctx = NewSoundsLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5721)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(5722)
					p.Match(MySqlParserSOUNDS)
				}
				{
					p.SetState(5723)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(5724)
					p.predicate(5)
				}

			case 4:
				localctx = NewRegexpPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5725)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(5727)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(5726)
						p.Match(MySqlParserNOT)
					}

				}
				p.SetState(5729)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserREGEXP || _la == MySqlParserRLIKE) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(5730)
					p.predicate(3)
				}

			case 5:
				localctx = NewInPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5731)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				p.SetState(5733)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(5732)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(5735)
					p.Match(MySqlParserIN)
				}
				{
					p.SetState(5736)
					p.Match(MySqlParserLR_BRACKET)
				}
				p.SetState(5739)
				p.GetErrorHandler().Sync(p)
				switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 843, p.GetParserRuleContext()) {
				case 1:
					{
						p.SetState(5737)
						p.Subquery()
					}

				case 2:
					{
						p.SetState(5738)
						p.Expression_list()
					}

				}
				{
					p.SetState(5741)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 6:
				localctx = NewIsNullPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5743)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(5744)
					p.Match(MySqlParserIS)
				}
				{
					p.SetState(5745)
					p.Null_notnull()
				}

			case 7:
				localctx = NewSubqueryComparasionPredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5746)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(5747)
					p.Comparison_operator()
				}
				p.SetState(5748)
				_la = p.GetTokenStream().LA(1)

				if !(_la == MySqlParserALL || _la == MySqlParserANY || _la == MySqlParserSOME) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
				{
					p.SetState(5749)
					p.Match(MySqlParserLR_BRACKET)
				}
				{
					p.SetState(5750)
					p.Subquery()
				}
				{
					p.SetState(5751)
					p.Match(MySqlParserRR_BRACKET)
				}

			case 8:
				localctx = NewLikePredicateContext(p, NewPredicateContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_predicate)
				p.SetState(5753)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(5755)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MySqlParserNOT {
					{
						p.SetState(5754)
						p.Match(MySqlParserNOT)
					}

				}
				{
					p.SetState(5757)
					p.Match(MySqlParserLIKE)
				}
				{
					p.SetState(5758)
					p.predicate(0)
				}
				p.SetState(5761)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 845, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(5759)
						p.Match(MySqlParserESCAPE)
					}
					{
						p.SetState(5760)
						p.String_literal()
					}

				}

			}

		}
		p.SetState(5767)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 847, p.GetParserRuleContext())
	}

	return localctx
}

// IExpression_atomContext is an interface to support dynamic dispatch.
type IExpression_atomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpression_atomContext differentiates from other interfaces.
	IsExpression_atomContext()
}

type Expression_atomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpression_atomContext() *Expression_atomContext {
	var p = new(Expression_atomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_expression_atom
	return p
}

func (*Expression_atomContext) IsExpression_atomContext() {}

func NewExpression_atomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Expression_atomContext {
	var p = new(Expression_atomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_expression_atom

	return p
}

func (s *Expression_atomContext) GetParser() antlr.Parser { return s.parser }

func (s *Expression_atomContext) CopyFrom(ctx *Expression_atomContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *Expression_atomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Expression_atomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnaryExpressionAtomContext struct {
	*Expression_atomContext
}

func NewUnaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryExpressionAtomContext {
	var p = new(UnaryExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *UnaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionAtomContext) Unary_operator() IUnary_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_operatorContext)
}

func (s *UnaryExpressionAtomContext) Expression_atom() IExpression_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_atomContext)
}

func (s *UnaryExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnaryExpressionAtom(s)
	}
}

func (s *UnaryExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnaryExpressionAtom(s)
	}
}

func (s *UnaryExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnaryExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExistsExpessionAtomContext struct {
	*Expression_atomContext
}

func NewExistsExpessionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsExpessionAtomContext {
	var p = new(ExistsExpessionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *ExistsExpessionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsExpessionAtomContext) Subquery() ISubqueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubqueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubqueryContext)
}

func (s *ExistsExpessionAtomContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXISTS, 0)
}

func (s *ExistsExpessionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterExistsExpessionAtom(s)
	}
}

func (s *ExistsExpessionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitExistsExpessionAtom(s)
	}
}

func (s *ExistsExpessionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitExistsExpessionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConstantExpressionAtomContext struct {
	*Expression_atomContext
}

func NewConstantExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConstantExpressionAtomContext {
	var p = new(ConstantExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *ConstantExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionAtomContext) Constant() IConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantContext)
}

func (s *ConstantExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterConstantExpressionAtom(s)
	}
}

func (s *ConstantExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitConstantExpressionAtom(s)
	}
}

func (s *ConstantExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitConstantExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallExpressionAtomContext struct {
	*Expression_atomContext
}

func NewFunctionCallExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallExpressionAtomContext {
	var p = new(FunctionCallExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *FunctionCallExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallExpressionAtomContext) Function_call() IFunction_callContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunction_callContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunction_callContext)
}

func (s *FunctionCallExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunctionCallExpressionAtom(s)
	}
}

func (s *FunctionCallExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunctionCallExpressionAtom(s)
	}
}

func (s *FunctionCallExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunctionCallExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type MysqlVariableExpressionAtomContext struct {
	*Expression_atomContext
}

func NewMysqlVariableExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MysqlVariableExpressionAtomContext {
	var p = new(MysqlVariableExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *MysqlVariableExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MysqlVariableExpressionAtomContext) Mysql_variable() IMysql_variableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMysql_variableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMysql_variableContext)
}

func (s *MysqlVariableExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMysqlVariableExpressionAtom(s)
	}
}

func (s *MysqlVariableExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMysqlVariableExpressionAtom(s)
	}
}

func (s *MysqlVariableExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMysqlVariableExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type BinaryExpressionAtomContext struct {
	*Expression_atomContext
}

func NewBinaryExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryExpressionAtomContext {
	var p = new(BinaryExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *BinaryExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionAtomContext) BINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINARY, 0)
}

func (s *BinaryExpressionAtomContext) Expression_atom() IExpression_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpression_atomContext)
}

func (s *BinaryExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBinaryExpressionAtom(s)
	}
}

func (s *BinaryExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBinaryExpressionAtom(s)
	}
}

func (s *BinaryExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBinaryExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type FullColumnNameExpressionAtomContext struct {
	*Expression_atomContext
}

func NewFullColumnNameExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FullColumnNameExpressionAtomContext {
	var p = new(FullColumnNameExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *FullColumnNameExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FullColumnNameExpressionAtomContext) Full_column_name() IFull_column_nameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFull_column_nameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFull_column_nameContext)
}

func (s *FullColumnNameExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFullColumnNameExpressionAtom(s)
	}
}

func (s *FullColumnNameExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFullColumnNameExpressionAtom(s)
	}
}

func (s *FullColumnNameExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFullColumnNameExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type DefaultExpressionAtomContext struct {
	*Expression_atomContext
}

func NewDefaultExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DefaultExpressionAtomContext {
	var p = new(DefaultExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *DefaultExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultExpressionAtomContext) DEFAULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFAULT, 0)
}

func (s *DefaultExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterDefaultExpressionAtom(s)
	}
}

func (s *DefaultExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitDefaultExpressionAtom(s)
	}
}

func (s *DefaultExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitDefaultExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitExpressionAtomContext struct {
	*Expression_atomContext
}

func NewBitExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitExpressionAtomContext {
	var p = new(BitExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *BitExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitExpressionAtomContext) AllExpression_atom() []IExpression_atomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem())
	var tst = make([]IExpression_atomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_atomContext)
		}
	}

	return tst
}

func (s *BitExpressionAtomContext) Expression_atom(i int) IExpression_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_atomContext)
}

func (s *BitExpressionAtomContext) Bit_operator() IBit_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBit_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBit_operatorContext)
}

func (s *BitExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBitExpressionAtom(s)
	}
}

func (s *BitExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBitExpressionAtom(s)
	}
}

func (s *BitExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBitExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type NestedExpressionAtomContext struct {
	*Expression_atomContext
}

func NewNestedExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NestedExpressionAtomContext {
	var p = new(NestedExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *NestedExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedExpressionAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NestedExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterNestedExpressionAtom(s)
	}
}

func (s *NestedExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitNestedExpressionAtom(s)
	}
}

func (s *NestedExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitNestedExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type MathExpressionAtomContext struct {
	*Expression_atomContext
}

func NewMathExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MathExpressionAtomContext {
	var p = new(MathExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *MathExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MathExpressionAtomContext) AllExpression_atom() []IExpression_atomContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem())
	var tst = make([]IExpression_atomContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpression_atomContext)
		}
	}

	return tst
}

func (s *MathExpressionAtomContext) Expression_atom(i int) IExpression_atomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpression_atomContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpression_atomContext)
}

func (s *MathExpressionAtomContext) Math_operator() IMath_operatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMath_operatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMath_operatorContext)
}

func (s *MathExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMathExpressionAtom(s)
	}
}

func (s *MathExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMathExpressionAtom(s)
	}
}

func (s *MathExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMathExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

type IntervalExpressionAtomContext struct {
	*Expression_atomContext
}

func NewIntervalExpressionAtomContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalExpressionAtomContext {
	var p = new(IntervalExpressionAtomContext)

	p.Expression_atomContext = NewEmptyExpression_atomContext()
	p.parser = parser
	p.CopyFrom(ctx.(*Expression_atomContext))

	return p
}

func (s *IntervalExpressionAtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalExpressionAtomContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERVAL, 0)
}

func (s *IntervalExpressionAtomContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IntervalExpressionAtomContext) Interval_type() IInterval_typeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterval_typeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterval_typeContext)
}

func (s *IntervalExpressionAtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterIntervalExpressionAtom(s)
	}
}

func (s *IntervalExpressionAtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitIntervalExpressionAtom(s)
	}
}

func (s *IntervalExpressionAtomContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitIntervalExpressionAtom(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Expression_atom() (localctx IExpression_atomContext) {
	return p.expression_atom(0)
}

func (p *MySqlParser) expression_atom(_p int) (localctx IExpression_atomContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpression_atomContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpression_atomContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 548
	p.EnterRecursionRule(localctx, 548, MySqlParserRULE_expression_atom, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5794)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 849, p.GetParserRuleContext()) {
	case 1:
		localctx = NewDefaultExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(5769)
			p.Match(MySqlParserDEFAULT)
		}

	case 2:
		localctx = NewConstantExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5770)
			p.Constant()
		}

	case 3:
		localctx = NewFullColumnNameExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5771)
			p.Full_column_name()
		}

	case 4:
		localctx = NewFunctionCallExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5772)
			p.Function_call()
		}

	case 5:
		localctx = NewMysqlVariableExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5773)
			p.Mysql_variable()
		}

	case 6:
		localctx = NewUnaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5774)
			p.Unary_operator()
		}
		{
			p.SetState(5775)
			p.expression_atom(7)
		}

	case 7:
		localctx = NewBinaryExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5777)
			p.Match(MySqlParserBINARY)
		}
		{
			p.SetState(5778)
			p.expression_atom(6)
		}

	case 8:
		localctx = NewNestedExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5779)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5780)
			p.expression(0)
		}
		{
			p.SetState(5781)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 9:
		localctx = NewExistsExpessionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(5784)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MySqlParserEXISTS {
			{
				p.SetState(5783)
				p.Match(MySqlParserEXISTS)
			}

		}
		{
			p.SetState(5786)
			p.Match(MySqlParserLR_BRACKET)
		}
		{
			p.SetState(5787)
			p.Subquery()
		}
		{
			p.SetState(5788)
			p.Match(MySqlParserRR_BRACKET)
		}

	case 10:
		localctx = NewIntervalExpressionAtomContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(5790)
			p.Match(MySqlParserINTERVAL)
		}
		{
			p.SetState(5791)
			p.expression(0)
		}
		{
			p.SetState(5792)
			p.Interval_type()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(5806)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 851, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(5804)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 850, p.GetParserRuleContext()) {
			case 1:
				localctx = NewBitExpressionAtomContext(p, NewExpression_atomContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expression_atom)
				p.SetState(5796)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(5797)
					p.Bit_operator()
				}
				{
					p.SetState(5798)
					p.expression_atom(3)
				}

			case 2:
				localctx = NewMathExpressionAtomContext(p, NewExpression_atomContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MySqlParserRULE_expression_atom)
				p.SetState(5800)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(5801)
					p.Math_operator()
				}
				{
					p.SetState(5802)
					p.expression_atom(2)
				}

			}

		}
		p.SetState(5808)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 851, p.GetParserRuleContext())
	}

	return localctx
}

// IUnary_operatorContext is an interface to support dynamic dispatch.
type IUnary_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_operatorContext differentiates from other interfaces.
	IsUnary_operatorContext()
}

type Unary_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_operatorContext() *Unary_operatorContext {
	var p = new(Unary_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_unary_operator
	return p
}

func (*Unary_operatorContext) IsUnary_operatorContext() {}

func NewUnary_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_operatorContext {
	var p = new(Unary_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_unary_operator

	return p
}

func (s *Unary_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Unary_operatorContext) NOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserNOT, 0)
}

func (s *Unary_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterUnary_operator(s)
	}
}

func (s *Unary_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitUnary_operator(s)
	}
}

func (s *Unary_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitUnary_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Unary_operator() (localctx IUnary_operatorContext) {
	localctx = NewUnary_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 550, MySqlParserRULE_unary_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5809)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserNOT || (((_la-930)&-(0x1f+1)) == 0 && ((1<<uint((_la-930)))&((1<<(MySqlParserPLUS-930))|(1<<(MySqlParserMINUS-930))|(1<<(MySqlParserEXCLAMATION_SYMBOL-930))|(1<<(MySqlParserBIT_NOT_OP-930)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IComparison_operatorContext is an interface to support dynamic dispatch.
type IComparison_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparison_operatorContext differentiates from other interfaces.
	IsComparison_operatorContext()
}

type Comparison_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparison_operatorContext() *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_comparison_operator
	return p
}

func (*Comparison_operatorContext) IsComparison_operatorContext() {}

func NewComparison_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Comparison_operatorContext {
	var p = new(Comparison_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_comparison_operator

	return p
}

func (s *Comparison_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Comparison_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Comparison_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Comparison_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitComparison_operator(s)
	}
}

func (s *Comparison_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitComparison_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Comparison_operator() (localctx IComparison_operatorContext) {
	localctx = NewComparison_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 552, MySqlParserRULE_comparison_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5825)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 852, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5811)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5812)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5813)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5814)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(5815)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5816)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(5817)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(5818)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(5819)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(5820)
			p.Match(MySqlParserEXCLAMATION_SYMBOL)
		}
		{
			p.SetState(5821)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(5822)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(5823)
			p.Match(MySqlParserEQUAL_SYMBOL)
		}
		{
			p.SetState(5824)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	}

	return localctx
}

// ILogical_operatorContext is an interface to support dynamic dispatch.
type ILogical_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogical_operatorContext differentiates from other interfaces.
	IsLogical_operatorContext()
}

type Logical_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogical_operatorContext() *Logical_operatorContext {
	var p = new(Logical_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_logical_operator
	return p
}

func (*Logical_operatorContext) IsLogical_operatorContext() {}

func NewLogical_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Logical_operatorContext {
	var p = new(Logical_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_logical_operator

	return p
}

func (s *Logical_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Logical_operatorContext) AND() antlr.TerminalNode {
	return s.GetToken(MySqlParserAND, 0)
}

func (s *Logical_operatorContext) XOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserXOR, 0)
}

func (s *Logical_operatorContext) OR() antlr.TerminalNode {
	return s.GetToken(MySqlParserOR, 0)
}

func (s *Logical_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Logical_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Logical_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterLogical_operator(s)
	}
}

func (s *Logical_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitLogical_operator(s)
	}
}

func (s *Logical_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitLogical_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Logical_operator() (localctx ILogical_operatorContext) {
	localctx = NewLogical_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 554, MySqlParserRULE_logical_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5834)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserAND:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5827)
			p.Match(MySqlParserAND)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5828)
			p.Match(MySqlParserBIT_AND_OP)
		}
		{
			p.SetState(5829)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserXOR:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5830)
			p.Match(MySqlParserXOR)
		}

	case MySqlParserOR:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5831)
			p.Match(MySqlParserOR)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5832)
			p.Match(MySqlParserBIT_OR_OP)
		}
		{
			p.SetState(5833)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBit_operatorContext is an interface to support dynamic dispatch.
type IBit_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBit_operatorContext differentiates from other interfaces.
	IsBit_operatorContext()
}

type Bit_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBit_operatorContext() *Bit_operatorContext {
	var p = new(Bit_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_bit_operator
	return p
}

func (*Bit_operatorContext) IsBit_operatorContext() {}

func NewBit_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bit_operatorContext {
	var p = new(Bit_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_bit_operator

	return p
}

func (s *Bit_operatorContext) GetParser() antlr.Parser { return s.parser }
func (s *Bit_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Bit_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Bit_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterBit_operator(s)
	}
}

func (s *Bit_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitBit_operator(s)
	}
}

func (s *Bit_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitBit_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Bit_operator() (localctx IBit_operatorContext) {
	localctx = NewBit_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 556, MySqlParserRULE_bit_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(5843)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MySqlParserLESS_SYMBOL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(5836)
			p.Match(MySqlParserLESS_SYMBOL)
		}
		{
			p.SetState(5837)
			p.Match(MySqlParserLESS_SYMBOL)
		}

	case MySqlParserGREATER_SYMBOL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(5838)
			p.Match(MySqlParserGREATER_SYMBOL)
		}
		{
			p.SetState(5839)
			p.Match(MySqlParserGREATER_SYMBOL)
		}

	case MySqlParserBIT_AND_OP:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(5840)
			p.Match(MySqlParserBIT_AND_OP)
		}

	case MySqlParserBIT_XOR_OP:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(5841)
			p.Match(MySqlParserBIT_XOR_OP)
		}

	case MySqlParserBIT_OR_OP:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(5842)
			p.Match(MySqlParserBIT_OR_OP)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMath_operatorContext is an interface to support dynamic dispatch.
type IMath_operatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMath_operatorContext differentiates from other interfaces.
	IsMath_operatorContext()
}

type Math_operatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMath_operatorContext() *Math_operatorContext {
	var p = new(Math_operatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_math_operator
	return p
}

func (*Math_operatorContext) IsMath_operatorContext() {}

func NewMath_operatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Math_operatorContext {
	var p = new(Math_operatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_math_operator

	return p
}

func (s *Math_operatorContext) GetParser() antlr.Parser { return s.parser }

func (s *Math_operatorContext) DIV() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIV, 0)
}

func (s *Math_operatorContext) MOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserMOD, 0)
}

func (s *Math_operatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Math_operatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Math_operatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterMath_operator(s)
	}
}

func (s *Math_operatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitMath_operator(s)
	}
}

func (s *Math_operatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitMath_operator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Math_operator() (localctx IMath_operatorContext) {
	localctx = NewMath_operatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 558, MySqlParserRULE_math_operator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5845)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-927)&-(0x1f+1)) == 0 && ((1<<uint((_la-927)))&((1<<(MySqlParserSTAR-927))|(1<<(MySqlParserDIVIDE-927))|(1<<(MySqlParserMODULE-927))|(1<<(MySqlParserPLUS-927))|(1<<(MySqlParserMINUS-927))|(1<<(MySqlParserDIV-927))|(1<<(MySqlParserMOD-927)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICharset_name_baseContext is an interface to support dynamic dispatch.
type ICharset_name_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCharset_name_baseContext differentiates from other interfaces.
	IsCharset_name_baseContext()
}

type Charset_name_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCharset_name_baseContext() *Charset_name_baseContext {
	var p = new(Charset_name_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_charset_name_base
	return p
}

func (*Charset_name_baseContext) IsCharset_name_baseContext() {}

func NewCharset_name_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Charset_name_baseContext {
	var p = new(Charset_name_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_charset_name_base

	return p
}

func (s *Charset_name_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Charset_name_baseContext) ARMSCII8() antlr.TerminalNode {
	return s.GetToken(MySqlParserARMSCII8, 0)
}

func (s *Charset_name_baseContext) ASCII() antlr.TerminalNode {
	return s.GetToken(MySqlParserASCII, 0)
}

func (s *Charset_name_baseContext) BIG5() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIG5, 0)
}

func (s *Charset_name_baseContext) CP1250() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1250, 0)
}

func (s *Charset_name_baseContext) CP1251() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1251, 0)
}

func (s *Charset_name_baseContext) CP1256() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1256, 0)
}

func (s *Charset_name_baseContext) CP1257() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP1257, 0)
}

func (s *Charset_name_baseContext) CP850() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP850, 0)
}

func (s *Charset_name_baseContext) CP852() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP852, 0)
}

func (s *Charset_name_baseContext) CP866() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP866, 0)
}

func (s *Charset_name_baseContext) CP932() antlr.TerminalNode {
	return s.GetToken(MySqlParserCP932, 0)
}

func (s *Charset_name_baseContext) DEC8() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEC8, 0)
}

func (s *Charset_name_baseContext) EUCJPMS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCJPMS, 0)
}

func (s *Charset_name_baseContext) EUCKR() antlr.TerminalNode {
	return s.GetToken(MySqlParserEUCKR, 0)
}

func (s *Charset_name_baseContext) GB2312() antlr.TerminalNode {
	return s.GetToken(MySqlParserGB2312, 0)
}

func (s *Charset_name_baseContext) GBK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGBK, 0)
}

func (s *Charset_name_baseContext) GEOSTD8() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOSTD8, 0)
}

func (s *Charset_name_baseContext) GREEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREEK, 0)
}

func (s *Charset_name_baseContext) HEBREW() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEBREW, 0)
}

func (s *Charset_name_baseContext) HP8() antlr.TerminalNode {
	return s.GetToken(MySqlParserHP8, 0)
}

func (s *Charset_name_baseContext) KEYBCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEYBCS2, 0)
}

func (s *Charset_name_baseContext) KOI8R() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8R, 0)
}

func (s *Charset_name_baseContext) KOI8U() antlr.TerminalNode {
	return s.GetToken(MySqlParserKOI8U, 0)
}

func (s *Charset_name_baseContext) LATIN1() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN1, 0)
}

func (s *Charset_name_baseContext) LATIN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN2, 0)
}

func (s *Charset_name_baseContext) LATIN5() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN5, 0)
}

func (s *Charset_name_baseContext) LATIN7() antlr.TerminalNode {
	return s.GetToken(MySqlParserLATIN7, 0)
}

func (s *Charset_name_baseContext) MACCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACCE, 0)
}

func (s *Charset_name_baseContext) MACROMAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMACROMAN, 0)
}

func (s *Charset_name_baseContext) SJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSJIS, 0)
}

func (s *Charset_name_baseContext) SWE7() antlr.TerminalNode {
	return s.GetToken(MySqlParserSWE7, 0)
}

func (s *Charset_name_baseContext) TIS620() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIS620, 0)
}

func (s *Charset_name_baseContext) UCS2() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCS2, 0)
}

func (s *Charset_name_baseContext) UJIS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUJIS, 0)
}

func (s *Charset_name_baseContext) UTF16() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16, 0)
}

func (s *Charset_name_baseContext) UTF16LE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF16LE, 0)
}

func (s *Charset_name_baseContext) UTF32() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF32, 0)
}

func (s *Charset_name_baseContext) UTF8() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8, 0)
}

func (s *Charset_name_baseContext) UTF8MB3() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB3, 0)
}

func (s *Charset_name_baseContext) UTF8MB4() antlr.TerminalNode {
	return s.GetToken(MySqlParserUTF8MB4, 0)
}

func (s *Charset_name_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Charset_name_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Charset_name_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterCharset_name_base(s)
	}
}

func (s *Charset_name_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitCharset_name_base(s)
	}
}

func (s *Charset_name_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitCharset_name_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Charset_name_base() (localctx ICharset_name_baseContext) {
	localctx = NewCharset_name_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 560, MySqlParserRULE_charset_name_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5847)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-566)&-(0x1f+1)) == 0 && ((1<<uint((_la-566)))&((1<<(MySqlParserARMSCII8-566))|(1<<(MySqlParserASCII-566))|(1<<(MySqlParserBIG5-566))|(1<<(MySqlParserCP1250-566))|(1<<(MySqlParserCP1251-566))|(1<<(MySqlParserCP1256-566))|(1<<(MySqlParserCP1257-566))|(1<<(MySqlParserCP850-566))|(1<<(MySqlParserCP852-566))|(1<<(MySqlParserCP866-566))|(1<<(MySqlParserCP932-566))|(1<<(MySqlParserDEC8-566))|(1<<(MySqlParserEUCJPMS-566))|(1<<(MySqlParserEUCKR-566))|(1<<(MySqlParserGB2312-566))|(1<<(MySqlParserGBK-566))|(1<<(MySqlParserGEOSTD8-566))|(1<<(MySqlParserGREEK-566))|(1<<(MySqlParserHEBREW-566))|(1<<(MySqlParserHP8-566))|(1<<(MySqlParserKEYBCS2-566))|(1<<(MySqlParserKOI8R-566))|(1<<(MySqlParserKOI8U-566))|(1<<(MySqlParserLATIN1-566))|(1<<(MySqlParserLATIN2-566))|(1<<(MySqlParserLATIN5-566))|(1<<(MySqlParserLATIN7-566))|(1<<(MySqlParserMACCE-566))|(1<<(MySqlParserMACROMAN-566))|(1<<(MySqlParserSJIS-566))|(1<<(MySqlParserSWE7-566))|(1<<(MySqlParserTIS620-566)))) != 0) || (((_la-598)&-(0x1f+1)) == 0 && ((1<<uint((_la-598)))&((1<<(MySqlParserUCS2-598))|(1<<(MySqlParserUJIS-598))|(1<<(MySqlParserUTF16-598))|(1<<(MySqlParserUTF16LE-598))|(1<<(MySqlParserUTF32-598))|(1<<(MySqlParserUTF8-598))|(1<<(MySqlParserUTF8MB3-598))|(1<<(MySqlParserUTF8MB4-598)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITransaction_level_baseContext is an interface to support dynamic dispatch.
type ITransaction_level_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTransaction_level_baseContext differentiates from other interfaces.
	IsTransaction_level_baseContext()
}

type Transaction_level_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTransaction_level_baseContext() *Transaction_level_baseContext {
	var p = new(Transaction_level_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_transaction_level_base
	return p
}

func (*Transaction_level_baseContext) IsTransaction_level_baseContext() {}

func NewTransaction_level_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Transaction_level_baseContext {
	var p = new(Transaction_level_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_transaction_level_base

	return p
}

func (s *Transaction_level_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Transaction_level_baseContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPEATABLE, 0)
}

func (s *Transaction_level_baseContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMITTED, 0)
}

func (s *Transaction_level_baseContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMMITTED, 0)
}

func (s *Transaction_level_baseContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERIALIZABLE, 0)
}

func (s *Transaction_level_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Transaction_level_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Transaction_level_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterTransaction_level_base(s)
	}
}

func (s *Transaction_level_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitTransaction_level_base(s)
	}
}

func (s *Transaction_level_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitTransaction_level_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Transaction_level_base() (localctx ITransaction_level_baseContext) {
	localctx = NewTransaction_level_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 562, MySqlParserRULE_transaction_level_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5849)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-617)&-(0x1f+1)) == 0 && ((1<<uint((_la-617)))&((1<<(MySqlParserREPEATABLE-617))|(1<<(MySqlParserCOMMITTED-617))|(1<<(MySqlParserUNCOMMITTED-617))|(1<<(MySqlParserSERIALIZABLE-617)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IPrivileges_baseContext is an interface to support dynamic dispatch.
type IPrivileges_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrivileges_baseContext differentiates from other interfaces.
	IsPrivileges_baseContext()
}

type Privileges_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrivileges_baseContext() *Privileges_baseContext {
	var p = new(Privileges_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_privileges_base
	return p
}

func (*Privileges_baseContext) IsPrivileges_baseContext() {}

func NewPrivileges_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Privileges_baseContext {
	var p = new(Privileges_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_privileges_base

	return p
}

func (s *Privileges_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Privileges_baseContext) TABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLES, 0)
}

func (s *Privileges_baseContext) ROUTINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUTINE, 0)
}

func (s *Privileges_baseContext) EXECUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXECUTE, 0)
}

func (s *Privileges_baseContext) FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserFILE, 0)
}

func (s *Privileges_baseContext) PROCESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESS, 0)
}

func (s *Privileges_baseContext) RELOAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELOAD, 0)
}

func (s *Privileges_baseContext) SHUTDOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHUTDOWN, 0)
}

func (s *Privileges_baseContext) SUPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUPER, 0)
}

func (s *Privileges_baseContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRIVILEGES, 0)
}

func (s *Privileges_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Privileges_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Privileges_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterPrivileges_base(s)
	}
}

func (s *Privileges_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitPrivileges_base(s)
	}
}

func (s *Privileges_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitPrivileges_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Privileges_base() (localctx IPrivileges_baseContext) {
	localctx = NewPrivileges_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 564, MySqlParserRULE_privileges_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5851)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-557)&-(0x1f+1)) == 0 && ((1<<uint((_la-557)))&((1<<(MySqlParserTABLES-557))|(1<<(MySqlParserROUTINE-557))|(1<<(MySqlParserEXECUTE-557))|(1<<(MySqlParserFILE-557))|(1<<(MySqlParserPROCESS-557))|(1<<(MySqlParserRELOAD-557))|(1<<(MySqlParserSHUTDOWN-557))|(1<<(MySqlParserSUPER-557))|(1<<(MySqlParserPRIVILEGES-557)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IInterval_type_baseContext is an interface to support dynamic dispatch.
type IInterval_type_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterval_type_baseContext differentiates from other interfaces.
	IsInterval_type_baseContext()
}

type Interval_type_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterval_type_baseContext() *Interval_type_baseContext {
	var p = new(Interval_type_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_interval_type_base
	return p
}

func (*Interval_type_baseContext) IsInterval_type_baseContext() {}

func NewInterval_type_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Interval_type_baseContext {
	var p = new(Interval_type_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_interval_type_base

	return p
}

func (s *Interval_type_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Interval_type_baseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *Interval_type_baseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *Interval_type_baseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *Interval_type_baseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *Interval_type_baseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *Interval_type_baseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *Interval_type_baseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *Interval_type_baseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *Interval_type_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Interval_type_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Interval_type_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterInterval_type_base(s)
	}
}

func (s *Interval_type_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitInterval_type_base(s)
	}
}

func (s *Interval_type_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitInterval_type_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Interval_type_base() (localctx IInterval_type_baseContext) {
	localctx = NewInterval_type_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 566, MySqlParserRULE_interval_type_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5853)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-549)&-(0x1f+1)) == 0 && ((1<<uint((_la-549)))&((1<<(MySqlParserQUARTER-549))|(1<<(MySqlParserMONTH-549))|(1<<(MySqlParserDAY-549))|(1<<(MySqlParserHOUR-549))|(1<<(MySqlParserMINUTE-549))|(1<<(MySqlParserWEEK-549))|(1<<(MySqlParserSECOND-549))|(1<<(MySqlParserMICROSECOND-549)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IData_type_baseContext is an interface to support dynamic dispatch.
type IData_type_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsData_type_baseContext differentiates from other interfaces.
	IsData_type_baseContext()
}

type Data_type_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyData_type_baseContext() *Data_type_baseContext {
	var p = new(Data_type_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_data_type_base
	return p
}

func (*Data_type_baseContext) IsData_type_baseContext() {}

func NewData_type_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Data_type_baseContext {
	var p = new(Data_type_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_data_type_base

	return p
}

func (s *Data_type_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Data_type_baseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *Data_type_baseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *Data_type_baseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *Data_type_baseContext) DATETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATETIME, 0)
}

func (s *Data_type_baseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *Data_type_baseContext) ENUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserENUM, 0)
}

func (s *Data_type_baseContext) TEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEXT, 0)
}

func (s *Data_type_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Data_type_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Data_type_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterData_type_base(s)
	}
}

func (s *Data_type_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitData_type_base(s)
	}
}

func (s *Data_type_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitData_type_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Data_type_base() (localctx IData_type_baseContext) {
	localctx = NewData_type_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 568, MySqlParserRULE_data_type_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5855)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserDATETIME-181))|(1<<(MySqlParserYEAR-181))|(1<<(MySqlParserTEXT-181))|(1<<(MySqlParserENUM-181)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IKeywords_can_be_idContext is an interface to support dynamic dispatch.
type IKeywords_can_be_idContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywords_can_be_idContext differentiates from other interfaces.
	IsKeywords_can_be_idContext()
}

type Keywords_can_be_idContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywords_can_be_idContext() *Keywords_can_be_idContext {
	var p = new(Keywords_can_be_idContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_keywords_can_be_id
	return p
}

func (*Keywords_can_be_idContext) IsKeywords_can_be_idContext() {}

func NewKeywords_can_be_idContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Keywords_can_be_idContext {
	var p = new(Keywords_can_be_idContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_keywords_can_be_id

	return p
}

func (s *Keywords_can_be_idContext) GetParser() antlr.Parser { return s.parser }

func (s *Keywords_can_be_idContext) ACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserACTION, 0)
}

func (s *Keywords_can_be_idContext) AFTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserAFTER, 0)
}

func (s *Keywords_can_be_idContext) ALGORITHM() antlr.TerminalNode {
	return s.GetToken(MySqlParserALGORITHM, 0)
}

func (s *Keywords_can_be_idContext) ANY() antlr.TerminalNode {
	return s.GetToken(MySqlParserANY, 0)
}

func (s *Keywords_can_be_idContext) AT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAT, 0)
}

func (s *Keywords_can_be_idContext) AUTHORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTHORS, 0)
}

func (s *Keywords_can_be_idContext) AUTOCOMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOCOMMIT, 0)
}

func (s *Keywords_can_be_idContext) AUTOEXTEND_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTOEXTEND_SIZE, 0)
}

func (s *Keywords_can_be_idContext) AUTO_INCREMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAUTO_INCREMENT, 0)
}

func (s *Keywords_can_be_idContext) AVG_ROW_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserAVG_ROW_LENGTH, 0)
}

func (s *Keywords_can_be_idContext) BEGIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBEGIN, 0)
}

func (s *Keywords_can_be_idContext) BINLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserBINLOG, 0)
}

func (s *Keywords_can_be_idContext) BIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT, 0)
}

func (s *Keywords_can_be_idContext) BTREE() antlr.TerminalNode {
	return s.GetToken(MySqlParserBTREE, 0)
}

func (s *Keywords_can_be_idContext) CASCADED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCASCADED, 0)
}

func (s *Keywords_can_be_idContext) CHAIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAIN, 0)
}

func (s *Keywords_can_be_idContext) CHECKSUM() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHECKSUM, 0)
}

func (s *Keywords_can_be_idContext) CIPHER() antlr.TerminalNode {
	return s.GetToken(MySqlParserCIPHER, 0)
}

func (s *Keywords_can_be_idContext) CLIENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCLIENT, 0)
}

func (s *Keywords_can_be_idContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOALESCE, 0)
}

func (s *Keywords_can_be_idContext) CODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserCODE, 0)
}

func (s *Keywords_can_be_idContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMNS, 0)
}

func (s *Keywords_can_be_idContext) COLUMN_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLUMN_FORMAT, 0)
}

func (s *Keywords_can_be_idContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMENT, 0)
}

func (s *Keywords_can_be_idContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMMIT, 0)
}

func (s *Keywords_can_be_idContext) COMPACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPACT, 0)
}

func (s *Keywords_can_be_idContext) COMPLETION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPLETION, 0)
}

func (s *Keywords_can_be_idContext) COMPRESSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESSED, 0)
}

func (s *Keywords_can_be_idContext) CONCURRENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCURRENT, 0)
}

func (s *Keywords_can_be_idContext) CONNECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION, 0)
}

func (s *Keywords_can_be_idContext) CONSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONSISTENT, 0)
}

func (s *Keywords_can_be_idContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTAINS, 0)
}

func (s *Keywords_can_be_idContext) CONTRIBUTORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONTRIBUTORS, 0)
}

func (s *Keywords_can_be_idContext) COPY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOPY, 0)
}

func (s *Keywords_can_be_idContext) DATA() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATA, 0)
}

func (s *Keywords_can_be_idContext) DATAFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATAFILE, 0)
}

func (s *Keywords_can_be_idContext) DEFINER() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEFINER, 0)
}

func (s *Keywords_can_be_idContext) DELAY_KEY_WRITE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDELAY_KEY_WRITE, 0)
}

func (s *Keywords_can_be_idContext) DIRECTORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIRECTORY, 0)
}

func (s *Keywords_can_be_idContext) DISABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISABLE, 0)
}

func (s *Keywords_can_be_idContext) DISCARD() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISCARD, 0)
}

func (s *Keywords_can_be_idContext) DISK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISK, 0)
}

func (s *Keywords_can_be_idContext) DO() antlr.TerminalNode {
	return s.GetToken(MySqlParserDO, 0)
}

func (s *Keywords_can_be_idContext) DUMPFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUMPFILE, 0)
}

func (s *Keywords_can_be_idContext) DUPLICATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDUPLICATE, 0)
}

func (s *Keywords_can_be_idContext) DYNAMIC() antlr.TerminalNode {
	return s.GetToken(MySqlParserDYNAMIC, 0)
}

func (s *Keywords_can_be_idContext) ENABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENABLE, 0)
}

func (s *Keywords_can_be_idContext) ENDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDS, 0)
}

func (s *Keywords_can_be_idContext) ENGINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINE, 0)
}

func (s *Keywords_can_be_idContext) ENGINES() antlr.TerminalNode {
	return s.GetToken(MySqlParserENGINES, 0)
}

func (s *Keywords_can_be_idContext) ERRORS() antlr.TerminalNode {
	return s.GetToken(MySqlParserERRORS, 0)
}

func (s *Keywords_can_be_idContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserESCAPE, 0)
}

func (s *Keywords_can_be_idContext) EVEN() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVEN, 0)
}

func (s *Keywords_can_be_idContext) EVENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENT, 0)
}

func (s *Keywords_can_be_idContext) EVENTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVENTS, 0)
}

func (s *Keywords_can_be_idContext) EVERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserEVERY, 0)
}

func (s *Keywords_can_be_idContext) EXCHANGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCHANGE, 0)
}

func (s *Keywords_can_be_idContext) EXCLUSIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXCLUSIVE, 0)
}

func (s *Keywords_can_be_idContext) EXPIRE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPIRE, 0)
}

func (s *Keywords_can_be_idContext) EXTENT_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTENT_SIZE, 0)
}

func (s *Keywords_can_be_idContext) FIELDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELDS, 0)
}

func (s *Keywords_can_be_idContext) FIRST() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIRST, 0)
}

func (s *Keywords_can_be_idContext) FIXED() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIXED, 0)
}

func (s *Keywords_can_be_idContext) FULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserFULL, 0)
}

func (s *Keywords_can_be_idContext) FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserFUNCTION, 0)
}

func (s *Keywords_can_be_idContext) GLOBAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLOBAL, 0)
}

func (s *Keywords_can_be_idContext) GRANTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserGRANTS, 0)
}

func (s *Keywords_can_be_idContext) HASH() antlr.TerminalNode {
	return s.GetToken(MySqlParserHASH, 0)
}

func (s *Keywords_can_be_idContext) HOST() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOST, 0)
}

func (s *Keywords_can_be_idContext) IDENTIFIED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIDENTIFIED, 0)
}

func (s *Keywords_can_be_idContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIMPORT, 0)
}

func (s *Keywords_can_be_idContext) INITIAL_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINITIAL_SIZE, 0)
}

func (s *Keywords_can_be_idContext) INPLACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserINPLACE, 0)
}

func (s *Keywords_can_be_idContext) INSERT_METHOD() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSERT_METHOD, 0)
}

func (s *Keywords_can_be_idContext) INVOKER() antlr.TerminalNode {
	return s.GetToken(MySqlParserINVOKER, 0)
}

func (s *Keywords_can_be_idContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserISOLATION, 0)
}

func (s *Keywords_can_be_idContext) ISSUER() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSUER, 0)
}

func (s *Keywords_can_be_idContext) KEY_BLOCK_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserKEY_BLOCK_SIZE, 0)
}

func (s *Keywords_can_be_idContext) LANGUAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLANGUAGE, 0)
}

func (s *Keywords_can_be_idContext) LAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST, 0)
}

func (s *Keywords_can_be_idContext) LESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLESS, 0)
}

func (s *Keywords_can_be_idContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEVEL, 0)
}

func (s *Keywords_can_be_idContext) LIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLIST, 0)
}

func (s *Keywords_can_be_idContext) LOCAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCAL, 0)
}

func (s *Keywords_can_be_idContext) LOGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGS, 0)
}

func (s *Keywords_can_be_idContext) LOGFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOGFILE, 0)
}

func (s *Keywords_can_be_idContext) MASTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER, 0)
}

func (s *Keywords_can_be_idContext) MAX_CONNECTIONS_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_CONNECTIONS_PER_HOUR, 0)
}

func (s *Keywords_can_be_idContext) MAX_QUERIES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_QUERIES_PER_HOUR, 0)
}

func (s *Keywords_can_be_idContext) MAX_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_ROWS, 0)
}

func (s *Keywords_can_be_idContext) MAX_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_SIZE, 0)
}

func (s *Keywords_can_be_idContext) MAX_UPDATES_PER_HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_UPDATES_PER_HOUR, 0)
}

func (s *Keywords_can_be_idContext) MAX_USER_CONNECTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAX_USER_CONNECTIONS, 0)
}

func (s *Keywords_can_be_idContext) MEMORY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMEMORY, 0)
}

func (s *Keywords_can_be_idContext) MERGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMERGE, 0)
}

func (s *Keywords_can_be_idContext) MID() antlr.TerminalNode {
	return s.GetToken(MySqlParserMID, 0)
}

func (s *Keywords_can_be_idContext) MIN_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMIN_ROWS, 0)
}

func (s *Keywords_can_be_idContext) MUTEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserMUTEX, 0)
}

func (s *Keywords_can_be_idContext) SHARE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARE, 0)
}

func (s *Keywords_can_be_idContext) MODIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserMODIFY, 0)
}

func (s *Keywords_can_be_idContext) MYSQL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMYSQL, 0)
}

func (s *Keywords_can_be_idContext) NAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME, 0)
}

func (s *Keywords_can_be_idContext) NAMES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAMES, 0)
}

func (s *Keywords_can_be_idContext) NCHAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserNCHAR, 0)
}

func (s *Keywords_can_be_idContext) NO() antlr.TerminalNode {
	return s.GetToken(MySqlParserNO, 0)
}

func (s *Keywords_can_be_idContext) NODEGROUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserNODEGROUP, 0)
}

func (s *Keywords_can_be_idContext) NONE() antlr.TerminalNode {
	return s.GetToken(MySqlParserNONE, 0)
}

func (s *Keywords_can_be_idContext) OFFLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFLINE, 0)
}

func (s *Keywords_can_be_idContext) OFFSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserOFFSET, 0)
}

func (s *Keywords_can_be_idContext) OJ() antlr.TerminalNode {
	return s.GetToken(MySqlParserOJ, 0)
}

func (s *Keywords_can_be_idContext) OLD_PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserOLD_PASSWORD, 0)
}

func (s *Keywords_can_be_idContext) ONLINE() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLINE, 0)
}

func (s *Keywords_can_be_idContext) ONLY() antlr.TerminalNode {
	return s.GetToken(MySqlParserONLY, 0)
}

func (s *Keywords_can_be_idContext) OPTIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOPTIONS, 0)
}

func (s *Keywords_can_be_idContext) OWNER() antlr.TerminalNode {
	return s.GetToken(MySqlParserOWNER, 0)
}

func (s *Keywords_can_be_idContext) PACK_KEYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPACK_KEYS, 0)
}

func (s *Keywords_can_be_idContext) PARSER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARSER, 0)
}

func (s *Keywords_can_be_idContext) PARTIAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTIAL, 0)
}

func (s *Keywords_can_be_idContext) PARTITIONING() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONING, 0)
}

func (s *Keywords_can_be_idContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPARTITIONS, 0)
}

func (s *Keywords_can_be_idContext) PASSWORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPASSWORD, 0)
}

func (s *Keywords_can_be_idContext) PLUGINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserPLUGINS, 0)
}

func (s *Keywords_can_be_idContext) PORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPORT, 0)
}

func (s *Keywords_can_be_idContext) PRESERVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPRESERVE, 0)
}

func (s *Keywords_can_be_idContext) PROCESSLIST() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROCESSLIST, 0)
}

func (s *Keywords_can_be_idContext) PROFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILE, 0)
}

func (s *Keywords_can_be_idContext) PROFILES() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROFILES, 0)
}

func (s *Keywords_can_be_idContext) PROXY() antlr.TerminalNode {
	return s.GetToken(MySqlParserPROXY, 0)
}

func (s *Keywords_can_be_idContext) QUERY() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUERY, 0)
}

func (s *Keywords_can_be_idContext) QUICK() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUICK, 0)
}

func (s *Keywords_can_be_idContext) REBUILD() antlr.TerminalNode {
	return s.GetToken(MySqlParserREBUILD, 0)
}

func (s *Keywords_can_be_idContext) REDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDO_BUFFER_SIZE, 0)
}

func (s *Keywords_can_be_idContext) REDUNDANT() antlr.TerminalNode {
	return s.GetToken(MySqlParserREDUNDANT, 0)
}

func (s *Keywords_can_be_idContext) RELAYLOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELAYLOG, 0)
}

func (s *Keywords_can_be_idContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREMOVE, 0)
}

func (s *Keywords_can_be_idContext) REORGANIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREORGANIZE, 0)
}

func (s *Keywords_can_be_idContext) REPAIR() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPAIR, 0)
}

func (s *Keywords_can_be_idContext) REPLICATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserREPLICATION, 0)
}

func (s *Keywords_can_be_idContext) RETURNS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRETURNS, 0)
}

func (s *Keywords_can_be_idContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLBACK, 0)
}

func (s *Keywords_can_be_idContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(MySqlParserROLLUP, 0)
}

func (s *Keywords_can_be_idContext) ROW() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW, 0)
}

func (s *Keywords_can_be_idContext) ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserROWS, 0)
}

func (s *Keywords_can_be_idContext) ROW_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_FORMAT, 0)
}

func (s *Keywords_can_be_idContext) SAVEPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSAVEPOINT, 0)
}

func (s *Keywords_can_be_idContext) SCHEDULE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSCHEDULE, 0)
}

func (s *Keywords_can_be_idContext) SECURITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECURITY, 0)
}

func (s *Keywords_can_be_idContext) SERVER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSERVER, 0)
}

func (s *Keywords_can_be_idContext) SESSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION, 0)
}

func (s *Keywords_can_be_idContext) SHARED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHARED, 0)
}

func (s *Keywords_can_be_idContext) SIGNED() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGNED, 0)
}

func (s *Keywords_can_be_idContext) SIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIMPLE, 0)
}

func (s *Keywords_can_be_idContext) SLAVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLAVE, 0)
}

func (s *Keywords_can_be_idContext) SNAPSHOT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSNAPSHOT, 0)
}

func (s *Keywords_can_be_idContext) SOCKET() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOCKET, 0)
}

func (s *Keywords_can_be_idContext) SOME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOME, 0)
}

func (s *Keywords_can_be_idContext) SOUNDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDS, 0)
}

func (s *Keywords_can_be_idContext) SQL_BUFFER_RESULT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_BUFFER_RESULT, 0)
}

func (s *Keywords_can_be_idContext) SQL_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_CACHE, 0)
}

func (s *Keywords_can_be_idContext) SQL_NO_CACHE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_NO_CACHE, 0)
}

func (s *Keywords_can_be_idContext) START() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTART, 0)
}

func (s *Keywords_can_be_idContext) STARTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTS, 0)
}

func (s *Keywords_can_be_idContext) STATS_AUTO_RECALC() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_AUTO_RECALC, 0)
}

func (s *Keywords_can_be_idContext) STATS_PERSISTENT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_PERSISTENT, 0)
}

func (s *Keywords_can_be_idContext) STATS_SAMPLE_PAGES() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATS_SAMPLE_PAGES, 0)
}

func (s *Keywords_can_be_idContext) STATUS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTATUS, 0)
}

func (s *Keywords_can_be_idContext) STORAGE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTORAGE, 0)
}

func (s *Keywords_can_be_idContext) SUBJECT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBJECT, 0)
}

func (s *Keywords_can_be_idContext) SUBPARTITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITION, 0)
}

func (s *Keywords_can_be_idContext) SUBPARTITIONS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBPARTITIONS, 0)
}

func (s *Keywords_can_be_idContext) TABLESPACE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTABLESPACE, 0)
}

func (s *Keywords_can_be_idContext) TEMPORARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPORARY, 0)
}

func (s *Keywords_can_be_idContext) TEMPTABLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTEMPTABLE, 0)
}

func (s *Keywords_can_be_idContext) THAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTHAN, 0)
}

func (s *Keywords_can_be_idContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRANSACTION, 0)
}

func (s *Keywords_can_be_idContext) TRUNCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserTRUNCATE, 0)
}

func (s *Keywords_can_be_idContext) UNDEFINED() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDEFINED, 0)
}

func (s *Keywords_can_be_idContext) UNDOFILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDOFILE, 0)
}

func (s *Keywords_can_be_idContext) UNDO_BUFFER_SIZE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNDO_BUFFER_SIZE, 0)
}

func (s *Keywords_can_be_idContext) UNKNOWN() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNKNOWN, 0)
}

func (s *Keywords_can_be_idContext) UPGRADE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPGRADE, 0)
}

func (s *Keywords_can_be_idContext) USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUSER, 0)
}

func (s *Keywords_can_be_idContext) VALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALUE, 0)
}

func (s *Keywords_can_be_idContext) VARIABLES() antlr.TerminalNode {
	return s.GetToken(MySqlParserVARIABLES, 0)
}

func (s *Keywords_can_be_idContext) VIEW() antlr.TerminalNode {
	return s.GetToken(MySqlParserVIEW, 0)
}

func (s *Keywords_can_be_idContext) WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT, 0)
}

func (s *Keywords_can_be_idContext) WARNINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWARNINGS, 0)
}

func (s *Keywords_can_be_idContext) WORK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWORK, 0)
}

func (s *Keywords_can_be_idContext) WRAPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserWRAPPER, 0)
}

func (s *Keywords_can_be_idContext) X509() antlr.TerminalNode {
	return s.GetToken(MySqlParserX509, 0)
}

func (s *Keywords_can_be_idContext) XML() antlr.TerminalNode {
	return s.GetToken(MySqlParserXML, 0)
}

func (s *Keywords_can_be_idContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Keywords_can_be_idContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Keywords_can_be_idContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterKeywords_can_be_id(s)
	}
}

func (s *Keywords_can_be_idContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitKeywords_can_be_id(s)
	}
}

func (s *Keywords_can_be_idContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitKeywords_can_be_id(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Keywords_can_be_id() (localctx IKeywords_can_be_idContext) {
	localctx = NewKeywords_can_be_idContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 570, MySqlParserRULE_keywords_can_be_id)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5857)
	_la = p.GetTokenStream().LA(1)

	if !((((_la-246)&-(0x1f+1)) == 0 && ((1<<uint((_la-246)))&((1<<(MySqlParserACTION-246))|(1<<(MySqlParserAFTER-246))|(1<<(MySqlParserALGORITHM-246))|(1<<(MySqlParserANY-246))|(1<<(MySqlParserAT-246))|(1<<(MySqlParserAUTHORS-246))|(1<<(MySqlParserAUTOCOMMIT-246))|(1<<(MySqlParserAUTOEXTEND_SIZE-246))|(1<<(MySqlParserAUTO_INCREMENT-246))|(1<<(MySqlParserAVG_ROW_LENGTH-246))|(1<<(MySqlParserBEGIN-246))|(1<<(MySqlParserBINLOG-246))|(1<<(MySqlParserBIT-246))|(1<<(MySqlParserBTREE-246))|(1<<(MySqlParserCASCADED-246))|(1<<(MySqlParserCHAIN-246))|(1<<(MySqlParserCHECKSUM-246))|(1<<(MySqlParserCIPHER-246))|(1<<(MySqlParserCLIENT-246))|(1<<(MySqlParserCOALESCE-246))|(1<<(MySqlParserCODE-246))|(1<<(MySqlParserCOLUMNS-246))|(1<<(MySqlParserCOLUMN_FORMAT-246))|(1<<(MySqlParserCOMMENT-246))|(1<<(MySqlParserCOMMIT-246))|(1<<(MySqlParserCOMPACT-246)))) != 0) || (((_la-278)&-(0x1f+1)) == 0 && ((1<<uint((_la-278)))&((1<<(MySqlParserCOMPLETION-278))|(1<<(MySqlParserCOMPRESSED-278))|(1<<(MySqlParserCONCURRENT-278))|(1<<(MySqlParserCONNECTION-278))|(1<<(MySqlParserCONSISTENT-278))|(1<<(MySqlParserCONTAINS-278))|(1<<(MySqlParserCONTRIBUTORS-278))|(1<<(MySqlParserCOPY-278))|(1<<(MySqlParserDATA-278))|(1<<(MySqlParserDATAFILE-278))|(1<<(MySqlParserDEFINER-278))|(1<<(MySqlParserDELAY_KEY_WRITE-278))|(1<<(MySqlParserDIRECTORY-278))|(1<<(MySqlParserDISABLE-278))|(1<<(MySqlParserDISCARD-278))|(1<<(MySqlParserDISK-278))|(1<<(MySqlParserDO-278))|(1<<(MySqlParserDUMPFILE-278))|(1<<(MySqlParserDUPLICATE-278))|(1<<(MySqlParserDYNAMIC-278))|(1<<(MySqlParserENABLE-278))|(1<<(MySqlParserENDS-278))|(1<<(MySqlParserENGINE-278))|(1<<(MySqlParserENGINES-278)))) != 0) || (((_la-311)&-(0x1f+1)) == 0 && ((1<<uint((_la-311)))&((1<<(MySqlParserERRORS-311))|(1<<(MySqlParserESCAPE-311))|(1<<(MySqlParserEVEN-311))|(1<<(MySqlParserEVENT-311))|(1<<(MySqlParserEVENTS-311))|(1<<(MySqlParserEVERY-311))|(1<<(MySqlParserEXCHANGE-311))|(1<<(MySqlParserEXCLUSIVE-311))|(1<<(MySqlParserEXPIRE-311))|(1<<(MySqlParserEXTENT_SIZE-311))|(1<<(MySqlParserFIELDS-311))|(1<<(MySqlParserFIRST-311))|(1<<(MySqlParserFIXED-311))|(1<<(MySqlParserFULL-311))|(1<<(MySqlParserFUNCTION-311))|(1<<(MySqlParserGLOBAL-311))|(1<<(MySqlParserGRANTS-311))|(1<<(MySqlParserHASH-311))|(1<<(MySqlParserHOST-311)))) != 0) || (((_la-344)&-(0x1f+1)) == 0 && ((1<<uint((_la-344)))&((1<<(MySqlParserIDENTIFIED-344))|(1<<(MySqlParserIMPORT-344))|(1<<(MySqlParserINITIAL_SIZE-344))|(1<<(MySqlParserINPLACE-344))|(1<<(MySqlParserINSERT_METHOD-344))|(1<<(MySqlParserINVOKER-344))|(1<<(MySqlParserISOLATION-344))|(1<<(MySqlParserISSUER-344))|(1<<(MySqlParserKEY_BLOCK_SIZE-344))|(1<<(MySqlParserLANGUAGE-344))|(1<<(MySqlParserLAST-344))|(1<<(MySqlParserLESS-344))|(1<<(MySqlParserLEVEL-344))|(1<<(MySqlParserLIST-344))|(1<<(MySqlParserLOCAL-344))|(1<<(MySqlParserLOGFILE-344))|(1<<(MySqlParserLOGS-344))|(1<<(MySqlParserMASTER-344)))) != 0) || (((_la-391)&-(0x1f+1)) == 0 && ((1<<uint((_la-391)))&((1<<(MySqlParserMAX_CONNECTIONS_PER_HOUR-391))|(1<<(MySqlParserMAX_QUERIES_PER_HOUR-391))|(1<<(MySqlParserMAX_ROWS-391))|(1<<(MySqlParserMAX_SIZE-391))|(1<<(MySqlParserMAX_UPDATES_PER_HOUR-391))|(1<<(MySqlParserMAX_USER_CONNECTIONS-391))|(1<<(MySqlParserMERGE-391))|(1<<(MySqlParserMID-391))|(1<<(MySqlParserMIN_ROWS-391))|(1<<(MySqlParserMODIFY-391))|(1<<(MySqlParserMUTEX-391))|(1<<(MySqlParserMYSQL-391))|(1<<(MySqlParserNAME-391))|(1<<(MySqlParserNAMES-391))|(1<<(MySqlParserNCHAR-391))|(1<<(MySqlParserNO-391))|(1<<(MySqlParserNODEGROUP-391))|(1<<(MySqlParserNONE-391))|(1<<(MySqlParserOFFLINE-391))|(1<<(MySqlParserOFFSET-391))|(1<<(MySqlParserOJ-391))|(1<<(MySqlParserOLD_PASSWORD-391))|(1<<(MySqlParserONLINE-391))|(1<<(MySqlParserONLY-391)))) != 0) || (((_la-423)&-(0x1f+1)) == 0 && ((1<<uint((_la-423)))&((1<<(MySqlParserOPTIONS-423))|(1<<(MySqlParserOWNER-423))|(1<<(MySqlParserPACK_KEYS-423))|(1<<(MySqlParserPARSER-423))|(1<<(MySqlParserPARTIAL-423))|(1<<(MySqlParserPARTITIONING-423))|(1<<(MySqlParserPARTITIONS-423))|(1<<(MySqlParserPASSWORD-423))|(1<<(MySqlParserPLUGINS-423))|(1<<(MySqlParserPORT-423))|(1<<(MySqlParserPRESERVE-423))|(1<<(MySqlParserPROCESSLIST-423))|(1<<(MySqlParserPROFILE-423))|(1<<(MySqlParserPROFILES-423))|(1<<(MySqlParserPROXY-423))|(1<<(MySqlParserQUERY-423))|(1<<(MySqlParserQUICK-423))|(1<<(MySqlParserREBUILD-423))|(1<<(MySqlParserREDO_BUFFER_SIZE-423))|(1<<(MySqlParserREDUNDANT-423))|(1<<(MySqlParserRELAYLOG-423)))) != 0) || (((_la-455)&-(0x1f+1)) == 0 && ((1<<uint((_la-455)))&((1<<(MySqlParserREMOVE-455))|(1<<(MySqlParserREORGANIZE-455))|(1<<(MySqlParserREPAIR-455))|(1<<(MySqlParserREPLICATION-455))|(1<<(MySqlParserRETURNS-455))|(1<<(MySqlParserROLLBACK-455))|(1<<(MySqlParserROLLUP-455))|(1<<(MySqlParserROW-455))|(1<<(MySqlParserROWS-455))|(1<<(MySqlParserROW_FORMAT-455))|(1<<(MySqlParserSAVEPOINT-455))|(1<<(MySqlParserSCHEDULE-455))|(1<<(MySqlParserSECURITY-455))|(1<<(MySqlParserSERVER-455))|(1<<(MySqlParserSESSION-455))|(1<<(MySqlParserSHARE-455))|(1<<(MySqlParserSHARED-455))|(1<<(MySqlParserSIGNED-455))|(1<<(MySqlParserSIMPLE-455))|(1<<(MySqlParserSLAVE-455))|(1<<(MySqlParserSNAPSHOT-455)))) != 0) || (((_la-487)&-(0x1f+1)) == 0 && ((1<<uint((_la-487)))&((1<<(MySqlParserSOCKET-487))|(1<<(MySqlParserSOME-487))|(1<<(MySqlParserSOUNDS-487))|(1<<(MySqlParserSQL_BUFFER_RESULT-487))|(1<<(MySqlParserSQL_CACHE-487))|(1<<(MySqlParserSQL_NO_CACHE-487))|(1<<(MySqlParserSTART-487))|(1<<(MySqlParserSTARTS-487))|(1<<(MySqlParserSTATS_AUTO_RECALC-487))|(1<<(MySqlParserSTATS_PERSISTENT-487))|(1<<(MySqlParserSTATS_SAMPLE_PAGES-487))|(1<<(MySqlParserSTATUS-487))|(1<<(MySqlParserSTORAGE-487))|(1<<(MySqlParserSUBJECT-487))|(1<<(MySqlParserSUBPARTITION-487))|(1<<(MySqlParserSUBPARTITIONS-487))|(1<<(MySqlParserTABLESPACE-487))|(1<<(MySqlParserTEMPORARY-487))|(1<<(MySqlParserTEMPTABLE-487))|(1<<(MySqlParserTHAN-487)))) != 0) || (((_la-519)&-(0x1f+1)) == 0 && ((1<<uint((_la-519)))&((1<<(MySqlParserTRANSACTION-519))|(1<<(MySqlParserTRUNCATE-519))|(1<<(MySqlParserUNDEFINED-519))|(1<<(MySqlParserUNDOFILE-519))|(1<<(MySqlParserUNDO_BUFFER_SIZE-519))|(1<<(MySqlParserUNKNOWN-519))|(1<<(MySqlParserUPGRADE-519))|(1<<(MySqlParserUSER-519))|(1<<(MySqlParserVALUE-519))|(1<<(MySqlParserVARIABLES-519))|(1<<(MySqlParserVIEW-519))|(1<<(MySqlParserWAIT-519))|(1<<(MySqlParserWARNINGS-519))|(1<<(MySqlParserWORK-519))|(1<<(MySqlParserWRAPPER-519))|(1<<(MySqlParserX509-519))|(1<<(MySqlParserXML-519)))) != 0) || _la == MySqlParserMEMORY) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFunction_name_baseContext is an interface to support dynamic dispatch.
type IFunction_name_baseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunction_name_baseContext differentiates from other interfaces.
	IsFunction_name_baseContext()
}

type Function_name_baseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunction_name_baseContext() *Function_name_baseContext {
	var p = new(Function_name_baseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MySqlParserRULE_function_name_base
	return p
}

func (*Function_name_baseContext) IsFunction_name_baseContext() {}

func NewFunction_name_baseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Function_name_baseContext {
	var p = new(Function_name_baseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MySqlParserRULE_function_name_base

	return p
}

func (s *Function_name_baseContext) GetParser() antlr.Parser { return s.parser }

func (s *Function_name_baseContext) ABS() antlr.TerminalNode {
	return s.GetToken(MySqlParserABS, 0)
}

func (s *Function_name_baseContext) ACOS() antlr.TerminalNode {
	return s.GetToken(MySqlParserACOS, 0)
}

func (s *Function_name_baseContext) ADDDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDDATE, 0)
}

func (s *Function_name_baseContext) ADDTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserADDTIME, 0)
}

func (s *Function_name_baseContext) AES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_DECRYPT, 0)
}

func (s *Function_name_baseContext) AES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserAES_ENCRYPT, 0)
}

func (s *Function_name_baseContext) AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserAREA, 0)
}

func (s *Function_name_baseContext) ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASBINARY, 0)
}

func (s *Function_name_baseContext) ASIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASIN, 0)
}

func (s *Function_name_baseContext) ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASTEXT, 0)
}

func (s *Function_name_baseContext) ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKB, 0)
}

func (s *Function_name_baseContext) ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASWKT, 0)
}

func (s *Function_name_baseContext) ASYMMETRIC_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DECRYPT, 0)
}

func (s *Function_name_baseContext) ASYMMETRIC_DERIVE() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_DERIVE, 0)
}

func (s *Function_name_baseContext) ASYMMETRIC_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_ENCRYPT, 0)
}

func (s *Function_name_baseContext) ASYMMETRIC_SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_SIGN, 0)
}

func (s *Function_name_baseContext) ASYMMETRIC_VERIFY() antlr.TerminalNode {
	return s.GetToken(MySqlParserASYMMETRIC_VERIFY, 0)
}

func (s *Function_name_baseContext) ATAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN, 0)
}

func (s *Function_name_baseContext) ATAN2() antlr.TerminalNode {
	return s.GetToken(MySqlParserATAN2, 0)
}

func (s *Function_name_baseContext) BENCHMARK() antlr.TerminalNode {
	return s.GetToken(MySqlParserBENCHMARK, 0)
}

func (s *Function_name_baseContext) BIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIN, 0)
}

func (s *Function_name_baseContext) BIT_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_COUNT, 0)
}

func (s *Function_name_baseContext) BIT_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserBIT_LENGTH, 0)
}

func (s *Function_name_baseContext) BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserBUFFER, 0)
}

func (s *Function_name_baseContext) CEIL() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEIL, 0)
}

func (s *Function_name_baseContext) CEILING() antlr.TerminalNode {
	return s.GetToken(MySqlParserCEILING, 0)
}

func (s *Function_name_baseContext) CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCENTROID, 0)
}

func (s *Function_name_baseContext) CHARACTER_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARACTER_LENGTH, 0)
}

func (s *Function_name_baseContext) CHARSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHARSET, 0)
}

func (s *Function_name_baseContext) CHAR_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserCHAR_LENGTH, 0)
}

func (s *Function_name_baseContext) COERCIBILITY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOERCIBILITY, 0)
}

func (s *Function_name_baseContext) COLLATION() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOLLATION, 0)
}

func (s *Function_name_baseContext) COMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOMPRESS, 0)
}

func (s *Function_name_baseContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT, 0)
}

func (s *Function_name_baseContext) CONCAT_WS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONCAT_WS, 0)
}

func (s *Function_name_baseContext) CONNECTION_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONNECTION_ID, 0)
}

func (s *Function_name_baseContext) CONV() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONV, 0)
}

func (s *Function_name_baseContext) CONVERT_TZ() antlr.TerminalNode {
	return s.GetToken(MySqlParserCONVERT_TZ, 0)
}

func (s *Function_name_baseContext) COS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOS, 0)
}

func (s *Function_name_baseContext) COT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOT, 0)
}

func (s *Function_name_baseContext) COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserCOUNT, 0)
}

func (s *Function_name_baseContext) CRC32() antlr.TerminalNode {
	return s.GetToken(MySqlParserCRC32, 0)
}

func (s *Function_name_baseContext) CREATE_ASYMMETRIC_PRIV_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY, 0)
}

func (s *Function_name_baseContext) CREATE_ASYMMETRIC_PUB_KEY() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_ASYMMETRIC_PUB_KEY, 0)
}

func (s *Function_name_baseContext) CREATE_DH_PARAMETERS() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DH_PARAMETERS, 0)
}

func (s *Function_name_baseContext) CREATE_DIGEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserCREATE_DIGEST, 0)
}

func (s *Function_name_baseContext) CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserCROSSES, 0)
}

func (s *Function_name_baseContext) DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE, 0)
}

func (s *Function_name_baseContext) DATEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATEDIFF, 0)
}

func (s *Function_name_baseContext) DATE_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDATE_FORMAT, 0)
}

func (s *Function_name_baseContext) DAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAY, 0)
}

func (s *Function_name_baseContext) DAYNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYNAME, 0)
}

func (s *Function_name_baseContext) DAYOFMONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFMONTH, 0)
}

func (s *Function_name_baseContext) DAYOFWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFWEEK, 0)
}

func (s *Function_name_baseContext) DAYOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserDAYOFYEAR, 0)
}

func (s *Function_name_baseContext) DECODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserDECODE, 0)
}

func (s *Function_name_baseContext) DEGREES() antlr.TerminalNode {
	return s.GetToken(MySqlParserDEGREES, 0)
}

func (s *Function_name_baseContext) DES_DECRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_DECRYPT, 0)
}

func (s *Function_name_baseContext) DES_ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDES_ENCRYPT, 0)
}

func (s *Function_name_baseContext) DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserDIMENSION, 0)
}

func (s *Function_name_baseContext) DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserDISJOINT, 0)
}

func (s *Function_name_baseContext) ELT() antlr.TerminalNode {
	return s.GetToken(MySqlParserELT, 0)
}

func (s *Function_name_baseContext) ENCODE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCODE, 0)
}

func (s *Function_name_baseContext) ENCRYPT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENCRYPT, 0)
}

func (s *Function_name_baseContext) ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserENDPOINT, 0)
}

func (s *Function_name_baseContext) ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserENVELOPE, 0)
}

func (s *Function_name_baseContext) EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserEQUALS, 0)
}

func (s *Function_name_baseContext) EXP() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXP, 0)
}

func (s *Function_name_baseContext) EXPORT_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXPORT_SET, 0)
}

func (s *Function_name_baseContext) EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTERIORRING, 0)
}

func (s *Function_name_baseContext) EXTRACTVALUE() antlr.TerminalNode {
	return s.GetToken(MySqlParserEXTRACTVALUE, 0)
}

func (s *Function_name_baseContext) FIELD() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIELD, 0)
}

func (s *Function_name_baseContext) FIND_IN_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserFIND_IN_SET, 0)
}

func (s *Function_name_baseContext) FLOOR() antlr.TerminalNode {
	return s.GetToken(MySqlParserFLOOR, 0)
}

func (s *Function_name_baseContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserFORMAT, 0)
}

func (s *Function_name_baseContext) FOUND_ROWS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFOUND_ROWS, 0)
}

func (s *Function_name_baseContext) FROM_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_BASE64, 0)
}

func (s *Function_name_baseContext) FROM_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_DAYS, 0)
}

func (s *Function_name_baseContext) FROM_UNIXTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserFROM_UNIXTIME, 0)
}

func (s *Function_name_baseContext) GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMTEXT, 0)
}

func (s *Function_name_baseContext) GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMCOLLFROMWKB, 0)
}

func (s *Function_name_baseContext) GEOMETRYCOLLECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTION, 0)
}

func (s *Function_name_baseContext) GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *Function_name_baseContext) GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *Function_name_baseContext) GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMTEXT, 0)
}

func (s *Function_name_baseContext) GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYFROMWKB, 0)
}

func (s *Function_name_baseContext) GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYN, 0)
}

func (s *Function_name_baseContext) GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMETRYTYPE, 0)
}

func (s *Function_name_baseContext) GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMTEXT, 0)
}

func (s *Function_name_baseContext) GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserGEOMFROMWKB, 0)
}

func (s *Function_name_baseContext) GET_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_FORMAT, 0)
}

func (s *Function_name_baseContext) GET_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserGET_LOCK, 0)
}

func (s *Function_name_baseContext) GLENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserGLENGTH, 0)
}

func (s *Function_name_baseContext) GREATEST() antlr.TerminalNode {
	return s.GetToken(MySqlParserGREATEST, 0)
}

func (s *Function_name_baseContext) GTID_SUBSET() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBSET, 0)
}

func (s *Function_name_baseContext) GTID_SUBTRACT() antlr.TerminalNode {
	return s.GetToken(MySqlParserGTID_SUBTRACT, 0)
}

func (s *Function_name_baseContext) HEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserHEX, 0)
}

func (s *Function_name_baseContext) HOUR() antlr.TerminalNode {
	return s.GetToken(MySqlParserHOUR, 0)
}

func (s *Function_name_baseContext) IFNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserIFNULL, 0)
}

func (s *Function_name_baseContext) INET6_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_ATON, 0)
}

func (s *Function_name_baseContext) INET6_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET6_NTOA, 0)
}

func (s *Function_name_baseContext) INET_ATON() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_ATON, 0)
}

func (s *Function_name_baseContext) INET_NTOA() antlr.TerminalNode {
	return s.GetToken(MySqlParserINET_NTOA, 0)
}

func (s *Function_name_baseContext) INSTR() antlr.TerminalNode {
	return s.GetToken(MySqlParserINSTR, 0)
}

func (s *Function_name_baseContext) INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERIORRINGN, 0)
}

func (s *Function_name_baseContext) INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserINTERSECTS, 0)
}

func (s *Function_name_baseContext) ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserISCLOSED, 0)
}

func (s *Function_name_baseContext) ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserISEMPTY, 0)
}

func (s *Function_name_baseContext) ISNULL() antlr.TerminalNode {
	return s.GetToken(MySqlParserISNULL, 0)
}

func (s *Function_name_baseContext) ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserISSIMPLE, 0)
}

func (s *Function_name_baseContext) IS_FREE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_FREE_LOCK, 0)
}

func (s *Function_name_baseContext) IS_IPV4() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4, 0)
}

func (s *Function_name_baseContext) IS_IPV4_COMPAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_COMPAT, 0)
}

func (s *Function_name_baseContext) IS_IPV4_MAPPED() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV4_MAPPED, 0)
}

func (s *Function_name_baseContext) IS_IPV6() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_IPV6, 0)
}

func (s *Function_name_baseContext) IS_USED_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserIS_USED_LOCK, 0)
}

func (s *Function_name_baseContext) LAST_INSERT_ID() antlr.TerminalNode {
	return s.GetToken(MySqlParserLAST_INSERT_ID, 0)
}

func (s *Function_name_baseContext) LCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLCASE, 0)
}

func (s *Function_name_baseContext) LEAST() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEAST, 0)
}

func (s *Function_name_baseContext) LEFT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLEFT, 0)
}

func (s *Function_name_baseContext) LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserLENGTH, 0)
}

func (s *Function_name_baseContext) LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMTEXT, 0)
}

func (s *Function_name_baseContext) LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINEFROMWKB, 0)
}

func (s *Function_name_baseContext) LINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRING, 0)
}

func (s *Function_name_baseContext) LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMTEXT, 0)
}

func (s *Function_name_baseContext) LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserLINESTRINGFROMWKB, 0)
}

func (s *Function_name_baseContext) LN() antlr.TerminalNode {
	return s.GetToken(MySqlParserLN, 0)
}

func (s *Function_name_baseContext) LOAD_FILE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOAD_FILE, 0)
}

func (s *Function_name_baseContext) LOCATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOCATE, 0)
}

func (s *Function_name_baseContext) LOG() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG, 0)
}

func (s *Function_name_baseContext) LOG10() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG10, 0)
}

func (s *Function_name_baseContext) LOG2() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOG2, 0)
}

func (s *Function_name_baseContext) LOWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserLOWER, 0)
}

func (s *Function_name_baseContext) LPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserLPAD, 0)
}

func (s *Function_name_baseContext) LTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserLTRIM, 0)
}

func (s *Function_name_baseContext) MAKEDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKEDATE, 0)
}

func (s *Function_name_baseContext) MAKETIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKETIME, 0)
}

func (s *Function_name_baseContext) MAKE_SET() antlr.TerminalNode {
	return s.GetToken(MySqlParserMAKE_SET, 0)
}

func (s *Function_name_baseContext) MASTER_POS_WAIT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMASTER_POS_WAIT, 0)
}

func (s *Function_name_baseContext) MBRCONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRCONTAINS, 0)
}

func (s *Function_name_baseContext) MBRDISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRDISJOINT, 0)
}

func (s *Function_name_baseContext) MBREQUAL() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBREQUAL, 0)
}

func (s *Function_name_baseContext) MBRINTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRINTERSECTS, 0)
}

func (s *Function_name_baseContext) MBROVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBROVERLAPS, 0)
}

func (s *Function_name_baseContext) MBRTOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRTOUCHES, 0)
}

func (s *Function_name_baseContext) MBRWITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserMBRWITHIN, 0)
}

func (s *Function_name_baseContext) MD5() antlr.TerminalNode {
	return s.GetToken(MySqlParserMD5, 0)
}

func (s *Function_name_baseContext) MICROSECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserMICROSECOND, 0)
}

func (s *Function_name_baseContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserMINUTE, 0)
}

func (s *Function_name_baseContext) MLINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMTEXT, 0)
}

func (s *Function_name_baseContext) MLINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMLINEFROMWKB, 0)
}

func (s *Function_name_baseContext) MONTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTH, 0)
}

func (s *Function_name_baseContext) MONTHNAME() antlr.TerminalNode {
	return s.GetToken(MySqlParserMONTHNAME, 0)
}

func (s *Function_name_baseContext) MPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMTEXT, 0)
}

func (s *Function_name_baseContext) MPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOINTFROMWKB, 0)
}

func (s *Function_name_baseContext) MPOLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMTEXT, 0)
}

func (s *Function_name_baseContext) MPOLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMPOLYFROMWKB, 0)
}

func (s *Function_name_baseContext) MULTILINESTRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRING, 0)
}

func (s *Function_name_baseContext) MULTILINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMTEXT, 0)
}

func (s *Function_name_baseContext) MULTILINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTILINESTRINGFROMWKB, 0)
}

func (s *Function_name_baseContext) MULTIPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINT, 0)
}

func (s *Function_name_baseContext) MULTIPOINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMTEXT, 0)
}

func (s *Function_name_baseContext) MULTIPOINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOINTFROMWKB, 0)
}

func (s *Function_name_baseContext) MULTIPOLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGON, 0)
}

func (s *Function_name_baseContext) MULTIPOLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMTEXT, 0)
}

func (s *Function_name_baseContext) MULTIPOLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserMULTIPOLYGONFROMWKB, 0)
}

func (s *Function_name_baseContext) NAME_CONST() antlr.TerminalNode {
	return s.GetToken(MySqlParserNAME_CONST, 0)
}

func (s *Function_name_baseContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(MySqlParserNULLIF, 0)
}

func (s *Function_name_baseContext) NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMGEOMETRIES, 0)
}

func (s *Function_name_baseContext) NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMINTERIORRINGS, 0)
}

func (s *Function_name_baseContext) NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserNUMPOINTS, 0)
}

func (s *Function_name_baseContext) OCT() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCT, 0)
}

func (s *Function_name_baseContext) OCTET_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserOCTET_LENGTH, 0)
}

func (s *Function_name_baseContext) ORD() antlr.TerminalNode {
	return s.GetToken(MySqlParserORD, 0)
}

func (s *Function_name_baseContext) OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserOVERLAPS, 0)
}

func (s *Function_name_baseContext) PERIOD_ADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_ADD, 0)
}

func (s *Function_name_baseContext) PERIOD_DIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserPERIOD_DIFF, 0)
}

func (s *Function_name_baseContext) PI() antlr.TerminalNode {
	return s.GetToken(MySqlParserPI, 0)
}

func (s *Function_name_baseContext) POINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINT, 0)
}

func (s *Function_name_baseContext) POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMTEXT, 0)
}

func (s *Function_name_baseContext) POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTFROMWKB, 0)
}

func (s *Function_name_baseContext) POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOINTN, 0)
}

func (s *Function_name_baseContext) POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMTEXT, 0)
}

func (s *Function_name_baseContext) POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYFROMWKB, 0)
}

func (s *Function_name_baseContext) POLYGON() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGON, 0)
}

func (s *Function_name_baseContext) POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMTEXT, 0)
}

func (s *Function_name_baseContext) POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOLYGONFROMWKB, 0)
}

func (s *Function_name_baseContext) POSITION() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOSITION, 0)
}

func (s *Function_name_baseContext) POW() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOW, 0)
}

func (s *Function_name_baseContext) POWER() antlr.TerminalNode {
	return s.GetToken(MySqlParserPOWER, 0)
}

func (s *Function_name_baseContext) QUARTER() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUARTER, 0)
}

func (s *Function_name_baseContext) QUOTE() antlr.TerminalNode {
	return s.GetToken(MySqlParserQUOTE, 0)
}

func (s *Function_name_baseContext) RADIANS() antlr.TerminalNode {
	return s.GetToken(MySqlParserRADIANS, 0)
}

func (s *Function_name_baseContext) RAND() antlr.TerminalNode {
	return s.GetToken(MySqlParserRAND, 0)
}

func (s *Function_name_baseContext) RANDOM_BYTES() antlr.TerminalNode {
	return s.GetToken(MySqlParserRANDOM_BYTES, 0)
}

func (s *Function_name_baseContext) RELEASE_LOCK() antlr.TerminalNode {
	return s.GetToken(MySqlParserRELEASE_LOCK, 0)
}

func (s *Function_name_baseContext) REVERSE() antlr.TerminalNode {
	return s.GetToken(MySqlParserREVERSE, 0)
}

func (s *Function_name_baseContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(MySqlParserRIGHT, 0)
}

func (s *Function_name_baseContext) ROUND() antlr.TerminalNode {
	return s.GetToken(MySqlParserROUND, 0)
}

func (s *Function_name_baseContext) ROW_COUNT() antlr.TerminalNode {
	return s.GetToken(MySqlParserROW_COUNT, 0)
}

func (s *Function_name_baseContext) RPAD() antlr.TerminalNode {
	return s.GetToken(MySqlParserRPAD, 0)
}

func (s *Function_name_baseContext) RTRIM() antlr.TerminalNode {
	return s.GetToken(MySqlParserRTRIM, 0)
}

func (s *Function_name_baseContext) SECOND() antlr.TerminalNode {
	return s.GetToken(MySqlParserSECOND, 0)
}

func (s *Function_name_baseContext) SEC_TO_TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSEC_TO_TIME, 0)
}

func (s *Function_name_baseContext) SESSION_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSESSION_USER, 0)
}

func (s *Function_name_baseContext) SHA() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA, 0)
}

func (s *Function_name_baseContext) SHA1() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA1, 0)
}

func (s *Function_name_baseContext) SHA2() antlr.TerminalNode {
	return s.GetToken(MySqlParserSHA2, 0)
}

func (s *Function_name_baseContext) SIGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIGN, 0)
}

func (s *Function_name_baseContext) SIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserSIN, 0)
}

func (s *Function_name_baseContext) SLEEP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSLEEP, 0)
}

func (s *Function_name_baseContext) SOUNDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSOUNDEX, 0)
}

func (s *Function_name_baseContext) SQL_THREAD_WAIT_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS, 0)
}

func (s *Function_name_baseContext) SQRT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSQRT, 0)
}

func (s *Function_name_baseContext) SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserSRID, 0)
}

func (s *Function_name_baseContext) STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTARTPOINT, 0)
}

func (s *Function_name_baseContext) STRCMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTRCMP, 0)
}

func (s *Function_name_baseContext) STR_TO_DATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSTR_TO_DATE, 0)
}

func (s *Function_name_baseContext) ST_AREA() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_AREA, 0)
}

func (s *Function_name_baseContext) ST_ASBINARY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASBINARY, 0)
}

func (s *Function_name_baseContext) ST_ASTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASTEXT, 0)
}

func (s *Function_name_baseContext) ST_ASWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKB, 0)
}

func (s *Function_name_baseContext) ST_ASWKT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ASWKT, 0)
}

func (s *Function_name_baseContext) ST_BUFFER() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_BUFFER, 0)
}

func (s *Function_name_baseContext) ST_CENTROID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CENTROID, 0)
}

func (s *Function_name_baseContext) ST_CONTAINS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CONTAINS, 0)
}

func (s *Function_name_baseContext) ST_CROSSES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_CROSSES, 0)
}

func (s *Function_name_baseContext) ST_DIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIFFERENCE, 0)
}

func (s *Function_name_baseContext) ST_DIMENSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DIMENSION, 0)
}

func (s *Function_name_baseContext) ST_DISJOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISJOINT, 0)
}

func (s *Function_name_baseContext) ST_DISTANCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_DISTANCE, 0)
}

func (s *Function_name_baseContext) ST_ENDPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENDPOINT, 0)
}

func (s *Function_name_baseContext) ST_ENVELOPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ENVELOPE, 0)
}

func (s *Function_name_baseContext) ST_EQUALS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EQUALS, 0)
}

func (s *Function_name_baseContext) ST_EXTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_EXTERIORRING, 0)
}

func (s *Function_name_baseContext) ST_GEOMCOLLFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_GEOMCOLLFROMTXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMTXT, 0)
}

func (s *Function_name_baseContext) ST_GEOMCOLLFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMCOLLFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYCOLLECTIONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYCOLLECTIONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYN, 0)
}

func (s *Function_name_baseContext) ST_GEOMETRYTYPE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMETRYTYPE, 0)
}

func (s *Function_name_baseContext) ST_GEOMFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_GEOMFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_GEOMFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_INTERIORRINGN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERIORRINGN, 0)
}

func (s *Function_name_baseContext) ST_INTERSECTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTION, 0)
}

func (s *Function_name_baseContext) ST_INTERSECTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_INTERSECTS, 0)
}

func (s *Function_name_baseContext) ST_ISCLOSED() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISCLOSED, 0)
}

func (s *Function_name_baseContext) ST_ISEMPTY() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISEMPTY, 0)
}

func (s *Function_name_baseContext) ST_ISSIMPLE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_ISSIMPLE, 0)
}

func (s *Function_name_baseContext) ST_LINEFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_LINEFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINEFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_LINESTRINGFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_LINESTRINGFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_LINESTRINGFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_NUMGEOMETRIES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMGEOMETRIES, 0)
}

func (s *Function_name_baseContext) ST_NUMINTERIORRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRING, 0)
}

func (s *Function_name_baseContext) ST_NUMINTERIORRINGS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMINTERIORRINGS, 0)
}

func (s *Function_name_baseContext) ST_NUMPOINTS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_NUMPOINTS, 0)
}

func (s *Function_name_baseContext) ST_OVERLAPS() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_OVERLAPS, 0)
}

func (s *Function_name_baseContext) ST_POINTFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_POINTFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_POINTN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POINTN, 0)
}

func (s *Function_name_baseContext) ST_POLYFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_POLYFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_POLYGONFROMTEXT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMTEXT, 0)
}

func (s *Function_name_baseContext) ST_POLYGONFROMWKB() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_POLYGONFROMWKB, 0)
}

func (s *Function_name_baseContext) ST_SRID() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SRID, 0)
}

func (s *Function_name_baseContext) ST_STARTPOINT() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_STARTPOINT, 0)
}

func (s *Function_name_baseContext) ST_SYMDIFFERENCE() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_SYMDIFFERENCE, 0)
}

func (s *Function_name_baseContext) ST_TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_TOUCHES, 0)
}

func (s *Function_name_baseContext) ST_UNION() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_UNION, 0)
}

func (s *Function_name_baseContext) ST_WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_WITHIN, 0)
}

func (s *Function_name_baseContext) ST_X() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_X, 0)
}

func (s *Function_name_baseContext) ST_Y() antlr.TerminalNode {
	return s.GetToken(MySqlParserST_Y, 0)
}

func (s *Function_name_baseContext) SUBDATE() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBDATE, 0)
}

func (s *Function_name_baseContext) SUBSTRING_INDEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBSTRING_INDEX, 0)
}

func (s *Function_name_baseContext) SUBTIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserSUBTIME, 0)
}

func (s *Function_name_baseContext) SYSTEM_USER() antlr.TerminalNode {
	return s.GetToken(MySqlParserSYSTEM_USER, 0)
}

func (s *Function_name_baseContext) TAN() antlr.TerminalNode {
	return s.GetToken(MySqlParserTAN, 0)
}

func (s *Function_name_baseContext) TIME() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME, 0)
}

func (s *Function_name_baseContext) TIMEDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMEDIFF, 0)
}

func (s *Function_name_baseContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMP, 0)
}

func (s *Function_name_baseContext) TIMESTAMPADD() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPADD, 0)
}

func (s *Function_name_baseContext) TIMESTAMPDIFF() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIMESTAMPDIFF, 0)
}

func (s *Function_name_baseContext) TIME_FORMAT() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_FORMAT, 0)
}

func (s *Function_name_baseContext) TIME_TO_SEC() antlr.TerminalNode {
	return s.GetToken(MySqlParserTIME_TO_SEC, 0)
}

func (s *Function_name_baseContext) TOUCHES() antlr.TerminalNode {
	return s.GetToken(MySqlParserTOUCHES, 0)
}

func (s *Function_name_baseContext) TO_BASE64() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_BASE64, 0)
}

func (s *Function_name_baseContext) TO_DAYS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_DAYS, 0)
}

func (s *Function_name_baseContext) TO_SECONDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserTO_SECONDS, 0)
}

func (s *Function_name_baseContext) UCASE() antlr.TerminalNode {
	return s.GetToken(MySqlParserUCASE, 0)
}

func (s *Function_name_baseContext) UNCOMPRESS() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESS, 0)
}

func (s *Function_name_baseContext) UNCOMPRESSED_LENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNCOMPRESSED_LENGTH, 0)
}

func (s *Function_name_baseContext) UNHEX() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNHEX, 0)
}

func (s *Function_name_baseContext) UNIX_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(MySqlParserUNIX_TIMESTAMP, 0)
}

func (s *Function_name_baseContext) UPDATEXML() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPDATEXML, 0)
}

func (s *Function_name_baseContext) UPPER() antlr.TerminalNode {
	return s.GetToken(MySqlParserUPPER, 0)
}

func (s *Function_name_baseContext) UUID() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID, 0)
}

func (s *Function_name_baseContext) UUID_SHORT() antlr.TerminalNode {
	return s.GetToken(MySqlParserUUID_SHORT, 0)
}

func (s *Function_name_baseContext) VALIDATE_PASSWORD_STRENGTH() antlr.TerminalNode {
	return s.GetToken(MySqlParserVALIDATE_PASSWORD_STRENGTH, 0)
}

func (s *Function_name_baseContext) VERSION() antlr.TerminalNode {
	return s.GetToken(MySqlParserVERSION, 0)
}

func (s *Function_name_baseContext) WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() antlr.TerminalNode {
	return s.GetToken(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)
}

func (s *Function_name_baseContext) WEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEK, 0)
}

func (s *Function_name_baseContext) WEEKDAY() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKDAY, 0)
}

func (s *Function_name_baseContext) WEEKOFYEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEEKOFYEAR, 0)
}

func (s *Function_name_baseContext) WEIGHT_STRING() antlr.TerminalNode {
	return s.GetToken(MySqlParserWEIGHT_STRING, 0)
}

func (s *Function_name_baseContext) WITHIN() antlr.TerminalNode {
	return s.GetToken(MySqlParserWITHIN, 0)
}

func (s *Function_name_baseContext) YEAR() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEAR, 0)
}

func (s *Function_name_baseContext) YEARWEEK() antlr.TerminalNode {
	return s.GetToken(MySqlParserYEARWEEK, 0)
}

func (s *Function_name_baseContext) Y_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserY_FUNCTION, 0)
}

func (s *Function_name_baseContext) X_FUNCTION() antlr.TerminalNode {
	return s.GetToken(MySqlParserX_FUNCTION, 0)
}

func (s *Function_name_baseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Function_name_baseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Function_name_baseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.EnterFunction_name_base(s)
	}
}

func (s *Function_name_baseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MySqlParserListener); ok {
		listenerT.ExitFunction_name_base(s)
	}
}

func (s *Function_name_baseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MySqlParserVisitor:
		return t.VisitFunction_name_base(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MySqlParser) Function_name_base() (localctx IFunction_name_baseContext) {
	localctx = NewFunction_name_baseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 572, MySqlParserRULE_function_name_base)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(5859)
	_la = p.GetTokenStream().LA(1)

	if !(_la == MySqlParserLEFT || _la == MySqlParserRIGHT || (((_la-181)&-(0x1f+1)) == 0 && ((1<<uint((_la-181)))&((1<<(MySqlParserDATE-181))|(1<<(MySqlParserTIME-181))|(1<<(MySqlParserTIMESTAMP-181))|(1<<(MySqlParserYEAR-181)))) != 0) || _la == MySqlParserCOUNT || _la == MySqlParserPOSITION || (((_la-549)&-(0x1f+1)) == 0 && ((1<<uint((_la-549)))&((1<<(MySqlParserQUARTER-549))|(1<<(MySqlParserMONTH-549))|(1<<(MySqlParserDAY-549))|(1<<(MySqlParserHOUR-549))|(1<<(MySqlParserMINUTE-549))|(1<<(MySqlParserWEEK-549))|(1<<(MySqlParserSECOND-549))|(1<<(MySqlParserMICROSECOND-549)))) != 0) || (((_la-621)&-(0x1f+1)) == 0 && ((1<<uint((_la-621)))&((1<<(MySqlParserGEOMETRYCOLLECTION-621))|(1<<(MySqlParserLINESTRING-621))|(1<<(MySqlParserMULTILINESTRING-621))|(1<<(MySqlParserMULTIPOINT-621))|(1<<(MySqlParserMULTIPOLYGON-621))|(1<<(MySqlParserPOINT-621))|(1<<(MySqlParserPOLYGON-621))|(1<<(MySqlParserABS-621))|(1<<(MySqlParserACOS-621))|(1<<(MySqlParserADDDATE-621))|(1<<(MySqlParserADDTIME-621))|(1<<(MySqlParserAES_DECRYPT-621))|(1<<(MySqlParserAES_ENCRYPT-621))|(1<<(MySqlParserAREA-621))|(1<<(MySqlParserASBINARY-621))|(1<<(MySqlParserASIN-621))|(1<<(MySqlParserASTEXT-621))|(1<<(MySqlParserASWKB-621))|(1<<(MySqlParserASWKT-621))|(1<<(MySqlParserASYMMETRIC_DECRYPT-621))|(1<<(MySqlParserASYMMETRIC_DERIVE-621))|(1<<(MySqlParserASYMMETRIC_ENCRYPT-621))|(1<<(MySqlParserASYMMETRIC_SIGN-621))|(1<<(MySqlParserASYMMETRIC_VERIFY-621))|(1<<(MySqlParserATAN-621))|(1<<(MySqlParserATAN2-621))|(1<<(MySqlParserBENCHMARK-621))|(1<<(MySqlParserBIN-621))|(1<<(MySqlParserBIT_COUNT-621))|(1<<(MySqlParserBIT_LENGTH-621))|(1<<(MySqlParserBUFFER-621))|(1<<(MySqlParserCEIL-621)))) != 0) || (((_la-653)&-(0x1f+1)) == 0 && ((1<<uint((_la-653)))&((1<<(MySqlParserCEILING-653))|(1<<(MySqlParserCENTROID-653))|(1<<(MySqlParserCHARACTER_LENGTH-653))|(1<<(MySqlParserCHARSET-653))|(1<<(MySqlParserCHAR_LENGTH-653))|(1<<(MySqlParserCOERCIBILITY-653))|(1<<(MySqlParserCOLLATION-653))|(1<<(MySqlParserCOMPRESS-653))|(1<<(MySqlParserCONCAT-653))|(1<<(MySqlParserCONCAT_WS-653))|(1<<(MySqlParserCONNECTION_ID-653))|(1<<(MySqlParserCONV-653))|(1<<(MySqlParserCONVERT_TZ-653))|(1<<(MySqlParserCOS-653))|(1<<(MySqlParserCOT-653))|(1<<(MySqlParserCRC32-653))|(1<<(MySqlParserCREATE_ASYMMETRIC_PRIV_KEY-653))|(1<<(MySqlParserCREATE_ASYMMETRIC_PUB_KEY-653))|(1<<(MySqlParserCREATE_DH_PARAMETERS-653))|(1<<(MySqlParserCREATE_DIGEST-653))|(1<<(MySqlParserCROSSES-653))|(1<<(MySqlParserDATEDIFF-653))|(1<<(MySqlParserDATE_FORMAT-653))|(1<<(MySqlParserDAYNAME-653))|(1<<(MySqlParserDAYOFMONTH-653))|(1<<(MySqlParserDAYOFWEEK-653))|(1<<(MySqlParserDAYOFYEAR-653))|(1<<(MySqlParserDECODE-653))|(1<<(MySqlParserDEGREES-653))|(1<<(MySqlParserDES_DECRYPT-653))|(1<<(MySqlParserDES_ENCRYPT-653))|(1<<(MySqlParserDIMENSION-653)))) != 0) || (((_la-685)&-(0x1f+1)) == 0 && ((1<<uint((_la-685)))&((1<<(MySqlParserDISJOINT-685))|(1<<(MySqlParserELT-685))|(1<<(MySqlParserENCODE-685))|(1<<(MySqlParserENCRYPT-685))|(1<<(MySqlParserENDPOINT-685))|(1<<(MySqlParserENVELOPE-685))|(1<<(MySqlParserEQUALS-685))|(1<<(MySqlParserEXP-685))|(1<<(MySqlParserEXPORT_SET-685))|(1<<(MySqlParserEXTERIORRING-685))|(1<<(MySqlParserEXTRACTVALUE-685))|(1<<(MySqlParserFIELD-685))|(1<<(MySqlParserFIND_IN_SET-685))|(1<<(MySqlParserFLOOR-685))|(1<<(MySqlParserFORMAT-685))|(1<<(MySqlParserFOUND_ROWS-685))|(1<<(MySqlParserFROM_BASE64-685))|(1<<(MySqlParserFROM_DAYS-685))|(1<<(MySqlParserFROM_UNIXTIME-685))|(1<<(MySqlParserGEOMCOLLFROMTEXT-685))|(1<<(MySqlParserGEOMCOLLFROMWKB-685))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMTEXT-685))|(1<<(MySqlParserGEOMETRYCOLLECTIONFROMWKB-685))|(1<<(MySqlParserGEOMETRYFROMTEXT-685))|(1<<(MySqlParserGEOMETRYFROMWKB-685))|(1<<(MySqlParserGEOMETRYN-685))|(1<<(MySqlParserGEOMETRYTYPE-685))|(1<<(MySqlParserGEOMFROMTEXT-685))|(1<<(MySqlParserGEOMFROMWKB-685))|(1<<(MySqlParserGET_FORMAT-685))|(1<<(MySqlParserGET_LOCK-685))|(1<<(MySqlParserGLENGTH-685)))) != 0) || (((_la-717)&-(0x1f+1)) == 0 && ((1<<uint((_la-717)))&((1<<(MySqlParserGREATEST-717))|(1<<(MySqlParserGTID_SUBSET-717))|(1<<(MySqlParserGTID_SUBTRACT-717))|(1<<(MySqlParserHEX-717))|(1<<(MySqlParserIFNULL-717))|(1<<(MySqlParserINET6_ATON-717))|(1<<(MySqlParserINET6_NTOA-717))|(1<<(MySqlParserINET_ATON-717))|(1<<(MySqlParserINET_NTOA-717))|(1<<(MySqlParserINSTR-717))|(1<<(MySqlParserINTERIORRINGN-717))|(1<<(MySqlParserINTERSECTS-717))|(1<<(MySqlParserISCLOSED-717))|(1<<(MySqlParserISEMPTY-717))|(1<<(MySqlParserISNULL-717))|(1<<(MySqlParserISSIMPLE-717))|(1<<(MySqlParserIS_FREE_LOCK-717))|(1<<(MySqlParserIS_IPV4-717))|(1<<(MySqlParserIS_IPV4_COMPAT-717))|(1<<(MySqlParserIS_IPV4_MAPPED-717))|(1<<(MySqlParserIS_IPV6-717))|(1<<(MySqlParserIS_USED_LOCK-717))|(1<<(MySqlParserLAST_INSERT_ID-717))|(1<<(MySqlParserLCASE-717))|(1<<(MySqlParserLEAST-717))|(1<<(MySqlParserLENGTH-717))|(1<<(MySqlParserLINEFROMTEXT-717))|(1<<(MySqlParserLINEFROMWKB-717))|(1<<(MySqlParserLINESTRINGFROMTEXT-717))|(1<<(MySqlParserLINESTRINGFROMWKB-717))|(1<<(MySqlParserLN-717))|(1<<(MySqlParserLOAD_FILE-717)))) != 0) || (((_la-749)&-(0x1f+1)) == 0 && ((1<<uint((_la-749)))&((1<<(MySqlParserLOCATE-749))|(1<<(MySqlParserLOG-749))|(1<<(MySqlParserLOG10-749))|(1<<(MySqlParserLOG2-749))|(1<<(MySqlParserLOWER-749))|(1<<(MySqlParserLPAD-749))|(1<<(MySqlParserLTRIM-749))|(1<<(MySqlParserMAKEDATE-749))|(1<<(MySqlParserMAKETIME-749))|(1<<(MySqlParserMAKE_SET-749))|(1<<(MySqlParserMASTER_POS_WAIT-749))|(1<<(MySqlParserMBRCONTAINS-749))|(1<<(MySqlParserMBRDISJOINT-749))|(1<<(MySqlParserMBREQUAL-749))|(1<<(MySqlParserMBRINTERSECTS-749))|(1<<(MySqlParserMBROVERLAPS-749))|(1<<(MySqlParserMBRTOUCHES-749))|(1<<(MySqlParserMBRWITHIN-749))|(1<<(MySqlParserMD5-749))|(1<<(MySqlParserMLINEFROMTEXT-749))|(1<<(MySqlParserMLINEFROMWKB-749))|(1<<(MySqlParserMONTHNAME-749))|(1<<(MySqlParserMPOINTFROMTEXT-749))|(1<<(MySqlParserMPOINTFROMWKB-749))|(1<<(MySqlParserMPOLYFROMTEXT-749))|(1<<(MySqlParserMPOLYFROMWKB-749))|(1<<(MySqlParserMULTILINESTRINGFROMTEXT-749))|(1<<(MySqlParserMULTILINESTRINGFROMWKB-749))|(1<<(MySqlParserMULTIPOINTFROMTEXT-749))|(1<<(MySqlParserMULTIPOINTFROMWKB-749))|(1<<(MySqlParserMULTIPOLYGONFROMTEXT-749))|(1<<(MySqlParserMULTIPOLYGONFROMWKB-749)))) != 0) || (((_la-781)&-(0x1f+1)) == 0 && ((1<<uint((_la-781)))&((1<<(MySqlParserNAME_CONST-781))|(1<<(MySqlParserNULLIF-781))|(1<<(MySqlParserNUMGEOMETRIES-781))|(1<<(MySqlParserNUMINTERIORRINGS-781))|(1<<(MySqlParserNUMPOINTS-781))|(1<<(MySqlParserOCT-781))|(1<<(MySqlParserOCTET_LENGTH-781))|(1<<(MySqlParserORD-781))|(1<<(MySqlParserOVERLAPS-781))|(1<<(MySqlParserPERIOD_ADD-781))|(1<<(MySqlParserPERIOD_DIFF-781))|(1<<(MySqlParserPI-781))|(1<<(MySqlParserPOINTFROMTEXT-781))|(1<<(MySqlParserPOINTFROMWKB-781))|(1<<(MySqlParserPOINTN-781))|(1<<(MySqlParserPOLYFROMTEXT-781))|(1<<(MySqlParserPOLYFROMWKB-781))|(1<<(MySqlParserPOLYGONFROMTEXT-781))|(1<<(MySqlParserPOLYGONFROMWKB-781))|(1<<(MySqlParserPOW-781))|(1<<(MySqlParserPOWER-781))|(1<<(MySqlParserQUOTE-781))|(1<<(MySqlParserRADIANS-781))|(1<<(MySqlParserRAND-781))|(1<<(MySqlParserRANDOM_BYTES-781))|(1<<(MySqlParserRELEASE_LOCK-781))|(1<<(MySqlParserREVERSE-781))|(1<<(MySqlParserROUND-781))|(1<<(MySqlParserROW_COUNT-781))|(1<<(MySqlParserRPAD-781))|(1<<(MySqlParserRTRIM-781))|(1<<(MySqlParserSEC_TO_TIME-781)))) != 0) || (((_la-813)&-(0x1f+1)) == 0 && ((1<<uint((_la-813)))&((1<<(MySqlParserSESSION_USER-813))|(1<<(MySqlParserSHA-813))|(1<<(MySqlParserSHA1-813))|(1<<(MySqlParserSHA2-813))|(1<<(MySqlParserSIGN-813))|(1<<(MySqlParserSIN-813))|(1<<(MySqlParserSLEEP-813))|(1<<(MySqlParserSOUNDEX-813))|(1<<(MySqlParserSQL_THREAD_WAIT_AFTER_GTIDS-813))|(1<<(MySqlParserSQRT-813))|(1<<(MySqlParserSRID-813))|(1<<(MySqlParserSTARTPOINT-813))|(1<<(MySqlParserSTRCMP-813))|(1<<(MySqlParserSTR_TO_DATE-813))|(1<<(MySqlParserST_AREA-813))|(1<<(MySqlParserST_ASBINARY-813))|(1<<(MySqlParserST_ASTEXT-813))|(1<<(MySqlParserST_ASWKB-813))|(1<<(MySqlParserST_ASWKT-813))|(1<<(MySqlParserST_BUFFER-813))|(1<<(MySqlParserST_CENTROID-813))|(1<<(MySqlParserST_CONTAINS-813))|(1<<(MySqlParserST_CROSSES-813))|(1<<(MySqlParserST_DIFFERENCE-813))|(1<<(MySqlParserST_DIMENSION-813))|(1<<(MySqlParserST_DISJOINT-813))|(1<<(MySqlParserST_DISTANCE-813))|(1<<(MySqlParserST_ENDPOINT-813))|(1<<(MySqlParserST_ENVELOPE-813))|(1<<(MySqlParserST_EQUALS-813))|(1<<(MySqlParserST_EXTERIORRING-813))|(1<<(MySqlParserST_GEOMCOLLFROMTEXT-813)))) != 0) || (((_la-845)&-(0x1f+1)) == 0 && ((1<<uint((_la-845)))&((1<<(MySqlParserST_GEOMCOLLFROMTXT-845))|(1<<(MySqlParserST_GEOMCOLLFROMWKB-845))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMTEXT-845))|(1<<(MySqlParserST_GEOMETRYCOLLECTIONFROMWKB-845))|(1<<(MySqlParserST_GEOMETRYFROMTEXT-845))|(1<<(MySqlParserST_GEOMETRYFROMWKB-845))|(1<<(MySqlParserST_GEOMETRYN-845))|(1<<(MySqlParserST_GEOMETRYTYPE-845))|(1<<(MySqlParserST_GEOMFROMTEXT-845))|(1<<(MySqlParserST_GEOMFROMWKB-845))|(1<<(MySqlParserST_INTERIORRINGN-845))|(1<<(MySqlParserST_INTERSECTION-845))|(1<<(MySqlParserST_INTERSECTS-845))|(1<<(MySqlParserST_ISCLOSED-845))|(1<<(MySqlParserST_ISEMPTY-845))|(1<<(MySqlParserST_ISSIMPLE-845))|(1<<(MySqlParserST_LINEFROMTEXT-845))|(1<<(MySqlParserST_LINEFROMWKB-845))|(1<<(MySqlParserST_LINESTRINGFROMTEXT-845))|(1<<(MySqlParserST_LINESTRINGFROMWKB-845))|(1<<(MySqlParserST_NUMGEOMETRIES-845))|(1<<(MySqlParserST_NUMINTERIORRING-845))|(1<<(MySqlParserST_NUMINTERIORRINGS-845))|(1<<(MySqlParserST_NUMPOINTS-845))|(1<<(MySqlParserST_OVERLAPS-845))|(1<<(MySqlParserST_POINTFROMTEXT-845))|(1<<(MySqlParserST_POINTFROMWKB-845))|(1<<(MySqlParserST_POINTN-845))|(1<<(MySqlParserST_POLYFROMTEXT-845))|(1<<(MySqlParserST_POLYFROMWKB-845))|(1<<(MySqlParserST_POLYGONFROMTEXT-845))|(1<<(MySqlParserST_POLYGONFROMWKB-845)))) != 0) || (((_la-877)&-(0x1f+1)) == 0 && ((1<<uint((_la-877)))&((1<<(MySqlParserST_SRID-877))|(1<<(MySqlParserST_STARTPOINT-877))|(1<<(MySqlParserST_SYMDIFFERENCE-877))|(1<<(MySqlParserST_TOUCHES-877))|(1<<(MySqlParserST_UNION-877))|(1<<(MySqlParserST_WITHIN-877))|(1<<(MySqlParserST_X-877))|(1<<(MySqlParserST_Y-877))|(1<<(MySqlParserSUBDATE-877))|(1<<(MySqlParserSUBSTRING_INDEX-877))|(1<<(MySqlParserSUBTIME-877))|(1<<(MySqlParserSYSTEM_USER-877))|(1<<(MySqlParserTAN-877))|(1<<(MySqlParserTIMEDIFF-877))|(1<<(MySqlParserTIMESTAMPADD-877))|(1<<(MySqlParserTIMESTAMPDIFF-877))|(1<<(MySqlParserTIME_FORMAT-877))|(1<<(MySqlParserTIME_TO_SEC-877))|(1<<(MySqlParserTOUCHES-877))|(1<<(MySqlParserTO_BASE64-877))|(1<<(MySqlParserTO_DAYS-877))|(1<<(MySqlParserTO_SECONDS-877))|(1<<(MySqlParserUCASE-877))|(1<<(MySqlParserUNCOMPRESS-877))|(1<<(MySqlParserUNCOMPRESSED_LENGTH-877))|(1<<(MySqlParserUNHEX-877))|(1<<(MySqlParserUNIX_TIMESTAMP-877))|(1<<(MySqlParserUPDATEXML-877))|(1<<(MySqlParserUPPER-877))|(1<<(MySqlParserUUID-877))|(1<<(MySqlParserUUID_SHORT-877))|(1<<(MySqlParserVALIDATE_PASSWORD_STRENGTH-877)))) != 0) || (((_la-909)&-(0x1f+1)) == 0 && ((1<<uint((_la-909)))&((1<<(MySqlParserVERSION-909))|(1<<(MySqlParserWAIT_UNTIL_SQL_THREAD_AFTER_GTIDS-909))|(1<<(MySqlParserWEEKDAY-909))|(1<<(MySqlParserWEEKOFYEAR-909))|(1<<(MySqlParserWEIGHT_STRING-909))|(1<<(MySqlParserWITHIN-909))|(1<<(MySqlParserYEARWEEK-909))|(1<<(MySqlParserY_FUNCTION-909))|(1<<(MySqlParserX_FUNCTION-909)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

func (p *MySqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 272:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 273:
		var t *PredicateContext = nil
		if localctx != nil {
			t = localctx.(*PredicateContext)
		}
		return p.Predicate_Sempred(t, predIndex)

	case 274:
		var t *Expression_atomContext = nil
		if localctx != nil {
			t = localctx.(*Expression_atomContext)
		}
		return p.Expression_atom_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MySqlParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) Predicate_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MySqlParser) Expression_atom_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
