// Generated from C.g4 by ANTLR 4.7.

package c // C
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 119, 1286,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 3, 2, 3, 2, 3, 2, 6, 2, 180, 10, 2, 13, 2,
	14, 2, 181, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 190, 10, 2, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 5, 2, 210, 10, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 225, 10, 4,
	12, 4, 14, 4, 228, 11, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5,
	5, 237, 10, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 5, 6, 273, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 5,
	6, 283, 10, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 3, 6, 7, 6, 296, 10, 6, 12, 6, 14, 6, 299, 11, 6, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 7, 7, 307, 10, 7, 12, 7, 14, 7, 310, 11, 7, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 334, 10, 8, 3,
	9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 351, 10, 10, 3, 11, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 7, 11, 365,
	10, 11, 12, 11, 14, 11, 368, 11, 11, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 379, 10, 12, 12, 12, 14, 12, 382, 11,
	12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13,
	393, 10, 13, 12, 13, 14, 13, 396, 11, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14,
	7, 14, 413, 10, 14, 12, 14, 14, 14, 416, 11, 14, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 427, 10, 15, 12, 15, 14,
	15, 430, 11, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 7, 16, 438,
	10, 16, 12, 16, 14, 16, 441, 11, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 7, 17, 449, 10, 17, 12, 17, 14, 17, 452, 11, 17, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 18, 3, 18, 7, 18, 460, 10, 18, 12, 18, 14, 18, 463, 11, 18,
	3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 471, 10, 19, 12, 19, 14,
	19, 474, 11, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 482,
	10, 20, 12, 20, 14, 20, 485, 11, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 5, 21, 493, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 3, 22, 5,
	22, 501, 10, 22, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	7, 24, 511, 10, 24, 12, 24, 14, 24, 514, 11, 24, 3, 25, 3, 25, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 526, 10, 26, 3, 27,
	6, 27, 529, 10, 27, 13, 27, 14, 27, 530, 3, 28, 6, 28, 534, 10, 28, 13,
	28, 14, 28, 535, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 543, 10, 29,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 551, 10, 30, 12, 30, 14,
	30, 554, 11, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 561, 10, 31,
	3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 579, 10, 33, 3, 34, 3, 34,
	5, 34, 583, 10, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 5,
	34, 592, 10, 34, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36,
	601, 10, 36, 12, 36, 14, 36, 604, 11, 36, 3, 37, 3, 37, 5, 37, 608, 10,
	37, 3, 37, 3, 37, 3, 37, 5, 37, 613, 10, 37, 3, 38, 3, 38, 5, 38, 617,
	10, 38, 3, 38, 3, 38, 5, 38, 621, 10, 38, 5, 38, 623, 10, 38, 3, 39, 3,
	39, 3, 39, 3, 39, 3, 39, 3, 39, 7, 39, 631, 10, 39, 12, 39, 14, 39, 634,
	11, 39, 3, 40, 3, 40, 5, 40, 638, 10, 40, 3, 40, 3, 40, 5, 40, 642, 10,
	40, 3, 41, 3, 41, 5, 41, 646, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 5, 41, 654, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3,
	41, 5, 41, 663, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 7, 42,
	671, 10, 42, 12, 42, 14, 42, 674, 11, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3,
	43, 5, 43, 681, 10, 43, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45,
	3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 698, 10,
	47, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48,
	5, 48, 710, 10, 48, 3, 49, 5, 49, 713, 10, 49, 3, 49, 3, 49, 7, 49, 717,
	10, 49, 12, 49, 14, 49, 720, 11, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 731, 10, 50, 3, 50, 3, 50, 3, 50, 5,
	50, 736, 10, 50, 3, 50, 5, 50, 739, 10, 50, 3, 50, 3, 50, 3, 50, 3, 50,
	3, 50, 5, 50, 746, 10, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3,
	50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 761, 10, 50, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 773,
	10, 50, 3, 50, 7, 50, 776, 10, 50, 12, 50, 14, 50, 779, 11, 50, 3, 51,
	3, 51, 3, 51, 6, 51, 784, 10, 51, 13, 51, 14, 51, 785, 3, 51, 3, 51, 5,
	51, 790, 10, 51, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 52, 3, 53,
	3, 53, 3, 53, 7, 53, 802, 10, 53, 12, 53, 14, 53, 805, 11, 53, 3, 53, 5,
	53, 808, 10, 53, 3, 54, 3, 54, 3, 54, 5, 54, 813, 10, 54, 3, 54, 5, 54,
	816, 10, 54, 3, 54, 5, 54, 819, 10, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3,
	55, 7, 55, 826, 10, 55, 12, 55, 14, 55, 829, 11, 55, 3, 56, 3, 56, 5, 56,
	833, 10, 56, 3, 56, 3, 56, 5, 56, 837, 10, 56, 3, 56, 3, 56, 3, 56, 5,
	56, 842, 10, 56, 3, 56, 3, 56, 5, 56, 846, 10, 56, 3, 56, 5, 56, 849, 10,
	56, 3, 57, 3, 57, 3, 57, 3, 57, 3, 57, 7, 57, 856, 10, 57, 12, 57, 14,
	57, 859, 11, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 866, 10, 58,
	3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 7, 59, 874, 10, 59, 12, 59, 14,
	59, 877, 11, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 884, 10, 60,
	5, 60, 886, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 894,
	10, 61, 12, 61, 14, 61, 897, 11, 61, 3, 62, 3, 62, 5, 62, 901, 10, 62,
	3, 63, 3, 63, 5, 63, 905, 10, 63, 3, 63, 3, 63, 7, 63, 909, 10, 63, 12,
	63, 14, 63, 912, 11, 63, 5, 63, 914, 10, 63, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 7, 64, 921, 10, 64, 12, 64, 14, 64, 924, 11, 64, 3, 64, 3, 64, 5,
	64, 928, 10, 64, 3, 64, 5, 64, 931, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	5, 64, 937, 10, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 953, 10, 64, 3, 64,
	3, 64, 7, 64, 957, 10, 64, 12, 64, 14, 64, 960, 11, 64, 5, 64, 962, 10,
	64, 3, 64, 3, 64, 3, 64, 5, 64, 967, 10, 64, 3, 64, 5, 64, 970, 10, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 977, 10, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64,
	3, 64, 3, 64, 3, 64, 3, 64, 5, 64, 996, 10, 64, 3, 64, 3, 64, 7, 64, 1000,
	10, 64, 12, 64, 14, 64, 1003, 11, 64, 7, 64, 1005, 10, 64, 12, 64, 14,
	64, 1008, 11, 64, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1022, 10, 66, 3, 67, 3, 67, 5, 67, 1026,
	10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 1033, 10, 67, 3, 67,
	7, 67, 1036, 10, 67, 12, 67, 14, 67, 1039, 11, 67, 3, 68, 3, 68, 3, 68,
	3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 7, 69, 1049, 10, 69, 12, 69, 14, 69,
	1052, 11, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1060, 10,
	70, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 6, 71, 1067, 10, 71, 13, 71, 14,
	71, 1068, 3, 71, 3, 71, 3, 71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72,
	3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 7, 72, 1086, 10, 72, 12, 72,
	14, 72, 1089, 11, 72, 5, 72, 1091, 10, 72, 3, 72, 3, 72, 3, 72, 3, 72,
	7, 72, 1097, 10, 72, 12, 72, 14, 72, 1100, 11, 72, 5, 72, 1102, 10, 72,
	7, 72, 1104, 10, 72, 12, 72, 14, 72, 1107, 11, 72, 3, 72, 3, 72, 5, 72,
	1111, 10, 72, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3, 73, 3,
	73, 3, 73, 3, 73, 5, 73, 1124, 10, 73, 3, 74, 3, 74, 5, 74, 1128, 10, 74,
	3, 74, 3, 74, 3, 75, 3, 75, 3, 75, 3, 75, 3, 75, 7, 75, 1137, 10, 75, 12,
	75, 14, 75, 1140, 11, 75, 3, 76, 3, 76, 5, 76, 1144, 10, 76, 3, 77, 5,
	77, 1147, 10, 77, 3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78,
	3, 78, 5, 78, 1158, 10, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 3, 78, 5,
	78, 1166, 10, 78, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79,
	3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 5, 79, 1188, 10, 79, 3, 80, 3, 80, 3, 80, 5, 80, 1193, 10, 80,
	3, 80, 3, 80, 5, 80, 1197, 10, 80, 3, 80, 5, 80, 1200, 10, 80, 3, 80, 3,
	80, 5, 80, 1204, 10, 80, 3, 80, 3, 80, 5, 80, 1208, 10, 80, 5, 80, 1210,
	10, 80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1216, 10, 81, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 7, 82, 1224, 10, 82, 12, 82, 14, 82, 1227,
	11, 82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83,
	5, 83, 1238, 10, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 5, 83, 1245, 10,
	83, 3, 84, 5, 84, 1248, 10, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85,
	3, 85, 7, 85, 1257, 10, 85, 12, 85, 14, 85, 1260, 11, 85, 3, 86, 3, 86,
	3, 86, 5, 86, 1265, 10, 86, 3, 87, 5, 87, 1268, 10, 87, 3, 87, 3, 87, 5,
	87, 1272, 10, 87, 3, 87, 3, 87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 7, 88,
	1281, 10, 88, 12, 88, 14, 88, 1284, 11, 88, 3, 88, 2, 31, 6, 10, 12, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 46, 58, 70, 76, 82, 98, 112, 116, 120,
	126, 132, 136, 148, 162, 168, 174, 89, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 2, 14, 7, 2,
	73, 73, 75, 75, 77, 77, 80, 80, 85, 86, 3, 2, 91, 101, 8, 2, 17, 17, 28,
	28, 36, 36, 42, 42, 45, 45, 60, 60, 10, 2, 6, 8, 20, 20, 25, 25, 29, 29,
	34, 35, 39, 40, 47, 48, 54, 55, 3, 2, 6, 8, 4, 2, 43, 43, 46, 46, 6, 2,
	21, 21, 37, 37, 49, 49, 53, 53, 5, 2, 10, 11, 33, 33, 58, 58, 4, 2, 61,
	62, 90, 90, 3, 2, 61, 62, 4, 2, 13, 13, 15, 15, 4, 2, 16, 16, 49, 49, 2,
	1400, 2, 209, 3, 2, 2, 2, 4, 211, 3, 2, 2, 2, 6, 218, 3, 2, 2, 2, 8, 236,
	3, 2, 2, 2, 10, 272, 3, 2, 2, 2, 12, 300, 3, 2, 2, 2, 14, 333, 3, 2, 2,
	2, 16, 335, 3, 2, 2, 2, 18, 350, 3, 2, 2, 2, 20, 352, 3, 2, 2, 2, 22, 369,
	3, 2, 2, 2, 24, 383, 3, 2, 2, 2, 26, 397, 3, 2, 2, 2, 28, 417, 3, 2, 2,
	2, 30, 431, 3, 2, 2, 2, 32, 442, 3, 2, 2, 2, 34, 453, 3, 2, 2, 2, 36, 464,
	3, 2, 2, 2, 38, 475, 3, 2, 2, 2, 40, 486, 3, 2, 2, 2, 42, 500, 3, 2, 2,
	2, 44, 502, 3, 2, 2, 2, 46, 504, 3, 2, 2, 2, 48, 515, 3, 2, 2, 2, 50, 525,
	3, 2, 2, 2, 52, 528, 3, 2, 2, 2, 54, 533, 3, 2, 2, 2, 56, 542, 3, 2, 2,
	2, 58, 544, 3, 2, 2, 2, 60, 560, 3, 2, 2, 2, 62, 562, 3, 2, 2, 2, 64, 578,
	3, 2, 2, 2, 66, 591, 3, 2, 2, 2, 68, 593, 3, 2, 2, 2, 70, 595, 3, 2, 2,
	2, 72, 612, 3, 2, 2, 2, 74, 622, 3, 2, 2, 2, 76, 624, 3, 2, 2, 2, 78, 641,
	3, 2, 2, 2, 80, 662, 3, 2, 2, 2, 82, 664, 3, 2, 2, 2, 84, 680, 3, 2, 2,
	2, 86, 682, 3, 2, 2, 2, 88, 684, 3, 2, 2, 2, 90, 689, 3, 2, 2, 2, 92, 697,
	3, 2, 2, 2, 94, 709, 3, 2, 2, 2, 96, 712, 3, 2, 2, 2, 98, 730, 3, 2, 2,
	2, 100, 789, 3, 2, 2, 2, 102, 791, 3, 2, 2, 2, 104, 807, 3, 2, 2, 2, 106,
	818, 3, 2, 2, 2, 108, 827, 3, 2, 2, 2, 110, 848, 3, 2, 2, 2, 112, 850,
	3, 2, 2, 2, 114, 865, 3, 2, 2, 2, 116, 867, 3, 2, 2, 2, 118, 885, 3, 2,
	2, 2, 120, 887, 3, 2, 2, 2, 122, 898, 3, 2, 2, 2, 124, 913, 3, 2, 2, 2,
	126, 961, 3, 2, 2, 2, 128, 1009, 3, 2, 2, 2, 130, 1021, 3, 2, 2, 2, 132,
	1023, 3, 2, 2, 2, 134, 1040, 3, 2, 2, 2, 136, 1043, 3, 2, 2, 2, 138, 1059,
	3, 2, 2, 2, 140, 1061, 3, 2, 2, 2, 142, 1110, 3, 2, 2, 2, 144, 1123, 3,
	2, 2, 2, 146, 1125, 3, 2, 2, 2, 148, 1131, 3, 2, 2, 2, 150, 1143, 3, 2,
	2, 2, 152, 1146, 3, 2, 2, 2, 154, 1165, 3, 2, 2, 2, 156, 1187, 3, 2, 2,
	2, 158, 1209, 3, 2, 2, 2, 160, 1215, 3, 2, 2, 2, 162, 1217, 3, 2, 2, 2,
	164, 1244, 3, 2, 2, 2, 166, 1247, 3, 2, 2, 2, 168, 1251, 3, 2, 2, 2, 170,
	1264, 3, 2, 2, 2, 172, 1267, 3, 2, 2, 2, 174, 1275, 3, 2, 2, 2, 176, 210,
	7, 107, 2, 2, 177, 210, 7, 108, 2, 2, 178, 180, 7, 110, 2, 2, 179, 178,
	3, 2, 2, 2, 180, 181, 3, 2, 2, 2, 181, 179, 3, 2, 2, 2, 181, 182, 3, 2,
	2, 2, 182, 210, 3, 2, 2, 2, 183, 184, 7, 61, 2, 2, 184, 185, 5, 46, 24,
	2, 185, 186, 7, 62, 2, 2, 186, 210, 3, 2, 2, 2, 187, 210, 5, 4, 3, 2, 188,
	190, 7, 3, 2, 2, 189, 188, 3, 2, 2, 2, 189, 190, 3, 2, 2, 2, 190, 191,
	3, 2, 2, 2, 191, 192, 7, 61, 2, 2, 192, 193, 5, 146, 74, 2, 193, 194, 7,
	62, 2, 2, 194, 210, 3, 2, 2, 2, 195, 196, 7, 4, 2, 2, 196, 197, 7, 61,
	2, 2, 197, 198, 5, 14, 8, 2, 198, 199, 7, 90, 2, 2, 199, 200, 5, 122, 62,
	2, 200, 201, 7, 62, 2, 2, 201, 210, 3, 2, 2, 2, 202, 203, 7, 5, 2, 2, 203,
	204, 7, 61, 2, 2, 204, 205, 5, 122, 62, 2, 205, 206, 7, 90, 2, 2, 206,
	207, 5, 14, 8, 2, 207, 208, 7, 62, 2, 2, 208, 210, 3, 2, 2, 2, 209, 176,
	3, 2, 2, 2, 209, 177, 3, 2, 2, 2, 209, 179, 3, 2, 2, 2, 209, 183, 3, 2,
	2, 2, 209, 187, 3, 2, 2, 2, 209, 189, 3, 2, 2, 2, 209, 195, 3, 2, 2, 2,
	209, 202, 3, 2, 2, 2, 210, 3, 3, 2, 2, 2, 211, 212, 7, 56, 2, 2, 212, 213,
	7, 61, 2, 2, 213, 214, 5, 42, 22, 2, 214, 215, 7, 90, 2, 2, 215, 216, 5,
	6, 4, 2, 216, 217, 7, 62, 2, 2, 217, 5, 3, 2, 2, 2, 218, 219, 8, 4, 1,
	2, 219, 220, 5, 8, 5, 2, 220, 226, 3, 2, 2, 2, 221, 222, 12, 3, 2, 2, 222,
	223, 7, 90, 2, 2, 223, 225, 5, 8, 5, 2, 224, 221, 3, 2, 2, 2, 225, 228,
	3, 2, 2, 2, 226, 224, 3, 2, 2, 2, 226, 227, 3, 2, 2, 2, 227, 7, 3, 2, 2,
	2, 228, 226, 3, 2, 2, 2, 229, 230, 5, 122, 62, 2, 230, 231, 7, 88, 2, 2,
	231, 232, 5, 42, 22, 2, 232, 237, 3, 2, 2, 2, 233, 234, 7, 23, 2, 2, 234,
	235, 7, 88, 2, 2, 235, 237, 5, 42, 22, 2, 236, 229, 3, 2, 2, 2, 236, 233,
	3, 2, 2, 2, 237, 9, 3, 2, 2, 2, 238, 239, 8, 6, 1, 2, 239, 273, 5, 2, 2,
	2, 240, 241, 7, 61, 2, 2, 241, 242, 5, 122, 62, 2, 242, 243, 7, 62, 2,
	2, 243, 244, 7, 65, 2, 2, 244, 245, 5, 132, 67, 2, 245, 246, 7, 66, 2,
	2, 246, 273, 3, 2, 2, 2, 247, 248, 7, 61, 2, 2, 248, 249, 5, 122, 62, 2,
	249, 250, 7, 62, 2, 2, 250, 251, 7, 65, 2, 2, 251, 252, 5, 132, 67, 2,
	252, 253, 7, 90, 2, 2, 253, 254, 7, 66, 2, 2, 254, 273, 3, 2, 2, 2, 255,
	256, 7, 3, 2, 2, 256, 257, 7, 61, 2, 2, 257, 258, 5, 122, 62, 2, 258, 259,
	7, 62, 2, 2, 259, 260, 7, 65, 2, 2, 260, 261, 5, 132, 67, 2, 261, 262,
	7, 66, 2, 2, 262, 273, 3, 2, 2, 2, 263, 264, 7, 3, 2, 2, 264, 265, 7, 61,
	2, 2, 265, 266, 5, 122, 62, 2, 266, 267, 7, 62, 2, 2, 267, 268, 7, 65,
	2, 2, 268, 269, 5, 132, 67, 2, 269, 270, 7, 90, 2, 2, 270, 271, 7, 66,
	2, 2, 271, 273, 3, 2, 2, 2, 272, 238, 3, 2, 2, 2, 272, 240, 3, 2, 2, 2,
	272, 247, 3, 2, 2, 2, 272, 255, 3, 2, 2, 2, 272, 263, 3, 2, 2, 2, 273,
	297, 3, 2, 2, 2, 274, 275, 12, 12, 2, 2, 275, 276, 7, 63, 2, 2, 276, 277,
	5, 46, 24, 2, 277, 278, 7, 64, 2, 2, 278, 296, 3, 2, 2, 2, 279, 280, 12,
	11, 2, 2, 280, 282, 7, 61, 2, 2, 281, 283, 5, 12, 7, 2, 282, 281, 3, 2,
	2, 2, 282, 283, 3, 2, 2, 2, 283, 284, 3, 2, 2, 2, 284, 296, 7, 62, 2, 2,
	285, 286, 12, 10, 2, 2, 286, 287, 7, 105, 2, 2, 287, 296, 7, 107, 2, 2,
	288, 289, 12, 9, 2, 2, 289, 290, 7, 104, 2, 2, 290, 296, 7, 107, 2, 2,
	291, 292, 12, 8, 2, 2, 292, 296, 7, 74, 2, 2, 293, 294, 12, 7, 2, 2, 294,
	296, 7, 76, 2, 2, 295, 274, 3, 2, 2, 2, 295, 279, 3, 2, 2, 2, 295, 285,
	3, 2, 2, 2, 295, 288, 3, 2, 2, 2, 295, 291, 3, 2, 2, 2, 295, 293, 3, 2,
	2, 2, 296, 299, 3, 2, 2, 2, 297, 295, 3, 2, 2, 2, 297, 298, 3, 2, 2, 2,
	298, 11, 3, 2, 2, 2, 299, 297, 3, 2, 2, 2, 300, 301, 8, 7, 1, 2, 301, 302,
	5, 42, 22, 2, 302, 308, 3, 2, 2, 2, 303, 304, 12, 3, 2, 2, 304, 305, 7,
	90, 2, 2, 305, 307, 5, 42, 22, 2, 306, 303, 3, 2, 2, 2, 307, 310, 3, 2,
	2, 2, 308, 306, 3, 2, 2, 2, 308, 309, 3, 2, 2, 2, 309, 13, 3, 2, 2, 2,
	310, 308, 3, 2, 2, 2, 311, 334, 5, 10, 6, 2, 312, 313, 7, 74, 2, 2, 313,
	334, 5, 14, 8, 2, 314, 315, 7, 76, 2, 2, 315, 334, 5, 14, 8, 2, 316, 317,
	5, 16, 9, 2, 317, 318, 5, 18, 10, 2, 318, 334, 3, 2, 2, 2, 319, 320, 7,
	41, 2, 2, 320, 334, 5, 14, 8, 2, 321, 322, 7, 41, 2, 2, 322, 323, 7, 61,
	2, 2, 323, 324, 5, 122, 62, 2, 324, 325, 7, 62, 2, 2, 325, 334, 3, 2, 2,
	2, 326, 327, 7, 52, 2, 2, 327, 328, 7, 61, 2, 2, 328, 329, 5, 122, 62,
	2, 329, 330, 7, 62, 2, 2, 330, 334, 3, 2, 2, 2, 331, 332, 7, 82, 2, 2,
	332, 334, 7, 107, 2, 2, 333, 311, 3, 2, 2, 2, 333, 312, 3, 2, 2, 2, 333,
	314, 3, 2, 2, 2, 333, 316, 3, 2, 2, 2, 333, 319, 3, 2, 2, 2, 333, 321,
	3, 2, 2, 2, 333, 326, 3, 2, 2, 2, 333, 331, 3, 2, 2, 2, 334, 15, 3, 2,
	2, 2, 335, 336, 9, 2, 2, 2, 336, 17, 3, 2, 2, 2, 337, 351, 5, 14, 8, 2,
	338, 339, 7, 61, 2, 2, 339, 340, 5, 122, 62, 2, 340, 341, 7, 62, 2, 2,
	341, 342, 5, 18, 10, 2, 342, 351, 3, 2, 2, 2, 343, 344, 7, 3, 2, 2, 344,
	345, 7, 61, 2, 2, 345, 346, 5, 122, 62, 2, 346, 347, 7, 62, 2, 2, 347,
	348, 5, 18, 10, 2, 348, 351, 3, 2, 2, 2, 349, 351, 7, 109, 2, 2, 350, 337,
	3, 2, 2, 2, 350, 338, 3, 2, 2, 2, 350, 343, 3, 2, 2, 2, 350, 349, 3, 2,
	2, 2, 351, 19, 3, 2, 2, 2, 352, 353, 8, 11, 1, 2, 353, 354, 5, 18, 10,
	2, 354, 366, 3, 2, 2, 2, 355, 356, 12, 5, 2, 2, 356, 357, 7, 77, 2, 2,
	357, 365, 5, 18, 10, 2, 358, 359, 12, 4, 2, 2, 359, 360, 7, 78, 2, 2, 360,
	365, 5, 18, 10, 2, 361, 362, 12, 3, 2, 2, 362, 363, 7, 79, 2, 2, 363, 365,
	5, 18, 10, 2, 364, 355, 3, 2, 2, 2, 364, 358, 3, 2, 2, 2, 364, 361, 3,
	2, 2, 2, 365, 368, 3, 2, 2, 2, 366, 364, 3, 2, 2, 2, 366, 367, 3, 2, 2,
	2, 367, 21, 3, 2, 2, 2, 368, 366, 3, 2, 2, 2, 369, 370, 8, 12, 1, 2, 370,
	371, 5, 20, 11, 2, 371, 380, 3, 2, 2, 2, 372, 373, 12, 4, 2, 2, 373, 374,
	7, 73, 2, 2, 374, 379, 5, 20, 11, 2, 375, 376, 12, 3, 2, 2, 376, 377, 7,
	75, 2, 2, 377, 379, 5, 20, 11, 2, 378, 372, 3, 2, 2, 2, 378, 375, 3, 2,
	2, 2, 379, 382, 3, 2, 2, 2, 380, 378, 3, 2, 2, 2, 380, 381, 3, 2, 2, 2,
	381, 23, 3, 2, 2, 2, 382, 380, 3, 2, 2, 2, 383, 384, 8, 13, 1, 2, 384,
	385, 5, 22, 12, 2, 385, 394, 3, 2, 2, 2, 386, 387, 12, 4, 2, 2, 387, 388,
	7, 71, 2, 2, 388, 393, 5, 22, 12, 2, 389, 390, 12, 3, 2, 2, 390, 391, 7,
	72, 2, 2, 391, 393, 5, 22, 12, 2, 392, 386, 3, 2, 2, 2, 392, 389, 3, 2,
	2, 2, 393, 396, 3, 2, 2, 2, 394, 392, 3, 2, 2, 2, 394, 395, 3, 2, 2, 2,
	395, 25, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 397, 398, 8, 14, 1, 2, 398,
	399, 5, 24, 13, 2, 399, 414, 3, 2, 2, 2, 400, 401, 12, 6, 2, 2, 401, 402,
	7, 67, 2, 2, 402, 413, 5, 24, 13, 2, 403, 404, 12, 5, 2, 2, 404, 405, 7,
	69, 2, 2, 405, 413, 5, 24, 13, 2, 406, 407, 12, 4, 2, 2, 407, 408, 7, 68,
	2, 2, 408, 413, 5, 24, 13, 2, 409, 410, 12, 3, 2, 2, 410, 411, 7, 70, 2,
	2, 411, 413, 5, 24, 13, 2, 412, 400, 3, 2, 2, 2, 412, 403, 3, 2, 2, 2,
	412, 406, 3, 2, 2, 2, 412, 409, 3, 2, 2, 2, 413, 416, 3, 2, 2, 2, 414,
	412, 3, 2, 2, 2, 414, 415, 3, 2, 2, 2, 415, 27, 3, 2, 2, 2, 416, 414, 3,
	2, 2, 2, 417, 418, 8, 15, 1, 2, 418, 419, 5, 26, 14, 2, 419, 428, 3, 2,
	2, 2, 420, 421, 12, 4, 2, 2, 421, 422, 7, 102, 2, 2, 422, 427, 5, 26, 14,
	2, 423, 424, 12, 3, 2, 2, 424, 425, 7, 103, 2, 2, 425, 427, 5, 26, 14,
	2, 426, 420, 3, 2, 2, 2, 426, 423, 3, 2, 2, 2, 427, 430, 3, 2, 2, 2, 428,
	426, 3, 2, 2, 2, 428, 429, 3, 2, 2, 2, 429, 29, 3, 2, 2, 2, 430, 428, 3,
	2, 2, 2, 431, 432, 8, 16, 1, 2, 432, 433, 5, 28, 15, 2, 433, 439, 3, 2,
	2, 2, 434, 435, 12, 3, 2, 2, 435, 436, 7, 80, 2, 2, 436, 438, 5, 28, 15,
	2, 437, 434, 3, 2, 2, 2, 438, 441, 3, 2, 2, 2, 439, 437, 3, 2, 2, 2, 439,
	440, 3, 2, 2, 2, 440, 31, 3, 2, 2, 2, 441, 439, 3, 2, 2, 2, 442, 443, 8,
	17, 1, 2, 443, 444, 5, 30, 16, 2, 444, 450, 3, 2, 2, 2, 445, 446, 12, 3,
	2, 2, 446, 447, 7, 84, 2, 2, 447, 449, 5, 30, 16, 2, 448, 445, 3, 2, 2,
	2, 449, 452, 3, 2, 2, 2, 450, 448, 3, 2, 2, 2, 450, 451, 3, 2, 2, 2, 451,
	33, 3, 2, 2, 2, 452, 450, 3, 2, 2, 2, 453, 454, 8, 18, 1, 2, 454, 455,
	5, 32, 17, 2, 455, 461, 3, 2, 2, 2, 456, 457, 12, 3, 2, 2, 457, 458, 7,
	81, 2, 2, 458, 460, 5, 32, 17, 2, 459, 456, 3, 2, 2, 2, 460, 463, 3, 2,
	2, 2, 461, 459, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 462, 35, 3, 2, 2, 2,
	463, 461, 3, 2, 2, 2, 464, 465, 8, 19, 1, 2, 465, 466, 5, 34, 18, 2, 466,
	472, 3, 2, 2, 2, 467, 468, 12, 3, 2, 2, 468, 469, 7, 82, 2, 2, 469, 471,
	5, 34, 18, 2, 470, 467, 3, 2, 2, 2, 471, 474, 3, 2, 2, 2, 472, 470, 3,
	2, 2, 2, 472, 473, 3, 2, 2, 2, 473, 37, 3, 2, 2, 2, 474, 472, 3, 2, 2,
	2, 475, 476, 8, 20, 1, 2, 476, 477, 5, 36, 19, 2, 477, 483, 3, 2, 2, 2,
	478, 479, 12, 3, 2, 2, 479, 480, 7, 83, 2, 2, 480, 482, 5, 36, 19, 2, 481,
	478, 3, 2, 2, 2, 482, 485, 3, 2, 2, 2, 483, 481, 3, 2, 2, 2, 483, 484,
	3, 2, 2, 2, 484, 39, 3, 2, 2, 2, 485, 483, 3, 2, 2, 2, 486, 492, 5, 38,
	20, 2, 487, 488, 7, 87, 2, 2, 488, 489, 5, 46, 24, 2, 489, 490, 7, 88,
	2, 2, 490, 491, 5, 40, 21, 2, 491, 493, 3, 2, 2, 2, 492, 487, 3, 2, 2,
	2, 492, 493, 3, 2, 2, 2, 493, 41, 3, 2, 2, 2, 494, 501, 5, 40, 21, 2, 495,
	496, 5, 14, 8, 2, 496, 497, 5, 44, 23, 2, 497, 498, 5, 42, 22, 2, 498,
	501, 3, 2, 2, 2, 499, 501, 7, 109, 2, 2, 500, 494, 3, 2, 2, 2, 500, 495,
	3, 2, 2, 2, 500, 499, 3, 2, 2, 2, 501, 43, 3, 2, 2, 2, 502, 503, 9, 3,
	2, 2, 503, 45, 3, 2, 2, 2, 504, 505, 8, 24, 1, 2, 505, 506, 5, 42, 22,
	2, 506, 512, 3, 2, 2, 2, 507, 508, 12, 3, 2, 2, 508, 509, 7, 90, 2, 2,
	509, 511, 5, 42, 22, 2, 510, 507, 3, 2, 2, 2, 511, 514, 3, 2, 2, 2, 512,
	510, 3, 2, 2, 2, 512, 513, 3, 2, 2, 2, 513, 47, 3, 2, 2, 2, 514, 512, 3,
	2, 2, 2, 515, 516, 5, 40, 21, 2, 516, 49, 3, 2, 2, 2, 517, 518, 5, 52,
	27, 2, 518, 519, 5, 58, 30, 2, 519, 520, 7, 89, 2, 2, 520, 526, 3, 2, 2,
	2, 521, 522, 5, 52, 27, 2, 522, 523, 7, 89, 2, 2, 523, 526, 3, 2, 2, 2,
	524, 526, 5, 140, 71, 2, 525, 517, 3, 2, 2, 2, 525, 521, 3, 2, 2, 2, 525,
	524, 3, 2, 2, 2, 526, 51, 3, 2, 2, 2, 527, 529, 5, 56, 29, 2, 528, 527,
	3, 2, 2, 2, 529, 530, 3, 2, 2, 2, 530, 528, 3, 2, 2, 2, 530, 531, 3, 2,
	2, 2, 531, 53, 3, 2, 2, 2, 532, 534, 5, 56, 29, 2, 533, 532, 3, 2, 2, 2,
	534, 535, 3, 2, 2, 2, 535, 533, 3, 2, 2, 2, 535, 536, 3, 2, 2, 2, 536,
	55, 3, 2, 2, 2, 537, 543, 5, 62, 32, 2, 538, 543, 5, 64, 33, 2, 539, 543,
	5, 90, 46, 2, 540, 543, 5, 92, 47, 2, 541, 543, 5, 94, 48, 2, 542, 537,
	3, 2, 2, 2, 542, 538, 3, 2, 2, 2, 542, 539, 3, 2, 2, 2, 542, 540, 3, 2,
	2, 2, 542, 541, 3, 2, 2, 2, 543, 57, 3, 2, 2, 2, 544, 545, 8, 30, 1, 2,
	545, 546, 5, 60, 31, 2, 546, 552, 3, 2, 2, 2, 547, 548, 12, 3, 2, 2, 548,
	549, 7, 90, 2, 2, 549, 551, 5, 60, 31, 2, 550, 547, 3, 2, 2, 2, 551, 554,
	3, 2, 2, 2, 552, 550, 3, 2, 2, 2, 552, 553, 3, 2, 2, 2, 553, 59, 3, 2,
	2, 2, 554, 552, 3, 2, 2, 2, 555, 561, 5, 96, 49, 2, 556, 557, 5, 96, 49,
	2, 557, 558, 7, 91, 2, 2, 558, 559, 5, 130, 66, 2, 559, 561, 3, 2, 2, 2,
	560, 555, 3, 2, 2, 2, 560, 556, 3, 2, 2, 2, 561, 61, 3, 2, 2, 2, 562, 563,
	9, 4, 2, 2, 563, 63, 3, 2, 2, 2, 564, 579, 9, 5, 2, 2, 565, 566, 7, 3,
	2, 2, 566, 567, 7, 61, 2, 2, 567, 568, 9, 6, 2, 2, 568, 579, 7, 62, 2,
	2, 569, 579, 5, 88, 45, 2, 570, 579, 5, 66, 34, 2, 571, 579, 5, 80, 41,
	2, 572, 579, 5, 128, 65, 2, 573, 574, 7, 9, 2, 2, 574, 575, 7, 61, 2, 2,
	575, 576, 5, 48, 25, 2, 576, 577, 7, 62, 2, 2, 577, 579, 3, 2, 2, 2, 578,
	564, 3, 2, 2, 2, 578, 565, 3, 2, 2, 2, 578, 569, 3, 2, 2, 2, 578, 570,
	3, 2, 2, 2, 578, 571, 3, 2, 2, 2, 578, 572, 3, 2, 2, 2, 578, 573, 3, 2,
	2, 2, 579, 65, 3, 2, 2, 2, 580, 582, 5, 68, 35, 2, 581, 583, 7, 107, 2,
	2, 582, 581, 3, 2, 2, 2, 582, 583, 3, 2, 2, 2, 583, 584, 3, 2, 2, 2, 584,
	585, 7, 65, 2, 2, 585, 586, 5, 70, 36, 2, 586, 587, 7, 66, 2, 2, 587, 592,
	3, 2, 2, 2, 588, 589, 5, 68, 35, 2, 589, 590, 7, 107, 2, 2, 590, 592, 3,
	2, 2, 2, 591, 580, 3, 2, 2, 2, 591, 588, 3, 2, 2, 2, 592, 67, 3, 2, 2,
	2, 593, 594, 9, 7, 2, 2, 594, 69, 3, 2, 2, 2, 595, 596, 8, 36, 1, 2, 596,
	597, 5, 72, 37, 2, 597, 602, 3, 2, 2, 2, 598, 599, 12, 3, 2, 2, 599, 601,
	5, 72, 37, 2, 600, 598, 3, 2, 2, 2, 601, 604, 3, 2, 2, 2, 602, 600, 3,
	2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 71, 3, 2, 2, 2, 604, 602, 3, 2, 2,
	2, 605, 607, 5, 74, 38, 2, 606, 608, 5, 76, 39, 2, 607, 606, 3, 2, 2, 2,
	607, 608, 3, 2, 2, 2, 608, 609, 3, 2, 2, 2, 609, 610, 7, 89, 2, 2, 610,
	613, 3, 2, 2, 2, 611, 613, 5, 140, 71, 2, 612, 605, 3, 2, 2, 2, 612, 611,
	3, 2, 2, 2, 613, 73, 3, 2, 2, 2, 614, 616, 5, 64, 33, 2, 615, 617, 5, 74,
	38, 2, 616, 615, 3, 2, 2, 2, 616, 617, 3, 2, 2, 2, 617, 623, 3, 2, 2, 2,
	618, 620, 5, 90, 46, 2, 619, 621, 5, 74, 38, 2, 620, 619, 3, 2, 2, 2, 620,
	621, 3, 2, 2, 2, 621, 623, 3, 2, 2, 2, 622, 614, 3, 2, 2, 2, 622, 618,
	3, 2, 2, 2, 623, 75, 3, 2, 2, 2, 624, 625, 8, 39, 1, 2, 625, 626, 5, 78,
	40, 2, 626, 632, 3, 2, 2, 2, 627, 628, 12, 3, 2, 2, 628, 629, 7, 90, 2,
	2, 629, 631, 5, 78, 40, 2, 630, 627, 3, 2, 2, 2, 631, 634, 3, 2, 2, 2,
	632, 630, 3, 2, 2, 2, 632, 633, 3, 2, 2, 2, 633, 77, 3, 2, 2, 2, 634, 632,
	3, 2, 2, 2, 635, 642, 5, 96, 49, 2, 636, 638, 5, 96, 49, 2, 637, 636, 3,
	2, 2, 2, 637, 638, 3, 2, 2, 2, 638, 639, 3, 2, 2, 2, 639, 640, 7, 88, 2,
	2, 640, 642, 5, 48, 25, 2, 641, 635, 3, 2, 2, 2, 641, 637, 3, 2, 2, 2,
	642, 79, 3, 2, 2, 2, 643, 645, 7, 27, 2, 2, 644, 646, 7, 107, 2, 2, 645,
	644, 3, 2, 2, 2, 645, 646, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 648,
	7, 65, 2, 2, 648, 649, 5, 82, 42, 2, 649, 650, 7, 66, 2, 2, 650, 663, 3,
	2, 2, 2, 651, 653, 7, 27, 2, 2, 652, 654, 7, 107, 2, 2, 653, 652, 3, 2,
	2, 2, 653, 654, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 656, 7, 65, 2, 2,
	656, 657, 5, 82, 42, 2, 657, 658, 7, 90, 2, 2, 658, 659, 7, 66, 2, 2, 659,
	663, 3, 2, 2, 2, 660, 661, 7, 27, 2, 2, 661, 663, 7, 107, 2, 2, 662, 643,
	3, 2, 2, 2, 662, 651, 3, 2, 2, 2, 662, 660, 3, 2, 2, 2, 663, 81, 3, 2,
	2, 2, 664, 665, 8, 42, 1, 2, 665, 666, 5, 84, 43, 2, 666, 672, 3, 2, 2,
	2, 667, 668, 12, 3, 2, 2, 668, 669, 7, 90, 2, 2, 669, 671, 5, 84, 43, 2,
	670, 667, 3, 2, 2, 2, 671, 674, 3, 2, 2, 2, 672, 670, 3, 2, 2, 2, 672,
	673, 3, 2, 2, 2, 673, 83, 3, 2, 2, 2, 674, 672, 3, 2, 2, 2, 675, 681, 5,
	86, 44, 2, 676, 677, 5, 86, 44, 2, 677, 678, 7, 91, 2, 2, 678, 679, 5,
	48, 25, 2, 679, 681, 3, 2, 2, 2, 680, 675, 3, 2, 2, 2, 680, 676, 3, 2,
	2, 2, 681, 85, 3, 2, 2, 2, 682, 683, 7, 107, 2, 2, 683, 87, 3, 2, 2, 2,
	684, 685, 7, 53, 2, 2, 685, 686, 7, 61, 2, 2, 686, 687, 5, 122, 62, 2,
	687, 688, 7, 62, 2, 2, 688, 89, 3, 2, 2, 2, 689, 690, 9, 8, 2, 2, 690,
	91, 3, 2, 2, 2, 691, 698, 9, 9, 2, 2, 692, 698, 5, 102, 52, 2, 693, 694,
	7, 12, 2, 2, 694, 695, 7, 61, 2, 2, 695, 696, 7, 107, 2, 2, 696, 698, 7,
	62, 2, 2, 697, 691, 3, 2, 2, 2, 697, 692, 3, 2, 2, 2, 697, 693, 3, 2, 2,
	2, 698, 93, 3, 2, 2, 2, 699, 700, 7, 51, 2, 2, 700, 701, 7, 61, 2, 2, 701,
	702, 5, 122, 62, 2, 702, 703, 7, 62, 2, 2, 703, 710, 3, 2, 2, 2, 704, 705,
	7, 51, 2, 2, 705, 706, 7, 61, 2, 2, 706, 707, 5, 48, 25, 2, 707, 708, 7,
	62, 2, 2, 708, 710, 3, 2, 2, 2, 709, 699, 3, 2, 2, 2, 709, 704, 3, 2, 2,
	2, 710, 95, 3, 2, 2, 2, 711, 713, 5, 110, 56, 2, 712, 711, 3, 2, 2, 2,
	712, 713, 3, 2, 2, 2, 713, 714, 3, 2, 2, 2, 714, 718, 5, 98, 50, 2, 715,
	717, 5, 100, 51, 2, 716, 715, 3, 2, 2, 2, 717, 720, 3, 2, 2, 2, 718, 716,
	3, 2, 2, 2, 718, 719, 3, 2, 2, 2, 719, 97, 3, 2, 2, 2, 720, 718, 3, 2,
	2, 2, 721, 722, 8, 50, 1, 2, 722, 731, 7, 107, 2, 2, 723, 724, 7, 61, 2,
	2, 724, 725, 5, 96, 49, 2, 725, 726, 7, 62, 2, 2, 726, 731, 3, 2, 2, 2,
	727, 728, 7, 107, 2, 2, 728, 729, 7, 88, 2, 2, 729, 731, 7, 109, 2, 2,
	730, 721, 3, 2, 2, 2, 730, 723, 3, 2, 2, 2, 730, 727, 3, 2, 2, 2, 731,
	777, 3, 2, 2, 2, 732, 733, 12, 9, 2, 2, 733, 735, 7, 63, 2, 2, 734, 736,
	5, 112, 57, 2, 735, 734, 3, 2, 2, 2, 735, 736, 3, 2, 2, 2, 736, 738, 3,
	2, 2, 2, 737, 739, 5, 42, 22, 2, 738, 737, 3, 2, 2, 2, 738, 739, 3, 2,
	2, 2, 739, 740, 3, 2, 2, 2, 740, 776, 7, 64, 2, 2, 741, 742, 12, 8, 2,
	2, 742, 743, 7, 63, 2, 2, 743, 745, 7, 42, 2, 2, 744, 746, 5, 112, 57,
	2, 745, 744, 3, 2, 2, 2, 745, 746, 3, 2, 2, 2, 746, 747, 3, 2, 2, 2, 747,
	748, 5, 42, 22, 2, 748, 749, 7, 64, 2, 2, 749, 776, 3, 2, 2, 2, 750, 751,
	12, 7, 2, 2, 751, 752, 7, 63, 2, 2, 752, 753, 5, 112, 57, 2, 753, 754,
	7, 42, 2, 2, 754, 755, 5, 42, 22, 2, 755, 756, 7, 64, 2, 2, 756, 776, 3,
	2, 2, 2, 757, 758, 12, 6, 2, 2, 758, 760, 7, 63, 2, 2, 759, 761, 5, 112,
	57, 2, 760, 759, 3, 2, 2, 2, 760, 761, 3, 2, 2, 2, 761, 762, 3, 2, 2, 2,
	762, 763, 7, 77, 2, 2, 763, 776, 7, 64, 2, 2, 764, 765, 12, 5, 2, 2, 765,
	766, 7, 61, 2, 2, 766, 767, 5, 114, 58, 2, 767, 768, 7, 62, 2, 2, 768,
	776, 3, 2, 2, 2, 769, 770, 12, 4, 2, 2, 770, 772, 7, 61, 2, 2, 771, 773,
	5, 120, 61, 2, 772, 771, 3, 2, 2, 2, 772, 773, 3, 2, 2, 2, 773, 774, 3,
	2, 2, 2, 774, 776, 7, 62, 2, 2, 775, 732, 3, 2, 2, 2, 775, 741, 3, 2, 2,
	2, 775, 750, 3, 2, 2, 2, 775, 757, 3, 2, 2, 2, 775, 764, 3, 2, 2, 2, 775,
	769, 3, 2, 2, 2, 776, 779, 3, 2, 2, 2, 777, 775, 3, 2, 2, 2, 777, 778,
	3, 2, 2, 2, 778, 99, 3, 2, 2, 2, 779, 777, 3, 2, 2, 2, 780, 781, 7, 13,
	2, 2, 781, 783, 7, 61, 2, 2, 782, 784, 7, 110, 2, 2, 783, 782, 3, 2, 2,
	2, 784, 785, 3, 2, 2, 2, 785, 783, 3, 2, 2, 2, 785, 786, 3, 2, 2, 2, 786,
	787, 3, 2, 2, 2, 787, 790, 7, 62, 2, 2, 788, 790, 5, 102, 52, 2, 789, 780,
	3, 2, 2, 2, 789, 788, 3, 2, 2, 2, 790, 101, 3, 2, 2, 2, 791, 792, 7, 14,
	2, 2, 792, 793, 7, 61, 2, 2, 793, 794, 7, 61, 2, 2, 794, 795, 5, 104, 53,
	2, 795, 796, 7, 62, 2, 2, 796, 797, 7, 62, 2, 2, 797, 103, 3, 2, 2, 2,
	798, 803, 5, 106, 54, 2, 799, 800, 7, 90, 2, 2, 800, 802, 5, 106, 54, 2,
	801, 799, 3, 2, 2, 2, 802, 805, 3, 2, 2, 2, 803, 801, 3, 2, 2, 2, 803,
	804, 3, 2, 2, 2, 804, 808, 3, 2, 2, 2, 805, 803, 3, 2, 2, 2, 806, 808,
	3, 2, 2, 2, 807, 798, 3, 2, 2, 2, 807, 806, 3, 2, 2, 2, 808, 105, 3, 2,
	2, 2, 809, 815, 10, 10, 2, 2, 810, 812, 7, 61, 2, 2, 811, 813, 5, 12, 7,
	2, 812, 811, 3, 2, 2, 2, 812, 813, 3, 2, 2, 2, 813, 814, 3, 2, 2, 2, 814,
	816, 7, 62, 2, 2, 815, 810, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 819,
	3, 2, 2, 2, 817, 819, 3, 2, 2, 2, 818, 809, 3, 2, 2, 2, 818, 817, 3, 2,
	2, 2, 819, 107, 3, 2, 2, 2, 820, 826, 10, 11, 2, 2, 821, 822, 7, 61, 2,
	2, 822, 823, 5, 108, 55, 2, 823, 824, 7, 62, 2, 2, 824, 826, 3, 2, 2, 2,
	825, 820, 3, 2, 2, 2, 825, 821, 3, 2, 2, 2, 826, 829, 3, 2, 2, 2, 827,
	825, 3, 2, 2, 2, 827, 828, 3, 2, 2, 2, 828, 109, 3, 2, 2, 2, 829, 827,
	3, 2, 2, 2, 830, 832, 7, 77, 2, 2, 831, 833, 5, 112, 57, 2, 832, 831, 3,
	2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 849, 3, 2, 2, 2, 834, 836, 7, 77, 2,
	2, 835, 837, 5, 112, 57, 2, 836, 835, 3, 2, 2, 2, 836, 837, 3, 2, 2, 2,
	837, 838, 3, 2, 2, 2, 838, 849, 5, 110, 56, 2, 839, 841, 7, 84, 2, 2, 840,
	842, 5, 112, 57, 2, 841, 840, 3, 2, 2, 2, 841, 842, 3, 2, 2, 2, 842, 849,
	3, 2, 2, 2, 843, 845, 7, 84, 2, 2, 844, 846, 5, 112, 57, 2, 845, 844, 3,
	2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847, 849, 5, 110,
	56, 2, 848, 830, 3, 2, 2, 2, 848, 834, 3, 2, 2, 2, 848, 839, 3, 2, 2, 2,
	848, 843, 3, 2, 2, 2, 849, 111, 3, 2, 2, 2, 850, 851, 8, 57, 1, 2, 851,
	852, 5, 90, 46, 2, 852, 857, 3, 2, 2, 2, 853, 854, 12, 3, 2, 2, 854, 856,
	5, 90, 46, 2, 855, 853, 3, 2, 2, 2, 856, 859, 3, 2, 2, 2, 857, 855, 3,
	2, 2, 2, 857, 858, 3, 2, 2, 2, 858, 113, 3, 2, 2, 2, 859, 857, 3, 2, 2,
	2, 860, 866, 5, 116, 59, 2, 861, 862, 5, 116, 59, 2, 862, 863, 7, 90, 2,
	2, 863, 864, 7, 106, 2, 2, 864, 866, 3, 2, 2, 2, 865, 860, 3, 2, 2, 2,
	865, 861, 3, 2, 2, 2, 866, 115, 3, 2, 2, 2, 867, 868, 8, 59, 1, 2, 868,
	869, 5, 118, 60, 2, 869, 875, 3, 2, 2, 2, 870, 871, 12, 3, 2, 2, 871, 872,
	7, 90, 2, 2, 872, 874, 5, 118, 60, 2, 873, 870, 3, 2, 2, 2, 874, 877, 3,
	2, 2, 2, 875, 873, 3, 2, 2, 2, 875, 876, 3, 2, 2, 2, 876, 117, 3, 2, 2,
	2, 877, 875, 3, 2, 2, 2, 878, 879, 5, 52, 27, 2, 879, 880, 5, 96, 49, 2,
	880, 886, 3, 2, 2, 2, 881, 883, 5, 54, 28, 2, 882, 884, 5, 124, 63, 2,
	883, 882, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 886, 3, 2, 2, 2, 885,
	878, 3, 2, 2, 2, 885, 881, 3, 2, 2, 2, 886, 119, 3, 2, 2, 2, 887, 888,
	8, 61, 1, 2, 888, 889, 7, 107, 2, 2, 889, 895, 3, 2, 2, 2, 890, 891, 12,
	3, 2, 2, 891, 892, 7, 90, 2, 2, 892, 894, 7, 107, 2, 2, 893, 890, 3, 2,
	2, 2, 894, 897, 3, 2, 2, 2, 895, 893, 3, 2, 2, 2, 895, 896, 3, 2, 2, 2,
	896, 121, 3, 2, 2, 2, 897, 895, 3, 2, 2, 2, 898, 900, 5, 74, 38, 2, 899,
	901, 5, 124, 63, 2, 900, 899, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901, 123,
	3, 2, 2, 2, 902, 914, 5, 110, 56, 2, 903, 905, 5, 110, 56, 2, 904, 903,
	3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 906, 3, 2, 2, 2, 906, 910, 5, 126,
	64, 2, 907, 909, 5, 100, 51, 2, 908, 907, 3, 2, 2, 2, 909, 912, 3, 2, 2,
	2, 910, 908, 3, 2, 2, 2, 910, 911, 3, 2, 2, 2, 911, 914, 3, 2, 2, 2, 912,
	910, 3, 2, 2, 2, 913, 902, 3, 2, 2, 2, 913, 904, 3, 2, 2, 2, 914, 125,
	3, 2, 2, 2, 915, 916, 8, 64, 1, 2, 916, 917, 7, 61, 2, 2, 917, 918, 5,
	124, 63, 2, 918, 922, 7, 62, 2, 2, 919, 921, 5, 100, 51, 2, 920, 919, 3,
	2, 2, 2, 921, 924, 3, 2, 2, 2, 922, 920, 3, 2, 2, 2, 922, 923, 3, 2, 2,
	2, 923, 962, 3, 2, 2, 2, 924, 922, 3, 2, 2, 2, 925, 927, 7, 63, 2, 2, 926,
	928, 5, 112, 57, 2, 927, 926, 3, 2, 2, 2, 927, 928, 3, 2, 2, 2, 928, 930,
	3, 2, 2, 2, 929, 931, 5, 42, 22, 2, 930, 929, 3, 2, 2, 2, 930, 931, 3,
	2, 2, 2, 931, 932, 3, 2, 2, 2, 932, 962, 7, 64, 2, 2, 933, 934, 7, 63,
	2, 2, 934, 936, 7, 42, 2, 2, 935, 937, 5, 112, 57, 2, 936, 935, 3, 2, 2,
	2, 936, 937, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 939, 5, 42, 22, 2,
	939, 940, 7, 64, 2, 2, 940, 962, 3, 2, 2, 2, 941, 942, 7, 63, 2, 2, 942,
	943, 5, 112, 57, 2, 943, 944, 7, 42, 2, 2, 944, 945, 5, 42, 22, 2, 945,
	946, 7, 64, 2, 2, 946, 962, 3, 2, 2, 2, 947, 948, 7, 63, 2, 2, 948, 949,
	7, 77, 2, 2, 949, 962, 7, 64, 2, 2, 950, 952, 7, 61, 2, 2, 951, 953, 5,
	114, 58, 2, 952, 951, 3, 2, 2, 2, 952, 953, 3, 2, 2, 2, 953, 954, 3, 2,
	2, 2, 954, 958, 7, 62, 2, 2, 955, 957, 5, 100, 51, 2, 956, 955, 3, 2, 2,
	2, 957, 960, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2, 958, 959, 3, 2, 2, 2, 959,
	962, 3, 2, 2, 2, 960, 958, 3, 2, 2, 2, 961, 915, 3, 2, 2, 2, 961, 925,
	3, 2, 2, 2, 961, 933, 3, 2, 2, 2, 961, 941, 3, 2, 2, 2, 961, 947, 3, 2,
	2, 2, 961, 950, 3, 2, 2, 2, 962, 1006, 3, 2, 2, 2, 963, 964, 12, 7, 2,
	2, 964, 966, 7, 63, 2, 2, 965, 967, 5, 112, 57, 2, 966, 965, 3, 2, 2, 2,
	966, 967, 3, 2, 2, 2, 967, 969, 3, 2, 2, 2, 968, 970, 5, 42, 22, 2, 969,
	968, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 1005,
	7, 64, 2, 2, 972, 973, 12, 6, 2, 2, 973, 974, 7, 63, 2, 2, 974, 976, 7,
	42, 2, 2, 975, 977, 5, 112, 57, 2, 976, 975, 3, 2, 2, 2, 976, 977, 3, 2,
	2, 2, 977, 978, 3, 2, 2, 2, 978, 979, 5, 42, 22, 2, 979, 980, 7, 64, 2,
	2, 980, 1005, 3, 2, 2, 2, 981, 982, 12, 5, 2, 2, 982, 983, 7, 63, 2, 2,
	983, 984, 5, 112, 57, 2, 984, 985, 7, 42, 2, 2, 985, 986, 5, 42, 22, 2,
	986, 987, 7, 64, 2, 2, 987, 1005, 3, 2, 2, 2, 988, 989, 12, 4, 2, 2, 989,
	990, 7, 63, 2, 2, 990, 991, 7, 77, 2, 2, 991, 1005, 7, 64, 2, 2, 992, 993,
	12, 3, 2, 2, 993, 995, 7, 61, 2, 2, 994, 996, 5, 114, 58, 2, 995, 994,
	3, 2, 2, 2, 995, 996, 3, 2, 2, 2, 996, 997, 3, 2, 2, 2, 997, 1001, 7, 62,
	2, 2, 998, 1000, 5, 100, 51, 2, 999, 998, 3, 2, 2, 2, 1000, 1003, 3, 2,
	2, 2, 1001, 999, 3, 2, 2, 2, 1001, 1002, 3, 2, 2, 2, 1002, 1005, 3, 2,
	2, 2, 1003, 1001, 3, 2, 2, 2, 1004, 963, 3, 2, 2, 2, 1004, 972, 3, 2, 2,
	2, 1004, 981, 3, 2, 2, 2, 1004, 988, 3, 2, 2, 2, 1004, 992, 3, 2, 2, 2,
	1005, 1008, 3, 2, 2, 2, 1006, 1004, 3, 2, 2, 2, 1006, 1007, 3, 2, 2, 2,
	1007, 127, 3, 2, 2, 2, 1008, 1006, 3, 2, 2, 2, 1009, 1010, 7, 107, 2, 2,
	1010, 129, 3, 2, 2, 2, 1011, 1022, 5, 42, 22, 2, 1012, 1013, 7, 65, 2,
	2, 1013, 1014, 5, 132, 67, 2, 1014, 1015, 7, 66, 2, 2, 1015, 1022, 3, 2,
	2, 2, 1016, 1017, 7, 65, 2, 2, 1017, 1018, 5, 132, 67, 2, 1018, 1019, 7,
	90, 2, 2, 1019, 1020, 7, 66, 2, 2, 1020, 1022, 3, 2, 2, 2, 1021, 1011,
	3, 2, 2, 2, 1021, 1012, 3, 2, 2, 2, 1021, 1016, 3, 2, 2, 2, 1022, 131,
	3, 2, 2, 2, 1023, 1025, 8, 67, 1, 2, 1024, 1026, 5, 134, 68, 2, 1025, 1024,
	3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026, 1027, 3, 2, 2, 2, 1027, 1028,
	5, 130, 66, 2, 1028, 1037, 3, 2, 2, 2, 1029, 1030, 12, 3, 2, 2, 1030, 1032,
	7, 90, 2, 2, 1031, 1033, 5, 134, 68, 2, 1032, 1031, 3, 2, 2, 2, 1032, 1033,
	3, 2, 2, 2, 1033, 1034, 3, 2, 2, 2, 1034, 1036, 5, 130, 66, 2, 1035, 1029,
	3, 2, 2, 2, 1036, 1039, 3, 2, 2, 2, 1037, 1035, 3, 2, 2, 2, 1037, 1038,
	3, 2, 2, 2, 1038, 133, 3, 2, 2, 2, 1039, 1037, 3, 2, 2, 2, 1040, 1041,
	5, 136, 69, 2, 1041, 1042, 7, 91, 2, 2, 1042, 135, 3, 2, 2, 2, 1043, 1044,
	8, 69, 1, 2, 1044, 1045, 5, 138, 70, 2, 1045, 1050, 3, 2, 2, 2, 1046, 1047,
	12, 3, 2, 2, 1047, 1049, 5, 138, 70, 2, 1048, 1046, 3, 2, 2, 2, 1049, 1052,
	3, 2, 2, 2, 1050, 1048, 3, 2, 2, 2, 1050, 1051, 3, 2, 2, 2, 1051, 137,
	3, 2, 2, 2, 1052, 1050, 3, 2, 2, 2, 1053, 1054, 7, 63, 2, 2, 1054, 1055,
	5, 48, 25, 2, 1055, 1056, 7, 64, 2, 2, 1056, 1060, 3, 2, 2, 2, 1057, 1058,
	7, 105, 2, 2, 1058, 1060, 7, 107, 2, 2, 1059, 1053, 3, 2, 2, 2, 1059, 1057,
	3, 2, 2, 2, 1060, 139, 3, 2, 2, 2, 1061, 1062, 7, 59, 2, 2, 1062, 1063,
	7, 61, 2, 2, 1063, 1064, 5, 48, 25, 2, 1064, 1066, 7, 90, 2, 2, 1065, 1067,
	7, 110, 2, 2, 1066, 1065, 3, 2, 2, 2, 1067, 1068, 3, 2, 2, 2, 1068, 1066,
	3, 2, 2, 2, 1068, 1069, 3, 2, 2, 2, 1069, 1070, 3, 2, 2, 2, 1070, 1071,
	7, 62, 2, 2, 1071, 1072, 7, 89, 2, 2, 1072, 141, 3, 2, 2, 2, 1073, 1111,
	5, 144, 73, 2, 1074, 1111, 5, 146, 74, 2, 1075, 1111, 5, 152, 77, 2, 1076,
	1111, 5, 154, 78, 2, 1077, 1111, 5, 156, 79, 2, 1078, 1111, 5, 164, 83,
	2, 1079, 1080, 9, 12, 2, 2, 1080, 1081, 9, 13, 2, 2, 1081, 1090, 7, 61,
	2, 2, 1082, 1087, 5, 38, 20, 2, 1083, 1084, 7, 90, 2, 2, 1084, 1086, 5,
	38, 20, 2, 1085, 1083, 3, 2, 2, 2, 1086, 1089, 3, 2, 2, 2, 1087, 1085,
	3, 2, 2, 2, 1087, 1088, 3, 2, 2, 2, 1088, 1091, 3, 2, 2, 2, 1089, 1087,
	3, 2, 2, 2, 1090, 1082, 3, 2, 2, 2, 1090, 1091, 3, 2, 2, 2, 1091, 1105,
	3, 2, 2, 2, 1092, 1101, 7, 88, 2, 2, 1093, 1098, 5, 38, 20, 2, 1094, 1095,
	7, 90, 2, 2, 1095, 1097, 5, 38, 20, 2, 1096, 1094, 3, 2, 2, 2, 1097, 1100,
	3, 2, 2, 2, 1098, 1096, 3, 2, 2, 2, 1098, 1099, 3, 2, 2, 2, 1099, 1102,
	3, 2, 2, 2, 1100, 1098, 3, 2, 2, 2, 1101, 1093, 3, 2, 2, 2, 1101, 1102,
	3, 2, 2, 2, 1102, 1104, 3, 2, 2, 2, 1103, 1092, 3, 2, 2, 2, 1104, 1107,
	3, 2, 2, 2, 1105, 1103, 3, 2, 2, 2, 1105, 1106, 3, 2, 2, 2, 1106, 1108,
	3, 2, 2, 2, 1107, 1105, 3, 2, 2, 2, 1108, 1109, 7, 62, 2, 2, 1109, 1111,
	7, 89, 2, 2, 1110, 1073, 3, 2, 2, 2, 1110, 1074, 3, 2, 2, 2, 1110, 1075,
	3, 2, 2, 2, 1110, 1076, 3, 2, 2, 2, 1110, 1077, 3, 2, 2, 2, 1110, 1078,
	3, 2, 2, 2, 1110, 1079, 3, 2, 2, 2, 1111, 143, 3, 2, 2, 2, 1112, 1113,
	7, 107, 2, 2, 1113, 1114, 7, 88, 2, 2, 1114, 1124, 5, 142, 72, 2, 1115,
	1116, 7, 19, 2, 2, 1116, 1117, 5, 48, 25, 2, 1117, 1118, 7, 88, 2, 2, 1118,
	1119, 5, 142, 72, 2, 1119, 1124, 3, 2, 2, 2, 1120, 1121, 7, 23, 2, 2, 1121,
	1122, 7, 88, 2, 2, 1122, 1124, 5, 142, 72, 2, 1123, 1112, 3, 2, 2, 2, 1123,
	1115, 3, 2, 2, 2, 1123, 1120, 3, 2, 2, 2, 1124, 145, 3, 2, 2, 2, 1125,
	1127, 7, 65, 2, 2, 1126, 1128, 5, 148, 75, 2, 1127, 1126, 3, 2, 2, 2, 1127,
	1128, 3, 2, 2, 2, 1128, 1129, 3, 2, 2, 2, 1129, 1130, 7, 66, 2, 2, 1130,
	147, 3, 2, 2, 2, 1131, 1132, 8, 75, 1, 2, 1132, 1133, 5, 150, 76, 2, 1133,
	1138, 3, 2, 2, 2, 1134, 1135, 12, 3, 2, 2, 1135, 1137, 5, 150, 76, 2, 1136,
	1134, 3, 2, 2, 2, 1137, 1140, 3, 2, 2, 2, 1138, 1136, 3, 2, 2, 2, 1138,
	1139, 3, 2, 2, 2, 1139, 149, 3, 2, 2, 2, 1140, 1138, 3, 2, 2, 2, 1141,
	1144, 5, 50, 26, 2, 1142, 1144, 5, 142, 72, 2, 1143, 1141, 3, 2, 2, 2,
	1143, 1142, 3, 2, 2, 2, 1144, 151, 3, 2, 2, 2, 1145, 1147, 5, 46, 24, 2,
	1146, 1145, 3, 2, 2, 2, 1146, 1147, 3, 2, 2, 2, 1147, 1148, 3, 2, 2, 2,
	1148, 1149, 7, 89, 2, 2, 1149, 153, 3, 2, 2, 2, 1150, 1151, 7, 32, 2, 2,
	1151, 1152, 7, 61, 2, 2, 1152, 1153, 5, 46, 24, 2, 1153, 1154, 7, 62, 2,
	2, 1154, 1157, 5, 142, 72, 2, 1155, 1156, 7, 26, 2, 2, 1156, 1158, 5, 142,
	72, 2, 1157, 1155, 3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2, 1158, 1166, 3, 2,
	2, 2, 1159, 1160, 7, 44, 2, 2, 1160, 1161, 7, 61, 2, 2, 1161, 1162, 5,
	46, 24, 2, 1162, 1163, 7, 62, 2, 2, 1163, 1164, 5, 142, 72, 2, 1164, 1166,
	3, 2, 2, 2, 1165, 1150, 3, 2, 2, 2, 1165, 1159, 3, 2, 2, 2, 1166, 155,
	3, 2, 2, 2, 1167, 1168, 7, 50, 2, 2, 1168, 1169, 7, 61, 2, 2, 1169, 1170,
	5, 46, 24, 2, 1170, 1171, 7, 62, 2, 2, 1171, 1172, 5, 142, 72, 2, 1172,
	1188, 3, 2, 2, 2, 1173, 1174, 7, 24, 2, 2, 1174, 1175, 5, 142, 72, 2, 1175,
	1176, 7, 50, 2, 2, 1176, 1177, 7, 61, 2, 2, 1177, 1178, 5, 46, 24, 2, 1178,
	1179, 7, 62, 2, 2, 1179, 1180, 7, 89, 2, 2, 1180, 1188, 3, 2, 2, 2, 1181,
	1182, 7, 30, 2, 2, 1182, 1183, 7, 61, 2, 2, 1183, 1184, 5, 158, 80, 2,
	1184, 1185, 7, 62, 2, 2, 1185, 1186, 5, 142, 72, 2, 1186, 1188, 3, 2, 2,
	2, 1187, 1167, 3, 2, 2, 2, 1187, 1173, 3, 2, 2, 2, 1187, 1181, 3, 2, 2,
	2, 1188, 157, 3, 2, 2, 2, 1189, 1190, 5, 160, 81, 2, 1190, 1192, 7, 89,
	2, 2, 1191, 1193, 5, 162, 82, 2, 1192, 1191, 3, 2, 2, 2, 1192, 1193, 3,
	2, 2, 2, 1193, 1194, 3, 2, 2, 2, 1194, 1196, 7, 89, 2, 2, 1195, 1197, 5,
	162, 82, 2, 1196, 1195, 3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 1210,
	3, 2, 2, 2, 1198, 1200, 5, 46, 24, 2, 1199, 1198, 3, 2, 2, 2, 1199, 1200,
	3, 2, 2, 2, 1200, 1201, 3, 2, 2, 2, 1201, 1203, 7, 89, 2, 2, 1202, 1204,
	5, 162, 82, 2, 1203, 1202, 3, 2, 2, 2, 1203, 1204, 3, 2, 2, 2, 1204, 1205,
	3, 2, 2, 2, 1205, 1207, 7, 89, 2, 2, 1206, 1208, 5, 162, 82, 2, 1207, 1206,
	3, 2, 2, 2, 1207, 1208, 3, 2, 2, 2, 1208, 1210, 3, 2, 2, 2, 1209, 1189,
	3, 2, 2, 2, 1209, 1199, 3, 2, 2, 2, 1210, 159, 3, 2, 2, 2, 1211, 1212,
	5, 52, 27, 2, 1212, 1213, 5, 58, 30, 2, 1213, 1216, 3, 2, 2, 2, 1214, 1216,
	5, 52, 27, 2, 1215, 1211, 3, 2, 2, 2, 1215, 1214, 3, 2, 2, 2, 1216, 161,
	3, 2, 2, 2, 1217, 1218, 8, 82, 1, 2, 1218, 1219, 5, 42, 22, 2, 1219, 1225,
	3, 2, 2, 2, 1220, 1221, 12, 3, 2, 2, 1221, 1222, 7, 90, 2, 2, 1222, 1224,
	5, 42, 22, 2, 1223, 1220, 3, 2, 2, 2, 1224, 1227, 3, 2, 2, 2, 1225, 1223,
	3, 2, 2, 2, 1225, 1226, 3, 2, 2, 2, 1226, 163, 3, 2, 2, 2, 1227, 1225,
	3, 2, 2, 2, 1228, 1229, 7, 31, 2, 2, 1229, 1230, 7, 107, 2, 2, 1230, 1245,
	7, 89, 2, 2, 1231, 1232, 7, 22, 2, 2, 1232, 1245, 7, 89, 2, 2, 1233, 1234,
	7, 18, 2, 2, 1234, 1245, 7, 89, 2, 2, 1235, 1237, 7, 38, 2, 2, 1236, 1238,
	5, 46, 24, 2, 1237, 1236, 3, 2, 2, 2, 1237, 1238, 3, 2, 2, 2, 1238, 1239,
	3, 2, 2, 2, 1239, 1245, 7, 89, 2, 2, 1240, 1241, 7, 31, 2, 2, 1241, 1242,
	5, 14, 8, 2, 1242, 1243, 7, 89, 2, 2, 1243, 1245, 3, 2, 2, 2, 1244, 1228,
	3, 2, 2, 2, 1244, 1231, 3, 2, 2, 2, 1244, 1233, 3, 2, 2, 2, 1244, 1235,
	3, 2, 2, 2, 1244, 1240, 3, 2, 2, 2, 1245, 165, 3, 2, 2, 2, 1246, 1248,
	5, 168, 85, 2, 1247, 1246, 3, 2, 2, 2, 1247, 1248, 3, 2, 2, 2, 1248, 1249,
	3, 2, 2, 2, 1249, 1250, 7, 2, 2, 3, 1250, 167, 3, 2, 2, 2, 1251, 1252,
	8, 85, 1, 2, 1252, 1253, 5, 170, 86, 2, 1253, 1258, 3, 2, 2, 2, 1254, 1255,
	12, 3, 2, 2, 1255, 1257, 5, 170, 86, 2, 1256, 1254, 3, 2, 2, 2, 1257, 1260,
	3, 2, 2, 2, 1258, 1256, 3, 2, 2, 2, 1258, 1259, 3, 2, 2, 2, 1259, 169,
	3, 2, 2, 2, 1260, 1258, 3, 2, 2, 2, 1261, 1265, 5, 172, 87, 2, 1262, 1265,
	5, 50, 26, 2, 1263, 1265, 7, 89, 2, 2, 1264, 1261, 3, 2, 2, 2, 1264, 1262,
	3, 2, 2, 2, 1264, 1263, 3, 2, 2, 2, 1265, 171, 3, 2, 2, 2, 1266, 1268,
	5, 52, 27, 2, 1267, 1266, 3, 2, 2, 2, 1267, 1268, 3, 2, 2, 2, 1268, 1269,
	3, 2, 2, 2, 1269, 1271, 5, 96, 49, 2, 1270, 1272, 5, 174, 88, 2, 1271,
	1270, 3, 2, 2, 2, 1271, 1272, 3, 2, 2, 2, 1272, 1273, 3, 2, 2, 2, 1273,
	1274, 5, 146, 74, 2, 1274, 173, 3, 2, 2, 2, 1275, 1276, 8, 88, 1, 2, 1276,
	1277, 5, 50, 26, 2, 1277, 1282, 3, 2, 2, 2, 1278, 1279, 12, 3, 2, 2, 1279,
	1281, 5, 50, 26, 2, 1280, 1278, 3, 2, 2, 2, 1281, 1284, 3, 2, 2, 2, 1282,
	1280, 3, 2, 2, 2, 1282, 1283, 3, 2, 2, 2, 1283, 175, 3, 2, 2, 2, 1284,
	1282, 3, 2, 2, 2, 142, 181, 189, 209, 226, 236, 272, 282, 295, 297, 308,
	333, 350, 364, 366, 378, 380, 392, 394, 412, 414, 426, 428, 439, 450, 461,
	472, 483, 492, 500, 512, 525, 530, 535, 542, 552, 560, 578, 582, 591, 602,
	607, 612, 616, 620, 622, 632, 637, 641, 645, 653, 662, 672, 680, 697, 709,
	712, 718, 730, 735, 738, 745, 760, 772, 775, 777, 785, 789, 803, 807, 812,
	815, 818, 825, 827, 832, 836, 841, 845, 848, 857, 865, 875, 883, 885, 895,
	900, 904, 910, 913, 922, 927, 930, 936, 952, 958, 961, 966, 969, 976, 995,
	1001, 1004, 1006, 1021, 1025, 1032, 1037, 1050, 1059, 1068, 1087, 1090,
	1098, 1101, 1105, 1110, 1123, 1127, 1138, 1143, 1146, 1157, 1165, 1187,
	1192, 1196, 1199, 1203, 1207, 1209, 1215, 1225, 1237, 1244, 1247, 1258,
	1264, 1267, 1271, 1282,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", "'__m128'",
	"'__m128d'", "'__m128i'", "'__typeof__'", "'__inline__'", "'__stdcall'",
	"'__declspec'", "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'",
	"'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'",
	"'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'",
	"'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", "'restrict'",
	"'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'",
	"'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'",
	"'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'",
	"'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", "'_Thread_local'",
	"'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='",
	"'<<'", "'>>'", "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'",
	"'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','",
	"'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='",
	"'^='", "'|='", "'=='", "'!='", "'->'", "'.'", "'...'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Auto", "Break",
	"Case", "Char", "Const", "Continue", "Default", "Do", "Double", "Else",
	"Enum", "Extern", "Float", "For", "Goto", "If", "Inline", "Int", "Long",
	"Register", "Restrict", "Return", "Short", "Signed", "Sizeof", "Static",
	"Struct", "Switch", "Typedef", "Union", "Unsigned", "Void", "Volatile",
	"While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", "Generic",
	"Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", "LeftParen", "RightParen",
	"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "LessEqual",
	"Greater", "GreaterEqual", "LeftShift", "RightShift", "Plus", "PlusPlus",
	"Minus", "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr",
	"Caret", "Not", "Tilde", "Question", "Colon", "Semi", "Comma", "Assign",
	"StarAssign", "DivAssign", "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign",
	"RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual",
	"Arrow", "Dot", "Ellipsis", "Identifier", "Constant", "DigitSequence",
	"StringLiteral", "ComplexDefine", "AsmBlock", "LineAfterPreprocessing",
	"LineDirective", "PragmaDirective", "Whitespace", "Newline", "BlockComment",
	"LineComment",
}

var ruleNames = []string{
	"primaryExpression", "genericSelection", "genericAssocList", "genericAssociation",
	"postfixExpression", "argumentExpressionList", "unaryExpression", "unaryOperator",
	"castExpression", "multiplicativeExpression", "additiveExpression", "shiftExpression",
	"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression",
	"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression",
	"conditionalExpression", "assignmentExpression", "assignmentOperator",
	"expression", "constantExpression", "declaration", "declarationSpecifiers",
	"declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList",
	"initDeclarator", "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier",
	"structOrUnion", "structDeclarationList", "structDeclaration", "specifierQualifierList",
	"structDeclaratorList", "structDeclarator", "enumSpecifier", "enumeratorList",
	"enumerator", "enumerationConstant", "atomicTypeSpecifier", "typeQualifier",
	"functionSpecifier", "alignmentSpecifier", "declarator", "directDeclarator",
	"gccDeclaratorExtension", "gccAttributeSpecifier", "gccAttributeList",
	"gccAttribute", "nestedParenthesesBlock", "pointer", "typeQualifierList",
	"parameterTypeList", "parameterList", "parameterDeclaration", "identifierList",
	"typeName", "abstractDeclarator", "directAbstractDeclarator", "typedefName",
	"initializer", "initializerList", "designation", "designatorList", "designator",
	"staticAssertDeclaration", "statement", "labeledStatement", "compoundStatement",
	"blockItemList", "blockItem", "expressionStatement", "selectionStatement",
	"iterationStatement", "forCondition", "forDeclaration", "forExpression",
	"jumpStatement", "compilationUnit", "translationUnit", "externalDeclaration",
	"functionDefinition", "declarationList",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type CParser struct {
	*antlr.BaseParser
}

func NewCParser(input antlr.TokenStream) *CParser {
	this := new(CParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "C.g4"

	return this
}

// CParser tokens.
const (
	CParserEOF                    = antlr.TokenEOF
	CParserT__0                   = 1
	CParserT__1                   = 2
	CParserT__2                   = 3
	CParserT__3                   = 4
	CParserT__4                   = 5
	CParserT__5                   = 6
	CParserT__6                   = 7
	CParserT__7                   = 8
	CParserT__8                   = 9
	CParserT__9                   = 10
	CParserT__10                  = 11
	CParserT__11                  = 12
	CParserT__12                  = 13
	CParserT__13                  = 14
	CParserAuto                   = 15
	CParserBreak                  = 16
	CParserCase                   = 17
	CParserChar                   = 18
	CParserConst                  = 19
	CParserContinue               = 20
	CParserDefault                = 21
	CParserDo                     = 22
	CParserDouble                 = 23
	CParserElse                   = 24
	CParserEnum                   = 25
	CParserExtern                 = 26
	CParserFloat                  = 27
	CParserFor                    = 28
	CParserGoto                   = 29
	CParserIf                     = 30
	CParserInline                 = 31
	CParserInt                    = 32
	CParserLong                   = 33
	CParserRegister               = 34
	CParserRestrict               = 35
	CParserReturn                 = 36
	CParserShort                  = 37
	CParserSigned                 = 38
	CParserSizeof                 = 39
	CParserStatic                 = 40
	CParserStruct                 = 41
	CParserSwitch                 = 42
	CParserTypedef                = 43
	CParserUnion                  = 44
	CParserUnsigned               = 45
	CParserVoid                   = 46
	CParserVolatile               = 47
	CParserWhile                  = 48
	CParserAlignas                = 49
	CParserAlignof                = 50
	CParserAtomic                 = 51
	CParserBool                   = 52
	CParserComplex                = 53
	CParserGeneric                = 54
	CParserImaginary              = 55
	CParserNoreturn               = 56
	CParserStaticAssert           = 57
	CParserThreadLocal            = 58
	CParserLeftParen              = 59
	CParserRightParen             = 60
	CParserLeftBracket            = 61
	CParserRightBracket           = 62
	CParserLeftBrace              = 63
	CParserRightBrace             = 64
	CParserLess                   = 65
	CParserLessEqual              = 66
	CParserGreater                = 67
	CParserGreaterEqual           = 68
	CParserLeftShift              = 69
	CParserRightShift             = 70
	CParserPlus                   = 71
	CParserPlusPlus               = 72
	CParserMinus                  = 73
	CParserMinusMinus             = 74
	CParserStar                   = 75
	CParserDiv                    = 76
	CParserMod                    = 77
	CParserAnd                    = 78
	CParserOr                     = 79
	CParserAndAnd                 = 80
	CParserOrOr                   = 81
	CParserCaret                  = 82
	CParserNot                    = 83
	CParserTilde                  = 84
	CParserQuestion               = 85
	CParserColon                  = 86
	CParserSemi                   = 87
	CParserComma                  = 88
	CParserAssign                 = 89
	CParserStarAssign             = 90
	CParserDivAssign              = 91
	CParserModAssign              = 92
	CParserPlusAssign             = 93
	CParserMinusAssign            = 94
	CParserLeftShiftAssign        = 95
	CParserRightShiftAssign       = 96
	CParserAndAssign              = 97
	CParserXorAssign              = 98
	CParserOrAssign               = 99
	CParserEqual                  = 100
	CParserNotEqual               = 101
	CParserArrow                  = 102
	CParserDot                    = 103
	CParserEllipsis               = 104
	CParserIdentifier             = 105
	CParserConstant               = 106
	CParserDigitSequence          = 107
	CParserStringLiteral          = 108
	CParserComplexDefine          = 109
	CParserAsmBlock               = 110
	CParserLineAfterPreprocessing = 111
	CParserLineDirective          = 112
	CParserPragmaDirective        = 113
	CParserWhitespace             = 114
	CParserNewline                = 115
	CParserBlockComment           = 116
	CParserLineComment            = 117
)

// CParser rules.
const (
	CParserRULE_primaryExpression        = 0
	CParserRULE_genericSelection         = 1
	CParserRULE_genericAssocList         = 2
	CParserRULE_genericAssociation       = 3
	CParserRULE_postfixExpression        = 4
	CParserRULE_argumentExpressionList   = 5
	CParserRULE_unaryExpression          = 6
	CParserRULE_unaryOperator            = 7
	CParserRULE_castExpression           = 8
	CParserRULE_multiplicativeExpression = 9
	CParserRULE_additiveExpression       = 10
	CParserRULE_shiftExpression          = 11
	CParserRULE_relationalExpression     = 12
	CParserRULE_equalityExpression       = 13
	CParserRULE_andExpression            = 14
	CParserRULE_exclusiveOrExpression    = 15
	CParserRULE_inclusiveOrExpression    = 16
	CParserRULE_logicalAndExpression     = 17
	CParserRULE_logicalOrExpression      = 18
	CParserRULE_conditionalExpression    = 19
	CParserRULE_assignmentExpression     = 20
	CParserRULE_assignmentOperator       = 21
	CParserRULE_expression               = 22
	CParserRULE_constantExpression       = 23
	CParserRULE_declaration              = 24
	CParserRULE_declarationSpecifiers    = 25
	CParserRULE_declarationSpecifiers2   = 26
	CParserRULE_declarationSpecifier     = 27
	CParserRULE_initDeclaratorList       = 28
	CParserRULE_initDeclarator           = 29
	CParserRULE_storageClassSpecifier    = 30
	CParserRULE_typeSpecifier            = 31
	CParserRULE_structOrUnionSpecifier   = 32
	CParserRULE_structOrUnion            = 33
	CParserRULE_structDeclarationList    = 34
	CParserRULE_structDeclaration        = 35
	CParserRULE_specifierQualifierList   = 36
	CParserRULE_structDeclaratorList     = 37
	CParserRULE_structDeclarator         = 38
	CParserRULE_enumSpecifier            = 39
	CParserRULE_enumeratorList           = 40
	CParserRULE_enumerator               = 41
	CParserRULE_enumerationConstant      = 42
	CParserRULE_atomicTypeSpecifier      = 43
	CParserRULE_typeQualifier            = 44
	CParserRULE_functionSpecifier        = 45
	CParserRULE_alignmentSpecifier       = 46
	CParserRULE_declarator               = 47
	CParserRULE_directDeclarator         = 48
	CParserRULE_gccDeclaratorExtension   = 49
	CParserRULE_gccAttributeSpecifier    = 50
	CParserRULE_gccAttributeList         = 51
	CParserRULE_gccAttribute             = 52
	CParserRULE_nestedParenthesesBlock   = 53
	CParserRULE_pointer                  = 54
	CParserRULE_typeQualifierList        = 55
	CParserRULE_parameterTypeList        = 56
	CParserRULE_parameterList            = 57
	CParserRULE_parameterDeclaration     = 58
	CParserRULE_identifierList           = 59
	CParserRULE_typeName                 = 60
	CParserRULE_abstractDeclarator       = 61
	CParserRULE_directAbstractDeclarator = 62
	CParserRULE_typedefName              = 63
	CParserRULE_initializer              = 64
	CParserRULE_initializerList          = 65
	CParserRULE_designation              = 66
	CParserRULE_designatorList           = 67
	CParserRULE_designator               = 68
	CParserRULE_staticAssertDeclaration  = 69
	CParserRULE_statement                = 70
	CParserRULE_labeledStatement         = 71
	CParserRULE_compoundStatement        = 72
	CParserRULE_blockItemList            = 73
	CParserRULE_blockItem                = 74
	CParserRULE_expressionStatement      = 75
	CParserRULE_selectionStatement       = 76
	CParserRULE_iterationStatement       = 77
	CParserRULE_forCondition             = 78
	CParserRULE_forDeclaration           = 79
	CParserRULE_forExpression            = 80
	CParserRULE_jumpStatement            = 81
	CParserRULE_compilationUnit          = 82
	CParserRULE_translationUnit          = 83
	CParserRULE_externalDeclaration      = 84
	CParserRULE_functionDefinition       = 85
	CParserRULE_declarationList          = 86
)

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *PrimaryExpressionContext) Constant() antlr.TerminalNode {
	return s.GetToken(CParserConstant, 0)
}

func (s *PrimaryExpressionContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(CParserStringLiteral)
}

func (s *PrimaryExpressionContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(CParserStringLiteral, i)
}

func (s *PrimaryExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PrimaryExpressionContext) GenericSelection() IGenericSelectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericSelectionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericSelectionContext)
}

func (s *PrimaryExpressionContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *PrimaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *PrimaryExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (p *CParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CParserRULE_primaryExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(207)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(174)
			p.Match(CParserIdentifier)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(175)
			p.Match(CParserConstant)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(177)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				{
					p.SetState(176)
					p.Match(CParserStringLiteral)
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(179)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(181)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(182)
			p.expression(0)
		}
		{
			p.SetState(183)
			p.Match(CParserRightParen)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(185)
			p.GenericSelection()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(187)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserT__0 {
			{
				p.SetState(186)
				p.Match(CParserT__0)
			}

		}
		{
			p.SetState(189)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(190)
			p.CompoundStatement()
		}
		{
			p.SetState(191)
			p.Match(CParserRightParen)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(193)
			p.Match(CParserT__1)
		}
		{
			p.SetState(194)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(195)
			p.UnaryExpression()
		}
		{
			p.SetState(196)
			p.Match(CParserComma)
		}
		{
			p.SetState(197)
			p.TypeName()
		}
		{
			p.SetState(198)
			p.Match(CParserRightParen)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(200)
			p.Match(CParserT__2)
		}
		{
			p.SetState(201)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(202)
			p.TypeName()
		}
		{
			p.SetState(203)
			p.Match(CParserComma)
		}
		{
			p.SetState(204)
			p.UnaryExpression()
		}
		{
			p.SetState(205)
			p.Match(CParserRightParen)
		}

	}

	return localctx
}

// IGenericSelectionContext is an interface to support dynamic dispatch.
type IGenericSelectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericSelectionContext differentiates from other interfaces.
	IsGenericSelectionContext()
}

type GenericSelectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericSelectionContext() *GenericSelectionContext {
	var p = new(GenericSelectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_genericSelection
	return p
}

func (*GenericSelectionContext) IsGenericSelectionContext() {}

func NewGenericSelectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericSelectionContext {
	var p = new(GenericSelectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_genericSelection

	return p
}

func (s *GenericSelectionContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericSelectionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *GenericSelectionContext) GenericAssocList() IGenericAssocListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericAssocListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericAssocListContext)
}

func (s *GenericSelectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericSelectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericSelectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGenericSelection(s)
	}
}

func (s *GenericSelectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGenericSelection(s)
	}
}

func (p *CParser) GenericSelection() (localctx IGenericSelectionContext) {
	localctx = NewGenericSelectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CParserRULE_genericSelection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(209)
		p.Match(CParserGeneric)
	}
	{
		p.SetState(210)
		p.Match(CParserLeftParen)
	}
	{
		p.SetState(211)
		p.AssignmentExpression()
	}
	{
		p.SetState(212)
		p.Match(CParserComma)
	}
	{
		p.SetState(213)
		p.genericAssocList(0)
	}
	{
		p.SetState(214)
		p.Match(CParserRightParen)
	}

	return localctx
}

// IGenericAssocListContext is an interface to support dynamic dispatch.
type IGenericAssocListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericAssocListContext differentiates from other interfaces.
	IsGenericAssocListContext()
}

type GenericAssocListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericAssocListContext() *GenericAssocListContext {
	var p = new(GenericAssocListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_genericAssocList
	return p
}

func (*GenericAssocListContext) IsGenericAssocListContext() {}

func NewGenericAssocListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericAssocListContext {
	var p = new(GenericAssocListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_genericAssocList

	return p
}

func (s *GenericAssocListContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericAssocListContext) GenericAssociation() IGenericAssociationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericAssociationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericAssociationContext)
}

func (s *GenericAssocListContext) GenericAssocList() IGenericAssocListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericAssocListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericAssocListContext)
}

func (s *GenericAssocListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericAssocListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericAssocListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGenericAssocList(s)
	}
}

func (s *GenericAssocListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGenericAssocList(s)
	}
}

func (p *CParser) GenericAssocList() (localctx IGenericAssocListContext) {
	return p.genericAssocList(0)
}

func (p *CParser) genericAssocList(_p int) (localctx IGenericAssocListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewGenericAssocListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IGenericAssocListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 4
	p.EnterRecursionRule(localctx, 4, CParserRULE_genericAssocList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(217)
		p.GenericAssociation()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewGenericAssocListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_genericAssocList)
			p.SetState(219)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(220)
				p.Match(CParserComma)
			}
			{
				p.SetState(221)
				p.GenericAssociation()
			}

		}
		p.SetState(226)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext())
	}

	return localctx
}

// IGenericAssociationContext is an interface to support dynamic dispatch.
type IGenericAssociationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericAssociationContext differentiates from other interfaces.
	IsGenericAssociationContext()
}

type GenericAssociationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericAssociationContext() *GenericAssociationContext {
	var p = new(GenericAssociationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_genericAssociation
	return p
}

func (*GenericAssociationContext) IsGenericAssociationContext() {}

func NewGenericAssociationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericAssociationContext {
	var p = new(GenericAssociationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_genericAssociation

	return p
}

func (s *GenericAssociationContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericAssociationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *GenericAssociationContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *GenericAssociationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericAssociationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericAssociationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGenericAssociation(s)
	}
}

func (s *GenericAssociationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGenericAssociation(s)
	}
}

func (p *CParser) GenericAssociation() (localctx IGenericAssociationContext) {
	localctx = NewGenericAssociationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CParserRULE_genericAssociation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(234)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__0, CParserT__3, CParserT__4, CParserT__5, CParserT__6, CParserChar, CParserConst, CParserDouble, CParserEnum, CParserFloat, CParserInt, CParserLong, CParserRestrict, CParserShort, CParserSigned, CParserStruct, CParserUnion, CParserUnsigned, CParserVoid, CParserVolatile, CParserAtomic, CParserBool, CParserComplex, CParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(227)
			p.TypeName()
		}
		{
			p.SetState(228)
			p.Match(CParserColon)
		}
		{
			p.SetState(229)
			p.AssignmentExpression()
		}

	case CParserDefault:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(231)
			p.Match(CParserDefault)
		}
		{
			p.SetState(232)
			p.Match(CParserColon)
		}
		{
			p.SetState(233)
			p.AssignmentExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_postfixExpression
	return p
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *PostfixExpressionContext) InitializerList() IInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *PostfixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PostfixExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PostfixExpressionContext) ArgumentExpressionList() IArgumentExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentExpressionListContext)
}

func (s *PostfixExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterPostfixExpression(s)
	}
}

func (s *PostfixExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitPostfixExpression(s)
	}
}

func (p *CParser) PostfixExpression() (localctx IPostfixExpressionContext) {
	return p.postfixExpression(0)
}

func (p *CParser) postfixExpression(_p int) (localctx IPostfixExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPostfixExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 8
	p.EnterRecursionRule(localctx, 8, CParserRULE_postfixExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(270)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(237)
			p.PrimaryExpression()
		}

	case 2:
		{
			p.SetState(238)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(239)
			p.TypeName()
		}
		{
			p.SetState(240)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(241)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(242)
			p.initializerList(0)
		}
		{
			p.SetState(243)
			p.Match(CParserRightBrace)
		}

	case 3:
		{
			p.SetState(245)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(246)
			p.TypeName()
		}
		{
			p.SetState(247)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(248)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(249)
			p.initializerList(0)
		}
		{
			p.SetState(250)
			p.Match(CParserComma)
		}
		{
			p.SetState(251)
			p.Match(CParserRightBrace)
		}

	case 4:
		{
			p.SetState(253)
			p.Match(CParserT__0)
		}
		{
			p.SetState(254)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(255)
			p.TypeName()
		}
		{
			p.SetState(256)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(257)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(258)
			p.initializerList(0)
		}
		{
			p.SetState(259)
			p.Match(CParserRightBrace)
		}

	case 5:
		{
			p.SetState(261)
			p.Match(CParserT__0)
		}
		{
			p.SetState(262)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(263)
			p.TypeName()
		}
		{
			p.SetState(264)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(265)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(266)
			p.initializerList(0)
		}
		{
			p.SetState(267)
			p.Match(CParserComma)
		}
		{
			p.SetState(268)
			p.Match(CParserRightBrace)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(295)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(293)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(272)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(273)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(274)
					p.expression(0)
				}
				{
					p.SetState(275)
					p.Match(CParserRightBracket)
				}

			case 2:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(277)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(278)
					p.Match(CParserLeftParen)
				}
				p.SetState(280)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
					{
						p.SetState(279)
						p.argumentExpressionList(0)
					}

				}
				{
					p.SetState(282)
					p.Match(CParserRightParen)
				}

			case 3:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(283)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(284)
					p.Match(CParserDot)
				}
				{
					p.SetState(285)
					p.Match(CParserIdentifier)
				}

			case 4:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(286)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(287)
					p.Match(CParserArrow)
				}
				{
					p.SetState(288)
					p.Match(CParserIdentifier)
				}

			case 5:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(289)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(290)
					p.Match(CParserPlusPlus)
				}

			case 6:
				localctx = NewPostfixExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_postfixExpression)
				p.SetState(291)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(292)
					p.Match(CParserMinusMinus)
				}

			}

		}
		p.SetState(297)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 8, p.GetParserRuleContext())
	}

	return localctx
}

// IArgumentExpressionListContext is an interface to support dynamic dispatch.
type IArgumentExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentExpressionListContext differentiates from other interfaces.
	IsArgumentExpressionListContext()
}

type ArgumentExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentExpressionListContext() *ArgumentExpressionListContext {
	var p = new(ArgumentExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_argumentExpressionList
	return p
}

func (*ArgumentExpressionListContext) IsArgumentExpressionListContext() {}

func NewArgumentExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentExpressionListContext {
	var p = new(ArgumentExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_argumentExpressionList

	return p
}

func (s *ArgumentExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentExpressionListContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ArgumentExpressionListContext) ArgumentExpressionList() IArgumentExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentExpressionListContext)
}

func (s *ArgumentExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterArgumentExpressionList(s)
	}
}

func (s *ArgumentExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitArgumentExpressionList(s)
	}
}

func (p *CParser) ArgumentExpressionList() (localctx IArgumentExpressionListContext) {
	return p.argumentExpressionList(0)
}

func (p *CParser) argumentExpressionList(_p int) (localctx IArgumentExpressionListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewArgumentExpressionListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IArgumentExpressionListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 10
	p.EnterRecursionRule(localctx, 10, CParserRULE_argumentExpressionList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(299)
		p.AssignmentExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewArgumentExpressionListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_argumentExpressionList)
			p.SetState(301)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(302)
				p.Match(CParserComma)
			}
			{
				p.SetState(303)
				p.AssignmentExpression()
			}

		}
		p.SetState(308)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())
	}

	return localctx
}

// IUnaryExpressionContext is an interface to support dynamic dispatch.
type IUnaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExpressionContext differentiates from other interfaces.
	IsUnaryExpressionContext()
}

type UnaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExpressionContext() *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_unaryExpression
	return p
}

func (*UnaryExpressionContext) IsUnaryExpressionContext() {}

func NewUnaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExpressionContext {
	var p = new(UnaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_unaryExpression

	return p
}

func (s *UnaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *UnaryExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *UnaryExpressionContext) UnaryOperator() IUnaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryOperatorContext)
}

func (s *UnaryExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *UnaryExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UnaryExpressionContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *UnaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterUnaryExpression(s)
	}
}

func (s *UnaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitUnaryExpression(s)
	}
}

func (p *CParser) UnaryExpression() (localctx IUnaryExpressionContext) {
	localctx = NewUnaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CParserRULE_unaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(331)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(309)
			p.postfixExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(310)
			p.Match(CParserPlusPlus)
		}
		{
			p.SetState(311)
			p.UnaryExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(312)
			p.Match(CParserMinusMinus)
		}
		{
			p.SetState(313)
			p.UnaryExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(314)
			p.UnaryOperator()
		}
		{
			p.SetState(315)
			p.CastExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(317)
			p.Match(CParserSizeof)
		}
		{
			p.SetState(318)
			p.UnaryExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(319)
			p.Match(CParserSizeof)
		}
		{
			p.SetState(320)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(321)
			p.TypeName()
		}
		{
			p.SetState(322)
			p.Match(CParserRightParen)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(324)
			p.Match(CParserAlignof)
		}
		{
			p.SetState(325)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(326)
			p.TypeName()
		}
		{
			p.SetState(327)
			p.Match(CParserRightParen)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(329)
			p.Match(CParserAndAnd)
		}
		{
			p.SetState(330)
			p.Match(CParserIdentifier)
		}

	}

	return localctx
}

// IUnaryOperatorContext is an interface to support dynamic dispatch.
type IUnaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryOperatorContext differentiates from other interfaces.
	IsUnaryOperatorContext()
}

type UnaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryOperatorContext() *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_unaryOperator
	return p
}

func (*UnaryOperatorContext) IsUnaryOperatorContext() {}

func NewUnaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryOperatorContext {
	var p = new(UnaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_unaryOperator

	return p
}

func (s *UnaryOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *UnaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterUnaryOperator(s)
	}
}

func (s *UnaryOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitUnaryOperator(s)
	}
}

func (p *CParser) UnaryOperator() (localctx IUnaryOperatorContext) {
	localctx = NewUnaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CParserRULE_unaryOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(333)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ICastExpressionContext is an interface to support dynamic dispatch.
type ICastExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCastExpressionContext differentiates from other interfaces.
	IsCastExpressionContext()
}

type CastExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCastExpressionContext() *CastExpressionContext {
	var p = new(CastExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_castExpression
	return p
}

func (*CastExpressionContext) IsCastExpressionContext() {}

func NewCastExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CastExpressionContext {
	var p = new(CastExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_castExpression

	return p
}

func (s *CastExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *CastExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *CastExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *CastExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *CastExpressionContext) DigitSequence() antlr.TerminalNode {
	return s.GetToken(CParserDigitSequence, 0)
}

func (s *CastExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CastExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterCastExpression(s)
	}
}

func (s *CastExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitCastExpression(s)
	}
}

func (p *CParser) CastExpression() (localctx ICastExpressionContext) {
	localctx = NewCastExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CParserRULE_castExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(348)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(335)
			p.UnaryExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(336)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(337)
			p.TypeName()
		}
		{
			p.SetState(338)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(339)
			p.CastExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(341)
			p.Match(CParserT__0)
		}
		{
			p.SetState(342)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(343)
			p.TypeName()
		}
		{
			p.SetState(344)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(345)
			p.CastExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(347)
			p.Match(CParserDigitSequence)
		}

	}

	return localctx
}

// IMultiplicativeExpressionContext is an interface to support dynamic dispatch.
type IMultiplicativeExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMultiplicativeExpressionContext differentiates from other interfaces.
	IsMultiplicativeExpressionContext()
}

type MultiplicativeExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMultiplicativeExpressionContext() *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_multiplicativeExpression
	return p
}

func (*MultiplicativeExpressionContext) IsMultiplicativeExpressionContext() {}

func NewMultiplicativeExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MultiplicativeExpressionContext {
	var p = new(MultiplicativeExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_multiplicativeExpression

	return p
}

func (s *MultiplicativeExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *MultiplicativeExpressionContext) CastExpression() ICastExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICastExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICastExpressionContext)
}

func (s *MultiplicativeExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *MultiplicativeExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultiplicativeExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MultiplicativeExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterMultiplicativeExpression(s)
	}
}

func (s *MultiplicativeExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitMultiplicativeExpression(s)
	}
}

func (p *CParser) MultiplicativeExpression() (localctx IMultiplicativeExpressionContext) {
	return p.multiplicativeExpression(0)
}

func (p *CParser) multiplicativeExpression(_p int) (localctx IMultiplicativeExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewMultiplicativeExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IMultiplicativeExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 18
	p.EnterRecursionRule(localctx, 18, CParserRULE_multiplicativeExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(351)
		p.CastExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(364)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(362)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) {
			case 1:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_multiplicativeExpression)
				p.SetState(353)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(354)
					p.Match(CParserStar)
				}
				{
					p.SetState(355)
					p.CastExpression()
				}

			case 2:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_multiplicativeExpression)
				p.SetState(356)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(357)
					p.Match(CParserDiv)
				}
				{
					p.SetState(358)
					p.CastExpression()
				}

			case 3:
				localctx = NewMultiplicativeExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_multiplicativeExpression)
				p.SetState(359)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(360)
					p.Match(CParserMod)
				}
				{
					p.SetState(361)
					p.CastExpression()
				}

			}

		}
		p.SetState(366)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
	}

	return localctx
}

// IAdditiveExpressionContext is an interface to support dynamic dispatch.
type IAdditiveExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAdditiveExpressionContext differentiates from other interfaces.
	IsAdditiveExpressionContext()
}

type AdditiveExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAdditiveExpressionContext() *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_additiveExpression
	return p
}

func (*AdditiveExpressionContext) IsAdditiveExpressionContext() {}

func NewAdditiveExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AdditiveExpressionContext {
	var p = new(AdditiveExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_additiveExpression

	return p
}

func (s *AdditiveExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AdditiveExpressionContext) MultiplicativeExpression() IMultiplicativeExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMultiplicativeExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMultiplicativeExpressionContext)
}

func (s *AdditiveExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *AdditiveExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AdditiveExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AdditiveExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAdditiveExpression(s)
	}
}

func (s *AdditiveExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAdditiveExpression(s)
	}
}

func (p *CParser) AdditiveExpression() (localctx IAdditiveExpressionContext) {
	return p.additiveExpression(0)
}

func (p *CParser) additiveExpression(_p int) (localctx IAdditiveExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAdditiveExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAdditiveExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 20
	p.EnterRecursionRule(localctx, 20, CParserRULE_additiveExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.multiplicativeExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(376)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 14, p.GetParserRuleContext()) {
			case 1:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_additiveExpression)
				p.SetState(370)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(371)
					p.Match(CParserPlus)
				}
				{
					p.SetState(372)
					p.multiplicativeExpression(0)
				}

			case 2:
				localctx = NewAdditiveExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_additiveExpression)
				p.SetState(373)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(374)
					p.Match(CParserMinus)
				}
				{
					p.SetState(375)
					p.multiplicativeExpression(0)
				}

			}

		}
		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext())
	}

	return localctx
}

// IShiftExpressionContext is an interface to support dynamic dispatch.
type IShiftExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShiftExpressionContext differentiates from other interfaces.
	IsShiftExpressionContext()
}

type ShiftExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShiftExpressionContext() *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_shiftExpression
	return p
}

func (*ShiftExpressionContext) IsShiftExpressionContext() {}

func NewShiftExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShiftExpressionContext {
	var p = new(ShiftExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_shiftExpression

	return p
}

func (s *ShiftExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ShiftExpressionContext) AdditiveExpression() IAdditiveExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAdditiveExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAdditiveExpressionContext)
}

func (s *ShiftExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *ShiftExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShiftExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterShiftExpression(s)
	}
}

func (s *ShiftExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitShiftExpression(s)
	}
}

func (p *CParser) ShiftExpression() (localctx IShiftExpressionContext) {
	return p.shiftExpression(0)
}

func (p *CParser) shiftExpression(_p int) (localctx IShiftExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewShiftExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IShiftExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 22
	p.EnterRecursionRule(localctx, 22, CParserRULE_shiftExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(382)
		p.additiveExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(390)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext()) {
			case 1:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_shiftExpression)
				p.SetState(384)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(385)
					p.Match(CParserLeftShift)
				}
				{
					p.SetState(386)
					p.additiveExpression(0)
				}

			case 2:
				localctx = NewShiftExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_shiftExpression)
				p.SetState(387)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(388)
					p.Match(CParserRightShift)
				}
				{
					p.SetState(389)
					p.additiveExpression(0)
				}

			}

		}
		p.SetState(394)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}

	return localctx
}

// IRelationalExpressionContext is an interface to support dynamic dispatch.
type IRelationalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationalExpressionContext differentiates from other interfaces.
	IsRelationalExpressionContext()
}

type RelationalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationalExpressionContext() *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_relationalExpression
	return p
}

func (*RelationalExpressionContext) IsRelationalExpressionContext() {}

func NewRelationalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationalExpressionContext {
	var p = new(RelationalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_relationalExpression

	return p
}

func (s *RelationalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationalExpressionContext) ShiftExpression() IShiftExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShiftExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShiftExpressionContext)
}

func (s *RelationalExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *RelationalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RelationalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterRelationalExpression(s)
	}
}

func (s *RelationalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitRelationalExpression(s)
	}
}

func (p *CParser) RelationalExpression() (localctx IRelationalExpressionContext) {
	return p.relationalExpression(0)
}

func (p *CParser) relationalExpression(_p int) (localctx IRelationalExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationalExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationalExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 24
	p.EnterRecursionRule(localctx, 24, CParserRULE_relationalExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(396)
		p.shiftExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
			case 1:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_relationalExpression)
				p.SetState(398)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(399)
					p.Match(CParserLess)
				}
				{
					p.SetState(400)
					p.shiftExpression(0)
				}

			case 2:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_relationalExpression)
				p.SetState(401)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(402)
					p.Match(CParserGreater)
				}
				{
					p.SetState(403)
					p.shiftExpression(0)
				}

			case 3:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_relationalExpression)
				p.SetState(404)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(405)
					p.Match(CParserLessEqual)
				}
				{
					p.SetState(406)
					p.shiftExpression(0)
				}

			case 4:
				localctx = NewRelationalExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_relationalExpression)
				p.SetState(407)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(408)
					p.Match(CParserGreaterEqual)
				}
				{
					p.SetState(409)
					p.shiftExpression(0)
				}

			}

		}
		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
	}

	return localctx
}

// IEqualityExpressionContext is an interface to support dynamic dispatch.
type IEqualityExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEqualityExpressionContext differentiates from other interfaces.
	IsEqualityExpressionContext()
}

type EqualityExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEqualityExpressionContext() *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_equalityExpression
	return p
}

func (*EqualityExpressionContext) IsEqualityExpressionContext() {}

func NewEqualityExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EqualityExpressionContext {
	var p = new(EqualityExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_equalityExpression

	return p
}

func (s *EqualityExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *EqualityExpressionContext) RelationalExpression() IRelationalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationalExpressionContext)
}

func (s *EqualityExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *EqualityExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EqualityExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterEqualityExpression(s)
	}
}

func (s *EqualityExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitEqualityExpression(s)
	}
}

func (p *CParser) EqualityExpression() (localctx IEqualityExpressionContext) {
	return p.equalityExpression(0)
}

func (p *CParser) equalityExpression(_p int) (localctx IEqualityExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEqualityExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEqualityExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 26
	p.EnterRecursionRule(localctx, 26, CParserRULE_equalityExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(416)
		p.relationalExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(426)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(424)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
			case 1:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_equalityExpression)
				p.SetState(418)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(419)
					p.Match(CParserEqual)
				}
				{
					p.SetState(420)
					p.relationalExpression(0)
				}

			case 2:
				localctx = NewEqualityExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_equalityExpression)
				p.SetState(421)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(422)
					p.Match(CParserNotEqual)
				}
				{
					p.SetState(423)
					p.relationalExpression(0)
				}

			}

		}
		p.SetState(428)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}

	return localctx
}

// IAndExpressionContext is an interface to support dynamic dispatch.
type IAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAndExpressionContext differentiates from other interfaces.
	IsAndExpressionContext()
}

type AndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAndExpressionContext() *AndExpressionContext {
	var p = new(AndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_andExpression
	return p
}

func (*AndExpressionContext) IsAndExpressionContext() {}

func NewAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AndExpressionContext {
	var p = new(AndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_andExpression

	return p
}

func (s *AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AndExpressionContext) EqualityExpression() IEqualityExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEqualityExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEqualityExpressionContext)
}

func (s *AndExpressionContext) AndExpression() IAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAndExpression(s)
	}
}

func (s *AndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAndExpression(s)
	}
}

func (p *CParser) AndExpression() (localctx IAndExpressionContext) {
	return p.andExpression(0)
}

func (p *CParser) andExpression(_p int) (localctx IAndExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewAndExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IAndExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 28
	p.EnterRecursionRule(localctx, 28, CParserRULE_andExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(430)
		p.equalityExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(437)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewAndExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_andExpression)
			p.SetState(432)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(433)
				p.Match(CParserAnd)
			}
			{
				p.SetState(434)
				p.equalityExpression(0)
			}

		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())
	}

	return localctx
}

// IExclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IExclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExclusiveOrExpressionContext differentiates from other interfaces.
	IsExclusiveOrExpressionContext()
}

type ExclusiveOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExclusiveOrExpressionContext() *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_exclusiveOrExpression
	return p
}

func (*ExclusiveOrExpressionContext) IsExclusiveOrExpressionContext() {}

func NewExclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExclusiveOrExpressionContext {
	var p = new(ExclusiveOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_exclusiveOrExpression

	return p
}

func (s *ExclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExclusiveOrExpressionContext) AndExpression() IAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAndExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAndExpressionContext)
}

func (s *ExclusiveOrExpressionContext) ExclusiveOrExpression() IExclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclusiveOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *ExclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterExclusiveOrExpression(s)
	}
}

func (s *ExclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitExclusiveOrExpression(s)
	}
}

func (p *CParser) ExclusiveOrExpression() (localctx IExclusiveOrExpressionContext) {
	return p.exclusiveOrExpression(0)
}

func (p *CParser) exclusiveOrExpression(_p int) (localctx IExclusiveOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExclusiveOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExclusiveOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 30
	p.EnterRecursionRule(localctx, 30, CParserRULE_exclusiveOrExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(441)
		p.andExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(448)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExclusiveOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_exclusiveOrExpression)
			p.SetState(443)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(444)
				p.Match(CParserCaret)
			}
			{
				p.SetState(445)
				p.andExpression(0)
			}

		}
		p.SetState(450)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext())
	}

	return localctx
}

// IInclusiveOrExpressionContext is an interface to support dynamic dispatch.
type IInclusiveOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInclusiveOrExpressionContext differentiates from other interfaces.
	IsInclusiveOrExpressionContext()
}

type InclusiveOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInclusiveOrExpressionContext() *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_inclusiveOrExpression
	return p
}

func (*InclusiveOrExpressionContext) IsInclusiveOrExpressionContext() {}

func NewInclusiveOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InclusiveOrExpressionContext {
	var p = new(InclusiveOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_inclusiveOrExpression

	return p
}

func (s *InclusiveOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InclusiveOrExpressionContext) ExclusiveOrExpression() IExclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExclusiveOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) InclusiveOrExpression() IInclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclusiveOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *InclusiveOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InclusiveOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InclusiveOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterInclusiveOrExpression(s)
	}
}

func (s *InclusiveOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitInclusiveOrExpression(s)
	}
}

func (p *CParser) InclusiveOrExpression() (localctx IInclusiveOrExpressionContext) {
	return p.inclusiveOrExpression(0)
}

func (p *CParser) inclusiveOrExpression(_p int) (localctx IInclusiveOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInclusiveOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInclusiveOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 32
	p.EnterRecursionRule(localctx, 32, CParserRULE_inclusiveOrExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(452)
		p.exclusiveOrExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInclusiveOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_inclusiveOrExpression)
			p.SetState(454)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(455)
				p.Match(CParserOr)
			}
			{
				p.SetState(456)
				p.exclusiveOrExpression(0)
			}

		}
		p.SetState(461)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalAndExpressionContext is an interface to support dynamic dispatch.
type ILogicalAndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalAndExpressionContext differentiates from other interfaces.
	IsLogicalAndExpressionContext()
}

type LogicalAndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalAndExpressionContext() *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_logicalAndExpression
	return p
}

func (*LogicalAndExpressionContext) IsLogicalAndExpressionContext() {}

func NewLogicalAndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalAndExpressionContext {
	var p = new(LogicalAndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_logicalAndExpression

	return p
}

func (s *LogicalAndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalAndExpressionContext) InclusiveOrExpression() IInclusiveOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInclusiveOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInclusiveOrExpressionContext)
}

func (s *LogicalAndExpressionContext) LogicalAndExpression() ILogicalAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalAndExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalAndExpressionContext)
}

func (s *LogicalAndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalAndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalAndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterLogicalAndExpression(s)
	}
}

func (s *LogicalAndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitLogicalAndExpression(s)
	}
}

func (p *CParser) LogicalAndExpression() (localctx ILogicalAndExpressionContext) {
	return p.logicalAndExpression(0)
}

func (p *CParser) logicalAndExpression(_p int) (localctx ILogicalAndExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalAndExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalAndExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 34
	p.EnterRecursionRule(localctx, 34, CParserRULE_logicalAndExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(463)
		p.inclusiveOrExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalAndExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_logicalAndExpression)
			p.SetState(465)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(466)
				p.Match(CParserAndAnd)
			}
			{
				p.SetState(467)
				p.inclusiveOrExpression(0)
			}

		}
		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())
	}

	return localctx
}

// ILogicalOrExpressionContext is an interface to support dynamic dispatch.
type ILogicalOrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLogicalOrExpressionContext differentiates from other interfaces.
	IsLogicalOrExpressionContext()
}

type LogicalOrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLogicalOrExpressionContext() *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_logicalOrExpression
	return p
}

func (*LogicalOrExpressionContext) IsLogicalOrExpressionContext() {}

func NewLogicalOrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LogicalOrExpressionContext {
	var p = new(LogicalOrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_logicalOrExpression

	return p
}

func (s *LogicalOrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LogicalOrExpressionContext) LogicalAndExpression() ILogicalAndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalAndExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalAndExpressionContext)
}

func (s *LogicalOrExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *LogicalOrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalOrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LogicalOrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterLogicalOrExpression(s)
	}
}

func (s *LogicalOrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitLogicalOrExpression(s)
	}
}

func (p *CParser) LogicalOrExpression() (localctx ILogicalOrExpressionContext) {
	return p.logicalOrExpression(0)
}

func (p *CParser) logicalOrExpression(_p int) (localctx ILogicalOrExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewLogicalOrExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ILogicalOrExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 36
	p.EnterRecursionRule(localctx, 36, CParserRULE_logicalOrExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(474)
		p.logicalAndExpression(0)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(481)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalOrExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_logicalOrExpression)
			p.SetState(476)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(477)
				p.Match(CParserOrOr)
			}
			{
				p.SetState(478)
				p.logicalAndExpression(0)
			}

		}
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionalExpressionContext is an interface to support dynamic dispatch.
type IConditionalExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalExpressionContext differentiates from other interfaces.
	IsConditionalExpressionContext()
}

type ConditionalExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalExpressionContext() *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_conditionalExpression
	return p
}

func (*ConditionalExpressionContext) IsConditionalExpressionContext() {}

func NewConditionalExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalExpressionContext {
	var p = new(ConditionalExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_conditionalExpression

	return p
}

func (s *ConditionalExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalExpressionContext) LogicalOrExpression() ILogicalOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *ConditionalExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ConditionalExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterConditionalExpression(s)
	}
}

func (s *ConditionalExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitConditionalExpression(s)
	}
}

func (p *CParser) ConditionalExpression() (localctx IConditionalExpressionContext) {
	localctx = NewConditionalExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CParserRULE_conditionalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(484)
		p.logicalOrExpression(0)
	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(485)
			p.Match(CParserQuestion)
		}
		{
			p.SetState(486)
			p.expression(0)
		}
		{
			p.SetState(487)
			p.Match(CParserColon)
		}
		{
			p.SetState(488)
			p.ConditionalExpression()
		}

	}

	return localctx
}

// IAssignmentExpressionContext is an interface to support dynamic dispatch.
type IAssignmentExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentExpressionContext differentiates from other interfaces.
	IsAssignmentExpressionContext()
}

type AssignmentExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentExpressionContext() *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_assignmentExpression
	return p
}

func (*AssignmentExpressionContext) IsAssignmentExpressionContext() {}

func NewAssignmentExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentExpressionContext {
	var p = new(AssignmentExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_assignmentExpression

	return p
}

func (s *AssignmentExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *AssignmentExpressionContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *AssignmentExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AssignmentExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *AssignmentExpressionContext) DigitSequence() antlr.TerminalNode {
	return s.GetToken(CParserDigitSequence, 0)
}

func (s *AssignmentExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAssignmentExpression(s)
	}
}

func (s *AssignmentExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAssignmentExpression(s)
	}
}

func (p *CParser) AssignmentExpression() (localctx IAssignmentExpressionContext) {
	localctx = NewAssignmentExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CParserRULE_assignmentExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(498)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(492)
			p.ConditionalExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(493)
			p.UnaryExpression()
		}
		{
			p.SetState(494)
			p.AssignmentOperator()
		}
		{
			p.SetState(495)
			p.AssignmentExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(497)
			p.Match(CParserDigitSequence)
		}

	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAssignmentOperator(s)
	}
}

func (s *AssignmentOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAssignmentOperator(s)
	}
}

func (p *CParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CParserRULE_assignmentOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(500)
	_la = p.GetTokenStream().LA(1)

	if !(((_la-89)&-(0x1f+1)) == 0 && ((1<<uint((_la-89)))&((1<<(CParserAssign-89))|(1<<(CParserStarAssign-89))|(1<<(CParserDivAssign-89))|(1<<(CParserModAssign-89))|(1<<(CParserPlusAssign-89))|(1<<(CParserMinusAssign-89))|(1<<(CParserLeftShiftAssign-89))|(1<<(CParserRightShiftAssign-89))|(1<<(CParserAndAssign-89))|(1<<(CParserXorAssign-89))|(1<<(CParserOrAssign-89)))) != 0) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *CParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *CParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 44
	p.EnterRecursionRule(localctx, 44, CParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(503)
		p.AssignmentExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(510)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_expression)
			p.SetState(505)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(506)
				p.Match(CParserComma)
			}
			{
				p.SetState(507)
				p.AssignmentExpression()
			}

		}
		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext())
	}

	return localctx
}

// IConstantExpressionContext is an interface to support dynamic dispatch.
type IConstantExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantExpressionContext differentiates from other interfaces.
	IsConstantExpressionContext()
}

type ConstantExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantExpressionContext() *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_constantExpression
	return p
}

func (*ConstantExpressionContext) IsConstantExpressionContext() {}

func NewConstantExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantExpressionContext {
	var p = new(ConstantExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_constantExpression

	return p
}

func (s *ConstantExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantExpressionContext) ConditionalExpression() IConditionalExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalExpressionContext)
}

func (s *ConstantExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterConstantExpression(s)
	}
}

func (s *ConstantExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitConstantExpression(s)
	}
}

func (p *CParser) ConstantExpression() (localctx IConstantExpressionContext) {
	localctx = NewConstantExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CParserRULE_constantExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(513)
		p.ConditionalExpression()
	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) DeclarationSpecifiers() IDeclarationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifiersContext)
}

func (s *DeclarationContext) InitDeclaratorList() IInitDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorListContext)
}

func (s *DeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStaticAssertDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (p *CParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(523)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(515)
			p.DeclarationSpecifiers()
		}
		{
			p.SetState(516)
			p.initDeclaratorList(0)
		}
		{
			p.SetState(517)
			p.Match(CParserSemi)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(519)
			p.DeclarationSpecifiers()
		}
		{
			p.SetState(520)
			p.Match(CParserSemi)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(522)
			p.StaticAssertDeclaration()
		}

	}

	return localctx
}

// IDeclarationSpecifiersContext is an interface to support dynamic dispatch.
type IDeclarationSpecifiersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationSpecifiersContext differentiates from other interfaces.
	IsDeclarationSpecifiersContext()
}

type DeclarationSpecifiersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationSpecifiersContext() *DeclarationSpecifiersContext {
	var p = new(DeclarationSpecifiersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declarationSpecifiers
	return p
}

func (*DeclarationSpecifiersContext) IsDeclarationSpecifiersContext() {}

func NewDeclarationSpecifiersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationSpecifiersContext {
	var p = new(DeclarationSpecifiersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declarationSpecifiers

	return p
}

func (s *DeclarationSpecifiersContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationSpecifiersContext) AllDeclarationSpecifier() []IDeclarationSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationSpecifierContext)(nil)).Elem())
	var tst = make([]IDeclarationSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationSpecifierContext)
		}
	}

	return tst
}

func (s *DeclarationSpecifiersContext) DeclarationSpecifier(i int) IDeclarationSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifierContext)
}

func (s *DeclarationSpecifiersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationSpecifiersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationSpecifiersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclarationSpecifiers(s)
	}
}

func (s *DeclarationSpecifiersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclarationSpecifiers(s)
	}
}

func (p *CParser) DeclarationSpecifiers() (localctx IDeclarationSpecifiersContext) {
	localctx = NewDeclarationSpecifiersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, CParserRULE_declarationSpecifiers)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(526)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(525)
				p.DeclarationSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(528)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclarationSpecifiers2Context is an interface to support dynamic dispatch.
type IDeclarationSpecifiers2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationSpecifiers2Context differentiates from other interfaces.
	IsDeclarationSpecifiers2Context()
}

type DeclarationSpecifiers2Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationSpecifiers2Context() *DeclarationSpecifiers2Context {
	var p = new(DeclarationSpecifiers2Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declarationSpecifiers2
	return p
}

func (*DeclarationSpecifiers2Context) IsDeclarationSpecifiers2Context() {}

func NewDeclarationSpecifiers2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationSpecifiers2Context {
	var p = new(DeclarationSpecifiers2Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declarationSpecifiers2

	return p
}

func (s *DeclarationSpecifiers2Context) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationSpecifiers2Context) AllDeclarationSpecifier() []IDeclarationSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationSpecifierContext)(nil)).Elem())
	var tst = make([]IDeclarationSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationSpecifierContext)
		}
	}

	return tst
}

func (s *DeclarationSpecifiers2Context) DeclarationSpecifier(i int) IDeclarationSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifierContext)
}

func (s *DeclarationSpecifiers2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationSpecifiers2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationSpecifiers2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclarationSpecifiers2(s)
	}
}

func (s *DeclarationSpecifiers2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclarationSpecifiers2(s)
	}
}

func (p *CParser) DeclarationSpecifiers2() (localctx IDeclarationSpecifiers2Context) {
	localctx = NewDeclarationSpecifiers2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, CParserRULE_declarationSpecifiers2)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(531)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(530)
				p.DeclarationSpecifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext())
	}

	return localctx
}

// IDeclarationSpecifierContext is an interface to support dynamic dispatch.
type IDeclarationSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationSpecifierContext differentiates from other interfaces.
	IsDeclarationSpecifierContext()
}

type DeclarationSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationSpecifierContext() *DeclarationSpecifierContext {
	var p = new(DeclarationSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declarationSpecifier
	return p
}

func (*DeclarationSpecifierContext) IsDeclarationSpecifierContext() {}

func NewDeclarationSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationSpecifierContext {
	var p = new(DeclarationSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declarationSpecifier

	return p
}

func (s *DeclarationSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationSpecifierContext) StorageClassSpecifier() IStorageClassSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageClassSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageClassSpecifierContext)
}

func (s *DeclarationSpecifierContext) TypeSpecifier() ITypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *DeclarationSpecifierContext) TypeQualifier() ITypeQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierContext)
}

func (s *DeclarationSpecifierContext) FunctionSpecifier() IFunctionSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSpecifierContext)
}

func (s *DeclarationSpecifierContext) AlignmentSpecifier() IAlignmentSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAlignmentSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAlignmentSpecifierContext)
}

func (s *DeclarationSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclarationSpecifier(s)
	}
}

func (s *DeclarationSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclarationSpecifier(s)
	}
}

func (p *CParser) DeclarationSpecifier() (localctx IDeclarationSpecifierContext) {
	localctx = NewDeclarationSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CParserRULE_declarationSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(540)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(535)
			p.StorageClassSpecifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(536)
			p.TypeSpecifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(537)
			p.TypeQualifier()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(538)
			p.FunctionSpecifier()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(539)
			p.AlignmentSpecifier()
		}

	}

	return localctx
}

// IInitDeclaratorListContext is an interface to support dynamic dispatch.
type IInitDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitDeclaratorListContext differentiates from other interfaces.
	IsInitDeclaratorListContext()
}

type InitDeclaratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorListContext() *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_initDeclaratorList
	return p
}

func (*InitDeclaratorListContext) IsInitDeclaratorListContext() {}

func NewInitDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorListContext {
	var p = new(InitDeclaratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_initDeclaratorList

	return p
}

func (s *InitDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorListContext) InitDeclarator() IInitDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorContext)
}

func (s *InitDeclaratorListContext) InitDeclaratorList() IInitDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorListContext)
}

func (s *InitDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterInitDeclaratorList(s)
	}
}

func (s *InitDeclaratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitInitDeclaratorList(s)
	}
}

func (p *CParser) InitDeclaratorList() (localctx IInitDeclaratorListContext) {
	return p.initDeclaratorList(0)
}

func (p *CParser) initDeclaratorList(_p int) (localctx IInitDeclaratorListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInitDeclaratorListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInitDeclaratorListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 56
	p.EnterRecursionRule(localctx, 56, CParserRULE_initDeclaratorList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(543)
		p.InitDeclarator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(550)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInitDeclaratorListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_initDeclaratorList)
			p.SetState(545)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(546)
				p.Match(CParserComma)
			}
			{
				p.SetState(547)
				p.InitDeclarator()
			}

		}
		p.SetState(552)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}

	return localctx
}

// IInitDeclaratorContext is an interface to support dynamic dispatch.
type IInitDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitDeclaratorContext differentiates from other interfaces.
	IsInitDeclaratorContext()
}

type InitDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitDeclaratorContext() *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_initDeclarator
	return p
}

func (*InitDeclaratorContext) IsInitDeclaratorContext() {}

func NewInitDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitDeclaratorContext {
	var p = new(InitDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_initDeclarator

	return p
}

func (s *InitDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *InitDeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *InitDeclaratorContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterInitDeclarator(s)
	}
}

func (s *InitDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitInitDeclarator(s)
	}
}

func (p *CParser) InitDeclarator() (localctx IInitDeclaratorContext) {
	localctx = NewInitDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CParserRULE_initDeclarator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(558)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(553)
			p.Declarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(554)
			p.Declarator()
		}
		{
			p.SetState(555)
			p.Match(CParserAssign)
		}
		{
			p.SetState(556)
			p.Initializer()
		}

	}

	return localctx
}

// IStorageClassSpecifierContext is an interface to support dynamic dispatch.
type IStorageClassSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageClassSpecifierContext differentiates from other interfaces.
	IsStorageClassSpecifierContext()
}

type StorageClassSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageClassSpecifierContext() *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_storageClassSpecifier
	return p
}

func (*StorageClassSpecifierContext) IsStorageClassSpecifierContext() {}

func NewStorageClassSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageClassSpecifierContext {
	var p = new(StorageClassSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_storageClassSpecifier

	return p
}

func (s *StorageClassSpecifierContext) GetParser() antlr.Parser { return s.parser }
func (s *StorageClassSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageClassSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageClassSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStorageClassSpecifier(s)
	}
}

func (s *StorageClassSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStorageClassSpecifier(s)
	}
}

func (p *CParser) StorageClassSpecifier() (localctx IStorageClassSpecifierContext) {
	localctx = NewStorageClassSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CParserRULE_storageClassSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(560)
	_la = p.GetTokenStream().LA(1)

	if !(_la == CParserAuto || _la == CParserExtern || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(CParserRegister-34))|(1<<(CParserStatic-34))|(1<<(CParserTypedef-34))|(1<<(CParserThreadLocal-34)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITypeSpecifierContext is an interface to support dynamic dispatch.
type ITypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSpecifierContext differentiates from other interfaces.
	IsTypeSpecifierContext()
}

type TypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecifierContext() *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_typeSpecifier
	return p
}

func (*TypeSpecifierContext) IsTypeSpecifierContext() {}

func NewTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecifierContext {
	var p = new(TypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_typeSpecifier

	return p
}

func (s *TypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecifierContext) AtomicTypeSpecifier() IAtomicTypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAtomicTypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAtomicTypeSpecifierContext)
}

func (s *TypeSpecifierContext) StructOrUnionSpecifier() IStructOrUnionSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructOrUnionSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructOrUnionSpecifierContext)
}

func (s *TypeSpecifierContext) EnumSpecifier() IEnumSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumSpecifierContext)
}

func (s *TypeSpecifierContext) TypedefName() ITypedefNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypedefNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypedefNameContext)
}

func (s *TypeSpecifierContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *TypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTypeSpecifier(s)
	}
}

func (s *TypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTypeSpecifier(s)
	}
}

func (p *CParser) TypeSpecifier() (localctx ITypeSpecifierContext) {
	localctx = NewTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, CParserRULE_typeSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(576)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__3, CParserT__4, CParserT__5, CParserChar, CParserDouble, CParserFloat, CParserInt, CParserLong, CParserShort, CParserSigned, CParserUnsigned, CParserVoid, CParserBool, CParserComplex:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(562)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserChar)|(1<<CParserDouble)|(1<<CParserFloat))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case CParserT__0:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(563)
			p.Match(CParserT__0)
		}
		{
			p.SetState(564)
			p.Match(CParserLeftParen)
		}
		p.SetState(565)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(566)
			p.Match(CParserRightParen)
		}

	case CParserAtomic:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(567)
			p.AtomicTypeSpecifier()
		}

	case CParserStruct, CParserUnion:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(568)
			p.StructOrUnionSpecifier()
		}

	case CParserEnum:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(569)
			p.EnumSpecifier()
		}

	case CParserIdentifier:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(570)
			p.TypedefName()
		}

	case CParserT__6:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(571)
			p.Match(CParserT__6)
		}
		{
			p.SetState(572)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(573)
			p.ConstantExpression()
		}
		{
			p.SetState(574)
			p.Match(CParserRightParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStructOrUnionSpecifierContext is an interface to support dynamic dispatch.
type IStructOrUnionSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructOrUnionSpecifierContext differentiates from other interfaces.
	IsStructOrUnionSpecifierContext()
}

type StructOrUnionSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructOrUnionSpecifierContext() *StructOrUnionSpecifierContext {
	var p = new(StructOrUnionSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structOrUnionSpecifier
	return p
}

func (*StructOrUnionSpecifierContext) IsStructOrUnionSpecifierContext() {}

func NewStructOrUnionSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructOrUnionSpecifierContext {
	var p = new(StructOrUnionSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structOrUnionSpecifier

	return p
}

func (s *StructOrUnionSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *StructOrUnionSpecifierContext) StructOrUnion() IStructOrUnionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructOrUnionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructOrUnionContext)
}

func (s *StructOrUnionSpecifierContext) StructDeclarationList() IStructDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationListContext)
}

func (s *StructOrUnionSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *StructOrUnionSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructOrUnionSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructOrUnionSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructOrUnionSpecifier(s)
	}
}

func (s *StructOrUnionSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructOrUnionSpecifier(s)
	}
}

func (p *CParser) StructOrUnionSpecifier() (localctx IStructOrUnionSpecifierContext) {
	localctx = NewStructOrUnionSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, CParserRULE_structOrUnionSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(578)
			p.StructOrUnion()
		}
		p.SetState(580)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserIdentifier {
			{
				p.SetState(579)
				p.Match(CParserIdentifier)
			}

		}
		{
			p.SetState(582)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(583)
			p.structDeclarationList(0)
		}
		{
			p.SetState(584)
			p.Match(CParserRightBrace)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(586)
			p.StructOrUnion()
		}
		{
			p.SetState(587)
			p.Match(CParserIdentifier)
		}

	}

	return localctx
}

// IStructOrUnionContext is an interface to support dynamic dispatch.
type IStructOrUnionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructOrUnionContext differentiates from other interfaces.
	IsStructOrUnionContext()
}

type StructOrUnionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructOrUnionContext() *StructOrUnionContext {
	var p = new(StructOrUnionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structOrUnion
	return p
}

func (*StructOrUnionContext) IsStructOrUnionContext() {}

func NewStructOrUnionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructOrUnionContext {
	var p = new(StructOrUnionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structOrUnion

	return p
}

func (s *StructOrUnionContext) GetParser() antlr.Parser { return s.parser }
func (s *StructOrUnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructOrUnionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructOrUnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructOrUnion(s)
	}
}

func (s *StructOrUnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructOrUnion(s)
	}
}

func (p *CParser) StructOrUnion() (localctx IStructOrUnionContext) {
	localctx = NewStructOrUnionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, CParserRULE_structOrUnion)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(591)
	_la = p.GetTokenStream().LA(1)

	if !(_la == CParserStruct || _la == CParserUnion) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IStructDeclarationListContext is an interface to support dynamic dispatch.
type IStructDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclarationListContext differentiates from other interfaces.
	IsStructDeclarationListContext()
}

type StructDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclarationListContext() *StructDeclarationListContext {
	var p = new(StructDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structDeclarationList
	return p
}

func (*StructDeclarationListContext) IsStructDeclarationListContext() {}

func NewStructDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclarationListContext {
	var p = new(StructDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structDeclarationList

	return p
}

func (s *StructDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclarationListContext) StructDeclaration() IStructDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *StructDeclarationListContext) StructDeclarationList() IStructDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationListContext)
}

func (s *StructDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructDeclarationList(s)
	}
}

func (s *StructDeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructDeclarationList(s)
	}
}

func (p *CParser) StructDeclarationList() (localctx IStructDeclarationListContext) {
	return p.structDeclarationList(0)
}

func (p *CParser) structDeclarationList(_p int) (localctx IStructDeclarationListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewStructDeclarationListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IStructDeclarationListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, CParserRULE_structDeclarationList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.StructDeclaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(600)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewStructDeclarationListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_structDeclarationList)
			p.SetState(596)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(597)
				p.StructDeclaration()
			}

		}
		p.SetState(602)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext())
	}

	return localctx
}

// IStructDeclarationContext is an interface to support dynamic dispatch.
type IStructDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclarationContext differentiates from other interfaces.
	IsStructDeclarationContext()
}

type StructDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclarationContext() *StructDeclarationContext {
	var p = new(StructDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structDeclaration
	return p
}

func (*StructDeclarationContext) IsStructDeclarationContext() {}

func NewStructDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclarationContext {
	var p = new(StructDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structDeclaration

	return p
}

func (s *StructDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclarationContext) SpecifierQualifierList() ISpecifierQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecifierQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecifierQualifierListContext)
}

func (s *StructDeclarationContext) StructDeclaratorList() IStructDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclaratorListContext)
}

func (s *StructDeclarationContext) StaticAssertDeclaration() IStaticAssertDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStaticAssertDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStaticAssertDeclarationContext)
}

func (s *StructDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructDeclaration(s)
	}
}

func (s *StructDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructDeclaration(s)
	}
}

func (p *CParser) StructDeclaration() (localctx IStructDeclarationContext) {
	localctx = NewStructDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CParserRULE_structDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(610)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__0, CParserT__3, CParserT__4, CParserT__5, CParserT__6, CParserChar, CParserConst, CParserDouble, CParserEnum, CParserFloat, CParserInt, CParserLong, CParserRestrict, CParserShort, CParserSigned, CParserStruct, CParserUnion, CParserUnsigned, CParserVoid, CParserVolatile, CParserAtomic, CParserBool, CParserComplex, CParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(603)
			p.SpecifierQualifierList()
		}
		p.SetState(605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(CParserLeftParen-59))|(1<<(CParserStar-59))|(1<<(CParserCaret-59))|(1<<(CParserColon-59)))) != 0) || _la == CParserIdentifier {
			{
				p.SetState(604)
				p.structDeclaratorList(0)
			}

		}
		{
			p.SetState(607)
			p.Match(CParserSemi)
		}

	case CParserStaticAssert:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(609)
			p.StaticAssertDeclaration()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISpecifierQualifierListContext is an interface to support dynamic dispatch.
type ISpecifierQualifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSpecifierQualifierListContext differentiates from other interfaces.
	IsSpecifierQualifierListContext()
}

type SpecifierQualifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySpecifierQualifierListContext() *SpecifierQualifierListContext {
	var p = new(SpecifierQualifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_specifierQualifierList
	return p
}

func (*SpecifierQualifierListContext) IsSpecifierQualifierListContext() {}

func NewSpecifierQualifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SpecifierQualifierListContext {
	var p = new(SpecifierQualifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_specifierQualifierList

	return p
}

func (s *SpecifierQualifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *SpecifierQualifierListContext) TypeSpecifier() ITypeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecifierContext)
}

func (s *SpecifierQualifierListContext) SpecifierQualifierList() ISpecifierQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecifierQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecifierQualifierListContext)
}

func (s *SpecifierQualifierListContext) TypeQualifier() ITypeQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierContext)
}

func (s *SpecifierQualifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecifierQualifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SpecifierQualifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterSpecifierQualifierList(s)
	}
}

func (s *SpecifierQualifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitSpecifierQualifierList(s)
	}
}

func (p *CParser) SpecifierQualifierList() (localctx ISpecifierQualifierListContext) {
	localctx = NewSpecifierQualifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, CParserRULE_specifierQualifierList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(620)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(612)
			p.TypeSpecifier()
		}
		p.SetState(614)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(613)
				p.SpecifierQualifierList()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(616)
			p.TypeQualifier()
		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(617)
				p.SpecifierQualifierList()
			}

		}

	}

	return localctx
}

// IStructDeclaratorListContext is an interface to support dynamic dispatch.
type IStructDeclaratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclaratorListContext differentiates from other interfaces.
	IsStructDeclaratorListContext()
}

type StructDeclaratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclaratorListContext() *StructDeclaratorListContext {
	var p = new(StructDeclaratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structDeclaratorList
	return p
}

func (*StructDeclaratorListContext) IsStructDeclaratorListContext() {}

func NewStructDeclaratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclaratorListContext {
	var p = new(StructDeclaratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structDeclaratorList

	return p
}

func (s *StructDeclaratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclaratorListContext) StructDeclarator() IStructDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclaratorContext)
}

func (s *StructDeclaratorListContext) StructDeclaratorList() IStructDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclaratorListContext)
}

func (s *StructDeclaratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclaratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclaratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructDeclaratorList(s)
	}
}

func (s *StructDeclaratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructDeclaratorList(s)
	}
}

func (p *CParser) StructDeclaratorList() (localctx IStructDeclaratorListContext) {
	return p.structDeclaratorList(0)
}

func (p *CParser) structDeclaratorList(_p int) (localctx IStructDeclaratorListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewStructDeclaratorListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IStructDeclaratorListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 74
	p.EnterRecursionRule(localctx, 74, CParserRULE_structDeclaratorList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(623)
		p.StructDeclarator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(630)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewStructDeclaratorListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_structDeclaratorList)
			p.SetState(625)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(626)
				p.Match(CParserComma)
			}
			{
				p.SetState(627)
				p.StructDeclarator()
			}

		}
		p.SetState(632)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext())
	}

	return localctx
}

// IStructDeclaratorContext is an interface to support dynamic dispatch.
type IStructDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclaratorContext differentiates from other interfaces.
	IsStructDeclaratorContext()
}

type StructDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclaratorContext() *StructDeclaratorContext {
	var p = new(StructDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_structDeclarator
	return p
}

func (*StructDeclaratorContext) IsStructDeclaratorContext() {}

func NewStructDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclaratorContext {
	var p = new(StructDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_structDeclarator

	return p
}

func (s *StructDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *StructDeclaratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *StructDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStructDeclarator(s)
	}
}

func (s *StructDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStructDeclarator(s)
	}
}

func (p *CParser) StructDeclarator() (localctx IStructDeclaratorContext) {
	localctx = NewStructDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, CParserRULE_structDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(639)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(633)
			p.Declarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(635)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(CParserLeftParen-59))|(1<<(CParserStar-59))|(1<<(CParserCaret-59)))) != 0) || _la == CParserIdentifier {
			{
				p.SetState(634)
				p.Declarator()
			}

		}
		{
			p.SetState(637)
			p.Match(CParserColon)
		}
		{
			p.SetState(638)
			p.ConstantExpression()
		}

	}

	return localctx
}

// IEnumSpecifierContext is an interface to support dynamic dispatch.
type IEnumSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumSpecifierContext differentiates from other interfaces.
	IsEnumSpecifierContext()
}

type EnumSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumSpecifierContext() *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_enumSpecifier
	return p
}

func (*EnumSpecifierContext) IsEnumSpecifierContext() {}

func NewEnumSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumSpecifierContext {
	var p = new(EnumSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_enumSpecifier

	return p
}

func (s *EnumSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumSpecifierContext) EnumeratorList() IEnumeratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorListContext)
}

func (s *EnumSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *EnumSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterEnumSpecifier(s)
	}
}

func (s *EnumSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitEnumSpecifier(s)
	}
}

func (p *CParser) EnumSpecifier() (localctx IEnumSpecifierContext) {
	localctx = NewEnumSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, CParserRULE_enumSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(660)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(641)
			p.Match(CParserEnum)
		}
		p.SetState(643)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserIdentifier {
			{
				p.SetState(642)
				p.Match(CParserIdentifier)
			}

		}
		{
			p.SetState(645)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(646)
			p.enumeratorList(0)
		}
		{
			p.SetState(647)
			p.Match(CParserRightBrace)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(649)
			p.Match(CParserEnum)
		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserIdentifier {
			{
				p.SetState(650)
				p.Match(CParserIdentifier)
			}

		}
		{
			p.SetState(653)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(654)
			p.enumeratorList(0)
		}
		{
			p.SetState(655)
			p.Match(CParserComma)
		}
		{
			p.SetState(656)
			p.Match(CParserRightBrace)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(658)
			p.Match(CParserEnum)
		}
		{
			p.SetState(659)
			p.Match(CParserIdentifier)
		}

	}

	return localctx
}

// IEnumeratorListContext is an interface to support dynamic dispatch.
type IEnumeratorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorListContext differentiates from other interfaces.
	IsEnumeratorListContext()
}

type EnumeratorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorListContext() *EnumeratorListContext {
	var p = new(EnumeratorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_enumeratorList
	return p
}

func (*EnumeratorListContext) IsEnumeratorListContext() {}

func NewEnumeratorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorListContext {
	var p = new(EnumeratorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_enumeratorList

	return p
}

func (s *EnumeratorListContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorListContext) Enumerator() IEnumeratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorContext)
}

func (s *EnumeratorListContext) EnumeratorList() IEnumeratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumeratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumeratorListContext)
}

func (s *EnumeratorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterEnumeratorList(s)
	}
}

func (s *EnumeratorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitEnumeratorList(s)
	}
}

func (p *CParser) EnumeratorList() (localctx IEnumeratorListContext) {
	return p.enumeratorList(0)
}

func (p *CParser) enumeratorList(_p int) (localctx IEnumeratorListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewEnumeratorListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IEnumeratorListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 80
	p.EnterRecursionRule(localctx, 80, CParserRULE_enumeratorList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(663)
		p.Enumerator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewEnumeratorListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_enumeratorList)
			p.SetState(665)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(666)
				p.Match(CParserComma)
			}
			{
				p.SetState(667)
				p.Enumerator()
			}

		}
		p.SetState(672)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}

	return localctx
}

// IEnumeratorContext is an interface to support dynamic dispatch.
type IEnumeratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumeratorContext differentiates from other interfaces.
	IsEnumeratorContext()
}

type EnumeratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumeratorContext() *EnumeratorContext {
	var p = new(EnumeratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_enumerator
	return p
}

func (*EnumeratorContext) IsEnumeratorContext() {}

func NewEnumeratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumeratorContext {
	var p = new(EnumeratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_enumerator

	return p
}

func (s *EnumeratorContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumeratorContext) EnumerationConstant() IEnumerationConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumerationConstantContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumerationConstantContext)
}

func (s *EnumeratorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *EnumeratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumeratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumeratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterEnumerator(s)
	}
}

func (s *EnumeratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitEnumerator(s)
	}
}

func (p *CParser) Enumerator() (localctx IEnumeratorContext) {
	localctx = NewEnumeratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, CParserRULE_enumerator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(678)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(673)
			p.EnumerationConstant()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(674)
			p.EnumerationConstant()
		}
		{
			p.SetState(675)
			p.Match(CParserAssign)
		}
		{
			p.SetState(676)
			p.ConstantExpression()
		}

	}

	return localctx
}

// IEnumerationConstantContext is an interface to support dynamic dispatch.
type IEnumerationConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumerationConstantContext differentiates from other interfaces.
	IsEnumerationConstantContext()
}

type EnumerationConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumerationConstantContext() *EnumerationConstantContext {
	var p = new(EnumerationConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_enumerationConstant
	return p
}

func (*EnumerationConstantContext) IsEnumerationConstantContext() {}

func NewEnumerationConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumerationConstantContext {
	var p = new(EnumerationConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_enumerationConstant

	return p
}

func (s *EnumerationConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumerationConstantContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *EnumerationConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumerationConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumerationConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterEnumerationConstant(s)
	}
}

func (s *EnumerationConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitEnumerationConstant(s)
	}
}

func (p *CParser) EnumerationConstant() (localctx IEnumerationConstantContext) {
	localctx = NewEnumerationConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, CParserRULE_enumerationConstant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(680)
		p.Match(CParserIdentifier)
	}

	return localctx
}

// IAtomicTypeSpecifierContext is an interface to support dynamic dispatch.
type IAtomicTypeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAtomicTypeSpecifierContext differentiates from other interfaces.
	IsAtomicTypeSpecifierContext()
}

type AtomicTypeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAtomicTypeSpecifierContext() *AtomicTypeSpecifierContext {
	var p = new(AtomicTypeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_atomicTypeSpecifier
	return p
}

func (*AtomicTypeSpecifierContext) IsAtomicTypeSpecifierContext() {}

func NewAtomicTypeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AtomicTypeSpecifierContext {
	var p = new(AtomicTypeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_atomicTypeSpecifier

	return p
}

func (s *AtomicTypeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AtomicTypeSpecifierContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *AtomicTypeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtomicTypeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AtomicTypeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAtomicTypeSpecifier(s)
	}
}

func (s *AtomicTypeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAtomicTypeSpecifier(s)
	}
}

func (p *CParser) AtomicTypeSpecifier() (localctx IAtomicTypeSpecifierContext) {
	localctx = NewAtomicTypeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CParserRULE_atomicTypeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(682)
		p.Match(CParserAtomic)
	}
	{
		p.SetState(683)
		p.Match(CParserLeftParen)
	}
	{
		p.SetState(684)
		p.TypeName()
	}
	{
		p.SetState(685)
		p.Match(CParserRightParen)
	}

	return localctx
}

// ITypeQualifierContext is an interface to support dynamic dispatch.
type ITypeQualifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQualifierContext differentiates from other interfaces.
	IsTypeQualifierContext()
}

type TypeQualifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQualifierContext() *TypeQualifierContext {
	var p = new(TypeQualifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_typeQualifier
	return p
}

func (*TypeQualifierContext) IsTypeQualifierContext() {}

func NewTypeQualifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQualifierContext {
	var p = new(TypeQualifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_typeQualifier

	return p
}

func (s *TypeQualifierContext) GetParser() antlr.Parser { return s.parser }
func (s *TypeQualifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQualifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQualifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTypeQualifier(s)
	}
}

func (s *TypeQualifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTypeQualifier(s)
	}
}

func (p *CParser) TypeQualifier() (localctx ITypeQualifierContext) {
	localctx = NewTypeQualifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CParserRULE_typeQualifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(687)
	_la = p.GetTokenStream().LA(1)

	if !(_la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IFunctionSpecifierContext is an interface to support dynamic dispatch.
type IFunctionSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSpecifierContext differentiates from other interfaces.
	IsFunctionSpecifierContext()
}

type FunctionSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSpecifierContext() *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_functionSpecifier
	return p
}

func (*FunctionSpecifierContext) IsFunctionSpecifierContext() {}

func NewFunctionSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSpecifierContext {
	var p = new(FunctionSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_functionSpecifier

	return p
}

func (s *FunctionSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSpecifierContext) GccAttributeSpecifier() IGccAttributeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccAttributeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGccAttributeSpecifierContext)
}

func (s *FunctionSpecifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *FunctionSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterFunctionSpecifier(s)
	}
}

func (s *FunctionSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitFunctionSpecifier(s)
	}
}

func (p *CParser) FunctionSpecifier() (localctx IFunctionSpecifierContext) {
	localctx = NewFunctionSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CParserRULE_functionSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(695)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__7, CParserT__8, CParserInline, CParserNoreturn:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(689)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserInline))) != 0) || _la == CParserNoreturn) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case CParserT__11:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(690)
			p.GccAttributeSpecifier()
		}

	case CParserT__9:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(691)
			p.Match(CParserT__9)
		}
		{
			p.SetState(692)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(693)
			p.Match(CParserIdentifier)
		}
		{
			p.SetState(694)
			p.Match(CParserRightParen)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAlignmentSpecifierContext is an interface to support dynamic dispatch.
type IAlignmentSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAlignmentSpecifierContext differentiates from other interfaces.
	IsAlignmentSpecifierContext()
}

type AlignmentSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAlignmentSpecifierContext() *AlignmentSpecifierContext {
	var p = new(AlignmentSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_alignmentSpecifier
	return p
}

func (*AlignmentSpecifierContext) IsAlignmentSpecifierContext() {}

func NewAlignmentSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AlignmentSpecifierContext {
	var p = new(AlignmentSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_alignmentSpecifier

	return p
}

func (s *AlignmentSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AlignmentSpecifierContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *AlignmentSpecifierContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *AlignmentSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AlignmentSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AlignmentSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAlignmentSpecifier(s)
	}
}

func (s *AlignmentSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAlignmentSpecifier(s)
	}
}

func (p *CParser) AlignmentSpecifier() (localctx IAlignmentSpecifierContext) {
	localctx = NewAlignmentSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, CParserRULE_alignmentSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(707)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(697)
			p.Match(CParserAlignas)
		}
		{
			p.SetState(698)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(699)
			p.TypeName()
		}
		{
			p.SetState(700)
			p.Match(CParserRightParen)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(702)
			p.Match(CParserAlignas)
		}
		{
			p.SetState(703)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(704)
			p.ConstantExpression()
		}
		{
			p.SetState(705)
			p.Match(CParserRightParen)
		}

	}

	return localctx
}

// IDeclaratorContext is an interface to support dynamic dispatch.
type IDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclaratorContext differentiates from other interfaces.
	IsDeclaratorContext()
}

type DeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclaratorContext() *DeclaratorContext {
	var p = new(DeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declarator
	return p
}

func (*DeclaratorContext) IsDeclaratorContext() {}

func NewDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclaratorContext {
	var p = new(DeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declarator

	return p
}

func (s *DeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclaratorContext) DirectDeclarator() IDirectDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectDeclaratorContext)
}

func (s *DeclaratorContext) Pointer() IPointerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerContext)
}

func (s *DeclaratorContext) AllGccDeclaratorExtension() []IGccDeclaratorExtensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem())
	var tst = make([]IGccDeclaratorExtensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGccDeclaratorExtensionContext)
		}
	}

	return tst
}

func (s *DeclaratorContext) GccDeclaratorExtension(i int) IGccDeclaratorExtensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGccDeclaratorExtensionContext)
}

func (s *DeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclarator(s)
	}
}

func (s *DeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclarator(s)
	}
}

func (p *CParser) Declarator() (localctx IDeclaratorContext) {
	localctx = NewDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CParserRULE_declarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(710)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CParserStar || _la == CParserCaret {
		{
			p.SetState(709)
			p.Pointer()
		}

	}
	{
		p.SetState(712)
		p.directDeclarator(0)
	}
	p.SetState(716)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(713)
				p.GccDeclaratorExtension()
			}

		}
		p.SetState(718)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}

	return localctx
}

// IDirectDeclaratorContext is an interface to support dynamic dispatch.
type IDirectDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectDeclaratorContext differentiates from other interfaces.
	IsDirectDeclaratorContext()
}

type DirectDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectDeclaratorContext() *DirectDeclaratorContext {
	var p = new(DirectDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_directDeclarator
	return p
}

func (*DirectDeclaratorContext) IsDirectDeclaratorContext() {}

func NewDirectDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectDeclaratorContext {
	var p = new(DirectDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_directDeclarator

	return p
}

func (s *DirectDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectDeclaratorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *DirectDeclaratorContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *DirectDeclaratorContext) DigitSequence() antlr.TerminalNode {
	return s.GetToken(CParserDigitSequence, 0)
}

func (s *DirectDeclaratorContext) DirectDeclarator() IDirectDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectDeclaratorContext)
}

func (s *DirectDeclaratorContext) TypeQualifierList() ITypeQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierListContext)
}

func (s *DirectDeclaratorContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *DirectDeclaratorContext) ParameterTypeList() IParameterTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterTypeListContext)
}

func (s *DirectDeclaratorContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *DirectDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDirectDeclarator(s)
	}
}

func (s *DirectDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDirectDeclarator(s)
	}
}

func (p *CParser) DirectDeclarator() (localctx IDirectDeclaratorContext) {
	return p.directDeclarator(0)
}

func (p *CParser) directDeclarator(_p int) (localctx IDirectDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDirectDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDirectDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 96
	p.EnterRecursionRule(localctx, 96, CParserRULE_directDeclarator, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(728)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(720)
			p.Match(CParserIdentifier)
		}

	case 2:
		{
			p.SetState(721)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(722)
			p.Declarator()
		}
		{
			p.SetState(723)
			p.Match(CParserRightParen)
		}

	case 3:
		{
			p.SetState(725)
			p.Match(CParserIdentifier)
		}
		{
			p.SetState(726)
			p.Match(CParserColon)
		}
		{
			p.SetState(727)
			p.Match(CParserDigitSequence)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(775)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(773)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
			case 1:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(730)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(731)
					p.Match(CParserLeftBracket)
				}
				p.SetState(733)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
					{
						p.SetState(732)
						p.typeQualifierList(0)
					}

				}
				p.SetState(736)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
					{
						p.SetState(735)
						p.AssignmentExpression()
					}

				}
				{
					p.SetState(738)
					p.Match(CParserRightBracket)
				}

			case 2:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(739)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(740)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(741)
					p.Match(CParserStatic)
				}
				p.SetState(743)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
					{
						p.SetState(742)
						p.typeQualifierList(0)
					}

				}
				{
					p.SetState(745)
					p.AssignmentExpression()
				}
				{
					p.SetState(746)
					p.Match(CParserRightBracket)
				}

			case 3:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(748)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(749)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(750)
					p.typeQualifierList(0)
				}
				{
					p.SetState(751)
					p.Match(CParserStatic)
				}
				{
					p.SetState(752)
					p.AssignmentExpression()
				}
				{
					p.SetState(753)
					p.Match(CParserRightBracket)
				}

			case 4:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(755)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(756)
					p.Match(CParserLeftBracket)
				}
				p.SetState(758)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
					{
						p.SetState(757)
						p.typeQualifierList(0)
					}

				}
				{
					p.SetState(760)
					p.Match(CParserStar)
				}
				{
					p.SetState(761)
					p.Match(CParserRightBracket)
				}

			case 5:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(762)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(763)
					p.Match(CParserLeftParen)
				}
				{
					p.SetState(764)
					p.ParameterTypeList()
				}
				{
					p.SetState(765)
					p.Match(CParserRightParen)
				}

			case 6:
				localctx = NewDirectDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directDeclarator)
				p.SetState(767)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(768)
					p.Match(CParserLeftParen)
				}
				p.SetState(770)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserIdentifier {
					{
						p.SetState(769)
						p.identifierList(0)
					}

				}
				{
					p.SetState(772)
					p.Match(CParserRightParen)
				}

			}

		}
		p.SetState(777)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}

	return localctx
}

// IGccDeclaratorExtensionContext is an interface to support dynamic dispatch.
type IGccDeclaratorExtensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGccDeclaratorExtensionContext differentiates from other interfaces.
	IsGccDeclaratorExtensionContext()
}

type GccDeclaratorExtensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGccDeclaratorExtensionContext() *GccDeclaratorExtensionContext {
	var p = new(GccDeclaratorExtensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_gccDeclaratorExtension
	return p
}

func (*GccDeclaratorExtensionContext) IsGccDeclaratorExtensionContext() {}

func NewGccDeclaratorExtensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GccDeclaratorExtensionContext {
	var p = new(GccDeclaratorExtensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_gccDeclaratorExtension

	return p
}

func (s *GccDeclaratorExtensionContext) GetParser() antlr.Parser { return s.parser }

func (s *GccDeclaratorExtensionContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(CParserStringLiteral)
}

func (s *GccDeclaratorExtensionContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(CParserStringLiteral, i)
}

func (s *GccDeclaratorExtensionContext) GccAttributeSpecifier() IGccAttributeSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccAttributeSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGccAttributeSpecifierContext)
}

func (s *GccDeclaratorExtensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GccDeclaratorExtensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GccDeclaratorExtensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGccDeclaratorExtension(s)
	}
}

func (s *GccDeclaratorExtensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGccDeclaratorExtension(s)
	}
}

func (p *CParser) GccDeclaratorExtension() (localctx IGccDeclaratorExtensionContext) {
	localctx = NewGccDeclaratorExtensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CParserRULE_gccDeclaratorExtension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(787)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__10:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(778)
			p.Match(CParserT__10)
		}
		{
			p.SetState(779)
			p.Match(CParserLeftParen)
		}
		p.SetState(781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == CParserStringLiteral {
			{
				p.SetState(780)
				p.Match(CParserStringLiteral)
			}

			p.SetState(783)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(785)
			p.Match(CParserRightParen)
		}

	case CParserT__11:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(786)
			p.GccAttributeSpecifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGccAttributeSpecifierContext is an interface to support dynamic dispatch.
type IGccAttributeSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGccAttributeSpecifierContext differentiates from other interfaces.
	IsGccAttributeSpecifierContext()
}

type GccAttributeSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGccAttributeSpecifierContext() *GccAttributeSpecifierContext {
	var p = new(GccAttributeSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_gccAttributeSpecifier
	return p
}

func (*GccAttributeSpecifierContext) IsGccAttributeSpecifierContext() {}

func NewGccAttributeSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GccAttributeSpecifierContext {
	var p = new(GccAttributeSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_gccAttributeSpecifier

	return p
}

func (s *GccAttributeSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *GccAttributeSpecifierContext) GccAttributeList() IGccAttributeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccAttributeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGccAttributeListContext)
}

func (s *GccAttributeSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GccAttributeSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GccAttributeSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGccAttributeSpecifier(s)
	}
}

func (s *GccAttributeSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGccAttributeSpecifier(s)
	}
}

func (p *CParser) GccAttributeSpecifier() (localctx IGccAttributeSpecifierContext) {
	localctx = NewGccAttributeSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CParserRULE_gccAttributeSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.Match(CParserT__11)
	}
	{
		p.SetState(790)
		p.Match(CParserLeftParen)
	}
	{
		p.SetState(791)
		p.Match(CParserLeftParen)
	}
	{
		p.SetState(792)
		p.GccAttributeList()
	}
	{
		p.SetState(793)
		p.Match(CParserRightParen)
	}
	{
		p.SetState(794)
		p.Match(CParserRightParen)
	}

	return localctx
}

// IGccAttributeListContext is an interface to support dynamic dispatch.
type IGccAttributeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGccAttributeListContext differentiates from other interfaces.
	IsGccAttributeListContext()
}

type GccAttributeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGccAttributeListContext() *GccAttributeListContext {
	var p = new(GccAttributeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_gccAttributeList
	return p
}

func (*GccAttributeListContext) IsGccAttributeListContext() {}

func NewGccAttributeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GccAttributeListContext {
	var p = new(GccAttributeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_gccAttributeList

	return p
}

func (s *GccAttributeListContext) GetParser() antlr.Parser { return s.parser }

func (s *GccAttributeListContext) AllGccAttribute() []IGccAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGccAttributeContext)(nil)).Elem())
	var tst = make([]IGccAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGccAttributeContext)
		}
	}

	return tst
}

func (s *GccAttributeListContext) GccAttribute(i int) IGccAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGccAttributeContext)
}

func (s *GccAttributeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GccAttributeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GccAttributeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGccAttributeList(s)
	}
}

func (s *GccAttributeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGccAttributeList(s)
	}
}

func (p *CParser) GccAttributeList() (localctx IGccAttributeListContext) {
	localctx = NewGccAttributeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CParserRULE_gccAttributeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(805)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(796)
			p.GccAttribute()
		}
		p.SetState(801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CParserComma {
			{
				p.SetState(797)
				p.Match(CParserComma)
			}
			{
				p.SetState(798)
				p.GccAttribute()
			}

			p.SetState(803)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)

	}

	return localctx
}

// IGccAttributeContext is an interface to support dynamic dispatch.
type IGccAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGccAttributeContext differentiates from other interfaces.
	IsGccAttributeContext()
}

type GccAttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGccAttributeContext() *GccAttributeContext {
	var p = new(GccAttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_gccAttribute
	return p
}

func (*GccAttributeContext) IsGccAttributeContext() {}

func NewGccAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GccAttributeContext {
	var p = new(GccAttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_gccAttribute

	return p
}

func (s *GccAttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *GccAttributeContext) ArgumentExpressionList() IArgumentExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentExpressionListContext)
}

func (s *GccAttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GccAttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GccAttributeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterGccAttribute(s)
	}
}

func (s *GccAttributeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitGccAttribute(s)
	}
}

func (p *CParser) GccAttribute() (localctx IGccAttributeContext) {
	localctx = NewGccAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, CParserRULE_gccAttribute)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(816)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserT__0, CParserT__1, CParserT__2, CParserT__3, CParserT__4, CParserT__5, CParserT__6, CParserT__7, CParserT__8, CParserT__9, CParserT__10, CParserT__11, CParserT__12, CParserT__13, CParserAuto, CParserBreak, CParserCase, CParserChar, CParserConst, CParserContinue, CParserDefault, CParserDo, CParserDouble, CParserElse, CParserEnum, CParserExtern, CParserFloat, CParserFor, CParserGoto, CParserIf, CParserInline, CParserInt, CParserLong, CParserRegister, CParserRestrict, CParserReturn, CParserShort, CParserSigned, CParserSizeof, CParserStatic, CParserStruct, CParserSwitch, CParserTypedef, CParserUnion, CParserUnsigned, CParserVoid, CParserVolatile, CParserWhile, CParserAlignas, CParserAlignof, CParserAtomic, CParserBool, CParserComplex, CParserGeneric, CParserImaginary, CParserNoreturn, CParserStaticAssert, CParserThreadLocal, CParserLeftBracket, CParserRightBracket, CParserLeftBrace, CParserRightBrace, CParserLess, CParserLessEqual, CParserGreater, CParserGreaterEqual, CParserLeftShift, CParserRightShift, CParserPlus, CParserPlusPlus, CParserMinus, CParserMinusMinus, CParserStar, CParserDiv, CParserMod, CParserAnd, CParserOr, CParserAndAnd, CParserOrOr, CParserCaret, CParserNot, CParserTilde, CParserQuestion, CParserColon, CParserSemi, CParserAssign, CParserStarAssign, CParserDivAssign, CParserModAssign, CParserPlusAssign, CParserMinusAssign, CParserLeftShiftAssign, CParserRightShiftAssign, CParserAndAssign, CParserXorAssign, CParserOrAssign, CParserEqual, CParserNotEqual, CParserArrow, CParserDot, CParserEllipsis, CParserIdentifier, CParserConstant, CParserDigitSequence, CParserStringLiteral, CParserComplexDefine, CParserAsmBlock, CParserLineAfterPreprocessing, CParserLineDirective, CParserPragmaDirective, CParserWhitespace, CParserNewline, CParserBlockComment, CParserLineComment:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(807)
		_la = p.GetTokenStream().LA(1)

		if _la <= 0 || (((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(CParserLeftParen-59))|(1<<(CParserRightParen-59))|(1<<(CParserComma-59)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserLeftParen {
			{
				p.SetState(808)
				p.Match(CParserLeftParen)
			}
			p.SetState(810)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
				{
					p.SetState(809)
					p.argumentExpressionList(0)
				}

			}
			{
				p.SetState(812)
				p.Match(CParserRightParen)
			}

		}

	case CParserRightParen, CParserComma:
		p.EnterOuterAlt(localctx, 2)

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INestedParenthesesBlockContext is an interface to support dynamic dispatch.
type INestedParenthesesBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNestedParenthesesBlockContext differentiates from other interfaces.
	IsNestedParenthesesBlockContext()
}

type NestedParenthesesBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNestedParenthesesBlockContext() *NestedParenthesesBlockContext {
	var p = new(NestedParenthesesBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_nestedParenthesesBlock
	return p
}

func (*NestedParenthesesBlockContext) IsNestedParenthesesBlockContext() {}

func NewNestedParenthesesBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NestedParenthesesBlockContext {
	var p = new(NestedParenthesesBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_nestedParenthesesBlock

	return p
}

func (s *NestedParenthesesBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *NestedParenthesesBlockContext) AllNestedParenthesesBlock() []INestedParenthesesBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INestedParenthesesBlockContext)(nil)).Elem())
	var tst = make([]INestedParenthesesBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INestedParenthesesBlockContext)
		}
	}

	return tst
}

func (s *NestedParenthesesBlockContext) NestedParenthesesBlock(i int) INestedParenthesesBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INestedParenthesesBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INestedParenthesesBlockContext)
}

func (s *NestedParenthesesBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NestedParenthesesBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NestedParenthesesBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterNestedParenthesesBlock(s)
	}
}

func (s *NestedParenthesesBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitNestedParenthesesBlock(s)
	}
}

func (p *CParser) NestedParenthesesBlock() (localctx INestedParenthesesBlockContext) {
	localctx = NewNestedParenthesesBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CParserRULE_nestedParenthesesBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(825)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__10)|(1<<CParserT__11)|(1<<CParserT__12)|(1<<CParserT__13)|(1<<CParserAuto)|(1<<CParserBreak)|(1<<CParserCase)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserContinue)|(1<<CParserDefault)|(1<<CParserDo)|(1<<CParserDouble)|(1<<CParserElse)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserFor)|(1<<CParserGoto)|(1<<CParserIf)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserReturn-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserSizeof-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserSwitch-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserWhile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAlignof-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserGeneric-32))|(1<<(CParserImaginary-32))|(1<<(CParserNoreturn-32))|(1<<(CParserStaticAssert-32))|(1<<(CParserThreadLocal-32))|(1<<(CParserLeftParen-32))|(1<<(CParserLeftBracket-32))|(1<<(CParserRightBracket-32))|(1<<(CParserLeftBrace-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(CParserRightBrace-64))|(1<<(CParserLess-64))|(1<<(CParserLessEqual-64))|(1<<(CParserGreater-64))|(1<<(CParserGreaterEqual-64))|(1<<(CParserLeftShift-64))|(1<<(CParserRightShift-64))|(1<<(CParserPlus-64))|(1<<(CParserPlusPlus-64))|(1<<(CParserMinus-64))|(1<<(CParserMinusMinus-64))|(1<<(CParserStar-64))|(1<<(CParserDiv-64))|(1<<(CParserMod-64))|(1<<(CParserAnd-64))|(1<<(CParserOr-64))|(1<<(CParserAndAnd-64))|(1<<(CParserOrOr-64))|(1<<(CParserCaret-64))|(1<<(CParserNot-64))|(1<<(CParserTilde-64))|(1<<(CParserQuestion-64))|(1<<(CParserColon-64))|(1<<(CParserSemi-64))|(1<<(CParserComma-64))|(1<<(CParserAssign-64))|(1<<(CParserStarAssign-64))|(1<<(CParserDivAssign-64))|(1<<(CParserModAssign-64))|(1<<(CParserPlusAssign-64))|(1<<(CParserMinusAssign-64))|(1<<(CParserLeftShiftAssign-64)))) != 0) || (((_la-96)&-(0x1f+1)) == 0 && ((1<<uint((_la-96)))&((1<<(CParserRightShiftAssign-96))|(1<<(CParserAndAssign-96))|(1<<(CParserXorAssign-96))|(1<<(CParserOrAssign-96))|(1<<(CParserEqual-96))|(1<<(CParserNotEqual-96))|(1<<(CParserArrow-96))|(1<<(CParserDot-96))|(1<<(CParserEllipsis-96))|(1<<(CParserIdentifier-96))|(1<<(CParserConstant-96))|(1<<(CParserDigitSequence-96))|(1<<(CParserStringLiteral-96))|(1<<(CParserComplexDefine-96))|(1<<(CParserAsmBlock-96))|(1<<(CParserLineAfterPreprocessing-96))|(1<<(CParserLineDirective-96))|(1<<(CParserPragmaDirective-96))|(1<<(CParserWhitespace-96))|(1<<(CParserNewline-96))|(1<<(CParserBlockComment-96))|(1<<(CParserLineComment-96)))) != 0) {
		p.SetState(823)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case CParserT__0, CParserT__1, CParserT__2, CParserT__3, CParserT__4, CParserT__5, CParserT__6, CParserT__7, CParserT__8, CParserT__9, CParserT__10, CParserT__11, CParserT__12, CParserT__13, CParserAuto, CParserBreak, CParserCase, CParserChar, CParserConst, CParserContinue, CParserDefault, CParserDo, CParserDouble, CParserElse, CParserEnum, CParserExtern, CParserFloat, CParserFor, CParserGoto, CParserIf, CParserInline, CParserInt, CParserLong, CParserRegister, CParserRestrict, CParserReturn, CParserShort, CParserSigned, CParserSizeof, CParserStatic, CParserStruct, CParserSwitch, CParserTypedef, CParserUnion, CParserUnsigned, CParserVoid, CParserVolatile, CParserWhile, CParserAlignas, CParserAlignof, CParserAtomic, CParserBool, CParserComplex, CParserGeneric, CParserImaginary, CParserNoreturn, CParserStaticAssert, CParserThreadLocal, CParserLeftBracket, CParserRightBracket, CParserLeftBrace, CParserRightBrace, CParserLess, CParserLessEqual, CParserGreater, CParserGreaterEqual, CParserLeftShift, CParserRightShift, CParserPlus, CParserPlusPlus, CParserMinus, CParserMinusMinus, CParserStar, CParserDiv, CParserMod, CParserAnd, CParserOr, CParserAndAnd, CParserOrOr, CParserCaret, CParserNot, CParserTilde, CParserQuestion, CParserColon, CParserSemi, CParserComma, CParserAssign, CParserStarAssign, CParserDivAssign, CParserModAssign, CParserPlusAssign, CParserMinusAssign, CParserLeftShiftAssign, CParserRightShiftAssign, CParserAndAssign, CParserXorAssign, CParserOrAssign, CParserEqual, CParserNotEqual, CParserArrow, CParserDot, CParserEllipsis, CParserIdentifier, CParserConstant, CParserDigitSequence, CParserStringLiteral, CParserComplexDefine, CParserAsmBlock, CParserLineAfterPreprocessing, CParserLineDirective, CParserPragmaDirective, CParserWhitespace, CParserNewline, CParserBlockComment, CParserLineComment:
			p.SetState(818)
			_la = p.GetTokenStream().LA(1)

			if _la <= 0 || _la == CParserLeftParen || _la == CParserRightParen {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		case CParserLeftParen:
			{
				p.SetState(819)
				p.Match(CParserLeftParen)
			}
			{
				p.SetState(820)
				p.NestedParenthesesBlock()
			}
			{
				p.SetState(821)
				p.Match(CParserRightParen)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(827)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IPointerContext is an interface to support dynamic dispatch.
type IPointerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerContext differentiates from other interfaces.
	IsPointerContext()
}

type PointerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerContext() *PointerContext {
	var p = new(PointerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_pointer
	return p
}

func (*PointerContext) IsPointerContext() {}

func NewPointerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerContext {
	var p = new(PointerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_pointer

	return p
}

func (s *PointerContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerContext) TypeQualifierList() ITypeQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierListContext)
}

func (s *PointerContext) Pointer() IPointerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerContext)
}

func (s *PointerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterPointer(s)
	}
}

func (s *PointerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitPointer(s)
	}
}

func (p *CParser) Pointer() (localctx IPointerContext) {
	localctx = NewPointerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CParserRULE_pointer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(846)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(828)
			p.Match(CParserStar)
		}
		p.SetState(830)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(829)
				p.typeQualifierList(0)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(832)
			p.Match(CParserStar)
		}
		p.SetState(834)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
			{
				p.SetState(833)
				p.typeQualifierList(0)
			}

		}
		{
			p.SetState(836)
			p.Pointer()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(837)
			p.Match(CParserCaret)
		}
		p.SetState(839)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(838)
				p.typeQualifierList(0)
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(841)
			p.Match(CParserCaret)
		}
		p.SetState(843)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
			{
				p.SetState(842)
				p.typeQualifierList(0)
			}

		}
		{
			p.SetState(845)
			p.Pointer()
		}

	}

	return localctx
}

// ITypeQualifierListContext is an interface to support dynamic dispatch.
type ITypeQualifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeQualifierListContext differentiates from other interfaces.
	IsTypeQualifierListContext()
}

type TypeQualifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeQualifierListContext() *TypeQualifierListContext {
	var p = new(TypeQualifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_typeQualifierList
	return p
}

func (*TypeQualifierListContext) IsTypeQualifierListContext() {}

func NewTypeQualifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeQualifierListContext {
	var p = new(TypeQualifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_typeQualifierList

	return p
}

func (s *TypeQualifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeQualifierListContext) TypeQualifier() ITypeQualifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierContext)
}

func (s *TypeQualifierListContext) TypeQualifierList() ITypeQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierListContext)
}

func (s *TypeQualifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeQualifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeQualifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTypeQualifierList(s)
	}
}

func (s *TypeQualifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTypeQualifierList(s)
	}
}

func (p *CParser) TypeQualifierList() (localctx ITypeQualifierListContext) {
	return p.typeQualifierList(0)
}

func (p *CParser) typeQualifierList(_p int) (localctx ITypeQualifierListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeQualifierListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeQualifierListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 110
	p.EnterRecursionRule(localctx, 110, CParserRULE_typeQualifierList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(849)
		p.TypeQualifier()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(855)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeQualifierListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_typeQualifierList)
			p.SetState(851)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(852)
				p.TypeQualifier()
			}

		}
		p.SetState(857)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}

	return localctx
}

// IParameterTypeListContext is an interface to support dynamic dispatch.
type IParameterTypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterTypeListContext differentiates from other interfaces.
	IsParameterTypeListContext()
}

type ParameterTypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterTypeListContext() *ParameterTypeListContext {
	var p = new(ParameterTypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_parameterTypeList
	return p
}

func (*ParameterTypeListContext) IsParameterTypeListContext() {}

func NewParameterTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterTypeListContext {
	var p = new(ParameterTypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_parameterTypeList

	return p
}

func (s *ParameterTypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterTypeListContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ParameterTypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterTypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterTypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterParameterTypeList(s)
	}
}

func (s *ParameterTypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitParameterTypeList(s)
	}
}

func (p *CParser) ParameterTypeList() (localctx IParameterTypeListContext) {
	localctx = NewParameterTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CParserRULE_parameterTypeList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(858)
			p.parameterList(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(859)
			p.parameterList(0)
		}
		{
			p.SetState(860)
			p.Match(CParserComma)
		}
		{
			p.SetState(861)
			p.Match(CParserEllipsis)
		}

	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) ParameterDeclaration() IParameterDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *ParameterListContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterParameterList(s)
	}
}

func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitParameterList(s)
	}
}

func (p *CParser) ParameterList() (localctx IParameterListContext) {
	return p.parameterList(0)
}

func (p *CParser) parameterList(_p int) (localctx IParameterListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewParameterListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IParameterListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 114
	p.EnterRecursionRule(localctx, 114, CParserRULE_parameterList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(866)
		p.ParameterDeclaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(873)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewParameterListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_parameterList)
			p.SetState(868)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(869)
				p.Match(CParserComma)
			}
			{
				p.SetState(870)
				p.ParameterDeclaration()
			}

		}
		p.SetState(875)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
	}

	return localctx
}

// IParameterDeclarationContext is an interface to support dynamic dispatch.
type IParameterDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterDeclarationContext differentiates from other interfaces.
	IsParameterDeclarationContext()
}

type ParameterDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclarationContext() *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_parameterDeclaration
	return p
}

func (*ParameterDeclarationContext) IsParameterDeclarationContext() {}

func NewParameterDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_parameterDeclaration

	return p
}

func (s *ParameterDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationContext) DeclarationSpecifiers() IDeclarationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifiersContext)
}

func (s *ParameterDeclarationContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *ParameterDeclarationContext) DeclarationSpecifiers2() IDeclarationSpecifiers2Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifiers2Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifiers2Context)
}

func (s *ParameterDeclarationContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *ParameterDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterParameterDeclaration(s)
	}
}

func (s *ParameterDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitParameterDeclaration(s)
	}
}

func (p *CParser) ParameterDeclaration() (localctx IParameterDeclarationContext) {
	localctx = NewParameterDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CParserRULE_parameterDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(876)
			p.DeclarationSpecifiers()
		}
		{
			p.SetState(877)
			p.Declarator()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(879)
			p.DeclarationSpecifiers2()
		}
		p.SetState(881)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 82, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(880)
				p.AbstractDeclarator()
			}

		}

	}

	return localctx
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *IdentifierListContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (p *CParser) IdentifierList() (localctx IIdentifierListContext) {
	return p.identifierList(0)
}

func (p *CParser) identifierList(_p int) (localctx IIdentifierListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IIdentifierListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 118
	p.EnterRecursionRule(localctx, 118, CParserRULE_identifierList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.Match(CParserIdentifier)
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewIdentifierListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_identifierList)
			p.SetState(888)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(889)
				p.Match(CParserComma)
			}
			{
				p.SetState(890)
				p.Match(CParserIdentifier)
			}

		}
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) SpecifierQualifierList() ISpecifierQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISpecifierQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISpecifierQualifierListContext)
}

func (s *TypeNameContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (p *CParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CParserRULE_typeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(896)
		p.SpecifierQualifierList()
	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-59)&-(0x1f+1)) == 0 && ((1<<uint((_la-59)))&((1<<(CParserLeftParen-59))|(1<<(CParserLeftBracket-59))|(1<<(CParserStar-59))|(1<<(CParserCaret-59)))) != 0 {
		{
			p.SetState(897)
			p.AbstractDeclarator()
		}

	}

	return localctx
}

// IAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAbstractDeclaratorContext differentiates from other interfaces.
	IsAbstractDeclaratorContext()
}

type AbstractDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAbstractDeclaratorContext() *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_abstractDeclarator
	return p
}

func (*AbstractDeclaratorContext) IsAbstractDeclaratorContext() {}

func NewAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AbstractDeclaratorContext {
	var p = new(AbstractDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_abstractDeclarator

	return p
}

func (s *AbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *AbstractDeclaratorContext) Pointer() IPointerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerContext)
}

func (s *AbstractDeclaratorContext) DirectAbstractDeclarator() IDirectAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectAbstractDeclaratorContext)
}

func (s *AbstractDeclaratorContext) AllGccDeclaratorExtension() []IGccDeclaratorExtensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem())
	var tst = make([]IGccDeclaratorExtensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGccDeclaratorExtensionContext)
		}
	}

	return tst
}

func (s *AbstractDeclaratorContext) GccDeclaratorExtension(i int) IGccDeclaratorExtensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGccDeclaratorExtensionContext)
}

func (s *AbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AbstractDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterAbstractDeclarator(s)
	}
}

func (s *AbstractDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitAbstractDeclarator(s)
	}
}

func (p *CParser) AbstractDeclarator() (localctx IAbstractDeclaratorContext) {
	localctx = NewAbstractDeclaratorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, CParserRULE_abstractDeclarator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(911)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(900)
			p.Pointer()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserStar || _la == CParserCaret {
			{
				p.SetState(901)
				p.Pointer()
			}

		}
		{
			p.SetState(904)
			p.directAbstractDeclarator(0)
		}
		p.SetState(908)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(905)
					p.GccDeclaratorExtension()
				}

			}
			p.SetState(910)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
		}

	}

	return localctx
}

// IDirectAbstractDeclaratorContext is an interface to support dynamic dispatch.
type IDirectAbstractDeclaratorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectAbstractDeclaratorContext differentiates from other interfaces.
	IsDirectAbstractDeclaratorContext()
}

type DirectAbstractDeclaratorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectAbstractDeclaratorContext() *DirectAbstractDeclaratorContext {
	var p = new(DirectAbstractDeclaratorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_directAbstractDeclarator
	return p
}

func (*DirectAbstractDeclaratorContext) IsDirectAbstractDeclaratorContext() {}

func NewDirectAbstractDeclaratorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectAbstractDeclaratorContext {
	var p = new(DirectAbstractDeclaratorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_directAbstractDeclarator

	return p
}

func (s *DirectAbstractDeclaratorContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectAbstractDeclaratorContext) AbstractDeclarator() IAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAbstractDeclaratorContext)
}

func (s *DirectAbstractDeclaratorContext) AllGccDeclaratorExtension() []IGccDeclaratorExtensionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem())
	var tst = make([]IGccDeclaratorExtensionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGccDeclaratorExtensionContext)
		}
	}

	return tst
}

func (s *DirectAbstractDeclaratorContext) GccDeclaratorExtension(i int) IGccDeclaratorExtensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGccDeclaratorExtensionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGccDeclaratorExtensionContext)
}

func (s *DirectAbstractDeclaratorContext) TypeQualifierList() ITypeQualifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeQualifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeQualifierListContext)
}

func (s *DirectAbstractDeclaratorContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *DirectAbstractDeclaratorContext) ParameterTypeList() IParameterTypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterTypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterTypeListContext)
}

func (s *DirectAbstractDeclaratorContext) DirectAbstractDeclarator() IDirectAbstractDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectAbstractDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectAbstractDeclaratorContext)
}

func (s *DirectAbstractDeclaratorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectAbstractDeclaratorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectAbstractDeclaratorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDirectAbstractDeclarator(s)
	}
}

func (s *DirectAbstractDeclaratorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDirectAbstractDeclarator(s)
	}
}

func (p *CParser) DirectAbstractDeclarator() (localctx IDirectAbstractDeclaratorContext) {
	return p.directAbstractDeclarator(0)
}

func (p *CParser) directAbstractDeclarator(_p int) (localctx IDirectAbstractDeclaratorContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDirectAbstractDeclaratorContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDirectAbstractDeclaratorContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 124
	p.EnterRecursionRule(localctx, 124, CParserRULE_directAbstractDeclarator, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(914)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(915)
			p.AbstractDeclarator()
		}
		{
			p.SetState(916)
			p.Match(CParserRightParen)
		}
		p.SetState(920)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(917)
					p.GccDeclaratorExtension()
				}

			}
			p.SetState(922)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(923)
			p.Match(CParserLeftBracket)
		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
			{
				p.SetState(924)
				p.typeQualifierList(0)
			}

		}
		p.SetState(928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(927)
				p.AssignmentExpression()
			}

		}
		{
			p.SetState(930)
			p.Match(CParserRightBracket)
		}

	case 3:
		{
			p.SetState(931)
			p.Match(CParserLeftBracket)
		}
		{
			p.SetState(932)
			p.Match(CParserStatic)
		}
		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
			{
				p.SetState(933)
				p.typeQualifierList(0)
			}

		}
		{
			p.SetState(936)
			p.AssignmentExpression()
		}
		{
			p.SetState(937)
			p.Match(CParserRightBracket)
		}

	case 4:
		{
			p.SetState(939)
			p.Match(CParserLeftBracket)
		}
		{
			p.SetState(940)
			p.typeQualifierList(0)
		}
		{
			p.SetState(941)
			p.Match(CParserStatic)
		}
		{
			p.SetState(942)
			p.AssignmentExpression()
		}
		{
			p.SetState(943)
			p.Match(CParserRightBracket)
		}

	case 5:
		{
			p.SetState(945)
			p.Match(CParserLeftBracket)
		}
		{
			p.SetState(946)
			p.Match(CParserStar)
		}
		{
			p.SetState(947)
			p.Match(CParserRightBracket)
		}

	case 6:
		{
			p.SetState(948)
			p.Match(CParserLeftParen)
		}
		p.SetState(950)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__11)|(1<<CParserAuto)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserDouble)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserNoreturn-32))|(1<<(CParserThreadLocal-32)))) != 0) || _la == CParserIdentifier {
			{
				p.SetState(949)
				p.ParameterTypeList()
			}

		}
		{
			p.SetState(952)
			p.Match(CParserRightParen)
		}
		p.SetState(956)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(953)
					p.GccDeclaratorExtension()
				}

			}
			p.SetState(958)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext())
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1004)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1002)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
			case 1:
				localctx = NewDirectAbstractDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directAbstractDeclarator)
				p.SetState(961)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(962)
					p.Match(CParserLeftBracket)
				}
				p.SetState(964)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
					{
						p.SetState(963)
						p.typeQualifierList(0)
					}

				}
				p.SetState(967)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
					{
						p.SetState(966)
						p.AssignmentExpression()
					}

				}
				{
					p.SetState(969)
					p.Match(CParserRightBracket)
				}

			case 2:
				localctx = NewDirectAbstractDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directAbstractDeclarator)
				p.SetState(970)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(971)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(972)
					p.Match(CParserStatic)
				}
				p.SetState(974)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CParserConst || (((_la-35)&-(0x1f+1)) == 0 && ((1<<uint((_la-35)))&((1<<(CParserRestrict-35))|(1<<(CParserVolatile-35))|(1<<(CParserAtomic-35)))) != 0) {
					{
						p.SetState(973)
						p.typeQualifierList(0)
					}

				}
				{
					p.SetState(976)
					p.AssignmentExpression()
				}
				{
					p.SetState(977)
					p.Match(CParserRightBracket)
				}

			case 3:
				localctx = NewDirectAbstractDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directAbstractDeclarator)
				p.SetState(979)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(980)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(981)
					p.typeQualifierList(0)
				}
				{
					p.SetState(982)
					p.Match(CParserStatic)
				}
				{
					p.SetState(983)
					p.AssignmentExpression()
				}
				{
					p.SetState(984)
					p.Match(CParserRightBracket)
				}

			case 4:
				localctx = NewDirectAbstractDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directAbstractDeclarator)
				p.SetState(986)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(987)
					p.Match(CParserLeftBracket)
				}
				{
					p.SetState(988)
					p.Match(CParserStar)
				}
				{
					p.SetState(989)
					p.Match(CParserRightBracket)
				}

			case 5:
				localctx = NewDirectAbstractDeclaratorContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, CParserRULE_directAbstractDeclarator)
				p.SetState(990)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(991)
					p.Match(CParserLeftParen)
				}
				p.SetState(993)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__11)|(1<<CParserAuto)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserDouble)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserNoreturn-32))|(1<<(CParserThreadLocal-32)))) != 0) || _la == CParserIdentifier {
					{
						p.SetState(992)
						p.ParameterTypeList()
					}

				}
				{
					p.SetState(995)
					p.Match(CParserRightParen)
				}
				p.SetState(999)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())

				for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					if _alt == 1 {
						{
							p.SetState(996)
							p.GccDeclaratorExtension()
						}

					}
					p.SetState(1001)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext())
				}

			}

		}
		p.SetState(1006)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext())
	}

	return localctx
}

// ITypedefNameContext is an interface to support dynamic dispatch.
type ITypedefNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypedefNameContext differentiates from other interfaces.
	IsTypedefNameContext()
}

type TypedefNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypedefNameContext() *TypedefNameContext {
	var p = new(TypedefNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_typedefName
	return p
}

func (*TypedefNameContext) IsTypedefNameContext() {}

func NewTypedefNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypedefNameContext {
	var p = new(TypedefNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_typedefName

	return p
}

func (s *TypedefNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypedefNameContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *TypedefNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedefNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypedefNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTypedefName(s)
	}
}

func (s *TypedefNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTypedefName(s)
	}
}

func (p *CParser) TypedefName() (localctx ITypedefNameContext) {
	localctx = NewTypedefNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CParserRULE_typedefName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1007)
		p.Match(CParserIdentifier)
	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *InitializerContext) InitializerList() IInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterInitializer(s)
	}
}

func (s *InitializerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitInitializer(s)
	}
}

func (p *CParser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CParserRULE_initializer)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1019)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1009)
			p.AssignmentExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1010)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(1011)
			p.initializerList(0)
		}
		{
			p.SetState(1012)
			p.Match(CParserRightBrace)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1014)
			p.Match(CParserLeftBrace)
		}
		{
			p.SetState(1015)
			p.initializerList(0)
		}
		{
			p.SetState(1016)
			p.Match(CParserComma)
		}
		{
			p.SetState(1017)
			p.Match(CParserRightBrace)
		}

	}

	return localctx
}

// IInitializerListContext is an interface to support dynamic dispatch.
type IInitializerListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerListContext differentiates from other interfaces.
	IsInitializerListContext()
}

type InitializerListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerListContext() *InitializerListContext {
	var p = new(InitializerListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_initializerList
	return p
}

func (*InitializerListContext) IsInitializerListContext() {}

func NewInitializerListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerListContext {
	var p = new(InitializerListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_initializerList

	return p
}

func (s *InitializerListContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerListContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *InitializerListContext) Designation() IDesignationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesignationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesignationContext)
}

func (s *InitializerListContext) InitializerList() IInitializerListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerListContext)
}

func (s *InitializerListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterInitializerList(s)
	}
}

func (s *InitializerListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitInitializerList(s)
	}
}

func (p *CParser) InitializerList() (localctx IInitializerListContext) {
	return p.initializerList(0)
}

func (p *CParser) initializerList(_p int) (localctx IInitializerListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewInitializerListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IInitializerListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 130
	p.EnterRecursionRule(localctx, 130, CParserRULE_initializerList, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CParserLeftBracket || _la == CParserDot {
		{
			p.SetState(1022)
			p.Designation()
		}

	}
	{
		p.SetState(1025)
		p.Initializer()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewInitializerListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_initializerList)
			p.SetState(1027)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1028)
				p.Match(CParserComma)
			}
			p.SetState(1030)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CParserLeftBracket || _la == CParserDot {
				{
					p.SetState(1029)
					p.Designation()
				}

			}
			{
				p.SetState(1032)
				p.Initializer()
			}

		}
		p.SetState(1037)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext())
	}

	return localctx
}

// IDesignationContext is an interface to support dynamic dispatch.
type IDesignationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDesignationContext differentiates from other interfaces.
	IsDesignationContext()
}

type DesignationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesignationContext() *DesignationContext {
	var p = new(DesignationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_designation
	return p
}

func (*DesignationContext) IsDesignationContext() {}

func NewDesignationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DesignationContext {
	var p = new(DesignationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_designation

	return p
}

func (s *DesignationContext) GetParser() antlr.Parser { return s.parser }

func (s *DesignationContext) DesignatorList() IDesignatorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesignatorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesignatorListContext)
}

func (s *DesignationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DesignationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DesignationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDesignation(s)
	}
}

func (s *DesignationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDesignation(s)
	}
}

func (p *CParser) Designation() (localctx IDesignationContext) {
	localctx = NewDesignationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CParserRULE_designation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1038)
		p.designatorList(0)
	}
	{
		p.SetState(1039)
		p.Match(CParserAssign)
	}

	return localctx
}

// IDesignatorListContext is an interface to support dynamic dispatch.
type IDesignatorListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDesignatorListContext differentiates from other interfaces.
	IsDesignatorListContext()
}

type DesignatorListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesignatorListContext() *DesignatorListContext {
	var p = new(DesignatorListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_designatorList
	return p
}

func (*DesignatorListContext) IsDesignatorListContext() {}

func NewDesignatorListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DesignatorListContext {
	var p = new(DesignatorListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_designatorList

	return p
}

func (s *DesignatorListContext) GetParser() antlr.Parser { return s.parser }

func (s *DesignatorListContext) Designator() IDesignatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesignatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesignatorContext)
}

func (s *DesignatorListContext) DesignatorList() IDesignatorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDesignatorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDesignatorListContext)
}

func (s *DesignatorListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DesignatorListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DesignatorListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDesignatorList(s)
	}
}

func (s *DesignatorListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDesignatorList(s)
	}
}

func (p *CParser) DesignatorList() (localctx IDesignatorListContext) {
	return p.designatorList(0)
}

func (p *CParser) designatorList(_p int) (localctx IDesignatorListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDesignatorListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDesignatorListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 134
	p.EnterRecursionRule(localctx, 134, CParserRULE_designatorList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Designator()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1048)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDesignatorListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_designatorList)
			p.SetState(1044)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1045)
				p.Designator()
			}

		}
		p.SetState(1050)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext())
	}

	return localctx
}

// IDesignatorContext is an interface to support dynamic dispatch.
type IDesignatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDesignatorContext differentiates from other interfaces.
	IsDesignatorContext()
}

type DesignatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDesignatorContext() *DesignatorContext {
	var p = new(DesignatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_designator
	return p
}

func (*DesignatorContext) IsDesignatorContext() {}

func NewDesignatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DesignatorContext {
	var p = new(DesignatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_designator

	return p
}

func (s *DesignatorContext) GetParser() antlr.Parser { return s.parser }

func (s *DesignatorContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *DesignatorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *DesignatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DesignatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DesignatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDesignator(s)
	}
}

func (s *DesignatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDesignator(s)
	}
}

func (p *CParser) Designator() (localctx IDesignatorContext) {
	localctx = NewDesignatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CParserRULE_designator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1057)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserLeftBracket:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1051)
			p.Match(CParserLeftBracket)
		}
		{
			p.SetState(1052)
			p.ConstantExpression()
		}
		{
			p.SetState(1053)
			p.Match(CParserRightBracket)
		}

	case CParserDot:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1055)
			p.Match(CParserDot)
		}
		{
			p.SetState(1056)
			p.Match(CParserIdentifier)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStaticAssertDeclarationContext is an interface to support dynamic dispatch.
type IStaticAssertDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStaticAssertDeclarationContext differentiates from other interfaces.
	IsStaticAssertDeclarationContext()
}

type StaticAssertDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStaticAssertDeclarationContext() *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_staticAssertDeclaration
	return p
}

func (*StaticAssertDeclarationContext) IsStaticAssertDeclarationContext() {}

func NewStaticAssertDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StaticAssertDeclarationContext {
	var p = new(StaticAssertDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_staticAssertDeclaration

	return p
}

func (s *StaticAssertDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StaticAssertDeclarationContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *StaticAssertDeclarationContext) AllStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(CParserStringLiteral)
}

func (s *StaticAssertDeclarationContext) StringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(CParserStringLiteral, i)
}

func (s *StaticAssertDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StaticAssertDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StaticAssertDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStaticAssertDeclaration(s)
	}
}

func (s *StaticAssertDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStaticAssertDeclaration(s)
	}
}

func (p *CParser) StaticAssertDeclaration() (localctx IStaticAssertDeclarationContext) {
	localctx = NewStaticAssertDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CParserRULE_staticAssertDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1059)
		p.Match(CParserStaticAssert)
	}
	{
		p.SetState(1060)
		p.Match(CParserLeftParen)
	}
	{
		p.SetState(1061)
		p.ConstantExpression()
	}
	{
		p.SetState(1062)
		p.Match(CParserComma)
	}
	p.SetState(1064)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == CParserStringLiteral {
		{
			p.SetState(1063)
			p.Match(CParserStringLiteral)
		}

		p.SetState(1066)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1068)
		p.Match(CParserRightParen)
	}
	{
		p.SetState(1069)
		p.Match(CParserSemi)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LabeledStatement() ILabeledStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledStatementContext)
}

func (s *StatementContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *StatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *StatementContext) SelectionStatement() ISelectionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionStatementContext)
}

func (s *StatementContext) IterationStatement() IIterationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIterationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIterationStatementContext)
}

func (s *StatementContext) JumpStatement() IJumpStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJumpStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJumpStatementContext)
}

func (s *StatementContext) AllLogicalOrExpression() []ILogicalOrExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem())
	var tst = make([]ILogicalOrExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILogicalOrExpressionContext)
		}
	}

	return tst
}

func (s *StatementContext) LogicalOrExpression(i int) ILogicalOrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILogicalOrExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILogicalOrExpressionContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *CParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1108)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1071)
			p.LabeledStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1072)
			p.CompoundStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1073)
			p.ExpressionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1074)
			p.SelectionStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1075)
			p.IterationStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1076)
			p.JumpStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		p.SetState(1077)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CParserT__10 || _la == CParserT__12) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		p.SetState(1078)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CParserT__13 || _la == CParserVolatile) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
		{
			p.SetState(1079)
			p.Match(CParserLeftParen)
		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1080)
				p.logicalOrExpression(0)
			}
			p.SetState(1085)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == CParserComma {
				{
					p.SetState(1081)
					p.Match(CParserComma)
				}
				{
					p.SetState(1082)
					p.logicalOrExpression(0)
				}

				p.SetState(1087)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(1103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CParserColon {
			{
				p.SetState(1090)
				p.Match(CParserColon)
			}
			p.SetState(1099)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
				{
					p.SetState(1091)
					p.logicalOrExpression(0)
				}
				p.SetState(1096)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == CParserComma {
					{
						p.SetState(1092)
						p.Match(CParserComma)
					}
					{
						p.SetState(1093)
						p.logicalOrExpression(0)
					}

					p.SetState(1098)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}

			}

			p.SetState(1105)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1106)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1107)
			p.Match(CParserSemi)
		}

	}

	return localctx
}

// ILabeledStatementContext is an interface to support dynamic dispatch.
type ILabeledStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledStatementContext differentiates from other interfaces.
	IsLabeledStatementContext()
}

type LabeledStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStatementContext() *LabeledStatementContext {
	var p = new(LabeledStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_labeledStatement
	return p
}

func (*LabeledStatementContext) IsLabeledStatementContext() {}

func NewLabeledStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStatementContext {
	var p = new(LabeledStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_labeledStatement

	return p
}

func (s *LabeledStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *LabeledStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStatementContext) ConstantExpression() IConstantExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantExpressionContext)
}

func (s *LabeledStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterLabeledStatement(s)
	}
}

func (s *LabeledStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitLabeledStatement(s)
	}
}

func (p *CParser) LabeledStatement() (localctx ILabeledStatementContext) {
	localctx = NewLabeledStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CParserRULE_labeledStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1121)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1110)
			p.Match(CParserIdentifier)
		}
		{
			p.SetState(1111)
			p.Match(CParserColon)
		}
		{
			p.SetState(1112)
			p.Statement()
		}

	case CParserCase:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1113)
			p.Match(CParserCase)
		}
		{
			p.SetState(1114)
			p.ConstantExpression()
		}
		{
			p.SetState(1115)
			p.Match(CParserColon)
		}
		{
			p.SetState(1116)
			p.Statement()
		}

	case CParserDefault:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1118)
			p.Match(CParserDefault)
		}
		{
			p.SetState(1119)
			p.Match(CParserColon)
		}
		{
			p.SetState(1120)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ICompoundStatementContext is an interface to support dynamic dispatch.
type ICompoundStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompoundStatementContext differentiates from other interfaces.
	IsCompoundStatementContext()
}

type CompoundStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompoundStatementContext() *CompoundStatementContext {
	var p = new(CompoundStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_compoundStatement
	return p
}

func (*CompoundStatementContext) IsCompoundStatementContext() {}

func NewCompoundStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompoundStatementContext {
	var p = new(CompoundStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_compoundStatement

	return p
}

func (s *CompoundStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *CompoundStatementContext) BlockItemList() IBlockItemListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockItemListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockItemListContext)
}

func (s *CompoundStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompoundStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompoundStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterCompoundStatement(s)
	}
}

func (s *CompoundStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitCompoundStatement(s)
	}
}

func (p *CParser) CompoundStatement() (localctx ICompoundStatementContext) {
	localctx = NewCompoundStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CParserRULE_compoundStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1123)
		p.Match(CParserLeftBrace)
	}
	p.SetState(1125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__10)|(1<<CParserT__11)|(1<<CParserT__12)|(1<<CParserAuto)|(1<<CParserBreak)|(1<<CParserCase)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserContinue)|(1<<CParserDefault)|(1<<CParserDo)|(1<<CParserDouble)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserFor)|(1<<CParserGoto)|(1<<CParserIf)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserReturn-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserSizeof-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserSwitch-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserWhile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAlignof-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserGeneric-32))|(1<<(CParserNoreturn-32))|(1<<(CParserStaticAssert-32))|(1<<(CParserThreadLocal-32))|(1<<(CParserLeftParen-32))|(1<<(CParserLeftBrace-32)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71))|(1<<(CParserSemi-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
		{
			p.SetState(1124)
			p.blockItemList(0)
		}

	}
	{
		p.SetState(1127)
		p.Match(CParserRightBrace)
	}

	return localctx
}

// IBlockItemListContext is an interface to support dynamic dispatch.
type IBlockItemListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockItemListContext differentiates from other interfaces.
	IsBlockItemListContext()
}

type BlockItemListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockItemListContext() *BlockItemListContext {
	var p = new(BlockItemListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_blockItemList
	return p
}

func (*BlockItemListContext) IsBlockItemListContext() {}

func NewBlockItemListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockItemListContext {
	var p = new(BlockItemListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_blockItemList

	return p
}

func (s *BlockItemListContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockItemListContext) BlockItem() IBlockItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockItemContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockItemContext)
}

func (s *BlockItemListContext) BlockItemList() IBlockItemListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockItemListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockItemListContext)
}

func (s *BlockItemListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockItemListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockItemListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterBlockItemList(s)
	}
}

func (s *BlockItemListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitBlockItemList(s)
	}
}

func (p *CParser) BlockItemList() (localctx IBlockItemListContext) {
	return p.blockItemList(0)
}

func (p *CParser) blockItemList(_p int) (localctx IBlockItemListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBlockItemListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBlockItemListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 146
	p.EnterRecursionRule(localctx, 146, CParserRULE_blockItemList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1130)
		p.BlockItem()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1136)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewBlockItemListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_blockItemList)
			p.SetState(1132)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1133)
				p.BlockItem()
			}

		}
		p.SetState(1138)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext())
	}

	return localctx
}

// IBlockItemContext is an interface to support dynamic dispatch.
type IBlockItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockItemContext differentiates from other interfaces.
	IsBlockItemContext()
}

type BlockItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockItemContext() *BlockItemContext {
	var p = new(BlockItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_blockItem
	return p
}

func (*BlockItemContext) IsBlockItemContext() {}

func NewBlockItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockItemContext {
	var p = new(BlockItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_blockItem

	return p
}

func (s *BlockItemContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockItemContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *BlockItemContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterBlockItem(s)
	}
}

func (s *BlockItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitBlockItem(s)
	}
}

func (p *CParser) BlockItem() (localctx IBlockItemContext) {
	localctx = NewBlockItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CParserRULE_blockItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1139)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1140)
			p.Statement()
		}

	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (p *CParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CParserRULE_expressionStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1144)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
		{
			p.SetState(1143)
			p.expression(0)
		}

	}
	{
		p.SetState(1146)
		p.Match(CParserSemi)
	}

	return localctx
}

// ISelectionStatementContext is an interface to support dynamic dispatch.
type ISelectionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectionStatementContext differentiates from other interfaces.
	IsSelectionStatementContext()
}

type SelectionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionStatementContext() *SelectionStatementContext {
	var p = new(SelectionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_selectionStatement
	return p
}

func (*SelectionStatementContext) IsSelectionStatementContext() {}

func NewSelectionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionStatementContext {
	var p = new(SelectionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_selectionStatement

	return p
}

func (s *SelectionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectionStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *SelectionStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *SelectionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterSelectionStatement(s)
	}
}

func (s *SelectionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitSelectionStatement(s)
	}
}

func (p *CParser) SelectionStatement() (localctx ISelectionStatementContext) {
	localctx = NewSelectionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CParserRULE_selectionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1163)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserIf:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1148)
			p.Match(CParserIf)
		}
		{
			p.SetState(1149)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(1150)
			p.expression(0)
		}
		{
			p.SetState(1151)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1152)
			p.Statement()
		}
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1153)
				p.Match(CParserElse)
			}
			{
				p.SetState(1154)
				p.Statement()
			}

		}

	case CParserSwitch:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1157)
			p.Match(CParserSwitch)
		}
		{
			p.SetState(1158)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(1159)
			p.expression(0)
		}
		{
			p.SetState(1160)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1161)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIterationStatementContext is an interface to support dynamic dispatch.
type IIterationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIterationStatementContext differentiates from other interfaces.
	IsIterationStatementContext()
}

type IterationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIterationStatementContext() *IterationStatementContext {
	var p = new(IterationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_iterationStatement
	return p
}

func (*IterationStatementContext) IsIterationStatementContext() {}

func NewIterationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IterationStatementContext {
	var p = new(IterationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_iterationStatement

	return p
}

func (s *IterationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IterationStatementContext) While() antlr.TerminalNode {
	return s.GetToken(CParserWhile, 0)
}

func (s *IterationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IterationStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IterationStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(CParserDo, 0)
}

func (s *IterationStatementContext) For() antlr.TerminalNode {
	return s.GetToken(CParserFor, 0)
}

func (s *IterationStatementContext) ForCondition() IForConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForConditionContext)
}

func (s *IterationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IterationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IterationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterIterationStatement(s)
	}
}

func (s *IterationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitIterationStatement(s)
	}
}

func (p *CParser) IterationStatement() (localctx IIterationStatementContext) {
	localctx = NewIterationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CParserRULE_iterationStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1185)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CParserWhile:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1165)
			p.Match(CParserWhile)
		}
		{
			p.SetState(1166)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(1167)
			p.expression(0)
		}
		{
			p.SetState(1168)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1169)
			p.Statement()
		}

	case CParserDo:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1171)
			p.Match(CParserDo)
		}
		{
			p.SetState(1172)
			p.Statement()
		}
		{
			p.SetState(1173)
			p.Match(CParserWhile)
		}
		{
			p.SetState(1174)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(1175)
			p.expression(0)
		}
		{
			p.SetState(1176)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1177)
			p.Match(CParserSemi)
		}

	case CParserFor:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1179)
			p.Match(CParserFor)
		}
		{
			p.SetState(1180)
			p.Match(CParserLeftParen)
		}
		{
			p.SetState(1181)
			p.ForCondition()
		}
		{
			p.SetState(1182)
			p.Match(CParserRightParen)
		}
		{
			p.SetState(1183)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForConditionContext is an interface to support dynamic dispatch.
type IForConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForConditionContext differentiates from other interfaces.
	IsForConditionContext()
}

type ForConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForConditionContext() *ForConditionContext {
	var p = new(ForConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_forCondition
	return p
}

func (*ForConditionContext) IsForConditionContext() {}

func NewForConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForConditionContext {
	var p = new(ForConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_forCondition

	return p
}

func (s *ForConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ForConditionContext) ForDeclaration() IForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForDeclarationContext)
}

func (s *ForConditionContext) AllForExpression() []IForExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IForExpressionContext)(nil)).Elem())
	var tst = make([]IForExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IForExpressionContext)
		}
	}

	return tst
}

func (s *ForConditionContext) ForExpression(i int) IForExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IForExpressionContext)
}

func (s *ForConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterForCondition(s)
	}
}

func (s *ForConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitForCondition(s)
	}
}

func (p *CParser) ForCondition() (localctx IForConditionContext) {
	localctx = NewForConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CParserRULE_forCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1207)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1187)
			p.ForDeclaration()
		}
		{
			p.SetState(1188)
			p.Match(CParserSemi)
		}
		p.SetState(1190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1189)
				p.forExpression(0)
			}

		}
		{
			p.SetState(1192)
			p.Match(CParserSemi)
		}
		p.SetState(1194)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1193)
				p.forExpression(0)
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1197)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1196)
				p.expression(0)
			}

		}
		{
			p.SetState(1199)
			p.Match(CParserSemi)
		}
		p.SetState(1201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1200)
				p.forExpression(0)
			}

		}
		{
			p.SetState(1203)
			p.Match(CParserSemi)
		}
		p.SetState(1205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1204)
				p.forExpression(0)
			}

		}

	}

	return localctx
}

// IForDeclarationContext is an interface to support dynamic dispatch.
type IForDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForDeclarationContext differentiates from other interfaces.
	IsForDeclarationContext()
}

type ForDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForDeclarationContext() *ForDeclarationContext {
	var p = new(ForDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_forDeclaration
	return p
}

func (*ForDeclarationContext) IsForDeclarationContext() {}

func NewForDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForDeclarationContext {
	var p = new(ForDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_forDeclaration

	return p
}

func (s *ForDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ForDeclarationContext) DeclarationSpecifiers() IDeclarationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifiersContext)
}

func (s *ForDeclarationContext) InitDeclaratorList() IInitDeclaratorListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitDeclaratorListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitDeclaratorListContext)
}

func (s *ForDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterForDeclaration(s)
	}
}

func (s *ForDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitForDeclaration(s)
	}
}

func (p *CParser) ForDeclaration() (localctx IForDeclarationContext) {
	localctx = NewForDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CParserRULE_forDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1209)
			p.DeclarationSpecifiers()
		}
		{
			p.SetState(1210)
			p.initDeclaratorList(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1212)
			p.DeclarationSpecifiers()
		}

	}

	return localctx
}

// IForExpressionContext is an interface to support dynamic dispatch.
type IForExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForExpressionContext differentiates from other interfaces.
	IsForExpressionContext()
}

type ForExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForExpressionContext() *ForExpressionContext {
	var p = new(ForExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_forExpression
	return p
}

func (*ForExpressionContext) IsForExpressionContext() {}

func NewForExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForExpressionContext {
	var p = new(ForExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_forExpression

	return p
}

func (s *ForExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ForExpressionContext) AssignmentExpression() IAssignmentExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentExpressionContext)
}

func (s *ForExpressionContext) ForExpression() IForExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForExpressionContext)
}

func (s *ForExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterForExpression(s)
	}
}

func (s *ForExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitForExpression(s)
	}
}

func (p *CParser) ForExpression() (localctx IForExpressionContext) {
	return p.forExpression(0)
}

func (p *CParser) forExpression(_p int) (localctx IForExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewForExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IForExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 160
	p.EnterRecursionRule(localctx, 160, CParserRULE_forExpression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1216)
		p.AssignmentExpression()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1223)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewForExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_forExpression)
			p.SetState(1218)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1219)
				p.Match(CParserComma)
			}
			{
				p.SetState(1220)
				p.AssignmentExpression()
			}

		}
		p.SetState(1225)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 131, p.GetParserRuleContext())
	}

	return localctx
}

// IJumpStatementContext is an interface to support dynamic dispatch.
type IJumpStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJumpStatementContext differentiates from other interfaces.
	IsJumpStatementContext()
}

type JumpStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJumpStatementContext() *JumpStatementContext {
	var p = new(JumpStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_jumpStatement
	return p
}

func (*JumpStatementContext) IsJumpStatementContext() {}

func NewJumpStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JumpStatementContext {
	var p = new(JumpStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_jumpStatement

	return p
}

func (s *JumpStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *JumpStatementContext) Identifier() antlr.TerminalNode {
	return s.GetToken(CParserIdentifier, 0)
}

func (s *JumpStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *JumpStatementContext) UnaryExpression() IUnaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExpressionContext)
}

func (s *JumpStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JumpStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JumpStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterJumpStatement(s)
	}
}

func (s *JumpStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitJumpStatement(s)
	}
}

func (p *CParser) JumpStatement() (localctx IJumpStatementContext) {
	localctx = NewJumpStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CParserRULE_jumpStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1242)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 133, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1226)
			p.Match(CParserGoto)
		}
		{
			p.SetState(1227)
			p.Match(CParserIdentifier)
		}
		{
			p.SetState(1228)
			p.Match(CParserSemi)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1229)
			p.Match(CParserContinue)
		}
		{
			p.SetState(1230)
			p.Match(CParserSemi)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1231)
			p.Match(CParserBreak)
		}
		{
			p.SetState(1232)
			p.Match(CParserSemi)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1233)
			p.Match(CParserReturn)
		}
		p.SetState(1235)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__1)|(1<<CParserT__2))) != 0) || (((_la-39)&-(0x1f+1)) == 0 && ((1<<uint((_la-39)))&((1<<(CParserSizeof-39))|(1<<(CParserAlignof-39))|(1<<(CParserGeneric-39))|(1<<(CParserLeftParen-39)))) != 0) || (((_la-71)&-(0x1f+1)) == 0 && ((1<<uint((_la-71)))&((1<<(CParserPlus-71))|(1<<(CParserPlusPlus-71))|(1<<(CParserMinus-71))|(1<<(CParserMinusMinus-71))|(1<<(CParserStar-71))|(1<<(CParserAnd-71))|(1<<(CParserAndAnd-71))|(1<<(CParserNot-71))|(1<<(CParserTilde-71)))) != 0) || (((_la-105)&-(0x1f+1)) == 0 && ((1<<uint((_la-105)))&((1<<(CParserIdentifier-105))|(1<<(CParserConstant-105))|(1<<(CParserDigitSequence-105))|(1<<(CParserStringLiteral-105)))) != 0) {
			{
				p.SetState(1234)
				p.expression(0)
			}

		}
		{
			p.SetState(1237)
			p.Match(CParserSemi)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1238)
			p.Match(CParserGoto)
		}
		{
			p.SetState(1239)
			p.UnaryExpression()
		}
		{
			p.SetState(1240)
			p.Match(CParserSemi)
		}

	}

	return localctx
}

// ICompilationUnitContext is an interface to support dynamic dispatch.
type ICompilationUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompilationUnitContext differentiates from other interfaces.
	IsCompilationUnitContext()
}

type CompilationUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompilationUnitContext() *CompilationUnitContext {
	var p = new(CompilationUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_compilationUnit
	return p
}

func (*CompilationUnitContext) IsCompilationUnitContext() {}

func NewCompilationUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompilationUnitContext {
	var p = new(CompilationUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_compilationUnit

	return p
}

func (s *CompilationUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *CompilationUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(CParserEOF, 0)
}

func (s *CompilationUnitContext) TranslationUnit() ITranslationUnitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITranslationUnitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITranslationUnitContext)
}

func (s *CompilationUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompilationUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompilationUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterCompilationUnit(s)
	}
}

func (s *CompilationUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitCompilationUnit(s)
	}
}

func (p *CParser) CompilationUnit() (localctx ICompilationUnitContext) {
	localctx = NewCompilationUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CParserRULE_compilationUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1245)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__11)|(1<<CParserAuto)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserDouble)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserNoreturn-32))|(1<<(CParserStaticAssert-32))|(1<<(CParserThreadLocal-32))|(1<<(CParserLeftParen-32)))) != 0) || (((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(CParserStar-75))|(1<<(CParserCaret-75))|(1<<(CParserSemi-75))|(1<<(CParserIdentifier-75)))) != 0) {
		{
			p.SetState(1244)
			p.translationUnit(0)
		}

	}
	{
		p.SetState(1247)
		p.Match(CParserEOF)
	}

	return localctx
}

// ITranslationUnitContext is an interface to support dynamic dispatch.
type ITranslationUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTranslationUnitContext differentiates from other interfaces.
	IsTranslationUnitContext()
}

type TranslationUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTranslationUnitContext() *TranslationUnitContext {
	var p = new(TranslationUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_translationUnit
	return p
}

func (*TranslationUnitContext) IsTranslationUnitContext() {}

func NewTranslationUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TranslationUnitContext {
	var p = new(TranslationUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_translationUnit

	return p
}

func (s *TranslationUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *TranslationUnitContext) ExternalDeclaration() IExternalDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExternalDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExternalDeclarationContext)
}

func (s *TranslationUnitContext) TranslationUnit() ITranslationUnitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITranslationUnitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITranslationUnitContext)
}

func (s *TranslationUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TranslationUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TranslationUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterTranslationUnit(s)
	}
}

func (s *TranslationUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitTranslationUnit(s)
	}
}

func (p *CParser) TranslationUnit() (localctx ITranslationUnitContext) {
	return p.translationUnit(0)
}

func (p *CParser) translationUnit(_p int) (localctx ITranslationUnitContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTranslationUnitContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITranslationUnitContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 166
	p.EnterRecursionRule(localctx, 166, CParserRULE_translationUnit, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1250)
		p.ExternalDeclaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1256)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTranslationUnitContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_translationUnit)
			p.SetState(1252)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1253)
				p.ExternalDeclaration()
			}

		}
		p.SetState(1258)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
	}

	return localctx
}

// IExternalDeclarationContext is an interface to support dynamic dispatch.
type IExternalDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExternalDeclarationContext differentiates from other interfaces.
	IsExternalDeclarationContext()
}

type ExternalDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExternalDeclarationContext() *ExternalDeclarationContext {
	var p = new(ExternalDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_externalDeclaration
	return p
}

func (*ExternalDeclarationContext) IsExternalDeclarationContext() {}

func NewExternalDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExternalDeclarationContext {
	var p = new(ExternalDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_externalDeclaration

	return p
}

func (s *ExternalDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ExternalDeclarationContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ExternalDeclarationContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *ExternalDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExternalDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExternalDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterExternalDeclaration(s)
	}
}

func (s *ExternalDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitExternalDeclaration(s)
	}
}

func (p *CParser) ExternalDeclaration() (localctx IExternalDeclarationContext) {
	localctx = NewExternalDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CParserRULE_externalDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1262)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1259)
			p.FunctionDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1260)
			p.Declaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1261)
			p.Match(CParserSemi)
		}

	}

	return localctx
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) Declarator() IDeclaratorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclaratorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclaratorContext)
}

func (s *FunctionDefinitionContext) CompoundStatement() ICompoundStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompoundStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompoundStatementContext)
}

func (s *FunctionDefinitionContext) DeclarationSpecifiers() IDeclarationSpecifiersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationSpecifiersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationSpecifiersContext)
}

func (s *FunctionDefinitionContext) DeclarationList() IDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationListContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitFunctionDefinition(s)
	}
}

func (p *CParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CParserRULE_functionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1264)
			p.DeclarationSpecifiers()
		}

	}
	{
		p.SetState(1267)
		p.Declarator()
	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CParserT__0)|(1<<CParserT__3)|(1<<CParserT__4)|(1<<CParserT__5)|(1<<CParserT__6)|(1<<CParserT__7)|(1<<CParserT__8)|(1<<CParserT__9)|(1<<CParserT__11)|(1<<CParserAuto)|(1<<CParserChar)|(1<<CParserConst)|(1<<CParserDouble)|(1<<CParserEnum)|(1<<CParserExtern)|(1<<CParserFloat)|(1<<CParserInline))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(CParserInt-32))|(1<<(CParserLong-32))|(1<<(CParserRegister-32))|(1<<(CParserRestrict-32))|(1<<(CParserShort-32))|(1<<(CParserSigned-32))|(1<<(CParserStatic-32))|(1<<(CParserStruct-32))|(1<<(CParserTypedef-32))|(1<<(CParserUnion-32))|(1<<(CParserUnsigned-32))|(1<<(CParserVoid-32))|(1<<(CParserVolatile-32))|(1<<(CParserAlignas-32))|(1<<(CParserAtomic-32))|(1<<(CParserBool-32))|(1<<(CParserComplex-32))|(1<<(CParserNoreturn-32))|(1<<(CParserStaticAssert-32))|(1<<(CParserThreadLocal-32)))) != 0) || _la == CParserIdentifier {
		{
			p.SetState(1268)
			p.declarationList(0)
		}

	}
	{
		p.SetState(1271)
		p.CompoundStatement()
	}

	return localctx
}

// IDeclarationListContext is an interface to support dynamic dispatch.
type IDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationListContext differentiates from other interfaces.
	IsDeclarationListContext()
}

type DeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationListContext() *DeclarationListContext {
	var p = new(DeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CParserRULE_declarationList
	return p
}

func (*DeclarationListContext) IsDeclarationListContext() {}

func NewDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationListContext {
	var p = new(DeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CParserRULE_declarationList

	return p
}

func (s *DeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationListContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *DeclarationListContext) DeclarationList() IDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationListContext)
}

func (s *DeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.EnterDeclarationList(s)
	}
}

func (s *DeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CListener); ok {
		listenerT.ExitDeclarationList(s)
	}
}

func (p *CParser) DeclarationList() (localctx IDeclarationListContext) {
	return p.declarationList(0)
}

func (p *CParser) declarationList(_p int) (localctx IDeclarationListContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDeclarationListContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDeclarationListContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 172
	p.EnterRecursionRule(localctx, 172, CParserRULE_declarationList, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1274)
		p.Declaration()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1280)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDeclarationListContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, CParserRULE_declarationList)
			p.SetState(1276)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(1277)
				p.Declaration()
			}

		}
		p.SetState(1282)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext())
	}

	return localctx
}

func (p *CParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 2:
		var t *GenericAssocListContext = nil
		if localctx != nil {
			t = localctx.(*GenericAssocListContext)
		}
		return p.GenericAssocList_Sempred(t, predIndex)

	case 4:
		var t *PostfixExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PostfixExpressionContext)
		}
		return p.PostfixExpression_Sempred(t, predIndex)

	case 5:
		var t *ArgumentExpressionListContext = nil
		if localctx != nil {
			t = localctx.(*ArgumentExpressionListContext)
		}
		return p.ArgumentExpressionList_Sempred(t, predIndex)

	case 9:
		var t *MultiplicativeExpressionContext = nil
		if localctx != nil {
			t = localctx.(*MultiplicativeExpressionContext)
		}
		return p.MultiplicativeExpression_Sempred(t, predIndex)

	case 10:
		var t *AdditiveExpressionContext = nil
		if localctx != nil {
			t = localctx.(*AdditiveExpressionContext)
		}
		return p.AdditiveExpression_Sempred(t, predIndex)

	case 11:
		var t *ShiftExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ShiftExpressionContext)
		}
		return p.ShiftExpression_Sempred(t, predIndex)

	case 12:
		var t *RelationalExpressionContext = nil
		if localctx != nil {
			t = localctx.(*RelationalExpressionContext)
		}
		return p.RelationalExpression_Sempred(t, predIndex)

	case 13:
		var t *EqualityExpressionContext = nil
		if localctx != nil {
			t = localctx.(*EqualityExpressionContext)
		}
		return p.EqualityExpression_Sempred(t, predIndex)

	case 14:
		var t *AndExpressionContext = nil
		if localctx != nil {
			t = localctx.(*AndExpressionContext)
		}
		return p.AndExpression_Sempred(t, predIndex)

	case 15:
		var t *ExclusiveOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExclusiveOrExpressionContext)
		}
		return p.ExclusiveOrExpression_Sempred(t, predIndex)

	case 16:
		var t *InclusiveOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*InclusiveOrExpressionContext)
		}
		return p.InclusiveOrExpression_Sempred(t, predIndex)

	case 17:
		var t *LogicalAndExpressionContext = nil
		if localctx != nil {
			t = localctx.(*LogicalAndExpressionContext)
		}
		return p.LogicalAndExpression_Sempred(t, predIndex)

	case 18:
		var t *LogicalOrExpressionContext = nil
		if localctx != nil {
			t = localctx.(*LogicalOrExpressionContext)
		}
		return p.LogicalOrExpression_Sempred(t, predIndex)

	case 22:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 28:
		var t *InitDeclaratorListContext = nil
		if localctx != nil {
			t = localctx.(*InitDeclaratorListContext)
		}
		return p.InitDeclaratorList_Sempred(t, predIndex)

	case 34:
		var t *StructDeclarationListContext = nil
		if localctx != nil {
			t = localctx.(*StructDeclarationListContext)
		}
		return p.StructDeclarationList_Sempred(t, predIndex)

	case 37:
		var t *StructDeclaratorListContext = nil
		if localctx != nil {
			t = localctx.(*StructDeclaratorListContext)
		}
		return p.StructDeclaratorList_Sempred(t, predIndex)

	case 40:
		var t *EnumeratorListContext = nil
		if localctx != nil {
			t = localctx.(*EnumeratorListContext)
		}
		return p.EnumeratorList_Sempred(t, predIndex)

	case 48:
		var t *DirectDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*DirectDeclaratorContext)
		}
		return p.DirectDeclarator_Sempred(t, predIndex)

	case 55:
		var t *TypeQualifierListContext = nil
		if localctx != nil {
			t = localctx.(*TypeQualifierListContext)
		}
		return p.TypeQualifierList_Sempred(t, predIndex)

	case 57:
		var t *ParameterListContext = nil
		if localctx != nil {
			t = localctx.(*ParameterListContext)
		}
		return p.ParameterList_Sempred(t, predIndex)

	case 59:
		var t *IdentifierListContext = nil
		if localctx != nil {
			t = localctx.(*IdentifierListContext)
		}
		return p.IdentifierList_Sempred(t, predIndex)

	case 62:
		var t *DirectAbstractDeclaratorContext = nil
		if localctx != nil {
			t = localctx.(*DirectAbstractDeclaratorContext)
		}
		return p.DirectAbstractDeclarator_Sempred(t, predIndex)

	case 65:
		var t *InitializerListContext = nil
		if localctx != nil {
			t = localctx.(*InitializerListContext)
		}
		return p.InitializerList_Sempred(t, predIndex)

	case 67:
		var t *DesignatorListContext = nil
		if localctx != nil {
			t = localctx.(*DesignatorListContext)
		}
		return p.DesignatorList_Sempred(t, predIndex)

	case 73:
		var t *BlockItemListContext = nil
		if localctx != nil {
			t = localctx.(*BlockItemListContext)
		}
		return p.BlockItemList_Sempred(t, predIndex)

	case 80:
		var t *ForExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ForExpressionContext)
		}
		return p.ForExpression_Sempred(t, predIndex)

	case 83:
		var t *TranslationUnitContext = nil
		if localctx != nil {
			t = localctx.(*TranslationUnitContext)
		}
		return p.TranslationUnit_Sempred(t, predIndex)

	case 86:
		var t *DeclarationListContext = nil
		if localctx != nil {
			t = localctx.(*DeclarationListContext)
		}
		return p.DeclarationList_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *CParser) GenericAssocList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) PostfixExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) ArgumentExpressionList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) MultiplicativeExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) AdditiveExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 11:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) ShiftExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) RelationalExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 15:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) EqualityExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 19:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 20:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) AndExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 21:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) ExclusiveOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 22:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) InclusiveOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 23:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) LogicalAndExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 24:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) LogicalOrExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 25:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 26:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) InitDeclaratorList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 27:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) StructDeclarationList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 28:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) StructDeclaratorList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 29:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) EnumeratorList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 30:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) DirectDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 31:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 33:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 35:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) TypeQualifierList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 37:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) ParameterList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 38:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) IdentifierList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 39:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) DirectAbstractDeclarator_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 40:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 41:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 42:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 43:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 44:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) InitializerList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 45:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) DesignatorList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 46:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) BlockItemList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 47:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) ForExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 48:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) TranslationUnit_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 49:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *CParser) DeclarationList_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 50:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
