// Package mumps_test contains tests for the mumps grammar.
// The tests should be run with the -timeout flag, to ensure the parser doesn't
// get stuck.
//
// Do not edit this file, it is generated by maketest.go
//
package mumps_test

import (
	"bramp.net/antlr4test-go/mumps"
	"github.com/antlr/antlr4/runtime/Go/antlr"
	"path/filepath"
	"testing"
)

const MAX_TOKENS = 1000000

var examples = []string{
	"grammars-v4/mumps/examples/epic_questions.m",
	"grammars-v4/mumps/examples/fibonacci.m",
	"grammars-v4/mumps/examples/for.m",
	"grammars-v4/mumps/examples/hello.m",
	"grammars-v4/mumps/examples/hello2.m",
	"grammars-v4/mumps/examples/hello3.m",
	"grammars-v4/mumps/examples/horolog.m",
	"grammars-v4/mumps/examples/math1.m",
	"grammars-v4/mumps/examples/sampleproc.m",
	"grammars-v4/mumps/examples/set.m",
}

func newCharStream(filename string) (antlr.CharStream, error) {
	var input antlr.CharStream
	input, err := antlr.NewFileStream(filepath.Join("..", filename))
	if err != nil {
		return nil, err
	}

	return input, nil
}

// TODO Add an Example func

func TestmumpsLexer(t *testing.T) {
	for _, file := range examples {
		input, err := newCharStream(file)
		if err != nil {
			t.Errorf("Failed to open example file: %s", err)
		}

		// Create the Lexer
		lexer := mumps.NewmumpsLexer(input)

		// Try and read all tokens
		i := 0
		for ; i < MAX_TOKENS; i++ {
			t := lexer.NextToken()
			if t.GetTokenType() == antlr.TokenEOF {
				break
			}
		}

		// If we read too many tokens, then perhaps there is a problem with the lexer.
		if i == MAX_TOKENS {
			t.Errorf("NewmumpsLexer(%q) read %d tokens without finding EOF", file, i)
		}
	}
}

func TestmumpsParser(t *testing.T) {
	for _, file := range examples {
		input, err := newCharStream(file)
		if err != nil {
			t.Errorf("Failed to open example file: %s", err)
		}

		// Create the Lexer
		lexer := mumps.NewmumpsLexer(input)
		stream := antlr.NewCommonTokenStream(lexer, antlr.TokenDefaultChannel)

		// Create the Parser
		p := mumps.NewmumpsParser(stream)
		p.BuildParseTrees = true
		p.AddErrorListener(antlr.NewDiagnosticErrorListener(true)) // TODO Change this
		p.AddErrorListener(antlr.NewConsoleErrorListener())

		// Finally test
		p.Program()

		// TODO Check for errors
	}
}
